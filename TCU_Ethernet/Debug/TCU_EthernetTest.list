
TCU_EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017df0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f68  08017f80  08017f80  00018f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bee8  0801bee8  0001d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bee8  0801bee8  0001cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bef0  0801bef0  0001d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bef0  0801bef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bef4  0801bef4  0001cef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801bef8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d08c  2**0
                  CONTENTS
 10 .bss          0000dac0  2000008c  2000008c  0001d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000db4c  2000db4c  0001d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030dbd  00000000  00000000  0001d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b35  00000000  00000000  0004de79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002100  00000000  00000000  000559b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a47  00000000  00000000  00057ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034200  00000000  00000000  000594f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035aec  00000000  00000000  0008d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef04a  00000000  00000000  000c31e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b222d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009184  00000000  00000000  001b2270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001bb3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017f68 	.word	0x08017f68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08017f68 	.word	0x08017f68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200000a8 	.word	0x200000a8
 80005a0:	20000148 	.word	0x20000148

080005a4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串�?????????
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <__io_putchar+0x20>)
 80005b6:	f004 f80e 	bl	80045d6 <HAL_UART_Transmit>
    return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000370 	.word	0x20000370

080005c8 <configCANFilters>:
	    if(HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
	    {
	        Error_Handler();
	    }
}
void configCANFilters(CAN_HandleTypeDef* canHandle){	//Without filtered any CAN msgs
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	@ 0x30
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef sFilterConfig;

    // Configure the filter to accept all messages
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d4:	2301      	movs	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    sFilterConfig.FilterBank = 0;  // Use filter bank 0
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

    // From the reference manual, it seems that setting SlaveStartFilterBank to 0 means all filters are used for the enabled CAN peripheral
    // TODO: Verify this is the correct config
    sFilterConfig.SlaveStartFilterBank = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f001 f90a 	bl	8001818 <HAL_CAN_ConfigFilter>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <configCANFilters+0x46>
    {
        Error_Handler();
 800060a:	f000 fa7f 	bl	8000b0c <Error_Handler>
    }
}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	@ 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t fifo0=0,fifo1=0;
char globalmsg[128];	//transfer msgs to string
int msg_len;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b09f      	sub	sp, #124	@ 0x7c
 800061c:	af08      	add	r7, sp, #32
 800061e:	6078      	str	r0, [r7, #4]
	fifo0++;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800062a:	801a      	strh	r2, [r3, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800062c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000630:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f001 fa12 	bl	8001a60 <HAL_CAN_GetRxMessage>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d126      	bne.n	8000690 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
    {
    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
    	    				   "%02X%02X%02X%02X%02X%02X%02X%02X",
    	    				   RxData[0], RxData[1], RxData[2], RxData[3],
 8000642:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
 8000646:	469c      	mov	ip, r3
    	    				   RxData[0], RxData[1], RxData[2], RxData[3],
 8000648:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800064c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000650:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
    	    				   RxData[4], RxData[5], RxData[6], RxData[7]);
 8000654:	f897 0038 	ldrb.w	r0, [r7, #56]	@ 0x38
 8000658:	f897 4039 	ldrb.w	r4, [r7, #57]	@ 0x39
 800065c:	f897 503a 	ldrb.w	r5, [r7, #58]	@ 0x3a
 8000660:	f897 603b 	ldrb.w	r6, [r7, #59]	@ 0x3b
    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
 8000664:	9606      	str	r6, [sp, #24]
 8000666:	9505      	str	r5, [sp, #20]
 8000668:	9404      	str	r4, [sp, #16]
 800066a:	9003      	str	r0, [sp, #12]
 800066c:	9102      	str	r1, [sp, #8]
 800066e:	9201      	str	r2, [sp, #4]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4663      	mov	r3, ip
 8000674:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800067a:	f016 f9f7 	bl	8016a6c <sniprintf>
 800067e:	4603      	mov	r3, r0
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000682:	6013      	str	r3, [r2, #0]

    	add_or_update_data(RxHeader.ExtId, globalmsg);
 8000684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000686:	4910      	ldr	r1, [pc, #64]	@ (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fce1 	bl	8001050 <add_or_update_data>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         // if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //         //     /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         // }
    // }
}
 800068e:	e012      	b.n	80006b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
        uint8_t msg[] = "Failed to receive CAN message from FIFO0\n";
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000692:	f107 0408 	add.w	r4, r7, #8
 8000696:	461d      	mov	r5, r3
 8000698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	c403      	stmia	r4!, {r0, r1}
 80006a6:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80006a8:	f107 0108 	add.w	r1, r7, #8
 80006ac:	2364      	movs	r3, #100	@ 0x64
 80006ae:	222a      	movs	r2, #42	@ 0x2a
 80006b0:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80006b2:	f003 ff90 	bl	80045d6 <HAL_UART_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	375c      	adds	r7, #92	@ 0x5c
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006be:	bf00      	nop
 80006c0:	200003b8 	.word	0x200003b8
 80006c4:	08017f80 	.word	0x08017f80
 80006c8:	200003bc 	.word	0x200003bc
 80006cc:	2000043c 	.word	0x2000043c
 80006d0:	08017fa4 	.word	0x08017fa4
 80006d4:	20000370 	.word	0x20000370

080006d8 <HAL_CAN_RxFifo1MsgPendingCallback>:

//Currently not used (we use FIFO0)
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	fifo1++;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80006ea:	801a      	strh	r2, [r3, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 80006ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006f0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80006f4:	2101      	movs	r1, #1
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 f9b2 	bl	8001a60 <HAL_CAN_GetRxMessage>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d012      	beq.n	8000728 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>
    {
        uint8_t msg[] = "Failed to receive CAN message from FIFO1\n";
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000704:	f107 0408 	add.w	r4, r7, #8
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	c403      	stmia	r4!, {r0, r1}
 8000718:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 800071a:	f107 0108 	add.w	r1, r7, #8
 800071e:	2364      	movs	r3, #100	@ 0x64
 8000720:	222a      	movs	r2, #42	@ 0x2a
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000724:	f003 ff57 	bl	80045d6 <HAL_UART_Transmit>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //             /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         }
    // }
}
 8000728:	bf00      	nop
 800072a:	3758      	adds	r7, #88	@ 0x58
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	200003ba 	.word	0x200003ba
 8000734:	08017fd0 	.word	0x08017fd0
 8000738:	20000370 	.word	0x20000370

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b09a      	sub	sp, #104	@ 0x68
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fed7 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f87f 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f947 	bl	80009dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800074e:	f000 f91b 	bl	8000988 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000752:	f000 f8e3 	bl	800091c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configCANFilters(&hcan1);
 8000756:	4836      	ldr	r0, [pc, #216]	@ (8000830 <main+0xf4>)
 8000758:	f7ff ff36 	bl	80005c8 <configCANFilters>
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800075c:	4834      	ldr	r0, [pc, #208]	@ (8000830 <main+0xf4>)
 800075e:	f001 f93b 	bl	80019d8 <HAL_CAN_Start>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <main+0x54>
         uint8_t msg[] = "Failed to start CAN!\n";
 8000768:	4b32      	ldr	r3, [pc, #200]	@ (8000834 <main+0xf8>)
 800076a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800076e:	461d      	mov	r5, r3
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000778:	6020      	str	r0, [r4, #0]
 800077a:	3404      	adds	r4, #4
 800077c:	8021      	strh	r1, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 800077e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	2216      	movs	r2, #22
 8000786:	482c      	ldr	r0, [pc, #176]	@ (8000838 <main+0xfc>)
 8000788:	f003 ff25 	bl	80045d6 <HAL_UART_Transmit>
     return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e04a      	b.n	8000826 <main+0xea>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000790:	2102      	movs	r1, #2
 8000792:	4827      	ldr	r0, [pc, #156]	@ (8000830 <main+0xf4>)
 8000794:	f001 fa76 	bl	8001c84 <HAL_CAN_ActivateNotification>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d012      	beq.n	80007c4 <main+0x88>
   {
         uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <main+0x100>)
 80007a0:	463c      	mov	r4, r7
 80007a2:	461d      	mov	r5, r3
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	8023      	strh	r3, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80007b4:	4639      	mov	r1, r7
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	2232      	movs	r2, #50	@ 0x32
 80007ba:	481f      	ldr	r0, [pc, #124]	@ (8000838 <main+0xfc>)
 80007bc:	f003 ff0b 	bl	80045d6 <HAL_UART_Transmit>
       return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e030      	b.n	8000826 <main+0xea>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80007c4:	2110      	movs	r1, #16
 80007c6:	481a      	ldr	r0, [pc, #104]	@ (8000830 <main+0xf4>)
 80007c8:	f001 fa5c 	bl	8001c84 <HAL_CAN_ActivateNotification>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d012      	beq.n	80007f8 <main+0xbc>
   {
         uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <main+0x100>)
 80007d4:	463c      	mov	r4, r7
 80007d6:	461d      	mov	r5, r3
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	8023      	strh	r3, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80007e8:	4639      	mov	r1, r7
 80007ea:	2364      	movs	r3, #100	@ 0x64
 80007ec:	2232      	movs	r2, #50	@ 0x32
 80007ee:	4812      	ldr	r0, [pc, #72]	@ (8000838 <main+0xfc>)
 80007f0:	f003 fef1 	bl	80045d6 <HAL_UART_Transmit>
       return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e016      	b.n	8000826 <main+0xea>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <main+0x104>)
 80007fa:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80007fe:	461d      	mov	r5, r3
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800080c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 f8a4 	bl	8005960 <osThreadCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <main+0x108>)
 800081c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081e:	f005 f888 	bl	8005932 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <main+0xe6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000826:	4618      	mov	r0, r3
 8000828:	3768      	adds	r7, #104	@ 0x68
 800082a:	46bd      	mov	sp, r7
 800082c:	bdb0      	pop	{r4, r5, r7, pc}
 800082e:	bf00      	nop
 8000830:	20000348 	.word	0x20000348
 8000834:	08017ffc 	.word	0x08017ffc
 8000838:	20000370 	.word	0x20000370
 800083c:	08018014 	.word	0x08018014
 8000840:	08018054 	.word	0x08018054
 8000844:	200003b4 	.word	0x200003b4

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f016 faba 	bl	8016dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	@ (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008bc:	2350      	movs	r3, #80	@ 0x50
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f99d 	bl	8003c0c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f918 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fbfe 	bl	80040fc <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000906:	f000 f901 	bl	8000b0c <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	@ 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <MX_CAN1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000928:	2204      	movs	r2, #4
 800092a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_CAN1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_CAN1_Init+0x64>)
 800093a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800093e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_CAN1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_CAN1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_CAN1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_CAN1_Init+0x64>)
 800096c:	f000 fe58 	bl	8001620 <HAL_CAN_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000976:	f000 f8c9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000348 	.word	0x20000348
 8000984:	40006400 	.word	0x40006400

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <MX_USART1_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f003 fdbc 	bl	800453c <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f89f 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000370 	.word	0x20000370
 80009d8:	40011000 	.word	0x40011000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a24      	ldr	r2, [pc, #144]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_GPIO_Init+0xbc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

}
 8000a8a:	bf00      	nop
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	f5ad 6dc5 	sub.w	sp, sp, #1576	@ 0x628
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 8000aa8:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000aac:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000aae:	f004 f907 	bl	8004cc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //  TCP_Client_Init();
    int soctemp=create_tcp_client(); //$
 8000ab2:	f000 fa43 	bl	8000f3c <create_tcp_client>
 8000ab6:	f8c7 0624 	str.w	r0, [r7, #1572]	@ 0x624
  //  double t=0,y=0;
    int t=0,y=0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
  //  uint8_t send_buf[30];
    void init_dataItems();
    /* Infinite loop */

    for(;;){
    	printf("CAN: 0:%u,1:%u\r\n",fifo0,fifo1);
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <StartDefaultTask+0x60>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <StartDefaultTask+0x64>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <StartDefaultTask+0x68>)
 8000ad4:	f016 f91e 	bl	8016d14 <iprintf>
    	tcp_client_send(soctemp, get_all_data_str());
 8000ad8:	f000 fb50 	bl	800117c <get_all_data_str>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f8d7 0624 	ldr.w	r0, [r7, #1572]	@ 0x624
 8000ae4:	f000 fa68 	bl	8000fb8 <tcp_client_send>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <StartDefaultTask+0x6c>)
 8000aec:	f003 f874 	bl	8003bd8 <HAL_GPIO_TogglePin>
    	osDelay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af4:	f004 ff80 	bl	80059f8 <osDelay>
    	printf("CAN: 0:%u,1:%u\r\n",fifo0,fifo1);
 8000af8:	bf00      	nop
 8000afa:	e7e4      	b.n	8000ac6 <StartDefaultTask+0x2a>
 8000afc:	200003b8 	.word	0x200003b8
 8000b00:	200003ba 	.word	0x200003ba
 8000b04:	08018070 	.word	0x08018070
 8000b08:	40020400 	.word	0x40020400

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f001 fbb8 	bl	80022d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a29      	ldr	r2, [pc, #164]	@ (8000c34 <HAL_CAN_MspInit+0xc4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d14b      	bne.n	8000c2a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a27      	ldr	r2, [pc, #156]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000b9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <HAL_CAN_MspInit+0xc8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bda:	2309      	movs	r3, #9
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4815      	ldr	r0, [pc, #84]	@ (8000c3c <HAL_CAN_MspInit+0xcc>)
 8000be6:	f002 fe5b 	bl	80038a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	2013      	movs	r0, #19
 8000bf0:	f001 fb6f 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bf4:	2013      	movs	r0, #19
 8000bf6:	f001 fb88 	bl	800230a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2105      	movs	r1, #5
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f001 fb67 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c04:	2014      	movs	r0, #20
 8000c06:	f001 fb80 	bl	800230a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2105      	movs	r1, #5
 8000c0e:	2015      	movs	r0, #21
 8000c10:	f001 fb5f 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c14:	2015      	movs	r0, #21
 8000c16:	f001 fb78 	bl	800230a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2016      	movs	r0, #22
 8000c20:	f001 fb57 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c24:	2016      	movs	r0, #22
 8000c26:	f001 fb70 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40006400 	.word	0x40006400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_UART_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <HAL_UART_MspInit+0x8c>)
 8000cb8:	f002 fdf2 	bl	80038a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40011000 	.word	0x40011000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 fc45 	bl	8001598 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d0e:	f006 ffb5 	bl	8007c7c <xTaskGetSchedulerState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d001      	beq.n	8000d1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d18:	f007 fb96 	bl	8008448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN1_TX_IRQHandler+0x10>)
 8000d26:	f000 ffd3 	bl	8001cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000348 	.word	0x20000348

08000d34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <CAN1_RX0_IRQHandler+0x10>)
 8000d3a:	f000 ffc9 	bl	8001cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000348 	.word	0x20000348

08000d48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <CAN1_RX1_IRQHandler+0x10>)
 8000d4e:	f000 ffbf 	bl	8001cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000348 	.word	0x20000348

08000d5c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <CAN1_SCE_IRQHandler+0x10>)
 8000d62:	f000 ffb5 	bl	8001cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000348 	.word	0x20000348

08000d70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <ETH_IRQHandler+0x10>)
 8000d76:	f001 febd 	bl	8002af4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000625c 	.word	0x2000625c

08000d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_kill>:

int _kill(int pid, int sig)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <_kill+0x20>)
 8000da0:	2216      	movs	r2, #22
 8000da2:	601a      	str	r2, [r3, #0]
	return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	2000db3c 	.word	0x2000db3c

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe5 	bl	8000d94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dca:	bf00      	nop
 8000dcc:	e7fd      	b.n	8000dca <_exit+0x12>

08000dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e00a      	b.n	8000df6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000de0:	f3af 8000 	nop.w
 8000de4:	4601      	mov	r1, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	b2ca      	uxtb	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf0      	blt.n	8000de0 <_read+0x12>
	}

return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e009      	b.n	8000e2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	60ba      	str	r2, [r7, #8]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbbe 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf1      	blt.n	8000e1a <_write+0x12>
	}
	return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_close>:

int _close(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e68:	605a      	str	r2, [r3, #4]
	return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_isatty>:

int _isatty(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
	return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d205      	bcs.n	8000ee4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <_sbrk+0x6c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000440 	.word	0x20000440
 8000f10:	2000db50 	.word	0x2000db50
 8000f14:	2000db3c 	.word	0x2000db3c

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <create_tcp_client>:
//#define SERVER_IP "192.168.2.19" // 本地 - Andrew's local PC address
//#define SERVER_IP "192.168.2.89" // 本地PC - Andrew's local PC address
//#define SERVER_IP "192.168.56.1" // 本地 - Andrew's local PC address
#define SERVER_PORT 2333         // 服务器端口号 - Server port number

int create_tcp_client(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
    int sock;
    struct sockaddr_in server_address;

    // 创建socket
    sock = lwip_socket(AF_INET, SOCK_STREAM, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2101      	movs	r1, #1
 8000f46:	2002      	movs	r0, #2
 8000f48:	f009 fe4c 	bl	800abe4 <lwip_socket>
 8000f4c:	6178      	str	r0, [r7, #20]
    if (sock < 0) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da05      	bge.n	8000f60 <create_tcp_client+0x24>
    	printf("soc create error...\n\r");
 8000f54:	4815      	ldr	r0, [pc, #84]	@ (8000fac <create_tcp_client+0x70>)
 8000f56:	f015 fedd 	bl	8016d14 <iprintf>
        return -1; // Socket创建失败
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f5e:	e020      	b.n	8000fa2 <create_tcp_client+0x66>
    }

    // 设置服务器地址
    server_address.sin_family = AF_INET;
 8000f60:	2302      	movs	r3, #2
 8000f62:	717b      	strb	r3, [r7, #5]
    server_address.sin_port = htons(SERVER_PORT);
 8000f64:	f640 101d 	movw	r0, #2333	@ 0x91d
 8000f68:	f00a f9e0 	bl	800b32c <lwip_htons>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	80fb      	strh	r3, [r7, #6]
    inet_aton(SERVER_IP, &server_address.sin_addr.s_addr);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	3304      	adds	r3, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <create_tcp_client+0x74>)
 8000f78:	f014 fb58 	bl	801562c <ip4addr_aton>

    // 连接服务器
    if (lwip_connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2210      	movs	r2, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f009 fc9e 	bl	800a8c4 <lwip_connect>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da08      	bge.n	8000fa0 <create_tcp_client+0x64>
        lwip_close(sock);
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f009 fc42 	bl	800a818 <lwip_close>
    	printf("connect error...\n\r");
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <create_tcp_client+0x78>)
 8000f96:	f015 febd 	bl	8016d14 <iprintf>
        return -2; // 连接失败
 8000f9a:	f06f 0301 	mvn.w	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <create_tcp_client+0x66>
    }

    return sock; // 返回socket描述符
 8000fa0:	697b      	ldr	r3, [r7, #20]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08018084 	.word	0x08018084
 8000fb0:	0801809c 	.word	0x0801809c
 8000fb4:	080180ac 	.word	0x080180ac

08000fb8 <tcp_client_send>:
void tcp_client_send(int sock, const char *data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	err_t err;
    err = lwip_send(sock, data, strlen(data), 0);
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f7ff f904 	bl	80001d0 <strlen>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2300      	movs	r3, #0
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f009 fcf8 	bl	800a9c4 <lwip_send>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
//		printf("memerr..\n\r");
		// 处理错误
		// ERR_MEM 如果发送缓冲区太小不能放下全部数据
		// 其他错误码表示其他问题
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <init_dataItems>:
//
DataItem dataItems[MAX_DATA];
SemaphoreHandle_t dataMutex;

//初始化存储空间
void init_dataItems() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
//    dataMutex = xSemaphoreCreateMutex();
    for (int i = 0; i < MAX_DATA; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e027      	b.n	800103c <init_dataItems+0x5c>
        dataItems[i].id = -1;  // 使用-1表示该位置为空
 8000fec:	4917      	ldr	r1, [pc, #92]	@ (800104c <init_dataItems+0x6c>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ffe:	601a      	str	r2, [r3, #0]
        memset(dataItems[i].data, 0, sizeof(dataItems[i].data));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <init_dataItems+0x6c>)
 800100c:	4413      	add	r3, r2
 800100e:	3304      	adds	r3, #4
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f015 fedb 	bl	8016dd0 <memset>
        memset(dataItems[i].str, 0, sizeof(dataItems[i].str));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	3320      	adds	r3, #32
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <init_dataItems+0x6c>)
 8001028:	4413      	add	r3, r2
 800102a:	3304      	adds	r3, #4
 800102c:	2220      	movs	r2, #32
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f015 fecd 	bl	8016dd0 <memset>
    for (int i = 0; i < MAX_DATA; i++) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b31      	cmp	r3, #49	@ 0x31
 8001040:	ddd4      	ble.n	8000fec <init_dataItems+0xc>
    }
//    xSemaphoreGive(dataMutex);
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000444 	.word	0x20000444

08001050 <add_or_update_data>:

//产生新数据
void add_or_update_data(int id, char data[]) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b087      	sub	sp, #28
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]

//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    int emptyIndex = -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105e:	60fb      	str	r3, [r7, #12]
//printf("running..\n");
    for (int i = 0; i < MAX_DATA; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	e049      	b.n	80010fa <add_or_update_data+0xaa>
        if (dataItems[i].id == id) {  // 找到相同ID，更新数据
 8001066:	4943      	ldr	r1, [pc, #268]	@ (8001174 <add_or_update_data+0x124>)
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d12a      	bne.n	80010d2 <add_or_update_data+0x82>
        	 strncpy(dataItems[i].data, data, sizeof(dataItems[i].data) - 1);
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4a3b      	ldr	r2, [pc, #236]	@ (8001174 <add_or_update_data+0x124>)
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	221f      	movs	r2, #31
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f015 fe60 	bl	8016d56 <strncpy>
        	 dataItems[i].data[sizeof(dataItems[i].data) - 1] = '\0'; // 确保字符串以null结尾
 8001096:	4937      	ldr	r1, [pc, #220]	@ (8001174 <add_or_update_data+0x124>)
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3323      	adds	r3, #35	@ 0x23
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
            sprintf(dataItems[i].str, ",%08lXx%08X%s\n", xTaskGetTickCount(), id, data);
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	4613      	mov	r3, r2
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	3320      	adds	r3, #32
 80010b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001174 <add_or_update_data+0x124>)
 80010b8:	4413      	add	r3, r2
 80010ba:	1d1c      	adds	r4, r3, #4
 80010bc:	f006 fab2 	bl	8007624 <xTaskGetTickCount>
 80010c0:	4602      	mov	r2, r0
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	492b      	ldr	r1, [pc, #172]	@ (8001178 <add_or_update_data+0x128>)
 80010ca:	4620      	mov	r0, r4
 80010cc:	f015 fd02 	bl	8016ad4 <siprintf>
//            xSemaphoreGive(dataMutex);
            return;
 80010d0:	e04d      	b.n	800116e <add_or_update_data+0x11e>
        }
        if (dataItems[i].id == -1 && emptyIndex == -1) {  // 记录第一个空位
 80010d2:	4928      	ldr	r1, [pc, #160]	@ (8001174 <add_or_update_data+0x124>)
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010e6:	d105      	bne.n	80010f4 <add_or_update_data+0xa4>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ee:	d101      	bne.n	80010f4 <add_or_update_data+0xa4>
            emptyIndex = i;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < MAX_DATA; i++) {
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b31      	cmp	r3, #49	@ 0x31
 80010fe:	ddb2      	ble.n	8001066 <add_or_update_data+0x16>
        }
    }

    if (emptyIndex != -1) {  // 有空位，添加新数据
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001106:	d032      	beq.n	800116e <add_or_update_data+0x11e>
        dataItems[emptyIndex].id = id;
 8001108:	491a      	ldr	r1, [pc, #104]	@ (8001174 <add_or_update_data+0x124>)
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
   	 strncpy(dataItems[emptyIndex].data, data, sizeof(dataItems[emptyIndex].data) - 1);
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4613      	mov	r3, r2
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4a13      	ldr	r2, [pc, #76]	@ (8001174 <add_or_update_data+0x124>)
 8001126:	4413      	add	r3, r2
 8001128:	3304      	adds	r3, #4
 800112a:	221f      	movs	r2, #31
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f015 fe11 	bl	8016d56 <strncpy>
   	 dataItems[emptyIndex].data[sizeof(dataItems[emptyIndex].data) - 1] = '\0'; // 确保字符串以null结尾
 8001134:	490f      	ldr	r1, [pc, #60]	@ (8001174 <add_or_update_data+0x124>)
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3323      	adds	r3, #35	@ 0x23
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
        sprintf(dataItems[emptyIndex].str, ",%08lXx%08X%s\n", xTaskGetTickCount(), id, data);
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	4613      	mov	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	3320      	adds	r3, #32
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <add_or_update_data+0x124>)
 8001156:	4413      	add	r3, r2
 8001158:	1d1c      	adds	r4, r3, #4
 800115a:	f006 fa63 	bl	8007624 <xTaskGetTickCount>
 800115e:	4602      	mov	r2, r0
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4904      	ldr	r1, [pc, #16]	@ (8001178 <add_or_update_data+0x128>)
 8001168:	4620      	mov	r0, r4
 800116a:	f015 fcb3 	bl	8016ad4 <siprintf>
    }

//    xSemaphoreGive(dataMutex);
}
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	20000444 	.word	0x20000444
 8001178:	0801819c 	.word	0x0801819c

0800117c <get_all_data_str>:

char* get_all_data_str() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
    static char allDataStr[MAX_DATA * 29];  // 需要足够大的空间来存储所有字符串
//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    strcpy(allDataStr, "");  // 初始化字符串
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <get_all_data_str+0x5c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < MAX_DATA; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	e01a      	b.n	80011c4 <get_all_data_str+0x48>
        if (dataItems[i].id != -1) {
 800118e:	4913      	ldr	r1, [pc, #76]	@ (80011dc <get_all_data_str+0x60>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011a2:	d00c      	beq.n	80011be <get_all_data_str+0x42>
            strcat(allDataStr, dataItems[i].str);
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	3320      	adds	r3, #32
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <get_all_data_str+0x60>)
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <get_all_data_str+0x5c>)
 80011ba:	f015 fdbd 	bl	8016d38 <strcat>
    for (int i = 0; i < MAX_DATA; i++) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b31      	cmp	r3, #49	@ 0x31
 80011c8:	dde1      	ble.n	800118e <get_all_data_str+0x12>
        }
    }
//    strcat(allDataStr, '\n');
//    printf(allDataStr);
//    xSemaphoreGive(dataMutex);
    init_dataItems();
 80011ca:	f7ff ff09 	bl	8000fe0 <init_dataItems>
    return allDataStr;
 80011ce:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <get_all_data_str+0x5c>)
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000118c 	.word	0x2000118c
 80011dc:	20000444 	.word	0x20000444

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	@ (8001220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	@ (800122c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120a:	f7ff fe85 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f015 fe3d 	bl	8016e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fa93 	bl	800073c <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001224:	0801bef8 	.word	0x0801bef8
  ldr r2, =_sbss
 8001228:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800122c:	2000db4c 	.word	0x2000db4c

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>

08001232 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <DP83848_RegisterBusIO+0x28>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <DP83848_RegisterBusIO+0x28>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <DP83848_RegisterBusIO+0x28>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800125e:	e014      	b.n	800128a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d17c      	bne.n	80013b0 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2220      	movs	r2, #32
 80012c8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e01c      	b.n	800130a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f107 0208 	add.w	r2, r7, #8
 80012d8:	2119      	movs	r1, #25
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	4798      	blx	r3
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da03      	bge.n	80012ec <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80012e4:	f06f 0304 	mvn.w	r3, #4
 80012e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80012ea:	e00b      	b.n	8001304 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d105      	bne.n	8001304 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
         break;
 8001302:	e005      	b.n	8001310 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b1f      	cmp	r3, #31
 800130e:	d9df      	bls.n	80012d0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b1f      	cmp	r3, #31
 8001316:	d902      	bls.n	800131e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001318:	f06f 0302 	mvn.w	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d145      	bne.n	80013b0 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6810      	ldr	r0, [r2, #0]
 800132c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001330:	2100      	movs	r1, #0
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	db37      	blt.n	80013aa <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6810      	ldr	r0, [r2, #0]
 8001342:	f107 0208 	add.w	r2, r7, #8
 8001346:	2100      	movs	r1, #0
 8001348:	4798      	blx	r3
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	db28      	blt.n	80013a2 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800135a:	e01c      	b.n	8001396 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4798      	blx	r3
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800136e:	d80e      	bhi.n	800138e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6810      	ldr	r0, [r2, #0]
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	2100      	movs	r1, #0
 800137e:	4798      	blx	r3
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	da07      	bge.n	8001396 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001386:	f06f 0304 	mvn.w	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
                 break;
 800138c:	e010      	b.n	80013b0 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800138e:	f06f 0301 	mvn.w	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
               break;
 8001394:	e00c      	b.n	80013b0 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1dd      	bne.n	800135c <DP83848_Init+0xc6>
 80013a0:	e006      	b.n	80013b0 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80013a2:	f06f 0304 	mvn.w	r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	e002      	b.n	80013b0 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80013aa:	f06f 0303 	mvn.w	r3, #3
 80013ae:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d112      	bne.n	80013dc <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80013c0:	bf00      	nop
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4798      	blx	r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013d4:	d9f5      	bls.n	80013c2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	605a      	str	r2, [r3, #4]
   }

   return status;
 80013dc:	693b      	ldr	r3, [r7, #16]
 }
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	2101      	movs	r1, #1
 8001400:	4798      	blx	r3
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	da02      	bge.n	800140e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001408:	f06f 0304 	mvn.w	r3, #4
 800140c:	e06e      	b.n	80014ec <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6810      	ldr	r0, [r2, #0]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	2101      	movs	r1, #1
 800141c:	4798      	blx	r3
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	da02      	bge.n	800142a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001424:	f06f 0304 	mvn.w	r3, #4
 8001428:	e060      	b.n	80014ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001434:	2301      	movs	r3, #1
 8001436:	e059      	b.n	80014ec <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6810      	ldr	r0, [r2, #0]
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	2100      	movs	r1, #0
 8001446:	4798      	blx	r3
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	da02      	bge.n	8001454 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800144e:	f06f 0304 	mvn.w	r3, #4
 8001452:	e04b      	b.n	80014ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d11b      	bne.n	8001496 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <DP83848_GetLinkState+0x90>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001472:	2302      	movs	r3, #2
 8001474:	e03a      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001480:	2303      	movs	r3, #3
 8001482:	e033      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800148e:	2304      	movs	r3, #4
 8001490:	e02c      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001492:	2305      	movs	r3, #5
 8001494:	e02a      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6810      	ldr	r0, [r2, #0]
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	2110      	movs	r1, #16
 80014a4:	4798      	blx	r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da02      	bge.n	80014b2 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80014ac:	f06f 0304 	mvn.w	r3, #4
 80014b0:	e01c      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80014bc:	2306      	movs	r3, #6
 80014be:	e015      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0306 	and.w	r3, r3, #6
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d101      	bne.n	80014ce <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e00e      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0306 	and.w	r3, r3, #6
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80014d8:	2303      	movs	r3, #3
 80014da:	e007      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0306 	and.w	r3, r3, #6
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d101      	bne.n	80014ea <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80014e6:	2304      	movs	r3, #4
 80014e8:	e000      	b.n	80014ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80014ea:	2305      	movs	r3, #5
    }
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fecd 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff faf6 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fee5 	bl	8002326 <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001574:	f000 fead 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20001738 	.word	0x20001738

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20001738 	.word	0x20001738

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0ed      	b.n	800180e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fa96 	bl	8000b70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ffb4 	bl	80015c0 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ffb0 	bl	80015c0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0c5      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0202 	bic.w	r2, r2, #2
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff ff8e 	bl	80015c0 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	e012      	b.n	80016ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a8:	f7ff ff8a 	bl	80015c0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d90b      	bls.n	80016ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09f      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e007      	b.n	8001730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e9b      	ldrb	r3, [r3, #26]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e007      	b.n	800175a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0220 	bic.w	r2, r2, #32
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7edb      	ldrb	r3, [r3, #27]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0210 	bic.w	r2, r2, #16
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e007      	b.n	8001784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7f1b      	ldrb	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e007      	b.n	80017ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7f5b      	ldrb	r3, [r3, #29]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <HAL_CAN_ConfigFilter+0x26>
 8001836:	7cfb      	ldrb	r3, [r7, #19]
 8001838:	2b02      	cmp	r3, #2
 800183a:	f040 80be 	bne.w	80019ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800183e:	4b65      	ldr	r3, [pc, #404]	@ (80019d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001840:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001858:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	431a      	orrs	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2201      	movs	r2, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	401a      	ands	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d123      	bne.n	80018e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3248      	adds	r2, #72	@ 0x48
 80018c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	3348      	adds	r3, #72	@ 0x48
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d122      	bne.n	8001936 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3248      	adds	r2, #72	@ 0x48
 8001916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	3348      	adds	r3, #72	@ 0x48
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001950:	e007      	b.n	8001962 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	431a      	orrs	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800197c:	e007      	b.n	800198e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	431a      	orrs	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019ac:	f023 0201 	bic.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e006      	b.n	80019c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
  }
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40006400 	.word	0x40006400

080019d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d12e      	bne.n	8001a4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fddc 	bl	80015c0 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a0a:	e012      	b.n	8001a32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a0c:	f7ff fdd8 	bl	80015c0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d90b      	bls.n	8001a32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e012      	b.n	8001a58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e5      	bne.n	8001a0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e006      	b.n	8001a58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d003      	beq.n	8001a84 <HAL_CAN_GetRxMessage+0x24>
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	f040 80f3 	bne.w	8001c6a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d116      	bne.n	8001ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0e7      	b.n	8001c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0d8      	b.n	8001c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	331b      	adds	r3, #27
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0204 	and.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	331b      	adds	r3, #27
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0d5b      	lsrs	r3, r3, #21
 8001af4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e00b      	b.n	8001b16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	331b      	adds	r3, #27
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	331b      	adds	r3, #27
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0202 	and.w	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	331b      	adds	r3, #27
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	331b      	adds	r3, #27
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0a1a      	lsrs	r2, r3, #8
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0c1a      	lsrs	r2, r3, #16
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0e1a      	lsrs	r2, r3, #24
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3304      	adds	r3, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0a1a      	lsrs	r2, r3, #8
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3305      	adds	r3, #5
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0c1a      	lsrs	r2, r3, #16
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3306      	adds	r3, #6
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e1a      	lsrs	r2, r3, #24
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3307      	adds	r3, #7
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d108      	bne.n	8001c56 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	e007      	b.n	8001c66 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e006      	b.n	8001c78 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d002      	beq.n	8001ca2 <HAL_CAN_ActivateNotification+0x1e>
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d109      	bne.n	8001cb6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d07c      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d023      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f983 	bl	800203e <HAL_CAN_TxMailbox0CompleteCallback>
 8001d38:	e016      	b.n	8001d68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	e00c      	b.n	8001d68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	e002      	b.n	8001d68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f989 	bl	800207a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d024      	beq.n	8001dbc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f963 	bl	8002052 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d8c:	e016      	b.n	8001dbc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	e00c      	b.n	8001dbc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db4:	e002      	b.n	8001dbc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f969 	bl	800208e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d024      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f943 	bl	8002066 <HAL_CAN_TxMailbox2CompleteCallback>
 8001de0:	e016      	b.n	8001e10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df4:	e00c      	b.n	8001e10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e08:	e002      	b.n	8001e10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f949 	bl	80020a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f930 	bl	80020b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fbd2 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2210      	movs	r2, #16
 8001e96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f908 	bl	80020ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fc00 	bl	80006d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f8f2 	bl	80020de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2208      	movs	r2, #8
 8001f14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8eb 	bl	80020f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d07b      	beq.n	800201e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d072      	beq.n	8002016 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d008      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d043      	beq.n	8002016 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03e      	beq.n	8002016 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f9e:	2b60      	cmp	r3, #96	@ 0x60
 8001fa0:	d02b      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x32a>
 8001fa2:	2b60      	cmp	r3, #96	@ 0x60
 8001fa4:	d82e      	bhi.n	8002004 <HAL_CAN_IRQHandler+0x334>
 8001fa6:	2b50      	cmp	r3, #80	@ 0x50
 8001fa8:	d022      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x320>
 8001faa:	2b50      	cmp	r3, #80	@ 0x50
 8001fac:	d82a      	bhi.n	8002004 <HAL_CAN_IRQHandler+0x334>
 8001fae:	2b40      	cmp	r3, #64	@ 0x40
 8001fb0:	d019      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x316>
 8001fb2:	2b40      	cmp	r3, #64	@ 0x40
 8001fb4:	d826      	bhi.n	8002004 <HAL_CAN_IRQHandler+0x334>
 8001fb6:	2b30      	cmp	r3, #48	@ 0x30
 8001fb8:	d010      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x30c>
 8001fba:	2b30      	cmp	r3, #48	@ 0x30
 8001fbc:	d822      	bhi.n	8002004 <HAL_CAN_IRQHandler+0x334>
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d002      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x2f8>
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d005      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc6:	e01d      	b.n	8002004 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd0:	e019      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fda:	e014      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe4:	e00f      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fee:	e00a      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ff8:	e005      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002002:	e000      	b.n	8002006 <HAL_CAN_IRQHandler+0x336>
            break;
 8002004:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002014:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2204      	movs	r2, #4
 800201c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f868 	bl	8002106 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	@ (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	@ (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	@ (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff29 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff3e 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff31 	bl	8002180 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06c      	b.n	800242c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2223      	movs	r2, #35	@ 0x23
 8002360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f003 f895 	bl	8005494 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_ETH_Init+0xf4>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a30      	ldr	r2, [pc, #192]	@ (8002434 <HAL_ETH_Init+0xf4>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <HAL_ETH_Init+0xf4>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002386:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <HAL_ETH_Init+0xf8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a2b      	ldr	r2, [pc, #172]	@ (8002438 <HAL_ETH_Init+0xf8>)
 800238c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002390:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002392:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_ETH_Init+0xf8>)
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4927      	ldr	r1, [pc, #156]	@ (8002438 <HAL_ETH_Init+0xf8>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_ETH_Init+0xf8>)
 80023a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff f900 	bl	80015c0 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023c2:	e011      	b.n	80023e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023c4:	f7ff f8fc 	bl	80015c0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023d2:	d909      	bls.n	80023e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2204      	movs	r2, #4
 80023d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	22e0      	movs	r2, #224	@ 0xe0
 80023e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e021      	b.n	800242c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e4      	bne.n	80023c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 ffaa 	bl	8003354 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f001 f851 	bl	80034a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f001 f8a7 	bl	800355a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	461a      	mov	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 f80f 	bl	8003438 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2210      	movs	r2, #16
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40013800 	.word	0x40013800

0800243c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800244a:	2b10      	cmp	r3, #16
 800244c:	d150      	bne.n	80024f0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2223      	movs	r2, #35	@ 0x23
 8002452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa79 	bl	8002954 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff f8ac 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0204 	orr.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff f899 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fdf1 	bl	8003096 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2223      	movs	r2, #35	@ 0x23
 80024e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002508:	2b10      	cmp	r3, #16
 800250a:	d17f      	bne.n	800260c <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2223      	movs	r2, #35	@ 0x23
 8002510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800253e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002552:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2204      	movs	r2, #4
 800255a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f9f9 	bl	8002954 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800257a:	2001      	movs	r0, #1
 800257c:	f7ff f82c 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7ff f819 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fd71 	bl	8003096 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025e2:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80025f6:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80025fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fe:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2223      	movs	r2, #35	@ 0x23
 8002604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002624:	2b23      	cmp	r3, #35	@ 0x23
 8002626:	d170      	bne.n	800270a <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2223      	movs	r2, #35	@ 0x23
 800262c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002642:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002646:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800264a:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800265e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002662:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800267a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002694:	2001      	movs	r0, #1
 8002696:	f7fe ff9f 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fcf7 	bl	8003096 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0208 	bic.w	r2, r2, #8
 80026b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7fe ff89 	bl	80015d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00e      	b.n	80026f2 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	3212      	adds	r2, #18
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d9ed      	bls.n	80026d4 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2210      	movs	r2, #16
 8002702:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e045      	b.n	80027c4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800273e:	2b23      	cmp	r3, #35	@ 0x23
 8002740:	d13f      	bne.n	80027c2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800274a:	2201      	movs	r2, #1
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 ff70 	bl	8003634 <ETH_Prepare_Tx_Descriptors>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002760:	f043 0202 	orr.w	r2, r3, #2
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e02a      	b.n	80027c4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800276e:	f3bf 8f4f 	dsb	sy
}
 8002772:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	629a      	str	r2, [r3, #40]	@ 0x28
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	2b03      	cmp	r3, #3
 8002784:	d904      	bls.n	8002790 <HAL_ETH_Transmit_IT+0x7c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	1f1a      	subs	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027aa:	461a      	mov	r2, r3
 80027ac:	2304      	movs	r3, #4
 80027ae:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b8:	461a      	mov	r2, r3
 80027ba:	2300      	movs	r3, #0
 80027bc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0a8      	b.n	800294a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027fe:	2b23      	cmp	r3, #35	@ 0x23
 8002800:	d001      	beq.n	8002806 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0a1      	b.n	800294a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	3212      	adds	r2, #18
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281c:	f1c3 0304 	rsb	r3, r3, #4
 8002820:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002822:	e06a      	b.n	80028fa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_ETH_ReadData+0x88>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d040      	beq.n	80028d6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002888:	3b04      	subs	r3, #4
 800288a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80028b0:	461a      	mov	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f002 ffc7 	bl	8005848 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	441a      	add	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d902      	bls.n	80028e8 <HAL_ETH_ReadData+0x11c>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b04      	subs	r3, #4
 80028e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	3212      	adds	r2, #18
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3301      	adds	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db06      	blt.n	8002910 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d202      	bcs.n	8002910 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d089      	beq.n	8002824 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	441a      	add	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f815 	bl	8002954 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002968:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	3212      	adds	r2, #18
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800297c:	e040      	b.n	8002a00 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d112      	bne.n	80029ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4618      	mov	r0, r3
 800298c:	f002 ff2c 	bl	80057e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	74fb      	strb	r3, [r7, #19]
 800299a:	e007      	b.n	80029ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d026      	beq.n	8002a00 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <ETH_UpdateDescriptor+0xe4>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e003      	b.n	80029ca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 80029c8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029ca:	f3bf 8f5f 	dmb	sy
}
 80029ce:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	3301      	adds	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d902      	bls.n	80029ee <ETH_UpdateDescriptor+0x9a>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3b04      	subs	r3, #4
 80029ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	3212      	adds	r2, #18
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <ETH_UpdateDescriptor+0xb8>
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1b8      	bne.n	800297e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d00c      	beq.n	8002a30 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	800045f8 	.word	0x800045f8

08002a3c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3318      	adds	r3, #24
 8002a48:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a5a:	e03f      	b.n	8002adc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	db1b      	blt.n	8002ad8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 ff0b 	bl	80058c8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ad6:	e001      	b.n	8002adc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_ETH_ReleaseTxPacket+0xac>
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1b9      	bne.n	8002a5c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b40      	cmp	r3, #64	@ 0x40
 8002b0c:	d112      	bne.n	8002b34 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d109      	bne.n	8002b34 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b50      	ldr	r3, [pc, #320]	@ (8002c6c <HAL_ETH_IRQHandler+0x178>)
 8002b2c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f002 fa16 	bl	8004f60 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d113      	bne.n	8002b6e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10a      	bne.n	8002b6e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b60:	461a      	mov	r2, r3
 8002b62:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002b66:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f002 fa09 	bl	8004f80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b80:	d14c      	bne.n	8002c1c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b94:	d142      	bne.n	8002c1c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	f043 0208 	orr.w	r2, r3, #8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_ETH_IRQHandler+0x17c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002be0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002be4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	22e0      	movs	r2, #224	@ 0xe0
 8002bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002bee:	e012      	b.n	8002c16 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002bfe:	4013      	ands	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002c14:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f002 f9c2 	bl	8004fa0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d10e      	bne.n	8002c48 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f81c 	bl	8002c78 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_ETH_IRQHandler+0x180>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c54:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_ETH_IRQHandler+0x180>)
 8002c56:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002c5a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f815 	bl	8002c8c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	00010040 	.word	0x00010040
 8002c70:	007e2000 	.word	0x007e2000
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 031c 	and.w	r3, r3, #28
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	02db      	lsls	r3, r3, #11
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 0302 	bic.w	r3, r3, #2
 8002cde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002cf0:	f7fe fc66 	bl	80015c0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cf6:	e00d      	b.n	8002d14 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002cf8:	f7fe fc62 	bl	80015c0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d301      	bcc.n	8002d0c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e010      	b.n	8002d2e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ec      	bne.n	8002cf8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 031c 	and.w	r3, r3, #28
 8002d52:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	02db      	lsls	r3, r3, #11
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	019b      	lsls	r3, r3, #6
 8002d64:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d90:	f7fe fc16 	bl	80015c0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d96:	e00d      	b.n	8002db4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002d98:	f7fe fc12 	bl	80015c0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d301      	bcc.n	8002dac <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e009      	b.n	8002dc0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ec      	bne.n	8002d98 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d9      	b.n	8002f90 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf14      	ite	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e00b      	b.n	8002fc8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f88f 	bl	80030e0 <ETH_SetMACConfig>

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 031c 	bic.w	r3, r3, #28
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fe8:	f001 fa74 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 8002fec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d908      	bls.n	8003008 <HAL_ETH_SetMDIOClockRange+0x38>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d804      	bhi.n	8003008 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e027      	b.n	8003058 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4a18      	ldr	r2, [pc, #96]	@ (800306c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d908      	bls.n	8003022 <HAL_ETH_SetMDIOClockRange+0x52>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d204      	bcs.n	8003022 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f043 030c 	orr.w	r3, r3, #12
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e01a      	b.n	8003058 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d303      	bcc.n	8003032 <HAL_ETH_SetMDIOClockRange+0x62>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d911      	bls.n	8003056 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4a0f      	ldr	r2, [pc, #60]	@ (8003074 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d908      	bls.n	800304c <HAL_ETH_SetMDIOClockRange+0x7c>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4a0e      	ldr	r2, [pc, #56]	@ (8003078 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d804      	bhi.n	800304c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e005      	b.n	8003058 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e000      	b.n	8003058 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003056:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	611a      	str	r2, [r3, #16]
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	01312cff 	.word	0x01312cff
 800306c:	02160ebf 	.word	0x02160ebf
 8003070:	03938700 	.word	0x03938700
 8003074:	05f5e0ff 	.word	0x05f5e0ff
 8003078:	08f0d17f 	.word	0x08f0d17f

0800307c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7fe fa86 	bl	80015d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030d6:	6193      	str	r3, [r2, #24]
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4b51      	ldr	r3, [pc, #324]	@ (800323c <ETH_SetMACConfig+0x15c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	7c1b      	ldrb	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <ETH_SetMACConfig+0x28>
 8003102:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003106:	e000      	b.n	800310a <ETH_SetMACConfig+0x2a>
 8003108:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	7c5b      	ldrb	r3, [r3, #17]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <ETH_SetMACConfig+0x38>
 8003112:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003116:	e000      	b.n	800311a <ETH_SetMACConfig+0x3a>
 8003118:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800311a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003120:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	7fdb      	ldrb	r3, [r3, #31]
 8003126:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003128:	431a      	orrs	r2, r3
                        macconf->Speed |
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800312e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	7f92      	ldrb	r2, [r2, #30]
 8003134:	2a00      	cmp	r2, #0
 8003136:	d102      	bne.n	800313e <ETH_SetMACConfig+0x5e>
 8003138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800313c:	e000      	b.n	8003140 <ETH_SetMACConfig+0x60>
 800313e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003140:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7f1b      	ldrb	r3, [r3, #28]
 8003146:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003148:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800314e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	791b      	ldrb	r3, [r3, #4]
 8003154:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003156:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800315e:	2a00      	cmp	r2, #0
 8003160:	d102      	bne.n	8003168 <ETH_SetMACConfig+0x88>
 8003162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003166:	e000      	b.n	800316a <ETH_SetMACConfig+0x8a>
 8003168:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800316a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7bdb      	ldrb	r3, [r3, #15]
 8003170:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003172:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003180:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003182:	4313      	orrs	r3, r2
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800319a:	2001      	movs	r0, #1
 800319c:	f7fe fa1c 	bl	80015d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80031c6:	2a00      	cmp	r2, #0
 80031c8:	d101      	bne.n	80031ce <ETH_SetMACConfig+0xee>
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	e000      	b.n	80031d0 <ETH_SetMACConfig+0xf0>
 80031ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80031de:	2a01      	cmp	r2, #1
 80031e0:	d101      	bne.n	80031e6 <ETH_SetMACConfig+0x106>
 80031e2:	2208      	movs	r2, #8
 80031e4:	e000      	b.n	80031e8 <ETH_SetMACConfig+0x108>
 80031e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80031e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80031f0:	2a01      	cmp	r2, #1
 80031f2:	d101      	bne.n	80031f8 <ETH_SetMACConfig+0x118>
 80031f4:	2204      	movs	r2, #4
 80031f6:	e000      	b.n	80031fa <ETH_SetMACConfig+0x11a>
 80031f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003202:	2a01      	cmp	r2, #1
 8003204:	d101      	bne.n	800320a <ETH_SetMACConfig+0x12a>
 8003206:	2202      	movs	r2, #2
 8003208:	e000      	b.n	800320c <ETH_SetMACConfig+0x12c>
 800320a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800320c:	4313      	orrs	r3, r2
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe f9d7 	bl	80015d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	ff20810f 	.word	0xff20810f

08003240 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <ETH_SetDMAConfig+0x110>)
 800325a:	4013      	ands	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	7b1b      	ldrb	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <ETH_SetDMAConfig+0x2c>
 8003266:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800326a:	e000      	b.n	800326e <ETH_SetDMAConfig+0x2e>
 800326c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	7b5b      	ldrb	r3, [r3, #13]
 8003272:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003274:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	7f52      	ldrb	r2, [r2, #29]
 800327a:	2a00      	cmp	r2, #0
 800327c:	d102      	bne.n	8003284 <ETH_SetDMAConfig+0x44>
 800327e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003282:	e000      	b.n	8003286 <ETH_SetDMAConfig+0x46>
 8003284:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003286:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	7b9b      	ldrb	r3, [r3, #14]
 800328c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800328e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003294:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	7f1b      	ldrb	r3, [r3, #28]
 800329a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800329c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7f9b      	ldrb	r3, [r3, #30]
 80032a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c4:	461a      	mov	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7fe f97e 	bl	80015d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80032fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003300:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003308:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800330a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003312:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003318:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003322:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003326:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003334:	2001      	movs	r0, #1
 8003336:	f7fe f94f 	bl	80015d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	f8de3f23 	.word	0xf8de3f23

08003354 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0a6      	sub	sp, #152	@ 0x98
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003368:	2300      	movs	r3, #0
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003384:	2300      	movs	r3, #0
 8003386:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003390:	2300      	movs	r3, #0
 8003392:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800339a:	2300      	movs	r3, #0
 800339c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fe86 	bl	80030e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80033d8:	2301      	movs	r3, #1
 80033da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003400:	2301      	movs	r3, #1
 8003402:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003408:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800340a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800340e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003414:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800341c:	2300      	movs	r3, #0
 800341e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff08 	bl	8003240 <ETH_SetDMAConfig>
}
 8003430:	bf00      	nop
 8003432:	3798      	adds	r7, #152	@ 0x98
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3305      	adds	r3, #5
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	3204      	adds	r2, #4
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <ETH_MACAddressConfig+0x68>)
 800345a:	4413      	add	r3, r2
 800345c:	461a      	mov	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3303      	adds	r3, #3
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	061a      	lsls	r2, r3, #24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3302      	adds	r3, #2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3301      	adds	r3, #1
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	4313      	orrs	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <ETH_MACAddressConfig+0x6c>)
 800348a:	4413      	add	r3, r2
 800348c:	461a      	mov	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6013      	str	r3, [r2, #0]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40028040 	.word	0x40028040
 80034a4:	40028044 	.word	0x40028044

080034a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e03e      	b.n	8003534 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	3206      	adds	r2, #6
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d80c      	bhi.n	8003518 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68d9      	ldr	r1, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	e004      	b.n	8003522 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d9bd      	bls.n	80034b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800354c:	611a      	str	r2, [r3, #16]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e046      	b.n	80035f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6919      	ldr	r1, [r3, #16]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80035a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 80035ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	3212      	adds	r2, #18
 80035c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d80c      	bhi.n	80035e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6919      	ldr	r1, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e004      	b.n	80035f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d9b5      	bls.n	8003568 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003634:	b480      	push	{r7}
 8003636:	b08d      	sub	sp, #52	@ 0x34
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3318      	adds	r3, #24
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003676:	d007      	beq.n	8003688 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	3304      	adds	r3, #4
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003688:	2302      	movs	r3, #2
 800368a:	e103      	b.n	8003894 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	3301      	adds	r3, #1
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80036a4:	f023 031f 	bic.w	r3, r3, #31
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	6852      	ldr	r2, [r2, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003712:	f3bf 8f5f 	dmb	sy
}
 8003716:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003724:	e084      	b.n	8003830 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e005      	b.n	8003752 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	3301      	adds	r3, #1
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	2b03      	cmp	r3, #3
 800375c:	d902      	bls.n	8003764 <ETH_Prepare_Tx_Descriptors+0x130>
 800375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003760:	3b04      	subs	r3, #4
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003786:	d007      	beq.n	8003798 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	3304      	adds	r3, #4
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d029      	beq.n	80037ec <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037aa:	e019      	b.n	80037e0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80037ac:	f3bf 8f5f 	dmb	sy
}
 80037b0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	3301      	adds	r3, #1
 80037c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d902      	bls.n	80037d0 <ETH_Prepare_Tx_Descriptors+0x19c>
 80037ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037cc:	3b04      	subs	r3, #4
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	3301      	adds	r3, #1
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d3e1      	bcc.n	80037ac <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80037e8:	2302      	movs	r3, #2
 80037ea:	e053      	b.n	8003894 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	3301      	adds	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800380a:	f023 031f 	bic.w	r3, r3, #31
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	6852      	ldr	r2, [r2, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	3301      	adds	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800381e:	f3bf 8f5f 	dmb	sy
}
 8003822:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f af76 	bne.w	8003726 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e005      	b.n	800385a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386e:	3304      	adds	r3, #4
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800387c:	b672      	cpsid	i
}
 800387e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800388e:	b662      	cpsie	i
}
 8003890:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3734      	adds	r7, #52	@ 0x34
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e16b      	b.n	8003b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 815a 	bne.w	8003b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80b4 	beq.w	8003b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_GPIO_Init+0x314>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a51      	ldr	r2, [pc, #324]	@ (8003bb8 <HAL_GPIO_Init+0x318>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a50      	ldr	r2, [pc, #320]	@ (8003bbc <HAL_GPIO_Init+0x31c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc0 <HAL_GPIO_Init+0x320>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x21a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc4 <HAL_GPIO_Init+0x324>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x216>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc8 <HAL_GPIO_Init+0x328>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x212>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	@ (8003bcc <HAL_GPIO_Init+0x32c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x20e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd0 <HAL_GPIO_Init+0x330>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x20a>
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a32      	ldr	r2, [pc, #200]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b88:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae90 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43d9      	mvns	r1, r3
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e267      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d075      	beq.n	8003d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2a:	4b88      	ldr	r3, [pc, #544]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b85      	ldr	r3, [pc, #532]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d112      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c42:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	4b7e      	ldr	r3, [pc, #504]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05b      	beq.n	8003d14 <HAL_RCC_OscConfig+0x108>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d157      	bne.n	8003d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e242      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCC_OscConfig+0x74>
 8003c72:	4b76      	ldr	r3, [pc, #472]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e01d      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x98>
 8003c8a:	4b70      	ldr	r3, [pc, #448]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b6d      	ldr	r3, [pc, #436]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003ca4:	4b69      	ldr	r3, [pc, #420]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a68      	ldr	r2, [pc, #416]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a65      	ldr	r2, [pc, #404]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fc7c 	bl	80015c0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fc78 	bl	80015c0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	@ 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e207      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cde:	4b5b      	ldr	r3, [pc, #364]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0xc0>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd fc68 	bl	80015c0 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fd fc64 	bl	80015c0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	@ 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1f3      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d06:	4b51      	ldr	r3, [pc, #324]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0xe8>
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d063      	beq.n	8003dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d11c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b44      	ldr	r3, [pc, #272]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d116      	bne.n	8003d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_RCC_OscConfig+0x152>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1c7      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4937      	ldr	r1, [pc, #220]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	e03a      	b.n	8003dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7c:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <HAL_RCC_OscConfig+0x244>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fd fc1d 	bl	80015c0 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8a:	f7fd fc19 	bl	80015c0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1a8      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4925      	ldr	r1, [pc, #148]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
 8003dbc:	e015      	b.n	8003dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCC_OscConfig+0x244>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fbfc 	bl	80015c0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dcc:	f7fd fbf8 	bl	80015c0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e187      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dde:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d036      	beq.n	8003e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <HAL_RCC_OscConfig+0x248>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fd fbdc 	bl	80015c0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fbd8 	bl	80015c0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e167      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x200>
 8003e2a:	e01b      	b.n	8003e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_OscConfig+0x248>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fbc5 	bl	80015c0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00e      	b.n	8003e58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fbc1 	bl	80015c0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d907      	bls.n	8003e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e150      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	42470000 	.word	0x42470000
 8003e54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ea      	bne.n	8003e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8097 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b81      	ldr	r3, [pc, #516]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	4b7d      	ldr	r3, [pc, #500]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e92:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b77      	ldr	r3, [pc, #476]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d118      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eae:	4b74      	ldr	r3, [pc, #464]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a73      	ldr	r2, [pc, #460]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fd fb81 	bl	80015c0 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec2:	f7fd fb7d 	bl	80015c0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e10c      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2ea>
 8003ee8:	4b64      	ldr	r3, [pc, #400]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a63      	ldr	r2, [pc, #396]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	e01c      	b.n	8003f30 <HAL_RCC_OscConfig+0x324>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x30c>
 8003efe:	4b5f      	ldr	r3, [pc, #380]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	4a5e      	ldr	r2, [pc, #376]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0x324>
 8003f18:	4b58      	ldr	r3, [pc, #352]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1c:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f24:	4b55      	ldr	r3, [pc, #340]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 0304 	bic.w	r3, r3, #4
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd fb42 	bl	80015c0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fd fb3e 	bl	80015c0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0cb      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ee      	beq.n	8003f40 <HAL_RCC_OscConfig+0x334>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f64:	f7fd fb2c 	bl	80015c0 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6c:	f7fd fb28 	bl	80015c0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0b5      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f82:	4b3e      	ldr	r3, [pc, #248]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ee      	bne.n	8003f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f94:	4b39      	ldr	r3, [pc, #228]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	4a38      	ldr	r2, [pc, #224]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a1 	beq.w	80040ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d05c      	beq.n	8004070 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d141      	bne.n	8004042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fafc 	bl	80015c0 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd faf8 	bl	80015c0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e087      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	3b01      	subs	r3, #1
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	491b      	ldr	r1, [pc, #108]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004014:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fd fad1 	bl	80015c0 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004022:	f7fd facd 	bl	80015c0 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e05c      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004034:	4b11      	ldr	r3, [pc, #68]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x416>
 8004040:	e054      	b.n	80040ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd faba 	bl	80015c0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd fab6 	bl	80015c0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e045      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x444>
 800406e:	e03d      	b.n	80040ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e038      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000
 8004084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <HAL_RCC_OscConfig+0x4ec>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d028      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d121      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d111      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	3b01      	subs	r3, #1
 80040d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cc      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b68      	ldr	r3, [pc, #416]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90c      	bls.n	8004138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b65      	ldr	r3, [pc, #404]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a58      	ldr	r2, [pc, #352]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800415a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a52      	ldr	r2, [pc, #328]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d044      	beq.n	800421c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d119      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	4b3f      	ldr	r3, [pc, #252]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e067      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4934      	ldr	r1, [pc, #208]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ec:	f7fd f9e8 	bl	80015c0 <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fd f9e4 	bl	80015c0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 020c 	and.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	429a      	cmp	r2, r3
 800421a:	d1eb      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421c:	4b25      	ldr	r3, [pc, #148]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d20c      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b22      	ldr	r3, [pc, #136]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426e:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	490a      	ldr	r1, [pc, #40]	@ (80042bc <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd f948 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00
 80042b8:	40023800 	.word	0x40023800
 80042bc:	0801bb70 	.word	0x0801bb70
 80042c0:	20000000 	.word	0x20000000
 80042c4:	20000004 	.word	0x20000004

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b094      	sub	sp, #80	@ 0x50
 80042ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d4:	2300      	movs	r3, #0
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d8:	2300      	movs	r3, #0
 80042da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e0:	4b79      	ldr	r3, [pc, #484]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d00d      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x40>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	f200 80e1 	bhi.w	80044b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x34>
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x3a>
 80042fa:	e0db      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004300:	e0db      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004302:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004304:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004306:	e0d8      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004308:	4b6f      	ldr	r3, [pc, #444]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431e:	4b6a      	ldr	r3, [pc, #424]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	2200      	movs	r2, #0
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004328:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	2300      	movs	r3, #0
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
 8004336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	f04f 0000 	mov.w	r0, #0
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	0159      	lsls	r1, r3, #5
 8004348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434c:	0150      	lsls	r0, r2, #5
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4621      	mov	r1, r4
 8004354:	1a51      	subs	r1, r2, r1
 8004356:	6139      	str	r1, [r7, #16]
 8004358:	4629      	mov	r1, r5
 800435a:	eb63 0301 	sbc.w	r3, r3, r1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800436c:	4659      	mov	r1, fp
 800436e:	018b      	lsls	r3, r1, #6
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004376:	4651      	mov	r1, sl
 8004378:	018a      	lsls	r2, r1, #6
 800437a:	4651      	mov	r1, sl
 800437c:	ebb2 0801 	subs.w	r8, r2, r1
 8004380:	4659      	mov	r1, fp
 8004382:	eb63 0901 	sbc.w	r9, r3, r1
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439a:	4690      	mov	r8, r2
 800439c:	4699      	mov	r9, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	eb18 0303 	adds.w	r3, r8, r3
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	462b      	mov	r3, r5
 80043a8:	eb49 0303 	adc.w	r3, r9, r3
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ba:	4629      	mov	r1, r5
 80043bc:	024b      	lsls	r3, r1, #9
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043c4:	4621      	mov	r1, r4
 80043c6:	024a      	lsls	r2, r1, #9
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ce:	2200      	movs	r2, #0
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d8:	f7fb ff52 	bl	8000280 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e4:	e058      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	4611      	mov	r1, r2
 80043f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	2300      	movs	r3, #0
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	0159      	lsls	r1, r3, #5
 800440e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004412:	0150      	lsls	r0, r2, #5
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4641      	mov	r1, r8
 800441a:	ebb2 0a01 	subs.w	sl, r2, r1
 800441e:	4649      	mov	r1, r9
 8004420:	eb63 0b01 	sbc.w	fp, r3, r1
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004438:	ebb2 040a 	subs.w	r4, r2, sl
 800443c:	eb63 050b 	sbc.w	r5, r3, fp
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	00eb      	lsls	r3, r5, #3
 800444a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444e:	00e2      	lsls	r2, r4, #3
 8004450:	4614      	mov	r4, r2
 8004452:	461d      	mov	r5, r3
 8004454:	4643      	mov	r3, r8
 8004456:	18e3      	adds	r3, r4, r3
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	464b      	mov	r3, r9
 800445c:	eb45 0303 	adc.w	r3, r5, r3
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800446e:	4629      	mov	r1, r5
 8004470:	028b      	lsls	r3, r1, #10
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004478:	4621      	mov	r1, r4
 800447a:	028a      	lsls	r2, r1, #10
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004482:	2200      	movs	r2, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	61fa      	str	r2, [r7, #28]
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	f7fb fef8 	bl	8000280 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	3301      	adds	r3, #1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80044a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b2:	e002      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3750      	adds	r7, #80	@ 0x50
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200

080044d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d8:	4b03      	ldr	r3, [pc, #12]	@ (80044e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000000 	.word	0x20000000

080044ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f0:	f7ff fff0 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	0a9b      	lsrs	r3, r3, #10
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4903      	ldr	r1, [pc, #12]	@ (8004510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40023800 	.word	0x40023800
 8004510:	0801bb80 	.word	0x0801bb80

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004518:	f7ff ffdc 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0b5b      	lsrs	r3, r3, #13
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	@ (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	0801bb80 	.word	0x0801bb80

0800453c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e03f      	b.n	80045ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc fb6c 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f929 	bl	80047d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	@ 0x28
 80045da:	af02      	add	r7, sp, #8
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d17c      	bne.n	80046f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_UART_Transmit+0x2c>
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e075      	b.n	80046f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_UART_Transmit+0x3e>
 8004610:	2302      	movs	r3, #2
 8004612:	e06e      	b.n	80046f2 <HAL_UART_Transmit+0x11c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2221      	movs	r2, #33	@ 0x21
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fc ffc9 	bl	80015c0 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004644:	d108      	bne.n	8004658 <HAL_UART_Transmit+0x82>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e003      	b.n	8004660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004668:	e02a      	b.n	80046c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	@ 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f840 	bl	80046fa <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e036      	b.n	80046f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3302      	adds	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e007      	b.n	80046b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1cf      	bne.n	800466a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2140      	movs	r1, #64	@ 0x40
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f810 	bl	80046fa <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e006      	b.n	80046f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b090      	sub	sp, #64	@ 0x40
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470a:	e050      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004712:	d04c      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x30>
 800471a:	f7fc ff51 	bl	80015c0 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004726:	429a      	cmp	r2, r3
 8004728:	d241      	bcs.n	80047ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800474a:	637a      	str	r2, [r7, #52]	@ 0x34
 800474c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004750:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	613b      	str	r3, [r7, #16]
   return(result);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800477e:	623a      	str	r2, [r7, #32]
 8004780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	69f9      	ldr	r1, [r7, #28]
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	61bb      	str	r3, [r7, #24]
   return(result);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e00f      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d09f      	beq.n	800470c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3740      	adds	r7, #64	@ 0x40
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b0c0      	sub	sp, #256	@ 0x100
 80047de:	af00      	add	r7, sp, #0
 80047e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	ea40 0301 	orr.w	r3, r0, r1
 8004800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004830:	f021 010c 	bic.w	r1, r1, #12
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800483e:	430b      	orrs	r3, r1
 8004840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004852:	6999      	ldr	r1, [r3, #24]
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	ea40 0301 	orr.w	r3, r0, r1
 800485e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa4 <UART_SetConfig+0x2cc>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d005      	beq.n	8004878 <UART_SetConfig+0xa0>
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa8 <UART_SetConfig+0x2d0>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d104      	bne.n	8004882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7ff fe4c 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 800487c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004880:	e003      	b.n	800488a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004882:	f7ff fe33 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8004886:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004894:	f040 810c 	bne.w	8004ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489c:	2200      	movs	r2, #0
 800489e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	1891      	adds	r1, r2, r2
 80048b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048b2:	415b      	adcs	r3, r3
 80048b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048ba:	4621      	mov	r1, r4
 80048bc:	eb12 0801 	adds.w	r8, r2, r1
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb43 0901 	adc.w	r9, r3, r1
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048da:	4690      	mov	r8, r2
 80048dc:	4699      	mov	r9, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	eb18 0303 	adds.w	r3, r8, r3
 80048e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e8:	462b      	mov	r3, r5
 80048ea:	eb49 0303 	adc.w	r3, r9, r3
 80048ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004906:	460b      	mov	r3, r1
 8004908:	18db      	adds	r3, r3, r3
 800490a:	653b      	str	r3, [r7, #80]	@ 0x50
 800490c:	4613      	mov	r3, r2
 800490e:	eb42 0303 	adc.w	r3, r2, r3
 8004912:	657b      	str	r3, [r7, #84]	@ 0x54
 8004914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800491c:	f7fb fcb0 	bl	8000280 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b61      	ldr	r3, [pc, #388]	@ (8004aac <UART_SetConfig+0x2d4>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011c      	lsls	r4, r3, #4
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004938:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800493c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004948:	415b      	adcs	r3, r3
 800494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004950:	4641      	mov	r1, r8
 8004952:	eb12 0a01 	adds.w	sl, r2, r1
 8004956:	4649      	mov	r1, r9
 8004958:	eb43 0b01 	adc.w	fp, r3, r1
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800496c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004970:	4692      	mov	sl, r2
 8004972:	469b      	mov	fp, r3
 8004974:	4643      	mov	r3, r8
 8004976:	eb1a 0303 	adds.w	r3, sl, r3
 800497a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497e:	464b      	mov	r3, r9
 8004980:	eb4b 0303 	adc.w	r3, fp, r3
 8004984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004994:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800499c:	460b      	mov	r3, r1
 800499e:	18db      	adds	r3, r3, r3
 80049a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a2:	4613      	mov	r3, r2
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049b2:	f7fb fc65 	bl	8000280 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <UART_SetConfig+0x2d4>)
 80049be:	fba3 2301 	umull	r2, r3, r3, r1
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2264      	movs	r2, #100	@ 0x64
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	1acb      	subs	r3, r1, r3
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049d2:	4b36      	ldr	r3, [pc, #216]	@ (8004aac <UART_SetConfig+0x2d4>)
 80049d4:	fba3 2302 	umull	r2, r3, r3, r2
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049e0:	441c      	add	r4, r3
 80049e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049fc:	415b      	adcs	r3, r3
 80049fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a04:	4641      	mov	r1, r8
 8004a06:	1851      	adds	r1, r2, r1
 8004a08:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4651      	mov	r1, sl
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4642      	mov	r2, r8
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a38:	464b      	mov	r3, r9
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a6e:	f7fb fc07 	bl	8000280 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <UART_SetConfig+0x2d4>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	@ 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	3332      	adds	r3, #50	@ 0x32
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <UART_SetConfig+0x2d4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 0207 	and.w	r2, r3, #7
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4422      	add	r2, r4
 8004a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aa0:	e106      	b.n	8004cb0 <UART_SetConfig+0x4d8>
 8004aa2:	bf00      	nop
 8004aa4:	40011000 	.word	0x40011000
 8004aa8:	40011400 	.word	0x40011400
 8004aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	6239      	str	r1, [r7, #32]
 8004aca:	415b      	adcs	r3, r3
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	1854      	adds	r4, r2, r1
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	eb43 0501 	adc.w	r5, r3, r1
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af8:	464b      	mov	r3, r9
 8004afa:	eb45 0303 	adc.w	r3, r5, r3
 8004afe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b1e:	4629      	mov	r1, r5
 8004b20:	008b      	lsls	r3, r1, #2
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b28:	4621      	mov	r1, r4
 8004b2a:	008a      	lsls	r2, r1, #2
 8004b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b30:	f7fb fba6 	bl	8000280 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4b60      	ldr	r3, [pc, #384]	@ (8004cbc <UART_SetConfig+0x4e4>)
 8004b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	011c      	lsls	r4, r3, #4
 8004b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	61b9      	str	r1, [r7, #24]
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b64:	4641      	mov	r1, r8
 8004b66:	1851      	adds	r1, r2, r1
 8004b68:	6139      	str	r1, [r7, #16]
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	414b      	adcs	r3, r1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	00cb      	lsls	r3, r1, #3
 8004b80:	4651      	mov	r1, sl
 8004b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b86:	4651      	mov	r1, sl
 8004b88:	00ca      	lsls	r2, r1, #3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4642      	mov	r2, r8
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b98:	464b      	mov	r3, r9
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	008b      	lsls	r3, r1, #2
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	008a      	lsls	r2, r1, #2
 8004bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bce:	f7fb fb57 	bl	8000280 <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4b38      	ldr	r3, [pc, #224]	@ (8004cbc <UART_SetConfig+0x4e4>)
 8004bda:	fba3 2301 	umull	r2, r3, r3, r1
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2264      	movs	r2, #100	@ 0x64
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	1acb      	subs	r3, r1, r3
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	3332      	adds	r3, #50	@ 0x32
 8004bec:	4a33      	ldr	r2, [pc, #204]	@ (8004cbc <UART_SetConfig+0x4e4>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf8:	441c      	add	r4, r3
 8004bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfe:	2200      	movs	r2, #0
 8004c00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	415b      	adcs	r3, r3
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c18:	4641      	mov	r1, r8
 8004c1a:	1851      	adds	r1, r2, r1
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	4649      	mov	r1, r9
 8004c20:	414b      	adcs	r3, r1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c30:	4659      	mov	r1, fp
 8004c32:	00cb      	lsls	r3, r1, #3
 8004c34:	4651      	mov	r1, sl
 8004c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	00ca      	lsls	r2, r1, #3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	4642      	mov	r2, r8
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	460a      	mov	r2, r1
 8004c4e:	eb42 0303 	adc.w	r3, r2, r3
 8004c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c76:	4641      	mov	r1, r8
 8004c78:	008a      	lsls	r2, r1, #2
 8004c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c7e:	f7fb faff 	bl	8000280 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <UART_SetConfig+0x4e4>)
 8004c88:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	2164      	movs	r1, #100	@ 0x64
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	3332      	adds	r3, #50	@ 0x32
 8004c9a:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <UART_SetConfig+0x4e4>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	f003 020f 	and.w	r2, r3, #15
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4422      	add	r2, r4
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbc:	51eb851f 	.word	0x51eb851f

08004cc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b08c      	sub	sp, #48	@ 0x30
 8004cc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004cc6:	4b96      	ldr	r3, [pc, #600]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004cc8:	22c0      	movs	r2, #192	@ 0xc0
 8004cca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004ccc:	4b94      	ldr	r3, [pc, #592]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004cce:	22a8      	movs	r2, #168	@ 0xa8
 8004cd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004cd2:	4b93      	ldr	r3, [pc, #588]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 36;
 8004cd8:	4b91      	ldr	r3, [pc, #580]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004cda:	2224      	movs	r2, #36	@ 0x24
 8004cdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004cde:	4b91      	ldr	r3, [pc, #580]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004ce0:	22ff      	movs	r2, #255	@ 0xff
 8004ce2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004cea:	4b8e      	ldr	r3, [pc, #568]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004cec:	22ff      	movs	r2, #255	@ 0xff
 8004cee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004cf8:	22c0      	movs	r2, #192	@ 0xc0
 8004cfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004cfc:	4b8a      	ldr	r3, [pc, #552]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004cfe:	22a8      	movs	r2, #168	@ 0xa8
 8004d00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004d02:	4b89      	ldr	r3, [pc, #548]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004d04:	2202      	movs	r2, #2
 8004d06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d08:	4b87      	ldr	r3, [pc, #540]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	70da      	strb	r2, [r3, #3]
//100.105.251.157
/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2000      	movs	r0, #0
 8004d12:	f006 fac1 	bl	800b298 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d16:	4b82      	ldr	r3, [pc, #520]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	061a      	lsls	r2, r3, #24
 8004d1c:	4b80      	ldr	r3, [pc, #512]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d26:	789b      	ldrb	r3, [r3, #2]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d2e:	78d2      	ldrb	r2, [r2, #3]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	061a      	lsls	r2, r3, #24
 8004d34:	4b7a      	ldr	r3, [pc, #488]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	0619      	lsls	r1, r3, #24
 8004d3a:	4b79      	ldr	r3, [pc, #484]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	4319      	orrs	r1, r3
 8004d42:	4b77      	ldr	r3, [pc, #476]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d44:	789b      	ldrb	r3, [r3, #2]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	4975      	ldr	r1, [pc, #468]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d4c:	78c9      	ldrb	r1, [r1, #3]
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d56:	431a      	orrs	r2, r3
 8004d58:	4b71      	ldr	r3, [pc, #452]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	0619      	lsls	r1, r3, #24
 8004d5e:	4b70      	ldr	r3, [pc, #448]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	4319      	orrs	r1, r3
 8004d66:	4b6e      	ldr	r3, [pc, #440]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	496c      	ldr	r1, [pc, #432]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d70:	78c9      	ldrb	r1, [r1, #3]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	4b68      	ldr	r3, [pc, #416]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	0619      	lsls	r1, r3, #24
 8004d82:	4b67      	ldr	r3, [pc, #412]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	4319      	orrs	r1, r3
 8004d8a:	4b65      	ldr	r3, [pc, #404]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	430b      	orrs	r3, r1
 8004d92:	4963      	ldr	r1, [pc, #396]	@ (8004f20 <MX_LWIP_Init+0x260>)
 8004d94:	78c9      	ldrb	r1, [r1, #3]
 8004d96:	430b      	orrs	r3, r1
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	4a63      	ldr	r2, [pc, #396]	@ (8004f2c <MX_LWIP_Init+0x26c>)
 8004d9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004da0:	4b60      	ldr	r3, [pc, #384]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	061a      	lsls	r2, r3, #24
 8004da6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	431a      	orrs	r2, r3
 8004dae:	4b5d      	ldr	r3, [pc, #372]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004db8:	78d2      	ldrb	r2, [r2, #3]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	061a      	lsls	r2, r3, #24
 8004dbe:	4b59      	ldr	r3, [pc, #356]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	0619      	lsls	r1, r3, #24
 8004dc4:	4b57      	ldr	r3, [pc, #348]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	4319      	orrs	r1, r3
 8004dcc:	4b55      	ldr	r3, [pc, #340]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dce:	789b      	ldrb	r3, [r3, #2]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	4953      	ldr	r1, [pc, #332]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dd6:	78c9      	ldrb	r1, [r1, #3]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004de0:	431a      	orrs	r2, r3
 8004de2:	4b50      	ldr	r3, [pc, #320]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	0619      	lsls	r1, r3, #24
 8004de8:	4b4e      	ldr	r3, [pc, #312]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	4319      	orrs	r1, r3
 8004df0:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004df2:	789b      	ldrb	r3, [r3, #2]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	430b      	orrs	r3, r1
 8004df8:	494a      	ldr	r1, [pc, #296]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004dfa:	78c9      	ldrb	r1, [r1, #3]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e04:	431a      	orrs	r2, r3
 8004e06:	4b47      	ldr	r3, [pc, #284]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0619      	lsls	r1, r3, #24
 8004e0c:	4b45      	ldr	r3, [pc, #276]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	4319      	orrs	r1, r3
 8004e14:	4b43      	ldr	r3, [pc, #268]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004e16:	789b      	ldrb	r3, [r3, #2]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	4941      	ldr	r1, [pc, #260]	@ (8004f24 <MX_LWIP_Init+0x264>)
 8004e1e:	78c9      	ldrb	r1, [r1, #3]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	0e1b      	lsrs	r3, r3, #24
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a42      	ldr	r2, [pc, #264]	@ (8004f30 <MX_LWIP_Init+0x270>)
 8004e28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	061a      	lsls	r2, r3, #24
 8004e30:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	431a      	orrs	r2, r3
 8004e38:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e3a:	789b      	ldrb	r3, [r3, #2]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	4a39      	ldr	r2, [pc, #228]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e42:	78d2      	ldrb	r2, [r2, #3]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	061a      	lsls	r2, r3, #24
 8004e48:	4b37      	ldr	r3, [pc, #220]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	0619      	lsls	r1, r3, #24
 8004e4e:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	4319      	orrs	r1, r3
 8004e56:	4b34      	ldr	r3, [pc, #208]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	4932      	ldr	r1, [pc, #200]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e60:	78c9      	ldrb	r1, [r1, #3]
 8004e62:	430b      	orrs	r3, r1
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	0619      	lsls	r1, r3, #24
 8004e72:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	4319      	orrs	r1, r3
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	430b      	orrs	r3, r1
 8004e82:	4929      	ldr	r1, [pc, #164]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e84:	78c9      	ldrb	r1, [r1, #3]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	4b25      	ldr	r3, [pc, #148]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	0619      	lsls	r1, r3, #24
 8004e96:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4319      	orrs	r1, r3
 8004e9e:	4b22      	ldr	r3, [pc, #136]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	4920      	ldr	r1, [pc, #128]	@ (8004f28 <MX_LWIP_Init+0x268>)
 8004ea8:	78c9      	ldrb	r1, [r1, #3]
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	4a20      	ldr	r2, [pc, #128]	@ (8004f34 <MX_LWIP_Init+0x274>)
 8004eb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004eb4:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <MX_LWIP_Init+0x278>)
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <MX_LWIP_Init+0x27c>)
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f34 <MX_LWIP_Init+0x274>)
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <MX_LWIP_Init+0x270>)
 8004ec4:	4919      	ldr	r1, [pc, #100]	@ (8004f2c <MX_LWIP_Init+0x26c>)
 8004ec6:	481e      	ldr	r0, [pc, #120]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004ec8:	f006 ffb0 	bl	800be2c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ecc:	481c      	ldr	r0, [pc, #112]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004ece:	f007 f95f 	bl	800c190 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ee4:	4816      	ldr	r0, [pc, #88]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004ee6:	f007 f963 	bl	800c1b0 <netif_set_up>
 8004eea:	e002      	b.n	8004ef2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004eec:	4814      	ldr	r0, [pc, #80]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004eee:	f007 f9cb 	bl	800c288 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004ef2:	4914      	ldr	r1, [pc, #80]	@ (8004f44 <MX_LWIP_Init+0x284>)
 8004ef4:	4812      	ldr	r0, [pc, #72]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004ef6:	f007 fa5d 	bl	800c3b4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004efa:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <MX_LWIP_Init+0x288>)
 8004efc:	1d3c      	adds	r4, r7, #4
 8004efe:	461d      	mov	r5, r3
 8004f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	490c      	ldr	r1, [pc, #48]	@ (8004f40 <MX_LWIP_Init+0x280>)
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd25 	bl	8005960 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f16:	bf00      	nop
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	2000177c 	.word	0x2000177c
 8004f24:	20001780 	.word	0x20001780
 8004f28:	20001784 	.word	0x20001784
 8004f2c:	20001770 	.word	0x20001770
 8004f30:	20001774 	.word	0x20001774
 8004f34:	20001778 	.word	0x20001778
 8004f38:	0800b1a9 	.word	0x0800b1a9
 8004f3c:	080053e9 	.word	0x080053e9
 8004f40:	2000173c 	.word	0x2000173c
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	080181c4 	.word	0x080181c4

08004f4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004f68:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <HAL_ETH_RxCpltCallback+0x1c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fe73 	bl	8005c58 <osSemaphoreRelease>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20006254 	.word	0x20006254

08004f80 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <HAL_ETH_TxCpltCallback+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fe63 	bl	8005c58 <osSemaphoreRelease>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20006258 	.word	0x20006258

08004fa0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fe f867 	bl	800307c <HAL_ETH_GetDMAError>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb4:	2b80      	cmp	r3, #128	@ 0x80
 8004fb6:	d104      	bne.n	8004fc2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <HAL_ETH_ErrorCallback+0x2c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fe4b 	bl	8005c58 <osSemaphoreRelease>
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20006254 	.word	0x20006254

08004fd0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fee:	2264      	movs	r2, #100	@ 0x64
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f011 feec 	bl	8016dd0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ff8:	4b84      	ldr	r3, [pc, #528]	@ (800520c <low_level_init+0x23c>)
 8004ffa:	4a85      	ldr	r2, [pc, #532]	@ (8005210 <low_level_init+0x240>)
 8004ffc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 800500a:	23e1      	movs	r3, #225	@ 0xe1
 800500c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005022:	4a7a      	ldr	r2, [pc, #488]	@ (800520c <low_level_init+0x23c>)
 8005024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005028:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800502a:	4b78      	ldr	r3, [pc, #480]	@ (800520c <low_level_init+0x23c>)
 800502c:	2200      	movs	r2, #0
 800502e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005030:	4b76      	ldr	r3, [pc, #472]	@ (800520c <low_level_init+0x23c>)
 8005032:	4a78      	ldr	r2, [pc, #480]	@ (8005214 <low_level_init+0x244>)
 8005034:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005036:	4b75      	ldr	r3, [pc, #468]	@ (800520c <low_level_init+0x23c>)
 8005038:	4a77      	ldr	r2, [pc, #476]	@ (8005218 <low_level_init+0x248>)
 800503a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800503c:	4b73      	ldr	r3, [pc, #460]	@ (800520c <low_level_init+0x23c>)
 800503e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005042:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005044:	4871      	ldr	r0, [pc, #452]	@ (800520c <low_level_init+0x23c>)
 8005046:	f7fd f97b 	bl	8002340 <HAL_ETH_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005050:	2238      	movs	r2, #56	@ 0x38
 8005052:	2100      	movs	r1, #0
 8005054:	4871      	ldr	r0, [pc, #452]	@ (800521c <low_level_init+0x24c>)
 8005056:	f011 febb 	bl	8016dd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800505a:	4b70      	ldr	r3, [pc, #448]	@ (800521c <low_level_init+0x24c>)
 800505c:	2221      	movs	r2, #33	@ 0x21
 800505e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005060:	4b6e      	ldr	r3, [pc, #440]	@ (800521c <low_level_init+0x24c>)
 8005062:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005066:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005068:	4b6c      	ldr	r3, [pc, #432]	@ (800521c <low_level_init+0x24c>)
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800506e:	486c      	ldr	r0, [pc, #432]	@ (8005220 <low_level_init+0x250>)
 8005070:	f006 fd96 	bl	800bba0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2206      	movs	r2, #6
 8005078:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800507c:	4b63      	ldr	r3, [pc, #396]	@ (800520c <low_level_init+0x23c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005088:	4b60      	ldr	r3, [pc, #384]	@ (800520c <low_level_init+0x23c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	785a      	ldrb	r2, [r3, #1]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005094:	4b5d      	ldr	r3, [pc, #372]	@ (800520c <low_level_init+0x23c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	789a      	ldrb	r2, [r3, #2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80050a0:	4b5a      	ldr	r3, [pc, #360]	@ (800520c <low_level_init+0x23c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	78da      	ldrb	r2, [r3, #3]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050ac:	4b57      	ldr	r3, [pc, #348]	@ (800520c <low_level_init+0x23c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	791a      	ldrb	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050b8:	4b54      	ldr	r3, [pc, #336]	@ (800520c <low_level_init+0x23c>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	795a      	ldrb	r2, [r3, #5]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80050ca:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050d2:	f043 030a 	orr.w	r3, r3, #10
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80050de:	2203      	movs	r2, #3
 80050e0:	2100      	movs	r1, #0
 80050e2:	2001      	movs	r0, #1
 80050e4:	f001 f8a3 	bl	800622e <xQueueGenericCreate>
 80050e8:	4603      	mov	r3, r0
 80050ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005224 <low_level_init+0x254>)
 80050ec:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80050ee:	2203      	movs	r2, #3
 80050f0:	2100      	movs	r1, #0
 80050f2:	2001      	movs	r0, #1
 80050f4:	f001 f89b 	bl	800622e <xQueueGenericCreate>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a4b      	ldr	r2, [pc, #300]	@ (8005228 <low_level_init+0x258>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80050fe:	4b4b      	ldr	r3, [pc, #300]	@ (800522c <low_level_init+0x25c>)
 8005100:	f107 0408 	add.w	r4, r7, #8
 8005104:	461d      	mov	r5, r3
 8005106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800510a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800510e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fc21 	bl	8005960 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800511e:	4944      	ldr	r1, [pc, #272]	@ (8005230 <low_level_init+0x260>)
 8005120:	4844      	ldr	r0, [pc, #272]	@ (8005234 <low_level_init+0x264>)
 8005122:	f7fc f886 	bl	8001232 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8005126:	4843      	ldr	r0, [pc, #268]	@ (8005234 <low_level_init+0x264>)
 8005128:	f7fc f8b5 	bl	8001296 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 800512c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005130:	2b00      	cmp	r3, #0
 8005132:	d164      	bne.n	80051fe <low_level_init+0x22e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005134:	483f      	ldr	r0, [pc, #252]	@ (8005234 <low_level_init+0x264>)
 8005136:	f7fc f956 	bl	80013e6 <DP83848_GetLinkState>
 800513a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800513e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005142:	2b01      	cmp	r3, #1
 8005144:	dc06      	bgt.n	8005154 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f007 f904 	bl	800c354 <netif_set_link_down>
      netif_set_down(netif);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f007 f89b 	bl	800c288 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005152:	e056      	b.n	8005202 <low_level_init+0x232>
      switch (PHYLinkState)
 8005154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005158:	3b02      	subs	r3, #2
 800515a:	2b03      	cmp	r3, #3
 800515c:	d82a      	bhi.n	80051b4 <low_level_init+0x1e4>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <low_level_init+0x194>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005175 	.word	0x08005175
 8005168:	08005187 	.word	0x08005187
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a7 	.word	0x080051a7
        duplex = ETH_FULLDUPLEX_MODE;
 8005174:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800517c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005184:	e01f      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800518c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005194:	e017      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8005196:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800519a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 80051a4:	e00f      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 80051b2:	e008      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80051b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 80051bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 80051c4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051ca:	4619      	mov	r1, r3
 80051cc:	480f      	ldr	r0, [pc, #60]	@ (800520c <low_level_init+0x23c>)
 80051ce:	f7fd fdfb 	bl	8002dc8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80051d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051d6:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 80051d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80051de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051e2:	4619      	mov	r1, r3
 80051e4:	4809      	ldr	r0, [pc, #36]	@ (800520c <low_level_init+0x23c>)
 80051e6:	f7fd fed9 	bl	8002f9c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80051ea:	4808      	ldr	r0, [pc, #32]	@ (800520c <low_level_init+0x23c>)
 80051ec:	f7fd f985 	bl	80024fa <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f006 ffdd 	bl	800c1b0 <netif_set_up>
    netif_set_link_up(netif);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f007 f878 	bl	800c2ec <netif_set_link_up>
}
 80051fc:	e001      	b.n	8005202 <low_level_init+0x232>
    Error_Handler();
 80051fe:	f7fb fc85 	bl	8000b0c <Error_Handler>
}
 8005202:	bf00      	nop
 8005204:	37a0      	adds	r7, #160	@ 0xa0
 8005206:	46bd      	mov	sp, r7
 8005208:	bdb0      	pop	{r4, r5, r7, pc}
 800520a:	bf00      	nop
 800520c:	2000625c 	.word	0x2000625c
 8005210:	40028000 	.word	0x40028000
 8005214:	200061b4 	.word	0x200061b4
 8005218:	20006114 	.word	0x20006114
 800521c:	2000630c 	.word	0x2000630c
 8005220:	0801bb88 	.word	0x0801bb88
 8005224:	20006254 	.word	0x20006254
 8005228:	20006258 	.word	0x20006258
 800522c:	080181e8 	.word	0x080181e8
 8005230:	2000000c 	.word	0x2000000c
 8005234:	20006344 	.word	0x20006344

08005238 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b092      	sub	sp, #72	@ 0x48
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	2230      	movs	r2, #48	@ 0x30
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f011 fdb9 	bl	8016dd0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	2230      	movs	r2, #48	@ 0x30
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f011 fdb2 	bl	8016dd0 <memset>

  for(q = p; q != NULL; q = q->next)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005270:	e045      	b.n	80052fe <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005274:	2b03      	cmp	r3, #3
 8005276:	d902      	bls.n	800527e <low_level_output+0x46>
      return ERR_IF;
 8005278:	f06f 030b 	mvn.w	r3, #11
 800527c:	e065      	b.n	800534a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3348      	adds	r3, #72	@ 0x48
 800528e:	443b      	add	r3, r7
 8005290:	3b3c      	subs	r3, #60	@ 0x3c
 8005292:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005296:	895b      	ldrh	r3, [r3, #10]
 8005298:	4619      	mov	r1, r3
 800529a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3348      	adds	r3, #72	@ 0x48
 80052a6:	443b      	add	r3, r7
 80052a8:	3b38      	subs	r3, #56	@ 0x38
 80052aa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	f107 000c 	add.w	r0, r7, #12
 80052ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052bc:	460b      	mov	r3, r1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	440b      	add	r3, r1
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	18c1      	adds	r1, r0, r3
 80052c6:	4613      	mov	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3348      	adds	r3, #72	@ 0x48
 80052d0:	443b      	add	r3, r7
 80052d2:	3b34      	subs	r3, #52	@ 0x34
 80052d4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	3348      	adds	r3, #72	@ 0x48
 80052ea:	443b      	add	r3, r7
 80052ec:	3b34      	subs	r3, #52	@ 0x34
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f4:	3301      	adds	r3, #1
 80052f6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80052f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1b6      	bne.n	8005272 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	461a      	mov	r2, r3
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <low_level_output+0x11c>)
 800530c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800530e:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <low_level_output+0x11c>)
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005316:	4a0f      	ldr	r2, [pc, #60]	@ (8005354 <low_level_output+0x11c>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f007 fc9d 	bl	800cc5c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005322:	490c      	ldr	r1, [pc, #48]	@ (8005354 <low_level_output+0x11c>)
 8005324:	480c      	ldr	r0, [pc, #48]	@ (8005358 <low_level_output+0x120>)
 8005326:	f7fd f9f5 	bl	8002714 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800532a:	bf00      	nop
 800532c:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <low_level_output+0x124>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fc41 	bl	8005bbc <osSemaphoreWait>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f5      	bne.n	800532c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005340:	4805      	ldr	r0, [pc, #20]	@ (8005358 <low_level_output+0x120>)
 8005342:	f7fd fb7b 	bl	8002a3c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005346:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800534a:	4618      	mov	r0, r3
 800534c:	3748      	adds	r7, #72	@ 0x48
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	2000630c 	.word	0x2000630c
 8005358:	2000625c 	.word	0x2000625c
 800535c:	20006258 	.word	0x20006258

08005360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <low_level_input+0x2c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4619      	mov	r1, r3
 800537a:	4805      	ldr	r0, [pc, #20]	@ (8005390 <low_level_input+0x30>)
 800537c:	f7fd fa26 	bl	80027cc <HAL_ETH_ReadData>
  }

  return p;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20006110 	.word	0x20006110
 8005390:	2000625c 	.word	0x2000625c

08005394 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <ethernetif_input+0x50>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc05 	bl	8005bbc <osSemaphoreWait>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f5      	bne.n	80053a4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f7ff ffd1 	bl	8005360 <low_level_input>
 80053be:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f007 fb9a 	bl	800cb10 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ea      	bne.n	80053b8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053e2:	e7df      	b.n	80053a4 <ethernetif_input+0x10>
 80053e4:	20006254 	.word	0x20006254

080053e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <ethernetif_init+0x1c>
 80053f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <ethernetif_init+0x48>)
 80053f8:	f240 12df 	movw	r2, #479	@ 0x1df
 80053fc:	490d      	ldr	r1, [pc, #52]	@ (8005434 <ethernetif_init+0x4c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	@ (8005438 <ethernetif_init+0x50>)
 8005400:	f011 fc88 	bl	8016d14 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2273      	movs	r2, #115	@ 0x73
 8005408:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2274      	movs	r2, #116	@ 0x74
 8005410:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <ethernetif_init+0x54>)
 8005418:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <ethernetif_init+0x58>)
 800541e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fdd5 	bl	8004fd0 <low_level_init>

  return ERR_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08018204 	.word	0x08018204
 8005434:	08018220 	.word	0x08018220
 8005438:	08018230 	.word	0x08018230
 800543c:	08014761 	.word	0x08014761
 8005440:	08005239 	.word	0x08005239

08005444 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	4809      	ldr	r0, [pc, #36]	@ (8005478 <pbuf_free_custom+0x34>)
 8005454:	f006 fc94 	bl	800bd80 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005458:	4b08      	ldr	r3, [pc, #32]	@ (800547c <pbuf_free_custom+0x38>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <pbuf_free_custom+0x38>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <pbuf_free_custom+0x3c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fbf4 	bl	8005c58 <osSemaphoreRelease>
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	0801bb88 	.word	0x0801bb88
 800547c:	20006110 	.word	0x20006110
 8005480:	20006254 	.word	0x20006254

08005484 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005488:	f7fc f89a 	bl	80015c0 <HAL_GetTick>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	@ 0x38
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a59      	ldr	r2, [pc, #356]	@ (8005618 <HAL_ETH_MspInit+0x184>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f040 80ab 	bne.w	800560e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	4b57      	ldr	r3, [pc, #348]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	4a56      	ldr	r2, [pc, #344]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80054c8:	4b54      	ldr	r3, [pc, #336]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	4b50      	ldr	r3, [pc, #320]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	4a4f      	ldr	r2, [pc, #316]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054e4:	4b4d      	ldr	r3, [pc, #308]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	4a48      	ldr	r2, [pc, #288]	@ (800561c <HAL_ETH_MspInit+0x188>)
 80054fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005500:	4b46      	ldr	r3, [pc, #280]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	4b42      	ldr	r3, [pc, #264]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4a41      	ldr	r2, [pc, #260]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005516:	f043 0310 	orr.w	r3, r3, #16
 800551a:	6313      	str	r3, [r2, #48]	@ 0x30
 800551c:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	4a3a      	ldr	r2, [pc, #232]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6313      	str	r3, [r2, #48]	@ 0x30
 8005538:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	4b34      	ldr	r3, [pc, #208]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6313      	str	r3, [r2, #48]	@ 0x30
 8005554:	4b31      	ldr	r3, [pc, #196]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	4b2d      	ldr	r3, [pc, #180]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	4a2c      	ldr	r2, [pc, #176]	@ (800561c <HAL_ETH_MspInit+0x188>)
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005570:	4b2a      	ldr	r3, [pc, #168]	@ (800561c <HAL_ETH_MspInit+0x188>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800557c:	2304      	movs	r3, #4
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005588:	2303      	movs	r3, #3
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800558c:	230b      	movs	r3, #11
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005594:	4619      	mov	r1, r3
 8005596:	4822      	ldr	r0, [pc, #136]	@ (8005620 <HAL_ETH_MspInit+0x18c>)
 8005598:	f7fe f982 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800559c:	233e      	movs	r3, #62	@ 0x3e
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a8:	2303      	movs	r3, #3
 80055aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ac:	230b      	movs	r3, #11
 80055ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055b4:	4619      	mov	r1, r3
 80055b6:	481b      	ldr	r0, [pc, #108]	@ (8005624 <HAL_ETH_MspInit+0x190>)
 80055b8:	f7fe f972 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80055bc:	238f      	movs	r3, #143	@ 0x8f
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c0:	2302      	movs	r3, #2
 80055c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c8:	2303      	movs	r3, #3
 80055ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055cc:	230b      	movs	r3, #11
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055d4:	4619      	mov	r1, r3
 80055d6:	4814      	ldr	r0, [pc, #80]	@ (8005628 <HAL_ETH_MspInit+0x194>)
 80055d8:	f7fe f962 	bl	80038a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 80055dc:	f643 0303 	movw	r3, #14339	@ 0x3803
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ea:	2303      	movs	r3, #3
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ee:	230b      	movs	r3, #11
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055f6:	4619      	mov	r1, r3
 80055f8:	480c      	ldr	r0, [pc, #48]	@ (800562c <HAL_ETH_MspInit+0x198>)
 80055fa:	f7fe f951 	bl	80038a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80055fe:	2200      	movs	r2, #0
 8005600:	2105      	movs	r1, #5
 8005602:	203d      	movs	r0, #61	@ 0x3d
 8005604:	f7fc fe65 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005608:	203d      	movs	r0, #61	@ 0x3d
 800560a:	f7fc fe7e 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800560e:	bf00      	nop
 8005610:	3738      	adds	r7, #56	@ 0x38
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40028000 	.word	0x40028000
 800561c:	40023800 	.word	0x40023800
 8005620:	40021000 	.word	0x40021000
 8005624:	40020800 	.word	0x40020800
 8005628:	40020000 	.word	0x40020000
 800562c:	40020400 	.word	0x40020400

08005630 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005634:	4802      	ldr	r0, [pc, #8]	@ (8005640 <ETH_PHY_IO_Init+0x10>)
 8005636:	f7fd fccb 	bl	8002fd0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000625c 	.word	0x2000625c

08005644 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	4807      	ldr	r0, [pc, #28]	@ (8005684 <ETH_PHY_IO_ReadReg+0x30>)
 8005668:	f7fd fb1a 	bl	8002ca0 <HAL_ETH_ReadPHYRegister>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005676:	e000      	b.n	800567a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000625c 	.word	0x2000625c

08005688 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	68f9      	ldr	r1, [r7, #12]
 800569a:	4807      	ldr	r0, [pc, #28]	@ (80056b8 <ETH_PHY_IO_WriteReg+0x30>)
 800569c:	f7fd fb4b 	bl	8002d36 <HAL_ETH_WritePHYRegister>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056aa:	e000      	b.n	80056ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	2000625c 	.word	0x2000625c

080056bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056c0:	f7fb ff7e 	bl	80015c0 <HAL_GetTick>
 80056c4:	4603      	mov	r3, r0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b0a0      	sub	sp, #128	@ 0x80
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	2264      	movs	r2, #100	@ 0x64
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f011 fb77 	bl	8016dd0 <memset>
  int32_t PHYLinkState = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056ea:	2300      	movs	r3, #0
 80056ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ee:	2300      	movs	r3, #0
 80056f0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80056f6:	483a      	ldr	r0, [pc, #232]	@ (80057e0 <ethernet_link_thread+0x114>)
 80056f8:	f7fb fe75 	bl	80013e6 <DP83848_GetLinkState>
 80056fc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80056fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005700:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <ethernet_link_thread+0x5e>
 8005710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005712:	2b01      	cmp	r3, #1
 8005714:	dc09      	bgt.n	800572a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005716:	4833      	ldr	r0, [pc, #204]	@ (80057e4 <ethernet_link_thread+0x118>)
 8005718:	f7fc ff7d 	bl	8002616 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800571c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800571e:	f006 fdb3 	bl	800c288 <netif_set_down>
    netif_set_link_down(netif);
 8005722:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005724:	f006 fe16 	bl	800c354 <netif_set_link_down>
 8005728:	e055      	b.n	80057d6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800572a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800572c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d14e      	bne.n	80057d6 <ethernet_link_thread+0x10a>
 8005738:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800573a:	2b01      	cmp	r3, #1
 800573c:	dd4b      	ble.n	80057d6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800573e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005740:	3b02      	subs	r3, #2
 8005742:	2b03      	cmp	r3, #3
 8005744:	d82a      	bhi.n	800579c <ethernet_link_thread+0xd0>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <ethernet_link_thread+0x80>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800575c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005760:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005762:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005766:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005768:	2301      	movs	r3, #1
 800576a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800576c:	e017      	b.n	800579e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800576e:	2300      	movs	r3, #0
 8005770:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005776:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800577c:	e00f      	b.n	800579e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800577e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005782:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005784:	2300      	movs	r3, #0
 8005786:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005788:	2301      	movs	r3, #1
 800578a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800578c:	e007      	b.n	800579e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800578e:	2300      	movs	r3, #0
 8005790:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005792:	2300      	movs	r3, #0
 8005794:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800579a:	e000      	b.n	800579e <ethernet_link_thread+0xd2>
    default:
      break;
 800579c:	bf00      	nop
    }

    if(linkchanged)
 800579e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d018      	beq.n	80057d6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	480e      	ldr	r0, [pc, #56]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057ac:	f7fd fb0c 	bl	8002dc8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80057b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057b2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80057b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	4619      	mov	r1, r3
 80057be:	4809      	ldr	r0, [pc, #36]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057c0:	f7fd fbec 	bl	8002f9c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80057c4:	4807      	ldr	r0, [pc, #28]	@ (80057e4 <ethernet_link_thread+0x118>)
 80057c6:	f7fc fe39 	bl	800243c <HAL_ETH_Start>
      netif_set_up(netif);
 80057ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057cc:	f006 fcf0 	bl	800c1b0 <netif_set_up>
      netif_set_link_up(netif);
 80057d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057d2:	f006 fd8b 	bl	800c2ec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80057d6:	2064      	movs	r0, #100	@ 0x64
 80057d8:	f000 f90e 	bl	80059f8 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80057dc:	e78b      	b.n	80056f6 <ethernet_link_thread+0x2a>
 80057de:	bf00      	nop
 80057e0:	20006344 	.word	0x20006344
 80057e4:	2000625c 	.word	0x2000625c

080057e8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80057f0:	4812      	ldr	r0, [pc, #72]	@ (800583c <HAL_ETH_RxAllocateCallback+0x54>)
 80057f2:	f006 fa51 	bl	800bc98 <memp_malloc_pool>
 80057f6:	60f8      	str	r0, [r7, #12]
  if (p)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d014      	beq.n	8005828 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f103 0220 	add.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a0d      	ldr	r2, [pc, #52]	@ (8005840 <HAL_ETH_RxAllocateCallback+0x58>)
 800580c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2241      	movs	r2, #65	@ 0x41
 800581e:	2100      	movs	r1, #0
 8005820:	2000      	movs	r0, #0
 8005822:	f006 ffbb 	bl	800c79c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005826:	e005      	b.n	8005834 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005828:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_ETH_RxAllocateCallback+0x5c>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	0801bb88 	.word	0x0801bb88
 8005840:	08005445 	.word	0x08005445
 8005844:	20006110 	.word	0x20006110

08005848 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	@ 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3b20      	subs	r3, #32
 8005866:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2200      	movs	r2, #0
 8005872:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e003      	b.n	8005892 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e009      	b.n	80058b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	891a      	ldrh	r2, [r3, #8]
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	4413      	add	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f2      	bne.n	80058a0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	3724      	adds	r7, #36	@ 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f007 f91d 	bl	800cb10 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	4603      	mov	r3, r0
 80058e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058f0:	2b84      	cmp	r3, #132	@ 0x84
 80058f2:	d005      	beq.n	8005900 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	3303      	adds	r3, #3
 80058fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005900:	68fb      	ldr	r3, [r7, #12]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005914:	f3ef 8305 	mrs	r3, IPSR
 8005918:	607b      	str	r3, [r7, #4]
  return(result);
 800591a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005936:	f001 fd5f 	bl	80073f8 <vTaskStartScheduler>
  
  return osOK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}

08005940 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005944:	f7ff ffe3 	bl	800590e <inHandlerMode>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800594e:	f001 fe79 	bl	8007644 <xTaskGetTickCountFromISR>
 8005952:	4603      	mov	r3, r0
 8005954:	e002      	b.n	800595c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005956:	f001 fe65 	bl	8007624 <xTaskGetTickCount>
 800595a:	4603      	mov	r3, r0
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}

08005960 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	b089      	sub	sp, #36	@ 0x24
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <osThreadCreate+0x54>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01c      	beq.n	80059b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685c      	ldr	r4, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691e      	ldr	r6, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ffa6 	bl	80058de <makeFreeRtosPriority>
 8005992:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800599c:	9202      	str	r2, [sp, #8]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	9100      	str	r1, [sp, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	4632      	mov	r2, r6
 80059a6:	4629      	mov	r1, r5
 80059a8:	4620      	mov	r0, r4
 80059aa:	f001 fb3f 	bl	800702c <xTaskCreateStatic>
 80059ae:	4603      	mov	r3, r0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e01c      	b.n	80059ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685c      	ldr	r4, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff88 	bl	80058de <makeFreeRtosPriority>
 80059ce:	4602      	mov	r2, r0
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	9200      	str	r2, [sp, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4632      	mov	r2, r6
 80059dc:	4629      	mov	r1, r5
 80059de:	4620      	mov	r0, r4
 80059e0:	f001 fb84 	bl	80070ec <xTaskCreate>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <osDelay+0x16>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e000      	b.n	8005a10 <osDelay+0x18>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 fcbb 	bl	800738c <vTaskDelay>
  
  return osOK;
 8005a16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4619      	mov	r1, r3
 8005a36:	2001      	movs	r0, #1
 8005a38:	f000 fc85 	bl	8006346 <xQueueCreateMutexStatic>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	e003      	b.n	8005a48 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005a40:	2001      	movs	r0, #1
 8005a42:	f000 fc68 	bl	8006316 <xQueueCreateMutex>
 8005a46:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <osMutexWait+0x18>
    return osErrorParameter;
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	e03a      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a72:	d103      	bne.n	8005a7c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e009      	b.n	8005a90 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <osMutexWait+0x40>
      ticks = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a90:	f7ff ff3d 	bl	800590e <inHandlerMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f88c 	bl	8006bc0 <xQueueReceiveFromISR>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <osMutexWait+0x62>
      return osErrorOS;
 8005aae:	23ff      	movs	r3, #255	@ 0xff
 8005ab0:	e015      	b.n	8005ade <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <osMutexWait+0x8c>
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <osMutexWait+0x98>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e008      	b.n	8005adc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 ff67 	bl	80069a0 <xQueueSemaphoreTake>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d001      	beq.n	8005adc <osMutexWait+0x8c>
    return osErrorOS;
 8005ad8:	23ff      	movs	r3, #255	@ 0xff
 8005ada:	e000      	b.n	8005ade <osMutexWait+0x8e>
  }
  
  return osOK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005afc:	f7ff ff07 	bl	800590e <inHandlerMode>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fdd5 	bl	80066bc <xQueueGiveFromISR>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <osMutexRelease+0x30>
      return osErrorOS;
 8005b18:	23ff      	movs	r3, #255	@ 0xff
 8005b1a:	e017      	b.n	8005b4c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d013      	beq.n	8005b4a <osMutexRelease+0x5e>
 8005b22:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <osMutexRelease+0x68>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	e00a      	b.n	8005b4a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fc1e 	bl	800637c <xQueueGenericSend>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005b46:	23ff      	movs	r3, #255	@ 0xff
 8005b48:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10a      	bne.n	8005b86 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2203      	movs	r2, #3
 8005b76:	9200      	str	r2, [sp, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	f000 fad9 	bl	8006134 <xQueueGenericCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	e016      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e014      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d110      	bne.n	8005bb2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005b90:	2203      	movs	r2, #3
 8005b92:	2100      	movs	r1, #0
 8005b94:	2001      	movs	r0, #1
 8005b96:	f000 fb4a 	bl	800622e <xQueueGenericCreate>
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <osSemaphoreCreate+0x56>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fbe7 	bl	800637c <xQueueGenericSend>
      return sema;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e000      	b.n	8005bb4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005bb2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005bd0:	2380      	movs	r3, #128	@ 0x80
 8005bd2:	e03a      	b.n	8005c4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bde:	d103      	bne.n	8005be8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e009      	b.n	8005bfc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <osSemaphoreWait+0x40>
      ticks = 1;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005bfc:	f7ff fe87 	bl	800590e <inHandlerMode>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d017      	beq.n	8005c36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 ffd6 	bl	8006bc0 <xQueueReceiveFromISR>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c1a:	23ff      	movs	r3, #255	@ 0xff
 8005c1c:	e015      	b.n	8005c4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <osSemaphoreWait+0x8c>
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <osSemaphoreWait+0x98>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	e008      	b.n	8005c48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 feb1 	bl	80069a0 <xQueueSemaphoreTake>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c44:	23ff      	movs	r3, #255	@ 0xff
 8005c46:	e000      	b.n	8005c4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005c68:	f7ff fe51 	bl	800590e <inHandlerMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c72:	f107 0308 	add.w	r3, r7, #8
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fd1f 	bl	80066bc <xQueueGiveFromISR>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c84:	23ff      	movs	r3, #255	@ 0xff
 8005c86:	e017      	b.n	8005cb8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <osSemaphoreRelease+0x5e>
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <osSemaphoreRelease+0x68>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	e00a      	b.n	8005cb6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fb68 	bl	800637c <xQueueGenericSend>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005cb2:	23ff      	movs	r3, #255	@ 0xff
 8005cb4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	e000ed04 	.word	0xe000ed04

08005cc4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ccc:	f7ff fe1f 	bl	800590e <inHandlerMode>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005cd6:	2382      	movs	r3, #130	@ 0x82
 8005cd8:	e003      	b.n	8005ce2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f830 	bl	8006d40 <vQueueDelete>

  return osOK; 
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005cea:	b590      	push	{r4, r7, lr}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <osMessageCreate+0x36>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2400      	movs	r4, #0
 8005d16:	9400      	str	r4, [sp, #0]
 8005d18:	f000 fa0c 	bl	8006134 <xQueueGenericCreateStatic>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e008      	b.n	8005d32 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f000 fa7f 	bl	800622e <xQueueGenericCreate>
 8005d30:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd90      	pop	{r4, r7, pc}
	...

08005d3c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <osMessagePut+0x1e>
    ticks = 1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005d5a:	f7ff fdd8 	bl	800590e <inHandlerMode>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005d64:	f107 0210 	add.w	r2, r7, #16
 8005d68:	f107 0108 	add.w	r1, r7, #8
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fc06 	bl	8006580 <xQueueGenericSendFromISR>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <osMessagePut+0x42>
      return osErrorOS;
 8005d7a:	23ff      	movs	r3, #255	@ 0xff
 8005d7c:	e018      	b.n	8005db0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d014      	beq.n	8005dae <osMessagePut+0x72>
 8005d84:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <osMessagePut+0x7c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	e00b      	b.n	8005dae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d96:	f107 0108 	add.w	r1, r7, #8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 faec 	bl	800637c <xQueueGenericSend>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d001      	beq.n	8005dae <osMessagePut+0x72>
      return osErrorOS;
 8005daa:	23ff      	movs	r3, #255	@ 0xff
 8005dac:	e000      	b.n	8005db0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b08b      	sub	sp, #44	@ 0x2c
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	617b      	str	r3, [r7, #20]
    return event;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	461c      	mov	r4, r3
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dea:	e054      	b.n	8005e96 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dfa:	d103      	bne.n	8005e04 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e02:	e009      	b.n	8005e18 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <osMessageGet+0x5c>
      ticks = 1;
 8005e14:	2301      	movs	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e18:	f7ff fd79 	bl	800590e <inHandlerMode>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01c      	beq.n	8005e5c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e22:	f107 0220 	add.w	r2, r7, #32
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f000 fec6 	bl	8006bc0 <xQueueReceiveFromISR>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e001      	b.n	8005e44 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01d      	beq.n	8005e86 <osMessageGet+0xca>
 8005e4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <osMessageGet+0xe4>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	e014      	b.n	8005e86 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	3304      	adds	r3, #4
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	4619      	mov	r1, r3
 8005e66:	68b8      	ldr	r0, [r7, #8]
 8005e68:	f000 fcb8 	bl	80067dc <xQueueReceive>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e72:	2310      	movs	r3, #16
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e006      	b.n	8005e86 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <osMessageGet+0xc6>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <osMessageGet+0xc8>
 8005e82:	2340      	movs	r3, #64	@ 0x40
 8005e84:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	461c      	mov	r4, r3
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	372c      	adds	r7, #44	@ 0x2c
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005eac:	f7ff fd2f 	bl	800590e <inHandlerMode>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 ff23 	bl	8006d02 <uxQueueMessagesWaitingFromISR>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e003      	b.n	8005ec8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 feff 	bl	8006cc4 <uxQueueMessagesWaiting>
 8005ec6:	4603      	mov	r3, r0
  }
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ed8:	f7ff fd19 	bl	800590e <inHandlerMode>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <osMessageDelete+0x16>
    return osErrorISR;
 8005ee2:	2382      	movs	r3, #130	@ 0x82
 8005ee4:	e003      	b.n	8005eee <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 ff2a 	bl	8006d40 <vQueueDelete>

  return osOK; 
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 0208 	add.w	r2, r3, #8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0208 	add.w	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f103 0208 	add.w	r2, r3, #8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fae:	d103      	bne.n	8005fb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e00c      	b.n	8005fd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e002      	b.n	8005fc6 <vListInsert+0x2e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d2f6      	bcs.n	8005fc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6892      	ldr	r2, [r2, #8]
 8006020:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d103      	bne.n	800603e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10b      	bne.n	800608c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800608c:	f002 f94c 	bl	8008328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	3b01      	subs	r3, #1
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	22ff      	movs	r2, #255	@ 0xff
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	@ 0xff
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d114      	bne.n	800610c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3310      	adds	r3, #16
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 fbfe 	bl	80078f0 <xTaskRemoveFromEventList>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d012      	beq.n	8006120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <xQueueGenericReset+0xd0>)
 80060fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	e009      	b.n	8006120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3310      	adds	r3, #16
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fef0 	bl	8005ef6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3324      	adds	r3, #36	@ 0x24
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff feeb 	bl	8005ef6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f002 f934 	bl	800838c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	@ 0x38
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <xQueueGenericCreateStatic+0x56>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <xQueueGenericCreateStatic+0x5a>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericCreateStatic+0x5c>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <xQueueGenericCreateStatic+0x84>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <xQueueGenericCreateStatic+0x88>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <xQueueGenericCreateStatic+0x8a>
 80061bc:	2300      	movs	r3, #0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	61fb      	str	r3, [r7, #28]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061da:	2348      	movs	r3, #72	@ 0x48
 80061dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b48      	cmp	r3, #72	@ 0x48
 80061e2:	d00b      	beq.n	80061fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	61bb      	str	r3, [r7, #24]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	4613      	mov	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f840 	bl	80062a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006226:	4618      	mov	r0, r3
 8006228:	3730      	adds	r7, #48	@ 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800622e:	b580      	push	{r7, lr}
 8006230:	b08a      	sub	sp, #40	@ 0x28
 8006232:	af02      	add	r7, sp, #8
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	4613      	mov	r3, r2
 800623a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	613b      	str	r3, [r7, #16]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3348      	adds	r3, #72	@ 0x48
 8006268:	4618      	mov	r0, r3
 800626a:	f002 f97f 	bl	800856c <pvPortMalloc>
 800626e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3348      	adds	r3, #72	@ 0x48
 800627e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006288:	79fa      	ldrb	r2, [r7, #7]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f805 	bl	80062a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800629a:	69bb      	ldr	r3, [r7, #24]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e002      	b.n	80062c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062d2:	2101      	movs	r1, #1
 80062d4:	69b8      	ldr	r0, [r7, #24]
 80062d6:	f7ff fec3 	bl	8006060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006302:	2300      	movs	r3, #0
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f837 	bl	800637c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	4603      	mov	r3, r0
 800631e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	2300      	movs	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	461a      	mov	r2, r3
 800632c:	6939      	ldr	r1, [r7, #16]
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f7ff ff7d 	bl	800622e <xQueueGenericCreate>
 8006334:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ffd3 	bl	80062e2 <prvInitialiseMutex>

		return xNewQueue;
 800633c:	68fb      	ldr	r3, [r7, #12]
	}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006346:	b580      	push	{r7, lr}
 8006348:	b088      	sub	sp, #32
 800634a:	af02      	add	r7, sp, #8
 800634c:	4603      	mov	r3, r0
 800634e:	6039      	str	r1, [r7, #0]
 8006350:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	2300      	movs	r3, #0
 8006358:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	6939      	ldr	r1, [r7, #16]
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	f7ff fee5 	bl	8006134 <xQueueGenericCreateStatic>
 800636a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ffb8 	bl	80062e2 <prvInitialiseMutex>

		return xNewQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	@ 0x38
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <xQueueGenericSend+0x34>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <xQueueGenericSend+0x42>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <xQueueGenericSend+0x46>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <xQueueGenericSend+0x48>
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <xQueueGenericSend+0x64>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x72>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSend+0x76>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSend+0x78>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <xQueueGenericSend+0x94>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006410:	f001 fc34 	bl	8007c7c <xTaskGetSchedulerState>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <xQueueGenericSend+0xa4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <xQueueGenericSend+0xa8>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <xQueueGenericSend+0xaa>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <xQueueGenericSend+0xc6>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006442:	f001 ff71 	bl	8008328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <xQueueGenericSend+0xdc>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d129      	bne.n	80064ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800645e:	f000 fcab 	bl	8006db8 <prvCopyDataToQueue>
 8006462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	3324      	adds	r3, #36	@ 0x24
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fa3d 	bl	80078f0 <xTaskRemoveFromEventList>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800647c:	4b3f      	ldr	r3, [pc, #252]	@ (800657c <xQueueGenericSend+0x200>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	e00a      	b.n	80064a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800648e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006494:	4b39      	ldr	r3, [pc, #228]	@ (800657c <xQueueGenericSend+0x200>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a4:	f001 ff72 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e063      	b.n	8006574 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b2:	f001 ff6b 	bl	800838c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e05c      	b.n	8006574 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fa77 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ce:	f001 ff5d 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d2:	f000 fffb 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064d6:	f001 ff27 	bl	8008328 <vPortEnterCritical>
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064e6:	d103      	bne.n	80064f0 <xQueueGenericSend+0x174>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064fc:	d103      	bne.n	8006506 <xQueueGenericSend+0x18a>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006506:	f001 ff41 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650a:	1d3a      	adds	r2, r7, #4
 800650c:	f107 0314 	add.w	r3, r7, #20
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fa66 	bl	80079e4 <xTaskCheckForTimeOut>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d124      	bne.n	8006568 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800651e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006520:	f000 fd42 	bl	8006fa8 <prvIsQueueFull>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	3310      	adds	r3, #16
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f9b6 	bl	80078a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800653a:	f000 fccd 	bl	8006ed8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f000 ffd3 	bl	80074e8 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f af7c 	bne.w	8006442 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <xQueueGenericSend+0x200>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	e772      	b.n	8006442 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800655c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655e:	f000 fcbb 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006562:	f000 ffc1 	bl	80074e8 <xTaskResumeAll>
 8006566:	e76c      	b.n	8006442 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800656a:	f000 fcb5 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800656e:	f000 ffbb 	bl	80074e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006574:	4618      	mov	r0, r3
 8006576:	3738      	adds	r7, #56	@ 0x38
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b090      	sub	sp, #64	@ 0x40
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	e7fd      	b.n	80065ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x3e>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x42>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x44>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSendFromISR+0x6e>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <xQueueGenericSendFromISR+0x72>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueGenericSendFromISR+0x74>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	623b      	str	r3, [r7, #32]
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006610:	f001 ff6a 	bl	80084e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006614:	f3ef 8211 	mrs	r2, BASEPRI
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	61fa      	str	r2, [r7, #28]
 800662a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800662c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <xQueueGenericSendFromISR+0xc2>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d12f      	bne.n	80066a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006658:	f000 fbae 	bl	8006db8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800665c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006664:	d112      	bne.n	800668c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	3324      	adds	r3, #36	@ 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f93c 	bl	80078f0 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800668c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006690:	3301      	adds	r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	b25a      	sxtb	r2, r3
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066a0:	e001      	b.n	80066a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3740      	adds	r7, #64	@ 0x40
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	@ 0x38
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <xQueueGiveFromISR+0x5c>
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <xQueueGiveFromISR+0x60>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <xQueueGiveFromISR+0x62>
 800671c:	2300      	movs	r3, #0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61bb      	str	r3, [r7, #24]
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800673a:	f001 fed5 	bl	80084e8 <vPortValidateInterruptPriority>
	__asm volatile
 800673e:	f3ef 8211 	mrs	r2, BASEPRI
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006756:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006766:	429a      	cmp	r2, r3
 8006768:	d22b      	bcs.n	80067c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800677c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006784:	d112      	bne.n	80067ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	3324      	adds	r3, #36	@ 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f8ac 	bl	80078f0 <xTaskRemoveFromEventList>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067b0:	3301      	adds	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067bc:	2301      	movs	r3, #1
 80067be:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c0:	e001      	b.n	80067c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f383 8811 	msr	BASEPRI, r3
}
 80067d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3738      	adds	r7, #56	@ 0x38
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	@ 0x30
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <xQueueReceive+0x32>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	623b      	str	r3, [r7, #32]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <xQueueReceive+0x40>
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <xQueueReceive+0x44>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <xQueueReceive+0x46>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <xQueueReceive+0x62>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61fb      	str	r3, [r7, #28]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683e:	f001 fa1d 	bl	8007c7c <xTaskGetSchedulerState>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <xQueueReceive+0x72>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueReceive+0x76>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueReceive+0x78>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <xQueueReceive+0x94>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61bb      	str	r3, [r7, #24]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006870:	f001 fd5a 	bl	8008328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01f      	beq.n	80068c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006884:	f000 fb02 	bl	8006e8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1e5a      	subs	r2, r3, #1
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	3310      	adds	r3, #16
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f827 	bl	80078f0 <xTaskRemoveFromEventList>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068a8:	4b3c      	ldr	r3, [pc, #240]	@ (800699c <xQueueReceive+0x1c0>)
 80068aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068b8:	f001 fd68 	bl	800838c <vPortExitCritical>
				return pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	e069      	b.n	8006994 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068c6:	f001 fd61 	bl	800838c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e062      	b.n	8006994 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f86d 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e2:	f001 fd53 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e6:	f000 fdf1 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ea:	f001 fd1d 	bl	8008328 <vPortEnterCritical>
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068fa:	d103      	bne.n	8006904 <xQueueReceive+0x128>
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006910:	d103      	bne.n	800691a <xQueueReceive+0x13e>
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800691a:	f001 fd37 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f85c 	bl	80079e4 <xTaskCheckForTimeOut>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d123      	bne.n	800697a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006934:	f000 fb22 	bl	8006f7c <prvIsQueueEmpty>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d017      	beq.n	800696e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	3324      	adds	r3, #36	@ 0x24
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 ffac 	bl	80078a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800694c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800694e:	f000 fac3 	bl	8006ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006952:	f000 fdc9 	bl	80074e8 <xTaskResumeAll>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d189      	bne.n	8006870 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800695c:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <xQueueReceive+0x1c0>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	e780      	b.n	8006870 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f000 fab2 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006974:	f000 fdb8 	bl	80074e8 <xTaskResumeAll>
 8006978:	e77a      	b.n	8006870 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800697a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697c:	f000 faac 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006980:	f000 fdb2 	bl	80074e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006986:	f000 faf9 	bl	8006f7c <prvIsQueueEmpty>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	f43f af6f 	beq.w	8006870 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006992:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	@ 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	@ 0x38
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	623b      	str	r3, [r7, #32]
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	61fb      	str	r3, [r7, #28]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f4:	f001 f942 	bl	8007c7c <xTaskGetSchedulerState>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <xQueueSemaphoreTake+0x64>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <xQueueSemaphoreTake+0x68>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <xQueueSemaphoreTake+0x6a>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	61bb      	str	r3, [r7, #24]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a26:	f001 fc7f 	bl	8008328 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d024      	beq.n	8006a80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a46:	f001 fac5 	bl	8007fd4 <pvTaskIncrementMutexHeldCount>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00f      	beq.n	8006a78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 ff47 	bl	80078f0 <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a68:	4b54      	ldr	r3, [pc, #336]	@ (8006bbc <xQueueSemaphoreTake+0x21c>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a78:	f001 fc88 	bl	800838c <vPortExitCritical>
				return pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e098      	b.n	8006bb2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d112      	bne.n	8006aac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	617b      	str	r3, [r7, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006aa4:	f001 fc72 	bl	800838c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e082      	b.n	8006bb2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 ff7e 	bl	80079b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ac0:	f001 fc64 	bl	800838c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ac4:	f000 fd02 	bl	80074cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ac8:	f001 fc2e 	bl	8008328 <vPortEnterCritical>
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad8:	d103      	bne.n	8006ae2 <xQueueSemaphoreTake+0x142>
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aee:	d103      	bne.n	8006af8 <xQueueSemaphoreTake+0x158>
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006af8:	f001 fc48 	bl	800838c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006afc:	463a      	mov	r2, r7
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 ff6d 	bl	80079e4 <xTaskCheckForTimeOut>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d132      	bne.n	8006b76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b12:	f000 fa33 	bl	8006f7c <prvIsQueueEmpty>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d026      	beq.n	8006b6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b24:	f001 fc00 	bl	8008328 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f8c3 	bl	8007cb8 <xTaskPriorityInherit>
 8006b32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b34:	f001 fc2a 	bl	800838c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	3324      	adds	r3, #36	@ 0x24
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 feaf 	bl	80078a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b48:	f000 f9c6 	bl	8006ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b4c:	f000 fccc 	bl	80074e8 <xTaskResumeAll>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f af67 	bne.w	8006a26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b58:	4b18      	ldr	r3, [pc, #96]	@ (8006bbc <xQueueSemaphoreTake+0x21c>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	e75d      	b.n	8006a26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b6c:	f000 f9b4 	bl	8006ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b70:	f000 fcba 	bl	80074e8 <xTaskResumeAll>
 8006b74:	e757      	b.n	8006a26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b78:	f000 f9ae 	bl	8006ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b7c:	f000 fcb4 	bl	80074e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b82:	f000 f9fb 	bl	8006f7c <prvIsQueueEmpty>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f43f af4c 	beq.w	8006a26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00d      	beq.n	8006bb0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b94:	f001 fbc8 	bl	8008328 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b9a:	f000 f8f5 	bl	8006d88 <prvGetDisinheritPriorityAfterTimeout>
 8006b9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f984 	bl	8007eb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bac:	f001 fbee 	bl	800838c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3738      	adds	r7, #56	@ 0x38
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	@ 0x38
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	623b      	str	r3, [r7, #32]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueReceiveFromISR+0x3c>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <xQueueReceiveFromISR+0x40>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <xQueueReceiveFromISR+0x42>
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	61fb      	str	r3, [r7, #28]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c1e:	f001 fc63 	bl	80084e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c22:	f3ef 8211 	mrs	r2, BASEPRI
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61ba      	str	r2, [r7, #24]
 8006c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02f      	beq.n	8006caa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c58:	f000 f918 	bl	8006e8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c6c:	d112      	bne.n	8006c94 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	3310      	adds	r3, #16
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fe38 	bl	80078f0 <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e007      	b.n	8006ca4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c98:	3301      	adds	r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	b25a      	sxtb	r2, r3
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca8:	e001      	b.n	8006cae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
}
 8006cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3738      	adds	r7, #56	@ 0x38
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60bb      	str	r3, [r7, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	e7fd      	b.n	8006ce6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006cea:	f001 fb1d 	bl	8008328 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006cf4:	f001 fb4a 	bl	800838c <vPortExitCritical>

	return uxReturn;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006d32:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <vQueueDelete+0x2a>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f934 	bl	8006fd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 fcc4 	bl	8008708 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1c3 0307 	rsb	r3, r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e001      	b.n	8006daa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006daa:	68fb      	ldr	r3, [r7, #12]
	}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d14d      	bne.n	8006e7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 ffde 	bl	8007da4 <xTaskPriorityDisinherit>
 8006de8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	e043      	b.n	8006e7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d119      	bne.n	8006e2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6858      	ldr	r0, [r3, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	461a      	mov	r2, r3
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	f010 f869 	bl	8016eda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d32b      	bcc.n	8006e7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	e026      	b.n	8006e7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68d8      	ldr	r0, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	461a      	mov	r2, r3
 8006e36:	68b9      	ldr	r1, [r7, #8]
 8006e38:	f010 f84f 	bl	8016eda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	425b      	negs	r3, r3
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d207      	bcs.n	8006e68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	425b      	negs	r3, r3
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d105      	bne.n	8006e7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d018      	beq.n	8006ed0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d303      	bcc.n	8006ec0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68d9      	ldr	r1, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6838      	ldr	r0, [r7, #0]
 8006ecc:	f010 f805 	bl	8016eda <memcpy>
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ee0:	f001 fa22 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eec:	e011      	b.n	8006f12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3324      	adds	r3, #36	@ 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fcf8 	bl	80078f0 <xTaskRemoveFromEventList>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f06:	f000 fdd1 	bl	8007aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dce9      	bgt.n	8006eee <prvUnlockQueue+0x16>
 8006f1a:	e000      	b.n	8006f1e <prvUnlockQueue+0x46>
					break;
 8006f1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	22ff      	movs	r2, #255	@ 0xff
 8006f22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 fa31 	bl	800838c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f2a:	f001 f9fd 	bl	8008328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f36:	e011      	b.n	8006f5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3310      	adds	r3, #16
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fcd3 	bl	80078f0 <xTaskRemoveFromEventList>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f50:	f000 fdac 	bl	8007aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dce9      	bgt.n	8006f38 <prvUnlockQueue+0x60>
 8006f64:	e000      	b.n	8006f68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	22ff      	movs	r2, #255	@ 0xff
 8006f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f70:	f001 fa0c 	bl	800838c <vPortExitCritical>
}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f84:	f001 f9d0 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d102      	bne.n	8006f96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e001      	b.n	8006f9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f9a:	f001 f9f7 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fb0:	f001 f9ba 	bl	8008328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d102      	bne.n	8006fc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e001      	b.n	8006fca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fca:	f001 f9df 	bl	800838c <vPortExitCritical>

	return xReturn;
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e016      	b.n	8007014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fe6:	4a10      	ldr	r2, [pc, #64]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d10b      	bne.n	800700e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007000:	4a09      	ldr	r2, [pc, #36]	@ (8007028 <vQueueUnregisterQueue+0x50>)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	2200      	movs	r2, #0
 800700a:	605a      	str	r2, [r3, #4]
				break;
 800700c:	e006      	b.n	800701c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b07      	cmp	r3, #7
 8007018:	d9e5      	bls.n	8006fe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	20006364 	.word	0x20006364

0800702c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08e      	sub	sp, #56	@ 0x38
 8007030:	af04      	add	r7, sp, #16
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800703a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	623b      	str	r3, [r7, #32]
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	e7fd      	b.n	8007054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10b      	bne.n	8007076 <xTaskCreateStatic+0x4a>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61fb      	str	r3, [r7, #28]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007076:	23a0      	movs	r3, #160	@ 0xa0
 8007078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2ba0      	cmp	r3, #160	@ 0xa0
 800707e:	d00b      	beq.n	8007098 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	61bb      	str	r3, [r7, #24]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007098:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <xTaskCreateStatic+0xb2>
 80070a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01b      	beq.n	80070de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070b8:	2300      	movs	r3, #0
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f851 	bl	8007178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070d8:	f000 f8ee 	bl	80072b8 <prvAddNewTaskToReadyList>
 80070dc:	e001      	b.n	80070e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070e2:	697b      	ldr	r3, [r7, #20]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	@ 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08c      	sub	sp, #48	@ 0x30
 80070f0:	af04      	add	r7, sp, #16
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fa33 	bl	800856c <pvPortMalloc>
 8007106:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800710e:	20a0      	movs	r0, #160	@ 0xa0
 8007110:	f001 fa2c 	bl	800856c <pvPortMalloc>
 8007114:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
 8007122:	e005      	b.n	8007130 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007124:	6978      	ldr	r0, [r7, #20]
 8007126:	f001 faef 	bl	8008708 <vPortFree>
 800712a:	e001      	b.n	8007130 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d017      	beq.n	8007166 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	2300      	movs	r3, #0
 8007142:	9303      	str	r3, [sp, #12]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f80f 	bl	8007178 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800715a:	69f8      	ldr	r0, [r7, #28]
 800715c:	f000 f8ac 	bl	80072b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007160:	2301      	movs	r3, #1
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e002      	b.n	800716c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800716a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800716c:	69bb      	ldr	r3, [r7, #24]
	}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007190:	3b01      	subs	r3, #1
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	617b      	str	r3, [r7, #20]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01f      	beq.n	8007208 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e012      	b.n	80071f4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	4413      	add	r3, r2
 80071d4:	7819      	ldrb	r1, [r3, #0]
 80071d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	3334      	adds	r3, #52	@ 0x34
 80071de:	460a      	mov	r2, r1
 80071e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d9e9      	bls.n	80071ce <prvInitialiseNewTask+0x56>
 80071fa:	e000      	b.n	80071fe <prvInitialiseNewTask+0x86>
			{
				break;
 80071fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007206:	e003      	b.n	8007210 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	2b06      	cmp	r3, #6
 8007214:	d901      	bls.n	800721a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007216:	2306      	movs	r3, #6
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800721e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2200      	movs	r2, #0
 800722a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800722c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722e:	3304      	adds	r3, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fe80 	bl	8005f36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	3318      	adds	r3, #24
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fe7b 	bl	8005f36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007248:	f1c3 0207 	rsb	r2, r3, #7
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007254:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2200      	movs	r2, #0
 8007262:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	334c      	adds	r3, #76	@ 0x4c
 800726a:	224c      	movs	r2, #76	@ 0x4c
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f00f fdae 	bl	8016dd0 <memset>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	4a0d      	ldr	r2, [pc, #52]	@ (80072ac <prvInitialiseNewTask+0x134>)
 8007278:	651a      	str	r2, [r3, #80]	@ 0x50
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	4a0c      	ldr	r2, [pc, #48]	@ (80072b0 <prvInitialiseNewTask+0x138>)
 800727e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <prvInitialiseNewTask+0x13c>)
 8007284:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f000 ff1c 	bl	80080c8 <pxPortInitialiseStack>
 8007290:	4602      	mov	r2, r0
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000da00 	.word	0x2000da00
 80072b0:	2000da68 	.word	0x2000da68
 80072b4:	2000dad0 	.word	0x2000dad0

080072b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072c0:	f001 f832 	bl	8008328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	4a29      	ldr	r2, [pc, #164]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072ce:	4b29      	ldr	r3, [pc, #164]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072d6:	4a27      	ldr	r2, [pc, #156]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072dc:	4b24      	ldr	r3, [pc, #144]	@ (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072e4:	f000 fc06 	bl	8007af4 <prvInitialiseTaskLists>
 80072e8:	e00d      	b.n	8007306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ea:	4b23      	ldr	r3, [pc, #140]	@ (8007378 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072f2:	4b20      	ldr	r3, [pc, #128]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d802      	bhi.n	8007306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007300:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007306:	4b1d      	ldr	r3, [pc, #116]	@ (800737c <prvAddNewTaskToReadyList+0xc4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	4a1b      	ldr	r2, [pc, #108]	@ (800737c <prvAddNewTaskToReadyList+0xc4>)
 800730e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	2201      	movs	r2, #1
 8007316:	409a      	lsls	r2, r3
 8007318:	4b19      	ldr	r3, [pc, #100]	@ (8007380 <prvAddNewTaskToReadyList+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	4a18      	ldr	r2, [pc, #96]	@ (8007380 <prvAddNewTaskToReadyList+0xc8>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <prvAddNewTaskToReadyList+0xcc>)
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7fe fe09 	bl	8005f50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733e:	f001 f825 	bl	800838c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <prvAddNewTaskToReadyList+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800734a:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d207      	bcs.n	8007368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <prvAddNewTaskToReadyList+0xd0>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200064a4 	.word	0x200064a4
 8007374:	200063a4 	.word	0x200063a4
 8007378:	200064b0 	.word	0x200064b0
 800737c:	200064c0 	.word	0x200064c0
 8007380:	200064ac 	.word	0x200064ac
 8007384:	200063a8 	.word	0x200063a8
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d018      	beq.n	80073d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b14      	ldr	r3, [pc, #80]	@ (80073f0 <vTaskDelay+0x64>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <vTaskDelay+0x32>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073be:	f000 f885 	bl	80074cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fe19 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073ca:	f000 f88d 	bl	80074e8 <xTaskResumeAll>
 80073ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073d6:	4b07      	ldr	r3, [pc, #28]	@ (80073f4 <vTaskDelay+0x68>)
 80073d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200064cc 	.word	0x200064cc
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007406:	463a      	mov	r2, r7
 8007408:	1d39      	adds	r1, r7, #4
 800740a:	f107 0308 	add.w	r3, r7, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f7f9 f8ae 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	9202      	str	r2, [sp, #8]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2300      	movs	r3, #0
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	460a      	mov	r2, r1
 8007426:	4921      	ldr	r1, [pc, #132]	@ (80074ac <vTaskStartScheduler+0xb4>)
 8007428:	4821      	ldr	r0, [pc, #132]	@ (80074b0 <vTaskStartScheduler+0xb8>)
 800742a:	f7ff fdff 	bl	800702c <xTaskCreateStatic>
 800742e:	4603      	mov	r3, r0
 8007430:	4a20      	ldr	r2, [pc, #128]	@ (80074b4 <vTaskStartScheduler+0xbc>)
 8007432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007434:	4b1f      	ldr	r3, [pc, #124]	@ (80074b4 <vTaskStartScheduler+0xbc>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e001      	b.n	8007446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d11b      	bne.n	8007484 <vTaskStartScheduler+0x8c>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	613b      	str	r3, [r7, #16]
}
 800745e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007460:	4b15      	ldr	r3, [pc, #84]	@ (80074b8 <vTaskStartScheduler+0xc0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	334c      	adds	r3, #76	@ 0x4c
 8007466:	4a15      	ldr	r2, [pc, #84]	@ (80074bc <vTaskStartScheduler+0xc4>)
 8007468:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746a:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <vTaskStartScheduler+0xc8>)
 800746c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007472:	4b14      	ldr	r3, [pc, #80]	@ (80074c4 <vTaskStartScheduler+0xcc>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007478:	4b13      	ldr	r3, [pc, #76]	@ (80074c8 <vTaskStartScheduler+0xd0>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747e:	f000 feaf 	bl	80081e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007482:	e00f      	b.n	80074a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800748a:	d10b      	bne.n	80074a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60fb      	str	r3, [r7, #12]
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	e7fd      	b.n	80074a0 <vTaskStartScheduler+0xa8>
}
 80074a4:	bf00      	nop
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	08018258 	.word	0x08018258
 80074b0:	08007ac5 	.word	0x08007ac5
 80074b4:	200064c8 	.word	0x200064c8
 80074b8:	200063a4 	.word	0x200063a4
 80074bc:	2000003c 	.word	0x2000003c
 80074c0:	200064c4 	.word	0x200064c4
 80074c4:	200064b0 	.word	0x200064b0
 80074c8:	200064a8 	.word	0x200064a8

080074cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074d0:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <vTaskSuspendAll+0x18>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	4a03      	ldr	r2, [pc, #12]	@ (80074e4 <vTaskSuspendAll+0x18>)
 80074d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	200064cc 	.word	0x200064cc

080074e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074f6:	4b42      	ldr	r3, [pc, #264]	@ (8007600 <xTaskResumeAll+0x118>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xTaskResumeAll+0x2e>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	603b      	str	r3, [r7, #0]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007516:	f000 ff07 	bl	8008328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800751a:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <xTaskResumeAll+0x118>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	4a37      	ldr	r2, [pc, #220]	@ (8007600 <xTaskResumeAll+0x118>)
 8007522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007524:	4b36      	ldr	r3, [pc, #216]	@ (8007600 <xTaskResumeAll+0x118>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d161      	bne.n	80075f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800752c:	4b35      	ldr	r3, [pc, #212]	@ (8007604 <xTaskResumeAll+0x11c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d05d      	beq.n	80075f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007534:	e02e      	b.n	8007594 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007536:	4b34      	ldr	r3, [pc, #208]	@ (8007608 <xTaskResumeAll+0x120>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3318      	adds	r3, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fd61 	bl	800600a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fd5c 	bl	800600a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	2201      	movs	r2, #1
 8007558:	409a      	lsls	r2, r3
 800755a:	4b2c      	ldr	r3, [pc, #176]	@ (800760c <xTaskResumeAll+0x124>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4313      	orrs	r3, r2
 8007560:	4a2a      	ldr	r2, [pc, #168]	@ (800760c <xTaskResumeAll+0x124>)
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4a27      	ldr	r2, [pc, #156]	@ (8007610 <xTaskResumeAll+0x128>)
 8007572:	441a      	add	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe fce8 	bl	8005f50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007584:	4b23      	ldr	r3, [pc, #140]	@ (8007614 <xTaskResumeAll+0x12c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	429a      	cmp	r2, r3
 800758c:	d302      	bcc.n	8007594 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800758e:	4b22      	ldr	r3, [pc, #136]	@ (8007618 <xTaskResumeAll+0x130>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007594:	4b1c      	ldr	r3, [pc, #112]	@ (8007608 <xTaskResumeAll+0x120>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1cc      	bne.n	8007536 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075a2:	f000 fb4b 	bl	8007c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a6:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <xTaskResumeAll+0x134>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d010      	beq.n	80075d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075b2:	f000 f859 	bl	8007668 <xTaskIncrementTick>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075bc:	4b16      	ldr	r3, [pc, #88]	@ (8007618 <xTaskResumeAll+0x130>)
 80075be:	2201      	movs	r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f1      	bne.n	80075b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80075ce:	4b13      	ldr	r3, [pc, #76]	@ (800761c <xTaskResumeAll+0x134>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075d4:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <xTaskResumeAll+0x130>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <xTaskResumeAll+0x138>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075f0:	f000 fecc 	bl	800838c <vPortExitCritical>

	return xAlreadyYielded;
 80075f4:	68bb      	ldr	r3, [r7, #8]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	200064cc 	.word	0x200064cc
 8007604:	200064a4 	.word	0x200064a4
 8007608:	20006464 	.word	0x20006464
 800760c:	200064ac 	.word	0x200064ac
 8007610:	200063a8 	.word	0x200063a8
 8007614:	200063a4 	.word	0x200063a4
 8007618:	200064b8 	.word	0x200064b8
 800761c:	200064b4 	.word	0x200064b4
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800762a:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <xTaskGetTickCount+0x1c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007630:	687b      	ldr	r3, [r7, #4]
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	200064a8 	.word	0x200064a8

08007644 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800764a:	f000 ff4d 	bl	80084e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007652:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <xTaskGetTickCountFromISR+0x20>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007658:	683b      	ldr	r3, [r7, #0]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200064a8 	.word	0x200064a8

08007668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007672:	4b4f      	ldr	r3, [pc, #316]	@ (80077b0 <xTaskIncrementTick+0x148>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 808f 	bne.w	800779a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800767c:	4b4d      	ldr	r3, [pc, #308]	@ (80077b4 <xTaskIncrementTick+0x14c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007684:	4a4b      	ldr	r2, [pc, #300]	@ (80077b4 <xTaskIncrementTick+0x14c>)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d121      	bne.n	80076d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007690:	4b49      	ldr	r3, [pc, #292]	@ (80077b8 <xTaskIncrementTick+0x150>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <xTaskIncrementTick+0x46>
 80076b2:	4b41      	ldr	r3, [pc, #260]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	4b40      	ldr	r3, [pc, #256]	@ (80077bc <xTaskIncrementTick+0x154>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3e      	ldr	r2, [pc, #248]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4a3e      	ldr	r2, [pc, #248]	@ (80077bc <xTaskIncrementTick+0x154>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b3e      	ldr	r3, [pc, #248]	@ (80077c0 <xTaskIncrementTick+0x158>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	4a3c      	ldr	r2, [pc, #240]	@ (80077c0 <xTaskIncrementTick+0x158>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	f000 fab4 	bl	8007c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076d4:	4b3b      	ldr	r3, [pc, #236]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d348      	bcc.n	8007770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076de:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076ee:	601a      	str	r2, [r3, #0]
					break;
 80076f0:	e03e      	b.n	8007770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f2:	4b31      	ldr	r3, [pc, #196]	@ (80077b8 <xTaskIncrementTick+0x150>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d203      	bcs.n	8007712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800770a:	4a2e      	ldr	r2, [pc, #184]	@ (80077c4 <xTaskIncrementTick+0x15c>)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007710:	e02e      	b.n	8007770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fc77 	bl	800600a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3318      	adds	r3, #24
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fc6e 	bl	800600a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	2201      	movs	r2, #1
 8007734:	409a      	lsls	r2, r3
 8007736:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <xTaskIncrementTick+0x160>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	4a22      	ldr	r2, [pc, #136]	@ (80077c8 <xTaskIncrementTick+0x160>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a1f      	ldr	r2, [pc, #124]	@ (80077cc <xTaskIncrementTick+0x164>)
 800774e:	441a      	add	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fbfa 	bl	8005f50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007760:	4b1b      	ldr	r3, [pc, #108]	@ (80077d0 <xTaskIncrementTick+0x168>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	429a      	cmp	r2, r3
 8007768:	d3b9      	bcc.n	80076de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800776e:	e7b6      	b.n	80076de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007770:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <xTaskIncrementTick+0x168>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4915      	ldr	r1, [pc, #84]	@ (80077cc <xTaskIncrementTick+0x164>)
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d901      	bls.n	800778c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800778c:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <xTaskIncrementTick+0x16c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	e004      	b.n	80077a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800779a:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <xTaskIncrementTick+0x170>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	4a0d      	ldr	r2, [pc, #52]	@ (80077d8 <xTaskIncrementTick+0x170>)
 80077a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077a4:	697b      	ldr	r3, [r7, #20]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200064cc 	.word	0x200064cc
 80077b4:	200064a8 	.word	0x200064a8
 80077b8:	2000645c 	.word	0x2000645c
 80077bc:	20006460 	.word	0x20006460
 80077c0:	200064bc 	.word	0x200064bc
 80077c4:	200064c4 	.word	0x200064c4
 80077c8:	200064ac 	.word	0x200064ac
 80077cc:	200063a8 	.word	0x200063a8
 80077d0:	200063a4 	.word	0x200063a4
 80077d4:	200064b8 	.word	0x200064b8
 80077d8:	200064b4 	.word	0x200064b4

080077dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077e2:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <vTaskSwitchContext+0xb0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077ea:	4b29      	ldr	r3, [pc, #164]	@ (8007890 <vTaskSwitchContext+0xb4>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077f0:	e045      	b.n	800787e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80077f2:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <vTaskSwitchContext+0xb4>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <vTaskSwitchContext+0xb8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	fab3 f383 	clz	r3, r3
 8007804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	f1c3 031f 	rsb	r3, r3, #31
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <vTaskSwitchContext+0xbc>)
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	607b      	str	r3, [r7, #4]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <vTaskSwitchContext+0x5a>
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a14      	ldr	r2, [pc, #80]	@ (8007898 <vTaskSwitchContext+0xbc>)
 8007846:	4413      	add	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3308      	adds	r3, #8
 800785c:	429a      	cmp	r2, r3
 800785e:	d104      	bne.n	800786a <vTaskSwitchContext+0x8e>
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <vTaskSwitchContext+0xc0>)
 8007872:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007874:	4b09      	ldr	r3, [pc, #36]	@ (800789c <vTaskSwitchContext+0xc0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	334c      	adds	r3, #76	@ 0x4c
 800787a:	4a09      	ldr	r2, [pc, #36]	@ (80078a0 <vTaskSwitchContext+0xc4>)
 800787c:	6013      	str	r3, [r2, #0]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200064cc 	.word	0x200064cc
 8007890:	200064b8 	.word	0x200064b8
 8007894:	200064ac 	.word	0x200064ac
 8007898:	200063a8 	.word	0x200063a8
 800789c:	200063a4 	.word	0x200063a4
 80078a0:	2000003c 	.word	0x2000003c

080078a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60fb      	str	r3, [r7, #12]
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	e7fd      	b.n	80078c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <vTaskPlaceOnEventList+0x48>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe fb5f 	bl	8005f98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078da:	2101      	movs	r1, #1
 80078dc:	6838      	ldr	r0, [r7, #0]
 80078de:	f000 fb8d 	bl	8007ffc <prvAddCurrentTaskToDelayedList>
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	200063a4 	.word	0x200063a4

080078f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	60fb      	str	r3, [r7, #12]
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	e7fd      	b.n	800791a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3318      	adds	r3, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fb71 	bl	800600a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007928:	4b1d      	ldr	r3, [pc, #116]	@ (80079a0 <xTaskRemoveFromEventList+0xb0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11c      	bne.n	800796a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fb68 	bl	800600a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	2201      	movs	r2, #1
 8007940:	409a      	lsls	r2, r3
 8007942:	4b18      	ldr	r3, [pc, #96]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4313      	orrs	r3, r2
 8007948:	4a16      	ldr	r2, [pc, #88]	@ (80079a4 <xTaskRemoveFromEventList+0xb4>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a13      	ldr	r2, [pc, #76]	@ (80079a8 <xTaskRemoveFromEventList+0xb8>)
 800795a:	441a      	add	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fe faf4 	bl	8005f50 <vListInsertEnd>
 8007968:	e005      	b.n	8007976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3318      	adds	r3, #24
 800796e:	4619      	mov	r1, r3
 8007970:	480e      	ldr	r0, [pc, #56]	@ (80079ac <xTaskRemoveFromEventList+0xbc>)
 8007972:	f7fe faed 	bl	8005f50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <xTaskRemoveFromEventList+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d905      	bls.n	8007990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007988:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <xTaskRemoveFromEventList+0xc4>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e001      	b.n	8007994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007994:	697b      	ldr	r3, [r7, #20]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200064cc 	.word	0x200064cc
 80079a4:	200064ac 	.word	0x200064ac
 80079a8:	200063a8 	.word	0x200063a8
 80079ac:	20006464 	.word	0x20006464
 80079b0:	200063a4 	.word	0x200063a4
 80079b4:	200064b8 	.word	0x200064b8

080079b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <vTaskInternalSetTimeOutState+0x24>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <vTaskInternalSetTimeOutState+0x28>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	605a      	str	r2, [r3, #4]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	200064bc 	.word	0x200064bc
 80079e0:	200064a8 	.word	0x200064a8

080079e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a2a:	f000 fc7d 	bl	8008328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa4 <xTaskCheckForTimeOut+0xc0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a46:	d102      	bne.n	8007a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e023      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b15      	ldr	r3, [pc, #84]	@ (8007aa8 <xTaskCheckForTimeOut+0xc4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d007      	beq.n	8007a6a <xTaskCheckForTimeOut+0x86>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e015      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d20b      	bcs.n	8007a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff99 	bl	80079b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e004      	b.n	8007a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 fc79 	bl	800838c <vPortExitCritical>

	return xReturn;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200064a8 	.word	0x200064a8
 8007aa8:	200064bc 	.word	0x200064bc

08007aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab0:	4b03      	ldr	r3, [pc, #12]	@ (8007ac0 <vTaskMissedYield+0x14>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200064b8 	.word	0x200064b8

08007ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007acc:	f000 f852 	bl	8007b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad0:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <prvIdleTask+0x28>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d9f9      	bls.n	8007acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <prvIdleTask+0x2c>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae8:	e7f0      	b.n	8007acc <prvIdleTask+0x8>
 8007aea:	bf00      	nop
 8007aec:	200063a8 	.word	0x200063a8
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afa:	2300      	movs	r3, #0
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	e00c      	b.n	8007b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a12      	ldr	r2, [pc, #72]	@ (8007b54 <prvInitialiseTaskLists+0x60>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe f9f1 	bl	8005ef6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3301      	adds	r3, #1
 8007b18:	607b      	str	r3, [r7, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d9ef      	bls.n	8007b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b20:	480d      	ldr	r0, [pc, #52]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b22:	f7fe f9e8 	bl	8005ef6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b26:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b28:	f7fe f9e5 	bl	8005ef6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b2c:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <prvInitialiseTaskLists+0x6c>)
 8007b2e:	f7fe f9e2 	bl	8005ef6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b32:	480c      	ldr	r0, [pc, #48]	@ (8007b64 <prvInitialiseTaskLists+0x70>)
 8007b34:	f7fe f9df 	bl	8005ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b38:	480b      	ldr	r0, [pc, #44]	@ (8007b68 <prvInitialiseTaskLists+0x74>)
 8007b3a:	f7fe f9dc 	bl	8005ef6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <prvInitialiseTaskLists+0x78>)
 8007b40:	4a05      	ldr	r2, [pc, #20]	@ (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <prvInitialiseTaskLists+0x7c>)
 8007b46:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200063a8 	.word	0x200063a8
 8007b58:	20006434 	.word	0x20006434
 8007b5c:	20006448 	.word	0x20006448
 8007b60:	20006464 	.word	0x20006464
 8007b64:	20006478 	.word	0x20006478
 8007b68:	20006490 	.word	0x20006490
 8007b6c:	2000645c 	.word	0x2000645c
 8007b70:	20006460 	.word	0x20006460

08007b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7a:	e019      	b.n	8007bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b7c:	f000 fbd4 	bl	8008328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <prvCheckTasksWaitingTermination+0x50>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fa3c 	bl	800600a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba6:	f000 fbf1 	bl	800838c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f810 	bl	8007bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb0:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e1      	bne.n	8007b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20006478 	.word	0x20006478
 8007bc8:	200064a4 	.word	0x200064a4
 8007bcc:	2000648c 	.word	0x2000648c

08007bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	334c      	adds	r3, #76	@ 0x4c
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f00f f8ff 	bl	8016de0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fd89 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fd86 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bfc:	e019      	b.n	8007c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d103      	bne.n	8007c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd7d 	bl	8008708 <vPortFree>
	}
 8007c0e:	e010      	b.n	8007c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d00b      	beq.n	8007c32 <prvDeleteTCB+0x62>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	60fb      	str	r3, [r7, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <prvDeleteTCB+0x5e>
	}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c54:	e008      	b.n	8007c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <prvResetNextTaskUnblockTime+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	4a04      	ldr	r2, [pc, #16]	@ (8007c78 <prvResetNextTaskUnblockTime+0x3c>)
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	2000645c 	.word	0x2000645c
 8007c78:	200064c4 	.word	0x200064c4

08007c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c82:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <xTaskGetSchedulerState+0x34>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	e008      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <xTaskGetSchedulerState+0x38>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	e001      	b.n	8007ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ca2:	687b      	ldr	r3, [r7, #4]
	}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	200064b0 	.word	0x200064b0
 8007cb4:	200064cc 	.word	0x200064cc

08007cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d05e      	beq.n	8007d8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd2:	4b31      	ldr	r3, [pc, #196]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d24e      	bcs.n	8007d7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	db06      	blt.n	8007cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	f1c3 0207 	rsb	r2, r3, #7
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6959      	ldr	r1, [r3, #20]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4a26      	ldr	r2, [pc, #152]	@ (8007d9c <xTaskPriorityInherit+0xe4>)
 8007d04:	4413      	add	r3, r2
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d12f      	bne.n	8007d6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f97b 	bl	800600a <uxListRemove>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	2201      	movs	r2, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43da      	mvns	r2, r3
 8007d26:	4b1e      	ldr	r3, [pc, #120]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d30:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	2201      	movs	r2, #1
 8007d40:	409a      	lsls	r2, r3
 8007d42:	4b17      	ldr	r3, [pc, #92]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <xTaskPriorityInherit+0xe8>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4a10      	ldr	r2, [pc, #64]	@ (8007d9c <xTaskPriorityInherit+0xe4>)
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe f8f4 	bl	8005f50 <vListInsertEnd>
 8007d68:	e004      	b.n	8007d74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e008      	b.n	8007d8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <xTaskPriorityInherit+0xe0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d201      	bcs.n	8007d8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	200063a4 	.word	0x200063a4
 8007d9c:	200063a8 	.word	0x200063a8
 8007da0:	200064ac 	.word	0x200064ac

08007da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d070      	beq.n	8007e9c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dba:	4b3b      	ldr	r3, [pc, #236]	@ (8007ea8 <xTaskPriorityDisinherit+0x104>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d00b      	beq.n	8007ddc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60bb      	str	r3, [r7, #8]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d044      	beq.n	8007e9c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d140      	bne.n	8007e9c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe f8f3 	bl	800600a <uxListRemove>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d115      	bne.n	8007e56 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2e:	491f      	ldr	r1, [pc, #124]	@ (8007eac <xTaskPriorityDisinherit+0x108>)
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xTaskPriorityDisinherit+0xb2>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43da      	mvns	r2, r3
 8007e4c:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4013      	ands	r3, r2
 8007e52:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	f1c3 0207 	rsb	r2, r3, #7
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	2201      	movs	r2, #1
 8007e70:	409a      	lsls	r2, r3
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	4a0d      	ldr	r2, [pc, #52]	@ (8007eb0 <xTaskPriorityDisinherit+0x10c>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4a08      	ldr	r2, [pc, #32]	@ (8007eac <xTaskPriorityDisinherit+0x108>)
 8007e8a:	441a      	add	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe f85c 	bl	8005f50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e9c:	697b      	ldr	r3, [r7, #20]
	}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200063a4 	.word	0x200063a4
 8007eac:	200063a8 	.word	0x200063a8
 8007eb0:	200064ac 	.word	0x200064ac

08007eb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d079      	beq.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d902      	bls.n	8007efc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	e002      	b.n	8007f02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d059      	beq.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d154      	bne.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f16:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d10b      	bne.n	8007f38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db04      	blt.n	8007f56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f1c3 0207 	rsb	r2, r3, #7
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6959      	ldr	r1, [r3, #20]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4a19      	ldr	r2, [pc, #100]	@ (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f66:	4413      	add	r3, r2
 8007f68:	4299      	cmp	r1, r3
 8007f6a:	d129      	bne.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f84a 	bl	800600a <uxListRemove>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	2201      	movs	r2, #1
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43da      	mvns	r2, r3
 8007f88:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	4a10      	ldr	r2, [pc, #64]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f96:	2201      	movs	r2, #1
 8007f98:	409a      	lsls	r2, r3
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a06      	ldr	r2, [pc, #24]	@ (8007fcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fd ffc8 	bl	8005f50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fc0:	bf00      	nop
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200063a4 	.word	0x200063a4
 8007fcc:	200063a8 	.word	0x200063a8
 8007fd0:	200064ac 	.word	0x200064ac

08007fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fd8:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007fea:	4b03      	ldr	r3, [pc, #12]	@ (8007ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fec:	681b      	ldr	r3, [r3, #0]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	200063a4 	.word	0x200063a4

08007ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008006:	4b29      	ldr	r3, [pc, #164]	@ (80080ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800800c:	4b28      	ldr	r3, [pc, #160]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd fff9 	bl	800600a <uxListRemove>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800801e:	4b24      	ldr	r3, [pc, #144]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	2201      	movs	r2, #1
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	43da      	mvns	r2, r3
 800802c:	4b21      	ldr	r3, [pc, #132]	@ (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	4a20      	ldr	r2, [pc, #128]	@ (80080b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803c:	d10a      	bne.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008044:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	481a      	ldr	r0, [pc, #104]	@ (80080b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800804e:	f7fd ff7f 	bl	8005f50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008052:	e026      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800805c:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d209      	bcs.n	8008080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806c:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3304      	adds	r3, #4
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f7fd ff8d 	bl	8005f98 <vListInsert>
}
 800807e:	e010      	b.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008080:	4b0f      	ldr	r3, [pc, #60]	@ (80080c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fd ff83 	bl	8005f98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d202      	bcs.n	80080a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800809c:	4a09      	ldr	r2, [pc, #36]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6013      	str	r3, [r2, #0]
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200064a8 	.word	0x200064a8
 80080b0:	200063a4 	.word	0x200063a4
 80080b4:	200064ac 	.word	0x200064ac
 80080b8:	20006490 	.word	0x20006490
 80080bc:	20006460 	.word	0x20006460
 80080c0:	2000645c 	.word	0x2000645c
 80080c4:	200064c4 	.word	0x200064c4

080080c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b04      	subs	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080f8:	4a0c      	ldr	r2, [pc, #48]	@ (800812c <pxPortInitialiseStack+0x64>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b14      	subs	r3, #20
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b04      	subs	r3, #4
 800810e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f06f 0202 	mvn.w	r2, #2
 8008116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b20      	subs	r3, #32
 800811c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800811e:	68fb      	ldr	r3, [r7, #12]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	08008131 	.word	0x08008131

08008130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800813a:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <prvTaskExitError+0x58>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008142:	d00b      	beq.n	800815c <prvTaskExitError+0x2c>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <prvTaskExitError+0x28>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
}
 800816e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008170:	bf00      	nop
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0fc      	beq.n	8008172 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000020 	.word	0x20000020
 800818c:	00000000 	.word	0x00000000

08008190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	200063a4 	.word	0x200063a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081b8:	4808      	ldr	r0, [pc, #32]	@ (80081dc <prvPortStartFirstTask+0x24>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f380 8808 	msr	MSP, r0
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8814 	msr	CONTROL, r0
 80081ca:	b662      	cpsie	i
 80081cc:	b661      	cpsie	f
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	df00      	svc	0
 80081d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081da:	bf00      	nop
 80081dc:	e000ed08 	.word	0xe000ed08

080081e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081e6:	4b47      	ldr	r3, [pc, #284]	@ (8008304 <xPortStartScheduler+0x124>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <xPortStartScheduler+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10b      	bne.n	8008208 <xPortStartScheduler+0x28>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008208:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <xPortStartScheduler+0x124>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a3f      	ldr	r2, [pc, #252]	@ (800830c <xPortStartScheduler+0x12c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d10b      	bne.n	800822a <xPortStartScheduler+0x4a>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60fb      	str	r3, [r7, #12]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800822a:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <xPortStartScheduler+0x130>)
 800822c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	22ff      	movs	r2, #255	@ 0xff
 800823a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b31      	ldr	r3, [pc, #196]	@ (8008314 <xPortStartScheduler+0x134>)
 8008250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008252:	4b31      	ldr	r3, [pc, #196]	@ (8008318 <xPortStartScheduler+0x138>)
 8008254:	2207      	movs	r2, #7
 8008256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008258:	e009      	b.n	800826e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <xPortStartScheduler+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3b01      	subs	r3, #1
 8008260:	4a2d      	ldr	r2, [pc, #180]	@ (8008318 <xPortStartScheduler+0x138>)
 8008262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008276:	2b80      	cmp	r3, #128	@ 0x80
 8008278:	d0ef      	beq.n	800825a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800827a:	4b27      	ldr	r3, [pc, #156]	@ (8008318 <xPortStartScheduler+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f1c3 0307 	rsb	r3, r3, #7
 8008282:	2b04      	cmp	r3, #4
 8008284:	d00b      	beq.n	800829e <xPortStartScheduler+0xbe>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	e7fd      	b.n	800829a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800829e:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <xPortStartScheduler+0x138>)
 80082a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <xPortStartScheduler+0x138>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082b0:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <xPortStartScheduler+0x138>)
 80082b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082bc:	4b17      	ldr	r3, [pc, #92]	@ (800831c <xPortStartScheduler+0x13c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	@ (800831c <xPortStartScheduler+0x13c>)
 80082c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c8:	4b14      	ldr	r3, [pc, #80]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a13      	ldr	r2, [pc, #76]	@ (800831c <xPortStartScheduler+0x13c>)
 80082ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082d4:	f000 f8da 	bl	800848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <xPortStartScheduler+0x140>)
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082de:	f000 f8f9 	bl	80084d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e2:	4b10      	ldr	r3, [pc, #64]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008324 <xPortStartScheduler+0x144>)
 80082e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ee:	f7ff ff63 	bl	80081b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082f2:	f7ff fa73 	bl	80077dc <vTaskSwitchContext>
	prvTaskExitError();
 80082f6:	f7ff ff1b 	bl	8008130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed00 	.word	0xe000ed00
 8008308:	410fc271 	.word	0x410fc271
 800830c:	410fc270 	.word	0x410fc270
 8008310:	e000e400 	.word	0xe000e400
 8008314:	200064d0 	.word	0x200064d0
 8008318:	200064d4 	.word	0x200064d4
 800831c:	e000ed20 	.word	0xe000ed20
 8008320:	20000020 	.word	0x20000020
 8008324:	e000ef34 	.word	0xe000ef34

08008328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008342:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <vPortEnterCritical+0x5c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <vPortEnterCritical+0x5c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d110      	bne.n	8008376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008354:	4b0c      	ldr	r3, [pc, #48]	@ (8008388 <vPortEnterCritical+0x60>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <vPortEnterCritical+0x4e>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	603b      	str	r3, [r7, #0]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vPortEnterCritical+0x4a>
	}
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000020 	.word	0x20000020
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <vPortExitCritical+0x26>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	607b      	str	r3, [r7, #4]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	4a08      	ldr	r2, [pc, #32]	@ (80083dc <vPortExitCritical+0x50>)
 80083ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083bc:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <vPortExitCritical+0x50>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <vPortExitCritical+0x44>
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000020 	.word	0x20000020

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	@ (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7ff f9e4 	bl	80077dc <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	200063a4 	.word	0x200063a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008462:	f7ff f901 	bl	8007668 <xTaskIncrementTick>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800846c:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <xPortSysTickHandler+0x40>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f383 8811 	msr	BASEPRI, r3
}
 800847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008490:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008496:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <vPortSetupTimerInterrupt+0x38>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <vPortSetupTimerInterrupt+0x3c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	@ (80084cc <vPortSetupTimerInterrupt+0x40>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	4a09      	ldr	r2, [pc, #36]	@ (80084d0 <vPortSetupTimerInterrupt+0x44>)
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ae:	4b04      	ldr	r3, [pc, #16]	@ (80084c0 <vPortSetupTimerInterrupt+0x34>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	e000e010 	.word	0xe000e010
 80084c4:	e000e018 	.word	0xe000e018
 80084c8:	20000000 	.word	0x20000000
 80084cc:	10624dd3 	.word	0x10624dd3
 80084d0:	e000e014 	.word	0xe000e014

080084d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084e4 <vPortEnableVFP+0x10>
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084de:	6001      	str	r1, [r0, #0]
 80084e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e2:	bf00      	nop
 80084e4:	e000ed88 	.word	0xe000ed88

080084e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d915      	bls.n	8008526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fa:	4a18      	ldr	r2, [pc, #96]	@ (800855c <vPortValidateInterruptPriority+0x74>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008504:	4b16      	ldr	r3, [pc, #88]	@ (8008560 <vPortValidateInterruptPriority+0x78>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	7afa      	ldrb	r2, [r7, #11]
 800850a:	429a      	cmp	r2, r3
 800850c:	d20b      	bcs.n	8008526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008526:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <vPortValidateInterruptPriority+0x7c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800852e:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <vPortValidateInterruptPriority+0x80>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d90b      	bls.n	800854e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	603b      	str	r3, [r7, #0]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortValidateInterruptPriority+0x62>
	}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000e3f0 	.word	0xe000e3f0
 8008560:	200064d0 	.word	0x200064d0
 8008564:	e000ed0c 	.word	0xe000ed0c
 8008568:	200064d4 	.word	0x200064d4

0800856c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008578:	f7fe ffa8 	bl	80074cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800857c:	4b5c      	ldr	r3, [pc, #368]	@ (80086f0 <pvPortMalloc+0x184>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008584:	f000 f924 	bl	80087d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008588:	4b5a      	ldr	r3, [pc, #360]	@ (80086f4 <pvPortMalloc+0x188>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 8095 	bne.w	80086c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <pvPortMalloc+0x6e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	617b      	str	r3, [r7, #20]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d06f      	beq.n	80086c0 <pvPortMalloc+0x154>
 80085e0:	4b45      	ldr	r3, [pc, #276]	@ (80086f8 <pvPortMalloc+0x18c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d86a      	bhi.n	80086c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ea:	4b44      	ldr	r3, [pc, #272]	@ (80086fc <pvPortMalloc+0x190>)
 80085ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ee:	4b43      	ldr	r3, [pc, #268]	@ (80086fc <pvPortMalloc+0x190>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f4:	e004      	b.n	8008600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <pvPortMalloc+0xa6>
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1f1      	bne.n	80085f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008612:	4b37      	ldr	r3, [pc, #220]	@ (80086f0 <pvPortMalloc+0x184>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008618:	429a      	cmp	r2, r3
 800861a:	d051      	beq.n	80086c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2208      	movs	r2, #8
 8008622:	4413      	add	r3, r2
 8008624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	429a      	cmp	r2, r3
 800863c:	d920      	bls.n	8008680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800863e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <pvPortMalloc+0xfc>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800867a:	69b8      	ldr	r0, [r7, #24]
 800867c:	f000 f90a 	bl	8008894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008680:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	4a1b      	ldr	r2, [pc, #108]	@ (80086f8 <pvPortMalloc+0x18c>)
 800868c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868e:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <pvPortMalloc+0x18c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <pvPortMalloc+0x194>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d203      	bcs.n	80086a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800869a:	4b17      	ldr	r3, [pc, #92]	@ (80086f8 <pvPortMalloc+0x18c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	@ (8008700 <pvPortMalloc+0x194>)
 80086a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <pvPortMalloc+0x188>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086b6:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <pvPortMalloc+0x198>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <pvPortMalloc+0x198>)
 80086be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086c0:	f7fe ff12 	bl	80074e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <pvPortMalloc+0x17a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <pvPortMalloc+0x176>
	return pvReturn;
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	2000a0e0 	.word	0x2000a0e0
 80086f4:	2000a0f4 	.word	0x2000a0f4
 80086f8:	2000a0e4 	.word	0x2000a0e4
 80086fc:	2000a0d8 	.word	0x2000a0d8
 8008700:	2000a0e8 	.word	0x2000a0e8
 8008704:	2000a0ec 	.word	0x2000a0ec

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04f      	beq.n	80087ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b25      	ldr	r3, [pc, #148]	@ (80087c4 <vPortFree+0xbc>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <vPortFree+0x46>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60fb      	str	r3, [r7, #12]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <vPortFree+0x66>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <vPortFree+0xbc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4013      	ands	r3, r2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01e      	beq.n	80087ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11a      	bne.n	80087ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <vPortFree+0xbc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	43db      	mvns	r3, r3
 800878e:	401a      	ands	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008794:	f7fe fe9a 	bl	80074cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <vPortFree+0xc0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4413      	add	r3, r2
 80087a2:	4a09      	ldr	r2, [pc, #36]	@ (80087c8 <vPortFree+0xc0>)
 80087a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087a6:	6938      	ldr	r0, [r7, #16]
 80087a8:	f000 f874 	bl	8008894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <vPortFree+0xc4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <vPortFree+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087b6:	f7fe fe97 	bl	80074e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ba:	bf00      	nop
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	2000a0f4 	.word	0x2000a0f4
 80087c8:	2000a0e4 	.word	0x2000a0e4
 80087cc:	2000a0f0 	.word	0x2000a0f0

080087d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087dc:	4b27      	ldr	r3, [pc, #156]	@ (800887c <prvHeapInit+0xac>)
 80087de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00c      	beq.n	8008804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3307      	adds	r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	4a1f      	ldr	r2, [pc, #124]	@ (800887c <prvHeapInit+0xac>)
 8008800:	4413      	add	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <prvHeapInit+0xb0>)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800880e:	4b1c      	ldr	r3, [pc, #112]	@ (8008880 <prvHeapInit+0xb0>)
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800881c:	2208      	movs	r2, #8
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <prvHeapInit+0xb4>)
 8008830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008832:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <prvHeapInit+0xb4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <prvHeapInit+0xb4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	1ad2      	subs	r2, r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008850:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <prvHeapInit+0xb4>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4a0a      	ldr	r2, [pc, #40]	@ (8008888 <prvHeapInit+0xb8>)
 800885e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a09      	ldr	r2, [pc, #36]	@ (800888c <prvHeapInit+0xbc>)
 8008866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008868:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <prvHeapInit+0xc0>)
 800886a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800886e:	601a      	str	r2, [r3, #0]
}
 8008870:	bf00      	nop
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200064d8 	.word	0x200064d8
 8008880:	2000a0d8 	.word	0x2000a0d8
 8008884:	2000a0e0 	.word	0x2000a0e0
 8008888:	2000a0e8 	.word	0x2000a0e8
 800888c:	2000a0e4 	.word	0x2000a0e4
 8008890:	2000a0f4 	.word	0x2000a0f4

08008894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800889c:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <prvInsertBlockIntoFreeList+0xac>)
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x14>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d8f7      	bhi.n	80088a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d108      	bne.n	80088d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	441a      	add	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d118      	bne.n	800891c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d00d      	beq.n	8008912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	441a      	add	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e008      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008912:	4b0c      	ldr	r3, [pc, #48]	@ (8008944 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e003      	b.n	8008924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d002      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	2000a0d8 	.word	0x2000a0d8
 8008944:	2000a0e0 	.word	0x2000a0e0

08008948 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	461a      	mov	r2, r3
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fc85 	bl	800b26c <tcpip_send_msg_wait_sem>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <netconn_apimsg+0x2e>
    return apimsg->err;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008974:	e001      	b.n	800897a <netconn_apimsg+0x32>
  }
  return err;
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	@ 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	603a      	str	r2, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
 8008990:	460b      	mov	r3, r1
 8008992:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fdd5 	bl	8009548 <netconn_alloc>
 800899e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d054      	beq.n	8008a50 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80089a6:	79bb      	ldrb	r3, [r7, #6]
 80089a8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	4619      	mov	r1, r3
 80089b4:	4829      	ldr	r0, [pc, #164]	@ (8008a5c <netconn_new_with_proto_and_callback+0xd8>)
 80089b6:	f7ff ffc7 	bl	8008948 <netconn_apimsg>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80089c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d043      	beq.n	8008a50 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <netconn_new_with_proto_and_callback+0x58>
 80089d0:	4b23      	ldr	r3, [pc, #140]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 80089d2:	22a3      	movs	r2, #163	@ 0xa3
 80089d4:	4923      	ldr	r1, [pc, #140]	@ (8008a64 <netconn_new_with_proto_and_callback+0xe0>)
 80089d6:	4824      	ldr	r0, [pc, #144]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 80089d8:	f00e f99c 	bl	8016d14 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	3310      	adds	r3, #16
 80089e0:	4618      	mov	r0, r3
 80089e2:	f00d ff0a 	bl	80167fa <sys_mbox_valid>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <netconn_new_with_proto_and_callback+0x74>
 80089ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 80089ee:	22a4      	movs	r2, #164	@ 0xa4
 80089f0:	491e      	ldr	r1, [pc, #120]	@ (8008a6c <netconn_new_with_proto_and_callback+0xe8>)
 80089f2:	481d      	ldr	r0, [pc, #116]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 80089f4:	f00e f98e 	bl	8016d14 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	3314      	adds	r3, #20
 80089fc:	4618      	mov	r0, r3
 80089fe:	f00d fefc 	bl	80167fa <sys_mbox_valid>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <netconn_new_with_proto_and_callback+0x90>
 8008a08:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 8008a0a:	22a6      	movs	r2, #166	@ 0xa6
 8008a0c:	4918      	ldr	r1, [pc, #96]	@ (8008a70 <netconn_new_with_proto_and_callback+0xec>)
 8008a0e:	4816      	ldr	r0, [pc, #88]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 8008a10:	f00e f980 	bl	8016d14 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	330c      	adds	r3, #12
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f00d ff7f 	bl	801691c <sys_sem_valid>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <netconn_new_with_proto_and_callback+0xac>
 8008a24:	4b0e      	ldr	r3, [pc, #56]	@ (8008a60 <netconn_new_with_proto_and_callback+0xdc>)
 8008a26:	22a9      	movs	r2, #169	@ 0xa9
 8008a28:	4912      	ldr	r1, [pc, #72]	@ (8008a74 <netconn_new_with_proto_and_callback+0xf0>)
 8008a2a:	480f      	ldr	r0, [pc, #60]	@ (8008a68 <netconn_new_with_proto_and_callback+0xe4>)
 8008a2c:	f00e f972 	bl	8016d14 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	330c      	adds	r3, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f00d ff64 	bl	8016902 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	3310      	adds	r3, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f00d fe54 	bl	80166ec <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a46:	2007      	movs	r0, #7
 8008a48:	f003 f9be 	bl	800bdc8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e000      	b.n	8008a52 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	@ 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	0800951d 	.word	0x0800951d
 8008a60:	08018260 	.word	0x08018260
 8008a64:	08018294 	.word	0x08018294
 8008a68:	080182b8 	.word	0x080182b8
 8008a6c:	080182e0 	.word	0x080182e0
 8008a70:	080182f8 	.word	0x080182f8
 8008a74:	0801831c 	.word	0x0801831c

08008a78 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08c      	sub	sp, #48	@ 0x30
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e014      	b.n	8008ab4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a8e:	2329      	movs	r3, #41	@ 0x29
 8008a90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	4619      	mov	r1, r3
 8008a98:	4808      	ldr	r0, [pc, #32]	@ (8008abc <netconn_prepare_delete+0x44>)
 8008a9a:	f7ff ff55 	bl	8008948 <netconn_apimsg>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <netconn_prepare_delete+0x3a>
    return err;
 8008aac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008ab0:	e000      	b.n	8008ab4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3730      	adds	r7, #48	@ 0x30
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	08009a89 	.word	0x08009a89

08008ac0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <netconn_delete+0x12>
    return ERR_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e00d      	b.n	8008aee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ffd0 	bl	8008a78 <netconn_prepare_delete>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <netconn_delete+0x2a>
    netconn_free(conn);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fd9d 	bl	8009624 <netconn_free>
  }
  return err;
 8008aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	@ 0x38
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <netconn_connect+0x28>
 8008b0c:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <netconn_connect+0x5c>)
 8008b0e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8008b12:	4911      	ldr	r1, [pc, #68]	@ (8008b58 <netconn_connect+0x60>)
 8008b14:	4811      	ldr	r0, [pc, #68]	@ (8008b5c <netconn_connect+0x64>)
 8008b16:	f00e f8fd 	bl	8016d14 <iprintf>
 8008b1a:	f06f 030f 	mvn.w	r3, #15
 8008b1e:	e015      	b.n	8008b4c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008b26:	4b0e      	ldr	r3, [pc, #56]	@ (8008b60 <netconn_connect+0x68>)
 8008b28:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008b36:	f107 0314 	add.w	r3, r7, #20
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <netconn_connect+0x6c>)
 8008b3e:	f7ff ff03 	bl	8008948 <netconn_apimsg>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3738      	adds	r7, #56	@ 0x38
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	08018260 	.word	0x08018260
 8008b58:	080183d4 	.word	0x080183d4
 8008b5c:	080182b8 	.word	0x080182b8
 8008b60:	0801bcec 	.word	0x0801bcec
 8008b64:	08009d71 	.word	0x08009d71

08008b68 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	@ 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d109      	bne.n	8008b8a <netconn_disconnect+0x22>
 8008b76:	4b0d      	ldr	r3, [pc, #52]	@ (8008bac <netconn_disconnect+0x44>)
 8008b78:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8008b7c:	490c      	ldr	r1, [pc, #48]	@ (8008bb0 <netconn_disconnect+0x48>)
 8008b7e:	480d      	ldr	r0, [pc, #52]	@ (8008bb4 <netconn_disconnect+0x4c>)
 8008b80:	f00e f8c8 	bl	8016d14 <iprintf>
 8008b84:	f06f 030f 	mvn.w	r3, #15
 8008b88:	e00c      	b.n	8008ba4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	4619      	mov	r1, r3
 8008b94:	4808      	ldr	r0, [pc, #32]	@ (8008bb8 <netconn_disconnect+0x50>)
 8008b96:	f7ff fed7 	bl	8008948 <netconn_apimsg>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008ba0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3730      	adds	r7, #48	@ 0x30
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	08018260 	.word	0x08018260
 8008bb0:	080183f4 	.word	0x080183f4
 8008bb4:	080182b8 	.word	0x080182b8
 8008bb8:	08009eed 	.word	0x08009eed

08008bbc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	@ 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <netconn_send+0x24>
 8008bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c08 <netconn_send+0x4c>)
 8008bce:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8008bd2:	490e      	ldr	r1, [pc, #56]	@ (8008c0c <netconn_send+0x50>)
 8008bd4:	480e      	ldr	r0, [pc, #56]	@ (8008c10 <netconn_send+0x54>)
 8008bd6:	f00e f89d 	bl	8016d14 <iprintf>
 8008bda:	f06f 030f 	mvn.w	r3, #15
 8008bde:	e00e      	b.n	8008bfe <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008be8:	f107 030c 	add.w	r3, r7, #12
 8008bec:	4619      	mov	r1, r3
 8008bee:	4809      	ldr	r0, [pc, #36]	@ (8008c14 <netconn_send+0x58>)
 8008bf0:	f7ff feaa 	bl	8008948 <netconn_apimsg>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008bfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3730      	adds	r7, #48	@ 0x30
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	08018260 	.word	0x08018260
 8008c0c:	0801851c 	.word	0x0801851c
 8008c10:	080182b8 	.word	0x080182b8
 8008c14:	08009f29 	.word	0x08009f29

08008c18 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	f107 0110 	add.w	r1, r7, #16
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f805 	bl	8008c4c <netconn_write_vectors_partly>
 8008c42:	4603      	mov	r3, r0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b092      	sub	sp, #72	@ 0x48
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4611      	mov	r1, r2
 8008c58:	461a      	mov	r2, r3
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	80fb      	strh	r3, [r7, #6]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d109      	bne.n	8008c7c <netconn_write_vectors_partly+0x30>
 8008c68:	4b4e      	ldr	r3, [pc, #312]	@ (8008da4 <netconn_write_vectors_partly+0x158>)
 8008c6a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008c6e:	494e      	ldr	r1, [pc, #312]	@ (8008da8 <netconn_write_vectors_partly+0x15c>)
 8008c70:	484e      	ldr	r0, [pc, #312]	@ (8008dac <netconn_write_vectors_partly+0x160>)
 8008c72:	f00e f84f 	bl	8016d14 <iprintf>
 8008c76:	f06f 030f 	mvn.w	r3, #15
 8008c7a:	e08e      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c84:	2b10      	cmp	r3, #16
 8008c86:	d009      	beq.n	8008c9c <netconn_write_vectors_partly+0x50>
 8008c88:	4b46      	ldr	r3, [pc, #280]	@ (8008da4 <netconn_write_vectors_partly+0x158>)
 8008c8a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8008c8e:	4948      	ldr	r1, [pc, #288]	@ (8008db0 <netconn_write_vectors_partly+0x164>)
 8008c90:	4846      	ldr	r0, [pc, #280]	@ (8008dac <netconn_write_vectors_partly+0x160>)
 8008c92:	f00e f83f 	bl	8016d14 <iprintf>
 8008c96:	f06f 0305 	mvn.w	r3, #5
 8008c9a:	e07e      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7f1b      	ldrb	r3, [r3, #28]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <netconn_write_vectors_partly+0x66>
 8008ca8:	797b      	ldrb	r3, [r7, #5]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <netconn_write_vectors_partly+0x6a>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e000      	b.n	8008cb8 <netconn_write_vectors_partly+0x6c>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008cbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <netconn_write_vectors_partly+0x84>
 8008cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008cca:	f06f 0305 	mvn.w	r3, #5
 8008cce:	e064      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cd8:	e015      	b.n	8008d06 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce6:	4413      	add	r3, r2
 8008ce8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8008cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d202      	bcs.n	8008d00 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008cfa:	f06f 0305 	mvn.w	r3, #5
 8008cfe:	e04c      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d02:	3301      	adds	r3, #1
 8008d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	dbe5      	blt.n	8008cda <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e040      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da0a      	bge.n	8008d34 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008d24:	f06f 0305 	mvn.w	r3, #5
 8008d28:	e037      	b.n	8008d9a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008d2a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d32:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008d44:	797b      	ldrb	r3, [r7, #5]
 8008d46:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008d52:	f107 0314 	add.w	r3, r7, #20
 8008d56:	4619      	mov	r1, r3
 8008d58:	4816      	ldr	r0, [pc, #88]	@ (8008db4 <netconn_write_vectors_partly+0x168>)
 8008d5a:	f7ff fdf5 	bl	8008948 <netconn_apimsg>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008d64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d114      	bne.n	8008d96 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008d6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d76:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008d78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d006      	beq.n	8008d96 <netconn_write_vectors_partly+0x14a>
 8008d88:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <netconn_write_vectors_partly+0x158>)
 8008d8a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008d8e:	490a      	ldr	r1, [pc, #40]	@ (8008db8 <netconn_write_vectors_partly+0x16c>)
 8008d90:	4806      	ldr	r0, [pc, #24]	@ (8008dac <netconn_write_vectors_partly+0x160>)
 8008d92:	f00d ffbf 	bl	8016d14 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008d96:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3748      	adds	r7, #72	@ 0x48
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	08018260 	.word	0x08018260
 8008da8:	08018538 	.word	0x08018538
 8008dac:	080182b8 	.word	0x080182b8
 8008db0:	08018554 	.word	0x08018554
 8008db4:	0800a35d 	.word	0x0800a35d
 8008db8:	08018578 	.word	0x08018578

08008dbc <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <netconn_err+0x12>
    return ERR_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e00d      	b.n	8008dea <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008dce:	f00d fe2f 	bl	8016a30 <sys_arch_protect>
 8008dd2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7a1b      	ldrb	r3, [r3, #8]
 8008dd8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f00d fe33 	bl	8016a4c <sys_arch_unprotect>
  return err;
 8008de6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e02:	f113 0f0d 	cmn.w	r3, #13
 8008e06:	d009      	beq.n	8008e1c <lwip_netconn_err_to_msg+0x28>
 8008e08:	f113 0f0d 	cmn.w	r3, #13
 8008e0c:	dc0c      	bgt.n	8008e28 <lwip_netconn_err_to_msg+0x34>
 8008e0e:	f113 0f0f 	cmn.w	r3, #15
 8008e12:	d007      	beq.n	8008e24 <lwip_netconn_err_to_msg+0x30>
 8008e14:	f113 0f0e 	cmn.w	r3, #14
 8008e18:	d002      	beq.n	8008e20 <lwip_netconn_err_to_msg+0x2c>
 8008e1a:	e005      	b.n	8008e28 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <lwip_netconn_err_to_msg+0x54>)
 8008e1e:	e00e      	b.n	8008e3e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008e20:	4b0a      	ldr	r3, [pc, #40]	@ (8008e4c <lwip_netconn_err_to_msg+0x58>)
 8008e22:	e00c      	b.n	8008e3e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008e24:	4b0a      	ldr	r3, [pc, #40]	@ (8008e50 <lwip_netconn_err_to_msg+0x5c>)
 8008e26:	e00a      	b.n	8008e3e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <lwip_netconn_err_to_msg+0x48>
 8008e30:	4b08      	ldr	r3, [pc, #32]	@ (8008e54 <lwip_netconn_err_to_msg+0x60>)
 8008e32:	227d      	movs	r2, #125	@ 0x7d
 8008e34:	4908      	ldr	r1, [pc, #32]	@ (8008e58 <lwip_netconn_err_to_msg+0x64>)
 8008e36:	4809      	ldr	r0, [pc, #36]	@ (8008e5c <lwip_netconn_err_to_msg+0x68>)
 8008e38:	f00d ff6c 	bl	8016d14 <iprintf>
      return NULL;
 8008e3c:	2300      	movs	r3, #0
  }
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	0801bb94 	.word	0x0801bb94
 8008e4c:	0801bb95 	.word	0x0801bb95
 8008e50:	0801bb96 	.word	0x0801bb96
 8008e54:	080185b8 	.word	0x080185b8
 8008e58:	080185ec 	.word	0x080185ec
 8008e5c:	080185fc 	.word	0x080185fc

08008e60 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <lwip_netconn_is_err_msg+0x1c>
 8008e70:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <lwip_netconn_is_err_msg+0x5c>)
 8008e72:	2285      	movs	r2, #133	@ 0x85
 8008e74:	4912      	ldr	r1, [pc, #72]	@ (8008ec0 <lwip_netconn_is_err_msg+0x60>)
 8008e76:	4813      	ldr	r0, [pc, #76]	@ (8008ec4 <lwip_netconn_is_err_msg+0x64>)
 8008e78:	f00d ff4c 	bl	8016d14 <iprintf>

  if (msg == &netconn_aborted) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a12      	ldr	r2, [pc, #72]	@ (8008ec8 <lwip_netconn_is_err_msg+0x68>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d104      	bne.n	8008e8e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	22f3      	movs	r2, #243	@ 0xf3
 8008e88:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e012      	b.n	8008eb4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a0e      	ldr	r2, [pc, #56]	@ (8008ecc <lwip_netconn_is_err_msg+0x6c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d104      	bne.n	8008ea0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	22f2      	movs	r2, #242	@ 0xf2
 8008e9a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e009      	b.n	8008eb4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8008ed0 <lwip_netconn_is_err_msg+0x70>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d104      	bne.n	8008eb2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	22f1      	movs	r2, #241	@ 0xf1
 8008eac:	701a      	strb	r2, [r3, #0]
    return 1;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	080185b8 	.word	0x080185b8
 8008ec0:	08018624 	.word	0x08018624
 8008ec4:	080185fc 	.word	0x080185fc
 8008ec8:	0801bb94 	.word	0x0801bb94
 8008ecc:	0801bb95 	.word	0x0801bb95
 8008ed0:	0801bb96 	.word	0x0801bb96

08008ed4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <recv_udp+0x20>
 8008ee8:	4b34      	ldr	r3, [pc, #208]	@ (8008fbc <recv_udp+0xe8>)
 8008eea:	22e5      	movs	r2, #229	@ 0xe5
 8008eec:	4934      	ldr	r1, [pc, #208]	@ (8008fc0 <recv_udp+0xec>)
 8008eee:	4835      	ldr	r0, [pc, #212]	@ (8008fc4 <recv_udp+0xf0>)
 8008ef0:	f00d ff10 	bl	8016d14 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <recv_udp+0x32>
 8008efa:	4b30      	ldr	r3, [pc, #192]	@ (8008fbc <recv_udp+0xe8>)
 8008efc:	22e6      	movs	r2, #230	@ 0xe6
 8008efe:	4932      	ldr	r1, [pc, #200]	@ (8008fc8 <recv_udp+0xf4>)
 8008f00:	4830      	ldr	r0, [pc, #192]	@ (8008fc4 <recv_udp+0xf0>)
 8008f02:	f00d ff07 	bl	8016d14 <iprintf>
  conn = (struct netconn *)arg;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <recv_udp+0x44>
    pbuf_free(p);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f003 fdfd 	bl	800cb10 <pbuf_free>
    return;
 8008f16:	e04d      	b.n	8008fb4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d005      	beq.n	8008f2e <recv_udp+0x5a>
 8008f22:	4b26      	ldr	r3, [pc, #152]	@ (8008fbc <recv_udp+0xe8>)
 8008f24:	22ee      	movs	r2, #238	@ 0xee
 8008f26:	4929      	ldr	r1, [pc, #164]	@ (8008fcc <recv_udp+0xf8>)
 8008f28:	4826      	ldr	r0, [pc, #152]	@ (8008fc4 <recv_udp+0xf0>)
 8008f2a:	f00d fef3 	bl	8016d14 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	3310      	adds	r3, #16
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00d fc61 	bl	80167fa <sys_mbox_valid>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f003 fde6 	bl	800cb10 <pbuf_free>
    return;
 8008f44:	e036      	b.n	8008fb4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008f46:	2006      	movs	r0, #6
 8008f48:	f002 fec8 	bl	800bcdc <memp_malloc>
 8008f4c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d103      	bne.n	8008f5c <recv_udp+0x88>
    pbuf_free(p);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f003 fddb 	bl	800cb10 <pbuf_free>
    return;
 8008f5a:	e02b      	b.n	8008fb4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <recv_udp+0xa0>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	e000      	b.n	8008f76 <recv_udp+0xa2>
 8008f74:	2300      	movs	r3, #0
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008f7e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3310      	adds	r3, #16
 8008f8a:	69b9      	ldr	r1, [r7, #24]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f00d fbbf 	bl	8016710 <sys_mbox_trypost>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008f98:	69b8      	ldr	r0, [r7, #24]
 8008f9a:	f001 fa89 	bl	800a4b0 <netbuf_delete>
    return;
 8008f9e:	e009      	b.n	8008fb4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <recv_udp+0xe0>
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	8afa      	ldrh	r2, [r7, #22]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	69f8      	ldr	r0, [r7, #28]
 8008fb2:	4798      	blx	r3
  }
}
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	080185b8 	.word	0x080185b8
 8008fc0:	08018630 	.word	0x08018630
 8008fc4:	080185fc 	.word	0x080185fc
 8008fc8:	08018654 	.word	0x08018654
 8008fcc:	08018674 	.word	0x08018674

08008fd0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d106      	bne.n	8008ff2 <recv_tcp+0x22>
 8008fe4:	4b36      	ldr	r3, [pc, #216]	@ (80090c0 <recv_tcp+0xf0>)
 8008fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008fea:	4936      	ldr	r1, [pc, #216]	@ (80090c4 <recv_tcp+0xf4>)
 8008fec:	4836      	ldr	r0, [pc, #216]	@ (80090c8 <recv_tcp+0xf8>)
 8008fee:	f00d fe91 	bl	8016d14 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d106      	bne.n	8009006 <recv_tcp+0x36>
 8008ff8:	4b31      	ldr	r3, [pc, #196]	@ (80090c0 <recv_tcp+0xf0>)
 8008ffa:	f240 122d 	movw	r2, #301	@ 0x12d
 8008ffe:	4933      	ldr	r1, [pc, #204]	@ (80090cc <recv_tcp+0xfc>)
 8009000:	4831      	ldr	r0, [pc, #196]	@ (80090c8 <recv_tcp+0xf8>)
 8009002:	f00d fe87 	bl	8016d14 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d006      	beq.n	800901c <recv_tcp+0x4c>
 800900e:	4b2c      	ldr	r3, [pc, #176]	@ (80090c0 <recv_tcp+0xf0>)
 8009010:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009014:	492e      	ldr	r1, [pc, #184]	@ (80090d0 <recv_tcp+0x100>)
 8009016:	482c      	ldr	r0, [pc, #176]	@ (80090c8 <recv_tcp+0xf8>)
 8009018:	f00d fe7c 	bl	8016d14 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <recv_tcp+0x5c>
    return ERR_VAL;
 8009026:	f06f 0305 	mvn.w	r3, #5
 800902a:	e045      	b.n	80090b8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	d006      	beq.n	8009044 <recv_tcp+0x74>
 8009036:	4b22      	ldr	r3, [pc, #136]	@ (80090c0 <recv_tcp+0xf0>)
 8009038:	f240 1235 	movw	r2, #309	@ 0x135
 800903c:	4925      	ldr	r1, [pc, #148]	@ (80090d4 <recv_tcp+0x104>)
 800903e:	4822      	ldr	r0, [pc, #136]	@ (80090c8 <recv_tcp+0xf8>)
 8009040:	f00d fe68 	bl	8016d14 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	3310      	adds	r3, #16
 8009048:	4618      	mov	r0, r3
 800904a:	f00d fbd6 	bl	80167fa <sys_mbox_valid>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10d      	bne.n	8009070 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d008      	beq.n	800906c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	891b      	ldrh	r3, [r3, #8]
 800905e:	4619      	mov	r1, r3
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f004 fbbb 	bl	800d7dc <tcp_recved>
      pbuf_free(p);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f003 fd52 	bl	800cb10 <pbuf_free>
    }
    return ERR_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e023      	b.n	80090b8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <recv_tcp+0xb2>
    msg = p;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	891b      	ldrh	r3, [r3, #8]
 800907e:	83fb      	strh	r3, [r7, #30]
 8009080:	e003      	b.n	800908a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009082:	4b15      	ldr	r3, [pc, #84]	@ (80090d8 <recv_tcp+0x108>)
 8009084:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	3310      	adds	r3, #16
 800908e:	69b9      	ldr	r1, [r7, #24]
 8009090:	4618      	mov	r0, r3
 8009092:	f00d fb3d 	bl	8016710 <sys_mbox_trypost>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800909c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090a0:	e00a      	b.n	80090b8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <recv_tcp+0xe6>
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	8bfa      	ldrh	r2, [r7, #30]
 80090b0:	2100      	movs	r1, #0
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	4798      	blx	r3
  }

  return ERR_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	080185b8 	.word	0x080185b8
 80090c4:	08018694 	.word	0x08018694
 80090c8:	080185fc 	.word	0x080185fc
 80090cc:	080186b8 	.word	0x080186b8
 80090d0:	080186d8 	.word	0x080186d8
 80090d4:	080186f0 	.word	0x080186f0
 80090d8:	0801bb96 	.word	0x0801bb96

080090dc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <poll_tcp+0x22>
 80090f0:	4b29      	ldr	r3, [pc, #164]	@ (8009198 <poll_tcp+0xbc>)
 80090f2:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80090f6:	4929      	ldr	r1, [pc, #164]	@ (800919c <poll_tcp+0xc0>)
 80090f8:	4829      	ldr	r0, [pc, #164]	@ (80091a0 <poll_tcp+0xc4>)
 80090fa:	f00d fe0b 	bl	8016d14 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d104      	bne.n	8009110 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009106:	2101      	movs	r1, #1
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 ff5b 	bl	8009fc4 <lwip_netconn_do_writemore>
 800910e:	e016      	b.n	800913e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b04      	cmp	r3, #4
 8009116:	d112      	bne.n	800913e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <poll_tcp+0x5a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	7a5b      	ldrb	r3, [r3, #9]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	7a5a      	ldrb	r2, [r3, #9]
 8009130:	3a01      	subs	r2, #1
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009136:	2101      	movs	r1, #1
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 fb3b 	bl	80097b4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	7f1b      	ldrb	r3, [r3, #28]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	d021      	beq.n	800918e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d01d      	beq.n	800918e <poll_tcp+0xb2>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800915a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800915e:	d316      	bcc.n	800918e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009168:	2b04      	cmp	r3, #4
 800916a:	d810      	bhi.n	800918e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	7f1b      	ldrb	r3, [r3, #28]
 8009170:	f023 0310 	bic.w	r3, r3, #16
 8009174:	b2da      	uxtb	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <poll_tcp+0xb2>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009186:	2200      	movs	r2, #0
 8009188:	2102      	movs	r1, #2
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	080185b8 	.word	0x080185b8
 800919c:	08018710 	.word	0x08018710
 80091a0:	080185fc 	.word	0x080185fc

080091a4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <sent_tcp+0x26>
 80091bc:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <sent_tcp+0x9c>)
 80091be:	f240 1293 	movw	r2, #403	@ 0x193
 80091c2:	4920      	ldr	r1, [pc, #128]	@ (8009244 <sent_tcp+0xa0>)
 80091c4:	4820      	ldr	r0, [pc, #128]	@ (8009248 <sent_tcp+0xa4>)
 80091c6:	f00d fda5 	bl	8016d14 <iprintf>

  if (conn) {
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d032      	beq.n	8009236 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d104      	bne.n	80091e2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80091d8:	2101      	movs	r1, #1
 80091da:	6978      	ldr	r0, [r7, #20]
 80091dc:	f000 fef2 	bl	8009fc4 <lwip_netconn_do_writemore>
 80091e0:	e007      	b.n	80091f2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	785b      	ldrb	r3, [r3, #1]
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d103      	bne.n	80091f2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80091ea:	2101      	movs	r1, #1
 80091ec:	6978      	ldr	r0, [r7, #20]
 80091ee:	f000 fae1 	bl	80097b4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01d      	beq.n	8009236 <sent_tcp+0x92>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009202:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009206:	d316      	bcc.n	8009236 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009210:	2b04      	cmp	r3, #4
 8009212:	d810      	bhi.n	8009236 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	7f1b      	ldrb	r3, [r3, #28]
 8009218:	f023 0310 	bic.w	r3, r3, #16
 800921c:	b2da      	uxtb	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <sent_tcp+0x92>
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922e:	88fa      	ldrh	r2, [r7, #6]
 8009230:	2102      	movs	r1, #2
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	080185b8 	.word	0x080185b8
 8009244:	08018710 	.word	0x08018710
 8009248:	080185fc 	.word	0x080185fc

0800924c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <err_tcp+0x24>
 8009262:	4b5f      	ldr	r3, [pc, #380]	@ (80093e0 <err_tcp+0x194>)
 8009264:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009268:	495e      	ldr	r1, [pc, #376]	@ (80093e4 <err_tcp+0x198>)
 800926a:	485f      	ldr	r0, [pc, #380]	@ (80093e8 <err_tcp+0x19c>)
 800926c:	f00d fd52 	bl	8016d14 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009270:	f00d fbde 	bl	8016a30 <sys_arch_protect>
 8009274:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	2200      	movs	r2, #0
 800927a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	7f1b      	ldrb	r3, [r3, #28]
 8009286:	f043 0301 	orr.w	r3, r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	2200      	movs	r2, #0
 800929a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800929c:	69b8      	ldr	r0, [r7, #24]
 800929e:	f00d fbd5 	bl	8016a4c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <err_tcp+0x6a>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	2104      	movs	r1, #4
 80092b2:	69f8      	ldr	r0, [r7, #28]
 80092b4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <err_tcp+0x7e>
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	69f8      	ldr	r0, [r7, #28]
 80092c8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <err_tcp+0x92>
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d6:	2200      	movs	r2, #0
 80092d8:	2102      	movs	r1, #2
 80092da:	69f8      	ldr	r0, [r7, #28]
 80092dc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80092de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fd86 	bl	8008df4 <lwip_netconn_err_to_msg>
 80092e8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	3310      	adds	r3, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00d fa83 	bl	80167fa <sys_mbox_valid>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	3310      	adds	r3, #16
 80092fe:	6939      	ldr	r1, [r7, #16]
 8009300:	4618      	mov	r0, r3
 8009302:	f00d fa05 	bl	8016710 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	3314      	adds	r3, #20
 800930a:	4618      	mov	r0, r3
 800930c:	f00d fa75 	bl	80167fa <sys_mbox_valid>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	3314      	adds	r3, #20
 800931a:	6939      	ldr	r1, [r7, #16]
 800931c:	4618      	mov	r0, r3
 800931e:	f00d f9f7 	bl	8016710 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d005      	beq.n	8009334 <err_tcp+0xe8>
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d002      	beq.n	8009334 <err_tcp+0xe8>
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d143      	bne.n	80093bc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	7f1b      	ldrb	r3, [r3, #28]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf14      	ite	ne
 8009340:	2301      	movne	r3, #1
 8009342:	2300      	moveq	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	7f1b      	ldrb	r3, [r3, #28]
 800934c:	f023 0304 	bic.w	r3, r3, #4
 8009350:	b2da      	uxtb	r2, r3
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d13b      	bne.n	80093d4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <err_tcp+0x126>
 8009364:	4b1e      	ldr	r3, [pc, #120]	@ (80093e0 <err_tcp+0x194>)
 8009366:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800936a:	4920      	ldr	r1, [pc, #128]	@ (80093ec <err_tcp+0x1a0>)
 800936c:	481e      	ldr	r0, [pc, #120]	@ (80093e8 <err_tcp+0x19c>)
 800936e:	f00d fcd1 	bl	8016d14 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d104      	bne.n	8009382 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	2200      	movs	r2, #0
 800937e:	711a      	strb	r2, [r3, #4]
 8009380:	e003      	b.n	800938a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009394:	68b8      	ldr	r0, [r7, #8]
 8009396:	f00d fac1 	bl	801691c <sys_sem_valid>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <err_tcp+0x162>
 80093a0:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <err_tcp+0x194>)
 80093a2:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80093a6:	4912      	ldr	r1, [pc, #72]	@ (80093f0 <err_tcp+0x1a4>)
 80093a8:	480f      	ldr	r0, [pc, #60]	@ (80093e8 <err_tcp+0x19c>)
 80093aa:	f00d fcb3 	bl	8016d14 <iprintf>
      conn->current_msg = NULL;
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	2200      	movs	r2, #0
 80093b2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80093b4:	68b8      	ldr	r0, [r7, #8]
 80093b6:	f00d fa97 	bl	80168e8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80093ba:	e00b      	b.n	80093d4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d008      	beq.n	80093d6 <err_tcp+0x18a>
 80093c4:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <err_tcp+0x194>)
 80093c6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80093ca:	490a      	ldr	r1, [pc, #40]	@ (80093f4 <err_tcp+0x1a8>)
 80093cc:	4806      	ldr	r0, [pc, #24]	@ (80093e8 <err_tcp+0x19c>)
 80093ce:	f00d fca1 	bl	8016d14 <iprintf>
  }
}
 80093d2:	e000      	b.n	80093d6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80093d4:	bf00      	nop
}
 80093d6:	bf00      	nop
 80093d8:	3720      	adds	r7, #32
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	080185b8 	.word	0x080185b8
 80093e4:	08018710 	.word	0x08018710
 80093e8:	080185fc 	.word	0x080185fc
 80093ec:	08018720 	.word	0x08018720
 80093f0:	0801873c 	.word	0x0801873c
 80093f4:	08018758 	.word	0x08018758

080093f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f005 f9c7 	bl	800e79c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800940e:	490a      	ldr	r1, [pc, #40]	@ (8009438 <setup_tcp+0x40>)
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f005 f9d5 	bl	800e7c0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009416:	4909      	ldr	r1, [pc, #36]	@ (800943c <setup_tcp+0x44>)
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f005 f9f3 	bl	800e804 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800941e:	2202      	movs	r2, #2
 8009420:	4907      	ldr	r1, [pc, #28]	@ (8009440 <setup_tcp+0x48>)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f005 fa4a 	bl	800e8bc <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009428:	4906      	ldr	r1, [pc, #24]	@ (8009444 <setup_tcp+0x4c>)
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f005 fa0c 	bl	800e848 <tcp_err>
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	08008fd1 	.word	0x08008fd1
 800943c:	080091a5 	.word	0x080091a5
 8009440:	080090dd 	.word	0x080090dd
 8009444:	0800924d 	.word	0x0800924d

08009448 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009448:	b590      	push	{r4, r7, lr}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <pcb_new+0x24>
 800945e:	4b2b      	ldr	r3, [pc, #172]	@ (800950c <pcb_new+0xc4>)
 8009460:	f240 2265 	movw	r2, #613	@ 0x265
 8009464:	492a      	ldr	r1, [pc, #168]	@ (8009510 <pcb_new+0xc8>)
 8009466:	482b      	ldr	r0, [pc, #172]	@ (8009514 <pcb_new+0xcc>)
 8009468:	f00d fc54 	bl	8016d14 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009476:	2b10      	cmp	r3, #16
 8009478:	d022      	beq.n	80094c0 <pcb_new+0x78>
 800947a:	2b20      	cmp	r3, #32
 800947c:	d133      	bne.n	80094e6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681c      	ldr	r4, [r3, #0]
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	4618      	mov	r0, r3
 8009486:	f00a fce2 	bl	8013e4e <udp_new_ip_type>
 800948a:	4603      	mov	r3, r0
 800948c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d02a      	beq.n	80094ee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b22      	cmp	r3, #34	@ 0x22
 80094a0:	d104      	bne.n	80094ac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6858      	ldr	r0, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	4917      	ldr	r1, [pc, #92]	@ (8009518 <pcb_new+0xd0>)
 80094ba:	f00a fc4f 	bl	8013d5c <udp_recv>
      }
      break;
 80094be:	e016      	b.n	80094ee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681c      	ldr	r4, [r3, #0]
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f005 f95a 	bl	800e780 <tcp_new_ip_type>
 80094cc:	4603      	mov	r3, r0
 80094ce:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff ff8a 	bl	80093f8 <setup_tcp>
      }
      break;
 80094e4:	e005      	b.n	80094f2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	22fa      	movs	r2, #250	@ 0xfa
 80094ea:	711a      	strb	r2, [r3, #4]
      return;
 80094ec:	e00a      	b.n	8009504 <pcb_new+0xbc>
      break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <pcb_new+0xac>
      break;
 80094f2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	22ff      	movs	r2, #255	@ 0xff
 8009502:	711a      	strb	r2, [r3, #4]
  }
}
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	bf00      	nop
 800950c:	080185b8 	.word	0x080185b8
 8009510:	0801879c 	.word	0x0801879c
 8009514:	080185fc 	.word	0x080185fc
 8009518:	08008ed5 	.word	0x08008ed5

0800951c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff ff85 	bl	8009448 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009558:	2007      	movs	r0, #7
 800955a:	f002 fbbf 	bl	800bcdc <memp_malloc>
 800955e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <netconn_alloc+0x22>
    return NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	e052      	b.n	8009610 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	79fa      	ldrb	r2, [r7, #7]
 8009574:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009582:	2b10      	cmp	r3, #16
 8009584:	d004      	beq.n	8009590 <netconn_alloc+0x48>
 8009586:	2b20      	cmp	r3, #32
 8009588:	d105      	bne.n	8009596 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800958a:	2306      	movs	r3, #6
 800958c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800958e:	e00a      	b.n	80095a6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009590:	2306      	movs	r3, #6
 8009592:	617b      	str	r3, [r7, #20]
      break;
 8009594:	e007      	b.n	80095a6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009596:	4b20      	ldr	r3, [pc, #128]	@ (8009618 <netconn_alloc+0xd0>)
 8009598:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800959c:	491f      	ldr	r1, [pc, #124]	@ (800961c <netconn_alloc+0xd4>)
 800959e:	4820      	ldr	r0, [pc, #128]	@ (8009620 <netconn_alloc+0xd8>)
 80095a0:	f00d fbb8 	bl	8016d14 <iprintf>
      goto free_and_return;
 80095a4:	e02f      	b.n	8009606 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3310      	adds	r3, #16
 80095aa:	6979      	ldr	r1, [r7, #20]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00d f87b 	bl	80166a8 <sys_mbox_new>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d125      	bne.n	8009604 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	330c      	adds	r3, #12
 80095bc:	2100      	movs	r1, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	f00d f939 	bl	8016836 <sys_sem_new>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d005      	beq.n	80095d6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3310      	adds	r3, #16
 80095ce:	4618      	mov	r0, r3
 80095d0:	f00d f88c 	bl	80166ec <sys_mbox_free>
    goto free_and_return;
 80095d4:	e017      	b.n	8009606 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3314      	adds	r3, #20
 80095da:	4618      	mov	r0, r3
 80095dc:	f00d f91e 	bl	801681c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	7cfa      	ldrb	r2, [r7, #19]
 80095fe:	771a      	strb	r2, [r3, #28]
  return conn;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	e005      	b.n	8009610 <netconn_alloc+0xc8>
    goto free_and_return;
 8009604:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	2007      	movs	r0, #7
 800960a:	f002 fbdd 	bl	800bdc8 <memp_free>
  return NULL;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	080185b8 	.word	0x080185b8
 800961c:	080187bc 	.word	0x080187bc
 8009620:	080185fc 	.word	0x080185fc

08009624 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <netconn_free+0x1e>
 8009634:	4b1b      	ldr	r3, [pc, #108]	@ (80096a4 <netconn_free+0x80>)
 8009636:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800963a:	491b      	ldr	r1, [pc, #108]	@ (80096a8 <netconn_free+0x84>)
 800963c:	481b      	ldr	r0, [pc, #108]	@ (80096ac <netconn_free+0x88>)
 800963e:	f00d fb69 	bl	8016d14 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3310      	adds	r3, #16
 8009646:	4618      	mov	r0, r3
 8009648:	f00d f8d7 	bl	80167fa <sys_mbox_valid>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <netconn_free+0x3c>
 8009652:	4b14      	ldr	r3, [pc, #80]	@ (80096a4 <netconn_free+0x80>)
 8009654:	f240 3223 	movw	r2, #803	@ 0x323
 8009658:	4915      	ldr	r1, [pc, #84]	@ (80096b0 <netconn_free+0x8c>)
 800965a:	4814      	ldr	r0, [pc, #80]	@ (80096ac <netconn_free+0x88>)
 800965c:	f00d fb5a 	bl	8016d14 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3314      	adds	r3, #20
 8009664:	4618      	mov	r0, r3
 8009666:	f00d f8c8 	bl	80167fa <sys_mbox_valid>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d006      	beq.n	800967e <netconn_free+0x5a>
 8009670:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <netconn_free+0x80>)
 8009672:	f240 3226 	movw	r2, #806	@ 0x326
 8009676:	490f      	ldr	r1, [pc, #60]	@ (80096b4 <netconn_free+0x90>)
 8009678:	480c      	ldr	r0, [pc, #48]	@ (80096ac <netconn_free+0x88>)
 800967a:	f00d fb4b 	bl	8016d14 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	330c      	adds	r3, #12
 8009682:	4618      	mov	r0, r3
 8009684:	f00d f93d 	bl	8016902 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	330c      	adds	r3, #12
 800968c:	4618      	mov	r0, r3
 800968e:	f00d f956 	bl	801693e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	2007      	movs	r0, #7
 8009696:	f002 fb97 	bl	800bdc8 <memp_free>
}
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	080185b8 	.word	0x080185b8
 80096a8:	080187e4 	.word	0x080187e4
 80096ac:	080185fc 	.word	0x080185fc
 80096b0:	08018814 	.word	0x08018814
 80096b4:	08018850 	.word	0x08018850

080096b8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3310      	adds	r3, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	f00d f898 	bl	80167fa <sys_mbox_valid>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d02f      	beq.n	8009730 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80096d0:	e018      	b.n	8009704 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096da:	2b10      	cmp	r3, #16
 80096dc:	d10e      	bne.n	80096fc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f107 020f 	add.w	r2, r7, #15
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fbba 	bl	8008e60 <lwip_netconn_is_err_msg>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d108      	bne.n	8009704 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f003 fa0b 	bl	800cb10 <pbuf_free>
 80096fa:	e003      	b.n	8009704 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fed6 	bl	800a4b0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3310      	adds	r3, #16
 8009708:	f107 0210 	add.w	r2, r7, #16
 800970c:	4611      	mov	r1, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f00d f857 	bl	80167c2 <sys_arch_mbox_tryfetch>
 8009714:	4603      	mov	r3, r0
 8009716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800971a:	d1da      	bne.n	80096d2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3310      	adds	r3, #16
 8009720:	4618      	mov	r0, r3
 8009722:	f00c ffe3 	bl	80166ec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3310      	adds	r3, #16
 800972a:	4618      	mov	r0, r3
 800972c:	f00d f876 	bl	801681c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3314      	adds	r3, #20
 8009734:	4618      	mov	r0, r3
 8009736:	f00d f860 	bl	80167fa <sys_mbox_valid>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d034      	beq.n	80097aa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009740:	e01d      	b.n	800977e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f107 020e 	add.w	r2, r7, #14
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff fb88 	bl	8008e60 <lwip_netconn_is_err_msg>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d113      	bne.n	800977e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800975a:	6978      	ldr	r0, [r7, #20]
 800975c:	f7ff ffac 	bl	80096b8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	4618      	mov	r0, r3
 800976e:	f003 ffcf 	bl	800d710 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009778:	6978      	ldr	r0, [r7, #20]
 800977a:	f7ff ff53 	bl	8009624 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3314      	adds	r3, #20
 8009782:	f107 0210 	add.w	r2, r7, #16
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f00d f81a 	bl	80167c2 <sys_arch_mbox_tryfetch>
 800978e:	4603      	mov	r3, r0
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009794:	d1d5      	bne.n	8009742 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3314      	adds	r3, #20
 800979a:	4618      	mov	r0, r3
 800979c:	f00c ffa6 	bl	80166ec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3314      	adds	r3, #20
 80097a4:	4618      	mov	r0, r3
 80097a6:	f00d f839 	bl	801681c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <lwip_netconn_do_close_internal+0x24>
 80097ca:	4b87      	ldr	r3, [pc, #540]	@ (80099e8 <lwip_netconn_do_close_internal+0x234>)
 80097cc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80097d0:	4986      	ldr	r1, [pc, #536]	@ (80099ec <lwip_netconn_do_close_internal+0x238>)
 80097d2:	4887      	ldr	r0, [pc, #540]	@ (80099f0 <lwip_netconn_do_close_internal+0x23c>)
 80097d4:	f00d fa9e 	bl	8016d14 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d006      	beq.n	80097f2 <lwip_netconn_do_close_internal+0x3e>
 80097e4:	4b80      	ldr	r3, [pc, #512]	@ (80099e8 <lwip_netconn_do_close_internal+0x234>)
 80097e6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80097ea:	4982      	ldr	r1, [pc, #520]	@ (80099f4 <lwip_netconn_do_close_internal+0x240>)
 80097ec:	4880      	ldr	r0, [pc, #512]	@ (80099f0 <lwip_netconn_do_close_internal+0x23c>)
 80097ee:	f00d fa91 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d006      	beq.n	8009808 <lwip_netconn_do_close_internal+0x54>
 80097fa:	4b7b      	ldr	r3, [pc, #492]	@ (80099e8 <lwip_netconn_do_close_internal+0x234>)
 80097fc:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8009800:	497d      	ldr	r1, [pc, #500]	@ (80099f8 <lwip_netconn_do_close_internal+0x244>)
 8009802:	487b      	ldr	r0, [pc, #492]	@ (80099f0 <lwip_netconn_do_close_internal+0x23c>)
 8009804:	f00d fa86 	bl	8016d14 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <lwip_netconn_do_close_internal+0x6a>
 8009810:	4b75      	ldr	r3, [pc, #468]	@ (80099e8 <lwip_netconn_do_close_internal+0x234>)
 8009812:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8009816:	4979      	ldr	r1, [pc, #484]	@ (80099fc <lwip_netconn_do_close_internal+0x248>)
 8009818:	4875      	ldr	r0, [pc, #468]	@ (80099f0 <lwip_netconn_do_close_internal+0x23c>)
 800981a:	f00d fa7b 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d106      	bne.n	8009834 <lwip_netconn_do_close_internal+0x80>
 8009826:	4b70      	ldr	r3, [pc, #448]	@ (80099e8 <lwip_netconn_do_close_internal+0x234>)
 8009828:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800982c:	4974      	ldr	r1, [pc, #464]	@ (8009a00 <lwip_netconn_do_close_internal+0x24c>)
 800982e:	4870      	ldr	r0, [pc, #448]	@ (80099f0 <lwip_netconn_do_close_internal+0x23c>)
 8009830:	f00d fa70 	bl	8016d14 <iprintf>

  tpcb = conn->pcb.tcp;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	7a1b      	ldrb	r3, [r3, #8]
 8009840:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b03      	cmp	r3, #3
 8009856:	d102      	bne.n	800985e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009858:	2301      	movs	r3, #1
 800985a:	75bb      	strb	r3, [r7, #22]
 800985c:	e01f      	b.n	800989e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009868:	2b05      	cmp	r3, #5
 800986a:	d007      	beq.n	800987c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009870:	2b06      	cmp	r3, #6
 8009872:	d003      	beq.n	800987c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009878:	2b08      	cmp	r3, #8
 800987a:	d102      	bne.n	8009882 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800987c:	2301      	movs	r3, #1
 800987e:	75bb      	strb	r3, [r7, #22]
 8009880:	e00d      	b.n	800989e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009882:	7b7b      	ldrb	r3, [r7, #13]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d008      	beq.n	800989a <lwip_netconn_do_close_internal+0xe6>
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	8b5b      	ldrh	r3, [r3, #26]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	75bb      	strb	r3, [r7, #22]
 8009898:	e001      	b.n	800989e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800989e:	7dbb      	ldrb	r3, [r7, #22]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80098a4:	2100      	movs	r1, #0
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f004 ff78 	bl	800e79c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	7d1b      	ldrb	r3, [r3, #20]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d104      	bne.n	80098be <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80098b4:	2100      	movs	r1, #0
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f004 ffe8 	bl	800e88c <tcp_accept>
 80098bc:	e01d      	b.n	80098fa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80098c4:	2100      	movs	r1, #0
 80098c6:	6938      	ldr	r0, [r7, #16]
 80098c8:	f004 ff7a 	bl	800e7c0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80098cc:	2100      	movs	r1, #0
 80098ce:	6938      	ldr	r0, [r7, #16]
 80098d0:	f004 ffdc 	bl	800e88c <tcp_accept>
    }
    if (shut_tx) {
 80098d4:	7b7b      	ldrb	r3, [r7, #13]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80098da:	2100      	movs	r1, #0
 80098dc:	6938      	ldr	r0, [r7, #16]
 80098de:	f004 ff91 	bl	800e804 <tcp_sent>
    }
    if (shut_close) {
 80098e2:	7dbb      	ldrb	r3, [r7, #22]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d008      	beq.n	80098fa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80098e8:	2200      	movs	r2, #0
 80098ea:	2100      	movs	r1, #0
 80098ec:	6938      	ldr	r0, [r7, #16]
 80098ee:	f004 ffe5 	bl	800e8bc <tcp_poll>
      tcp_err(tpcb, NULL);
 80098f2:	2100      	movs	r1, #0
 80098f4:	6938      	ldr	r0, [r7, #16]
 80098f6:	f004 ffa7 	bl	800e848 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009900:	6938      	ldr	r0, [r7, #16]
 8009902:	f003 fdbf 	bl	800d484 <tcp_close>
 8009906:	4603      	mov	r3, r0
 8009908:	75fb      	strb	r3, [r7, #23]
 800990a:	e007      	b.n	800991c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	7b7a      	ldrb	r2, [r7, #13]
 8009910:	4619      	mov	r1, r3
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f003 fde2 	bl	800d4dc <tcp_shutdown>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800991c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d102      	bne.n	800992a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009924:	2301      	movs	r3, #1
 8009926:	757b      	strb	r3, [r7, #21]
 8009928:	e016      	b.n	8009958 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800992a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009932:	d10f      	bne.n	8009954 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	7a5b      	ldrb	r3, [r3, #9]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10c      	bne.n	8009958 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800993e:	2301      	movs	r3, #1
 8009940:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009942:	7dbb      	ldrb	r3, [r7, #22]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009948:	6938      	ldr	r0, [r7, #16]
 800994a:	f003 fee1 	bl	800d710 <tcp_abort>
          err = ERR_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]
 8009952:	e001      	b.n	8009958 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009954:	2301      	movs	r3, #1
 8009956:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009958:	7d7b      	ldrb	r3, [r7, #21]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d052      	beq.n	8009a04 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	330c      	adds	r3, #12
 8009966:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	7dfa      	ldrb	r2, [r7, #23]
 800996e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800997c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d129      	bne.n	80099d8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009984:	7dbb      	ldrb	r3, [r7, #22]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00c      	beq.n	80099a4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <lwip_netconn_do_close_internal+0x1f0>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	2200      	movs	r2, #0
 800999e:	2104      	movs	r1, #4
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	4798      	blx	r3
      }
      if (shut_rx) {
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d009      	beq.n	80099be <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d005      	beq.n	80099be <lwip_netconn_do_close_internal+0x20a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
      }
      if (shut_tx) {
 80099be:	7b7b      	ldrb	r3, [r7, #13]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <lwip_netconn_do_close_internal+0x224>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d0:	2200      	movs	r2, #0
 80099d2:	2102      	movs	r1, #2
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80099de:	68b8      	ldr	r0, [r7, #8]
 80099e0:	f00c ff82 	bl	80168e8 <sys_sem_signal>
    }
    return ERR_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e03c      	b.n	8009a62 <lwip_netconn_do_close_internal+0x2ae>
 80099e8:	080185b8 	.word	0x080185b8
 80099ec:	0801888c 	.word	0x0801888c
 80099f0:	080185fc 	.word	0x080185fc
 80099f4:	0801889c 	.word	0x0801889c
 80099f8:	080188bc 	.word	0x080188bc
 80099fc:	080188e0 	.word	0x080188e0
 8009a00:	08018720 	.word	0x08018720
  }
  if (!close_finished) {
 8009a04:	7d7b      	ldrb	r3, [r7, #21]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11e      	bne.n	8009a48 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	7d1b      	ldrb	r3, [r3, #20]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d106      	bne.n	8009a20 <lwip_netconn_do_close_internal+0x26c>
 8009a12:	4b16      	ldr	r3, [pc, #88]	@ (8009a6c <lwip_netconn_do_close_internal+0x2b8>)
 8009a14:	f240 4241 	movw	r2, #1089	@ 0x441
 8009a18:	4915      	ldr	r1, [pc, #84]	@ (8009a70 <lwip_netconn_do_close_internal+0x2bc>)
 8009a1a:	4816      	ldr	r0, [pc, #88]	@ (8009a74 <lwip_netconn_do_close_internal+0x2c0>)
 8009a1c:	f00d f97a 	bl	8016d14 <iprintf>
    if (shut_tx) {
 8009a20:	7b7b      	ldrb	r3, [r7, #13]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009a26:	4914      	ldr	r1, [pc, #80]	@ (8009a78 <lwip_netconn_do_close_internal+0x2c4>)
 8009a28:	6938      	ldr	r0, [r7, #16]
 8009a2a:	f004 feeb 	bl	800e804 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009a2e:	2201      	movs	r2, #1
 8009a30:	4912      	ldr	r1, [pc, #72]	@ (8009a7c <lwip_netconn_do_close_internal+0x2c8>)
 8009a32:	6938      	ldr	r0, [r7, #16]
 8009a34:	f004 ff42 	bl	800e8bc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009a38:	4911      	ldr	r1, [pc, #68]	@ (8009a80 <lwip_netconn_do_close_internal+0x2cc>)
 8009a3a:	6938      	ldr	r0, [r7, #16]
 8009a3c:	f004 ff04 	bl	800e848 <tcp_err>
    tcp_arg(tpcb, conn);
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	6938      	ldr	r0, [r7, #16]
 8009a44:	f004 feaa 	bl	800e79c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <lwip_netconn_do_close_internal+0x2aa>
 8009a50:	4b06      	ldr	r3, [pc, #24]	@ (8009a6c <lwip_netconn_do_close_internal+0x2b8>)
 8009a52:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009a56:	490b      	ldr	r1, [pc, #44]	@ (8009a84 <lwip_netconn_do_close_internal+0x2d0>)
 8009a58:	4806      	ldr	r0, [pc, #24]	@ (8009a74 <lwip_netconn_do_close_internal+0x2c0>)
 8009a5a:	f00d f95b 	bl	8016d14 <iprintf>
  return err;
 8009a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	080185b8 	.word	0x080185b8
 8009a70:	080188f4 	.word	0x080188f4
 8009a74:	080185fc 	.word	0x080185fc
 8009a78:	080091a5 	.word	0x080091a5
 8009a7c:	080090dd 	.word	0x080090dd
 8009a80:	0800924d 	.word	0x0800924d
 8009a84:	08018918 	.word	0x08018918

08009a88 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	785b      	ldrb	r3, [r3, #1]
 8009a9a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00d      	beq.n	8009abe <lwip_netconn_do_delconn+0x36>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d006      	beq.n	8009abe <lwip_netconn_do_delconn+0x36>
 8009ab0:	4b60      	ldr	r3, [pc, #384]	@ (8009c34 <lwip_netconn_do_delconn+0x1ac>)
 8009ab2:	f240 425e 	movw	r2, #1118	@ 0x45e
 8009ab6:	4960      	ldr	r1, [pc, #384]	@ (8009c38 <lwip_netconn_do_delconn+0x1b0>)
 8009ab8:	4860      	ldr	r0, [pc, #384]	@ (8009c3c <lwip_netconn_do_delconn+0x1b4>)
 8009aba:	f00d f92b 	bl	8016d14 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d005      	beq.n	8009ad0 <lwip_netconn_do_delconn+0x48>
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d002      	beq.n	8009ad0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009aca:	7afb      	ldrb	r3, [r7, #11]
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d109      	bne.n	8009ae4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d10a      	bne.n	8009aec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	7f1b      	ldrb	r3, [r3, #28]
 8009adc:	f003 0304 	and.w	r3, r3, #4
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d103      	bne.n	8009aec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	22fb      	movs	r2, #251	@ 0xfb
 8009ae8:	711a      	strb	r2, [r3, #4]
 8009aea:	e097      	b.n	8009c1c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d10d      	bne.n	8009b0e <lwip_netconn_do_delconn+0x86>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	7f1b      	ldrb	r3, [r3, #28]
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d106      	bne.n	8009b0e <lwip_netconn_do_delconn+0x86>
 8009b00:	4b4c      	ldr	r3, [pc, #304]	@ (8009c34 <lwip_netconn_do_delconn+0x1ac>)
 8009b02:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009b06:	494e      	ldr	r1, [pc, #312]	@ (8009c40 <lwip_netconn_do_delconn+0x1b8>)
 8009b08:	484c      	ldr	r0, [pc, #304]	@ (8009c3c <lwip_netconn_do_delconn+0x1b4>)
 8009b0a:	f00d f903 	bl	8016d14 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff fdcd 	bl	80096b8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d05f      	beq.n	8009be8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b32:	2b10      	cmp	r3, #16
 8009b34:	d00d      	beq.n	8009b52 <lwip_netconn_do_delconn+0xca>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d151      	bne.n	8009bde <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f00a f926 	bl	8013d9c <udp_remove>
          break;
 8009b50:	e046      	b.n	8009be0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <lwip_netconn_do_delconn+0xe2>
 8009b5c:	4b35      	ldr	r3, [pc, #212]	@ (8009c34 <lwip_netconn_do_delconn+0x1ac>)
 8009b5e:	f240 4294 	movw	r2, #1172	@ 0x494
 8009b62:	4938      	ldr	r1, [pc, #224]	@ (8009c44 <lwip_netconn_do_delconn+0x1bc>)
 8009b64:	4835      	ldr	r0, [pc, #212]	@ (8009c3c <lwip_netconn_do_delconn+0x1b4>)
 8009b66:	f00d f8d5 	bl	8016d14 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2204      	movs	r2, #4
 8009b70:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2203      	movs	r2, #3
 8009b76:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2100      	movs	r1, #0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fe14 	bl	80097b4 <lwip_netconn_do_close_internal>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04b      	beq.n	8009c2a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d006      	beq.n	8009baa <lwip_netconn_do_delconn+0x122>
 8009b9c:	4b25      	ldr	r3, [pc, #148]	@ (8009c34 <lwip_netconn_do_delconn+0x1ac>)
 8009b9e:	f240 429a 	movw	r2, #1178	@ 0x49a
 8009ba2:	4929      	ldr	r1, [pc, #164]	@ (8009c48 <lwip_netconn_do_delconn+0x1c0>)
 8009ba4:	4825      	ldr	r0, [pc, #148]	@ (8009c3c <lwip_netconn_do_delconn+0x1b4>)
 8009ba6:	f00d f8b5 	bl	8016d14 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009baa:	4828      	ldr	r0, [pc, #160]	@ (8009c4c <lwip_netconn_do_delconn+0x1c4>)
 8009bac:	f00c ff0d 	bl	80169ca <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f00c fe64 	bl	8016886 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009bbe:	4823      	ldr	r0, [pc, #140]	@ (8009c4c <lwip_netconn_do_delconn+0x1c4>)
 8009bc0:	f00c fef4 	bl	80169ac <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d02d      	beq.n	8009c2a <lwip_netconn_do_delconn+0x1a2>
 8009bce:	4b19      	ldr	r3, [pc, #100]	@ (8009c34 <lwip_netconn_do_delconn+0x1ac>)
 8009bd0:	f240 429e 	movw	r2, #1182	@ 0x49e
 8009bd4:	491c      	ldr	r1, [pc, #112]	@ (8009c48 <lwip_netconn_do_delconn+0x1c0>)
 8009bd6:	4819      	ldr	r0, [pc, #100]	@ (8009c3c <lwip_netconn_do_delconn+0x1b4>)
 8009bd8:	f00d f89c 	bl	8016d14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009bdc:	e025      	b.n	8009c2a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009bde:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <lwip_netconn_do_delconn+0x17a>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	6810      	ldr	r0, [r2, #0]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <lwip_netconn_do_delconn+0x194>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	6810      	ldr	r0, [r2, #0]
 8009c16:	2200      	movs	r2, #0
 8009c18:	2102      	movs	r1, #2
 8009c1a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	4618      	mov	r0, r3
 8009c24:	f00c fe7a 	bl	801691c <sys_sem_valid>
 8009c28:	e000      	b.n	8009c2c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009c2a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	080185b8 	.word	0x080185b8
 8009c38:	08018928 	.word	0x08018928
 8009c3c:	080185fc 	.word	0x080185fc
 8009c40:	0801893c 	.word	0x0801893c
 8009c44:	0801895c 	.word	0x0801895c
 8009c48:	08018978 	.word	0x08018978
 8009c4c:	2000a148 	.word	0x2000a148

08009c50 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009c6c:	f06f 0305 	mvn.w	r3, #5
 8009c70:	e070      	b.n	8009d54 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d006      	beq.n	8009c88 <lwip_netconn_do_connected+0x38>
 8009c7a:	4b38      	ldr	r3, [pc, #224]	@ (8009d5c <lwip_netconn_do_connected+0x10c>)
 8009c7c:	f240 5223 	movw	r2, #1315	@ 0x523
 8009c80:	4937      	ldr	r1, [pc, #220]	@ (8009d60 <lwip_netconn_do_connected+0x110>)
 8009c82:	4838      	ldr	r0, [pc, #224]	@ (8009d64 <lwip_netconn_do_connected+0x114>)
 8009c84:	f00d f846 	bl	8016d14 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10c      	bne.n	8009caa <lwip_netconn_do_connected+0x5a>
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	7f1b      	ldrb	r3, [r3, #28]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <lwip_netconn_do_connected+0x5a>
 8009c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8009d5c <lwip_netconn_do_connected+0x10c>)
 8009c9e:	f240 5224 	movw	r2, #1316	@ 0x524
 8009ca2:	4931      	ldr	r1, [pc, #196]	@ (8009d68 <lwip_netconn_do_connected+0x118>)
 8009ca4:	482f      	ldr	r0, [pc, #188]	@ (8009d64 <lwip_netconn_do_connected+0x114>)
 8009ca6:	f00d f835 	bl	8016d14 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d008      	beq.n	8009cc4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	79fa      	ldrb	r2, [r7, #7]
 8009cb8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d106      	bne.n	8009cde <lwip_netconn_do_connected+0x8e>
 8009cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009cd8:	69b8      	ldr	r0, [r7, #24]
 8009cda:	f7ff fb8d 	bl	80093f8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	7f1b      	ldrb	r3, [r3, #28]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bf0c      	ite	eq
 8009cea:	2301      	moveq	r3, #1
 8009cec:	2300      	movne	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	7f1b      	ldrb	r3, [r3, #28]
 8009cf6:	f023 0304 	bic.w	r3, r3, #4
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <lwip_netconn_do_connected+0xbc>
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <lwip_netconn_do_connected+0xd6>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <lwip_netconn_do_connected+0xc8>
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d006      	beq.n	8009d26 <lwip_netconn_do_connected+0xd6>
 8009d18:	4b10      	ldr	r3, [pc, #64]	@ (8009d5c <lwip_netconn_do_connected+0x10c>)
 8009d1a:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8009d1e:	4913      	ldr	r1, [pc, #76]	@ (8009d6c <lwip_netconn_do_connected+0x11c>)
 8009d20:	4810      	ldr	r0, [pc, #64]	@ (8009d64 <lwip_netconn_do_connected+0x114>)
 8009d22:	f00c fff7 	bl	8016d14 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <lwip_netconn_do_connected+0xf6>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2102      	movs	r1, #2
 8009d42:	69b8      	ldr	r0, [r7, #24]
 8009d44:	4798      	blx	r3

  if (was_blocking) {
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009d4c:	69f8      	ldr	r0, [r7, #28]
 8009d4e:	f00c fdcb 	bl	80168e8 <sys_sem_signal>
  }
  return ERR_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	080185b8 	.word	0x080185b8
 8009d60:	08018980 	.word	0x08018980
 8009d64:	080185fc 	.word	0x080185fc
 8009d68:	080189a0 	.word	0x080189a0
 8009d6c:	080189e0 	.word	0x080189e0

08009d70 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009d86:	23f1      	movs	r3, #241	@ 0xf1
 8009d88:	75fb      	strb	r3, [r7, #23]
 8009d8a:	e09b      	b.n	8009ec4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d96:	2b10      	cmp	r3, #16
 8009d98:	d00f      	beq.n	8009dba <lwip_netconn_do_connect+0x4a>
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	f040 8087 	bne.w	8009eae <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6858      	ldr	r0, [r3, #4]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	6899      	ldr	r1, [r3, #8]
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f009 ff3e 	bl	8013c30 <udp_connect>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75fb      	strb	r3, [r7, #23]
        break;
 8009db8:	e084      	b.n	8009ec4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b03      	cmp	r3, #3
 8009dc2:	d102      	bne.n	8009dca <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009dc4:	23f7      	movs	r3, #247	@ 0xf7
 8009dc6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009dc8:	e07b      	b.n	8009ec2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009dd4:	23f6      	movs	r3, #246	@ 0xf6
 8009dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8009dd8:	e073      	b.n	8009ec2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff fb0a 	bl	80093f8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6858      	ldr	r0, [r3, #4]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	6899      	ldr	r1, [r3, #8]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	899a      	ldrh	r2, [r3, #12]
 8009df2:	4b38      	ldr	r3, [pc, #224]	@ (8009ed4 <lwip_netconn_do_connect+0x164>)
 8009df4:	f003 fd88 	bl	800d908 <tcp_connect>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d15e      	bne.n	8009ec2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	7f1b      	ldrb	r3, [r3, #28]
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bf14      	ite	ne
 8009e12:	2301      	movne	r3, #1
 8009e14:	2300      	moveq	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <lwip_netconn_do_connect+0xcc>
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	7f1a      	ldrb	r2, [r3, #28]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0204 	orr.w	r2, r2, #4
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	771a      	strb	r2, [r3, #28]
 8009e3a:	e008      	b.n	8009e4e <lwip_netconn_do_connect+0xde>
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	7f1a      	ldrb	r2, [r3, #28]
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0204 	bic.w	r2, r2, #4
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009e54:	23fb      	movs	r3, #251	@ 0xfb
 8009e56:	75fb      	strb	r3, [r7, #23]
        break;
 8009e58:	e033      	b.n	8009ec2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d006      	beq.n	8009e7a <lwip_netconn_do_connect+0x10a>
 8009e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed8 <lwip_netconn_do_connect+0x168>)
 8009e6e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8009e72:	491a      	ldr	r1, [pc, #104]	@ (8009edc <lwip_netconn_do_connect+0x16c>)
 8009e74:	481a      	ldr	r0, [pc, #104]	@ (8009ee0 <lwip_netconn_do_connect+0x170>)
 8009e76:	f00c ff4d 	bl	8016d14 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009e7a:	481a      	ldr	r0, [pc, #104]	@ (8009ee4 <lwip_netconn_do_connect+0x174>)
 8009e7c:	f00c fda5 	bl	80169ca <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	330c      	adds	r3, #12
 8009e86:	2100      	movs	r1, #0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f00c fcfc 	bl	8016886 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009e8e:	4815      	ldr	r0, [pc, #84]	@ (8009ee4 <lwip_netconn_do_connect+0x174>)
 8009e90:	f00c fd8c 	bl	80169ac <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d116      	bne.n	8009ecc <lwip_netconn_do_connect+0x15c>
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed8 <lwip_netconn_do_connect+0x168>)
 8009ea0:	f240 5274 	movw	r2, #1396	@ 0x574
 8009ea4:	490d      	ldr	r1, [pc, #52]	@ (8009edc <lwip_netconn_do_connect+0x16c>)
 8009ea6:	480e      	ldr	r0, [pc, #56]	@ (8009ee0 <lwip_netconn_do_connect+0x170>)
 8009ea8:	f00c ff34 	bl	8016d14 <iprintf>
              return;
 8009eac:	e00e      	b.n	8009ecc <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009eae:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed8 <lwip_netconn_do_connect+0x168>)
 8009eb0:	f240 527d 	movw	r2, #1405	@ 0x57d
 8009eb4:	490c      	ldr	r1, [pc, #48]	@ (8009ee8 <lwip_netconn_do_connect+0x178>)
 8009eb6:	480a      	ldr	r0, [pc, #40]	@ (8009ee0 <lwip_netconn_do_connect+0x170>)
 8009eb8:	f00c ff2c 	bl	8016d14 <iprintf>
 8009ebc:	23fa      	movs	r3, #250	@ 0xfa
 8009ebe:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009ec0:	e000      	b.n	8009ec4 <lwip_netconn_do_connect+0x154>
        break;
 8009ec2:	bf00      	nop
    }
  }
  msg->err = err;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	7dfa      	ldrb	r2, [r7, #23]
 8009ec8:	711a      	strb	r2, [r3, #4]
 8009eca:	e000      	b.n	8009ece <lwip_netconn_do_connect+0x15e>
              return;
 8009ecc:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	08009c51 	.word	0x08009c51
 8009ed8:	080185b8 	.word	0x080185b8
 8009edc:	08018978 	.word	0x08018978
 8009ee0:	080185fc 	.word	0x080185fc
 8009ee4:	2000a148 	.word	0x2000a148
 8009ee8:	08018a00 	.word	0x08018a00

08009eec <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d109      	bne.n	8009f1a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f009 fefd 	bl	8013d0c <udp_disconnect>
    msg->err = ERR_OK;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009f18:	e002      	b.n	8009f20 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	22fa      	movs	r2, #250	@ 0xfa
 8009f1e:	711a      	strb	r2, [r3, #4]
}
 8009f20:	bf00      	nop
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe ff3f 	bl	8008dbc <netconn_err>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d134      	bne.n	8009fb4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02d      	beq.n	8009fb0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	d123      	bne.n	8009faa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10c      	bne.n	8009f86 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	f009 fbe6 	bl	801374c <udp_send>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009f84:	e016      	b.n	8009fb4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6858      	ldr	r0, [r3, #4]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	6819      	ldr	r1, [r3, #0]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f103 0208 	add.w	r2, r3, #8
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	899b      	ldrh	r3, [r3, #12]
 8009fa0:	f009 fc08 	bl	80137b4 <udp_sendto>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8009fa8:	e004      	b.n	8009fb4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009faa:	23f5      	movs	r3, #245	@ 0xf5
 8009fac:	73fb      	strb	r3, [r7, #15]
          break;
 8009fae:	e001      	b.n	8009fb4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009fb0:	23f5      	movs	r3, #245	@ 0xf5
 8009fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009fba:	bf00      	nop
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <lwip_netconn_do_writemore+0x24>
 8009fda:	4b96      	ldr	r3, [pc, #600]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 8009fdc:	f240 6273 	movw	r2, #1651	@ 0x673
 8009fe0:	4995      	ldr	r1, [pc, #596]	@ (800a238 <lwip_netconn_do_writemore+0x274>)
 8009fe2:	4896      	ldr	r0, [pc, #600]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 8009fe4:	f00c fe96 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d006      	beq.n	8009ffe <lwip_netconn_do_writemore+0x3a>
 8009ff0:	4b90      	ldr	r3, [pc, #576]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 8009ff2:	f240 6274 	movw	r2, #1652	@ 0x674
 8009ff6:	4992      	ldr	r1, [pc, #584]	@ (800a240 <lwip_netconn_do_writemore+0x27c>)
 8009ff8:	4890      	ldr	r0, [pc, #576]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 8009ffa:	f00c fe8b 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <lwip_netconn_do_writemore+0x50>
 800a006:	4b8b      	ldr	r3, [pc, #556]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 800a008:	f240 6275 	movw	r2, #1653	@ 0x675
 800a00c:	498d      	ldr	r1, [pc, #564]	@ (800a244 <lwip_netconn_do_writemore+0x280>)
 800a00e:	488b      	ldr	r0, [pc, #556]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 800a010:	f00c fe80 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <lwip_netconn_do_writemore+0x66>
 800a01c:	4b85      	ldr	r3, [pc, #532]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 800a01e:	f240 6276 	movw	r2, #1654	@ 0x676
 800a022:	4989      	ldr	r1, [pc, #548]	@ (800a248 <lwip_netconn_do_writemore+0x284>)
 800a024:	4885      	ldr	r0, [pc, #532]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 800a026:	f00c fe75 	bl	8016d14 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	699a      	ldr	r2, [r3, #24]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	429a      	cmp	r2, r3
 800a038:	d306      	bcc.n	800a048 <lwip_netconn_do_writemore+0x84>
 800a03a:	4b7e      	ldr	r3, [pc, #504]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 800a03c:	f240 6277 	movw	r2, #1655	@ 0x677
 800a040:	4982      	ldr	r1, [pc, #520]	@ (800a24c <lwip_netconn_do_writemore+0x288>)
 800a042:	487e      	ldr	r0, [pc, #504]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 800a044:	f00c fe66 	bl	8016d14 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	899b      	ldrh	r3, [r3, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <lwip_netconn_do_writemore+0x9c>
 800a052:	4b78      	ldr	r3, [pc, #480]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 800a054:	f240 6279 	movw	r2, #1657	@ 0x679
 800a058:	497d      	ldr	r1, [pc, #500]	@ (800a250 <lwip_netconn_do_writemore+0x28c>)
 800a05a:	4878      	ldr	r0, [pc, #480]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 800a05c:	f00c fe5a 	bl	8016d14 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	7f1b      	ldrb	r3, [r3, #28]
 800a066:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7f1b      	ldrb	r3, [r3, #28]
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <lwip_netconn_do_writemore+0xba>
 800a074:	7ebb      	ldrb	r3, [r7, #26]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <lwip_netconn_do_writemore+0xbe>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <lwip_netconn_do_writemore+0xc0>
 800a082:	2300      	movs	r3, #0
 800a084:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	4413      	add	r3, r2
 800a096:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b0:	d307      	bcc.n	800a0c2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a0b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0b6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a0b8:	7ebb      	ldrb	r3, [r7, #26]
 800a0ba:	f043 0302 	orr.w	r3, r3, #2
 800a0be:	76bb      	strb	r3, [r7, #26]
 800a0c0:	e001      	b.n	800a0c6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a0ce:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a0d0:	89fa      	ldrh	r2, [r7, #14]
 800a0d2:	8bbb      	ldrh	r3, [r7, #28]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d216      	bcs.n	800a106 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a0d8:	89fb      	ldrh	r3, [r7, #14]
 800a0da:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a0dc:	7e3b      	ldrb	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00d      	beq.n	800a0fe <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a0e2:	8bbb      	ldrh	r3, [r7, #28]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10e      	bne.n	800a106 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d102      	bne.n	800a0f8 <lwip_netconn_do_writemore+0x134>
 800a0f2:	f06f 0306 	mvn.w	r3, #6
 800a0f6:	e000      	b.n	800a0fa <lwip_netconn_do_writemore+0x136>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a0fc:	e07d      	b.n	800a1fa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a0fe:	7ebb      	ldrb	r3, [r7, #26]
 800a100:	f043 0302 	orr.w	r3, r3, #2
 800a104:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	691a      	ldr	r2, [r3, #16]
 800a10c:	8bbb      	ldrh	r3, [r7, #28]
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d906      	bls.n	800a12a <lwip_netconn_do_writemore+0x166>
 800a11c:	4b45      	ldr	r3, [pc, #276]	@ (800a234 <lwip_netconn_do_writemore+0x270>)
 800a11e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a122:	494c      	ldr	r1, [pc, #304]	@ (800a254 <lwip_netconn_do_writemore+0x290>)
 800a124:	4845      	ldr	r0, [pc, #276]	@ (800a23c <lwip_netconn_do_writemore+0x278>)
 800a126:	f00c fdf5 	bl	8016d14 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a12a:	8bbb      	ldrh	r3, [r7, #28]
 800a12c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a130:	4293      	cmp	r3, r2
 800a132:	d103      	bne.n	800a13c <lwip_netconn_do_writemore+0x178>
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a13a:	d209      	bcs.n	800a150 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a140:	8bba      	ldrh	r2, [r7, #28]
 800a142:	429a      	cmp	r2, r3
 800a144:	d10b      	bne.n	800a15e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	899b      	ldrh	r3, [r3, #12]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d906      	bls.n	800a15e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a150:	2301      	movs	r3, #1
 800a152:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a154:	7ebb      	ldrb	r3, [r7, #26]
 800a156:	f043 0302 	orr.w	r3, r3, #2
 800a15a:	76bb      	strb	r3, [r7, #26]
 800a15c:	e001      	b.n	800a162 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6858      	ldr	r0, [r3, #4]
 800a166:	7ebb      	ldrb	r3, [r7, #26]
 800a168:	8bba      	ldrh	r2, [r7, #28]
 800a16a:	6979      	ldr	r1, [r7, #20]
 800a16c:	f007 fa52 	bl	8011614 <tcp_write>
 800a170:	4603      	mov	r3, r0
 800a172:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a174:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d12c      	bne.n	800a1d6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	6999      	ldr	r1, [r3, #24]
 800a182:	8bba      	ldrh	r2, [r7, #28]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	440a      	add	r2, r1
 800a18a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	6919      	ldr	r1, [r3, #16]
 800a192:	8bba      	ldrh	r2, [r7, #28]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a1b      	ldr	r3, [r3, #32]
 800a198:	440a      	add	r2, r1
 800a19a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	691a      	ldr	r2, [r3, #16]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d113      	bne.n	800a1d6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	899a      	ldrh	r2, [r3, #12]
 800a1b4:	3a01      	subs	r2, #1
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	899b      	ldrh	r3, [r3, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	3208      	adds	r2, #8
 800a1cc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a1d6:	7e7b      	ldrb	r3, [r7, #25]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <lwip_netconn_do_writemore+0x222>
 800a1dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f43f af50 	beq.w	800a086 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a1e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <lwip_netconn_do_writemore+0x234>
 800a1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1f6:	d146      	bne.n	800a286 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a1f8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a1fa:	7e3b      	ldrb	r3, [r7, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d02b      	beq.n	800a258 <lwip_netconn_do_writemore+0x294>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d223      	bcs.n	800a258 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <lwip_netconn_do_writemore+0x260>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	2200      	movs	r2, #0
 800a21e:	2103      	movs	r1, #3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	7f1b      	ldrb	r3, [r3, #28]
 800a228:	f043 0310 	orr.w	r3, r3, #16
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	771a      	strb	r2, [r3, #28]
 800a232:	e028      	b.n	800a286 <lwip_netconn_do_writemore+0x2c2>
 800a234:	080185b8 	.word	0x080185b8
 800a238:	08018710 	.word	0x08018710
 800a23c:	080185fc 	.word	0x080185fc
 800a240:	08018a18 	.word	0x08018a18
 800a244:	08018720 	.word	0x08018720
 800a248:	08018a38 	.word	0x08018a38
 800a24c:	08018a50 	.word	0x08018a50
 800a250:	08018a90 	.word	0x08018a90
 800a254:	08018ab8 	.word	0x08018ab8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a260:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a264:	d305      	bcc.n	800a272 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d909      	bls.n	800a286 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <lwip_netconn_do_writemore+0x2c2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	2200      	movs	r2, #0
 800a280:	2103      	movs	r1, #3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a286:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d11d      	bne.n	800a2ca <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d002      	beq.n	800a2a4 <lwip_netconn_do_writemore+0x2e0>
 800a29e:	7e3b      	ldrb	r3, [r7, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f007 ff9b 	bl	80121e8 <tcp_output>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a2b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a2ba:	f113 0f04 	cmn.w	r3, #4
 800a2be:	d12c      	bne.n	800a31a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2c0:	7b3b      	ldrb	r3, [r7, #12]
 800a2c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	76fb      	strb	r3, [r7, #27]
 800a2c8:	e027      	b.n	800a31a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a2ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2d2:	d120      	bne.n	800a316 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f007 ff85 	bl	80121e8 <tcp_output>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a2e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a2e6:	f113 0f04 	cmn.w	r3, #4
 800a2ea:	d104      	bne.n	800a2f6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2ec:	7b7b      	ldrb	r3, [r7, #13]
 800a2ee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	76fb      	strb	r3, [r7, #27]
 800a2f4:	e011      	b.n	800a31a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a2f6:	7e3b      	ldrb	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00e      	beq.n	800a31a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <lwip_netconn_do_writemore+0x348>
 800a306:	f06f 0306 	mvn.w	r3, #6
 800a30a:	e000      	b.n	800a30e <lwip_netconn_do_writemore+0x34a>
 800a30c:	2300      	movs	r3, #0
 800a30e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a310:	2301      	movs	r3, #1
 800a312:	76fb      	strb	r3, [r7, #27]
 800a314:	e001      	b.n	800a31a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a316:	2301      	movs	r3, #1
 800a318:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a31a:	7efb      	ldrb	r3, [r7, #27]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d015      	beq.n	800a34c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	330c      	adds	r3, #12
 800a328:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	7ffa      	ldrb	r2, [r7, #31]
 800a330:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a344:	68b8      	ldr	r0, [r7, #8]
 800a346:	f00c facf 	bl	80168e8 <sys_sem_signal>
 800a34a:	e002      	b.n	800a352 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a350:	e000      	b.n	800a354 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3720      	adds	r7, #32
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fe fd25 	bl	8008dbc <netconn_err>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d166      	bne.n	800a44c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d15d      	bne.n	800a448 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a396:	23fb      	movs	r3, #251	@ 0xfb
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	e057      	b.n	800a44c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d04d      	beq.n	800a442 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <lwip_netconn_do_write+0x6a>
 800a3b8:	4b28      	ldr	r3, [pc, #160]	@ (800a45c <lwip_netconn_do_write+0x100>)
 800a3ba:	f240 7223 	movw	r2, #1827	@ 0x723
 800a3be:	4928      	ldr	r1, [pc, #160]	@ (800a460 <lwip_netconn_do_write+0x104>)
 800a3c0:	4828      	ldr	r0, [pc, #160]	@ (800a464 <lwip_netconn_do_write+0x108>)
 800a3c2:	f00c fca7 	bl	8016d14 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <lwip_netconn_do_write+0x80>
 800a3ce:	4b23      	ldr	r3, [pc, #140]	@ (800a45c <lwip_netconn_do_write+0x100>)
 800a3d0:	f240 7224 	movw	r2, #1828	@ 0x724
 800a3d4:	4924      	ldr	r1, [pc, #144]	@ (800a468 <lwip_netconn_do_write+0x10c>)
 800a3d6:	4823      	ldr	r0, [pc, #140]	@ (800a464 <lwip_netconn_do_write+0x108>)
 800a3d8:	f00c fc9c 	bl	8016d14 <iprintf>
        msg->conn->current_msg = msg;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fdea 	bl	8009fc4 <lwip_netconn_do_writemore>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02e      	beq.n	800a454 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	785b      	ldrb	r3, [r3, #1]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d006      	beq.n	800a40e <lwip_netconn_do_write+0xb2>
 800a400:	4b16      	ldr	r3, [pc, #88]	@ (800a45c <lwip_netconn_do_write+0x100>)
 800a402:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a406:	4919      	ldr	r1, [pc, #100]	@ (800a46c <lwip_netconn_do_write+0x110>)
 800a408:	4816      	ldr	r0, [pc, #88]	@ (800a464 <lwip_netconn_do_write+0x108>)
 800a40a:	f00c fc83 	bl	8016d14 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a40e:	4818      	ldr	r0, [pc, #96]	@ (800a470 <lwip_netconn_do_write+0x114>)
 800a410:	f00c fadb 	bl	80169ca <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	330c      	adds	r3, #12
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f00c fa32 	bl	8016886 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a422:	4813      	ldr	r0, [pc, #76]	@ (800a470 <lwip_netconn_do_write+0x114>)
 800a424:	f00c fac2 	bl	80169ac <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	785b      	ldrb	r3, [r3, #1]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d110      	bne.n	800a454 <lwip_netconn_do_write+0xf8>
 800a432:	4b0a      	ldr	r3, [pc, #40]	@ (800a45c <lwip_netconn_do_write+0x100>)
 800a434:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a438:	490c      	ldr	r1, [pc, #48]	@ (800a46c <lwip_netconn_do_write+0x110>)
 800a43a:	480a      	ldr	r0, [pc, #40]	@ (800a464 <lwip_netconn_do_write+0x108>)
 800a43c:	f00c fc6a 	bl	8016d14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a440:	e008      	b.n	800a454 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a442:	23f5      	movs	r3, #245	@ 0xf5
 800a444:	73fb      	strb	r3, [r7, #15]
 800a446:	e001      	b.n	800a44c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a448:	23fa      	movs	r3, #250	@ 0xfa
 800a44a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	7bfa      	ldrb	r2, [r7, #15]
 800a450:	711a      	strb	r2, [r3, #4]
 800a452:	e000      	b.n	800a456 <lwip_netconn_do_write+0xfa>
        return;
 800a454:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	080185b8 	.word	0x080185b8
 800a460:	0801895c 	.word	0x0801895c
 800a464:	080185fc 	.word	0x080185fc
 800a468:	08018ae4 	.word	0x08018ae4
 800a46c:	08018978 	.word	0x08018978
 800a470:	2000a148 	.word	0x2000a148

0800a474 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dc04      	bgt.n	800a490 <err_to_errno+0x1c>
 800a486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a48a:	f113 0f10 	cmn.w	r3, #16
 800a48e:	da01      	bge.n	800a494 <err_to_errno+0x20>
    return EIO;
 800a490:	2305      	movs	r3, #5
 800a492:	e005      	b.n	800a4a0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a498:	425b      	negs	r3, r3
 800a49a:	4a04      	ldr	r2, [pc, #16]	@ (800a4ac <err_to_errno+0x38>)
 800a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	0801bb98 	.word	0x0801bb98

0800a4b0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d013      	beq.n	800a4e6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00b      	beq.n	800a4de <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f002 fb20 	bl	800cb10 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	605a      	str	r2, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	2006      	movs	r0, #6
 800a4e2:	f001 fc71 	bl	800bdc8 <memp_free>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <netbuf_free+0x1c>
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <netbuf_free+0x44>)
 800a500:	2281      	movs	r2, #129	@ 0x81
 800a502:	490d      	ldr	r1, [pc, #52]	@ (800a538 <netbuf_free+0x48>)
 800a504:	480d      	ldr	r0, [pc, #52]	@ (800a53c <netbuf_free+0x4c>)
 800a506:	f00c fc05 	bl	8016d14 <iprintf>
 800a50a:	e00f      	b.n	800a52c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f002 faf9 	bl	800cb10 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	08018b10 	.word	0x08018b10
 800a538:	08018bac 	.word	0x08018bac
 800a53c:	08018b60 	.word	0x08018b60

0800a540 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d108      	bne.n	800a566 <netbuf_ref+0x26>
 800a554:	4b1c      	ldr	r3, [pc, #112]	@ (800a5c8 <netbuf_ref+0x88>)
 800a556:	2299      	movs	r2, #153	@ 0x99
 800a558:	491c      	ldr	r1, [pc, #112]	@ (800a5cc <netbuf_ref+0x8c>)
 800a55a:	481d      	ldr	r0, [pc, #116]	@ (800a5d0 <netbuf_ref+0x90>)
 800a55c:	f00c fbda 	bl	8016d14 <iprintf>
 800a560:	f06f 030f 	mvn.w	r3, #15
 800a564:	e02b      	b.n	800a5be <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f002 facc 	bl	800cb10 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a578:	2241      	movs	r2, #65	@ 0x41
 800a57a:	2100      	movs	r1, #0
 800a57c:	2036      	movs	r0, #54	@ 0x36
 800a57e:	f001 ffe3 	bl	800c548 <pbuf_alloc>
 800a582:	4602      	mov	r2, r0
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a59a:	e010      	b.n	800a5be <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	88fa      	ldrh	r2, [r7, #6]
 800a5aa:	811a      	strh	r2, [r3, #8]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	891b      	ldrh	r3, [r3, #8]
 800a5b2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	08018b10 	.word	0x08018b10
 800a5cc:	08018bc8 	.word	0x08018bc8
 800a5d0:	08018b60 	.word	0x08018b60

0800a5d4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	db02      	blt.n	800a5ec <tryget_socket_unconn_nouse+0x18>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	dd01      	ble.n	800a5f0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e003      	b.n	800a5f8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	011b      	lsls	r3, r3, #4
 800a5f4:	4a03      	ldr	r2, [pc, #12]	@ (800a604 <tryget_socket_unconn_nouse+0x30>)
 800a5f6:	4413      	add	r3, r2
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	2000a0f8 	.word	0x2000a0f8

0800a608 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ffdf 	bl	800a5d4 <tryget_socket_unconn_nouse>
 800a616:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a618:	68fb      	ldr	r3, [r7, #12]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff ffec 	bl	800a608 <tryget_socket_unconn>
 800a630:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <tryget_socket+0x22>
    if (sock->conn) {
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <tryget_socket+0x22>
      return sock;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	e000      	b.n	800a646 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ffe2 	bl	800a622 <tryget_socket>
 800a65e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a666:	4b05      	ldr	r3, [pc, #20]	@ (800a67c <get_socket+0x2c>)
 800a668:	2209      	movs	r2, #9
 800a66a:	601a      	str	r2, [r3, #0]
    return NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	e000      	b.n	800a672 <get_socket+0x22>
  }
  return sock;
 800a670:	68fb      	ldr	r3, [r7, #12]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	2000db3c 	.word	0x2000db3c

0800a680 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e052      	b.n	800a736 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a690:	f00c f9ce 	bl	8016a30 <sys_arch_protect>
 800a694:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a696:	4a2c      	ldr	r2, [pc, #176]	@ (800a748 <alloc_socket+0xc8>)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	4413      	add	r3, r2
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d142      	bne.n	800a72a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a6a4:	4a28      	ldr	r2, [pc, #160]	@ (800a748 <alloc_socket+0xc8>)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	4413      	add	r3, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a6b0:	68b8      	ldr	r0, [r7, #8]
 800a6b2:	f00c f9cb 	bl	8016a4c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a6b6:	4a24      	ldr	r2, [pc, #144]	@ (800a748 <alloc_socket+0xc8>)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	4413      	add	r3, r2
 800a6be:	3304      	adds	r3, #4
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a6c4:	4a20      	ldr	r2, [pc, #128]	@ (800a748 <alloc_socket+0xc8>)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	4413      	add	r3, r2
 800a6cc:	330e      	adds	r3, #14
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <alloc_socket+0x62>
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a74c <alloc_socket+0xcc>)
 800a6d6:	f240 220e 	movw	r2, #526	@ 0x20e
 800a6da:	491d      	ldr	r1, [pc, #116]	@ (800a750 <alloc_socket+0xd0>)
 800a6dc:	481d      	ldr	r0, [pc, #116]	@ (800a754 <alloc_socket+0xd4>)
 800a6de:	f00c fb19 	bl	8016d14 <iprintf>
      sockets[i].rcvevent   = 0;
 800a6e2:	4a19      	ldr	r2, [pc, #100]	@ (800a748 <alloc_socket+0xc8>)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	4413      	add	r3, r2
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6f8:	2b10      	cmp	r3, #16
 800a6fa:	d102      	bne.n	800a702 <alloc_socket+0x82>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <alloc_socket+0x86>
 800a702:	2301      	movs	r3, #1
 800a704:	e000      	b.n	800a708 <alloc_socket+0x88>
 800a706:	2300      	movs	r3, #0
 800a708:	b299      	uxth	r1, r3
 800a70a:	4a0f      	ldr	r2, [pc, #60]	@ (800a748 <alloc_socket+0xc8>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	011b      	lsls	r3, r3, #4
 800a710:	4413      	add	r3, r2
 800a712:	330a      	adds	r3, #10
 800a714:	460a      	mov	r2, r1
 800a716:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a718:	4a0b      	ldr	r2, [pc, #44]	@ (800a748 <alloc_socket+0xc8>)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	4413      	add	r3, r2
 800a720:	330c      	adds	r3, #12
 800a722:	2200      	movs	r2, #0
 800a724:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	e00a      	b.n	800a740 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a72a:	68b8      	ldr	r0, [r7, #8]
 800a72c:	f00c f98e 	bl	8016a4c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3301      	adds	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b03      	cmp	r3, #3
 800a73a:	dda9      	ble.n	800a690 <alloc_socket+0x10>
  }
  return -1;
 800a73c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	2000a0f8 	.word	0x2000a0f8
 800a74c:	08018ca8 	.word	0x08018ca8
 800a750:	08018cdc 	.word	0x08018cdc
 800a754:	08018cfc 	.word	0x08018cfc

0800a758 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	6852      	ldr	r2, [r2, #4]
 800a76c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]
  return 1;
 800a782:	2301      	movs	r3, #1
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00d      	beq.n	800a7c0 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d005      	beq.n	800a7b6 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f002 f9ae 	bl	800cb10 <pbuf_free>
 800a7b4:	e004      	b.n	800a7c0 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff fe78 	bl	800a4b0 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800a7c6:	68b8      	ldr	r0, [r7, #8]
 800a7c8:	f7fe f97a 	bl	8008ac0 <netconn_delete>
  }
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800a7de:	f00c f927 	bl	8016a30 <sys_arch_protect>
 800a7e2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	f107 020c 	add.w	r2, r7, #12
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff ffb2 	bl	800a758 <free_socket_locked>
 800a7f4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800a7f6:	6978      	ldr	r0, [r7, #20]
 800a7f8:	f00c f928 	bl	8016a4c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d006      	beq.n	800a810 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f107 0208 	add.w	r2, r7, #8
 800a808:	4619      	mov	r1, r3
 800a80a:	6838      	ldr	r0, [r7, #0]
 800a80c:	f7ff ffc0 	bl	800a790 <free_socket_free_elements>
  }
}
 800a810:	bf00      	nop
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ff13 	bl	800a650 <get_socket>
 800a82a:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <lwip_close+0x20>
    return -1;
 800a832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a836:	e039      	b.n	800a8ac <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a84a:	2b10      	cmp	r3, #16
 800a84c:	bf0c      	ite	eq
 800a84e:	2301      	moveq	r3, #1
 800a850:	2300      	movne	r3, #0
 800a852:	b2db      	uxtb	r3, r3
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	e00a      	b.n	800a86e <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d006      	beq.n	800a86e <lwip_close+0x56>
 800a860:	4b14      	ldr	r3, [pc, #80]	@ (800a8b4 <lwip_close+0x9c>)
 800a862:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800a866:	4914      	ldr	r1, [pc, #80]	@ (800a8b8 <lwip_close+0xa0>)
 800a868:	4814      	ldr	r0, [pc, #80]	@ (800a8bc <lwip_close+0xa4>)
 800a86a:	f00c fa53 	bl	8016d14 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe f900 	bl	8008a78 <netconn_prepare_delete>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00e      	beq.n	800a8a2 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800a884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fdf3 	bl	800a474 <err_to_errno>
 800a88e:	60b8      	str	r0, [r7, #8]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <lwip_close+0x84>
 800a896:	4a0a      	ldr	r2, [pc, #40]	@ (800a8c0 <lwip_close+0xa8>)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8a0:	e004      	b.n	800a8ac <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800a8a2:	6979      	ldr	r1, [r7, #20]
 800a8a4:	6938      	ldr	r0, [r7, #16]
 800a8a6:	f7ff ff95 	bl	800a7d4 <free_socket>
  set_errno(0);
  return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	08018ca8 	.word	0x08018ca8
 800a8b8:	08018d68 	.word	0x08018d68
 800a8bc:	08018cfc 	.word	0x08018cfc
 800a8c0:	2000db3c 	.word	0x2000db3c

0800a8c4 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08c      	sub	sp, #48	@ 0x30
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff febd 	bl	800a650 <get_socket>
 800a8d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800a8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d102      	bne.n	800a8e4 <lwip_connect+0x20>
    return -1;
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8e2:	e062      	b.n	800a9aa <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d108      	bne.n	800a8fe <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fe f939 	bl	8008b68 <netconn_disconnect>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a8fc:	e039      	b.n	800a972 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b10      	cmp	r3, #16
 800a902:	d10c      	bne.n	800a91e <lwip_connect+0x5a>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <lwip_connect+0x50>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d104      	bne.n	800a91e <lwip_connect+0x5a>
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d014      	beq.n	800a948 <lwip_connect+0x84>
 800a91e:	4b25      	ldr	r3, [pc, #148]	@ (800a9b4 <lwip_connect+0xf0>)
 800a920:	f240 3247 	movw	r2, #839	@ 0x347
 800a924:	4924      	ldr	r1, [pc, #144]	@ (800a9b8 <lwip_connect+0xf4>)
 800a926:	4825      	ldr	r0, [pc, #148]	@ (800a9bc <lwip_connect+0xf8>)
 800a928:	f00c f9f4 	bl	8016d14 <iprintf>
 800a92c:	f06f 000f 	mvn.w	r0, #15
 800a930:	f7ff fda0 	bl	800a474 <err_to_errno>
 800a934:	6238      	str	r0, [r7, #32]
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <lwip_connect+0x7e>
 800a93c:	4a20      	ldr	r2, [pc, #128]	@ (800a9c0 <lwip_connect+0xfc>)
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a946:	e030      	b.n	800a9aa <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fcea 	bl	800b32c <lwip_htons>
 800a958:	4603      	mov	r3, r0
 800a95a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800a95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a962:	f107 0114 	add.w	r1, r7, #20
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe f8c6 	bl	8008af8 <netconn_connect>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800a972:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00e      	beq.n	800a998 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a97a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fd78 	bl	800a474 <err_to_errno>
 800a984:	61b8      	str	r0, [r7, #24]
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <lwip_connect+0xce>
 800a98c:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c0 <lwip_connect+0xfc>)
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a996:	e008      	b.n	800a9aa <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a998:	2300      	movs	r3, #0
 800a99a:	61fb      	str	r3, [r7, #28]
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <lwip_connect+0xe4>
 800a9a2:	4a07      	ldr	r2, [pc, #28]	@ (800a9c0 <lwip_connect+0xfc>)
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3730      	adds	r7, #48	@ 0x30
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	08018ca8 	.word	0x08018ca8
 800a9b8:	08018d80 	.word	0x08018d80
 800a9bc:	08018cfc 	.word	0x08018cfc
 800a9c0:	2000db3c 	.word	0x2000db3c

0800a9c4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08a      	sub	sp, #40	@ 0x28
 800a9c8:	af02      	add	r7, sp, #8
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff fe3c 	bl	800a650 <get_socket>
 800a9d8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d102      	bne.n	800a9e6 <lwip_send+0x22>
    return -1;
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9e4:	e046      	b.n	800aa74 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d00b      	beq.n	800aa0c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 f83c 	bl	800aa80 <lwip_sendto>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	e033      	b.n	800aa74 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <lwip_send+0x56>
 800aa16:	2203      	movs	r2, #3
 800aa18:	e000      	b.n	800aa1c <lwip_send+0x58>
 800aa1a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	105b      	asrs	r3, r3, #1
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800aa2c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	7efa      	ldrb	r2, [r7, #27]
 800aa38:	f107 0310 	add.w	r3, r7, #16
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	f7fe f8e8 	bl	8008c18 <netconn_write_partly>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800aa4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fd0f 	bl	800a474 <err_to_errno>
 800aa56:	6178      	str	r0, [r7, #20]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <lwip_send+0xa0>
 800aa5e:	4a07      	ldr	r2, [pc, #28]	@ (800aa7c <lwip_send+0xb8>)
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800aa64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <lwip_send+0xac>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	e001      	b.n	800aa74 <lwip_send+0xb0>
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	2000db3c 	.word	0x2000db3c

0800aa80 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08e      	sub	sp, #56	@ 0x38
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f7ff fdde 	bl	800a650 <get_socket>
 800aa94:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <lwip_sendto+0x22>
    return -1;
 800aa9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaa0:	e093      	b.n	800abca <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aaac:	2b10      	cmp	r3, #16
 800aaae:	d107      	bne.n	800aac0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff ff84 	bl	800a9c4 <lwip_send>
 800aabc:	4603      	mov	r3, r0
 800aabe:	e084      	b.n	800abca <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac6:	d30a      	bcc.n	800aade <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800aac8:	235a      	movs	r3, #90	@ 0x5a
 800aaca:	623b      	str	r3, [r7, #32]
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <lwip_sendto+0x58>
 800aad2:	4a40      	ldr	r2, [pc, #256]	@ (800abd4 <lwip_sendto+0x154>)
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aadc:	e075      	b.n	800abca <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800aae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <lwip_sendto+0x6e>
 800aae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d023      	beq.n	800ab36 <lwip_sendto+0xb6>
 800aaee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d10b      	bne.n	800ab0c <lwip_sendto+0x8c>
 800aaf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <lwip_sendto+0x8c>
 800aafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aafc:	785b      	ldrb	r3, [r3, #1]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d104      	bne.n	800ab0c <lwip_sendto+0x8c>
 800ab02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d014      	beq.n	800ab36 <lwip_sendto+0xb6>
 800ab0c:	4b32      	ldr	r3, [pc, #200]	@ (800abd8 <lwip_sendto+0x158>)
 800ab0e:	f240 6252 	movw	r2, #1618	@ 0x652
 800ab12:	4932      	ldr	r1, [pc, #200]	@ (800abdc <lwip_sendto+0x15c>)
 800ab14:	4832      	ldr	r0, [pc, #200]	@ (800abe0 <lwip_sendto+0x160>)
 800ab16:	f00c f8fd 	bl	8016d14 <iprintf>
 800ab1a:	f06f 000f 	mvn.w	r0, #15
 800ab1e:	f7ff fca9 	bl	800a474 <err_to_errno>
 800ab22:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <lwip_sendto+0xb0>
 800ab2a:	4a2a      	ldr	r2, [pc, #168]	@ (800abd4 <lwip_sendto+0x154>)
 800ab2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab34:	e049      	b.n	800abca <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ab3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ab44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	61bb      	str	r3, [r7, #24]
 800ab4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fbec 	bl	800b32c <lwip_htons>
 800ab54:	4603      	mov	r3, r0
 800ab56:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ab58:	e003      	b.n	800ab62 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ab62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ab64:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ab66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff fce6 	bl	800a540 <netbuf_ref>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800ab7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10a      	bne.n	800ab98 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f107 0210 	add.w	r2, r7, #16
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe f815 	bl	8008bbc <netconn_send>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ab98:	f107 0310 	add.w	r3, r7, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fca7 	bl	800a4f0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800aba2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7ff fc64 	bl	800a474 <err_to_errno>
 800abac:	6278      	str	r0, [r7, #36]	@ 0x24
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <lwip_sendto+0x13a>
 800abb4:	4a07      	ldr	r2, [pc, #28]	@ (800abd4 <lwip_sendto+0x154>)
 800abb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800abba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <lwip_sendto+0x146>
 800abc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800abc4:	e001      	b.n	800abca <lwip_sendto+0x14a>
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3738      	adds	r7, #56	@ 0x38
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	2000db3c 	.word	0x2000db3c
 800abd8:	08018ca8 	.word	0x08018ca8
 800abdc:	08018f88 	.word	0x08018f88
 800abe0:	08018cfc 	.word	0x08018cfc

0800abe4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d009      	beq.n	800ac0a <lwip_socket+0x26>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	dc23      	bgt.n	800ac44 <lwip_socket+0x60>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d019      	beq.n	800ac36 <lwip_socket+0x52>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d009      	beq.n	800ac1c <lwip_socket+0x38>
 800ac08:	e01c      	b.n	800ac44 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	4a22      	ldr	r2, [pc, #136]	@ (800ac98 <lwip_socket+0xb4>)
 800ac10:	4619      	mov	r1, r3
 800ac12:	2040      	movs	r0, #64	@ 0x40
 800ac14:	f7fd feb6 	bl	8008984 <netconn_new_with_proto_and_callback>
 800ac18:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ac1a:	e019      	b.n	800ac50 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b88      	cmp	r3, #136	@ 0x88
 800ac20:	d101      	bne.n	800ac26 <lwip_socket+0x42>
 800ac22:	2321      	movs	r3, #33	@ 0x21
 800ac24:	e000      	b.n	800ac28 <lwip_socket+0x44>
 800ac26:	2320      	movs	r3, #32
 800ac28:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <lwip_socket+0xb4>)
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fd fea9 	bl	8008984 <netconn_new_with_proto_and_callback>
 800ac32:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ac34:	e00c      	b.n	800ac50 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ac36:	4a18      	ldr	r2, [pc, #96]	@ (800ac98 <lwip_socket+0xb4>)
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2010      	movs	r0, #16
 800ac3c:	f7fd fea2 	bl	8008984 <netconn_new_with_proto_and_callback>
 800ac40:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ac42:	e005      	b.n	800ac50 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ac44:	4b15      	ldr	r3, [pc, #84]	@ (800ac9c <lwip_socket+0xb8>)
 800ac46:	2216      	movs	r2, #22
 800ac48:	601a      	str	r2, [r3, #0]
      return -1;
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac4e:	e01e      	b.n	800ac8e <lwip_socket+0xaa>
  }

  if (!conn) {
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d105      	bne.n	800ac62 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ac56:	4b11      	ldr	r3, [pc, #68]	@ (800ac9c <lwip_socket+0xb8>)
 800ac58:	2269      	movs	r2, #105	@ 0x69
 800ac5a:	601a      	str	r2, [r3, #0]
    return -1;
 800ac5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac60:	e015      	b.n	800ac8e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800ac62:	2100      	movs	r1, #0
 800ac64:	6978      	ldr	r0, [r7, #20]
 800ac66:	f7ff fd0b 	bl	800a680 <alloc_socket>
 800ac6a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac72:	d108      	bne.n	800ac86 <lwip_socket+0xa2>
    netconn_delete(conn);
 800ac74:	6978      	ldr	r0, [r7, #20]
 800ac76:	f7fd ff23 	bl	8008ac0 <netconn_delete>
    set_errno(ENFILE);
 800ac7a:	4b08      	ldr	r3, [pc, #32]	@ (800ac9c <lwip_socket+0xb8>)
 800ac7c:	2217      	movs	r2, #23
 800ac7e:	601a      	str	r2, [r3, #0]
    return -1;
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac84:	e003      	b.n	800ac8e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ac8c:	693b      	ldr	r3, [r7, #16]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	0800ad29 	.word	0x0800ad29
 800ac9c:	2000db3c 	.word	0x2000db3c

0800aca0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	e02c      	b.n	800ad0e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	4413      	add	r3, r2
 800acbe:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d11e      	bne.n	800ad08 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <lwip_poll_should_wake+0x44>
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <lwip_poll_should_wake+0x44>
        return 1;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e01a      	b.n	800ad1a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <lwip_poll_should_wake+0x5e>
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <lwip_poll_should_wake+0x5e>
        return 1;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e00d      	b.n	800ad1a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e008      	b.n	800ad1a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d3cd      	bcc.n	800acb4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	@ 0x28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
 800ad34:	4613      	mov	r3, r2
 800ad36:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80a4 	beq.w	800ae88 <event_callback+0x160>
    s = conn->socket;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da18      	bge.n	800ad7e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ad4c:	f00b fe70 	bl	8016a30 <sys_arch_protect>
 800ad50:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	da0b      	bge.n	800ad72 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d104      	bne.n	800ad6a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	1e5a      	subs	r2, r3, #1
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ad6a:	69f8      	ldr	r0, [r7, #28]
 800ad6c:	f00b fe6e 	bl	8016a4c <sys_arch_unprotect>
        return;
 800ad70:	e08d      	b.n	800ae8e <event_callback+0x166>
      }
      s = conn->socket;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ad78:	69f8      	ldr	r0, [r7, #28]
 800ad7a:	f00b fe67 	bl	8016a4c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ad7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad80:	f7ff fc66 	bl	800a650 <get_socket>
 800ad84:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d07f      	beq.n	800ae8c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ad90:	f00b fe4e 	bl	8016a30 <sys_arch_protect>
 800ad94:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d83e      	bhi.n	800ae1a <event_callback+0xf2>
 800ad9c:	a201      	add	r2, pc, #4	@ (adr r2, 800ada4 <event_callback+0x7c>)
 800ad9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada2:	bf00      	nop
 800ada4:	0800adb9 	.word	0x0800adb9
 800ada8:	0800addb 	.word	0x0800addb
 800adac:	0800adf3 	.word	0x0800adf3
 800adb0:	0800ae07 	.word	0x0800ae07
 800adb4:	0800ae13 	.word	0x0800ae13
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	3301      	adds	r3, #1
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	b21a      	sxth	r2, r3
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800add0:	2b01      	cmp	r3, #1
 800add2:	dd2a      	ble.n	800ae2a <event_callback+0x102>
        check_waiters = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	623b      	str	r3, [r7, #32]
      }
      break;
 800add8:	e027      	b.n	800ae2a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	b21a      	sxth	r2, r3
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	623b      	str	r3, [r7, #32]
      break;
 800adf0:	e01c      	b.n	800ae2c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	895b      	ldrh	r3, [r3, #10]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <event_callback+0xd6>
        check_waiters = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	2201      	movs	r2, #1
 800ae02:	815a      	strh	r2, [r3, #10]
      break;
 800ae04:	e012      	b.n	800ae2c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	623b      	str	r3, [r7, #32]
      break;
 800ae10:	e00c      	b.n	800ae2c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2201      	movs	r2, #1
 800ae16:	819a      	strh	r2, [r3, #12]
      break;
 800ae18:	e008      	b.n	800ae2c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ae1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ae94 <event_callback+0x16c>)
 800ae1c:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800ae20:	491d      	ldr	r1, [pc, #116]	@ (800ae98 <event_callback+0x170>)
 800ae22:	481e      	ldr	r0, [pc, #120]	@ (800ae9c <event_callback+0x174>)
 800ae24:	f00b ff76 	bl	8016d14 <iprintf>
      break;
 800ae28:	e000      	b.n	800ae2c <event_callback+0x104>
      break;
 800ae2a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	7b9b      	ldrb	r3, [r3, #14]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d025      	beq.n	800ae80 <event_callback+0x158>
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d022      	beq.n	800ae80 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfcc      	ite	gt
 800ae44:	2301      	movgt	r3, #1
 800ae46:	2300      	movle	r3, #0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	895b      	ldrh	r3, [r3, #10]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bf14      	ite	ne
 800ae54:	2301      	movne	r3, #1
 800ae56:	2300      	moveq	r3, #0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	899b      	ldrh	r3, [r3, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bf14      	ite	ne
 800ae64:	2301      	movne	r3, #1
 800ae66:	2300      	moveq	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ae6c:	69f8      	ldr	r0, [r7, #28]
 800ae6e:	f00b fded 	bl	8016a4c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	6979      	ldr	r1, [r7, #20]
 800ae78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae7a:	f000 f811 	bl	800aea0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ae7e:	e006      	b.n	800ae8e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ae80:	69f8      	ldr	r0, [r7, #28]
 800ae82:	f00b fde3 	bl	8016a4c <sys_arch_unprotect>
 800ae86:	e002      	b.n	800ae8e <event_callback+0x166>
    return;
 800ae88:	bf00      	nop
 800ae8a:	e000      	b.n	800ae8e <event_callback+0x166>
      return;
 800ae8c:	bf00      	nop
  }
  done_socket(sock);
}
 800ae8e:	3728      	adds	r7, #40	@ 0x28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	08018ca8 	.word	0x08018ca8
 800ae98:	08019024 	.word	0x08019024
 800ae9c:	08018cfc 	.word	0x08018cfc

0800aea0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800aeae:	4b42      	ldr	r3, [pc, #264]	@ (800afb8 <select_check_waiters+0x118>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e078      	b.n	800afa8 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d171      	bne.n	800afa2 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d009      	beq.n	800aede <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	6978      	ldr	r0, [r7, #20]
 800aed6:	f7ff fee3 	bl	800aca0 <lwip_poll_should_wake>
 800aeda:	6138      	str	r0, [r7, #16]
 800aedc:	e056      	b.n	800af8c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d017      	beq.n	800af14 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d013      	beq.n	800af14 <select_check_waiters+0x74>
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	da00      	bge.n	800aef8 <select_check_waiters+0x58>
 800aef6:	331f      	adds	r3, #31
 800aef8:	115b      	asrs	r3, r3, #5
 800aefa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f003 031f 	and.w	r3, r3, #31
 800af04:	fa22 f303 	lsr.w	r3, r2, r3
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <select_check_waiters+0x74>
            do_signal = 1;
 800af10:	2301      	movs	r3, #1
 800af12:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d01a      	beq.n	800af50 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d117      	bne.n	800af50 <select_check_waiters+0xb0>
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d013      	beq.n	800af50 <select_check_waiters+0xb0>
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	68da      	ldr	r2, [r3, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	da00      	bge.n	800af34 <select_check_waiters+0x94>
 800af32:	331f      	adds	r3, #31
 800af34:	115b      	asrs	r3, r3, #5
 800af36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f003 031f 	and.w	r3, r3, #31
 800af40:	fa22 f303 	lsr.w	r3, r2, r3
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <select_check_waiters+0xb0>
            do_signal = 1;
 800af4c:	2301      	movs	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01a      	beq.n	800af8c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d117      	bne.n	800af8c <select_check_waiters+0xec>
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d013      	beq.n	800af8c <select_check_waiters+0xec>
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da00      	bge.n	800af70 <select_check_waiters+0xd0>
 800af6e:	331f      	adds	r3, #31
 800af70:	115b      	asrs	r3, r3, #5
 800af72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f003 031f 	and.w	r3, r3, #31
 800af7c:	fa22 f303 	lsr.w	r3, r2, r3
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <select_check_waiters+0xec>
            do_signal = 1;
 800af88:	2301      	movs	r3, #1
 800af8a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d007      	beq.n	800afa2 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2201      	movs	r2, #1
 800af96:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	3320      	adds	r3, #32
 800af9c:	4618      	mov	r0, r3
 800af9e:	f00b fca3 	bl	80168e8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d183      	bne.n	800aeb6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000a138 	.word	0x2000a138

0800afbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800afc6:	f008 f9c7 	bl	8013358 <sys_timeouts_sleeptime>
 800afca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afd2:	d10b      	bne.n	800afec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800afd4:	4813      	ldr	r0, [pc, #76]	@ (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800afd6:	f00b fcf8 	bl	80169ca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800afda:	2200      	movs	r2, #0
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f00b fbb0 	bl	8016744 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800afe4:	480f      	ldr	r0, [pc, #60]	@ (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800afe6:	f00b fce1 	bl	80169ac <sys_mutex_lock>
    return;
 800afea:	e018      	b.n	800b01e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800aff2:	f008 f977 	bl	80132e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aff6:	e7e6      	b.n	800afc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800aff8:	480a      	ldr	r0, [pc, #40]	@ (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800affa:	f00b fce6 	bl	80169ca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f00b fb9e 	bl	8016744 <sys_arch_mbox_fetch>
 800b008:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b00a:	4806      	ldr	r0, [pc, #24]	@ (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800b00c:	f00b fcce 	bl	80169ac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b016:	d102      	bne.n	800b01e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b018:	f008 f964 	bl	80132e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b01c:	e7d3      	b.n	800afc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	2000a148 	.word	0x2000a148

0800b028 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b030:	4810      	ldr	r0, [pc, #64]	@ (800b074 <tcpip_thread+0x4c>)
 800b032:	f00b fcbb 	bl	80169ac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b036:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <tcpip_thread+0x50>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b03e:	4b0e      	ldr	r3, [pc, #56]	@ (800b078 <tcpip_thread+0x50>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a0e      	ldr	r2, [pc, #56]	@ (800b07c <tcpip_thread+0x54>)
 800b044:	6812      	ldr	r2, [r2, #0]
 800b046:	4610      	mov	r0, r2
 800b048:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b04a:	f107 030c 	add.w	r3, r7, #12
 800b04e:	4619      	mov	r1, r3
 800b050:	480b      	ldr	r0, [pc, #44]	@ (800b080 <tcpip_thread+0x58>)
 800b052:	f7ff ffb3 	bl	800afbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b05c:	4b09      	ldr	r3, [pc, #36]	@ (800b084 <tcpip_thread+0x5c>)
 800b05e:	2291      	movs	r2, #145	@ 0x91
 800b060:	4909      	ldr	r1, [pc, #36]	@ (800b088 <tcpip_thread+0x60>)
 800b062:	480a      	ldr	r0, [pc, #40]	@ (800b08c <tcpip_thread+0x64>)
 800b064:	f00b fe56 	bl	8016d14 <iprintf>
      continue;
 800b068:	e003      	b.n	800b072 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f80f 	bl	800b090 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b072:	e7ea      	b.n	800b04a <tcpip_thread+0x22>
 800b074:	2000a148 	.word	0x2000a148
 800b078:	2000a13c 	.word	0x2000a13c
 800b07c:	2000a140 	.word	0x2000a140
 800b080:	2000a144 	.word	0x2000a144
 800b084:	08019078 	.word	0x08019078
 800b088:	080190a8 	.word	0x080190a8
 800b08c:	080190c8 	.word	0x080190c8

0800b090 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d026      	beq.n	800b0ee <tcpip_thread_handle_msg+0x5e>
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	dc2b      	bgt.n	800b0fc <tcpip_thread_handle_msg+0x6c>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <tcpip_thread_handle_msg+0x1e>
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d015      	beq.n	800b0d8 <tcpip_thread_handle_msg+0x48>
 800b0ac:	e026      	b.n	800b0fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6850      	ldr	r0, [r2, #4]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6892      	ldr	r2, [r2, #8]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4798      	blx	r3
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fd21 	bl	800cb10 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	2009      	movs	r0, #9
 800b0d2:	f000 fe79 	bl	800bdc8 <memp_free>
      break;
 800b0d6:	e018      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6892      	ldr	r2, [r2, #8]
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	2008      	movs	r0, #8
 800b0e8:	f000 fe6e 	bl	800bdc8 <memp_free>
      break;
 800b0ec:	e00d      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6892      	ldr	r2, [r2, #8]
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	4798      	blx	r3
      break;
 800b0fa:	e006      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b0fc:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <tcpip_thread_handle_msg+0x84>)
 800b0fe:	22cf      	movs	r2, #207	@ 0xcf
 800b100:	4905      	ldr	r1, [pc, #20]	@ (800b118 <tcpip_thread_handle_msg+0x88>)
 800b102:	4806      	ldr	r0, [pc, #24]	@ (800b11c <tcpip_thread_handle_msg+0x8c>)
 800b104:	f00b fe06 	bl	8016d14 <iprintf>
      break;
 800b108:	bf00      	nop
  }
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	08019078 	.word	0x08019078
 800b118:	080190a8 	.word	0x080190a8
 800b11c:	080190c8 	.word	0x080190c8

0800b120 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b12c:	481a      	ldr	r0, [pc, #104]	@ (800b198 <tcpip_inpkt+0x78>)
 800b12e:	f00b fb64 	bl	80167fa <sys_mbox_valid>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <tcpip_inpkt+0x24>
 800b138:	4b18      	ldr	r3, [pc, #96]	@ (800b19c <tcpip_inpkt+0x7c>)
 800b13a:	22fc      	movs	r2, #252	@ 0xfc
 800b13c:	4918      	ldr	r1, [pc, #96]	@ (800b1a0 <tcpip_inpkt+0x80>)
 800b13e:	4819      	ldr	r0, [pc, #100]	@ (800b1a4 <tcpip_inpkt+0x84>)
 800b140:	f00b fde8 	bl	8016d14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b144:	2009      	movs	r0, #9
 800b146:	f000 fdc9 	bl	800bcdc <memp_malloc>
 800b14a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b156:	e01a      	b.n	800b18e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	4809      	ldr	r0, [pc, #36]	@ (800b198 <tcpip_inpkt+0x78>)
 800b174:	f00b facc 	bl	8016710 <sys_mbox_trypost>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d006      	beq.n	800b18c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b17e:	6979      	ldr	r1, [r7, #20]
 800b180:	2009      	movs	r0, #9
 800b182:	f000 fe21 	bl	800bdc8 <memp_free>
    return ERR_MEM;
 800b186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b18a:	e000      	b.n	800b18e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b18c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	2000a144 	.word	0x2000a144
 800b19c:	08019078 	.word	0x08019078
 800b1a0:	080190f0 	.word	0x080190f0
 800b1a4:	080190c8 	.word	0x080190c8

0800b1a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1b8:	f003 0318 	and.w	r3, r3, #24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d006      	beq.n	800b1ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b1c0:	4a08      	ldr	r2, [pc, #32]	@ (800b1e4 <tcpip_input+0x3c>)
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff ffab 	bl	800b120 <tcpip_inpkt>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	e005      	b.n	800b1da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b1ce:	4a06      	ldr	r2, [pc, #24]	@ (800b1e8 <tcpip_input+0x40>)
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff ffa4 	bl	800b120 <tcpip_inpkt>
 800b1d8:	4603      	mov	r3, r0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	080164fd 	.word	0x080164fd
 800b1e8:	080151b1 	.word	0x080151b1

0800b1ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1f6:	4819      	ldr	r0, [pc, #100]	@ (800b25c <tcpip_try_callback+0x70>)
 800b1f8:	f00b faff 	bl	80167fa <sys_mbox_valid>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <tcpip_try_callback+0x24>
 800b202:	4b17      	ldr	r3, [pc, #92]	@ (800b260 <tcpip_try_callback+0x74>)
 800b204:	f240 125d 	movw	r2, #349	@ 0x15d
 800b208:	4916      	ldr	r1, [pc, #88]	@ (800b264 <tcpip_try_callback+0x78>)
 800b20a:	4817      	ldr	r0, [pc, #92]	@ (800b268 <tcpip_try_callback+0x7c>)
 800b20c:	f00b fd82 	bl	8016d14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b210:	2008      	movs	r0, #8
 800b212:	f000 fd63 	bl	800bcdc <memp_malloc>
 800b216:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b21e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b222:	e017      	b.n	800b254 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	4808      	ldr	r0, [pc, #32]	@ (800b25c <tcpip_try_callback+0x70>)
 800b23a:	f00b fa69 	bl	8016710 <sys_mbox_trypost>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d006      	beq.n	800b252 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b244:	68f9      	ldr	r1, [r7, #12]
 800b246:	2008      	movs	r0, #8
 800b248:	f000 fdbe 	bl	800bdc8 <memp_free>
    return ERR_MEM;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b250:	e000      	b.n	800b254 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	2000a144 	.word	0x2000a144
 800b260:	08019078 	.word	0x08019078
 800b264:	080190f0 	.word	0x080190f0
 800b268:	080190c8 	.word	0x080190c8

0800b26c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b278:	4806      	ldr	r0, [pc, #24]	@ (800b294 <tcpip_send_msg_wait_sem+0x28>)
 800b27a:	f00b fb97 	bl	80169ac <sys_mutex_lock>
  fn(apimsg);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b284:	4803      	ldr	r0, [pc, #12]	@ (800b294 <tcpip_send_msg_wait_sem+0x28>)
 800b286:	f00b fba0 	bl	80169ca <sys_mutex_unlock>
  return ERR_OK;
 800b28a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	2000a148 	.word	0x2000a148

0800b298 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b2a2:	f000 f871 	bl	800b388 <lwip_init>

  tcpip_init_done = initfunc;
 800b2a6:	4a17      	ldr	r2, [pc, #92]	@ (800b304 <tcpip_init+0x6c>)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b2ac:	4a16      	ldr	r2, [pc, #88]	@ (800b308 <tcpip_init+0x70>)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b2b2:	2106      	movs	r1, #6
 800b2b4:	4815      	ldr	r0, [pc, #84]	@ (800b30c <tcpip_init+0x74>)
 800b2b6:	f00b f9f7 	bl	80166a8 <sys_mbox_new>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b2c0:	4b13      	ldr	r3, [pc, #76]	@ (800b310 <tcpip_init+0x78>)
 800b2c2:	f240 2261 	movw	r2, #609	@ 0x261
 800b2c6:	4913      	ldr	r1, [pc, #76]	@ (800b314 <tcpip_init+0x7c>)
 800b2c8:	4813      	ldr	r0, [pc, #76]	@ (800b318 <tcpip_init+0x80>)
 800b2ca:	f00b fd23 	bl	8016d14 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b2ce:	4813      	ldr	r0, [pc, #76]	@ (800b31c <tcpip_init+0x84>)
 800b2d0:	f00b fb50 	bl	8016974 <sys_mutex_new>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b2da:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <tcpip_init+0x78>)
 800b2dc:	f240 2265 	movw	r2, #613	@ 0x265
 800b2e0:	490f      	ldr	r1, [pc, #60]	@ (800b320 <tcpip_init+0x88>)
 800b2e2:	480d      	ldr	r0, [pc, #52]	@ (800b318 <tcpip_init+0x80>)
 800b2e4:	f00b fd16 	bl	8016d14 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	490c      	ldr	r1, [pc, #48]	@ (800b324 <tcpip_init+0x8c>)
 800b2f4:	480c      	ldr	r0, [pc, #48]	@ (800b328 <tcpip_init+0x90>)
 800b2f6:	f00b fb75 	bl	80169e4 <sys_thread_new>
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	2000a13c 	.word	0x2000a13c
 800b308:	2000a140 	.word	0x2000a140
 800b30c:	2000a144 	.word	0x2000a144
 800b310:	08019078 	.word	0x08019078
 800b314:	08019100 	.word	0x08019100
 800b318:	080190c8 	.word	0x080190c8
 800b31c:	2000a148 	.word	0x2000a148
 800b320:	08019124 	.word	0x08019124
 800b324:	0800b029 	.word	0x0800b029
 800b328:	08019148 	.word	0x08019148

0800b32c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b336:	88fb      	ldrh	r3, [r7, #6]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	b21a      	sxth	r2, r3
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	b29b      	uxth	r3, r3
 800b342:	b21b      	sxth	r3, r3
 800b344:	4313      	orrs	r3, r2
 800b346:	b21b      	sxth	r3, r3
 800b348:	b29b      	uxth	r3, r3
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b356:	b480      	push	{r7}
 800b358:	b083      	sub	sp, #12
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	061a      	lsls	r2, r3, #24
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b36a:	431a      	orrs	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	0e1b      	lsrs	r3, r3, #24
 800b37a:	4313      	orrs	r3, r2
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b392:	f00b fae1 	bl	8016958 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b396:	f000 f8d5 	bl	800b544 <mem_init>
  memp_init();
 800b39a:	f000 fc31 	bl	800bc00 <memp_init>
  pbuf_init();
  netif_init();
 800b39e:	f000 fd3d 	bl	800be1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b3a2:	f008 f811 	bl	80133c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b3a6:	f001 fe5d 	bl	800d064 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b3aa:	f007 ff53 	bl	8013254 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b3ae:	bf00      	nop
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b3c2:	4b05      	ldr	r3, [pc, #20]	@ (800b3d8 <ptr_to_mem+0x20>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	4413      	add	r3, r2
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	2000a7b8 	.word	0x2000a7b8

0800b3dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b3e4:	4b05      	ldr	r3, [pc, #20]	@ (800b3fc <mem_to_ptr+0x20>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	b29b      	uxth	r3, r3
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	2000a7b8 	.word	0x2000a7b8

0800b400 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b408:	4b45      	ldr	r3, [pc, #276]	@ (800b520 <plug_holes+0x120>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d206      	bcs.n	800b420 <plug_holes+0x20>
 800b412:	4b44      	ldr	r3, [pc, #272]	@ (800b524 <plug_holes+0x124>)
 800b414:	f240 12df 	movw	r2, #479	@ 0x1df
 800b418:	4943      	ldr	r1, [pc, #268]	@ (800b528 <plug_holes+0x128>)
 800b41a:	4844      	ldr	r0, [pc, #272]	@ (800b52c <plug_holes+0x12c>)
 800b41c:	f00b fc7a 	bl	8016d14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b420:	4b43      	ldr	r3, [pc, #268]	@ (800b530 <plug_holes+0x130>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d306      	bcc.n	800b438 <plug_holes+0x38>
 800b42a:	4b3e      	ldr	r3, [pc, #248]	@ (800b524 <plug_holes+0x124>)
 800b42c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b430:	4940      	ldr	r1, [pc, #256]	@ (800b534 <plug_holes+0x134>)
 800b432:	483e      	ldr	r0, [pc, #248]	@ (800b52c <plug_holes+0x12c>)
 800b434:	f00b fc6e 	bl	8016d14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	791b      	ldrb	r3, [r3, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d006      	beq.n	800b44e <plug_holes+0x4e>
 800b440:	4b38      	ldr	r3, [pc, #224]	@ (800b524 <plug_holes+0x124>)
 800b442:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b446:	493c      	ldr	r1, [pc, #240]	@ (800b538 <plug_holes+0x138>)
 800b448:	4838      	ldr	r0, [pc, #224]	@ (800b52c <plug_holes+0x12c>)
 800b44a:	f00b fc63 	bl	8016d14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b456:	d906      	bls.n	800b466 <plug_holes+0x66>
 800b458:	4b32      	ldr	r3, [pc, #200]	@ (800b524 <plug_holes+0x124>)
 800b45a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b45e:	4937      	ldr	r1, [pc, #220]	@ (800b53c <plug_holes+0x13c>)
 800b460:	4832      	ldr	r0, [pc, #200]	@ (800b52c <plug_holes+0x12c>)
 800b462:	f00b fc57 	bl	8016d14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff ffa4 	bl	800b3b8 <ptr_to_mem>
 800b470:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d024      	beq.n	800b4c4 <plug_holes+0xc4>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	791b      	ldrb	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d120      	bne.n	800b4c4 <plug_holes+0xc4>
 800b482:	4b2b      	ldr	r3, [pc, #172]	@ (800b530 <plug_holes+0x130>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d01b      	beq.n	800b4c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b48c:	4b2c      	ldr	r3, [pc, #176]	@ (800b540 <plug_holes+0x140>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	429a      	cmp	r2, r3
 800b494:	d102      	bne.n	800b49c <plug_holes+0x9c>
      lfree = mem;
 800b496:	4a2a      	ldr	r2, [pc, #168]	@ (800b540 <plug_holes+0x140>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	881a      	ldrh	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b4ac:	d00a      	beq.n	800b4c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff ff80 	bl	800b3b8 <ptr_to_mem>
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7ff ff8e 	bl	800b3dc <mem_to_ptr>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	885b      	ldrh	r3, [r3, #2]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff ff75 	bl	800b3b8 <ptr_to_mem>
 800b4ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d01f      	beq.n	800b518 <plug_holes+0x118>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	791b      	ldrb	r3, [r3, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d11b      	bne.n	800b518 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b4e0:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <plug_holes+0x140>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d102      	bne.n	800b4f0 <plug_holes+0xf0>
      lfree = pmem;
 800b4ea:	4a15      	ldr	r2, [pc, #84]	@ (800b540 <plug_holes+0x140>)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	881a      	ldrh	r2, [r3, #0]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b500:	d00a      	beq.n	800b518 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff ff56 	bl	800b3b8 <ptr_to_mem>
 800b50c:	4604      	mov	r4, r0
 800b50e:	68b8      	ldr	r0, [r7, #8]
 800b510:	f7ff ff64 	bl	800b3dc <mem_to_ptr>
 800b514:	4603      	mov	r3, r0
 800b516:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b518:	bf00      	nop
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd90      	pop	{r4, r7, pc}
 800b520:	2000a7b8 	.word	0x2000a7b8
 800b524:	08019158 	.word	0x08019158
 800b528:	08019188 	.word	0x08019188
 800b52c:	080191a0 	.word	0x080191a0
 800b530:	2000a7bc 	.word	0x2000a7bc
 800b534:	080191c8 	.word	0x080191c8
 800b538:	080191e4 	.word	0x080191e4
 800b53c:	08019200 	.word	0x08019200
 800b540:	2000a7c4 	.word	0x2000a7c4

0800b544 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b54a:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c8 <mem_init+0x84>)
 800b54c:	3303      	adds	r3, #3
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	461a      	mov	r2, r3
 800b554:	4b1d      	ldr	r3, [pc, #116]	@ (800b5cc <mem_init+0x88>)
 800b556:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b558:	4b1c      	ldr	r3, [pc, #112]	@ (800b5cc <mem_init+0x88>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b564:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b572:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b576:	f7ff ff1f 	bl	800b3b8 <ptr_to_mem>
 800b57a:	4603      	mov	r3, r0
 800b57c:	4a14      	ldr	r2, [pc, #80]	@ (800b5d0 <mem_init+0x8c>)
 800b57e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b580:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <mem_init+0x8c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2201      	movs	r2, #1
 800b586:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b588:	4b11      	ldr	r3, [pc, #68]	@ (800b5d0 <mem_init+0x8c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b590:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b592:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d0 <mem_init+0x8c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b59a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b59c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5cc <mem_init+0x88>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0c      	ldr	r2, [pc, #48]	@ (800b5d4 <mem_init+0x90>)
 800b5a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b5a4:	480c      	ldr	r0, [pc, #48]	@ (800b5d8 <mem_init+0x94>)
 800b5a6:	f00b f9e5 	bl	8016974 <sys_mutex_new>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <mem_init+0x98>)
 800b5b2:	f240 221f 	movw	r2, #543	@ 0x21f
 800b5b6:	490a      	ldr	r1, [pc, #40]	@ (800b5e0 <mem_init+0x9c>)
 800b5b8:	480a      	ldr	r0, [pc, #40]	@ (800b5e4 <mem_init+0xa0>)
 800b5ba:	f00b fbab 	bl	8016d14 <iprintf>
  }
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	2000a164 	.word	0x2000a164
 800b5cc:	2000a7b8 	.word	0x2000a7b8
 800b5d0:	2000a7bc 	.word	0x2000a7bc
 800b5d4:	2000a7c4 	.word	0x2000a7c4
 800b5d8:	2000a7c0 	.word	0x2000a7c0
 800b5dc:	08019158 	.word	0x08019158
 800b5e0:	0801922c 	.word	0x0801922c
 800b5e4:	080191a0 	.word	0x080191a0

0800b5e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff fef3 	bl	800b3dc <mem_to_ptr>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff feda 	bl	800b3b8 <ptr_to_mem>
 800b604:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff fed4 	bl	800b3b8 <ptr_to_mem>
 800b610:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b61a:	d818      	bhi.n	800b64e <mem_link_valid+0x66>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	885b      	ldrh	r3, [r3, #2]
 800b620:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b624:	d813      	bhi.n	800b64e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b62a:	8afa      	ldrh	r2, [r7, #22]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d004      	beq.n	800b63a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	8afa      	ldrh	r2, [r7, #22]
 800b636:	429a      	cmp	r2, r3
 800b638:	d109      	bne.n	800b64e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b63a:	4b08      	ldr	r3, [pc, #32]	@ (800b65c <mem_link_valid+0x74>)
 800b63c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	429a      	cmp	r2, r3
 800b642:	d006      	beq.n	800b652 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	885b      	ldrh	r3, [r3, #2]
 800b648:	8afa      	ldrh	r2, [r7, #22]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d001      	beq.n	800b652 <mem_link_valid+0x6a>
    return 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	e000      	b.n	800b654 <mem_link_valid+0x6c>
  }
  return 1;
 800b652:	2301      	movs	r3, #1
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	2000a7bc 	.word	0x2000a7bc

0800b660 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d070      	beq.n	800b750 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f003 0303 	and.w	r3, r3, #3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00d      	beq.n	800b694 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b678:	4b37      	ldr	r3, [pc, #220]	@ (800b758 <mem_free+0xf8>)
 800b67a:	f240 2273 	movw	r2, #627	@ 0x273
 800b67e:	4937      	ldr	r1, [pc, #220]	@ (800b75c <mem_free+0xfc>)
 800b680:	4837      	ldr	r0, [pc, #220]	@ (800b760 <mem_free+0x100>)
 800b682:	f00b fb47 	bl	8016d14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b686:	f00b f9d3 	bl	8016a30 <sys_arch_protect>
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f00b f9dd 	bl	8016a4c <sys_arch_unprotect>
    return;
 800b692:	e05e      	b.n	800b752 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3b08      	subs	r3, #8
 800b698:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b69a:	4b32      	ldr	r3, [pc, #200]	@ (800b764 <mem_free+0x104>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69fa      	ldr	r2, [r7, #28]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d306      	bcc.n	800b6b2 <mem_free+0x52>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f103 020c 	add.w	r2, r3, #12
 800b6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b768 <mem_free+0x108>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d90d      	bls.n	800b6ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b6b2:	4b29      	ldr	r3, [pc, #164]	@ (800b758 <mem_free+0xf8>)
 800b6b4:	f240 227f 	movw	r2, #639	@ 0x27f
 800b6b8:	492c      	ldr	r1, [pc, #176]	@ (800b76c <mem_free+0x10c>)
 800b6ba:	4829      	ldr	r0, [pc, #164]	@ (800b760 <mem_free+0x100>)
 800b6bc:	f00b fb2a 	bl	8016d14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6c0:	f00b f9b6 	bl	8016a30 <sys_arch_protect>
 800b6c4:	6138      	str	r0, [r7, #16]
 800b6c6:	6938      	ldr	r0, [r7, #16]
 800b6c8:	f00b f9c0 	bl	8016a4c <sys_arch_unprotect>
    return;
 800b6cc:	e041      	b.n	800b752 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b6ce:	4828      	ldr	r0, [pc, #160]	@ (800b770 <mem_free+0x110>)
 800b6d0:	f00b f96c 	bl	80169ac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	791b      	ldrb	r3, [r3, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d110      	bne.n	800b6fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b6dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b758 <mem_free+0xf8>)
 800b6de:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b6e2:	4924      	ldr	r1, [pc, #144]	@ (800b774 <mem_free+0x114>)
 800b6e4:	481e      	ldr	r0, [pc, #120]	@ (800b760 <mem_free+0x100>)
 800b6e6:	f00b fb15 	bl	8016d14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b6ea:	4821      	ldr	r0, [pc, #132]	@ (800b770 <mem_free+0x110>)
 800b6ec:	f00b f96d 	bl	80169ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6f0:	f00b f99e 	bl	8016a30 <sys_arch_protect>
 800b6f4:	6178      	str	r0, [r7, #20]
 800b6f6:	6978      	ldr	r0, [r7, #20]
 800b6f8:	f00b f9a8 	bl	8016a4c <sys_arch_unprotect>
    return;
 800b6fc:	e029      	b.n	800b752 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b6fe:	69f8      	ldr	r0, [r7, #28]
 800b700:	f7ff ff72 	bl	800b5e8 <mem_link_valid>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d110      	bne.n	800b72c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b70a:	4b13      	ldr	r3, [pc, #76]	@ (800b758 <mem_free+0xf8>)
 800b70c:	f240 2295 	movw	r2, #661	@ 0x295
 800b710:	4919      	ldr	r1, [pc, #100]	@ (800b778 <mem_free+0x118>)
 800b712:	4813      	ldr	r0, [pc, #76]	@ (800b760 <mem_free+0x100>)
 800b714:	f00b fafe 	bl	8016d14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b718:	4815      	ldr	r0, [pc, #84]	@ (800b770 <mem_free+0x110>)
 800b71a:	f00b f956 	bl	80169ca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b71e:	f00b f987 	bl	8016a30 <sys_arch_protect>
 800b722:	61b8      	str	r0, [r7, #24]
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f00b f991 	bl	8016a4c <sys_arch_unprotect>
    return;
 800b72a:	e012      	b.n	800b752 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	2200      	movs	r2, #0
 800b730:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b732:	4b12      	ldr	r3, [pc, #72]	@ (800b77c <mem_free+0x11c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d202      	bcs.n	800b742 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b73c:	4a0f      	ldr	r2, [pc, #60]	@ (800b77c <mem_free+0x11c>)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b742:	69f8      	ldr	r0, [r7, #28]
 800b744:	f7ff fe5c 	bl	800b400 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b748:	4809      	ldr	r0, [pc, #36]	@ (800b770 <mem_free+0x110>)
 800b74a:	f00b f93e 	bl	80169ca <sys_mutex_unlock>
 800b74e:	e000      	b.n	800b752 <mem_free+0xf2>
    return;
 800b750:	bf00      	nop
}
 800b752:	3720      	adds	r7, #32
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	08019158 	.word	0x08019158
 800b75c:	08019248 	.word	0x08019248
 800b760:	080191a0 	.word	0x080191a0
 800b764:	2000a7b8 	.word	0x2000a7b8
 800b768:	2000a7bc 	.word	0x2000a7bc
 800b76c:	0801926c 	.word	0x0801926c
 800b770:	2000a7c0 	.word	0x2000a7c0
 800b774:	08019288 	.word	0x08019288
 800b778:	080192b0 	.word	0x080192b0
 800b77c:	2000a7c4 	.word	0x2000a7c4

0800b780 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b78c:	887b      	ldrh	r3, [r7, #2]
 800b78e:	3303      	adds	r3, #3
 800b790:	b29b      	uxth	r3, r3
 800b792:	f023 0303 	bic.w	r3, r3, #3
 800b796:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b798:	8bfb      	ldrh	r3, [r7, #30]
 800b79a:	2b0b      	cmp	r3, #11
 800b79c:	d801      	bhi.n	800b7a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b79e:	230c      	movs	r3, #12
 800b7a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b7a2:	8bfb      	ldrh	r3, [r7, #30]
 800b7a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b7a8:	d803      	bhi.n	800b7b2 <mem_trim+0x32>
 800b7aa:	8bfa      	ldrh	r2, [r7, #30]
 800b7ac:	887b      	ldrh	r3, [r7, #2]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d201      	bcs.n	800b7b6 <mem_trim+0x36>
    return NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e0d8      	b.n	800b968 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b7b6:	4b6e      	ldr	r3, [pc, #440]	@ (800b970 <mem_trim+0x1f0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d304      	bcc.n	800b7ca <mem_trim+0x4a>
 800b7c0:	4b6c      	ldr	r3, [pc, #432]	@ (800b974 <mem_trim+0x1f4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d306      	bcc.n	800b7d8 <mem_trim+0x58>
 800b7ca:	4b6b      	ldr	r3, [pc, #428]	@ (800b978 <mem_trim+0x1f8>)
 800b7cc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b7d0:	496a      	ldr	r1, [pc, #424]	@ (800b97c <mem_trim+0x1fc>)
 800b7d2:	486b      	ldr	r0, [pc, #428]	@ (800b980 <mem_trim+0x200>)
 800b7d4:	f00b fa9e 	bl	8016d14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b7d8:	4b65      	ldr	r3, [pc, #404]	@ (800b970 <mem_trim+0x1f0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d304      	bcc.n	800b7ec <mem_trim+0x6c>
 800b7e2:	4b64      	ldr	r3, [pc, #400]	@ (800b974 <mem_trim+0x1f4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d307      	bcc.n	800b7fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b7ec:	f00b f920 	bl	8016a30 <sys_arch_protect>
 800b7f0:	60b8      	str	r0, [r7, #8]
 800b7f2:	68b8      	ldr	r0, [r7, #8]
 800b7f4:	f00b f92a 	bl	8016a4c <sys_arch_unprotect>
    return rmem;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	e0b5      	b.n	800b968 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3b08      	subs	r3, #8
 800b800:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b802:	69b8      	ldr	r0, [r7, #24]
 800b804:	f7ff fdea 	bl	800b3dc <mem_to_ptr>
 800b808:	4603      	mov	r3, r0
 800b80a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	881a      	ldrh	r2, [r3, #0]
 800b810:	8afb      	ldrh	r3, [r7, #22]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	b29b      	uxth	r3, r3
 800b816:	3b08      	subs	r3, #8
 800b818:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b81a:	8bfa      	ldrh	r2, [r7, #30]
 800b81c:	8abb      	ldrh	r3, [r7, #20]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d906      	bls.n	800b830 <mem_trim+0xb0>
 800b822:	4b55      	ldr	r3, [pc, #340]	@ (800b978 <mem_trim+0x1f8>)
 800b824:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b828:	4956      	ldr	r1, [pc, #344]	@ (800b984 <mem_trim+0x204>)
 800b82a:	4855      	ldr	r0, [pc, #340]	@ (800b980 <mem_trim+0x200>)
 800b82c:	f00b fa72 	bl	8016d14 <iprintf>
  if (newsize > size) {
 800b830:	8bfa      	ldrh	r2, [r7, #30]
 800b832:	8abb      	ldrh	r3, [r7, #20]
 800b834:	429a      	cmp	r2, r3
 800b836:	d901      	bls.n	800b83c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b838:	2300      	movs	r3, #0
 800b83a:	e095      	b.n	800b968 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b83c:	8bfa      	ldrh	r2, [r7, #30]
 800b83e:	8abb      	ldrh	r3, [r7, #20]
 800b840:	429a      	cmp	r2, r3
 800b842:	d101      	bne.n	800b848 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	e08f      	b.n	800b968 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b848:	484f      	ldr	r0, [pc, #316]	@ (800b988 <mem_trim+0x208>)
 800b84a:	f00b f8af 	bl	80169ac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fdb0 	bl	800b3b8 <ptr_to_mem>
 800b858:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	791b      	ldrb	r3, [r3, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d13f      	bne.n	800b8e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b86a:	d106      	bne.n	800b87a <mem_trim+0xfa>
 800b86c:	4b42      	ldr	r3, [pc, #264]	@ (800b978 <mem_trim+0x1f8>)
 800b86e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b872:	4946      	ldr	r1, [pc, #280]	@ (800b98c <mem_trim+0x20c>)
 800b874:	4842      	ldr	r0, [pc, #264]	@ (800b980 <mem_trim+0x200>)
 800b876:	f00b fa4d 	bl	8016d14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b880:	8afa      	ldrh	r2, [r7, #22]
 800b882:	8bfb      	ldrh	r3, [r7, #30]
 800b884:	4413      	add	r3, r2
 800b886:	b29b      	uxth	r3, r3
 800b888:	3308      	adds	r3, #8
 800b88a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b88c:	4b40      	ldr	r3, [pc, #256]	@ (800b990 <mem_trim+0x210>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	429a      	cmp	r2, r3
 800b894:	d106      	bne.n	800b8a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b896:	89fb      	ldrh	r3, [r7, #14]
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff fd8d 	bl	800b3b8 <ptr_to_mem>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	4a3b      	ldr	r2, [pc, #236]	@ (800b990 <mem_trim+0x210>)
 800b8a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b8a4:	89fb      	ldrh	r3, [r7, #14]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fd86 	bl	800b3b8 <ptr_to_mem>
 800b8ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	89ba      	ldrh	r2, [r7, #12]
 800b8b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	8afa      	ldrh	r2, [r7, #22]
 800b8be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	89fa      	ldrh	r2, [r7, #14]
 800b8c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b8ce:	d047      	beq.n	800b960 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fd6f 	bl	800b3b8 <ptr_to_mem>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	89fb      	ldrh	r3, [r7, #14]
 800b8de:	8053      	strh	r3, [r2, #2]
 800b8e0:	e03e      	b.n	800b960 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b8e2:	8bfb      	ldrh	r3, [r7, #30]
 800b8e4:	f103 0214 	add.w	r2, r3, #20
 800b8e8:	8abb      	ldrh	r3, [r7, #20]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d838      	bhi.n	800b960 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b8ee:	8afa      	ldrh	r2, [r7, #22]
 800b8f0:	8bfb      	ldrh	r3, [r7, #30]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b902:	d106      	bne.n	800b912 <mem_trim+0x192>
 800b904:	4b1c      	ldr	r3, [pc, #112]	@ (800b978 <mem_trim+0x1f8>)
 800b906:	f240 3216 	movw	r2, #790	@ 0x316
 800b90a:	4920      	ldr	r1, [pc, #128]	@ (800b98c <mem_trim+0x20c>)
 800b90c:	481c      	ldr	r0, [pc, #112]	@ (800b980 <mem_trim+0x200>)
 800b90e:	f00b fa01 	bl	8016d14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b912:	89fb      	ldrh	r3, [r7, #14]
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fd4f 	bl	800b3b8 <ptr_to_mem>
 800b91a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b91c:	4b1c      	ldr	r3, [pc, #112]	@ (800b990 <mem_trim+0x210>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	429a      	cmp	r2, r3
 800b924:	d202      	bcs.n	800b92c <mem_trim+0x1ac>
      lfree = mem2;
 800b926:	4a1a      	ldr	r2, [pc, #104]	@ (800b990 <mem_trim+0x210>)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2200      	movs	r2, #0
 800b930:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	881a      	ldrh	r2, [r3, #0]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	8afa      	ldrh	r2, [r7, #22]
 800b93e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	89fa      	ldrh	r2, [r7, #14]
 800b944:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b94e:	d007      	beq.n	800b960 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff fd2f 	bl	800b3b8 <ptr_to_mem>
 800b95a:	4602      	mov	r2, r0
 800b95c:	89fb      	ldrh	r3, [r7, #14]
 800b95e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b960:	4809      	ldr	r0, [pc, #36]	@ (800b988 <mem_trim+0x208>)
 800b962:	f00b f832 	bl	80169ca <sys_mutex_unlock>
  return rmem;
 800b966:	687b      	ldr	r3, [r7, #4]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3720      	adds	r7, #32
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	2000a7b8 	.word	0x2000a7b8
 800b974:	2000a7bc 	.word	0x2000a7bc
 800b978:	08019158 	.word	0x08019158
 800b97c:	080192e4 	.word	0x080192e4
 800b980:	080191a0 	.word	0x080191a0
 800b984:	080192fc 	.word	0x080192fc
 800b988:	2000a7c0 	.word	0x2000a7c0
 800b98c:	0801931c 	.word	0x0801931c
 800b990:	2000a7c4 	.word	0x2000a7c4

0800b994 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b088      	sub	sp, #32
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <mem_malloc+0x14>
    return NULL;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e0e2      	b.n	800bb6e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	3303      	adds	r3, #3
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b9b4:	8bbb      	ldrh	r3, [r7, #28]
 800b9b6:	2b0b      	cmp	r3, #11
 800b9b8:	d801      	bhi.n	800b9be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b9be:	8bbb      	ldrh	r3, [r7, #28]
 800b9c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b9c4:	d803      	bhi.n	800b9ce <mem_malloc+0x3a>
 800b9c6:	8bba      	ldrh	r2, [r7, #28]
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d201      	bcs.n	800b9d2 <mem_malloc+0x3e>
    return NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e0cd      	b.n	800bb6e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b9d2:	4869      	ldr	r0, [pc, #420]	@ (800bb78 <mem_malloc+0x1e4>)
 800b9d4:	f00a ffea 	bl	80169ac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b9d8:	4b68      	ldr	r3, [pc, #416]	@ (800bb7c <mem_malloc+0x1e8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff fcfd 	bl	800b3dc <mem_to_ptr>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	83fb      	strh	r3, [r7, #30]
 800b9e6:	e0b7      	b.n	800bb58 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b9e8:	8bfb      	ldrh	r3, [r7, #30]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fce4 	bl	800b3b8 <ptr_to_mem>
 800b9f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	791b      	ldrb	r3, [r3, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f040 80a7 	bne.w	800bb4a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	461a      	mov	r2, r3
 800ba02:	8bfb      	ldrh	r3, [r7, #30]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	f1a3 0208 	sub.w	r2, r3, #8
 800ba0a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	f0c0 809c 	bcc.w	800bb4a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	8bfb      	ldrh	r3, [r7, #30]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	f1a3 0208 	sub.w	r2, r3, #8
 800ba20:	8bbb      	ldrh	r3, [r7, #28]
 800ba22:	3314      	adds	r3, #20
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d333      	bcc.n	800ba90 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ba28:	8bfa      	ldrh	r2, [r7, #30]
 800ba2a:	8bbb      	ldrh	r3, [r7, #28]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3308      	adds	r3, #8
 800ba32:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ba34:	8a7b      	ldrh	r3, [r7, #18]
 800ba36:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba3a:	d106      	bne.n	800ba4a <mem_malloc+0xb6>
 800ba3c:	4b50      	ldr	r3, [pc, #320]	@ (800bb80 <mem_malloc+0x1ec>)
 800ba3e:	f240 3287 	movw	r2, #903	@ 0x387
 800ba42:	4950      	ldr	r1, [pc, #320]	@ (800bb84 <mem_malloc+0x1f0>)
 800ba44:	4850      	ldr	r0, [pc, #320]	@ (800bb88 <mem_malloc+0x1f4>)
 800ba46:	f00b f965 	bl	8016d14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ba4a:	8a7b      	ldrh	r3, [r7, #18]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff fcb3 	bl	800b3b8 <ptr_to_mem>
 800ba52:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	881a      	ldrh	r2, [r3, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8bfa      	ldrh	r2, [r7, #30]
 800ba66:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	8a7a      	ldrh	r2, [r7, #18]
 800ba6c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2201      	movs	r2, #1
 800ba72:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba7c:	d00b      	beq.n	800ba96 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fc98 	bl	800b3b8 <ptr_to_mem>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	8a7b      	ldrh	r3, [r7, #18]
 800ba8c:	8053      	strh	r3, [r2, #2]
 800ba8e:	e002      	b.n	800ba96 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2201      	movs	r2, #1
 800ba94:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ba96:	4b39      	ldr	r3, [pc, #228]	@ (800bb7c <mem_malloc+0x1e8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d127      	bne.n	800baf0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800baa0:	4b36      	ldr	r3, [pc, #216]	@ (800bb7c <mem_malloc+0x1e8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800baa6:	e005      	b.n	800bab4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff fc83 	bl	800b3b8 <ptr_to_mem>
 800bab2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	791b      	ldrb	r3, [r3, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <mem_malloc+0x132>
 800babc:	4b33      	ldr	r3, [pc, #204]	@ (800bb8c <mem_malloc+0x1f8>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d1f0      	bne.n	800baa8 <mem_malloc+0x114>
          }
          lfree = cur;
 800bac6:	4a2d      	ldr	r2, [pc, #180]	@ (800bb7c <mem_malloc+0x1e8>)
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bacc:	4b2b      	ldr	r3, [pc, #172]	@ (800bb7c <mem_malloc+0x1e8>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b2e      	ldr	r3, [pc, #184]	@ (800bb8c <mem_malloc+0x1f8>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d00b      	beq.n	800baf0 <mem_malloc+0x15c>
 800bad8:	4b28      	ldr	r3, [pc, #160]	@ (800bb7c <mem_malloc+0x1e8>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	791b      	ldrb	r3, [r3, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d006      	beq.n	800baf0 <mem_malloc+0x15c>
 800bae2:	4b27      	ldr	r3, [pc, #156]	@ (800bb80 <mem_malloc+0x1ec>)
 800bae4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800bae8:	4929      	ldr	r1, [pc, #164]	@ (800bb90 <mem_malloc+0x1fc>)
 800baea:	4827      	ldr	r0, [pc, #156]	@ (800bb88 <mem_malloc+0x1f4>)
 800baec:	f00b f912 	bl	8016d14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800baf0:	4821      	ldr	r0, [pc, #132]	@ (800bb78 <mem_malloc+0x1e4>)
 800baf2:	f00a ff6a 	bl	80169ca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800baf6:	8bba      	ldrh	r2, [r7, #28]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	4413      	add	r3, r2
 800bafc:	3308      	adds	r3, #8
 800bafe:	4a23      	ldr	r2, [pc, #140]	@ (800bb8c <mem_malloc+0x1f8>)
 800bb00:	6812      	ldr	r2, [r2, #0]
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d906      	bls.n	800bb14 <mem_malloc+0x180>
 800bb06:	4b1e      	ldr	r3, [pc, #120]	@ (800bb80 <mem_malloc+0x1ec>)
 800bb08:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bb0c:	4921      	ldr	r1, [pc, #132]	@ (800bb94 <mem_malloc+0x200>)
 800bb0e:	481e      	ldr	r0, [pc, #120]	@ (800bb88 <mem_malloc+0x1f4>)
 800bb10:	f00b f900 	bl	8016d14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d006      	beq.n	800bb2c <mem_malloc+0x198>
 800bb1e:	4b18      	ldr	r3, [pc, #96]	@ (800bb80 <mem_malloc+0x1ec>)
 800bb20:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bb24:	491c      	ldr	r1, [pc, #112]	@ (800bb98 <mem_malloc+0x204>)
 800bb26:	4818      	ldr	r0, [pc, #96]	@ (800bb88 <mem_malloc+0x1f4>)
 800bb28:	f00b f8f4 	bl	8016d14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f003 0303 	and.w	r3, r3, #3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d006      	beq.n	800bb44 <mem_malloc+0x1b0>
 800bb36:	4b12      	ldr	r3, [pc, #72]	@ (800bb80 <mem_malloc+0x1ec>)
 800bb38:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bb3c:	4917      	ldr	r1, [pc, #92]	@ (800bb9c <mem_malloc+0x208>)
 800bb3e:	4812      	ldr	r0, [pc, #72]	@ (800bb88 <mem_malloc+0x1f4>)
 800bb40:	f00b f8e8 	bl	8016d14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3308      	adds	r3, #8
 800bb48:	e011      	b.n	800bb6e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bb4a:	8bfb      	ldrh	r3, [r7, #30]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fc33 	bl	800b3b8 <ptr_to_mem>
 800bb52:	4603      	mov	r3, r0
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb58:	8bfa      	ldrh	r2, [r7, #30]
 800bb5a:	8bbb      	ldrh	r3, [r7, #28]
 800bb5c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800bb60:	429a      	cmp	r2, r3
 800bb62:	f4ff af41 	bcc.w	800b9e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bb66:	4804      	ldr	r0, [pc, #16]	@ (800bb78 <mem_malloc+0x1e4>)
 800bb68:	f00a ff2f 	bl	80169ca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	2000a7c0 	.word	0x2000a7c0
 800bb7c:	2000a7c4 	.word	0x2000a7c4
 800bb80:	08019158 	.word	0x08019158
 800bb84:	0801931c 	.word	0x0801931c
 800bb88:	080191a0 	.word	0x080191a0
 800bb8c:	2000a7bc 	.word	0x2000a7bc
 800bb90:	08019330 	.word	0x08019330
 800bb94:	0801934c 	.word	0x0801934c
 800bb98:	0801937c 	.word	0x0801937c
 800bb9c:	080193ac 	.word	0x080193ac

0800bba0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	3303      	adds	r3, #3
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	e011      	b.n	800bbe6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	881b      	ldrh	r3, [r3, #0]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4413      	add	r3, r2
 800bbde:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	461a      	mov	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	dbe7      	blt.n	800bbc2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bc06:	2300      	movs	r3, #0
 800bc08:	80fb      	strh	r3, [r7, #6]
 800bc0a:	e009      	b.n	800bc20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bc0c:	88fb      	ldrh	r3, [r7, #6]
 800bc0e:	4a08      	ldr	r2, [pc, #32]	@ (800bc30 <memp_init+0x30>)
 800bc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ffc3 	bl	800bba0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bc1a:	88fb      	ldrh	r3, [r7, #6]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	80fb      	strh	r3, [r7, #6]
 800bc20:	88fb      	ldrh	r3, [r7, #6]
 800bc22:	2b0c      	cmp	r3, #12
 800bc24:	d9f2      	bls.n	800bc0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	0801bc78 	.word	0x0801bc78

0800bc34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bc3c:	f00a fef8 	bl	8016a30 <sys_arch_protect>
 800bc40:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d015      	beq.n	800bc7c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	6812      	ldr	r2, [r2, #0]
 800bc58:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <do_memp_malloc_pool+0x3e>
 800bc64:	4b09      	ldr	r3, [pc, #36]	@ (800bc8c <do_memp_malloc_pool+0x58>)
 800bc66:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bc6a:	4909      	ldr	r1, [pc, #36]	@ (800bc90 <do_memp_malloc_pool+0x5c>)
 800bc6c:	4809      	ldr	r0, [pc, #36]	@ (800bc94 <do_memp_malloc_pool+0x60>)
 800bc6e:	f00b f851 	bl	8016d14 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f00a feea 	bl	8016a4c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	e003      	b.n	800bc84 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f00a fee5 	bl	8016a4c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	080193d0 	.word	0x080193d0
 800bc90:	08019400 	.word	0x08019400
 800bc94:	08019424 	.word	0x08019424

0800bc98 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <memp_malloc_pool+0x1c>
 800bca6:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <memp_malloc_pool+0x38>)
 800bca8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bcac:	4909      	ldr	r1, [pc, #36]	@ (800bcd4 <memp_malloc_pool+0x3c>)
 800bcae:	480a      	ldr	r0, [pc, #40]	@ (800bcd8 <memp_malloc_pool+0x40>)
 800bcb0:	f00b f830 	bl	8016d14 <iprintf>
  if (desc == NULL) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <memp_malloc_pool+0x26>
    return NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e003      	b.n	800bcc6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff ffb8 	bl	800bc34 <do_memp_malloc_pool>
 800bcc4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	080193d0 	.word	0x080193d0
 800bcd4:	0801944c 	.word	0x0801944c
 800bcd8:	08019424 	.word	0x08019424

0800bcdc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	2b0c      	cmp	r3, #12
 800bcea:	d908      	bls.n	800bcfe <memp_malloc+0x22>
 800bcec:	4b0a      	ldr	r3, [pc, #40]	@ (800bd18 <memp_malloc+0x3c>)
 800bcee:	f240 1257 	movw	r2, #343	@ 0x157
 800bcf2:	490a      	ldr	r1, [pc, #40]	@ (800bd1c <memp_malloc+0x40>)
 800bcf4:	480a      	ldr	r0, [pc, #40]	@ (800bd20 <memp_malloc+0x44>)
 800bcf6:	f00b f80d 	bl	8016d14 <iprintf>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e008      	b.n	800bd10 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	4a08      	ldr	r2, [pc, #32]	@ (800bd24 <memp_malloc+0x48>)
 800bd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff ff94 	bl	800bc34 <do_memp_malloc_pool>
 800bd0c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	080193d0 	.word	0x080193d0
 800bd1c:	08019460 	.word	0x08019460
 800bd20:	08019424 	.word	0x08019424
 800bd24:	0801bc78 	.word	0x0801bc78

0800bd28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f003 0303 	and.w	r3, r3, #3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d006      	beq.n	800bd4a <do_memp_free_pool+0x22>
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <do_memp_free_pool+0x4c>)
 800bd3e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bd42:	490d      	ldr	r1, [pc, #52]	@ (800bd78 <do_memp_free_pool+0x50>)
 800bd44:	480d      	ldr	r0, [pc, #52]	@ (800bd7c <do_memp_free_pool+0x54>)
 800bd46:	f00a ffe5 	bl	8016d14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bd4e:	f00a fe6f 	bl	8016a30 <sys_arch_protect>
 800bd52:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f00a fe70 	bl	8016a4c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bd6c:	bf00      	nop
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	080193d0 	.word	0x080193d0
 800bd78:	08019480 	.word	0x08019480
 800bd7c:	08019424 	.word	0x08019424

0800bd80 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d106      	bne.n	800bd9e <memp_free_pool+0x1e>
 800bd90:	4b0a      	ldr	r3, [pc, #40]	@ (800bdbc <memp_free_pool+0x3c>)
 800bd92:	f240 1295 	movw	r2, #405	@ 0x195
 800bd96:	490a      	ldr	r1, [pc, #40]	@ (800bdc0 <memp_free_pool+0x40>)
 800bd98:	480a      	ldr	r0, [pc, #40]	@ (800bdc4 <memp_free_pool+0x44>)
 800bd9a:	f00a ffbb 	bl	8016d14 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d007      	beq.n	800bdb4 <memp_free_pool+0x34>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d004      	beq.n	800bdb4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ffbb 	bl	800bd28 <do_memp_free_pool>
 800bdb2:	e000      	b.n	800bdb6 <memp_free_pool+0x36>
    return;
 800bdb4:	bf00      	nop
}
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	080193d0 	.word	0x080193d0
 800bdc0:	0801944c 	.word	0x0801944c
 800bdc4:	08019424 	.word	0x08019424

0800bdc8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	2b0c      	cmp	r3, #12
 800bdd8:	d907      	bls.n	800bdea <memp_free+0x22>
 800bdda:	4b0c      	ldr	r3, [pc, #48]	@ (800be0c <memp_free+0x44>)
 800bddc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bde0:	490b      	ldr	r1, [pc, #44]	@ (800be10 <memp_free+0x48>)
 800bde2:	480c      	ldr	r0, [pc, #48]	@ (800be14 <memp_free+0x4c>)
 800bde4:	f00a ff96 	bl	8016d14 <iprintf>
 800bde8:	e00c      	b.n	800be04 <memp_free+0x3c>

  if (mem == NULL) {
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d008      	beq.n	800be02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	4a09      	ldr	r2, [pc, #36]	@ (800be18 <memp_free+0x50>)
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff ff94 	bl	800bd28 <do_memp_free_pool>
 800be00:	e000      	b.n	800be04 <memp_free+0x3c>
    return;
 800be02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	080193d0 	.word	0x080193d0
 800be10:	080194a0 	.word	0x080194a0
 800be14:	08019424 	.word	0x08019424
 800be18:	0801bc78 	.word	0x0801bc78

0800be1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800be20:	bf00      	nop
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
	...

0800be2c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d108      	bne.n	800be52 <netif_add+0x26>
 800be40:	4b57      	ldr	r3, [pc, #348]	@ (800bfa0 <netif_add+0x174>)
 800be42:	f240 1227 	movw	r2, #295	@ 0x127
 800be46:	4957      	ldr	r1, [pc, #348]	@ (800bfa4 <netif_add+0x178>)
 800be48:	4857      	ldr	r0, [pc, #348]	@ (800bfa8 <netif_add+0x17c>)
 800be4a:	f00a ff63 	bl	8016d14 <iprintf>
 800be4e:	2300      	movs	r3, #0
 800be50:	e0a2      	b.n	800bf98 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d108      	bne.n	800be6a <netif_add+0x3e>
 800be58:	4b51      	ldr	r3, [pc, #324]	@ (800bfa0 <netif_add+0x174>)
 800be5a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800be5e:	4953      	ldr	r1, [pc, #332]	@ (800bfac <netif_add+0x180>)
 800be60:	4851      	ldr	r0, [pc, #324]	@ (800bfa8 <netif_add+0x17c>)
 800be62:	f00a ff57 	bl	8016d14 <iprintf>
 800be66:	2300      	movs	r3, #0
 800be68:	e096      	b.n	800bf98 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800be70:	4b4f      	ldr	r3, [pc, #316]	@ (800bfb0 <netif_add+0x184>)
 800be72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800be7a:	4b4d      	ldr	r3, [pc, #308]	@ (800bfb0 <netif_add+0x184>)
 800be7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800be84:	4b4a      	ldr	r3, [pc, #296]	@ (800bfb0 <netif_add+0x184>)
 800be86:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4a45      	ldr	r2, [pc, #276]	@ (800bfb4 <netif_add+0x188>)
 800be9e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6a3a      	ldr	r2, [r7, #32]
 800beb8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800beba:	4b3f      	ldr	r3, [pc, #252]	@ (800bfb8 <netif_add+0x18c>)
 800bebc:	781a      	ldrb	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bec8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f913 	bl	800c0fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	4798      	blx	r3
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <netif_add+0xba>
    return NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e058      	b.n	800bf98 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800beec:	2bff      	cmp	r3, #255	@ 0xff
 800beee:	d103      	bne.n	800bef8 <netif_add+0xcc>
        netif->num = 0;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800befc:	4b2f      	ldr	r3, [pc, #188]	@ (800bfbc <netif_add+0x190>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e02b      	b.n	800bf5c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d106      	bne.n	800bf1a <netif_add+0xee>
 800bf0c:	4b24      	ldr	r3, [pc, #144]	@ (800bfa0 <netif_add+0x174>)
 800bf0e:	f240 128b 	movw	r2, #395	@ 0x18b
 800bf12:	492b      	ldr	r1, [pc, #172]	@ (800bfc0 <netif_add+0x194>)
 800bf14:	4824      	ldr	r0, [pc, #144]	@ (800bfa8 <netif_add+0x17c>)
 800bf16:	f00a fefd 	bl	8016d14 <iprintf>
        num_netifs++;
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2bff      	cmp	r3, #255	@ 0xff
 800bf24:	dd06      	ble.n	800bf34 <netif_add+0x108>
 800bf26:	4b1e      	ldr	r3, [pc, #120]	@ (800bfa0 <netif_add+0x174>)
 800bf28:	f240 128d 	movw	r2, #397	@ 0x18d
 800bf2c:	4925      	ldr	r1, [pc, #148]	@ (800bfc4 <netif_add+0x198>)
 800bf2e:	481e      	ldr	r0, [pc, #120]	@ (800bfa8 <netif_add+0x17c>)
 800bf30:	f00a fef0 	bl	8016d14 <iprintf>
        if (netif2->num == netif->num) {
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d108      	bne.n	800bf56 <netif_add+0x12a>
          netif->num++;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800bf54:	e005      	b.n	800bf62 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1d0      	bne.n	800bf04 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1be      	bne.n	800bee6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf6e:	2bfe      	cmp	r3, #254	@ 0xfe
 800bf70:	d103      	bne.n	800bf7a <netif_add+0x14e>
    netif_num = 0;
 800bf72:	4b11      	ldr	r3, [pc, #68]	@ (800bfb8 <netif_add+0x18c>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e006      	b.n	800bf88 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf80:	3301      	adds	r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb8 <netif_add+0x18c>)
 800bf86:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bf88:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <netif_add+0x190>)
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bf90:	4a0a      	ldr	r2, [pc, #40]	@ (800bfbc <netif_add+0x190>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bf96:	68fb      	ldr	r3, [r7, #12]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	080194bc 	.word	0x080194bc
 800bfa4:	08019550 	.word	0x08019550
 800bfa8:	0801950c 	.word	0x0801950c
 800bfac:	0801956c 	.word	0x0801956c
 800bfb0:	0801bcec 	.word	0x0801bcec
 800bfb4:	0800c3d7 	.word	0x0800c3d7
 800bfb8:	2000d89c 	.word	0x2000d89c
 800bfbc:	2000d894 	.word	0x2000d894
 800bfc0:	08019590 	.word	0x08019590
 800bfc4:	080195a4 	.word	0x080195a4

0800bfc8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f002 fe17 	bl	800ec08 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f007 ff43 	bl	8013e68 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <netif_do_set_ipaddr+0x20>
 800bffe:	4b1d      	ldr	r3, [pc, #116]	@ (800c074 <netif_do_set_ipaddr+0x88>)
 800c000:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c004:	491c      	ldr	r1, [pc, #112]	@ (800c078 <netif_do_set_ipaddr+0x8c>)
 800c006:	481d      	ldr	r0, [pc, #116]	@ (800c07c <netif_do_set_ipaddr+0x90>)
 800c008:	f00a fe84 	bl	8016d14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <netif_do_set_ipaddr+0x34>
 800c012:	4b18      	ldr	r3, [pc, #96]	@ (800c074 <netif_do_set_ipaddr+0x88>)
 800c014:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c018:	4917      	ldr	r1, [pc, #92]	@ (800c078 <netif_do_set_ipaddr+0x8c>)
 800c01a:	4818      	ldr	r0, [pc, #96]	@ (800c07c <netif_do_set_ipaddr+0x90>)
 800c01c:	f00a fe7a 	bl	8016d14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3304      	adds	r3, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d01c      	beq.n	800c068 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	3304      	adds	r3, #4
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c03e:	f107 0314 	add.w	r3, r7, #20
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff ffbf 	bl	800bfc8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <netif_do_set_ipaddr+0x6a>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	e000      	b.n	800c058 <netif_do_set_ipaddr+0x6c>
 800c056:	2300      	movs	r3, #0
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c05c:	2101      	movs	r1, #1
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f8d2 	bl	800c208 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	080194bc 	.word	0x080194bc
 800c078:	080195d4 	.word	0x080195d4
 800c07c:	0801950c 	.word	0x0801950c

0800c080 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3308      	adds	r3, #8
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d00a      	beq.n	800c0b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <netif_do_set_netmask+0x26>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	e000      	b.n	800c0a8 <netif_do_set_netmask+0x28>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e000      	b.n	800c0b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	60f8      	str	r0, [r7, #12]
 800c0c6:	60b9      	str	r1, [r7, #8]
 800c0c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	330c      	adds	r3, #12
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d00a      	beq.n	800c0ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <netif_do_set_gw+0x26>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	e000      	b.n	800c0e6 <netif_do_set_gw+0x28>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c118:	4b1c      	ldr	r3, [pc, #112]	@ (800c18c <netif_set_addr+0x90>)
 800c11a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c122:	4b1a      	ldr	r3, [pc, #104]	@ (800c18c <netif_set_addr+0x90>)
 800c124:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c12c:	4b17      	ldr	r3, [pc, #92]	@ (800c18c <netif_set_addr+0x90>)
 800c12e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <netif_set_addr+0x42>
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <netif_set_addr+0x46>
 800c13e:	2301      	movs	r3, #1
 800c140:	e000      	b.n	800c144 <netif_set_addr+0x48>
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	461a      	mov	r2, r3
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7ff ff49 	bl	800bfec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff ff8e 	bl	800c080 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff ffa8 	bl	800c0be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d106      	bne.n	800c182 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c174:	f107 0310 	add.w	r3, r7, #16
 800c178:	461a      	mov	r2, r3
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7ff ff35 	bl	800bfec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c182:	bf00      	nop
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	0801bcec 	.word	0x0801bcec

0800c190 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c198:	4a04      	ldr	r2, [pc, #16]	@ (800c1ac <netif_set_default+0x1c>)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	2000d898 	.word	0x2000d898

0800c1b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d107      	bne.n	800c1ce <netif_set_up+0x1e>
 800c1be:	4b0f      	ldr	r3, [pc, #60]	@ (800c1fc <netif_set_up+0x4c>)
 800c1c0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c1c4:	490e      	ldr	r1, [pc, #56]	@ (800c200 <netif_set_up+0x50>)
 800c1c6:	480f      	ldr	r0, [pc, #60]	@ (800c204 <netif_set_up+0x54>)
 800c1c8:	f00a fda4 	bl	8016d14 <iprintf>
 800c1cc:	e013      	b.n	800c1f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10c      	bne.n	800c1f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c1ee:	2103      	movs	r1, #3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f809 	bl	800c208 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	080194bc 	.word	0x080194bc
 800c200:	08019644 	.word	0x08019644
 800c204:	0801950c 	.word	0x0801950c

0800c208 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <netif_issue_reports+0x20>
 800c21a:	4b18      	ldr	r3, [pc, #96]	@ (800c27c <netif_issue_reports+0x74>)
 800c21c:	f240 326d 	movw	r2, #877	@ 0x36d
 800c220:	4917      	ldr	r1, [pc, #92]	@ (800c280 <netif_issue_reports+0x78>)
 800c222:	4818      	ldr	r0, [pc, #96]	@ (800c284 <netif_issue_reports+0x7c>)
 800c224:	f00a fd76 	bl	8016d14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c22e:	f003 0304 	and.w	r3, r3, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	d01e      	beq.n	800c274 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c23c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c240:	2b00      	cmp	r3, #0
 800c242:	d017      	beq.n	800c274 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d013      	beq.n	800c276 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3304      	adds	r3, #4
 800c252:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00e      	beq.n	800c276 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c25e:	f003 0308 	and.w	r3, r3, #8
 800c262:	2b00      	cmp	r3, #0
 800c264:	d007      	beq.n	800c276 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	3304      	adds	r3, #4
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f008 fd65 	bl	8014d3c <etharp_request>
 800c272:	e000      	b.n	800c276 <netif_issue_reports+0x6e>
    return;
 800c274:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	080194bc 	.word	0x080194bc
 800c280:	08019660 	.word	0x08019660
 800c284:	0801950c 	.word	0x0801950c

0800c288 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d107      	bne.n	800c2a6 <netif_set_down+0x1e>
 800c296:	4b12      	ldr	r3, [pc, #72]	@ (800c2e0 <netif_set_down+0x58>)
 800c298:	f240 329b 	movw	r2, #923	@ 0x39b
 800c29c:	4911      	ldr	r1, [pc, #68]	@ (800c2e4 <netif_set_down+0x5c>)
 800c29e:	4812      	ldr	r0, [pc, #72]	@ (800c2e8 <netif_set_down+0x60>)
 800c2a0:	f00a fd38 	bl	8016d14 <iprintf>
 800c2a4:	e019      	b.n	800c2da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d012      	beq.n	800c2da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2ba:	f023 0301 	bic.w	r3, r3, #1
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2cc:	f003 0308 	and.w	r3, r3, #8
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f008 f8ef 	bl	80144b8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	080194bc 	.word	0x080194bc
 800c2e4:	08019684 	.word	0x08019684
 800c2e8:	0801950c 	.word	0x0801950c

0800c2ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d107      	bne.n	800c30a <netif_set_link_up+0x1e>
 800c2fa:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <netif_set_link_up+0x5c>)
 800c2fc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c300:	4912      	ldr	r1, [pc, #72]	@ (800c34c <netif_set_link_up+0x60>)
 800c302:	4813      	ldr	r0, [pc, #76]	@ (800c350 <netif_set_link_up+0x64>)
 800c304:	f00a fd06 	bl	8016d14 <iprintf>
 800c308:	e01b      	b.n	800c342 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b00      	cmp	r3, #0
 800c316:	d114      	bne.n	800c342 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c31e:	f043 0304 	orr.w	r3, r3, #4
 800c322:	b2da      	uxtb	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c32a:	2103      	movs	r1, #3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7ff ff6b 	bl	800c208 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <netif_set_link_up+0x56>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	080194bc 	.word	0x080194bc
 800c34c:	080196a4 	.word	0x080196a4
 800c350:	0801950c 	.word	0x0801950c

0800c354 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d107      	bne.n	800c372 <netif_set_link_down+0x1e>
 800c362:	4b11      	ldr	r3, [pc, #68]	@ (800c3a8 <netif_set_link_down+0x54>)
 800c364:	f240 4206 	movw	r2, #1030	@ 0x406
 800c368:	4910      	ldr	r1, [pc, #64]	@ (800c3ac <netif_set_link_down+0x58>)
 800c36a:	4811      	ldr	r0, [pc, #68]	@ (800c3b0 <netif_set_link_down+0x5c>)
 800c36c:	f00a fcd2 	bl	8016d14 <iprintf>
 800c370:	e017      	b.n	800c3a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c378:	f003 0304 	and.w	r3, r3, #4
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d010      	beq.n	800c3a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c386:	f023 0304 	bic.w	r3, r3, #4
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <netif_set_link_down+0x4e>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	080194bc 	.word	0x080194bc
 800c3ac:	080196c8 	.word	0x080196c8
 800c3b0:	0801950c 	.word	0x0801950c

0800c3b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	61da      	str	r2, [r3, #28]
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c3e2:	f06f 030b 	mvn.w	r3, #11
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d013      	beq.n	800c42c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c404:	4b0d      	ldr	r3, [pc, #52]	@ (800c43c <netif_get_by_index+0x48>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	e00c      	b.n	800c426 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c412:	3301      	adds	r3, #1
 800c414:	b2db      	uxtb	r3, r3
 800c416:	79fa      	ldrb	r2, [r7, #7]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d101      	bne.n	800c420 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	e006      	b.n	800c42e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1ef      	bne.n	800c40c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	2000d894 	.word	0x2000d894

0800c440 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c446:	f00a faf3 	bl	8016a30 <sys_arch_protect>
 800c44a:	6038      	str	r0, [r7, #0]
 800c44c:	4b0d      	ldr	r3, [pc, #52]	@ (800c484 <pbuf_free_ooseq+0x44>)
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	6838      	ldr	r0, [r7, #0]
 800c454:	f00a fafa 	bl	8016a4c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c458:	4b0b      	ldr	r3, [pc, #44]	@ (800c488 <pbuf_free_ooseq+0x48>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	607b      	str	r3, [r7, #4]
 800c45e:	e00a      	b.n	800c476 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f002 fc0b 	bl	800ec84 <tcp_free_ooseq>
      return;
 800c46e:	e005      	b.n	800c47c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	607b      	str	r3, [r7, #4]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1f1      	bne.n	800c460 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	2000d89d 	.word	0x2000d89d
 800c488:	2000d8ac 	.word	0x2000d8ac

0800c48c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c494:	f7ff ffd4 	bl	800c440 <pbuf_free_ooseq>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c4a6:	f00a fac3 	bl	8016a30 <sys_arch_protect>
 800c4aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ec <pbuf_pool_is_empty+0x4c>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ec <pbuf_pool_is_empty+0x4c>)
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f00a fac7 	bl	8016a4c <sys_arch_unprotect>

  if (!queued) {
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10f      	bne.n	800c4e4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	480a      	ldr	r0, [pc, #40]	@ (800c4f0 <pbuf_pool_is_empty+0x50>)
 800c4c8:	f7fe fe90 	bl	800b1ec <tcpip_try_callback>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d008      	beq.n	800c4e4 <pbuf_pool_is_empty+0x44>
 800c4d2:	f00a faad 	bl	8016a30 <sys_arch_protect>
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	4b04      	ldr	r3, [pc, #16]	@ (800c4ec <pbuf_pool_is_empty+0x4c>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f00a fab4 	bl	8016a4c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	2000d89d 	.word	0x2000d89d
 800c4f0:	0800c48d 	.word	0x0800c48d

0800c4f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4611      	mov	r1, r2
 800c500:	461a      	mov	r2, r3
 800c502:	460b      	mov	r3, r1
 800c504:	80fb      	strh	r3, [r7, #6]
 800c506:	4613      	mov	r3, r2
 800c508:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	88fa      	ldrh	r2, [r7, #6]
 800c51a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	88ba      	ldrh	r2, [r7, #4]
 800c520:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c522:	8b3b      	ldrh	r3, [r7, #24]
 800c524:	b2da      	uxtb	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	7f3a      	ldrb	r2, [r7, #28]
 800c52e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	73da      	strb	r2, [r3, #15]
}
 800c53c:	bf00      	nop
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b08c      	sub	sp, #48	@ 0x30
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	4603      	mov	r3, r0
 800c550:	71fb      	strb	r3, [r7, #7]
 800c552:	460b      	mov	r3, r1
 800c554:	80bb      	strh	r3, [r7, #4]
 800c556:	4613      	mov	r3, r2
 800c558:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c55e:	887b      	ldrh	r3, [r7, #2]
 800c560:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c564:	d07f      	beq.n	800c666 <pbuf_alloc+0x11e>
 800c566:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c56a:	f300 80c8 	bgt.w	800c6fe <pbuf_alloc+0x1b6>
 800c56e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c572:	d010      	beq.n	800c596 <pbuf_alloc+0x4e>
 800c574:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c578:	f300 80c1 	bgt.w	800c6fe <pbuf_alloc+0x1b6>
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d002      	beq.n	800c586 <pbuf_alloc+0x3e>
 800c580:	2b41      	cmp	r3, #65	@ 0x41
 800c582:	f040 80bc 	bne.w	800c6fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c586:	887a      	ldrh	r2, [r7, #2]
 800c588:	88bb      	ldrh	r3, [r7, #4]
 800c58a:	4619      	mov	r1, r3
 800c58c:	2000      	movs	r0, #0
 800c58e:	f000 f8d1 	bl	800c734 <pbuf_alloc_reference>
 800c592:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c594:	e0bd      	b.n	800c712 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c59e:	88bb      	ldrh	r3, [r7, #4]
 800c5a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c5a2:	200c      	movs	r0, #12
 800c5a4:	f7ff fb9a 	bl	800bcdc <memp_malloc>
 800c5a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c5b0:	f7ff ff76 	bl	800c4a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c5ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5bc:	f000 faa8 	bl	800cb10 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e0a7      	b.n	800c714 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c5c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5c6:	3303      	adds	r3, #3
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	8b7a      	ldrh	r2, [r7, #26]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	bf28      	it	cs
 800c5dc:	4613      	movcs	r3, r2
 800c5de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c5e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5e2:	3310      	adds	r3, #16
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	3303      	adds	r3, #3
 800c5ea:	f023 0303 	bic.w	r3, r3, #3
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	89f9      	ldrh	r1, [r7, #14]
 800c5f2:	8b7a      	ldrh	r2, [r7, #26]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	887b      	ldrh	r3, [r7, #2]
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4601      	mov	r1, r0
 800c600:	6938      	ldr	r0, [r7, #16]
 800c602:	f7ff ff77 	bl	800c4f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f003 0303 	and.w	r3, r3, #3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d006      	beq.n	800c620 <pbuf_alloc+0xd8>
 800c612:	4b42      	ldr	r3, [pc, #264]	@ (800c71c <pbuf_alloc+0x1d4>)
 800c614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c618:	4941      	ldr	r1, [pc, #260]	@ (800c720 <pbuf_alloc+0x1d8>)
 800c61a:	4842      	ldr	r0, [pc, #264]	@ (800c724 <pbuf_alloc+0x1dc>)
 800c61c:	f00a fb7a 	bl	8016d14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c620:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c622:	3303      	adds	r3, #3
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c62c:	d106      	bne.n	800c63c <pbuf_alloc+0xf4>
 800c62e:	4b3b      	ldr	r3, [pc, #236]	@ (800c71c <pbuf_alloc+0x1d4>)
 800c630:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c634:	493c      	ldr	r1, [pc, #240]	@ (800c728 <pbuf_alloc+0x1e0>)
 800c636:	483b      	ldr	r0, [pc, #236]	@ (800c724 <pbuf_alloc+0x1dc>)
 800c638:	f00a fb6c 	bl	8016d14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d102      	bne.n	800c648 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	627b      	str	r3, [r7, #36]	@ 0x24
 800c646:	e002      	b.n	800c64e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c652:	8b7a      	ldrh	r2, [r7, #26]
 800c654:	89fb      	ldrh	r3, [r7, #14]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c65e:	8b7b      	ldrh	r3, [r7, #26]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d19e      	bne.n	800c5a2 <pbuf_alloc+0x5a>
      break;
 800c664:	e055      	b.n	800c712 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c666:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c668:	3303      	adds	r3, #3
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	f023 0303 	bic.w	r3, r3, #3
 800c670:	b29a      	uxth	r2, r3
 800c672:	88bb      	ldrh	r3, [r7, #4]
 800c674:	3303      	adds	r3, #3
 800c676:	b29b      	uxth	r3, r3
 800c678:	f023 0303 	bic.w	r3, r3, #3
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	4413      	add	r3, r2
 800c680:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c682:	8b3b      	ldrh	r3, [r7, #24]
 800c684:	3310      	adds	r3, #16
 800c686:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c688:	8b3a      	ldrh	r2, [r7, #24]
 800c68a:	88bb      	ldrh	r3, [r7, #4]
 800c68c:	3303      	adds	r3, #3
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	429a      	cmp	r2, r3
 800c694:	d306      	bcc.n	800c6a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c696:	8afa      	ldrh	r2, [r7, #22]
 800c698:	88bb      	ldrh	r3, [r7, #4]
 800c69a:	3303      	adds	r3, #3
 800c69c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d201      	bcs.n	800c6a8 <pbuf_alloc+0x160>
        return NULL;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	e035      	b.n	800c714 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c6a8:	8afb      	ldrh	r3, [r7, #22]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff f972 	bl	800b994 <mem_malloc>
 800c6b0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <pbuf_alloc+0x174>
        return NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e02b      	b.n	800c714 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c6bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6be:	3310      	adds	r3, #16
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3303      	adds	r3, #3
 800c6c6:	f023 0303 	bic.w	r3, r3, #3
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	88b9      	ldrh	r1, [r7, #4]
 800c6ce:	88ba      	ldrh	r2, [r7, #4]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9301      	str	r3, [sp, #4]
 800c6d4:	887b      	ldrh	r3, [r7, #2]
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4601      	mov	r1, r0
 800c6dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6de:	f7ff ff09 	bl	800c4f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	f003 0303 	and.w	r3, r3, #3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d010      	beq.n	800c710 <pbuf_alloc+0x1c8>
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c71c <pbuf_alloc+0x1d4>)
 800c6f0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c6f4:	490d      	ldr	r1, [pc, #52]	@ (800c72c <pbuf_alloc+0x1e4>)
 800c6f6:	480b      	ldr	r0, [pc, #44]	@ (800c724 <pbuf_alloc+0x1dc>)
 800c6f8:	f00a fb0c 	bl	8016d14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c6fc:	e008      	b.n	800c710 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c6fe:	4b07      	ldr	r3, [pc, #28]	@ (800c71c <pbuf_alloc+0x1d4>)
 800c700:	f240 1227 	movw	r2, #295	@ 0x127
 800c704:	490a      	ldr	r1, [pc, #40]	@ (800c730 <pbuf_alloc+0x1e8>)
 800c706:	4807      	ldr	r0, [pc, #28]	@ (800c724 <pbuf_alloc+0x1dc>)
 800c708:	f00a fb04 	bl	8016d14 <iprintf>
      return NULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	e001      	b.n	800c714 <pbuf_alloc+0x1cc>
      break;
 800c710:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c714:	4618      	mov	r0, r3
 800c716:	3728      	adds	r7, #40	@ 0x28
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	080196ec 	.word	0x080196ec
 800c720:	0801971c 	.word	0x0801971c
 800c724:	0801974c 	.word	0x0801974c
 800c728:	08019774 	.word	0x08019774
 800c72c:	080197a8 	.word	0x080197a8
 800c730:	080197d4 	.word	0x080197d4

0800c734 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af02      	add	r7, sp, #8
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	807b      	strh	r3, [r7, #2]
 800c740:	4613      	mov	r3, r2
 800c742:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c744:	883b      	ldrh	r3, [r7, #0]
 800c746:	2b41      	cmp	r3, #65	@ 0x41
 800c748:	d009      	beq.n	800c75e <pbuf_alloc_reference+0x2a>
 800c74a:	883b      	ldrh	r3, [r7, #0]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d006      	beq.n	800c75e <pbuf_alloc_reference+0x2a>
 800c750:	4b0f      	ldr	r3, [pc, #60]	@ (800c790 <pbuf_alloc_reference+0x5c>)
 800c752:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c756:	490f      	ldr	r1, [pc, #60]	@ (800c794 <pbuf_alloc_reference+0x60>)
 800c758:	480f      	ldr	r0, [pc, #60]	@ (800c798 <pbuf_alloc_reference+0x64>)
 800c75a:	f00a fadb 	bl	8016d14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c75e:	200b      	movs	r0, #11
 800c760:	f7ff fabc 	bl	800bcdc <memp_malloc>
 800c764:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c76c:	2300      	movs	r3, #0
 800c76e:	e00b      	b.n	800c788 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c770:	8879      	ldrh	r1, [r7, #2]
 800c772:	887a      	ldrh	r2, [r7, #2]
 800c774:	2300      	movs	r3, #0
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	883b      	ldrh	r3, [r7, #0]
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	460b      	mov	r3, r1
 800c77e:	6879      	ldr	r1, [r7, #4]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7ff feb7 	bl	800c4f4 <pbuf_init_alloced_pbuf>
  return p;
 800c786:	68fb      	ldr	r3, [r7, #12]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	080196ec 	.word	0x080196ec
 800c794:	080197f0 	.word	0x080197f0
 800c798:	0801974c 	.word	0x0801974c

0800c79c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	607b      	str	r3, [r7, #4]
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	81bb      	strh	r3, [r7, #12]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c7b4:	8a7b      	ldrh	r3, [r7, #18]
 800c7b6:	3303      	adds	r3, #3
 800c7b8:	f023 0203 	bic.w	r2, r3, #3
 800c7bc:	89bb      	ldrh	r3, [r7, #12]
 800c7be:	441a      	add	r2, r3
 800c7c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d901      	bls.n	800c7ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e018      	b.n	800c7fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d007      	beq.n	800c7e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c7d0:	8a7b      	ldrh	r3, [r7, #18]
 800c7d2:	3303      	adds	r3, #3
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
 800c7d8:	6a3a      	ldr	r2, [r7, #32]
 800c7da:	4413      	add	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]
 800c7de:	e001      	b.n	800c7e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	89b9      	ldrh	r1, [r7, #12]
 800c7e8:	89ba      	ldrh	r2, [r7, #12]
 800c7ea:	2302      	movs	r3, #2
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	897b      	ldrh	r3, [r7, #10]
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	6979      	ldr	r1, [r7, #20]
 800c7f6:	f7ff fe7d 	bl	800c4f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c7fa:	687b      	ldr	r3, [r7, #4]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <pbuf_realloc+0x20>
 800c816:	4b3a      	ldr	r3, [pc, #232]	@ (800c900 <pbuf_realloc+0xfc>)
 800c818:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c81c:	4939      	ldr	r1, [pc, #228]	@ (800c904 <pbuf_realloc+0x100>)
 800c81e:	483a      	ldr	r0, [pc, #232]	@ (800c908 <pbuf_realloc+0x104>)
 800c820:	f00a fa78 	bl	8016d14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	891b      	ldrh	r3, [r3, #8]
 800c828:	887a      	ldrh	r2, [r7, #2]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d263      	bcs.n	800c8f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	891a      	ldrh	r2, [r3, #8]
 800c832:	887b      	ldrh	r3, [r7, #2]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c838:	887b      	ldrh	r3, [r7, #2]
 800c83a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c840:	e018      	b.n	800c874 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	895b      	ldrh	r3, [r3, #10]
 800c846:	897a      	ldrh	r2, [r7, #10]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	891a      	ldrh	r2, [r3, #8]
 800c850:	893b      	ldrh	r3, [r7, #8]
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	b29a      	uxth	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <pbuf_realloc+0x70>
 800c866:	4b26      	ldr	r3, [pc, #152]	@ (800c900 <pbuf_realloc+0xfc>)
 800c868:	f240 12af 	movw	r2, #431	@ 0x1af
 800c86c:	4927      	ldr	r1, [pc, #156]	@ (800c90c <pbuf_realloc+0x108>)
 800c86e:	4826      	ldr	r0, [pc, #152]	@ (800c908 <pbuf_realloc+0x104>)
 800c870:	f00a fa50 	bl	8016d14 <iprintf>
  while (rem_len > q->len) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	895b      	ldrh	r3, [r3, #10]
 800c878:	897a      	ldrh	r2, [r7, #10]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d8e1      	bhi.n	800c842 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	7b1b      	ldrb	r3, [r3, #12]
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	2b00      	cmp	r3, #0
 800c888:	d121      	bne.n	800c8ce <pbuf_realloc+0xca>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	895b      	ldrh	r3, [r3, #10]
 800c88e:	897a      	ldrh	r2, [r7, #10]
 800c890:	429a      	cmp	r2, r3
 800c892:	d01c      	beq.n	800c8ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	7b5b      	ldrb	r3, [r3, #13]
 800c898:	f003 0302 	and.w	r3, r3, #2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d116      	bne.n	800c8ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	897b      	ldrh	r3, [r7, #10]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7fe ff64 	bl	800b780 <mem_trim>
 800c8b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d106      	bne.n	800c8ce <pbuf_realloc+0xca>
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c900 <pbuf_realloc+0xfc>)
 800c8c2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c8c6:	4912      	ldr	r1, [pc, #72]	@ (800c910 <pbuf_realloc+0x10c>)
 800c8c8:	480f      	ldr	r0, [pc, #60]	@ (800c908 <pbuf_realloc+0x104>)
 800c8ca:	f00a fa23 	bl	8016d14 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	897a      	ldrh	r2, [r7, #10]
 800c8d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	895a      	ldrh	r2, [r3, #10]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d004      	beq.n	800c8ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 f911 	bl	800cb10 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e000      	b.n	800c8f8 <pbuf_realloc+0xf4>
    return;
 800c8f6:	bf00      	nop

}
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	080196ec 	.word	0x080196ec
 800c904:	08019804 	.word	0x08019804
 800c908:	0801974c 	.word	0x0801974c
 800c90c:	0801981c 	.word	0x0801981c
 800c910:	08019834 	.word	0x08019834

0800c914 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4613      	mov	r3, r2
 800c920:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d106      	bne.n	800c936 <pbuf_add_header_impl+0x22>
 800c928:	4b2b      	ldr	r3, [pc, #172]	@ (800c9d8 <pbuf_add_header_impl+0xc4>)
 800c92a:	f240 12df 	movw	r2, #479	@ 0x1df
 800c92e:	492b      	ldr	r1, [pc, #172]	@ (800c9dc <pbuf_add_header_impl+0xc8>)
 800c930:	482b      	ldr	r0, [pc, #172]	@ (800c9e0 <pbuf_add_header_impl+0xcc>)
 800c932:	f00a f9ef 	bl	8016d14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <pbuf_add_header_impl+0x30>
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c942:	d301      	bcc.n	800c948 <pbuf_add_header_impl+0x34>
    return 1;
 800c944:	2301      	movs	r3, #1
 800c946:	e043      	b.n	800c9d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <pbuf_add_header_impl+0x3e>
    return 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	e03e      	b.n	800c9d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	8a7b      	ldrh	r3, [r7, #18]
 800c95c:	4413      	add	r3, r2
 800c95e:	b29b      	uxth	r3, r3
 800c960:	8a7a      	ldrh	r2, [r7, #18]
 800c962:	429a      	cmp	r2, r3
 800c964:	d901      	bls.n	800c96a <pbuf_add_header_impl+0x56>
    return 1;
 800c966:	2301      	movs	r3, #1
 800c968:	e032      	b.n	800c9d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	7b1b      	ldrb	r3, [r3, #12]
 800c96e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c970:	8a3b      	ldrh	r3, [r7, #16]
 800c972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00c      	beq.n	800c994 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	425b      	negs	r3, r3
 800c982:	4413      	add	r3, r2
 800c984:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3310      	adds	r3, #16
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d20d      	bcs.n	800c9ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c990:	2301      	movs	r3, #1
 800c992:	e01d      	b.n	800c9d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d006      	beq.n	800c9a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	425b      	negs	r3, r3
 800c9a2:	4413      	add	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	e001      	b.n	800c9ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e011      	b.n	800c9d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	895a      	ldrh	r2, [r3, #10]
 800c9b6:	8a7b      	ldrh	r3, [r7, #18]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	891a      	ldrh	r2, [r3, #8]
 800c9c4:	8a7b      	ldrh	r3, [r7, #18]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	811a      	strh	r2, [r3, #8]


  return 0;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	080196ec 	.word	0x080196ec
 800c9dc:	08019850 	.word	0x08019850
 800c9e0:	0801974c 	.word	0x0801974c

0800c9e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff ff8e 	bl	800c914 <pbuf_add_header_impl>
 800c9f8:	4603      	mov	r3, r0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d106      	bne.n	800ca22 <pbuf_remove_header+0x1e>
 800ca14:	4b20      	ldr	r3, [pc, #128]	@ (800ca98 <pbuf_remove_header+0x94>)
 800ca16:	f240 224b 	movw	r2, #587	@ 0x24b
 800ca1a:	4920      	ldr	r1, [pc, #128]	@ (800ca9c <pbuf_remove_header+0x98>)
 800ca1c:	4820      	ldr	r0, [pc, #128]	@ (800caa0 <pbuf_remove_header+0x9c>)
 800ca1e:	f00a f979 	bl	8016d14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <pbuf_remove_header+0x2c>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca2e:	d301      	bcc.n	800ca34 <pbuf_remove_header+0x30>
    return 1;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e02c      	b.n	800ca8e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <pbuf_remove_header+0x3a>
    return 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	e027      	b.n	800ca8e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	895b      	ldrh	r3, [r3, #10]
 800ca46:	89fa      	ldrh	r2, [r7, #14]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d908      	bls.n	800ca5e <pbuf_remove_header+0x5a>
 800ca4c:	4b12      	ldr	r3, [pc, #72]	@ (800ca98 <pbuf_remove_header+0x94>)
 800ca4e:	f240 2255 	movw	r2, #597	@ 0x255
 800ca52:	4914      	ldr	r1, [pc, #80]	@ (800caa4 <pbuf_remove_header+0xa0>)
 800ca54:	4812      	ldr	r0, [pc, #72]	@ (800caa0 <pbuf_remove_header+0x9c>)
 800ca56:	f00a f95d 	bl	8016d14 <iprintf>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e017      	b.n	800ca8e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	441a      	add	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	895a      	ldrh	r2, [r3, #10]
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	891a      	ldrh	r2, [r3, #8]
 800ca82:	89fb      	ldrh	r3, [r7, #14]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	080196ec 	.word	0x080196ec
 800ca9c:	08019850 	.word	0x08019850
 800caa0:	0801974c 	.word	0x0801974c
 800caa4:	0801985c 	.word	0x0801985c

0800caa8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
 800cab4:	4613      	mov	r3, r2
 800cab6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	da08      	bge.n	800cad2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cac4:	425b      	negs	r3, r3
 800cac6:	4619      	mov	r1, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff ff9b 	bl	800ca04 <pbuf_remove_header>
 800cace:	4603      	mov	r3, r0
 800cad0:	e007      	b.n	800cae2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cad6:	787a      	ldrb	r2, [r7, #1]
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff ff1a 	bl	800c914 <pbuf_add_header_impl>
 800cae0:	4603      	mov	r3, r0
  }
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800caf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cafa:	2201      	movs	r2, #1
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff ffd2 	bl	800caa8 <pbuf_header_impl>
 800cb04:	4603      	mov	r3, r0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10b      	bne.n	800cb36 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <pbuf_free+0x22>
 800cb24:	4b3b      	ldr	r3, [pc, #236]	@ (800cc14 <pbuf_free+0x104>)
 800cb26:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cb2a:	493b      	ldr	r1, [pc, #236]	@ (800cc18 <pbuf_free+0x108>)
 800cb2c:	483b      	ldr	r0, [pc, #236]	@ (800cc1c <pbuf_free+0x10c>)
 800cb2e:	f00a f8f1 	bl	8016d14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	e069      	b.n	800cc0a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cb3a:	e062      	b.n	800cc02 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cb3c:	f009 ff78 	bl	8016a30 <sys_arch_protect>
 800cb40:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7b9b      	ldrb	r3, [r3, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <pbuf_free+0x48>
 800cb4a:	4b32      	ldr	r3, [pc, #200]	@ (800cc14 <pbuf_free+0x104>)
 800cb4c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cb50:	4933      	ldr	r1, [pc, #204]	@ (800cc20 <pbuf_free+0x110>)
 800cb52:	4832      	ldr	r0, [pc, #200]	@ (800cc1c <pbuf_free+0x10c>)
 800cb54:	f00a f8de 	bl	8016d14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7b9b      	ldrb	r3, [r3, #14]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	739a      	strb	r2, [r3, #14]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	7b9b      	ldrb	r3, [r3, #14]
 800cb68:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cb6a:	69b8      	ldr	r0, [r7, #24]
 800cb6c:	f009 ff6e 	bl	8016a4c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d143      	bne.n	800cbfe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	7b1b      	ldrb	r3, [r3, #12]
 800cb80:	f003 030f 	and.w	r3, r3, #15
 800cb84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	7b5b      	ldrb	r3, [r3, #13]
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d011      	beq.n	800cbb6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <pbuf_free+0x9c>
 800cb9e:	4b1d      	ldr	r3, [pc, #116]	@ (800cc14 <pbuf_free+0x104>)
 800cba0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cba4:	491f      	ldr	r1, [pc, #124]	@ (800cc24 <pbuf_free+0x114>)
 800cba6:	481d      	ldr	r0, [pc, #116]	@ (800cc1c <pbuf_free+0x10c>)
 800cba8:	f00a f8b4 	bl	8016d14 <iprintf>
        pc->custom_free_function(p);
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	4798      	blx	r3
 800cbb4:	e01d      	b.n	800cbf2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d104      	bne.n	800cbc6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	200c      	movs	r0, #12
 800cbc0:	f7ff f902 	bl	800bdc8 <memp_free>
 800cbc4:	e015      	b.n	800cbf2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d104      	bne.n	800cbd6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	200b      	movs	r0, #11
 800cbd0:	f7ff f8fa 	bl	800bdc8 <memp_free>
 800cbd4:	e00d      	b.n	800cbf2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d103      	bne.n	800cbe4 <pbuf_free+0xd4>
          mem_free(p);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7fe fd3f 	bl	800b660 <mem_free>
 800cbe2:	e006      	b.n	800cbf2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800cc14 <pbuf_free+0x104>)
 800cbe6:	f240 320f 	movw	r2, #783	@ 0x30f
 800cbea:	490f      	ldr	r1, [pc, #60]	@ (800cc28 <pbuf_free+0x118>)
 800cbec:	480b      	ldr	r0, [pc, #44]	@ (800cc1c <pbuf_free+0x10c>)
 800cbee:	f00a f891 	bl	8016d14 <iprintf>
        }
      }
      count++;
 800cbf2:	7ffb      	ldrb	r3, [r7, #31]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e001      	b.n	800cc02 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d199      	bne.n	800cb3c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cc08:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3720      	adds	r7, #32
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	080196ec 	.word	0x080196ec
 800cc18:	08019850 	.word	0x08019850
 800cc1c:	0801974c 	.word	0x0801974c
 800cc20:	0801987c 	.word	0x0801987c
 800cc24:	08019894 	.word	0x08019894
 800cc28:	080198b8 	.word	0x080198b8

0800cc2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cc38:	e005      	b.n	800cc46 <pbuf_clen+0x1a>
    ++len;
 800cc3a:	89fb      	ldrh	r3, [r7, #14]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1f6      	bne.n	800cc3a <pbuf_clen+0xe>
  }
  return len;
 800cc4c:	89fb      	ldrh	r3, [r7, #14]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
	...

0800cc5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d016      	beq.n	800cc98 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cc6a:	f009 fee1 	bl	8016a30 <sys_arch_protect>
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7b9b      	ldrb	r3, [r3, #14]
 800cc74:	3301      	adds	r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	739a      	strb	r2, [r3, #14]
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f009 fee5 	bl	8016a4c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	7b9b      	ldrb	r3, [r3, #14]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <pbuf_ref+0x3c>
 800cc8a:	4b05      	ldr	r3, [pc, #20]	@ (800cca0 <pbuf_ref+0x44>)
 800cc8c:	f240 3242 	movw	r2, #834	@ 0x342
 800cc90:	4904      	ldr	r1, [pc, #16]	@ (800cca4 <pbuf_ref+0x48>)
 800cc92:	4805      	ldr	r0, [pc, #20]	@ (800cca8 <pbuf_ref+0x4c>)
 800cc94:	f00a f83e 	bl	8016d14 <iprintf>
  }
}
 800cc98:	bf00      	nop
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	080196ec 	.word	0x080196ec
 800cca4:	080198cc 	.word	0x080198cc
 800cca8:	0801974c 	.word	0x0801974c

0800ccac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <pbuf_cat+0x16>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d107      	bne.n	800ccd2 <pbuf_cat+0x26>
 800ccc2:	4b20      	ldr	r3, [pc, #128]	@ (800cd44 <pbuf_cat+0x98>)
 800ccc4:	f240 3259 	movw	r2, #857	@ 0x359
 800ccc8:	491f      	ldr	r1, [pc, #124]	@ (800cd48 <pbuf_cat+0x9c>)
 800ccca:	4820      	ldr	r0, [pc, #128]	@ (800cd4c <pbuf_cat+0xa0>)
 800cccc:	f00a f822 	bl	8016d14 <iprintf>
 800ccd0:	e034      	b.n	800cd3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60fb      	str	r3, [r7, #12]
 800ccd6:	e00a      	b.n	800ccee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	891a      	ldrh	r2, [r3, #8]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	891b      	ldrh	r3, [r3, #8]
 800cce0:	4413      	add	r3, r2
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1f0      	bne.n	800ccd8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	891a      	ldrh	r2, [r3, #8]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d006      	beq.n	800cd10 <pbuf_cat+0x64>
 800cd02:	4b10      	ldr	r3, [pc, #64]	@ (800cd44 <pbuf_cat+0x98>)
 800cd04:	f240 3262 	movw	r2, #866	@ 0x362
 800cd08:	4911      	ldr	r1, [pc, #68]	@ (800cd50 <pbuf_cat+0xa4>)
 800cd0a:	4810      	ldr	r0, [pc, #64]	@ (800cd4c <pbuf_cat+0xa0>)
 800cd0c:	f00a f802 	bl	8016d14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d006      	beq.n	800cd26 <pbuf_cat+0x7a>
 800cd18:	4b0a      	ldr	r3, [pc, #40]	@ (800cd44 <pbuf_cat+0x98>)
 800cd1a:	f240 3263 	movw	r2, #867	@ 0x363
 800cd1e:	490d      	ldr	r1, [pc, #52]	@ (800cd54 <pbuf_cat+0xa8>)
 800cd20:	480a      	ldr	r0, [pc, #40]	@ (800cd4c <pbuf_cat+0xa0>)
 800cd22:	f009 fff7 	bl	8016d14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	891a      	ldrh	r2, [r3, #8]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	891b      	ldrh	r3, [r3, #8]
 800cd2e:	4413      	add	r3, r2
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	080196ec 	.word	0x080196ec
 800cd48:	080198e0 	.word	0x080198e0
 800cd4c:	0801974c 	.word	0x0801974c
 800cd50:	08019918 	.word	0x08019918
 800cd54:	08019948 	.word	0x08019948

0800cd58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ffa1 	bl	800ccac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cd6a:	6838      	ldr	r0, [r7, #0]
 800cd6c:	f7ff ff76 	bl	800cc5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	2300      	movs	r3, #0
 800cd88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d008      	beq.n	800cda2 <pbuf_copy+0x2a>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d005      	beq.n	800cda2 <pbuf_copy+0x2a>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	891a      	ldrh	r2, [r3, #8]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	891b      	ldrh	r3, [r3, #8]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d209      	bcs.n	800cdb6 <pbuf_copy+0x3e>
 800cda2:	4b57      	ldr	r3, [pc, #348]	@ (800cf00 <pbuf_copy+0x188>)
 800cda4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800cda8:	4956      	ldr	r1, [pc, #344]	@ (800cf04 <pbuf_copy+0x18c>)
 800cdaa:	4857      	ldr	r0, [pc, #348]	@ (800cf08 <pbuf_copy+0x190>)
 800cdac:	f009 ffb2 	bl	8016d14 <iprintf>
 800cdb0:	f06f 030f 	mvn.w	r3, #15
 800cdb4:	e09f      	b.n	800cef6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	895b      	ldrh	r3, [r3, #10]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	1ad2      	subs	r2, r2, r3
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	895b      	ldrh	r3, [r3, #10]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1acb      	subs	r3, r1, r3
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d306      	bcc.n	800cddc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	895b      	ldrh	r3, [r3, #10]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e005      	b.n	800cde8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	461a      	mov	r2, r3
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	18d0      	adds	r0, r2, r3
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	f00a f86d 	bl	8016eda <memcpy>
    offset_to += len;
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4413      	add	r3, r2
 800ce06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	895b      	ldrh	r3, [r3, #10]
 800ce14:	461a      	mov	r2, r3
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d906      	bls.n	800ce2a <pbuf_copy+0xb2>
 800ce1c:	4b38      	ldr	r3, [pc, #224]	@ (800cf00 <pbuf_copy+0x188>)
 800ce1e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ce22:	493a      	ldr	r1, [pc, #232]	@ (800cf0c <pbuf_copy+0x194>)
 800ce24:	4838      	ldr	r0, [pc, #224]	@ (800cf08 <pbuf_copy+0x190>)
 800ce26:	f009 ff75 	bl	8016d14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	895b      	ldrh	r3, [r3, #10]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d906      	bls.n	800ce44 <pbuf_copy+0xcc>
 800ce36:	4b32      	ldr	r3, [pc, #200]	@ (800cf00 <pbuf_copy+0x188>)
 800ce38:	f240 32da 	movw	r2, #986	@ 0x3da
 800ce3c:	4934      	ldr	r1, [pc, #208]	@ (800cf10 <pbuf_copy+0x198>)
 800ce3e:	4832      	ldr	r0, [pc, #200]	@ (800cf08 <pbuf_copy+0x190>)
 800ce40:	f009 ff68 	bl	8016d14 <iprintf>
    if (offset_from >= p_from->len) {
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	895b      	ldrh	r3, [r3, #10]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d304      	bcc.n	800ce5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	895b      	ldrh	r3, [r3, #10]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d114      	bne.n	800ce90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10c      	bne.n	800ce90 <pbuf_copy+0x118>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d009      	beq.n	800ce90 <pbuf_copy+0x118>
 800ce7c:	4b20      	ldr	r3, [pc, #128]	@ (800cf00 <pbuf_copy+0x188>)
 800ce7e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800ce82:	4924      	ldr	r1, [pc, #144]	@ (800cf14 <pbuf_copy+0x19c>)
 800ce84:	4820      	ldr	r0, [pc, #128]	@ (800cf08 <pbuf_copy+0x190>)
 800ce86:	f009 ff45 	bl	8016d14 <iprintf>
 800ce8a:	f06f 030f 	mvn.w	r3, #15
 800ce8e:	e032      	b.n	800cef6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d013      	beq.n	800cebe <pbuf_copy+0x146>
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	895a      	ldrh	r2, [r3, #10]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	891b      	ldrh	r3, [r3, #8]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d10d      	bne.n	800cebe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d009      	beq.n	800cebe <pbuf_copy+0x146>
 800ceaa:	4b15      	ldr	r3, [pc, #84]	@ (800cf00 <pbuf_copy+0x188>)
 800ceac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800ceb0:	4919      	ldr	r1, [pc, #100]	@ (800cf18 <pbuf_copy+0x1a0>)
 800ceb2:	4815      	ldr	r0, [pc, #84]	@ (800cf08 <pbuf_copy+0x190>)
 800ceb4:	f009 ff2e 	bl	8016d14 <iprintf>
 800ceb8:	f06f 0305 	mvn.w	r3, #5
 800cebc:	e01b      	b.n	800cef6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d013      	beq.n	800ceec <pbuf_copy+0x174>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	895a      	ldrh	r2, [r3, #10]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	891b      	ldrh	r3, [r3, #8]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10d      	bne.n	800ceec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <pbuf_copy+0x174>
 800ced8:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <pbuf_copy+0x188>)
 800ceda:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cede:	490e      	ldr	r1, [pc, #56]	@ (800cf18 <pbuf_copy+0x1a0>)
 800cee0:	4809      	ldr	r0, [pc, #36]	@ (800cf08 <pbuf_copy+0x190>)
 800cee2:	f009 ff17 	bl	8016d14 <iprintf>
 800cee6:	f06f 0305 	mvn.w	r3, #5
 800ceea:	e004      	b.n	800cef6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f47f af61 	bne.w	800cdb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	080196ec 	.word	0x080196ec
 800cf04:	08019994 	.word	0x08019994
 800cf08:	0801974c 	.word	0x0801974c
 800cf0c:	080199c4 	.word	0x080199c4
 800cf10:	080199dc 	.word	0x080199dc
 800cf14:	080199f8 	.word	0x080199f8
 800cf18:	08019a08 	.word	0x08019a08

0800cf1c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4611      	mov	r1, r2
 800cf28:	461a      	mov	r2, r3
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	80fb      	strh	r3, [r7, #6]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d108      	bne.n	800cf52 <pbuf_copy_partial+0x36>
 800cf40:	4b2b      	ldr	r3, [pc, #172]	@ (800cff0 <pbuf_copy_partial+0xd4>)
 800cf42:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cf46:	492b      	ldr	r1, [pc, #172]	@ (800cff4 <pbuf_copy_partial+0xd8>)
 800cf48:	482b      	ldr	r0, [pc, #172]	@ (800cff8 <pbuf_copy_partial+0xdc>)
 800cf4a:	f009 fee3 	bl	8016d14 <iprintf>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e04a      	b.n	800cfe8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d108      	bne.n	800cf6a <pbuf_copy_partial+0x4e>
 800cf58:	4b25      	ldr	r3, [pc, #148]	@ (800cff0 <pbuf_copy_partial+0xd4>)
 800cf5a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cf5e:	4927      	ldr	r1, [pc, #156]	@ (800cffc <pbuf_copy_partial+0xe0>)
 800cf60:	4825      	ldr	r0, [pc, #148]	@ (800cff8 <pbuf_copy_partial+0xdc>)
 800cf62:	f009 fed7 	bl	8016d14 <iprintf>
 800cf66:	2300      	movs	r3, #0
 800cf68:	e03e      	b.n	800cfe8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e034      	b.n	800cfda <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cf70:	88bb      	ldrh	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <pbuf_copy_partial+0x70>
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	895b      	ldrh	r3, [r3, #10]
 800cf7a:	88ba      	ldrh	r2, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d305      	bcc.n	800cf8c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	895b      	ldrh	r3, [r3, #10]
 800cf84:	88ba      	ldrh	r2, [r7, #4]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	80bb      	strh	r3, [r7, #4]
 800cf8a:	e023      	b.n	800cfd4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	895a      	ldrh	r2, [r3, #10]
 800cf90:	88bb      	ldrh	r3, [r7, #4]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cf96:	8b3a      	ldrh	r2, [r7, #24]
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d901      	bls.n	800cfa2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cf9e:	88fb      	ldrh	r3, [r7, #6]
 800cfa0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cfa2:	8b7b      	ldrh	r3, [r7, #26]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	18d0      	adds	r0, r2, r3
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	88bb      	ldrh	r3, [r7, #4]
 800cfae:	4413      	add	r3, r2
 800cfb0:	8b3a      	ldrh	r2, [r7, #24]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f009 ff91 	bl	8016eda <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cfb8:	8afa      	ldrh	r2, [r7, #22]
 800cfba:	8b3b      	ldrh	r3, [r7, #24]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cfc0:	8b7a      	ldrh	r2, [r7, #26]
 800cfc2:	8b3b      	ldrh	r3, [r7, #24]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cfc8:	88fa      	ldrh	r2, [r7, #6]
 800cfca:	8b3b      	ldrh	r3, [r7, #24]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	61fb      	str	r3, [r7, #28]
 800cfda:	88fb      	ldrh	r3, [r7, #6]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <pbuf_copy_partial+0xca>
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1c4      	bne.n	800cf70 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cfe6:	8afb      	ldrh	r3, [r7, #22]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3720      	adds	r7, #32
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	080196ec 	.word	0x080196ec
 800cff4:	08019a34 	.word	0x08019a34
 800cff8:	0801974c 	.word	0x0801974c
 800cffc:	08019a54 	.word	0x08019a54

0800d000 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	603a      	str	r2, [r7, #0]
 800d00a:	71fb      	strb	r3, [r7, #7]
 800d00c:	460b      	mov	r3, r1
 800d00e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	8919      	ldrh	r1, [r3, #8]
 800d014:	88ba      	ldrh	r2, [r7, #4]
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff fa95 	bl	800c548 <pbuf_alloc>
 800d01e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <pbuf_clone+0x2a>
    return NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	e011      	b.n	800d04e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff fea3 	bl	800cd78 <pbuf_copy>
 800d032:	4603      	mov	r3, r0
 800d034:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d036:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d006      	beq.n	800d04c <pbuf_clone+0x4c>
 800d03e:	4b06      	ldr	r3, [pc, #24]	@ (800d058 <pbuf_clone+0x58>)
 800d040:	f240 5224 	movw	r2, #1316	@ 0x524
 800d044:	4905      	ldr	r1, [pc, #20]	@ (800d05c <pbuf_clone+0x5c>)
 800d046:	4806      	ldr	r0, [pc, #24]	@ (800d060 <pbuf_clone+0x60>)
 800d048:	f009 fe64 	bl	8016d14 <iprintf>
  return q;
 800d04c:	68fb      	ldr	r3, [r7, #12]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	080196ec 	.word	0x080196ec
 800d05c:	08019b60 	.word	0x08019b60
 800d060:	0801974c 	.word	0x0801974c

0800d064 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d068:	f009 fd54 	bl	8016b14 <rand>
 800d06c:	4603      	mov	r3, r0
 800d06e:	b29b      	uxth	r3, r3
 800d070:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d074:	b29b      	uxth	r3, r3
 800d076:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	4b01      	ldr	r3, [pc, #4]	@ (800d084 <tcp_init+0x20>)
 800d07e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d080:	bf00      	nop
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20000024 	.word	0x20000024

0800d088 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7d1b      	ldrb	r3, [r3, #20]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d105      	bne.n	800d0a4 <tcp_free+0x1c>
 800d098:	4b06      	ldr	r3, [pc, #24]	@ (800d0b4 <tcp_free+0x2c>)
 800d09a:	22d4      	movs	r2, #212	@ 0xd4
 800d09c:	4906      	ldr	r1, [pc, #24]	@ (800d0b8 <tcp_free+0x30>)
 800d09e:	4807      	ldr	r0, [pc, #28]	@ (800d0bc <tcp_free+0x34>)
 800d0a0:	f009 fe38 	bl	8016d14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	f7fe fe8e 	bl	800bdc8 <memp_free>
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	08019bec 	.word	0x08019bec
 800d0b8:	08019c1c 	.word	0x08019c1c
 800d0bc:	08019c30 	.word	0x08019c30

0800d0c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	7d1b      	ldrb	r3, [r3, #20]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d105      	bne.n	800d0dc <tcp_free_listen+0x1c>
 800d0d0:	4b06      	ldr	r3, [pc, #24]	@ (800d0ec <tcp_free_listen+0x2c>)
 800d0d2:	22df      	movs	r2, #223	@ 0xdf
 800d0d4:	4906      	ldr	r1, [pc, #24]	@ (800d0f0 <tcp_free_listen+0x30>)
 800d0d6:	4807      	ldr	r0, [pc, #28]	@ (800d0f4 <tcp_free_listen+0x34>)
 800d0d8:	f009 fe1c 	bl	8016d14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d0dc:	6879      	ldr	r1, [r7, #4]
 800d0de:	2002      	movs	r0, #2
 800d0e0:	f7fe fe72 	bl	800bdc8 <memp_free>
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	08019bec 	.word	0x08019bec
 800d0f0:	08019c58 	.word	0x08019c58
 800d0f4:	08019c30 	.word	0x08019c30

0800d0f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d0fc:	f001 f85e 	bl	800e1bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d100:	4b07      	ldr	r3, [pc, #28]	@ (800d120 <tcp_tmr+0x28>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	4b05      	ldr	r3, [pc, #20]	@ (800d120 <tcp_tmr+0x28>)
 800d10a:	701a      	strb	r2, [r3, #0]
 800d10c:	4b04      	ldr	r3, [pc, #16]	@ (800d120 <tcp_tmr+0x28>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d118:	f000 fd0e 	bl	800db38 <tcp_slowtmr>
  }
}
 800d11c:	bf00      	nop
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	2000d8b5 	.word	0x2000d8b5

0800d124 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <tcp_remove_listener+0x1c>
 800d134:	4b0d      	ldr	r3, [pc, #52]	@ (800d16c <tcp_remove_listener+0x48>)
 800d136:	22ff      	movs	r2, #255	@ 0xff
 800d138:	490d      	ldr	r1, [pc, #52]	@ (800d170 <tcp_remove_listener+0x4c>)
 800d13a:	480e      	ldr	r0, [pc, #56]	@ (800d174 <tcp_remove_listener+0x50>)
 800d13c:	f009 fdea 	bl	8016d14 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	e00a      	b.n	800d15c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d102      	bne.n	800d156 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f1      	bne.n	800d146 <tcp_remove_listener+0x22>
    }
  }
}
 800d162:	bf00      	nop
 800d164:	bf00      	nop
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	08019bec 	.word	0x08019bec
 800d170:	08019c74 	.word	0x08019c74
 800d174:	08019c30 	.word	0x08019c30

0800d178 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <tcp_listen_closed+0x1c>
 800d186:	4b14      	ldr	r3, [pc, #80]	@ (800d1d8 <tcp_listen_closed+0x60>)
 800d188:	f240 1211 	movw	r2, #273	@ 0x111
 800d18c:	4913      	ldr	r1, [pc, #76]	@ (800d1dc <tcp_listen_closed+0x64>)
 800d18e:	4814      	ldr	r0, [pc, #80]	@ (800d1e0 <tcp_listen_closed+0x68>)
 800d190:	f009 fdc0 	bl	8016d14 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7d1b      	ldrb	r3, [r3, #20]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d006      	beq.n	800d1aa <tcp_listen_closed+0x32>
 800d19c:	4b0e      	ldr	r3, [pc, #56]	@ (800d1d8 <tcp_listen_closed+0x60>)
 800d19e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d1a2:	4910      	ldr	r1, [pc, #64]	@ (800d1e4 <tcp_listen_closed+0x6c>)
 800d1a4:	480e      	ldr	r0, [pc, #56]	@ (800d1e0 <tcp_listen_closed+0x68>)
 800d1a6:	f009 fdb5 	bl	8016d14 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e00b      	b.n	800d1c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d1b0:	4a0d      	ldr	r2, [pc, #52]	@ (800d1e8 <tcp_listen_closed+0x70>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff ffb1 	bl	800d124 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d9f0      	bls.n	800d1b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d1ce:	bf00      	nop
 800d1d0:	bf00      	nop
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	08019bec 	.word	0x08019bec
 800d1dc:	08019c9c 	.word	0x08019c9c
 800d1e0:	08019c30 	.word	0x08019c30
 800d1e4:	08019ca8 	.word	0x08019ca8
 800d1e8:	0801bcc4 	.word	0x0801bcc4

0800d1ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d1ec:	b5b0      	push	{r4, r5, r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af04      	add	r7, sp, #16
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <tcp_close_shutdown+0x20>
 800d1fe:	4b63      	ldr	r3, [pc, #396]	@ (800d38c <tcp_close_shutdown+0x1a0>)
 800d200:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d204:	4962      	ldr	r1, [pc, #392]	@ (800d390 <tcp_close_shutdown+0x1a4>)
 800d206:	4863      	ldr	r0, [pc, #396]	@ (800d394 <tcp_close_shutdown+0x1a8>)
 800d208:	f009 fd84 	bl	8016d14 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d20c:	78fb      	ldrb	r3, [r7, #3]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d066      	beq.n	800d2e0 <tcp_close_shutdown+0xf4>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7d1b      	ldrb	r3, [r3, #20]
 800d216:	2b04      	cmp	r3, #4
 800d218:	d003      	beq.n	800d222 <tcp_close_shutdown+0x36>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	7d1b      	ldrb	r3, [r3, #20]
 800d21e:	2b07      	cmp	r3, #7
 800d220:	d15e      	bne.n	800d2e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d226:	2b00      	cmp	r3, #0
 800d228:	d104      	bne.n	800d234 <tcp_close_shutdown+0x48>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d22e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d232:	d055      	beq.n	800d2e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	8b5b      	ldrh	r3, [r3, #26]
 800d238:	f003 0310 	and.w	r3, r3, #16
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <tcp_close_shutdown+0x62>
 800d240:	4b52      	ldr	r3, [pc, #328]	@ (800d38c <tcp_close_shutdown+0x1a0>)
 800d242:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d246:	4954      	ldr	r1, [pc, #336]	@ (800d398 <tcp_close_shutdown+0x1ac>)
 800d248:	4852      	ldr	r0, [pc, #328]	@ (800d394 <tcp_close_shutdown+0x1a8>)
 800d24a:	f009 fd63 	bl	8016d14 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d256:	687d      	ldr	r5, [r7, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3304      	adds	r3, #4
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	8ad2      	ldrh	r2, [r2, #22]
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	8b09      	ldrh	r1, [r1, #24]
 800d264:	9102      	str	r1, [sp, #8]
 800d266:	9201      	str	r2, [sp, #4]
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	462b      	mov	r3, r5
 800d26c:	4622      	mov	r2, r4
 800d26e:	4601      	mov	r1, r0
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f005 fd6d 	bl	8012d50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fb50 	bl	800e91c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d27c:	4b47      	ldr	r3, [pc, #284]	@ (800d39c <tcp_close_shutdown+0x1b0>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d105      	bne.n	800d292 <tcp_close_shutdown+0xa6>
 800d286:	4b45      	ldr	r3, [pc, #276]	@ (800d39c <tcp_close_shutdown+0x1b0>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	4a43      	ldr	r2, [pc, #268]	@ (800d39c <tcp_close_shutdown+0x1b0>)
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	e013      	b.n	800d2ba <tcp_close_shutdown+0xce>
 800d292:	4b42      	ldr	r3, [pc, #264]	@ (800d39c <tcp_close_shutdown+0x1b0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	e00c      	b.n	800d2b4 <tcp_close_shutdown+0xc8>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d104      	bne.n	800d2ae <tcp_close_shutdown+0xc2>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	60da      	str	r2, [r3, #12]
 800d2ac:	e005      	b.n	800d2ba <tcp_close_shutdown+0xce>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1ef      	bne.n	800d29a <tcp_close_shutdown+0xae>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	60da      	str	r2, [r3, #12]
 800d2c0:	4b37      	ldr	r3, [pc, #220]	@ (800d3a0 <tcp_close_shutdown+0x1b4>)
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d2c6:	4b37      	ldr	r3, [pc, #220]	@ (800d3a4 <tcp_close_shutdown+0x1b8>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d102      	bne.n	800d2d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d2d0:	f003 ffe4 	bl	801129c <tcp_trigger_input_pcb_close>
 800d2d4:	e002      	b.n	800d2dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7ff fed6 	bl	800d088 <tcp_free>
      }
      return ERR_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e050      	b.n	800d382 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7d1b      	ldrb	r3, [r3, #20]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d03b      	beq.n	800d360 <tcp_close_shutdown+0x174>
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	dc44      	bgt.n	800d376 <tcp_close_shutdown+0x18a>
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <tcp_close_shutdown+0x10a>
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d02a      	beq.n	800d34a <tcp_close_shutdown+0x15e>
 800d2f4:	e03f      	b.n	800d376 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8adb      	ldrh	r3, [r3, #22]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d021      	beq.n	800d342 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d3a8 <tcp_close_shutdown+0x1bc>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	d105      	bne.n	800d314 <tcp_close_shutdown+0x128>
 800d308:	4b27      	ldr	r3, [pc, #156]	@ (800d3a8 <tcp_close_shutdown+0x1bc>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	4a26      	ldr	r2, [pc, #152]	@ (800d3a8 <tcp_close_shutdown+0x1bc>)
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	e013      	b.n	800d33c <tcp_close_shutdown+0x150>
 800d314:	4b24      	ldr	r3, [pc, #144]	@ (800d3a8 <tcp_close_shutdown+0x1bc>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60bb      	str	r3, [r7, #8]
 800d31a:	e00c      	b.n	800d336 <tcp_close_shutdown+0x14a>
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d104      	bne.n	800d330 <tcp_close_shutdown+0x144>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	e005      	b.n	800d33c <tcp_close_shutdown+0x150>
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	60bb      	str	r3, [r7, #8]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1ef      	bne.n	800d31c <tcp_close_shutdown+0x130>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7ff fea0 	bl	800d088 <tcp_free>
      break;
 800d348:	e01a      	b.n	800d380 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f7ff ff14 	bl	800d178 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	4816      	ldr	r0, [pc, #88]	@ (800d3ac <tcp_close_shutdown+0x1c0>)
 800d354:	f001 fb32 	bl	800e9bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7ff feb1 	bl	800d0c0 <tcp_free_listen>
      break;
 800d35e:	e00f      	b.n	800d380 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	480e      	ldr	r0, [pc, #56]	@ (800d39c <tcp_close_shutdown+0x1b0>)
 800d364:	f001 fb2a 	bl	800e9bc <tcp_pcb_remove>
 800d368:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a0 <tcp_close_shutdown+0x1b4>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff fe8a 	bl	800d088 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d374:	e004      	b.n	800d380 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f81a 	bl	800d3b0 <tcp_close_shutdown_fin>
 800d37c:	4603      	mov	r3, r0
 800d37e:	e000      	b.n	800d382 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bdb0      	pop	{r4, r5, r7, pc}
 800d38a:	bf00      	nop
 800d38c:	08019bec 	.word	0x08019bec
 800d390:	08019cc0 	.word	0x08019cc0
 800d394:	08019c30 	.word	0x08019c30
 800d398:	08019ce0 	.word	0x08019ce0
 800d39c:	2000d8ac 	.word	0x2000d8ac
 800d3a0:	2000d8b4 	.word	0x2000d8b4
 800d3a4:	2000d8ec 	.word	0x2000d8ec
 800d3a8:	2000d8a4 	.word	0x2000d8a4
 800d3ac:	2000d8a8 	.word	0x2000d8a8

0800d3b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <tcp_close_shutdown_fin+0x1c>
 800d3be:	4b2e      	ldr	r3, [pc, #184]	@ (800d478 <tcp_close_shutdown_fin+0xc8>)
 800d3c0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d3c4:	492d      	ldr	r1, [pc, #180]	@ (800d47c <tcp_close_shutdown_fin+0xcc>)
 800d3c6:	482e      	ldr	r0, [pc, #184]	@ (800d480 <tcp_close_shutdown_fin+0xd0>)
 800d3c8:	f009 fca4 	bl	8016d14 <iprintf>

  switch (pcb->state) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	2b07      	cmp	r3, #7
 800d3d2:	d020      	beq.n	800d416 <tcp_close_shutdown_fin+0x66>
 800d3d4:	2b07      	cmp	r3, #7
 800d3d6:	dc2b      	bgt.n	800d430 <tcp_close_shutdown_fin+0x80>
 800d3d8:	2b03      	cmp	r3, #3
 800d3da:	d002      	beq.n	800d3e2 <tcp_close_shutdown_fin+0x32>
 800d3dc:	2b04      	cmp	r3, #4
 800d3de:	d00d      	beq.n	800d3fc <tcp_close_shutdown_fin+0x4c>
 800d3e0:	e026      	b.n	800d430 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f004 fdc2 	bl	8011f6c <tcp_send_fin>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d11f      	bne.n	800d434 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2205      	movs	r2, #5
 800d3f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d3fa:	e01b      	b.n	800d434 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f004 fdb5 	bl	8011f6c <tcp_send_fin>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d114      	bne.n	800d438 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2205      	movs	r2, #5
 800d412:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d414:	e010      	b.n	800d438 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f004 fda8 	bl	8011f6c <tcp_send_fin>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d109      	bne.n	800d43c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2209      	movs	r2, #9
 800d42c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d42e:	e005      	b.n	800d43c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	e01c      	b.n	800d46e <tcp_close_shutdown_fin+0xbe>
      break;
 800d434:	bf00      	nop
 800d436:	e002      	b.n	800d43e <tcp_close_shutdown_fin+0x8e>
      break;
 800d438:	bf00      	nop
 800d43a:	e000      	b.n	800d43e <tcp_close_shutdown_fin+0x8e>
      break;
 800d43c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d103      	bne.n	800d44e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f004 fece 	bl	80121e8 <tcp_output>
 800d44c:	e00d      	b.n	800d46a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d456:	d108      	bne.n	800d46a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	8b5b      	ldrh	r3, [r3, #26]
 800d45c:	f043 0308 	orr.w	r3, r3, #8
 800d460:	b29a      	uxth	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	e001      	b.n	800d46e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	08019bec 	.word	0x08019bec
 800d47c:	08019c9c 	.word	0x08019c9c
 800d480:	08019c30 	.word	0x08019c30

0800d484 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <tcp_close+0x22>
 800d492:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <tcp_close+0x4c>)
 800d494:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d498:	490e      	ldr	r1, [pc, #56]	@ (800d4d4 <tcp_close+0x50>)
 800d49a:	480f      	ldr	r0, [pc, #60]	@ (800d4d8 <tcp_close+0x54>)
 800d49c:	f009 fc3a 	bl	8016d14 <iprintf>
 800d4a0:	f06f 030f 	mvn.w	r3, #15
 800d4a4:	e00f      	b.n	800d4c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	7d1b      	ldrb	r3, [r3, #20]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d006      	beq.n	800d4bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	8b5b      	ldrh	r3, [r3, #26]
 800d4b2:	f043 0310 	orr.w	r3, r3, #16
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d4bc:	2101      	movs	r1, #1
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff fe94 	bl	800d1ec <tcp_close_shutdown>
 800d4c4:	4603      	mov	r3, r0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08019bec 	.word	0x08019bec
 800d4d4:	08019cfc 	.word	0x08019cfc
 800d4d8:	08019c30 	.word	0x08019c30

0800d4dc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d109      	bne.n	800d502 <tcp_shutdown+0x26>
 800d4ee:	4b26      	ldr	r3, [pc, #152]	@ (800d588 <tcp_shutdown+0xac>)
 800d4f0:	f240 2207 	movw	r2, #519	@ 0x207
 800d4f4:	4925      	ldr	r1, [pc, #148]	@ (800d58c <tcp_shutdown+0xb0>)
 800d4f6:	4826      	ldr	r0, [pc, #152]	@ (800d590 <tcp_shutdown+0xb4>)
 800d4f8:	f009 fc0c 	bl	8016d14 <iprintf>
 800d4fc:	f06f 030f 	mvn.w	r3, #15
 800d500:	e03d      	b.n	800d57e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d102      	bne.n	800d510 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d50a:	f06f 030a 	mvn.w	r3, #10
 800d50e:	e036      	b.n	800d57e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d01b      	beq.n	800d54e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	8b5b      	ldrh	r3, [r3, #26]
 800d51a:	f043 0310 	orr.w	r3, r3, #16
 800d51e:	b29a      	uxth	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d52a:	2101      	movs	r1, #1
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f7ff fe5d 	bl	800d1ec <tcp_close_shutdown>
 800d532:	4603      	mov	r3, r0
 800d534:	e023      	b.n	800d57e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff fae4 	bl	800cb10 <pbuf_free>
      pcb->refused_data = NULL;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d013      	beq.n	800d57c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	7d1b      	ldrb	r3, [r3, #20]
 800d558:	2b04      	cmp	r3, #4
 800d55a:	dc02      	bgt.n	800d562 <tcp_shutdown+0x86>
 800d55c:	2b03      	cmp	r3, #3
 800d55e:	da02      	bge.n	800d566 <tcp_shutdown+0x8a>
 800d560:	e009      	b.n	800d576 <tcp_shutdown+0x9a>
 800d562:	2b07      	cmp	r3, #7
 800d564:	d107      	bne.n	800d576 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	4619      	mov	r1, r3
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7ff fe3d 	bl	800d1ec <tcp_close_shutdown>
 800d572:	4603      	mov	r3, r0
 800d574:	e003      	b.n	800d57e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d576:	f06f 030a 	mvn.w	r3, #10
 800d57a:	e000      	b.n	800d57e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	08019bec 	.word	0x08019bec
 800d58c:	08019d14 	.word	0x08019d14
 800d590:	08019c30 	.word	0x08019c30

0800d594 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08e      	sub	sp, #56	@ 0x38
 800d598:	af04      	add	r7, sp, #16
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d107      	bne.n	800d5b4 <tcp_abandon+0x20>
 800d5a4:	4b52      	ldr	r3, [pc, #328]	@ (800d6f0 <tcp_abandon+0x15c>)
 800d5a6:	f240 223d 	movw	r2, #573	@ 0x23d
 800d5aa:	4952      	ldr	r1, [pc, #328]	@ (800d6f4 <tcp_abandon+0x160>)
 800d5ac:	4852      	ldr	r0, [pc, #328]	@ (800d6f8 <tcp_abandon+0x164>)
 800d5ae:	f009 fbb1 	bl	8016d14 <iprintf>
 800d5b2:	e099      	b.n	800d6e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7d1b      	ldrb	r3, [r3, #20]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d106      	bne.n	800d5ca <tcp_abandon+0x36>
 800d5bc:	4b4c      	ldr	r3, [pc, #304]	@ (800d6f0 <tcp_abandon+0x15c>)
 800d5be:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d5c2:	494e      	ldr	r1, [pc, #312]	@ (800d6fc <tcp_abandon+0x168>)
 800d5c4:	484c      	ldr	r0, [pc, #304]	@ (800d6f8 <tcp_abandon+0x164>)
 800d5c6:	f009 fba5 	bl	8016d14 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7d1b      	ldrb	r3, [r3, #20]
 800d5ce:	2b0a      	cmp	r3, #10
 800d5d0:	d107      	bne.n	800d5e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	484a      	ldr	r0, [pc, #296]	@ (800d700 <tcp_abandon+0x16c>)
 800d5d6:	f001 f9f1 	bl	800e9bc <tcp_pcb_remove>
    tcp_free(pcb);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff fd54 	bl	800d088 <tcp_free>
 800d5e0:	e082      	b.n	800d6e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7d1b      	ldrb	r3, [r3, #20]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d126      	bne.n	800d65a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	8adb      	ldrh	r3, [r3, #22]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02e      	beq.n	800d672 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d614:	4b3b      	ldr	r3, [pc, #236]	@ (800d704 <tcp_abandon+0x170>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d105      	bne.n	800d62a <tcp_abandon+0x96>
 800d61e:	4b39      	ldr	r3, [pc, #228]	@ (800d704 <tcp_abandon+0x170>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	4a37      	ldr	r2, [pc, #220]	@ (800d704 <tcp_abandon+0x170>)
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	e013      	b.n	800d652 <tcp_abandon+0xbe>
 800d62a:	4b36      	ldr	r3, [pc, #216]	@ (800d704 <tcp_abandon+0x170>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	61fb      	str	r3, [r7, #28]
 800d630:	e00c      	b.n	800d64c <tcp_abandon+0xb8>
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d104      	bne.n	800d646 <tcp_abandon+0xb2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	60da      	str	r2, [r3, #12]
 800d644:	e005      	b.n	800d652 <tcp_abandon+0xbe>
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	61fb      	str	r3, [r7, #28]
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1ef      	bne.n	800d632 <tcp_abandon+0x9e>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	60da      	str	r2, [r3, #12]
 800d658:	e00b      	b.n	800d672 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	8adb      	ldrh	r3, [r3, #22]
 800d662:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	4828      	ldr	r0, [pc, #160]	@ (800d708 <tcp_abandon+0x174>)
 800d668:	f001 f9a8 	bl	800e9bc <tcp_pcb_remove>
 800d66c:	4b27      	ldr	r3, [pc, #156]	@ (800d70c <tcp_abandon+0x178>)
 800d66e:	2201      	movs	r2, #1
 800d670:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 fe7c 	bl	800e37c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d004      	beq.n	800d696 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d690:	4618      	mov	r0, r3
 800d692:	f000 fe73 	bl	800e37c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d004      	beq.n	800d6a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 fe6a 	bl	800e37c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00e      	beq.n	800d6cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d6ae:	6879      	ldr	r1, [r7, #4]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	8b12      	ldrh	r2, [r2, #24]
 800d6b8:	9202      	str	r2, [sp, #8]
 800d6ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d6bc:	9201      	str	r2, [sp, #4]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	69b9      	ldr	r1, [r7, #24]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f005 fb42 	bl	8012d50 <tcp_rst>
    }
    last_state = pcb->state;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	7d1b      	ldrb	r3, [r3, #20]
 800d6d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fcd8 	bl	800d088 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d004      	beq.n	800d6e8 <tcp_abandon+0x154>
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	f06f 010c 	mvn.w	r1, #12
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	4798      	blx	r3
  }
}
 800d6e8:	3728      	adds	r7, #40	@ 0x28
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	08019bec 	.word	0x08019bec
 800d6f4:	08019d30 	.word	0x08019d30
 800d6f8:	08019c30 	.word	0x08019c30
 800d6fc:	08019d4c 	.word	0x08019d4c
 800d700:	2000d8b0 	.word	0x2000d8b0
 800d704:	2000d8a4 	.word	0x2000d8a4
 800d708:	2000d8ac 	.word	0x2000d8ac
 800d70c:	2000d8b4 	.word	0x2000d8b4

0800d710 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d718:	2101      	movs	r1, #1
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff ff3a 	bl	800d594 <tcp_abandon>
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <tcp_update_rcv_ann_wnd+0x1c>
 800d736:	4b25      	ldr	r3, [pc, #148]	@ (800d7cc <tcp_update_rcv_ann_wnd+0xa4>)
 800d738:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d73c:	4924      	ldr	r1, [pc, #144]	@ (800d7d0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d73e:	4825      	ldr	r0, [pc, #148]	@ (800d7d4 <tcp_update_rcv_ann_wnd+0xac>)
 800d740:	f009 fae8 	bl	8016d14 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d74c:	4413      	add	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d758:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d75c:	bf28      	it	cs
 800d75e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d762:	b292      	uxth	r2, r2
 800d764:	4413      	add	r3, r2
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	1ad3      	subs	r3, r2, r3
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	db08      	blt.n	800d780 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	e020      	b.n	800d7c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd03      	ble.n	800d796 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d794:	e014      	b.n	800d7c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7a8:	d306      	bcc.n	800d7b8 <tcp_update_rcv_ann_wnd+0x90>
 800d7aa:	4b08      	ldr	r3, [pc, #32]	@ (800d7cc <tcp_update_rcv_ann_wnd+0xa4>)
 800d7ac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d7b0:	4909      	ldr	r1, [pc, #36]	@ (800d7d8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d7b2:	4808      	ldr	r0, [pc, #32]	@ (800d7d4 <tcp_update_rcv_ann_wnd+0xac>)
 800d7b4:	f009 faae 	bl	8016d14 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d7c0:	2300      	movs	r3, #0
  }
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	08019bec 	.word	0x08019bec
 800d7d0:	08019e48 	.word	0x08019e48
 800d7d4:	08019c30 	.word	0x08019c30
 800d7d8:	08019e6c 	.word	0x08019e6c

0800d7dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <tcp_recved+0x22>
 800d7ee:	4b1f      	ldr	r3, [pc, #124]	@ (800d86c <tcp_recved+0x90>)
 800d7f0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d7f4:	491e      	ldr	r1, [pc, #120]	@ (800d870 <tcp_recved+0x94>)
 800d7f6:	481f      	ldr	r0, [pc, #124]	@ (800d874 <tcp_recved+0x98>)
 800d7f8:	f009 fa8c 	bl	8016d14 <iprintf>
 800d7fc:	e032      	b.n	800d864 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d106      	bne.n	800d814 <tcp_recved+0x38>
 800d806:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <tcp_recved+0x90>)
 800d808:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d80c:	491a      	ldr	r1, [pc, #104]	@ (800d878 <tcp_recved+0x9c>)
 800d80e:	4819      	ldr	r0, [pc, #100]	@ (800d874 <tcp_recved+0x98>)
 800d810:	f009 fa80 	bl	8016d14 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d818:	887b      	ldrh	r3, [r7, #2]
 800d81a:	4413      	add	r3, r2
 800d81c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d81e:	89fb      	ldrh	r3, [r7, #14]
 800d820:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d824:	d804      	bhi.n	800d830 <tcp_recved+0x54>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d82a:	89fa      	ldrh	r2, [r7, #14]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d204      	bcs.n	800d83a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d836:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d838:	e002      	b.n	800d840 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	89fa      	ldrh	r2, [r7, #14]
 800d83e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff ff71 	bl	800d728 <tcp_update_rcv_ann_wnd>
 800d846:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d84e:	d309      	bcc.n	800d864 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	8b5b      	ldrh	r3, [r3, #26]
 800d854:	f043 0302 	orr.w	r3, r3, #2
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f004 fcc2 	bl	80121e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	08019bec 	.word	0x08019bec
 800d870:	08019e88 	.word	0x08019e88
 800d874:	08019c30 	.word	0x08019c30
 800d878:	08019ea0 	.word	0x08019ea0

0800d87c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d886:	4b1e      	ldr	r3, [pc, #120]	@ (800d900 <tcp_new_port+0x84>)
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	4b1c      	ldr	r3, [pc, #112]	@ (800d900 <tcp_new_port+0x84>)
 800d890:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d892:	4b1b      	ldr	r3, [pc, #108]	@ (800d900 <tcp_new_port+0x84>)
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d103      	bne.n	800d8a6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d89e:	4b18      	ldr	r3, [pc, #96]	@ (800d900 <tcp_new_port+0x84>)
 800d8a0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d8a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	71fb      	strb	r3, [r7, #7]
 800d8aa:	e01e      	b.n	800d8ea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8ac:	79fb      	ldrb	r3, [r7, #7]
 800d8ae:	4a15      	ldr	r2, [pc, #84]	@ (800d904 <tcp_new_port+0x88>)
 800d8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	e011      	b.n	800d8de <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	8ada      	ldrh	r2, [r3, #22]
 800d8be:	4b10      	ldr	r3, [pc, #64]	@ (800d900 <tcp_new_port+0x84>)
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d108      	bne.n	800d8d8 <tcp_new_port+0x5c>
        n++;
 800d8c6:	88bb      	ldrh	r3, [r7, #4]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d8cc:	88bb      	ldrh	r3, [r7, #4]
 800d8ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8d2:	d3d8      	bcc.n	800d886 <tcp_new_port+0xa>
          return 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e00d      	b.n	800d8f4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	603b      	str	r3, [r7, #0]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1ea      	bne.n	800d8ba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	71fb      	strb	r3, [r7, #7]
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	2b03      	cmp	r3, #3
 800d8ee:	d9dd      	bls.n	800d8ac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d8f0:	4b03      	ldr	r3, [pc, #12]	@ (800d900 <tcp_new_port+0x84>)
 800d8f2:	881b      	ldrh	r3, [r3, #0]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	20000024 	.word	0x20000024
 800d904:	0801bcc4 	.word	0x0801bcc4

0800d908 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08a      	sub	sp, #40	@ 0x28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	4613      	mov	r3, r2
 800d916:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d918:	2300      	movs	r3, #0
 800d91a:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d109      	bne.n	800d936 <tcp_connect+0x2e>
 800d922:	4b7d      	ldr	r3, [pc, #500]	@ (800db18 <tcp_connect+0x210>)
 800d924:	f240 4235 	movw	r2, #1077	@ 0x435
 800d928:	497c      	ldr	r1, [pc, #496]	@ (800db1c <tcp_connect+0x214>)
 800d92a:	487d      	ldr	r0, [pc, #500]	@ (800db20 <tcp_connect+0x218>)
 800d92c:	f009 f9f2 	bl	8016d14 <iprintf>
 800d930:	f06f 030f 	mvn.w	r3, #15
 800d934:	e0ec      	b.n	800db10 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d109      	bne.n	800d950 <tcp_connect+0x48>
 800d93c:	4b76      	ldr	r3, [pc, #472]	@ (800db18 <tcp_connect+0x210>)
 800d93e:	f240 4236 	movw	r2, #1078	@ 0x436
 800d942:	4978      	ldr	r1, [pc, #480]	@ (800db24 <tcp_connect+0x21c>)
 800d944:	4876      	ldr	r0, [pc, #472]	@ (800db20 <tcp_connect+0x218>)
 800d946:	f009 f9e5 	bl	8016d14 <iprintf>
 800d94a:	f06f 030f 	mvn.w	r3, #15
 800d94e:	e0df      	b.n	800db10 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	7d1b      	ldrb	r3, [r3, #20]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d009      	beq.n	800d96c <tcp_connect+0x64>
 800d958:	4b6f      	ldr	r3, [pc, #444]	@ (800db18 <tcp_connect+0x210>)
 800d95a:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800d95e:	4972      	ldr	r1, [pc, #456]	@ (800db28 <tcp_connect+0x220>)
 800d960:	486f      	ldr	r0, [pc, #444]	@ (800db20 <tcp_connect+0x218>)
 800d962:	f009 f9d7 	bl	8016d14 <iprintf>
 800d966:	f06f 0309 	mvn.w	r3, #9
 800d96a:	e0d1      	b.n	800db10 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <tcp_connect+0x70>
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	e000      	b.n	800d97a <tcp_connect+0x72>
 800d978:	2300      	movs	r3, #0
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	88fa      	ldrh	r2, [r7, #6]
 800d982:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	7a1b      	ldrb	r3, [r3, #8]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d006      	beq.n	800d99a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	7a1b      	ldrb	r3, [r3, #8]
 800d990:	4618      	mov	r0, r3
 800d992:	f7fe fd2f 	bl	800c3f4 <netif_get_by_index>
 800d996:	6278      	str	r0, [r7, #36]	@ 0x24
 800d998:	e005      	b.n	800d9a6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f007 fb6c 	bl	801507c <ip4_route>
 800d9a4:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d9ac:	f06f 0303 	mvn.w	r3, #3
 800d9b0:	e0ae      	b.n	800db10 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <tcp_connect+0xb8>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d111      	bne.n	800d9e4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <tcp_connect+0xc4>
 800d9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	e000      	b.n	800d9ce <tcp_connect+0xc6>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d102      	bne.n	800d9dc <tcp_connect+0xd4>
      return ERR_RTE;
 800d9d6:	f06f 0303 	mvn.w	r3, #3
 800d9da:	e099      	b.n	800db10 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	8adb      	ldrh	r3, [r3, #22]
 800d9e8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	8adb      	ldrh	r3, [r3, #22]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10c      	bne.n	800da0c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d9f2:	f7ff ff43 	bl	800d87c <tcp_new_port>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	8adb      	ldrh	r3, [r3, #22]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d102      	bne.n	800da0c <tcp_connect+0x104>
      return ERR_BUF;
 800da06:	f06f 0301 	mvn.w	r3, #1
 800da0a:	e081      	b.n	800db10 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f001 f869 	bl	800eae4 <tcp_next_iss>
 800da12:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	1e5a      	subs	r2, r3, #1
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	1e5a      	subs	r2, r3, #1
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	1e5a      	subs	r2, r3, #1
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800da3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800da56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800da60:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	3304      	adds	r3, #4
 800da6a:	461a      	mov	r2, r3
 800da6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da6e:	f001 f85f 	bl	800eb30 <tcp_eff_send_mss_netif>
 800da72:	4603      	mov	r3, r0
 800da74:	461a      	mov	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2201      	movs	r2, #1
 800da7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800da8a:	2102      	movs	r1, #2
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f004 fabd 	bl	801200c <tcp_enqueue_flags>
 800da92:	4603      	mov	r3, r0
 800da94:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800da96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d136      	bne.n	800db0c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2202      	movs	r2, #2
 800daa2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800daa4:	8b7b      	ldrh	r3, [r7, #26]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d021      	beq.n	800daee <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800daaa:	4b20      	ldr	r3, [pc, #128]	@ (800db2c <tcp_connect+0x224>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d105      	bne.n	800dac0 <tcp_connect+0x1b8>
 800dab4:	4b1d      	ldr	r3, [pc, #116]	@ (800db2c <tcp_connect+0x224>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	4a1c      	ldr	r2, [pc, #112]	@ (800db2c <tcp_connect+0x224>)
 800dabc:	6013      	str	r3, [r2, #0]
 800dabe:	e013      	b.n	800dae8 <tcp_connect+0x1e0>
 800dac0:	4b1a      	ldr	r3, [pc, #104]	@ (800db2c <tcp_connect+0x224>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	623b      	str	r3, [r7, #32]
 800dac6:	e00c      	b.n	800dae2 <tcp_connect+0x1da>
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d104      	bne.n	800dadc <tcp_connect+0x1d4>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	60da      	str	r2, [r3, #12]
 800dada:	e005      	b.n	800dae8 <tcp_connect+0x1e0>
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	623b      	str	r3, [r7, #32]
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1ef      	bne.n	800dac8 <tcp_connect+0x1c0>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800daee:	4b10      	ldr	r3, [pc, #64]	@ (800db30 <tcp_connect+0x228>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	60da      	str	r2, [r3, #12]
 800daf6:	4a0e      	ldr	r2, [pc, #56]	@ (800db30 <tcp_connect+0x228>)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6013      	str	r3, [r2, #0]
 800dafc:	f005 faea 	bl	80130d4 <tcp_timer_needed>
 800db00:	4b0c      	ldr	r3, [pc, #48]	@ (800db34 <tcp_connect+0x22c>)
 800db02:	2201      	movs	r2, #1
 800db04:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f004 fb6e 	bl	80121e8 <tcp_output>
  }
  return ret;
 800db0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3728      	adds	r7, #40	@ 0x28
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08019bec 	.word	0x08019bec
 800db1c:	08019ec8 	.word	0x08019ec8
 800db20:	08019c30 	.word	0x08019c30
 800db24:	08019ee4 	.word	0x08019ee4
 800db28:	08019f00 	.word	0x08019f00
 800db2c:	2000d8a4 	.word	0x2000d8a4
 800db30:	2000d8ac 	.word	0x2000d8ac
 800db34:	2000d8b4 	.word	0x2000d8b4

0800db38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800db38:	b5b0      	push	{r4, r5, r7, lr}
 800db3a:	b090      	sub	sp, #64	@ 0x40
 800db3c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800db44:	4b95      	ldr	r3, [pc, #596]	@ (800dd9c <tcp_slowtmr+0x264>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	4a94      	ldr	r2, [pc, #592]	@ (800dd9c <tcp_slowtmr+0x264>)
 800db4c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800db4e:	4b94      	ldr	r3, [pc, #592]	@ (800dda0 <tcp_slowtmr+0x268>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	3301      	adds	r3, #1
 800db54:	b2da      	uxtb	r2, r3
 800db56:	4b92      	ldr	r3, [pc, #584]	@ (800dda0 <tcp_slowtmr+0x268>)
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	e000      	b.n	800db5e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800db5c:	bf00      	nop
  prev = NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800db62:	4b90      	ldr	r3, [pc, #576]	@ (800dda4 <tcp_slowtmr+0x26c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800db68:	e29f      	b.n	800e0aa <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	7d1b      	ldrb	r3, [r3, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <tcp_slowtmr+0x48>
 800db72:	4b8d      	ldr	r3, [pc, #564]	@ (800dda8 <tcp_slowtmr+0x270>)
 800db74:	f240 42be 	movw	r2, #1214	@ 0x4be
 800db78:	498c      	ldr	r1, [pc, #560]	@ (800ddac <tcp_slowtmr+0x274>)
 800db7a:	488d      	ldr	r0, [pc, #564]	@ (800ddb0 <tcp_slowtmr+0x278>)
 800db7c:	f009 f8ca 	bl	8016d14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800db80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db82:	7d1b      	ldrb	r3, [r3, #20]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d106      	bne.n	800db96 <tcp_slowtmr+0x5e>
 800db88:	4b87      	ldr	r3, [pc, #540]	@ (800dda8 <tcp_slowtmr+0x270>)
 800db8a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800db8e:	4989      	ldr	r1, [pc, #548]	@ (800ddb4 <tcp_slowtmr+0x27c>)
 800db90:	4887      	ldr	r0, [pc, #540]	@ (800ddb0 <tcp_slowtmr+0x278>)
 800db92:	f009 f8bf 	bl	8016d14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800db96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db98:	7d1b      	ldrb	r3, [r3, #20]
 800db9a:	2b0a      	cmp	r3, #10
 800db9c:	d106      	bne.n	800dbac <tcp_slowtmr+0x74>
 800db9e:	4b82      	ldr	r3, [pc, #520]	@ (800dda8 <tcp_slowtmr+0x270>)
 800dba0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dba4:	4984      	ldr	r1, [pc, #528]	@ (800ddb8 <tcp_slowtmr+0x280>)
 800dba6:	4882      	ldr	r0, [pc, #520]	@ (800ddb0 <tcp_slowtmr+0x278>)
 800dba8:	f009 f8b4 	bl	8016d14 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbae:	7f9a      	ldrb	r2, [r3, #30]
 800dbb0:	4b7b      	ldr	r3, [pc, #492]	@ (800dda0 <tcp_slowtmr+0x268>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d105      	bne.n	800dbc4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800dbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dbc2:	e272      	b.n	800e0aa <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800dbc4:	4b76      	ldr	r3, [pc, #472]	@ (800dda0 <tcp_slowtmr+0x268>)
 800dbc6:	781a      	ldrb	r2, [r3, #0]
 800dbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbca:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbda:	7d1b      	ldrb	r3, [r3, #20]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	d10a      	bne.n	800dbf6 <tcp_slowtmr+0xbe>
 800dbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dbe6:	2b05      	cmp	r3, #5
 800dbe8:	d905      	bls.n	800dbf6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800dbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbee:	3301      	adds	r3, #1
 800dbf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dbf4:	e11e      	b.n	800de34 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dbfc:	2b0b      	cmp	r3, #11
 800dbfe:	d905      	bls.n	800dc0c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800dc00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc04:	3301      	adds	r3, #1
 800dc06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc0a:	e113      	b.n	800de34 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d075      	beq.n	800dd02 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d006      	beq.n	800dc2c <tcp_slowtmr+0xf4>
 800dc1e:	4b62      	ldr	r3, [pc, #392]	@ (800dda8 <tcp_slowtmr+0x270>)
 800dc20:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800dc24:	4965      	ldr	r1, [pc, #404]	@ (800ddbc <tcp_slowtmr+0x284>)
 800dc26:	4862      	ldr	r0, [pc, #392]	@ (800ddb0 <tcp_slowtmr+0x278>)
 800dc28:	f009 f874 	bl	8016d14 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d106      	bne.n	800dc42 <tcp_slowtmr+0x10a>
 800dc34:	4b5c      	ldr	r3, [pc, #368]	@ (800dda8 <tcp_slowtmr+0x270>)
 800dc36:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800dc3a:	4961      	ldr	r1, [pc, #388]	@ (800ddc0 <tcp_slowtmr+0x288>)
 800dc3c:	485c      	ldr	r0, [pc, #368]	@ (800ddb0 <tcp_slowtmr+0x278>)
 800dc3e:	f009 f869 	bl	8016d14 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc44:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dc48:	2b0b      	cmp	r3, #11
 800dc4a:	d905      	bls.n	800dc58 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800dc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc50:	3301      	adds	r3, #1
 800dc52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc56:	e0ed      	b.n	800de34 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	4a58      	ldr	r2, [pc, #352]	@ (800ddc4 <tcp_slowtmr+0x28c>)
 800dc62:	5cd3      	ldrb	r3, [r2, r3]
 800dc64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dc6c:	7c7a      	ldrb	r2, [r7, #17]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d907      	bls.n	800dc82 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800dc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc74:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dc78:	3301      	adds	r3, #1
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800dc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dc88:	7c7a      	ldrb	r2, [r7, #17]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	f200 80d2 	bhi.w	800de34 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800dc90:	2301      	movs	r3, #1
 800dc92:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800dc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d108      	bne.n	800dcb0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dc9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dca0:	f005 f94a 	bl	8012f38 <tcp_zero_window_probe>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d014      	beq.n	800dcd4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800dcaa:	2300      	movs	r3, #0
 800dcac:	623b      	str	r3, [r7, #32]
 800dcae:	e011      	b.n	800dcd4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcba:	f004 f80f 	bl	8011cdc <tcp_split_unsent_seg>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d107      	bne.n	800dcd4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800dcc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcc6:	f004 fa8f 	bl	80121e8 <tcp_output>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dcd4:	6a3b      	ldr	r3, [r7, #32]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 80ac 	beq.w	800de34 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800dcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dcea:	2b06      	cmp	r3, #6
 800dcec:	f200 80a2 	bhi.w	800de34 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800dcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800dd00:	e098      	b.n	800de34 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db0f      	blt.n	800dd2c <tcp_slowtmr+0x1f4>
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd12:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d008      	beq.n	800dd2c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800dd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3301      	adds	r3, #1
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	b21a      	sxth	r2, r3
 800dd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800dd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	db7b      	blt.n	800de34 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dd3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd3e:	f004 fd47 	bl	80127d0 <tcp_rexmit_rto_prepare>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d007      	beq.n	800dd58 <tcp_slowtmr+0x220>
 800dd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d171      	bne.n	800de34 <tcp_slowtmr+0x2fc>
 800dd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d06d      	beq.n	800de34 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800dd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d03a      	beq.n	800ddd6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd66:	2b0c      	cmp	r3, #12
 800dd68:	bf28      	it	cs
 800dd6a:	230c      	movcs	r3, #12
 800dd6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dd74:	10db      	asrs	r3, r3, #3
 800dd76:	b21b      	sxth	r3, r3
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dd80:	4413      	add	r3, r2
 800dd82:	7efa      	ldrb	r2, [r7, #27]
 800dd84:	4910      	ldr	r1, [pc, #64]	@ (800ddc8 <tcp_slowtmr+0x290>)
 800dd86:	5c8a      	ldrb	r2, [r1, r2]
 800dd88:	4093      	lsls	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800dd92:	4293      	cmp	r3, r2
 800dd94:	dc1a      	bgt.n	800ddcc <tcp_slowtmr+0x294>
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	b21a      	sxth	r2, r3
 800dd9a:	e019      	b.n	800ddd0 <tcp_slowtmr+0x298>
 800dd9c:	2000d8a0 	.word	0x2000d8a0
 800dda0:	2000d8b6 	.word	0x2000d8b6
 800dda4:	2000d8ac 	.word	0x2000d8ac
 800dda8:	08019bec 	.word	0x08019bec
 800ddac:	08019f30 	.word	0x08019f30
 800ddb0:	08019c30 	.word	0x08019c30
 800ddb4:	08019f5c 	.word	0x08019f5c
 800ddb8:	08019f88 	.word	0x08019f88
 800ddbc:	08019fb8 	.word	0x08019fb8
 800ddc0:	08019fec 	.word	0x08019fec
 800ddc4:	0801bcbc 	.word	0x0801bcbc
 800ddc8:	0801bcac 	.word	0x0801bcac
 800ddcc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ddd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd8:	2200      	movs	r2, #0
 800ddda:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800dde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dde8:	4293      	cmp	r3, r2
 800ddea:	bf28      	it	cs
 800ddec:	4613      	movcs	r3, r2
 800ddee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ddf0:	8a7b      	ldrh	r3, [r7, #18]
 800ddf2:	085b      	lsrs	r3, r3, #1
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ddfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de06:	005b      	lsls	r3, r3, #1
 800de08:	b29b      	uxth	r3, r3
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d206      	bcs.n	800de1c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	b29a      	uxth	r2, r3
 800de16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800de1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800de20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de28:	2200      	movs	r2, #0
 800de2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800de2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de30:	f004 fd3e 	bl	80128b0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800de34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de36:	7d1b      	ldrb	r3, [r3, #20]
 800de38:	2b06      	cmp	r3, #6
 800de3a:	d111      	bne.n	800de60 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	8b5b      	ldrh	r3, [r3, #26]
 800de40:	f003 0310 	and.w	r3, r3, #16
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00b      	beq.n	800de60 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de48:	4b9d      	ldr	r3, [pc, #628]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	2b28      	cmp	r3, #40	@ 0x28
 800de54:	d904      	bls.n	800de60 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800de56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de5a:	3301      	adds	r3, #1
 800de5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	7a5b      	ldrb	r3, [r3, #9]
 800de64:	f003 0308 	and.w	r3, r3, #8
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d04c      	beq.n	800df06 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800de6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800de70:	2b04      	cmp	r3, #4
 800de72:	d003      	beq.n	800de7c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800de74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800de78:	2b07      	cmp	r3, #7
 800de7a:	d144      	bne.n	800df06 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de7c:	4b90      	ldr	r3, [pc, #576]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de8c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800de90:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800de94:	498b      	ldr	r1, [pc, #556]	@ (800e0c4 <tcp_slowtmr+0x58c>)
 800de96:	fba1 1303 	umull	r1, r3, r1, r3
 800de9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d90a      	bls.n	800deb6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800dea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dea4:	3301      	adds	r3, #1
 800dea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800deaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800deae:	3301      	adds	r3, #1
 800deb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800deb4:	e027      	b.n	800df06 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deb6:	4b82      	ldr	r3, [pc, #520]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800dec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800decc:	4618      	mov	r0, r3
 800dece:	4b7e      	ldr	r3, [pc, #504]	@ (800e0c8 <tcp_slowtmr+0x590>)
 800ded0:	fb00 f303 	mul.w	r3, r0, r3
 800ded4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ded6:	497b      	ldr	r1, [pc, #492]	@ (800e0c4 <tcp_slowtmr+0x58c>)
 800ded8:	fba1 1303 	umull	r1, r3, r1, r3
 800dedc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dede:	429a      	cmp	r2, r3
 800dee0:	d911      	bls.n	800df06 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800dee2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dee4:	f004 ffe8 	bl	8012eb8 <tcp_keepalive>
 800dee8:	4603      	mov	r3, r0
 800deea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800deee:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800def2:	2b00      	cmp	r3, #0
 800def4:	d107      	bne.n	800df06 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800def6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800defc:	3301      	adds	r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df02:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800df06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d011      	beq.n	800df32 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800df0e:	4b6c      	ldr	r3, [pc, #432]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	1ad2      	subs	r2, r2, r3
 800df18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800df1e:	4619      	mov	r1, r3
 800df20:	460b      	mov	r3, r1
 800df22:	005b      	lsls	r3, r3, #1
 800df24:	440b      	add	r3, r1
 800df26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800df28:	429a      	cmp	r2, r3
 800df2a:	d302      	bcc.n	800df32 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800df2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df2e:	f000 fea9 	bl	800ec84 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800df32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df34:	7d1b      	ldrb	r3, [r3, #20]
 800df36:	2b03      	cmp	r3, #3
 800df38:	d10b      	bne.n	800df52 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df3a:	4b61      	ldr	r3, [pc, #388]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	2b28      	cmp	r3, #40	@ 0x28
 800df46:	d904      	bls.n	800df52 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800df48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df4c:	3301      	adds	r3, #1
 800df4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800df52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df54:	7d1b      	ldrb	r3, [r3, #20]
 800df56:	2b09      	cmp	r3, #9
 800df58:	d10b      	bne.n	800df72 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800df5a:	4b59      	ldr	r3, [pc, #356]	@ (800e0c0 <tcp_slowtmr+0x588>)
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	2bf0      	cmp	r3, #240	@ 0xf0
 800df66:	d904      	bls.n	800df72 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800df68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df6c:	3301      	adds	r3, #1
 800df6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800df72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df76:	2b00      	cmp	r3, #0
 800df78:	d060      	beq.n	800e03c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800df7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df80:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800df82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df84:	f000 fcca 	bl	800e91c <tcp_pcb_purge>
      if (prev != NULL) {
 800df88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d010      	beq.n	800dfb0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800df8e:	4b4f      	ldr	r3, [pc, #316]	@ (800e0cc <tcp_slowtmr+0x594>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df94:	429a      	cmp	r2, r3
 800df96:	d106      	bne.n	800dfa6 <tcp_slowtmr+0x46e>
 800df98:	4b4d      	ldr	r3, [pc, #308]	@ (800e0d0 <tcp_slowtmr+0x598>)
 800df9a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800df9e:	494d      	ldr	r1, [pc, #308]	@ (800e0d4 <tcp_slowtmr+0x59c>)
 800dfa0:	484d      	ldr	r0, [pc, #308]	@ (800e0d8 <tcp_slowtmr+0x5a0>)
 800dfa2:	f008 feb7 	bl	8016d14 <iprintf>
        prev->next = pcb->next;
 800dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa8:	68da      	ldr	r2, [r3, #12]
 800dfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfac:	60da      	str	r2, [r3, #12]
 800dfae:	e00f      	b.n	800dfd0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dfb0:	4b46      	ldr	r3, [pc, #280]	@ (800e0cc <tcp_slowtmr+0x594>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d006      	beq.n	800dfc8 <tcp_slowtmr+0x490>
 800dfba:	4b45      	ldr	r3, [pc, #276]	@ (800e0d0 <tcp_slowtmr+0x598>)
 800dfbc:	f240 5271 	movw	r2, #1393	@ 0x571
 800dfc0:	4946      	ldr	r1, [pc, #280]	@ (800e0dc <tcp_slowtmr+0x5a4>)
 800dfc2:	4845      	ldr	r0, [pc, #276]	@ (800e0d8 <tcp_slowtmr+0x5a0>)
 800dfc4:	f008 fea6 	bl	8016d14 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	4a3f      	ldr	r2, [pc, #252]	@ (800e0cc <tcp_slowtmr+0x594>)
 800dfce:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800dfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d013      	beq.n	800e000 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800dfe0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800dfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfe8:	8ad2      	ldrh	r2, [r2, #22]
 800dfea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfec:	8b09      	ldrh	r1, [r1, #24]
 800dfee:	9102      	str	r1, [sp, #8]
 800dff0:	9201      	str	r2, [sp, #4]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	462b      	mov	r3, r5
 800dff6:	4622      	mov	r2, r4
 800dff8:	4601      	mov	r1, r0
 800dffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dffc:	f004 fea8 	bl	8012d50 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e008:	7d1b      	ldrb	r3, [r3, #20]
 800e00a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e016:	6838      	ldr	r0, [r7, #0]
 800e018:	f7ff f836 	bl	800d088 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e01c:	4b30      	ldr	r3, [pc, #192]	@ (800e0e0 <tcp_slowtmr+0x5a8>)
 800e01e:	2200      	movs	r2, #0
 800e020:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d004      	beq.n	800e032 <tcp_slowtmr+0x4fa>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f06f 010c 	mvn.w	r1, #12
 800e02e:	68b8      	ldr	r0, [r7, #8]
 800e030:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e032:	4b2b      	ldr	r3, [pc, #172]	@ (800e0e0 <tcp_slowtmr+0x5a8>)
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d037      	beq.n	800e0aa <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800e03a:	e590      	b.n	800db5e <tcp_slowtmr+0x26>
      prev = pcb;
 800e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e048:	7f1b      	ldrb	r3, [r3, #28]
 800e04a:	3301      	adds	r3, #1
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e050:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	7f1a      	ldrb	r2, [r3, #28]
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	7f5b      	ldrb	r3, [r3, #29]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d325      	bcc.n	800e0aa <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800e05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e060:	2200      	movs	r2, #0
 800e062:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e064:	4b1e      	ldr	r3, [pc, #120]	@ (800e0e0 <tcp_slowtmr+0x5a8>)
 800e066:	2200      	movs	r2, #0
 800e068:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00b      	beq.n	800e08c <tcp_slowtmr+0x554>
 800e074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e07a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e07c:	6912      	ldr	r2, [r2, #16]
 800e07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e080:	4610      	mov	r0, r2
 800e082:	4798      	blx	r3
 800e084:	4603      	mov	r3, r0
 800e086:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e08a:	e002      	b.n	800e092 <tcp_slowtmr+0x55a>
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e092:	4b13      	ldr	r3, [pc, #76]	@ (800e0e0 <tcp_slowtmr+0x5a8>)
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f47f ad60 	bne.w	800db5c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e09c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <tcp_slowtmr+0x572>
          tcp_output(prev);
 800e0a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0a6:	f004 f89f 	bl	80121e8 <tcp_output>
  while (pcb != NULL) {
 800e0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f47f ad5c 	bne.w	800db6a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0e4 <tcp_slowtmr+0x5ac>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e0bc:	e067      	b.n	800e18e <tcp_slowtmr+0x656>
 800e0be:	bf00      	nop
 800e0c0:	2000d8a0 	.word	0x2000d8a0
 800e0c4:	10624dd3 	.word	0x10624dd3
 800e0c8:	000124f8 	.word	0x000124f8
 800e0cc:	2000d8ac 	.word	0x2000d8ac
 800e0d0:	08019bec 	.word	0x08019bec
 800e0d4:	0801a024 	.word	0x0801a024
 800e0d8:	08019c30 	.word	0x08019c30
 800e0dc:	0801a050 	.word	0x0801a050
 800e0e0:	2000d8b4 	.word	0x2000d8b4
 800e0e4:	2000d8b0 	.word	0x2000d8b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	7d1b      	ldrb	r3, [r3, #20]
 800e0ec:	2b0a      	cmp	r3, #10
 800e0ee:	d006      	beq.n	800e0fe <tcp_slowtmr+0x5c6>
 800e0f0:	4b2b      	ldr	r3, [pc, #172]	@ (800e1a0 <tcp_slowtmr+0x668>)
 800e0f2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e0f6:	492b      	ldr	r1, [pc, #172]	@ (800e1a4 <tcp_slowtmr+0x66c>)
 800e0f8:	482b      	ldr	r0, [pc, #172]	@ (800e1a8 <tcp_slowtmr+0x670>)
 800e0fa:	f008 fe0b 	bl	8016d14 <iprintf>
    pcb_remove = 0;
 800e0fe:	2300      	movs	r3, #0
 800e100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e104:	4b29      	ldr	r3, [pc, #164]	@ (800e1ac <tcp_slowtmr+0x674>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	2bf0      	cmp	r3, #240	@ 0xf0
 800e110:	d904      	bls.n	800e11c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e116:	3301      	adds	r3, #1
 800e118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e11c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e120:	2b00      	cmp	r3, #0
 800e122:	d02f      	beq.n	800e184 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e126:	f000 fbf9 	bl	800e91c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d010      	beq.n	800e152 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e130:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b0 <tcp_slowtmr+0x678>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e136:	429a      	cmp	r2, r3
 800e138:	d106      	bne.n	800e148 <tcp_slowtmr+0x610>
 800e13a:	4b19      	ldr	r3, [pc, #100]	@ (800e1a0 <tcp_slowtmr+0x668>)
 800e13c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e140:	491c      	ldr	r1, [pc, #112]	@ (800e1b4 <tcp_slowtmr+0x67c>)
 800e142:	4819      	ldr	r0, [pc, #100]	@ (800e1a8 <tcp_slowtmr+0x670>)
 800e144:	f008 fde6 	bl	8016d14 <iprintf>
        prev->next = pcb->next;
 800e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14a:	68da      	ldr	r2, [r3, #12]
 800e14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14e:	60da      	str	r2, [r3, #12]
 800e150:	e00f      	b.n	800e172 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e152:	4b17      	ldr	r3, [pc, #92]	@ (800e1b0 <tcp_slowtmr+0x678>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e158:	429a      	cmp	r2, r3
 800e15a:	d006      	beq.n	800e16a <tcp_slowtmr+0x632>
 800e15c:	4b10      	ldr	r3, [pc, #64]	@ (800e1a0 <tcp_slowtmr+0x668>)
 800e15e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e162:	4915      	ldr	r1, [pc, #84]	@ (800e1b8 <tcp_slowtmr+0x680>)
 800e164:	4810      	ldr	r0, [pc, #64]	@ (800e1a8 <tcp_slowtmr+0x670>)
 800e166:	f008 fdd5 	bl	8016d14 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	4a10      	ldr	r2, [pc, #64]	@ (800e1b0 <tcp_slowtmr+0x678>)
 800e170:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e174:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e17c:	69f8      	ldr	r0, [r7, #28]
 800e17e:	f7fe ff83 	bl	800d088 <tcp_free>
 800e182:	e004      	b.n	800e18e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e186:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1a9      	bne.n	800e0e8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop
 800e198:	3730      	adds	r7, #48	@ 0x30
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bdb0      	pop	{r4, r5, r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	08019bec 	.word	0x08019bec
 800e1a4:	0801a07c 	.word	0x0801a07c
 800e1a8:	08019c30 	.word	0x08019c30
 800e1ac:	2000d8a0 	.word	0x2000d8a0
 800e1b0:	2000d8b0 	.word	0x2000d8b0
 800e1b4:	0801a0ac 	.word	0x0801a0ac
 800e1b8:	0801a0d4 	.word	0x0801a0d4

0800e1bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e1c2:	4b2d      	ldr	r3, [pc, #180]	@ (800e278 <tcp_fasttmr+0xbc>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e278 <tcp_fasttmr+0xbc>)
 800e1cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e1ce:	4b2b      	ldr	r3, [pc, #172]	@ (800e27c <tcp_fasttmr+0xc0>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e1d4:	e048      	b.n	800e268 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	7f9a      	ldrb	r2, [r3, #30]
 800e1da:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <tcp_fasttmr+0xbc>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d03f      	beq.n	800e262 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e1e2:	4b25      	ldr	r3, [pc, #148]	@ (800e278 <tcp_fasttmr+0xbc>)
 800e1e4:	781a      	ldrb	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	8b5b      	ldrh	r3, [r3, #26]
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d010      	beq.n	800e218 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	8b5b      	ldrh	r3, [r3, #26]
 800e1fa:	f043 0302 	orr.w	r3, r3, #2
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f003 ffef 	bl	80121e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8b5b      	ldrh	r3, [r3, #26]
 800e20e:	f023 0303 	bic.w	r3, r3, #3
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	8b5b      	ldrh	r3, [r3, #26]
 800e21c:	f003 0308 	and.w	r3, r3, #8
 800e220:	2b00      	cmp	r3, #0
 800e222:	d009      	beq.n	800e238 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	8b5b      	ldrh	r3, [r3, #26]
 800e228:	f023 0308 	bic.w	r3, r3, #8
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff f8bc 	bl	800d3b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e246:	4b0e      	ldr	r3, [pc, #56]	@ (800e280 <tcp_fasttmr+0xc4>)
 800e248:	2200      	movs	r2, #0
 800e24a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 f819 	bl	800e284 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e252:	4b0b      	ldr	r3, [pc, #44]	@ (800e280 <tcp_fasttmr+0xc4>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d000      	beq.n	800e25c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e25a:	e7b8      	b.n	800e1ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	607b      	str	r3, [r7, #4]
 800e260:	e002      	b.n	800e268 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d1b3      	bne.n	800e1d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800e26e:	bf00      	nop
 800e270:	bf00      	nop
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	2000d8b6 	.word	0x2000d8b6
 800e27c:	2000d8ac 	.word	0x2000d8ac
 800e280:	2000d8b4 	.word	0x2000d8b4

0800e284 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e284:	b590      	push	{r4, r7, lr}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <tcp_process_refused_data+0x22>
 800e292:	4b37      	ldr	r3, [pc, #220]	@ (800e370 <tcp_process_refused_data+0xec>)
 800e294:	f240 6209 	movw	r2, #1545	@ 0x609
 800e298:	4936      	ldr	r1, [pc, #216]	@ (800e374 <tcp_process_refused_data+0xf0>)
 800e29a:	4837      	ldr	r0, [pc, #220]	@ (800e378 <tcp_process_refused_data+0xf4>)
 800e29c:	f008 fd3a 	bl	8016d14 <iprintf>
 800e2a0:	f06f 030f 	mvn.w	r3, #15
 800e2a4:	e060      	b.n	800e368 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2aa:	7b5b      	ldrb	r3, [r3, #13]
 800e2ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00b      	beq.n	800e2dc <tcp_process_refused_data+0x58>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6918      	ldr	r0, [r3, #16]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	47a0      	blx	r4
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	73fb      	strb	r3, [r7, #15]
 800e2da:	e007      	b.n	800e2ec <tcp_process_refused_data+0x68>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	f000 f8a4 	bl	800e430 <tcp_recv_null>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d12a      	bne.n	800e34a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e2f4:	7bbb      	ldrb	r3, [r7, #14]
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d033      	beq.n	800e366 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e302:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e306:	d005      	beq.n	800e314 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e30c:	3301      	adds	r3, #1
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <tcp_process_refused_data+0xb2>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6918      	ldr	r0, [r3, #16]
 800e328:	2300      	movs	r3, #0
 800e32a:	2200      	movs	r2, #0
 800e32c:	6879      	ldr	r1, [r7, #4]
 800e32e:	47a0      	blx	r4
 800e330:	4603      	mov	r3, r0
 800e332:	73fb      	strb	r3, [r7, #15]
 800e334:	e001      	b.n	800e33a <tcp_process_refused_data+0xb6>
 800e336:	2300      	movs	r3, #0
 800e338:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e33e:	f113 0f0d 	cmn.w	r3, #13
 800e342:	d110      	bne.n	800e366 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e344:	f06f 030c 	mvn.w	r3, #12
 800e348:	e00e      	b.n	800e368 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e34e:	f113 0f0d 	cmn.w	r3, #13
 800e352:	d102      	bne.n	800e35a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e354:	f06f 030c 	mvn.w	r3, #12
 800e358:	e006      	b.n	800e368 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e360:	f06f 0304 	mvn.w	r3, #4
 800e364:	e000      	b.n	800e368 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd90      	pop	{r4, r7, pc}
 800e370:	08019bec 	.word	0x08019bec
 800e374:	0801a0fc 	.word	0x0801a0fc
 800e378:	08019c30 	.word	0x08019c30

0800e37c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e384:	e007      	b.n	800e396 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f80a 	bl	800e3a6 <tcp_seg_free>
    seg = next;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1f4      	bne.n	800e386 <tcp_segs_free+0xa>
  }
}
 800e39c:	bf00      	nop
 800e39e:	bf00      	nop
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00c      	beq.n	800e3ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d004      	beq.n	800e3c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fba5 	bl	800cb10 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	2003      	movs	r0, #3
 800e3ca:	f7fd fcfd 	bl	800bdc8 <memp_free>
  }
}
 800e3ce:	bf00      	nop
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
	...

0800e3d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_seg_copy+0x1c>
 800e3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e424 <tcp_seg_copy+0x4c>)
 800e3e8:	f240 6282 	movw	r2, #1666	@ 0x682
 800e3ec:	490e      	ldr	r1, [pc, #56]	@ (800e428 <tcp_seg_copy+0x50>)
 800e3ee:	480f      	ldr	r0, [pc, #60]	@ (800e42c <tcp_seg_copy+0x54>)
 800e3f0:	f008 fc90 	bl	8016d14 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e3f4:	2003      	movs	r0, #3
 800e3f6:	f7fd fc71 	bl	800bcdc <memp_malloc>
 800e3fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <tcp_seg_copy+0x2e>
    return NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	e00a      	b.n	800e41c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e406:	2210      	movs	r2, #16
 800e408:	6879      	ldr	r1, [r7, #4]
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f008 fd65 	bl	8016eda <memcpy>
  pbuf_ref(cseg->p);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe fc21 	bl	800cc5c <pbuf_ref>
  return cseg;
 800e41a:	68fb      	ldr	r3, [r7, #12]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	08019bec 	.word	0x08019bec
 800e428:	0801a140 	.word	0x0801a140
 800e42c:	08019c30 	.word	0x08019c30

0800e430 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d109      	bne.n	800e458 <tcp_recv_null+0x28>
 800e444:	4b12      	ldr	r3, [pc, #72]	@ (800e490 <tcp_recv_null+0x60>)
 800e446:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e44a:	4912      	ldr	r1, [pc, #72]	@ (800e494 <tcp_recv_null+0x64>)
 800e44c:	4812      	ldr	r0, [pc, #72]	@ (800e498 <tcp_recv_null+0x68>)
 800e44e:	f008 fc61 	bl	8016d14 <iprintf>
 800e452:	f06f 030f 	mvn.w	r3, #15
 800e456:	e016      	b.n	800e486 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d009      	beq.n	800e472 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	4619      	mov	r1, r3
 800e464:	68b8      	ldr	r0, [r7, #8]
 800e466:	f7ff f9b9 	bl	800d7dc <tcp_recved>
    pbuf_free(p);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7fe fb50 	bl	800cb10 <pbuf_free>
 800e470:	e008      	b.n	800e484 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d104      	bne.n	800e484 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e47a:	68b8      	ldr	r0, [r7, #8]
 800e47c:	f7ff f802 	bl	800d484 <tcp_close>
 800e480:	4603      	mov	r3, r0
 800e482:	e000      	b.n	800e486 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	08019bec 	.word	0x08019bec
 800e494:	0801a15c 	.word	0x0801a15c
 800e498:	08019c30 	.word	0x08019c30

0800e49c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b086      	sub	sp, #24
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	db01      	blt.n	800e4b2 <tcp_kill_prio+0x16>
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	e000      	b.n	800e4b4 <tcp_kill_prio+0x18>
 800e4b2:	237f      	movs	r3, #127	@ 0x7f
 800e4b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e4b6:	7afb      	ldrb	r3, [r7, #11]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d034      	beq.n	800e526 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e4bc:	7afb      	ldrb	r3, [r7, #11]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4ca:	4b19      	ldr	r3, [pc, #100]	@ (800e530 <tcp_kill_prio+0x94>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e01f      	b.n	800e512 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	7d5b      	ldrb	r3, [r3, #21]
 800e4d6:	7afa      	ldrb	r2, [r7, #11]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d80c      	bhi.n	800e4f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e4e0:	7afa      	ldrb	r2, [r7, #11]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d112      	bne.n	800e50c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e4e6:	4b13      	ldr	r3, [pc, #76]	@ (800e534 <tcp_kill_prio+0x98>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d80a      	bhi.n	800e50c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e534 <tcp_kill_prio+0x98>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	7d5b      	ldrb	r3, [r3, #21]
 800e50a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1dc      	bne.n	800e4d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d004      	beq.n	800e528 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e51e:	6938      	ldr	r0, [r7, #16]
 800e520:	f7ff f8f6 	bl	800d710 <tcp_abort>
 800e524:	e000      	b.n	800e528 <tcp_kill_prio+0x8c>
    return;
 800e526:	bf00      	nop
  }
}
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	2000d8ac 	.word	0x2000d8ac
 800e534:	2000d8a0 	.word	0x2000d8a0

0800e538 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	4603      	mov	r3, r0
 800e540:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	2b08      	cmp	r3, #8
 800e546:	d009      	beq.n	800e55c <tcp_kill_state+0x24>
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	2b09      	cmp	r3, #9
 800e54c:	d006      	beq.n	800e55c <tcp_kill_state+0x24>
 800e54e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5b8 <tcp_kill_state+0x80>)
 800e550:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e554:	4919      	ldr	r1, [pc, #100]	@ (800e5bc <tcp_kill_state+0x84>)
 800e556:	481a      	ldr	r0, [pc, #104]	@ (800e5c0 <tcp_kill_state+0x88>)
 800e558:	f008 fbdc 	bl	8016d14 <iprintf>

  inactivity = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e560:	2300      	movs	r3, #0
 800e562:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e564:	4b17      	ldr	r3, [pc, #92]	@ (800e5c4 <tcp_kill_state+0x8c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e017      	b.n	800e59c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
 800e570:	79fa      	ldrb	r2, [r7, #7]
 800e572:	429a      	cmp	r2, r3
 800e574:	d10f      	bne.n	800e596 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e576:	4b14      	ldr	r3, [pc, #80]	@ (800e5c8 <tcp_kill_state+0x90>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	429a      	cmp	r2, r3
 800e584:	d807      	bhi.n	800e596 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e586:	4b10      	ldr	r3, [pc, #64]	@ (800e5c8 <tcp_kill_state+0x90>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1e4      	bne.n	800e56c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d003      	beq.n	800e5b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	6938      	ldr	r0, [r7, #16]
 800e5ac:	f7fe fff2 	bl	800d594 <tcp_abandon>
  }
}
 800e5b0:	bf00      	nop
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	08019bec 	.word	0x08019bec
 800e5bc:	0801a178 	.word	0x0801a178
 800e5c0:	08019c30 	.word	0x08019c30
 800e5c4:	2000d8ac 	.word	0x2000d8ac
 800e5c8:	2000d8a0 	.word	0x2000d8a0

0800e5cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5da:	4b12      	ldr	r3, [pc, #72]	@ (800e624 <tcp_kill_timewait+0x58>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	60fb      	str	r3, [r7, #12]
 800e5e0:	e012      	b.n	800e608 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5e2:	4b11      	ldr	r3, [pc, #68]	@ (800e628 <tcp_kill_timewait+0x5c>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d807      	bhi.n	800e602 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e628 <tcp_kill_timewait+0x5c>)
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6a1b      	ldr	r3, [r3, #32]
 800e5fa:	1ad3      	subs	r3, r2, r3
 800e5fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1e9      	bne.n	800e5e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e614:	68b8      	ldr	r0, [r7, #8]
 800e616:	f7ff f87b 	bl	800d710 <tcp_abort>
  }
}
 800e61a:	bf00      	nop
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	2000d8b0 	.word	0x2000d8b0
 800e628:	2000d8a0 	.word	0x2000d8a0

0800e62c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e632:	4b10      	ldr	r3, [pc, #64]	@ (800e674 <tcp_handle_closepend+0x48>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e638:	e014      	b.n	800e664 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	8b5b      	ldrh	r3, [r3, #26]
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d009      	beq.n	800e660 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8b5b      	ldrh	r3, [r3, #26]
 800e650:	f023 0308 	bic.w	r3, r3, #8
 800e654:	b29a      	uxth	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7fe fea8 	bl	800d3b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1e7      	bne.n	800e63a <tcp_handle_closepend+0xe>
  }
}
 800e66a:	bf00      	nop
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	2000d8ac 	.word	0x2000d8ac

0800e678 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e682:	2001      	movs	r0, #1
 800e684:	f7fd fb2a 	bl	800bcdc <memp_malloc>
 800e688:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d126      	bne.n	800e6de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e690:	f7ff ffcc 	bl	800e62c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e694:	f7ff ff9a 	bl	800e5cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e698:	2001      	movs	r0, #1
 800e69a:	f7fd fb1f 	bl	800bcdc <memp_malloc>
 800e69e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d11b      	bne.n	800e6de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e6a6:	2009      	movs	r0, #9
 800e6a8:	f7ff ff46 	bl	800e538 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6ac:	2001      	movs	r0, #1
 800e6ae:	f7fd fb15 	bl	800bcdc <memp_malloc>
 800e6b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d111      	bne.n	800e6de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e6ba:	2008      	movs	r0, #8
 800e6bc:	f7ff ff3c 	bl	800e538 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	f7fd fb0b 	bl	800bcdc <memp_malloc>
 800e6c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d107      	bne.n	800e6de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff fee3 	bl	800e49c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	f7fd fb00 	bl	800bcdc <memp_malloc>
 800e6dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d03f      	beq.n	800e764 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e6e4:	229c      	movs	r2, #156	@ 0x9c
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f008 fb71 	bl	8016dd0 <memset>
    pcb->prio = prio;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	79fa      	ldrb	r2, [r7, #7]
 800e6f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e6fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e704:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	22ff      	movs	r2, #255	@ 0xff
 800e712:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e71a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2206      	movs	r2, #6
 800e720:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2206      	movs	r2, #6
 800e728:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e730:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2201      	movs	r2, #1
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e73a:	4b0d      	ldr	r3, [pc, #52]	@ (800e770 <tcp_alloc+0xf8>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e742:	4b0c      	ldr	r3, [pc, #48]	@ (800e774 <tcp_alloc+0xfc>)
 800e744:	781a      	ldrb	r2, [r3, #0]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e750:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4a08      	ldr	r2, [pc, #32]	@ (800e778 <tcp_alloc+0x100>)
 800e758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4a07      	ldr	r2, [pc, #28]	@ (800e77c <tcp_alloc+0x104>)
 800e760:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e764:	68fb      	ldr	r3, [r7, #12]
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	2000d8a0 	.word	0x2000d8a0
 800e774:	2000d8b6 	.word	0x2000d8b6
 800e778:	0800e431 	.word	0x0800e431
 800e77c:	006ddd00 	.word	0x006ddd00

0800e780 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e78a:	2040      	movs	r0, #64	@ 0x40
 800e78c:	f7ff ff74 	bl	800e678 <tcp_alloc>
 800e790:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e792:	68fb      	ldr	r3, [r7, #12]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	611a      	str	r2, [r3, #16]
  }
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00e      	beq.n	800e7ee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	7d1b      	ldrb	r3, [r3, #20]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d106      	bne.n	800e7e6 <tcp_recv+0x26>
 800e7d8:	4b07      	ldr	r3, [pc, #28]	@ (800e7f8 <tcp_recv+0x38>)
 800e7da:	f240 72df 	movw	r2, #2015	@ 0x7df
 800e7de:	4907      	ldr	r1, [pc, #28]	@ (800e7fc <tcp_recv+0x3c>)
 800e7e0:	4807      	ldr	r0, [pc, #28]	@ (800e800 <tcp_recv+0x40>)
 800e7e2:	f008 fa97 	bl	8016d14 <iprintf>
    pcb->recv = recv;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800e7ee:	bf00      	nop
 800e7f0:	3708      	adds	r7, #8
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	08019bec 	.word	0x08019bec
 800e7fc:	0801a188 	.word	0x0801a188
 800e800:	08019c30 	.word	0x08019c30

0800e804 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00e      	beq.n	800e832 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7d1b      	ldrb	r3, [r3, #20]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d106      	bne.n	800e82a <tcp_sent+0x26>
 800e81c:	4b07      	ldr	r3, [pc, #28]	@ (800e83c <tcp_sent+0x38>)
 800e81e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e822:	4907      	ldr	r1, [pc, #28]	@ (800e840 <tcp_sent+0x3c>)
 800e824:	4807      	ldr	r0, [pc, #28]	@ (800e844 <tcp_sent+0x40>)
 800e826:	f008 fa75 	bl	8016d14 <iprintf>
    pcb->sent = sent;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e832:	bf00      	nop
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	08019bec 	.word	0x08019bec
 800e840:	0801a1b0 	.word	0x0801a1b0
 800e844:	08019c30 	.word	0x08019c30

0800e848 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00e      	beq.n	800e876 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	7d1b      	ldrb	r3, [r3, #20]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d106      	bne.n	800e86e <tcp_err+0x26>
 800e860:	4b07      	ldr	r3, [pc, #28]	@ (800e880 <tcp_err+0x38>)
 800e862:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e866:	4907      	ldr	r1, [pc, #28]	@ (800e884 <tcp_err+0x3c>)
 800e868:	4807      	ldr	r0, [pc, #28]	@ (800e888 <tcp_err+0x40>)
 800e86a:	f008 fa53 	bl	8016d14 <iprintf>
    pcb->errf = err;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	08019bec 	.word	0x08019bec
 800e884:	0801a1d8 	.word	0x0801a1d8
 800e888:	08019c30 	.word	0x08019c30

0800e88c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d008      	beq.n	800e8ae <tcp_accept+0x22>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	7d1b      	ldrb	r3, [r3, #20]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d104      	bne.n	800e8ae <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	619a      	str	r2, [r3, #24]
  }
}
 800e8ae:	bf00      	nop
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
	...

0800e8bc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d107      	bne.n	800e8e0 <tcp_poll+0x24>
 800e8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e90c <tcp_poll+0x50>)
 800e8d2:	f640 023d 	movw	r2, #2109	@ 0x83d
 800e8d6:	490e      	ldr	r1, [pc, #56]	@ (800e910 <tcp_poll+0x54>)
 800e8d8:	480e      	ldr	r0, [pc, #56]	@ (800e914 <tcp_poll+0x58>)
 800e8da:	f008 fa1b 	bl	8016d14 <iprintf>
 800e8de:	e011      	b.n	800e904 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d106      	bne.n	800e8f6 <tcp_poll+0x3a>
 800e8e8:	4b08      	ldr	r3, [pc, #32]	@ (800e90c <tcp_poll+0x50>)
 800e8ea:	f640 023e 	movw	r2, #2110	@ 0x83e
 800e8ee:	490a      	ldr	r1, [pc, #40]	@ (800e918 <tcp_poll+0x5c>)
 800e8f0:	4808      	ldr	r0, [pc, #32]	@ (800e914 <tcp_poll+0x58>)
 800e8f2:	f008 fa0f 	bl	8016d14 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	79fa      	ldrb	r2, [r7, #7]
 800e902:	775a      	strb	r2, [r3, #29]
}
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	08019bec 	.word	0x08019bec
 800e910:	0801a200 	.word	0x0801a200
 800e914:	08019c30 	.word	0x08019c30
 800e918:	0801a218 	.word	0x0801a218

0800e91c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d107      	bne.n	800e93a <tcp_pcb_purge+0x1e>
 800e92a:	4b21      	ldr	r3, [pc, #132]	@ (800e9b0 <tcp_pcb_purge+0x94>)
 800e92c:	f640 0251 	movw	r2, #2129	@ 0x851
 800e930:	4920      	ldr	r1, [pc, #128]	@ (800e9b4 <tcp_pcb_purge+0x98>)
 800e932:	4821      	ldr	r0, [pc, #132]	@ (800e9b8 <tcp_pcb_purge+0x9c>)
 800e934:	f008 f9ee 	bl	8016d14 <iprintf>
 800e938:	e037      	b.n	800e9aa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	7d1b      	ldrb	r3, [r3, #20]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d033      	beq.n	800e9aa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e946:	2b0a      	cmp	r3, #10
 800e948:	d02f      	beq.n	800e9aa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d02b      	beq.n	800e9aa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e956:	2b00      	cmp	r3, #0
 800e958:	d007      	beq.n	800e96a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe f8d6 	bl	800cb10 <pbuf_free>
      pcb->refused_data = NULL;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d002      	beq.n	800e978 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f986 	bl	800ec84 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e97e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff fcf9 	bl	800e37c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fcf4 	bl	800e37c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	08019bec 	.word	0x08019bec
 800e9b4:	0801a238 	.word	0x0801a238
 800e9b8:	08019c30 	.word	0x08019c30

0800e9bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d106      	bne.n	800e9da <tcp_pcb_remove+0x1e>
 800e9cc:	4b3e      	ldr	r3, [pc, #248]	@ (800eac8 <tcp_pcb_remove+0x10c>)
 800e9ce:	f640 0283 	movw	r2, #2179	@ 0x883
 800e9d2:	493e      	ldr	r1, [pc, #248]	@ (800eacc <tcp_pcb_remove+0x110>)
 800e9d4:	483e      	ldr	r0, [pc, #248]	@ (800ead0 <tcp_pcb_remove+0x114>)
 800e9d6:	f008 f99d 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d106      	bne.n	800e9ee <tcp_pcb_remove+0x32>
 800e9e0:	4b39      	ldr	r3, [pc, #228]	@ (800eac8 <tcp_pcb_remove+0x10c>)
 800e9e2:	f640 0284 	movw	r2, #2180	@ 0x884
 800e9e6:	493b      	ldr	r1, [pc, #236]	@ (800ead4 <tcp_pcb_remove+0x118>)
 800e9e8:	4839      	ldr	r0, [pc, #228]	@ (800ead0 <tcp_pcb_remove+0x114>)
 800e9ea:	f008 f993 	bl	8016d14 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d105      	bne.n	800ea04 <tcp_pcb_remove+0x48>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e013      	b.n	800ea2c <tcp_pcb_remove+0x70>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e00c      	b.n	800ea26 <tcp_pcb_remove+0x6a>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d104      	bne.n	800ea20 <tcp_pcb_remove+0x64>
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	68da      	ldr	r2, [r3, #12]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	60da      	str	r2, [r3, #12]
 800ea1e:	e005      	b.n	800ea2c <tcp_pcb_remove+0x70>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1ef      	bne.n	800ea0c <tcp_pcb_remove+0x50>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ea32:	6838      	ldr	r0, [r7, #0]
 800ea34:	f7ff ff72 	bl	800e91c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	2b0a      	cmp	r3, #10
 800ea3e:	d013      	beq.n	800ea68 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d00f      	beq.n	800ea68 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	8b5b      	ldrh	r3, [r3, #26]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d009      	beq.n	800ea68 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	8b5b      	ldrh	r3, [r3, #26]
 800ea58:	f043 0302 	orr.w	r3, r3, #2
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea62:	6838      	ldr	r0, [r7, #0]
 800ea64:	f003 fbc0 	bl	80121e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	7d1b      	ldrb	r3, [r3, #20]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d020      	beq.n	800eab2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d006      	beq.n	800ea86 <tcp_pcb_remove+0xca>
 800ea78:	4b13      	ldr	r3, [pc, #76]	@ (800eac8 <tcp_pcb_remove+0x10c>)
 800ea7a:	f640 0293 	movw	r2, #2195	@ 0x893
 800ea7e:	4916      	ldr	r1, [pc, #88]	@ (800ead8 <tcp_pcb_remove+0x11c>)
 800ea80:	4813      	ldr	r0, [pc, #76]	@ (800ead0 <tcp_pcb_remove+0x114>)
 800ea82:	f008 f947 	bl	8016d14 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d006      	beq.n	800ea9c <tcp_pcb_remove+0xe0>
 800ea8e:	4b0e      	ldr	r3, [pc, #56]	@ (800eac8 <tcp_pcb_remove+0x10c>)
 800ea90:	f640 0294 	movw	r2, #2196	@ 0x894
 800ea94:	4911      	ldr	r1, [pc, #68]	@ (800eadc <tcp_pcb_remove+0x120>)
 800ea96:	480e      	ldr	r0, [pc, #56]	@ (800ead0 <tcp_pcb_remove+0x114>)
 800ea98:	f008 f93c 	bl	8016d14 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d006      	beq.n	800eab2 <tcp_pcb_remove+0xf6>
 800eaa4:	4b08      	ldr	r3, [pc, #32]	@ (800eac8 <tcp_pcb_remove+0x10c>)
 800eaa6:	f640 0296 	movw	r2, #2198	@ 0x896
 800eaaa:	490d      	ldr	r1, [pc, #52]	@ (800eae0 <tcp_pcb_remove+0x124>)
 800eaac:	4808      	ldr	r0, [pc, #32]	@ (800ead0 <tcp_pcb_remove+0x114>)
 800eaae:	f008 f931 	bl	8016d14 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2200      	movs	r2, #0
 800eab6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2200      	movs	r2, #0
 800eabc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eabe:	bf00      	nop
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	08019bec 	.word	0x08019bec
 800eacc:	0801a254 	.word	0x0801a254
 800ead0:	08019c30 	.word	0x08019c30
 800ead4:	0801a270 	.word	0x0801a270
 800ead8:	0801a290 	.word	0x0801a290
 800eadc:	0801a2a8 	.word	0x0801a2a8
 800eae0:	0801a2c4 	.word	0x0801a2c4

0800eae4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d106      	bne.n	800eb00 <tcp_next_iss+0x1c>
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800eb1c <tcp_next_iss+0x38>)
 800eaf4:	f640 02af 	movw	r2, #2223	@ 0x8af
 800eaf8:	4909      	ldr	r1, [pc, #36]	@ (800eb20 <tcp_next_iss+0x3c>)
 800eafa:	480a      	ldr	r0, [pc, #40]	@ (800eb24 <tcp_next_iss+0x40>)
 800eafc:	f008 f90a 	bl	8016d14 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eb00:	4b09      	ldr	r3, [pc, #36]	@ (800eb28 <tcp_next_iss+0x44>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	4b09      	ldr	r3, [pc, #36]	@ (800eb2c <tcp_next_iss+0x48>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4413      	add	r3, r2
 800eb0a:	4a07      	ldr	r2, [pc, #28]	@ (800eb28 <tcp_next_iss+0x44>)
 800eb0c:	6013      	str	r3, [r2, #0]
  return iss;
 800eb0e:	4b06      	ldr	r3, [pc, #24]	@ (800eb28 <tcp_next_iss+0x44>)
 800eb10:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	08019bec 	.word	0x08019bec
 800eb20:	0801a2dc 	.word	0x0801a2dc
 800eb24:	08019c30 	.word	0x08019c30
 800eb28:	20000028 	.word	0x20000028
 800eb2c:	2000d8a0 	.word	0x2000d8a0

0800eb30 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	4603      	mov	r3, r0
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <tcp_eff_send_mss_netif+0x22>
 800eb44:	4b14      	ldr	r3, [pc, #80]	@ (800eb98 <tcp_eff_send_mss_netif+0x68>)
 800eb46:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800eb4a:	4914      	ldr	r1, [pc, #80]	@ (800eb9c <tcp_eff_send_mss_netif+0x6c>)
 800eb4c:	4814      	ldr	r0, [pc, #80]	@ (800eba0 <tcp_eff_send_mss_netif+0x70>)
 800eb4e:	f008 f8e1 	bl	8016d14 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eb58:	89fb      	ldrh	r3, [r7, #14]
 800eb5a:	e019      	b.n	800eb90 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eb60:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eb62:	8afb      	ldrh	r3, [r7, #22]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d012      	beq.n	800eb8e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eb68:	2328      	movs	r3, #40	@ 0x28
 800eb6a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eb6c:	8afa      	ldrh	r2, [r7, #22]
 800eb6e:	8abb      	ldrh	r3, [r7, #20]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d904      	bls.n	800eb7e <tcp_eff_send_mss_netif+0x4e>
 800eb74:	8afa      	ldrh	r2, [r7, #22]
 800eb76:	8abb      	ldrh	r3, [r7, #20]
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	e000      	b.n	800eb80 <tcp_eff_send_mss_netif+0x50>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eb82:	8a7a      	ldrh	r2, [r7, #18]
 800eb84:	89fb      	ldrh	r3, [r7, #14]
 800eb86:	4293      	cmp	r3, r2
 800eb88:	bf28      	it	cs
 800eb8a:	4613      	movcs	r3, r2
 800eb8c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eb8e:	89fb      	ldrh	r3, [r7, #14]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	08019bec 	.word	0x08019bec
 800eb9c:	0801a2f8 	.word	0x0801a2f8
 800eba0:	08019c30 	.word	0x08019c30

0800eba4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d119      	bne.n	800ebec <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ebb8:	4b10      	ldr	r3, [pc, #64]	@ (800ebfc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ebba:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ebbe:	4910      	ldr	r1, [pc, #64]	@ (800ec00 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ebc0:	4810      	ldr	r0, [pc, #64]	@ (800ec04 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ebc2:	f008 f8a7 	bl	8016d14 <iprintf>

  while (pcb != NULL) {
 800ebc6:	e011      	b.n	800ebec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d108      	bne.n	800ebe6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f7fe fd98 	bl	800d710 <tcp_abort>
      pcb = next;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	e002      	b.n	800ebec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1ea      	bne.n	800ebc8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ebf2:	bf00      	nop
 800ebf4:	bf00      	nop
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	08019bec 	.word	0x08019bec
 800ec00:	0801a320 	.word	0x0801a320
 800ec04:	08019c30 	.word	0x08019c30

0800ec08 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d02a      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d026      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ec20:	4b15      	ldr	r3, [pc, #84]	@ (800ec78 <tcp_netif_ip_addr_changed+0x70>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff ffbc 	bl	800eba4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ec2c:	4b13      	ldr	r3, [pc, #76]	@ (800ec7c <tcp_netif_ip_addr_changed+0x74>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff ffb6 	bl	800eba4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d017      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d013      	beq.n	800ec6e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec46:	4b0e      	ldr	r3, [pc, #56]	@ (800ec80 <tcp_netif_ip_addr_changed+0x78>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	e00c      	b.n	800ec68 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d103      	bne.n	800ec62 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1ef      	bne.n	800ec4e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	2000d8ac 	.word	0x2000d8ac
 800ec7c:	2000d8a4 	.word	0x2000d8a4
 800ec80:	2000d8a8 	.word	0x2000d8a8

0800ec84 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d007      	beq.n	800eca4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fb6f 	bl	800e37c <tcp_segs_free>
    pcb->ooseq = NULL;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b08d      	sub	sp, #52	@ 0x34
 800ecb0:	af04      	add	r7, sp, #16
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d105      	bne.n	800ecc8 <tcp_input+0x1c>
 800ecbc:	4b9b      	ldr	r3, [pc, #620]	@ (800ef2c <tcp_input+0x280>)
 800ecbe:	2283      	movs	r2, #131	@ 0x83
 800ecc0:	499b      	ldr	r1, [pc, #620]	@ (800ef30 <tcp_input+0x284>)
 800ecc2:	489c      	ldr	r0, [pc, #624]	@ (800ef34 <tcp_input+0x288>)
 800ecc4:	f008 f826 	bl	8016d14 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	4a9a      	ldr	r2, [pc, #616]	@ (800ef38 <tcp_input+0x28c>)
 800ecce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	895b      	ldrh	r3, [r3, #10]
 800ecd4:	2b13      	cmp	r3, #19
 800ecd6:	f240 83d1 	bls.w	800f47c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecda:	4b98      	ldr	r3, [pc, #608]	@ (800ef3c <tcp_input+0x290>)
 800ecdc:	695b      	ldr	r3, [r3, #20]
 800ecde:	4a97      	ldr	r2, [pc, #604]	@ (800ef3c <tcp_input+0x290>)
 800ece0:	6812      	ldr	r2, [r2, #0]
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f006 fc5f 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 83c7 	bne.w	800f480 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ecf2:	4b92      	ldr	r3, [pc, #584]	@ (800ef3c <tcp_input+0x290>)
 800ecf4:	695b      	ldr	r3, [r3, #20]
 800ecf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecfa:	2be0      	cmp	r3, #224	@ 0xe0
 800ecfc:	f000 83c0 	beq.w	800f480 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ed00:	4b8d      	ldr	r3, [pc, #564]	@ (800ef38 <tcp_input+0x28c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	899b      	ldrh	r3, [r3, #12]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fc fb0f 	bl	800b32c <lwip_htons>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	0b1b      	lsrs	r3, r3, #12
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ed1a:	7cbb      	ldrb	r3, [r7, #18]
 800ed1c:	2b13      	cmp	r3, #19
 800ed1e:	f240 83b1 	bls.w	800f484 <tcp_input+0x7d8>
 800ed22:	7cbb      	ldrb	r3, [r7, #18]
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	891b      	ldrh	r3, [r3, #8]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	f200 83aa 	bhi.w	800f484 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ed30:	7cbb      	ldrb	r3, [r7, #18]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	3b14      	subs	r3, #20
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	4b81      	ldr	r3, [pc, #516]	@ (800ef40 <tcp_input+0x294>)
 800ed3a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ed3c:	4b81      	ldr	r3, [pc, #516]	@ (800ef44 <tcp_input+0x298>)
 800ed3e:	2200      	movs	r2, #0
 800ed40:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	895a      	ldrh	r2, [r3, #10]
 800ed46:	7cbb      	ldrb	r3, [r7, #18]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d309      	bcc.n	800ed62 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ed4e:	4b7c      	ldr	r3, [pc, #496]	@ (800ef40 <tcp_input+0x294>)
 800ed50:	881a      	ldrh	r2, [r3, #0]
 800ed52:	4b7d      	ldr	r3, [pc, #500]	@ (800ef48 <tcp_input+0x29c>)
 800ed54:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ed56:	7cbb      	ldrb	r3, [r7, #18]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7fd fe52 	bl	800ca04 <pbuf_remove_header>
 800ed60:	e04e      	b.n	800ee00 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d105      	bne.n	800ed76 <tcp_input+0xca>
 800ed6a:	4b70      	ldr	r3, [pc, #448]	@ (800ef2c <tcp_input+0x280>)
 800ed6c:	22c2      	movs	r2, #194	@ 0xc2
 800ed6e:	4977      	ldr	r1, [pc, #476]	@ (800ef4c <tcp_input+0x2a0>)
 800ed70:	4870      	ldr	r0, [pc, #448]	@ (800ef34 <tcp_input+0x288>)
 800ed72:	f007 ffcf 	bl	8016d14 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ed76:	2114      	movs	r1, #20
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7fd fe43 	bl	800ca04 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	895a      	ldrh	r2, [r3, #10]
 800ed82:	4b71      	ldr	r3, [pc, #452]	@ (800ef48 <tcp_input+0x29c>)
 800ed84:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ed86:	4b6e      	ldr	r3, [pc, #440]	@ (800ef40 <tcp_input+0x294>)
 800ed88:	881a      	ldrh	r2, [r3, #0]
 800ed8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ef48 <tcp_input+0x29c>)
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ed92:	4b6d      	ldr	r3, [pc, #436]	@ (800ef48 <tcp_input+0x29c>)
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	4619      	mov	r1, r3
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7fd fe33 	bl	800ca04 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	895b      	ldrh	r3, [r3, #10]
 800eda4:	8a3a      	ldrh	r2, [r7, #16]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	f200 836e 	bhi.w	800f488 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	4a64      	ldr	r2, [pc, #400]	@ (800ef44 <tcp_input+0x298>)
 800edb4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	8a3a      	ldrh	r2, [r7, #16]
 800edbc:	4611      	mov	r1, r2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fd fe20 	bl	800ca04 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	891a      	ldrh	r2, [r3, #8]
 800edc8:	8a3b      	ldrh	r3, [r7, #16]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	895b      	ldrh	r3, [r3, #10]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <tcp_input+0x13a>
 800edda:	4b54      	ldr	r3, [pc, #336]	@ (800ef2c <tcp_input+0x280>)
 800eddc:	22df      	movs	r2, #223	@ 0xdf
 800edde:	495c      	ldr	r1, [pc, #368]	@ (800ef50 <tcp_input+0x2a4>)
 800ede0:	4854      	ldr	r0, [pc, #336]	@ (800ef34 <tcp_input+0x288>)
 800ede2:	f007 ff97 	bl	8016d14 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	891a      	ldrh	r2, [r3, #8]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	891b      	ldrh	r3, [r3, #8]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d005      	beq.n	800ee00 <tcp_input+0x154>
 800edf4:	4b4d      	ldr	r3, [pc, #308]	@ (800ef2c <tcp_input+0x280>)
 800edf6:	22e0      	movs	r2, #224	@ 0xe0
 800edf8:	4956      	ldr	r1, [pc, #344]	@ (800ef54 <tcp_input+0x2a8>)
 800edfa:	484e      	ldr	r0, [pc, #312]	@ (800ef34 <tcp_input+0x288>)
 800edfc:	f007 ff8a 	bl	8016d14 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ee00:	4b4d      	ldr	r3, [pc, #308]	@ (800ef38 <tcp_input+0x28c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	881b      	ldrh	r3, [r3, #0]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4a4b      	ldr	r2, [pc, #300]	@ (800ef38 <tcp_input+0x28c>)
 800ee0a:	6814      	ldr	r4, [r2, #0]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fc fa8d 	bl	800b32c <lwip_htons>
 800ee12:	4603      	mov	r3, r0
 800ee14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ee16:	4b48      	ldr	r3, [pc, #288]	@ (800ef38 <tcp_input+0x28c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	885b      	ldrh	r3, [r3, #2]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4a46      	ldr	r2, [pc, #280]	@ (800ef38 <tcp_input+0x28c>)
 800ee20:	6814      	ldr	r4, [r2, #0]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fc fa82 	bl	800b32c <lwip_htons>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ee2c:	4b42      	ldr	r3, [pc, #264]	@ (800ef38 <tcp_input+0x28c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	4a41      	ldr	r2, [pc, #260]	@ (800ef38 <tcp_input+0x28c>)
 800ee34:	6814      	ldr	r4, [r2, #0]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fc fa8d 	bl	800b356 <lwip_htonl>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	6063      	str	r3, [r4, #4]
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	4a45      	ldr	r2, [pc, #276]	@ (800ef58 <tcp_input+0x2ac>)
 800ee44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee46:	4b3c      	ldr	r3, [pc, #240]	@ (800ef38 <tcp_input+0x28c>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	4a3a      	ldr	r2, [pc, #232]	@ (800ef38 <tcp_input+0x28c>)
 800ee4e:	6814      	ldr	r4, [r2, #0]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fc fa80 	bl	800b356 <lwip_htonl>
 800ee56:	4603      	mov	r3, r0
 800ee58:	60a3      	str	r3, [r4, #8]
 800ee5a:	68a3      	ldr	r3, [r4, #8]
 800ee5c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef5c <tcp_input+0x2b0>)
 800ee5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee60:	4b35      	ldr	r3, [pc, #212]	@ (800ef38 <tcp_input+0x28c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	89db      	ldrh	r3, [r3, #14]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4a33      	ldr	r2, [pc, #204]	@ (800ef38 <tcp_input+0x28c>)
 800ee6a:	6814      	ldr	r4, [r2, #0]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fc fa5d 	bl	800b32c <lwip_htons>
 800ee72:	4603      	mov	r3, r0
 800ee74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ee76:	4b30      	ldr	r3, [pc, #192]	@ (800ef38 <tcp_input+0x28c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	899b      	ldrh	r3, [r3, #12]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fc fa54 	bl	800b32c <lwip_htons>
 800ee84:	4603      	mov	r3, r0
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b34      	ldr	r3, [pc, #208]	@ (800ef60 <tcp_input+0x2b4>)
 800ee90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	891a      	ldrh	r2, [r3, #8]
 800ee96:	4b33      	ldr	r3, [pc, #204]	@ (800ef64 <tcp_input+0x2b8>)
 800ee98:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee9a:	4b31      	ldr	r3, [pc, #196]	@ (800ef60 <tcp_input+0x2b4>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	f003 0303 	and.w	r3, r3, #3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00c      	beq.n	800eec0 <tcp_input+0x214>
    tcplen++;
 800eea6:	4b2f      	ldr	r3, [pc, #188]	@ (800ef64 <tcp_input+0x2b8>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	4b2d      	ldr	r3, [pc, #180]	@ (800ef64 <tcp_input+0x2b8>)
 800eeb0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	891a      	ldrh	r2, [r3, #8]
 800eeb6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef64 <tcp_input+0x2b8>)
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	f200 82e6 	bhi.w	800f48c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec4:	4b28      	ldr	r3, [pc, #160]	@ (800ef68 <tcp_input+0x2bc>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	61fb      	str	r3, [r7, #28]
 800eeca:	e09d      	b.n	800f008 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <tcp_input+0x234>
 800eed4:	4b15      	ldr	r3, [pc, #84]	@ (800ef2c <tcp_input+0x280>)
 800eed6:	22fb      	movs	r2, #251	@ 0xfb
 800eed8:	4924      	ldr	r1, [pc, #144]	@ (800ef6c <tcp_input+0x2c0>)
 800eeda:	4816      	ldr	r0, [pc, #88]	@ (800ef34 <tcp_input+0x288>)
 800eedc:	f007 ff1a 	bl	8016d14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	7d1b      	ldrb	r3, [r3, #20]
 800eee4:	2b0a      	cmp	r3, #10
 800eee6:	d105      	bne.n	800eef4 <tcp_input+0x248>
 800eee8:	4b10      	ldr	r3, [pc, #64]	@ (800ef2c <tcp_input+0x280>)
 800eeea:	22fc      	movs	r2, #252	@ 0xfc
 800eeec:	4920      	ldr	r1, [pc, #128]	@ (800ef70 <tcp_input+0x2c4>)
 800eeee:	4811      	ldr	r0, [pc, #68]	@ (800ef34 <tcp_input+0x288>)
 800eef0:	f007 ff10 	bl	8016d14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d105      	bne.n	800ef08 <tcp_input+0x25c>
 800eefc:	4b0b      	ldr	r3, [pc, #44]	@ (800ef2c <tcp_input+0x280>)
 800eefe:	22fd      	movs	r2, #253	@ 0xfd
 800ef00:	491c      	ldr	r1, [pc, #112]	@ (800ef74 <tcp_input+0x2c8>)
 800ef02:	480c      	ldr	r0, [pc, #48]	@ (800ef34 <tcp_input+0x288>)
 800ef04:	f007 ff06 	bl	8016d14 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	7a1b      	ldrb	r3, [r3, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d033      	beq.n	800ef78 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	7a1a      	ldrb	r2, [r3, #8]
 800ef14:	4b09      	ldr	r3, [pc, #36]	@ (800ef3c <tcp_input+0x290>)
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d029      	beq.n	800ef78 <tcp_input+0x2cc>
      prev = pcb;
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	61bb      	str	r3, [r7, #24]
      continue;
 800ef28:	e06b      	b.n	800f002 <tcp_input+0x356>
 800ef2a:	bf00      	nop
 800ef2c:	0801a354 	.word	0x0801a354
 800ef30:	0801a388 	.word	0x0801a388
 800ef34:	0801a3a0 	.word	0x0801a3a0
 800ef38:	2000d8c8 	.word	0x2000d8c8
 800ef3c:	2000a14c 	.word	0x2000a14c
 800ef40:	2000d8cc 	.word	0x2000d8cc
 800ef44:	2000d8d0 	.word	0x2000d8d0
 800ef48:	2000d8ce 	.word	0x2000d8ce
 800ef4c:	0801a3c8 	.word	0x0801a3c8
 800ef50:	0801a3d8 	.word	0x0801a3d8
 800ef54:	0801a3e4 	.word	0x0801a3e4
 800ef58:	2000d8d8 	.word	0x2000d8d8
 800ef5c:	2000d8dc 	.word	0x2000d8dc
 800ef60:	2000d8e4 	.word	0x2000d8e4
 800ef64:	2000d8e2 	.word	0x2000d8e2
 800ef68:	2000d8ac 	.word	0x2000d8ac
 800ef6c:	0801a404 	.word	0x0801a404
 800ef70:	0801a42c 	.word	0x0801a42c
 800ef74:	0801a458 	.word	0x0801a458
    }

    if (pcb->remote_port == tcphdr->src &&
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	8b1a      	ldrh	r2, [r3, #24]
 800ef7c:	4b72      	ldr	r3, [pc, #456]	@ (800f148 <tcp_input+0x49c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d13a      	bne.n	800effe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	8ada      	ldrh	r2, [r3, #22]
 800ef8c:	4b6e      	ldr	r3, [pc, #440]	@ (800f148 <tcp_input+0x49c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	885b      	ldrh	r3, [r3, #2]
 800ef92:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d132      	bne.n	800effe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	4b6b      	ldr	r3, [pc, #428]	@ (800f14c <tcp_input+0x4a0>)
 800ef9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d12c      	bne.n	800effe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	4b68      	ldr	r3, [pc, #416]	@ (800f14c <tcp_input+0x4a0>)
 800efaa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efac:	429a      	cmp	r2, r3
 800efae:	d126      	bne.n	800effe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	69fa      	ldr	r2, [r7, #28]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d106      	bne.n	800efc8 <tcp_input+0x31c>
 800efba:	4b65      	ldr	r3, [pc, #404]	@ (800f150 <tcp_input+0x4a4>)
 800efbc:	f240 120d 	movw	r2, #269	@ 0x10d
 800efc0:	4964      	ldr	r1, [pc, #400]	@ (800f154 <tcp_input+0x4a8>)
 800efc2:	4865      	ldr	r0, [pc, #404]	@ (800f158 <tcp_input+0x4ac>)
 800efc4:	f007 fea6 	bl	8016d14 <iprintf>
      if (prev != NULL) {
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00a      	beq.n	800efe4 <tcp_input+0x338>
        prev->next = pcb->next;
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800efd6:	4b61      	ldr	r3, [pc, #388]	@ (800f15c <tcp_input+0x4b0>)
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800efde:	4a5f      	ldr	r2, [pc, #380]	@ (800f15c <tcp_input+0x4b0>)
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	69fa      	ldr	r2, [r7, #28]
 800efea:	429a      	cmp	r2, r3
 800efec:	d111      	bne.n	800f012 <tcp_input+0x366>
 800efee:	4b58      	ldr	r3, [pc, #352]	@ (800f150 <tcp_input+0x4a4>)
 800eff0:	f240 1215 	movw	r2, #277	@ 0x115
 800eff4:	495a      	ldr	r1, [pc, #360]	@ (800f160 <tcp_input+0x4b4>)
 800eff6:	4858      	ldr	r0, [pc, #352]	@ (800f158 <tcp_input+0x4ac>)
 800eff8:	f007 fe8c 	bl	8016d14 <iprintf>
      break;
 800effc:	e009      	b.n	800f012 <tcp_input+0x366>
    }
    prev = pcb;
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	61fb      	str	r3, [r7, #28]
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f47f af5e 	bne.w	800eecc <tcp_input+0x220>
 800f010:	e000      	b.n	800f014 <tcp_input+0x368>
      break;
 800f012:	bf00      	nop
  }

  if (pcb == NULL) {
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f040 80aa 	bne.w	800f170 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f01c:	4b51      	ldr	r3, [pc, #324]	@ (800f164 <tcp_input+0x4b8>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	61fb      	str	r3, [r7, #28]
 800f022:	e03f      	b.n	800f0a4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
 800f028:	2b0a      	cmp	r3, #10
 800f02a:	d006      	beq.n	800f03a <tcp_input+0x38e>
 800f02c:	4b48      	ldr	r3, [pc, #288]	@ (800f150 <tcp_input+0x4a4>)
 800f02e:	f240 121f 	movw	r2, #287	@ 0x11f
 800f032:	494d      	ldr	r1, [pc, #308]	@ (800f168 <tcp_input+0x4bc>)
 800f034:	4848      	ldr	r0, [pc, #288]	@ (800f158 <tcp_input+0x4ac>)
 800f036:	f007 fe6d 	bl	8016d14 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	7a1b      	ldrb	r3, [r3, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d009      	beq.n	800f056 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	7a1a      	ldrb	r2, [r3, #8]
 800f046:	4b41      	ldr	r3, [pc, #260]	@ (800f14c <tcp_input+0x4a0>)
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f04e:	3301      	adds	r3, #1
 800f050:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f052:	429a      	cmp	r2, r3
 800f054:	d122      	bne.n	800f09c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	8b1a      	ldrh	r2, [r3, #24]
 800f05a:	4b3b      	ldr	r3, [pc, #236]	@ (800f148 <tcp_input+0x49c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	b29b      	uxth	r3, r3
 800f062:	429a      	cmp	r2, r3
 800f064:	d11b      	bne.n	800f09e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	8ada      	ldrh	r2, [r3, #22]
 800f06a:	4b37      	ldr	r3, [pc, #220]	@ (800f148 <tcp_input+0x49c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	885b      	ldrh	r3, [r3, #2]
 800f070:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f072:	429a      	cmp	r2, r3
 800f074:	d113      	bne.n	800f09e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	4b34      	ldr	r3, [pc, #208]	@ (800f14c <tcp_input+0x4a0>)
 800f07c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f07e:	429a      	cmp	r2, r3
 800f080:	d10d      	bne.n	800f09e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	4b31      	ldr	r3, [pc, #196]	@ (800f14c <tcp_input+0x4a0>)
 800f088:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d107      	bne.n	800f09e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f08e:	69f8      	ldr	r0, [r7, #28]
 800f090:	f000 fb56 	bl	800f740 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fd fd3b 	bl	800cb10 <pbuf_free>
        return;
 800f09a:	e1fd      	b.n	800f498 <tcp_input+0x7ec>
        continue;
 800f09c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	61fb      	str	r3, [r7, #28]
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1bc      	bne.n	800f024 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0ae:	4b2f      	ldr	r3, [pc, #188]	@ (800f16c <tcp_input+0x4c0>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	e02a      	b.n	800f10c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	7a1b      	ldrb	r3, [r3, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00c      	beq.n	800f0d8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	7a1a      	ldrb	r2, [r3, #8]
 800f0c2:	4b22      	ldr	r3, [pc, #136]	@ (800f14c <tcp_input+0x4a0>)
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d002      	beq.n	800f0d8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	61bb      	str	r3, [r7, #24]
        continue;
 800f0d6:	e016      	b.n	800f106 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	8ada      	ldrh	r2, [r3, #22]
 800f0dc:	4b1a      	ldr	r3, [pc, #104]	@ (800f148 <tcp_input+0x49c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	885b      	ldrh	r3, [r3, #2]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d10c      	bne.n	800f102 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	4b17      	ldr	r3, [pc, #92]	@ (800f14c <tcp_input+0x4a0>)
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d00f      	beq.n	800f114 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00d      	beq.n	800f116 <tcp_input+0x46a>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d009      	beq.n	800f116 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1d1      	bne.n	800f0b6 <tcp_input+0x40a>
 800f112:	e000      	b.n	800f116 <tcp_input+0x46a>
            break;
 800f114:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d029      	beq.n	800f170 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	68da      	ldr	r2, [r3, #12]
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f12a:	4b10      	ldr	r3, [pc, #64]	@ (800f16c <tcp_input+0x4c0>)
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f132:	4a0e      	ldr	r2, [pc, #56]	@ (800f16c <tcp_input+0x4c0>)
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f138:	6978      	ldr	r0, [r7, #20]
 800f13a:	f000 fa03 	bl	800f544 <tcp_listen_input>
      }
      pbuf_free(p);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7fd fce6 	bl	800cb10 <pbuf_free>
      return;
 800f144:	e1a8      	b.n	800f498 <tcp_input+0x7ec>
 800f146:	bf00      	nop
 800f148:	2000d8c8 	.word	0x2000d8c8
 800f14c:	2000a14c 	.word	0x2000a14c
 800f150:	0801a354 	.word	0x0801a354
 800f154:	0801a480 	.word	0x0801a480
 800f158:	0801a3a0 	.word	0x0801a3a0
 800f15c:	2000d8ac 	.word	0x2000d8ac
 800f160:	0801a4ac 	.word	0x0801a4ac
 800f164:	2000d8b0 	.word	0x2000d8b0
 800f168:	0801a4d8 	.word	0x0801a4d8
 800f16c:	2000d8a8 	.word	0x2000d8a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 8158 	beq.w	800f428 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f178:	4b95      	ldr	r3, [pc, #596]	@ (800f3d0 <tcp_input+0x724>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	891a      	ldrh	r2, [r3, #8]
 800f182:	4b93      	ldr	r3, [pc, #588]	@ (800f3d0 <tcp_input+0x724>)
 800f184:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f186:	4a92      	ldr	r2, [pc, #584]	@ (800f3d0 <tcp_input+0x724>)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f18c:	4b91      	ldr	r3, [pc, #580]	@ (800f3d4 <tcp_input+0x728>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a8f      	ldr	r2, [pc, #572]	@ (800f3d0 <tcp_input+0x724>)
 800f192:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f194:	4b90      	ldr	r3, [pc, #576]	@ (800f3d8 <tcp_input+0x72c>)
 800f196:	2200      	movs	r2, #0
 800f198:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f19a:	4b90      	ldr	r3, [pc, #576]	@ (800f3dc <tcp_input+0x730>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f1a0:	4b8f      	ldr	r3, [pc, #572]	@ (800f3e0 <tcp_input+0x734>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f1a6:	4b8f      	ldr	r3, [pc, #572]	@ (800f3e4 <tcp_input+0x738>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0308 	and.w	r3, r3, #8
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7b5b      	ldrb	r3, [r3, #13]
 800f1b6:	f043 0301 	orr.w	r3, r3, #1
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d017      	beq.n	800f1f8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f1c8:	69f8      	ldr	r0, [r7, #28]
 800f1ca:	f7ff f85b 	bl	800e284 <tcp_process_refused_data>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f113 0f0d 	cmn.w	r3, #13
 800f1d4:	d007      	beq.n	800f1e6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00c      	beq.n	800f1f8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f1de:	4b82      	ldr	r3, [pc, #520]	@ (800f3e8 <tcp_input+0x73c>)
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d008      	beq.n	800f1f8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f040 80e3 	bne.w	800f3b6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f1f0:	69f8      	ldr	r0, [r7, #28]
 800f1f2:	f003 fdff 	bl	8012df4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f1f6:	e0de      	b.n	800f3b6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f1f8:	4a7c      	ldr	r2, [pc, #496]	@ (800f3ec <tcp_input+0x740>)
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f1fe:	69f8      	ldr	r0, [r7, #28]
 800f200:	f000 fb18 	bl	800f834 <tcp_process>
 800f204:	4603      	mov	r3, r0
 800f206:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f208:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f20c:	f113 0f0d 	cmn.w	r3, #13
 800f210:	f000 80d3 	beq.w	800f3ba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f214:	4b71      	ldr	r3, [pc, #452]	@ (800f3dc <tcp_input+0x730>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0308 	and.w	r3, r3, #8
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d015      	beq.n	800f24c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f226:	2b00      	cmp	r3, #0
 800f228:	d008      	beq.n	800f23c <tcp_input+0x590>
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f230:	69fa      	ldr	r2, [r7, #28]
 800f232:	6912      	ldr	r2, [r2, #16]
 800f234:	f06f 010d 	mvn.w	r1, #13
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f23c:	69f9      	ldr	r1, [r7, #28]
 800f23e:	486c      	ldr	r0, [pc, #432]	@ (800f3f0 <tcp_input+0x744>)
 800f240:	f7ff fbbc 	bl	800e9bc <tcp_pcb_remove>
        tcp_free(pcb);
 800f244:	69f8      	ldr	r0, [r7, #28]
 800f246:	f7fd ff1f 	bl	800d088 <tcp_free>
 800f24a:	e0da      	b.n	800f402 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f250:	4b63      	ldr	r3, [pc, #396]	@ (800f3e0 <tcp_input+0x734>)
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01d      	beq.n	800f294 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f258:	4b61      	ldr	r3, [pc, #388]	@ (800f3e0 <tcp_input+0x734>)
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00a      	beq.n	800f27e <tcp_input+0x5d2>
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	6910      	ldr	r0, [r2, #16]
 800f272:	89fa      	ldrh	r2, [r7, #14]
 800f274:	69f9      	ldr	r1, [r7, #28]
 800f276:	4798      	blx	r3
 800f278:	4603      	mov	r3, r0
 800f27a:	74fb      	strb	r3, [r7, #19]
 800f27c:	e001      	b.n	800f282 <tcp_input+0x5d6>
 800f27e:	2300      	movs	r3, #0
 800f280:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f286:	f113 0f0d 	cmn.w	r3, #13
 800f28a:	f000 8098 	beq.w	800f3be <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f28e:	4b54      	ldr	r3, [pc, #336]	@ (800f3e0 <tcp_input+0x734>)
 800f290:	2200      	movs	r2, #0
 800f292:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f294:	69f8      	ldr	r0, [r7, #28]
 800f296:	f000 f915 	bl	800f4c4 <tcp_input_delayed_close>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f040 8090 	bne.w	800f3c2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f2a2:	4b4d      	ldr	r3, [pc, #308]	@ (800f3d8 <tcp_input+0x72c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d041      	beq.n	800f32e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d006      	beq.n	800f2c0 <tcp_input+0x614>
 800f2b2:	4b50      	ldr	r3, [pc, #320]	@ (800f3f4 <tcp_input+0x748>)
 800f2b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f2b8:	494f      	ldr	r1, [pc, #316]	@ (800f3f8 <tcp_input+0x74c>)
 800f2ba:	4850      	ldr	r0, [pc, #320]	@ (800f3fc <tcp_input+0x750>)
 800f2bc:	f007 fd2a 	bl	8016d14 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	8b5b      	ldrh	r3, [r3, #26]
 800f2c4:	f003 0310 	and.w	r3, r3, #16
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d008      	beq.n	800f2de <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f2cc:	4b42      	ldr	r3, [pc, #264]	@ (800f3d8 <tcp_input+0x72c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd fc1d 	bl	800cb10 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f2d6:	69f8      	ldr	r0, [r7, #28]
 800f2d8:	f7fe fa1a 	bl	800d710 <tcp_abort>
            goto aborted;
 800f2dc:	e091      	b.n	800f402 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00c      	beq.n	800f302 <tcp_input+0x656>
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	6918      	ldr	r0, [r3, #16]
 800f2f2:	4b39      	ldr	r3, [pc, #228]	@ (800f3d8 <tcp_input+0x72c>)
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	69f9      	ldr	r1, [r7, #28]
 800f2fa:	47a0      	blx	r4
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	74fb      	strb	r3, [r7, #19]
 800f300:	e008      	b.n	800f314 <tcp_input+0x668>
 800f302:	4b35      	ldr	r3, [pc, #212]	@ (800f3d8 <tcp_input+0x72c>)
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	2300      	movs	r3, #0
 800f308:	69f9      	ldr	r1, [r7, #28]
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7ff f890 	bl	800e430 <tcp_recv_null>
 800f310:	4603      	mov	r3, r0
 800f312:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f314:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f318:	f113 0f0d 	cmn.w	r3, #13
 800f31c:	d053      	beq.n	800f3c6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f31e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f326:	4b2c      	ldr	r3, [pc, #176]	@ (800f3d8 <tcp_input+0x72c>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f32e:	4b2b      	ldr	r3, [pc, #172]	@ (800f3dc <tcp_input+0x730>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	f003 0320 	and.w	r3, r3, #32
 800f336:	2b00      	cmp	r3, #0
 800f338:	d030      	beq.n	800f39c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f346:	7b5a      	ldrb	r2, [r3, #13]
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f34c:	f042 0220 	orr.w	r2, r2, #32
 800f350:	b2d2      	uxtb	r2, r2
 800f352:	735a      	strb	r2, [r3, #13]
 800f354:	e022      	b.n	800f39c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f35a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f35e:	d005      	beq.n	800f36c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f364:	3301      	adds	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00b      	beq.n	800f38e <tcp_input+0x6e2>
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	6918      	ldr	r0, [r3, #16]
 800f380:	2300      	movs	r3, #0
 800f382:	2200      	movs	r2, #0
 800f384:	69f9      	ldr	r1, [r7, #28]
 800f386:	47a0      	blx	r4
 800f388:	4603      	mov	r3, r0
 800f38a:	74fb      	strb	r3, [r7, #19]
 800f38c:	e001      	b.n	800f392 <tcp_input+0x6e6>
 800f38e:	2300      	movs	r3, #0
 800f390:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f396:	f113 0f0d 	cmn.w	r3, #13
 800f39a:	d016      	beq.n	800f3ca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f39c:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <tcp_input+0x740>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f3a2:	69f8      	ldr	r0, [r7, #28]
 800f3a4:	f000 f88e 	bl	800f4c4 <tcp_input_delayed_close>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d128      	bne.n	800f400 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f3ae:	69f8      	ldr	r0, [r7, #28]
 800f3b0:	f002 ff1a 	bl	80121e8 <tcp_output>
 800f3b4:	e025      	b.n	800f402 <tcp_input+0x756>
        goto aborted;
 800f3b6:	bf00      	nop
 800f3b8:	e023      	b.n	800f402 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f3ba:	bf00      	nop
 800f3bc:	e021      	b.n	800f402 <tcp_input+0x756>
              goto aborted;
 800f3be:	bf00      	nop
 800f3c0:	e01f      	b.n	800f402 <tcp_input+0x756>
          goto aborted;
 800f3c2:	bf00      	nop
 800f3c4:	e01d      	b.n	800f402 <tcp_input+0x756>
            goto aborted;
 800f3c6:	bf00      	nop
 800f3c8:	e01b      	b.n	800f402 <tcp_input+0x756>
              goto aborted;
 800f3ca:	bf00      	nop
 800f3cc:	e019      	b.n	800f402 <tcp_input+0x756>
 800f3ce:	bf00      	nop
 800f3d0:	2000d8b8 	.word	0x2000d8b8
 800f3d4:	2000d8c8 	.word	0x2000d8c8
 800f3d8:	2000d8e8 	.word	0x2000d8e8
 800f3dc:	2000d8e5 	.word	0x2000d8e5
 800f3e0:	2000d8e0 	.word	0x2000d8e0
 800f3e4:	2000d8e4 	.word	0x2000d8e4
 800f3e8:	2000d8e2 	.word	0x2000d8e2
 800f3ec:	2000d8ec 	.word	0x2000d8ec
 800f3f0:	2000d8ac 	.word	0x2000d8ac
 800f3f4:	0801a354 	.word	0x0801a354
 800f3f8:	0801a508 	.word	0x0801a508
 800f3fc:	0801a3a0 	.word	0x0801a3a0
          goto aborted;
 800f400:	bf00      	nop
    tcp_input_pcb = NULL;
 800f402:	4b27      	ldr	r3, [pc, #156]	@ (800f4a0 <tcp_input+0x7f4>)
 800f404:	2200      	movs	r2, #0
 800f406:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f408:	4b26      	ldr	r3, [pc, #152]	@ (800f4a4 <tcp_input+0x7f8>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f40e:	4b26      	ldr	r3, [pc, #152]	@ (800f4a8 <tcp_input+0x7fc>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d03f      	beq.n	800f496 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f416:	4b24      	ldr	r3, [pc, #144]	@ (800f4a8 <tcp_input+0x7fc>)
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd fb78 	bl	800cb10 <pbuf_free>
      inseg.p = NULL;
 800f420:	4b21      	ldr	r3, [pc, #132]	@ (800f4a8 <tcp_input+0x7fc>)
 800f422:	2200      	movs	r2, #0
 800f424:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f426:	e036      	b.n	800f496 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f428:	4b20      	ldr	r3, [pc, #128]	@ (800f4ac <tcp_input+0x800>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	899b      	ldrh	r3, [r3, #12]
 800f42e:	b29b      	uxth	r3, r3
 800f430:	4618      	mov	r0, r3
 800f432:	f7fb ff7b 	bl	800b32c <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	f003 0304 	and.w	r3, r3, #4
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d118      	bne.n	800f474 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f442:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b0 <tcp_input+0x804>)
 800f444:	6819      	ldr	r1, [r3, #0]
 800f446:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b4 <tcp_input+0x808>)
 800f448:	881b      	ldrh	r3, [r3, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b8 <tcp_input+0x80c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f452:	4b16      	ldr	r3, [pc, #88]	@ (800f4ac <tcp_input+0x800>)
 800f454:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f45a:	4a14      	ldr	r2, [pc, #80]	@ (800f4ac <tcp_input+0x800>)
 800f45c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f45e:	8812      	ldrh	r2, [r2, #0]
 800f460:	b292      	uxth	r2, r2
 800f462:	9202      	str	r2, [sp, #8]
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	4b15      	ldr	r3, [pc, #84]	@ (800f4bc <tcp_input+0x810>)
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	4b15      	ldr	r3, [pc, #84]	@ (800f4c0 <tcp_input+0x814>)
 800f46c:	4602      	mov	r2, r0
 800f46e:	2000      	movs	r0, #0
 800f470:	f003 fc6e 	bl	8012d50 <tcp_rst>
    pbuf_free(p);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7fd fb4b 	bl	800cb10 <pbuf_free>
  return;
 800f47a:	e00c      	b.n	800f496 <tcp_input+0x7ea>
    goto dropped;
 800f47c:	bf00      	nop
 800f47e:	e006      	b.n	800f48e <tcp_input+0x7e2>
    goto dropped;
 800f480:	bf00      	nop
 800f482:	e004      	b.n	800f48e <tcp_input+0x7e2>
    goto dropped;
 800f484:	bf00      	nop
 800f486:	e002      	b.n	800f48e <tcp_input+0x7e2>
      goto dropped;
 800f488:	bf00      	nop
 800f48a:	e000      	b.n	800f48e <tcp_input+0x7e2>
      goto dropped;
 800f48c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7fd fb3e 	bl	800cb10 <pbuf_free>
 800f494:	e000      	b.n	800f498 <tcp_input+0x7ec>
  return;
 800f496:	bf00      	nop
}
 800f498:	3724      	adds	r7, #36	@ 0x24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd90      	pop	{r4, r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	2000d8ec 	.word	0x2000d8ec
 800f4a4:	2000d8e8 	.word	0x2000d8e8
 800f4a8:	2000d8b8 	.word	0x2000d8b8
 800f4ac:	2000d8c8 	.word	0x2000d8c8
 800f4b0:	2000d8dc 	.word	0x2000d8dc
 800f4b4:	2000d8e2 	.word	0x2000d8e2
 800f4b8:	2000d8d8 	.word	0x2000d8d8
 800f4bc:	2000a15c 	.word	0x2000a15c
 800f4c0:	2000a160 	.word	0x2000a160

0800f4c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <tcp_input_delayed_close+0x1c>
 800f4d2:	4b17      	ldr	r3, [pc, #92]	@ (800f530 <tcp_input_delayed_close+0x6c>)
 800f4d4:	f240 225a 	movw	r2, #602	@ 0x25a
 800f4d8:	4916      	ldr	r1, [pc, #88]	@ (800f534 <tcp_input_delayed_close+0x70>)
 800f4da:	4817      	ldr	r0, [pc, #92]	@ (800f538 <tcp_input_delayed_close+0x74>)
 800f4dc:	f007 fc1a 	bl	8016d14 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f4e0:	4b16      	ldr	r3, [pc, #88]	@ (800f53c <tcp_input_delayed_close+0x78>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	f003 0310 	and.w	r3, r3, #16
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01c      	beq.n	800f526 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8b5b      	ldrh	r3, [r3, #26]
 800f4f0:	f003 0310 	and.w	r3, r3, #16
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10d      	bne.n	800f514 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d008      	beq.n	800f514 <tcp_input_delayed_close+0x50>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	6912      	ldr	r2, [r2, #16]
 800f50c:	f06f 010e 	mvn.w	r1, #14
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f514:	6879      	ldr	r1, [r7, #4]
 800f516:	480a      	ldr	r0, [pc, #40]	@ (800f540 <tcp_input_delayed_close+0x7c>)
 800f518:	f7ff fa50 	bl	800e9bc <tcp_pcb_remove>
    tcp_free(pcb);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7fd fdb3 	bl	800d088 <tcp_free>
    return 1;
 800f522:	2301      	movs	r3, #1
 800f524:	e000      	b.n	800f528 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f526:	2300      	movs	r3, #0
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	0801a354 	.word	0x0801a354
 800f534:	0801a524 	.word	0x0801a524
 800f538:	0801a3a0 	.word	0x0801a3a0
 800f53c:	2000d8e5 	.word	0x2000d8e5
 800f540:	2000d8ac 	.word	0x2000d8ac

0800f544 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b08b      	sub	sp, #44	@ 0x2c
 800f548:	af04      	add	r7, sp, #16
 800f54a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f54c:	4b6f      	ldr	r3, [pc, #444]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0304 	and.w	r3, r3, #4
 800f554:	2b00      	cmp	r3, #0
 800f556:	f040 80d2 	bne.w	800f6fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d106      	bne.n	800f56e <tcp_listen_input+0x2a>
 800f560:	4b6b      	ldr	r3, [pc, #428]	@ (800f710 <tcp_listen_input+0x1cc>)
 800f562:	f240 2281 	movw	r2, #641	@ 0x281
 800f566:	496b      	ldr	r1, [pc, #428]	@ (800f714 <tcp_listen_input+0x1d0>)
 800f568:	486b      	ldr	r0, [pc, #428]	@ (800f718 <tcp_listen_input+0x1d4>)
 800f56a:	f007 fbd3 	bl	8016d14 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f56e:	4b67      	ldr	r3, [pc, #412]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f003 0310 	and.w	r3, r3, #16
 800f576:	2b00      	cmp	r3, #0
 800f578:	d019      	beq.n	800f5ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f57a:	4b68      	ldr	r3, [pc, #416]	@ (800f71c <tcp_listen_input+0x1d8>)
 800f57c:	6819      	ldr	r1, [r3, #0]
 800f57e:	4b68      	ldr	r3, [pc, #416]	@ (800f720 <tcp_listen_input+0x1dc>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	4b67      	ldr	r3, [pc, #412]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f58a:	4b67      	ldr	r3, [pc, #412]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f58c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f58e:	885b      	ldrh	r3, [r3, #2]
 800f590:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f592:	4a65      	ldr	r2, [pc, #404]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f594:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f596:	8812      	ldrh	r2, [r2, #0]
 800f598:	b292      	uxth	r2, r2
 800f59a:	9202      	str	r2, [sp, #8]
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	4b63      	ldr	r3, [pc, #396]	@ (800f72c <tcp_listen_input+0x1e8>)
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	4b63      	ldr	r3, [pc, #396]	@ (800f730 <tcp_listen_input+0x1ec>)
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f003 fbd2 	bl	8012d50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f5ac:	e0a9      	b.n	800f702 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f5ae:	4b57      	ldr	r3, [pc, #348]	@ (800f70c <tcp_listen_input+0x1c8>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	f003 0302 	and.w	r3, r3, #2
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f000 80a3 	beq.w	800f702 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	7d5b      	ldrb	r3, [r3, #21]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7ff f859 	bl	800e678 <tcp_alloc>
 800f5c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d111      	bne.n	800f5f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	699b      	ldr	r3, [r3, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00a      	beq.n	800f5ec <tcp_listen_input+0xa8>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	6910      	ldr	r0, [r2, #16]
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	4798      	blx	r3
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	73bb      	strb	r3, [r7, #14]
      return;
 800f5ea:	e08b      	b.n	800f704 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5ec:	23f0      	movs	r3, #240	@ 0xf0
 800f5ee:	73bb      	strb	r3, [r7, #14]
      return;
 800f5f0:	e088      	b.n	800f704 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f5f2:	4b50      	ldr	r3, [pc, #320]	@ (800f734 <tcp_listen_input+0x1f0>)
 800f5f4:	695a      	ldr	r2, [r3, #20]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f5fa:	4b4e      	ldr	r3, [pc, #312]	@ (800f734 <tcp_listen_input+0x1f0>)
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	8ada      	ldrh	r2, [r3, #22]
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f60a:	4b47      	ldr	r3, [pc, #284]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	b29a      	uxth	r2, r3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	2203      	movs	r2, #3
 800f61a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f61c:	4b41      	ldr	r3, [pc, #260]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f62e:	6978      	ldr	r0, [r7, #20]
 800f630:	f7ff fa58 	bl	800eae4 <tcp_next_iss>
 800f634:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	693a      	ldr	r2, [r7, #16]
 800f646:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f64e:	4b35      	ldr	r3, [pc, #212]	@ (800f724 <tcp_listen_input+0x1e0>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	1e5a      	subs	r2, r3, #1
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	691a      	ldr	r2, [r3, #16]
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	7a5b      	ldrb	r3, [r3, #9]
 800f66a:	f003 030c 	and.w	r3, r3, #12
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	7a1a      	ldrb	r2, [r3, #8]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f67c:	4b2e      	ldr	r3, [pc, #184]	@ (800f738 <tcp_listen_input+0x1f4>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	60da      	str	r2, [r3, #12]
 800f684:	4a2c      	ldr	r2, [pc, #176]	@ (800f738 <tcp_listen_input+0x1f4>)
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	f003 fd23 	bl	80130d4 <tcp_timer_needed>
 800f68e:	4b2b      	ldr	r3, [pc, #172]	@ (800f73c <tcp_listen_input+0x1f8>)
 800f690:	2201      	movs	r2, #1
 800f692:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f694:	6978      	ldr	r0, [r7, #20]
 800f696:	f001 fd8b 	bl	80111b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f69a:	4b23      	ldr	r3, [pc, #140]	@ (800f728 <tcp_listen_input+0x1e4>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	89db      	ldrh	r3, [r3, #14]
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f005 fcdd 	bl	801507c <ip4_route>
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f7ff fa30 	bl	800eb30 <tcp_eff_send_mss_netif>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f6d8:	2112      	movs	r1, #18
 800f6da:	6978      	ldr	r0, [r7, #20]
 800f6dc:	f002 fc96 	bl	801200c <tcp_enqueue_flags>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	6978      	ldr	r0, [r7, #20]
 800f6f0:	f7fd ff50 	bl	800d594 <tcp_abandon>
      return;
 800f6f4:	e006      	b.n	800f704 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f6f6:	6978      	ldr	r0, [r7, #20]
 800f6f8:	f002 fd76 	bl	80121e8 <tcp_output>
  return;
 800f6fc:	e001      	b.n	800f702 <tcp_listen_input+0x1be>
    return;
 800f6fe:	bf00      	nop
 800f700:	e000      	b.n	800f704 <tcp_listen_input+0x1c0>
  return;
 800f702:	bf00      	nop
}
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	bd90      	pop	{r4, r7, pc}
 800f70a:	bf00      	nop
 800f70c:	2000d8e4 	.word	0x2000d8e4
 800f710:	0801a354 	.word	0x0801a354
 800f714:	0801a54c 	.word	0x0801a54c
 800f718:	0801a3a0 	.word	0x0801a3a0
 800f71c:	2000d8dc 	.word	0x2000d8dc
 800f720:	2000d8e2 	.word	0x2000d8e2
 800f724:	2000d8d8 	.word	0x2000d8d8
 800f728:	2000d8c8 	.word	0x2000d8c8
 800f72c:	2000a15c 	.word	0x2000a15c
 800f730:	2000a160 	.word	0x2000a160
 800f734:	2000a14c 	.word	0x2000a14c
 800f738:	2000d8ac 	.word	0x2000d8ac
 800f73c:	2000d8b4 	.word	0x2000d8b4

0800f740 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af04      	add	r7, sp, #16
 800f746:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f748:	4b2f      	ldr	r3, [pc, #188]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b00      	cmp	r3, #0
 800f752:	d153      	bne.n	800f7fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <tcp_timewait_input+0x28>
 800f75a:	4b2c      	ldr	r3, [pc, #176]	@ (800f80c <tcp_timewait_input+0xcc>)
 800f75c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f760:	492b      	ldr	r1, [pc, #172]	@ (800f810 <tcp_timewait_input+0xd0>)
 800f762:	482c      	ldr	r0, [pc, #176]	@ (800f814 <tcp_timewait_input+0xd4>)
 800f764:	f007 fad6 	bl	8016d14 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f768:	4b27      	ldr	r3, [pc, #156]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d02a      	beq.n	800f7ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f774:	4b28      	ldr	r3, [pc, #160]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	db2d      	blt.n	800f7de <tcp_timewait_input+0x9e>
 800f782:	4b25      	ldr	r3, [pc, #148]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f78e:	440b      	add	r3, r1
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	dc23      	bgt.n	800f7de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f796:	4b21      	ldr	r3, [pc, #132]	@ (800f81c <tcp_timewait_input+0xdc>)
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	4b21      	ldr	r3, [pc, #132]	@ (800f820 <tcp_timewait_input+0xe0>)
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f818 <tcp_timewait_input+0xd8>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800f824 <tcp_timewait_input+0xe4>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7aa:	885b      	ldrh	r3, [r3, #2]
 800f7ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7ae:	4a1d      	ldr	r2, [pc, #116]	@ (800f824 <tcp_timewait_input+0xe4>)
 800f7b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7b2:	8812      	ldrh	r2, [r2, #0]
 800f7b4:	b292      	uxth	r2, r2
 800f7b6:	9202      	str	r2, [sp, #8]
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f828 <tcp_timewait_input+0xe8>)
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	4b1b      	ldr	r3, [pc, #108]	@ (800f82c <tcp_timewait_input+0xec>)
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f003 fac4 	bl	8012d50 <tcp_rst>
      return;
 800f7c8:	e01b      	b.n	800f802 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f7ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f808 <tcp_timewait_input+0xc8>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d003      	beq.n	800f7de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f7d6:	4b16      	ldr	r3, [pc, #88]	@ (800f830 <tcp_timewait_input+0xf0>)
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f7de:	4b10      	ldr	r3, [pc, #64]	@ (800f820 <tcp_timewait_input+0xe0>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00c      	beq.n	800f800 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ea:	f043 0302 	orr.w	r3, r3, #2
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f002 fcf7 	bl	80121e8 <tcp_output>
  }
  return;
 800f7fa:	e001      	b.n	800f800 <tcp_timewait_input+0xc0>
    return;
 800f7fc:	bf00      	nop
 800f7fe:	e000      	b.n	800f802 <tcp_timewait_input+0xc2>
  return;
 800f800:	bf00      	nop
}
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	2000d8e4 	.word	0x2000d8e4
 800f80c:	0801a354 	.word	0x0801a354
 800f810:	0801a56c 	.word	0x0801a56c
 800f814:	0801a3a0 	.word	0x0801a3a0
 800f818:	2000d8d8 	.word	0x2000d8d8
 800f81c:	2000d8dc 	.word	0x2000d8dc
 800f820:	2000d8e2 	.word	0x2000d8e2
 800f824:	2000d8c8 	.word	0x2000d8c8
 800f828:	2000a15c 	.word	0x2000a15c
 800f82c:	2000a160 	.word	0x2000a160
 800f830:	2000d8a0 	.word	0x2000d8a0

0800f834 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b08d      	sub	sp, #52	@ 0x34
 800f838:	af04      	add	r7, sp, #16
 800f83a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f83c:	2300      	movs	r3, #0
 800f83e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d106      	bne.n	800f858 <tcp_process+0x24>
 800f84a:	4b9d      	ldr	r3, [pc, #628]	@ (800fac0 <tcp_process+0x28c>)
 800f84c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f850:	499c      	ldr	r1, [pc, #624]	@ (800fac4 <tcp_process+0x290>)
 800f852:	489d      	ldr	r0, [pc, #628]	@ (800fac8 <tcp_process+0x294>)
 800f854:	f007 fa5e 	bl	8016d14 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f858:	4b9c      	ldr	r3, [pc, #624]	@ (800facc <tcp_process+0x298>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	f003 0304 	and.w	r3, r3, #4
 800f860:	2b00      	cmp	r3, #0
 800f862:	d04e      	beq.n	800f902 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	7d1b      	ldrb	r3, [r3, #20]
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d108      	bne.n	800f87e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f870:	4b97      	ldr	r3, [pc, #604]	@ (800fad0 <tcp_process+0x29c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	429a      	cmp	r2, r3
 800f876:	d123      	bne.n	800f8c0 <tcp_process+0x8c>
        acceptable = 1;
 800f878:	2301      	movs	r3, #1
 800f87a:	76fb      	strb	r3, [r7, #27]
 800f87c:	e020      	b.n	800f8c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f882:	4b94      	ldr	r3, [pc, #592]	@ (800fad4 <tcp_process+0x2a0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	d102      	bne.n	800f890 <tcp_process+0x5c>
        acceptable = 1;
 800f88a:	2301      	movs	r3, #1
 800f88c:	76fb      	strb	r3, [r7, #27]
 800f88e:	e017      	b.n	800f8c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f890:	4b90      	ldr	r3, [pc, #576]	@ (800fad4 <tcp_process+0x2a0>)
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	db10      	blt.n	800f8c0 <tcp_process+0x8c>
 800f89e:	4b8d      	ldr	r3, [pc, #564]	@ (800fad4 <tcp_process+0x2a0>)
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a6:	6879      	ldr	r1, [r7, #4]
 800f8a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f8aa:	440b      	add	r3, r1
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dc06      	bgt.n	800f8c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	8b5b      	ldrh	r3, [r3, #26]
 800f8b6:	f043 0302 	orr.w	r3, r3, #2
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f8c0:	7efb      	ldrb	r3, [r7, #27]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01b      	beq.n	800f8fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	7d1b      	ldrb	r3, [r3, #20]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d106      	bne.n	800f8dc <tcp_process+0xa8>
 800f8ce:	4b7c      	ldr	r3, [pc, #496]	@ (800fac0 <tcp_process+0x28c>)
 800f8d0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f8d4:	4980      	ldr	r1, [pc, #512]	@ (800fad8 <tcp_process+0x2a4>)
 800f8d6:	487c      	ldr	r0, [pc, #496]	@ (800fac8 <tcp_process+0x294>)
 800f8d8:	f007 fa1c 	bl	8016d14 <iprintf>
      recv_flags |= TF_RESET;
 800f8dc:	4b7f      	ldr	r3, [pc, #508]	@ (800fadc <tcp_process+0x2a8>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	f043 0308 	orr.w	r3, r3, #8
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4b7d      	ldr	r3, [pc, #500]	@ (800fadc <tcp_process+0x2a8>)
 800f8e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8b5b      	ldrh	r3, [r3, #26]
 800f8ee:	f023 0301 	bic.w	r3, r3, #1
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f8f8:	f06f 030d 	mvn.w	r3, #13
 800f8fc:	e37a      	b.n	800fff4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e378      	b.n	800fff4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f902:	4b72      	ldr	r3, [pc, #456]	@ (800facc <tcp_process+0x298>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d010      	beq.n	800f930 <tcp_process+0xfc>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7d1b      	ldrb	r3, [r3, #20]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d00c      	beq.n	800f930 <tcp_process+0xfc>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7d1b      	ldrb	r3, [r3, #20]
 800f91a:	2b03      	cmp	r3, #3
 800f91c:	d008      	beq.n	800f930 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	8b5b      	ldrh	r3, [r3, #26]
 800f922:	f043 0302 	orr.w	r3, r3, #2
 800f926:	b29a      	uxth	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e361      	b.n	800fff4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	8b5b      	ldrh	r3, [r3, #26]
 800f934:	f003 0310 	and.w	r3, r3, #16
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d103      	bne.n	800f944 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f93c:	4b68      	ldr	r3, [pc, #416]	@ (800fae0 <tcp_process+0x2ac>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f001 fc2b 	bl	80111b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7d1b      	ldrb	r3, [r3, #20]
 800f95e:	3b02      	subs	r3, #2
 800f960:	2b07      	cmp	r3, #7
 800f962:	f200 8337 	bhi.w	800ffd4 <tcp_process+0x7a0>
 800f966:	a201      	add	r2, pc, #4	@ (adr r2, 800f96c <tcp_process+0x138>)
 800f968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f96c:	0800f98d 	.word	0x0800f98d
 800f970:	0800fbbd 	.word	0x0800fbbd
 800f974:	0800fd35 	.word	0x0800fd35
 800f978:	0800fd5f 	.word	0x0800fd5f
 800f97c:	0800fe83 	.word	0x0800fe83
 800f980:	0800fd35 	.word	0x0800fd35
 800f984:	0800ff0f 	.word	0x0800ff0f
 800f988:	0800ff9f 	.word	0x0800ff9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f98c:	4b4f      	ldr	r3, [pc, #316]	@ (800facc <tcp_process+0x298>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f003 0310 	and.w	r3, r3, #16
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 80e4 	beq.w	800fb62 <tcp_process+0x32e>
 800f99a:	4b4c      	ldr	r3, [pc, #304]	@ (800facc <tcp_process+0x298>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	f003 0302 	and.w	r3, r3, #2
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f000 80dd 	beq.w	800fb62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ac:	1c5a      	adds	r2, r3, #1
 800f9ae:	4b48      	ldr	r3, [pc, #288]	@ (800fad0 <tcp_process+0x29c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	f040 80d5 	bne.w	800fb62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f9b8:	4b46      	ldr	r3, [pc, #280]	@ (800fad4 <tcp_process+0x2a0>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	1c5a      	adds	r2, r3, #1
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f9ca:	4b41      	ldr	r3, [pc, #260]	@ (800fad0 <tcp_process+0x29c>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f9d2:	4b44      	ldr	r3, [pc, #272]	@ (800fae4 <tcp_process+0x2b0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	89db      	ldrh	r3, [r3, #14]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9ec:	4b39      	ldr	r3, [pc, #228]	@ (800fad4 <tcp_process+0x2a0>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	1e5a      	subs	r2, r3, #1
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3304      	adds	r3, #4
 800fa04:	4618      	mov	r0, r3
 800fa06:	f005 fb39 	bl	801507c <ip4_route>
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	461a      	mov	r2, r3
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff f88c 	bl	800eb30 <tcp_eff_send_mss_netif>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa24:	009a      	lsls	r2, r3, #2
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa2a:	005b      	lsls	r3, r3, #1
 800fa2c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fa30:	428b      	cmp	r3, r1
 800fa32:	bf38      	it	cc
 800fa34:	460b      	movcc	r3, r1
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d204      	bcs.n	800fa44 <tcp_process+0x210>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	e00d      	b.n	800fa60 <tcp_process+0x22c>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d904      	bls.n	800fa5c <tcp_process+0x228>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	e001      	b.n	800fa60 <tcp_process+0x22c>
 800fa5c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <tcp_process+0x24a>
 800fa70:	4b13      	ldr	r3, [pc, #76]	@ (800fac0 <tcp_process+0x28c>)
 800fa72:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fa76:	491c      	ldr	r1, [pc, #112]	@ (800fae8 <tcp_process+0x2b4>)
 800fa78:	4813      	ldr	r0, [pc, #76]	@ (800fac8 <tcp_process+0x294>)
 800fa7a:	f007 f94b 	bl	8016d14 <iprintf>
        --pcb->snd_queuelen;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa84:	3b01      	subs	r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d12a      	bne.n	800faf0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <tcp_process+0x280>
 800faa6:	4b06      	ldr	r3, [pc, #24]	@ (800fac0 <tcp_process+0x28c>)
 800faa8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800faac:	490f      	ldr	r1, [pc, #60]	@ (800faec <tcp_process+0x2b8>)
 800faae:	4806      	ldr	r0, [pc, #24]	@ (800fac8 <tcp_process+0x294>)
 800fab0:	f007 f930 	bl	8016d14 <iprintf>
          pcb->unsent = rseg->next;
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fabc:	e01c      	b.n	800faf8 <tcp_process+0x2c4>
 800fabe:	bf00      	nop
 800fac0:	0801a354 	.word	0x0801a354
 800fac4:	0801a58c 	.word	0x0801a58c
 800fac8:	0801a3a0 	.word	0x0801a3a0
 800facc:	2000d8e4 	.word	0x2000d8e4
 800fad0:	2000d8dc 	.word	0x2000d8dc
 800fad4:	2000d8d8 	.word	0x2000d8d8
 800fad8:	0801a5a8 	.word	0x0801a5a8
 800fadc:	2000d8e5 	.word	0x2000d8e5
 800fae0:	2000d8a0 	.word	0x2000d8a0
 800fae4:	2000d8c8 	.word	0x2000d8c8
 800fae8:	0801a5c8 	.word	0x0801a5c8
 800faec:	0801a5e0 	.word	0x0801a5e0
        } else {
          pcb->unacked = rseg->next;
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800faf8:	69f8      	ldr	r0, [r7, #28]
 800fafa:	f7fe fc54 	bl	800e3a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d104      	bne.n	800fb10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb0c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fb0e:	e006      	b.n	800fb1e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <tcp_process+0x30a>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6910      	ldr	r0, [r2, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	4798      	blx	r3
 800fb38:	4603      	mov	r3, r0
 800fb3a:	76bb      	strb	r3, [r7, #26]
 800fb3c:	e001      	b.n	800fb42 <tcp_process+0x30e>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fb42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb46:	f113 0f0d 	cmn.w	r3, #13
 800fb4a:	d102      	bne.n	800fb52 <tcp_process+0x31e>
          return ERR_ABRT;
 800fb4c:	f06f 030c 	mvn.w	r3, #12
 800fb50:	e250      	b.n	800fff4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8b5b      	ldrh	r3, [r3, #26]
 800fb56:	f043 0302 	orr.w	r3, r3, #2
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fb60:	e23a      	b.n	800ffd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fb62:	4b98      	ldr	r3, [pc, #608]	@ (800fdc4 <tcp_process+0x590>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0310 	and.w	r3, r3, #16
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f000 8234 	beq.w	800ffd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb70:	4b95      	ldr	r3, [pc, #596]	@ (800fdc8 <tcp_process+0x594>)
 800fb72:	6819      	ldr	r1, [r3, #0]
 800fb74:	4b95      	ldr	r3, [pc, #596]	@ (800fdcc <tcp_process+0x598>)
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b95      	ldr	r3, [pc, #596]	@ (800fdd0 <tcp_process+0x59c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb80:	4b94      	ldr	r3, [pc, #592]	@ (800fdd4 <tcp_process+0x5a0>)
 800fb82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb84:	885b      	ldrh	r3, [r3, #2]
 800fb86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb88:	4a92      	ldr	r2, [pc, #584]	@ (800fdd4 <tcp_process+0x5a0>)
 800fb8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8c:	8812      	ldrh	r2, [r2, #0]
 800fb8e:	b292      	uxth	r2, r2
 800fb90:	9202      	str	r2, [sp, #8]
 800fb92:	9301      	str	r3, [sp, #4]
 800fb94:	4b90      	ldr	r3, [pc, #576]	@ (800fdd8 <tcp_process+0x5a4>)
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	4b90      	ldr	r3, [pc, #576]	@ (800fddc <tcp_process+0x5a8>)
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f003 f8d7 	bl	8012d50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fba8:	2b05      	cmp	r3, #5
 800fbaa:	f200 8215 	bhi.w	800ffd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f002 fea3 	bl	8012900 <tcp_rexmit_rto>
      break;
 800fbba:	e20d      	b.n	800ffd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fbbc:	4b81      	ldr	r3, [pc, #516]	@ (800fdc4 <tcp_process+0x590>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f003 0310 	and.w	r3, r3, #16
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 80a1 	beq.w	800fd0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbca:	4b7f      	ldr	r3, [pc, #508]	@ (800fdc8 <tcp_process+0x594>)
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	db7e      	blt.n	800fcd8 <tcp_process+0x4a4>
 800fbda:	4b7b      	ldr	r3, [pc, #492]	@ (800fdc8 <tcp_process+0x594>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dc77      	bgt.n	800fcd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2204      	movs	r2, #4
 800fbec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d102      	bne.n	800fbfc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fbf6:	23fa      	movs	r3, #250	@ 0xfa
 800fbf8:	76bb      	strb	r3, [r7, #26]
 800fbfa:	e01d      	b.n	800fc38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc00:	699b      	ldr	r3, [r3, #24]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_process+0x3e0>
 800fc06:	4b76      	ldr	r3, [pc, #472]	@ (800fde0 <tcp_process+0x5ac>)
 800fc08:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fc0c:	4975      	ldr	r1, [pc, #468]	@ (800fde4 <tcp_process+0x5b0>)
 800fc0e:	4876      	ldr	r0, [pc, #472]	@ (800fde8 <tcp_process+0x5b4>)
 800fc10:	f007 f880 	bl	8016d14 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00a      	beq.n	800fc34 <tcp_process+0x400>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc22:	699b      	ldr	r3, [r3, #24]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	6910      	ldr	r0, [r2, #16]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	6879      	ldr	r1, [r7, #4]
 800fc2c:	4798      	blx	r3
 800fc2e:	4603      	mov	r3, r0
 800fc30:	76bb      	strb	r3, [r7, #26]
 800fc32:	e001      	b.n	800fc38 <tcp_process+0x404>
 800fc34:	23f0      	movs	r3, #240	@ 0xf0
 800fc36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fc38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00a      	beq.n	800fc56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fc40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc44:	f113 0f0d 	cmn.w	r3, #13
 800fc48:	d002      	beq.n	800fc50 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fd fd60 	bl	800d710 <tcp_abort>
            }
            return ERR_ABRT;
 800fc50:	f06f 030c 	mvn.w	r3, #12
 800fc54:	e1ce      	b.n	800fff4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fae0 	bl	801021c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fc5c:	4b63      	ldr	r3, [pc, #396]	@ (800fdec <tcp_process+0x5b8>)
 800fc5e:	881b      	ldrh	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d005      	beq.n	800fc70 <tcp_process+0x43c>
            recv_acked--;
 800fc64:	4b61      	ldr	r3, [pc, #388]	@ (800fdec <tcp_process+0x5b8>)
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	4b5f      	ldr	r3, [pc, #380]	@ (800fdec <tcp_process+0x5b8>)
 800fc6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc74:	009a      	lsls	r2, r3, #2
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fc80:	428b      	cmp	r3, r1
 800fc82:	bf38      	it	cc
 800fc84:	460b      	movcc	r3, r1
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d204      	bcs.n	800fc94 <tcp_process+0x460>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	e00d      	b.n	800fcb0 <tcp_process+0x47c>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d904      	bls.n	800fcac <tcp_process+0x478>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fca6:	005b      	lsls	r3, r3, #1
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	e001      	b.n	800fcb0 <tcp_process+0x47c>
 800fcac:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fcb6:	4b4e      	ldr	r3, [pc, #312]	@ (800fdf0 <tcp_process+0x5bc>)
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 0320 	and.w	r3, r3, #32
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d037      	beq.n	800fd32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8b5b      	ldrh	r3, [r3, #26]
 800fcc6:	f043 0302 	orr.w	r3, r3, #2
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2207      	movs	r2, #7
 800fcd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fcd6:	e02c      	b.n	800fd32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcd8:	4b3b      	ldr	r3, [pc, #236]	@ (800fdc8 <tcp_process+0x594>)
 800fcda:	6819      	ldr	r1, [r3, #0]
 800fcdc:	4b3b      	ldr	r3, [pc, #236]	@ (800fdcc <tcp_process+0x598>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b3b      	ldr	r3, [pc, #236]	@ (800fdd0 <tcp_process+0x59c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fce8:	4b3a      	ldr	r3, [pc, #232]	@ (800fdd4 <tcp_process+0x5a0>)
 800fcea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcec:	885b      	ldrh	r3, [r3, #2]
 800fcee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf0:	4a38      	ldr	r2, [pc, #224]	@ (800fdd4 <tcp_process+0x5a0>)
 800fcf2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf4:	8812      	ldrh	r2, [r2, #0]
 800fcf6:	b292      	uxth	r2, r2
 800fcf8:	9202      	str	r2, [sp, #8]
 800fcfa:	9301      	str	r3, [sp, #4]
 800fcfc:	4b36      	ldr	r3, [pc, #216]	@ (800fdd8 <tcp_process+0x5a4>)
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	4b36      	ldr	r3, [pc, #216]	@ (800fddc <tcp_process+0x5a8>)
 800fd02:	4602      	mov	r2, r0
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f003 f823 	bl	8012d50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fd0a:	e167      	b.n	800ffdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800fdc4 <tcp_process+0x590>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0302 	and.w	r3, r3, #2
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 8161 	beq.w	800ffdc <tcp_process+0x7a8>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd1e:	1e5a      	subs	r2, r3, #1
 800fd20:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd0 <tcp_process+0x59c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	f040 8159 	bne.w	800ffdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f002 fe0a 	bl	8012944 <tcp_rexmit>
      break;
 800fd30:	e154      	b.n	800ffdc <tcp_process+0x7a8>
 800fd32:	e153      	b.n	800ffdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 fa71 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fd3a:	4b2d      	ldr	r3, [pc, #180]	@ (800fdf0 <tcp_process+0x5bc>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 814c 	beq.w	800ffe0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	8b5b      	ldrh	r3, [r3, #26]
 800fd4c:	f043 0302 	orr.w	r3, r3, #2
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2207      	movs	r2, #7
 800fd5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fd5c:	e140      	b.n	800ffe0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fa5c 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd64:	4b22      	ldr	r3, [pc, #136]	@ (800fdf0 <tcp_process+0x5bc>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 0320 	and.w	r3, r3, #32
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d071      	beq.n	800fe54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd70:	4b14      	ldr	r3, [pc, #80]	@ (800fdc4 <tcp_process+0x590>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d060      	beq.n	800fe3e <tcp_process+0x60a>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd80:	4b11      	ldr	r3, [pc, #68]	@ (800fdc8 <tcp_process+0x594>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d15a      	bne.n	800fe3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d156      	bne.n	800fe3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	8b5b      	ldrh	r3, [r3, #26]
 800fd94:	f043 0302 	orr.w	r3, r3, #2
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7fe fdbc 	bl	800e91c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fda4:	4b13      	ldr	r3, [pc, #76]	@ (800fdf4 <tcp_process+0x5c0>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d105      	bne.n	800fdba <tcp_process+0x586>
 800fdae:	4b11      	ldr	r3, [pc, #68]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	4a0f      	ldr	r2, [pc, #60]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	e02e      	b.n	800fe18 <tcp_process+0x5e4>
 800fdba:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf4 <tcp_process+0x5c0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	617b      	str	r3, [r7, #20]
 800fdc0:	e027      	b.n	800fe12 <tcp_process+0x5de>
 800fdc2:	bf00      	nop
 800fdc4:	2000d8e4 	.word	0x2000d8e4
 800fdc8:	2000d8dc 	.word	0x2000d8dc
 800fdcc:	2000d8e2 	.word	0x2000d8e2
 800fdd0:	2000d8d8 	.word	0x2000d8d8
 800fdd4:	2000d8c8 	.word	0x2000d8c8
 800fdd8:	2000a15c 	.word	0x2000a15c
 800fddc:	2000a160 	.word	0x2000a160
 800fde0:	0801a354 	.word	0x0801a354
 800fde4:	0801a5f4 	.word	0x0801a5f4
 800fde8:	0801a3a0 	.word	0x0801a3a0
 800fdec:	2000d8e0 	.word	0x2000d8e0
 800fdf0:	2000d8e5 	.word	0x2000d8e5
 800fdf4:	2000d8ac 	.word	0x2000d8ac
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d104      	bne.n	800fe0c <tcp_process+0x5d8>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	60da      	str	r2, [r3, #12]
 800fe0a:	e005      	b.n	800fe18 <tcp_process+0x5e4>
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	617b      	str	r3, [r7, #20]
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1ef      	bne.n	800fdf8 <tcp_process+0x5c4>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	60da      	str	r2, [r3, #12]
 800fe1e:	4b77      	ldr	r3, [pc, #476]	@ (800fffc <tcp_process+0x7c8>)
 800fe20:	2201      	movs	r2, #1
 800fe22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	220a      	movs	r2, #10
 800fe28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fe2a:	4b75      	ldr	r3, [pc, #468]	@ (8010000 <tcp_process+0x7cc>)
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	60da      	str	r2, [r3, #12]
 800fe32:	4a73      	ldr	r2, [pc, #460]	@ (8010000 <tcp_process+0x7cc>)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6013      	str	r3, [r2, #0]
 800fe38:	f003 f94c 	bl	80130d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fe3c:	e0d2      	b.n	800ffe4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8b5b      	ldrh	r3, [r3, #26]
 800fe42:	f043 0302 	orr.w	r3, r3, #2
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2208      	movs	r2, #8
 800fe50:	751a      	strb	r2, [r3, #20]
      break;
 800fe52:	e0c7      	b.n	800ffe4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe54:	4b6b      	ldr	r3, [pc, #428]	@ (8010004 <tcp_process+0x7d0>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 0310 	and.w	r3, r3, #16
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80c1 	beq.w	800ffe4 <tcp_process+0x7b0>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe66:	4b68      	ldr	r3, [pc, #416]	@ (8010008 <tcp_process+0x7d4>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	f040 80ba 	bne.w	800ffe4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f040 80b5 	bne.w	800ffe4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2206      	movs	r2, #6
 800fe7e:	751a      	strb	r2, [r3, #20]
      break;
 800fe80:	e0b0      	b.n	800ffe4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 f9ca 	bl	801021c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe88:	4b60      	ldr	r3, [pc, #384]	@ (801000c <tcp_process+0x7d8>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 0320 	and.w	r3, r3, #32
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 80a9 	beq.w	800ffe8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8b5b      	ldrh	r3, [r3, #26]
 800fe9a:	f043 0302 	orr.w	r3, r3, #2
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7fe fd39 	bl	800e91c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800feaa:	4b59      	ldr	r3, [pc, #356]	@ (8010010 <tcp_process+0x7dc>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d105      	bne.n	800fec0 <tcp_process+0x68c>
 800feb4:	4b56      	ldr	r3, [pc, #344]	@ (8010010 <tcp_process+0x7dc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	4a55      	ldr	r2, [pc, #340]	@ (8010010 <tcp_process+0x7dc>)
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	e013      	b.n	800fee8 <tcp_process+0x6b4>
 800fec0:	4b53      	ldr	r3, [pc, #332]	@ (8010010 <tcp_process+0x7dc>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	613b      	str	r3, [r7, #16]
 800fec6:	e00c      	b.n	800fee2 <tcp_process+0x6ae>
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d104      	bne.n	800fedc <tcp_process+0x6a8>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68da      	ldr	r2, [r3, #12]
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	60da      	str	r2, [r3, #12]
 800feda:	e005      	b.n	800fee8 <tcp_process+0x6b4>
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	613b      	str	r3, [r7, #16]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1ef      	bne.n	800fec8 <tcp_process+0x694>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	60da      	str	r2, [r3, #12]
 800feee:	4b43      	ldr	r3, [pc, #268]	@ (800fffc <tcp_process+0x7c8>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	220a      	movs	r2, #10
 800fef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fefa:	4b41      	ldr	r3, [pc, #260]	@ (8010000 <tcp_process+0x7cc>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	60da      	str	r2, [r3, #12]
 800ff02:	4a3f      	ldr	r2, [pc, #252]	@ (8010000 <tcp_process+0x7cc>)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	f003 f8e4 	bl	80130d4 <tcp_timer_needed>
      }
      break;
 800ff0c:	e06c      	b.n	800ffe8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f984 	bl	801021c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff14:	4b3b      	ldr	r3, [pc, #236]	@ (8010004 <tcp_process+0x7d0>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 0310 	and.w	r3, r3, #16
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d065      	beq.n	800ffec <tcp_process+0x7b8>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff24:	4b38      	ldr	r3, [pc, #224]	@ (8010008 <tcp_process+0x7d4>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d15f      	bne.n	800ffec <tcp_process+0x7b8>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d15b      	bne.n	800ffec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fe fcf1 	bl	800e91c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff3a:	4b35      	ldr	r3, [pc, #212]	@ (8010010 <tcp_process+0x7dc>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d105      	bne.n	800ff50 <tcp_process+0x71c>
 800ff44:	4b32      	ldr	r3, [pc, #200]	@ (8010010 <tcp_process+0x7dc>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	4a31      	ldr	r2, [pc, #196]	@ (8010010 <tcp_process+0x7dc>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	e013      	b.n	800ff78 <tcp_process+0x744>
 800ff50:	4b2f      	ldr	r3, [pc, #188]	@ (8010010 <tcp_process+0x7dc>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	60fb      	str	r3, [r7, #12]
 800ff56:	e00c      	b.n	800ff72 <tcp_process+0x73e>
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d104      	bne.n	800ff6c <tcp_process+0x738>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	68da      	ldr	r2, [r3, #12]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	60da      	str	r2, [r3, #12]
 800ff6a:	e005      	b.n	800ff78 <tcp_process+0x744>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	60fb      	str	r3, [r7, #12]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1ef      	bne.n	800ff58 <tcp_process+0x724>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	4b1f      	ldr	r3, [pc, #124]	@ (800fffc <tcp_process+0x7c8>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	220a      	movs	r2, #10
 800ff88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ff8a:	4b1d      	ldr	r3, [pc, #116]	@ (8010000 <tcp_process+0x7cc>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	60da      	str	r2, [r3, #12]
 800ff92:	4a1b      	ldr	r2, [pc, #108]	@ (8010000 <tcp_process+0x7cc>)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	f003 f89c 	bl	80130d4 <tcp_timer_needed>
      }
      break;
 800ff9c:	e026      	b.n	800ffec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f93c 	bl	801021c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ffa4:	4b17      	ldr	r3, [pc, #92]	@ (8010004 <tcp_process+0x7d0>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f003 0310 	and.w	r3, r3, #16
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01f      	beq.n	800fff0 <tcp_process+0x7bc>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffb4:	4b14      	ldr	r3, [pc, #80]	@ (8010008 <tcp_process+0x7d4>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d119      	bne.n	800fff0 <tcp_process+0x7bc>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d115      	bne.n	800fff0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ffc4:	4b11      	ldr	r3, [pc, #68]	@ (801000c <tcp_process+0x7d8>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f043 0310 	orr.w	r3, r3, #16
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	4b0f      	ldr	r3, [pc, #60]	@ (801000c <tcp_process+0x7d8>)
 800ffd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ffd2:	e00d      	b.n	800fff0 <tcp_process+0x7bc>
    default:
      break;
 800ffd4:	bf00      	nop
 800ffd6:	e00c      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffd8:	bf00      	nop
 800ffda:	e00a      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffdc:	bf00      	nop
 800ffde:	e008      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe0:	bf00      	nop
 800ffe2:	e006      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe4:	bf00      	nop
 800ffe6:	e004      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffe8:	bf00      	nop
 800ffea:	e002      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800ffec:	bf00      	nop
 800ffee:	e000      	b.n	800fff2 <tcp_process+0x7be>
      break;
 800fff0:	bf00      	nop
  }
  return ERR_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3724      	adds	r7, #36	@ 0x24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd90      	pop	{r4, r7, pc}
 800fffc:	2000d8b4 	.word	0x2000d8b4
 8010000:	2000d8b0 	.word	0x2000d8b0
 8010004:	2000d8e4 	.word	0x2000d8e4
 8010008:	2000d8dc 	.word	0x2000d8dc
 801000c:	2000d8e5 	.word	0x2000d8e5
 8010010:	2000d8ac 	.word	0x2000d8ac

08010014 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d106      	bne.n	8010032 <tcp_oos_insert_segment+0x1e>
 8010024:	4b3b      	ldr	r3, [pc, #236]	@ (8010114 <tcp_oos_insert_segment+0x100>)
 8010026:	f240 421f 	movw	r2, #1055	@ 0x41f
 801002a:	493b      	ldr	r1, [pc, #236]	@ (8010118 <tcp_oos_insert_segment+0x104>)
 801002c:	483b      	ldr	r0, [pc, #236]	@ (801011c <tcp_oos_insert_segment+0x108>)
 801002e:	f006 fe71 	bl	8016d14 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	899b      	ldrh	r3, [r3, #12]
 8010038:	b29b      	uxth	r3, r3
 801003a:	4618      	mov	r0, r3
 801003c:	f7fb f976 	bl	800b32c <lwip_htons>
 8010040:	4603      	mov	r3, r0
 8010042:	b2db      	uxtb	r3, r3
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	d028      	beq.n	801009e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801004c:	6838      	ldr	r0, [r7, #0]
 801004e:	f7fe f995 	bl	800e37c <tcp_segs_free>
    next = NULL;
 8010052:	2300      	movs	r3, #0
 8010054:	603b      	str	r3, [r7, #0]
 8010056:	e056      	b.n	8010106 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	899b      	ldrh	r3, [r3, #12]
 801005e:	b29b      	uxth	r3, r3
 8010060:	4618      	mov	r0, r3
 8010062:	f7fb f963 	bl	800b32c <lwip_htons>
 8010066:	4603      	mov	r3, r0
 8010068:	b2db      	uxtb	r3, r3
 801006a:	f003 0301 	and.w	r3, r3, #1
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00d      	beq.n	801008e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	899b      	ldrh	r3, [r3, #12]
 8010078:	b29c      	uxth	r4, r3
 801007a:	2001      	movs	r0, #1
 801007c:	f7fb f956 	bl	800b32c <lwip_htons>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	4322      	orrs	r2, r4
 801008a:	b292      	uxth	r2, r2
 801008c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f7fe f984 	bl	800e3a6 <tcp_seg_free>
    while (next &&
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00e      	beq.n	80100c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	891b      	ldrh	r3, [r3, #8]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b1d      	ldr	r3, [pc, #116]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	441a      	add	r2, r3
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	8909      	ldrh	r1, [r1, #8]
 80100ba:	440b      	add	r3, r1
 80100bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80100be:	2b00      	cmp	r3, #0
 80100c0:	daca      	bge.n	8010058 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d01e      	beq.n	8010106 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	891b      	ldrh	r3, [r3, #8]
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b14      	ldr	r3, [pc, #80]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	441a      	add	r2, r3
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dd12      	ble.n	8010106 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010120 <tcp_oos_insert_segment+0x10c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	891b      	ldrh	r3, [r3, #8]
 80100fe:	4619      	mov	r1, r3
 8010100:	4610      	mov	r0, r2
 8010102:	f7fc fb7f 	bl	800c804 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	601a      	str	r2, [r3, #0]
}
 801010c:	bf00      	nop
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	bd90      	pop	{r4, r7, pc}
 8010114:	0801a354 	.word	0x0801a354
 8010118:	0801a614 	.word	0x0801a614
 801011c:	0801a3a0 	.word	0x0801a3a0
 8010120:	2000d8d8 	.word	0x2000d8d8

08010124 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010124:	b5b0      	push	{r4, r5, r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010132:	e03e      	b.n	80101b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc fd72 	bl	800cc2c <pbuf_clen>
 8010148:	4603      	mov	r3, r0
 801014a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010152:	8a7a      	ldrh	r2, [r7, #18]
 8010154:	429a      	cmp	r2, r3
 8010156:	d906      	bls.n	8010166 <tcp_free_acked_segments+0x42>
 8010158:	4b2a      	ldr	r3, [pc, #168]	@ (8010204 <tcp_free_acked_segments+0xe0>)
 801015a:	f240 4257 	movw	r2, #1111	@ 0x457
 801015e:	492a      	ldr	r1, [pc, #168]	@ (8010208 <tcp_free_acked_segments+0xe4>)
 8010160:	482a      	ldr	r0, [pc, #168]	@ (801020c <tcp_free_acked_segments+0xe8>)
 8010162:	f006 fdd7 	bl	8016d14 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801016c:	8a7b      	ldrh	r3, [r7, #18]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	b29a      	uxth	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	891a      	ldrh	r2, [r3, #8]
 801017c:	4b24      	ldr	r3, [pc, #144]	@ (8010210 <tcp_free_acked_segments+0xec>)
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	4413      	add	r3, r2
 8010182:	b29a      	uxth	r2, r3
 8010184:	4b22      	ldr	r3, [pc, #136]	@ (8010210 <tcp_free_acked_segments+0xec>)
 8010186:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010188:	6978      	ldr	r0, [r7, #20]
 801018a:	f7fe f90c 	bl	800e3a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00c      	beq.n	80101b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d109      	bne.n	80101b2 <tcp_free_acked_segments+0x8e>
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <tcp_free_acked_segments+0x8e>
 80101a4:	4b17      	ldr	r3, [pc, #92]	@ (8010204 <tcp_free_acked_segments+0xe0>)
 80101a6:	f240 4261 	movw	r2, #1121	@ 0x461
 80101aa:	491a      	ldr	r1, [pc, #104]	@ (8010214 <tcp_free_acked_segments+0xf0>)
 80101ac:	4817      	ldr	r0, [pc, #92]	@ (801020c <tcp_free_acked_segments+0xe8>)
 80101ae:	f006 fdb1 	bl	8016d14 <iprintf>
  while (seg_list != NULL &&
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d020      	beq.n	80101fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fb f8c9 	bl	800b356 <lwip_htonl>
 80101c4:	4604      	mov	r4, r0
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	891b      	ldrh	r3, [r3, #8]
 80101ca:	461d      	mov	r5, r3
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	899b      	ldrh	r3, [r3, #12]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fb f8a9 	bl	800b32c <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	f003 0303 	and.w	r3, r3, #3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <tcp_free_acked_segments+0xc6>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e000      	b.n	80101ec <tcp_free_acked_segments+0xc8>
 80101ea:	2300      	movs	r3, #0
 80101ec:	442b      	add	r3, r5
 80101ee:	18e2      	adds	r2, r4, r3
 80101f0:	4b09      	ldr	r3, [pc, #36]	@ (8010218 <tcp_free_acked_segments+0xf4>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	dd9c      	ble.n	8010134 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80101fa:	68bb      	ldr	r3, [r7, #8]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bdb0      	pop	{r4, r5, r7, pc}
 8010204:	0801a354 	.word	0x0801a354
 8010208:	0801a63c 	.word	0x0801a63c
 801020c:	0801a3a0 	.word	0x0801a3a0
 8010210:	2000d8e0 	.word	0x2000d8e0
 8010214:	0801a664 	.word	0x0801a664
 8010218:	2000d8dc 	.word	0x2000d8dc

0801021c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801021c:	b5b0      	push	{r4, r5, r7, lr}
 801021e:	b094      	sub	sp, #80	@ 0x50
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <tcp_receive+0x20>
 801022e:	4b91      	ldr	r3, [pc, #580]	@ (8010474 <tcp_receive+0x258>)
 8010230:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010234:	4990      	ldr	r1, [pc, #576]	@ (8010478 <tcp_receive+0x25c>)
 8010236:	4891      	ldr	r0, [pc, #580]	@ (801047c <tcp_receive+0x260>)
 8010238:	f006 fd6c 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	7d1b      	ldrb	r3, [r3, #20]
 8010240:	2b03      	cmp	r3, #3
 8010242:	d806      	bhi.n	8010252 <tcp_receive+0x36>
 8010244:	4b8b      	ldr	r3, [pc, #556]	@ (8010474 <tcp_receive+0x258>)
 8010246:	f240 427c 	movw	r2, #1148	@ 0x47c
 801024a:	498d      	ldr	r1, [pc, #564]	@ (8010480 <tcp_receive+0x264>)
 801024c:	488b      	ldr	r0, [pc, #556]	@ (801047c <tcp_receive+0x260>)
 801024e:	f006 fd61 	bl	8016d14 <iprintf>

  if (flags & TCP_ACK) {
 8010252:	4b8c      	ldr	r3, [pc, #560]	@ (8010484 <tcp_receive+0x268>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	f003 0310 	and.w	r3, r3, #16
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 8264 	beq.w	8010728 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801026c:	4413      	add	r3, r2
 801026e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010274:	4b84      	ldr	r3, [pc, #528]	@ (8010488 <tcp_receive+0x26c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	db1b      	blt.n	80102b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010282:	4b81      	ldr	r3, [pc, #516]	@ (8010488 <tcp_receive+0x26c>)
 8010284:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010286:	429a      	cmp	r2, r3
 8010288:	d106      	bne.n	8010298 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801028e:	4b7f      	ldr	r3, [pc, #508]	@ (801048c <tcp_receive+0x270>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	2b00      	cmp	r3, #0
 8010296:	db0e      	blt.n	80102b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801029c:	4b7b      	ldr	r3, [pc, #492]	@ (801048c <tcp_receive+0x270>)
 801029e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d125      	bne.n	80102f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80102a4:	4b7a      	ldr	r3, [pc, #488]	@ (8010490 <tcp_receive+0x274>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	89db      	ldrh	r3, [r3, #14]
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d91c      	bls.n	80102f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80102b6:	4b76      	ldr	r3, [pc, #472]	@ (8010490 <tcp_receive+0x274>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	89db      	ldrh	r3, [r3, #14]
 80102bc:	b29a      	uxth	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d205      	bcs.n	80102e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80102e0:	4b69      	ldr	r3, [pc, #420]	@ (8010488 <tcp_receive+0x26c>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80102e8:	4b68      	ldr	r3, [pc, #416]	@ (801048c <tcp_receive+0x270>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80102f0:	4b66      	ldr	r3, [pc, #408]	@ (801048c <tcp_receive+0x270>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	dc58      	bgt.n	80103b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80102fe:	4b65      	ldr	r3, [pc, #404]	@ (8010494 <tcp_receive+0x278>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d14b      	bne.n	801039e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010310:	4413      	add	r3, r2
 8010312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010314:	429a      	cmp	r2, r3
 8010316:	d142      	bne.n	801039e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801031e:	2b00      	cmp	r3, #0
 8010320:	db3d      	blt.n	801039e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010326:	4b59      	ldr	r3, [pc, #356]	@ (801048c <tcp_receive+0x270>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	429a      	cmp	r2, r3
 801032c:	d137      	bne.n	801039e <tcp_receive+0x182>
              found_dupack = 1;
 801032e:	2301      	movs	r3, #1
 8010330:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010338:	2bff      	cmp	r3, #255	@ 0xff
 801033a:	d007      	beq.n	801034c <tcp_receive+0x130>
                ++pcb->dupacks;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010342:	3301      	adds	r3, #1
 8010344:	b2da      	uxtb	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010352:	2b03      	cmp	r3, #3
 8010354:	d91b      	bls.n	801038e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010360:	4413      	add	r3, r2
 8010362:	b29a      	uxth	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801036a:	429a      	cmp	r2, r3
 801036c:	d30a      	bcc.n	8010384 <tcp_receive+0x168>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010378:	4413      	add	r3, r2
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010382:	e004      	b.n	801038e <tcp_receive+0x172>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801038a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010394:	2b02      	cmp	r3, #2
 8010396:	d902      	bls.n	801039e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f002 fb3f 	bl	8012a1c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801039e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f040 8161 	bne.w	8010668 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103ae:	e15b      	b.n	8010668 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80103b0:	4b36      	ldr	r3, [pc, #216]	@ (801048c <tcp_receive+0x270>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	3b01      	subs	r3, #1
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f2c0 814e 	blt.w	801065e <tcp_receive+0x442>
 80103c2:	4b32      	ldr	r3, [pc, #200]	@ (801048c <tcp_receive+0x270>)
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f300 8146 	bgt.w	801065e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8b5b      	ldrh	r3, [r3, #26]
 80103d6:	f003 0304 	and.w	r3, r3, #4
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d010      	beq.n	8010400 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	8b5b      	ldrh	r3, [r3, #26]
 80103e2:	f023 0304 	bic.w	r3, r3, #4
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801040e:	10db      	asrs	r3, r3, #3
 8010410:	b21b      	sxth	r3, r3
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801041a:	b29b      	uxth	r3, r3
 801041c:	4413      	add	r3, r2
 801041e:	b29b      	uxth	r3, r3
 8010420:	b21a      	sxth	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010428:	4b18      	ldr	r3, [pc, #96]	@ (801048c <tcp_receive+0x270>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	b29a      	uxth	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010432:	b29b      	uxth	r3, r3
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010440:	4b12      	ldr	r3, [pc, #72]	@ (801048c <tcp_receive+0x270>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7d1b      	ldrb	r3, [r3, #20]
 801044c:	2b03      	cmp	r3, #3
 801044e:	f240 8097 	bls.w	8010580 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801045e:	429a      	cmp	r2, r3
 8010460:	d245      	bcs.n	80104ee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	8b5b      	ldrh	r3, [r3, #26]
 8010466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801046a:	2b00      	cmp	r3, #0
 801046c:	d014      	beq.n	8010498 <tcp_receive+0x27c>
 801046e:	2301      	movs	r3, #1
 8010470:	e013      	b.n	801049a <tcp_receive+0x27e>
 8010472:	bf00      	nop
 8010474:	0801a354 	.word	0x0801a354
 8010478:	0801a684 	.word	0x0801a684
 801047c:	0801a3a0 	.word	0x0801a3a0
 8010480:	0801a6a0 	.word	0x0801a6a0
 8010484:	2000d8e4 	.word	0x2000d8e4
 8010488:	2000d8d8 	.word	0x2000d8d8
 801048c:	2000d8dc 	.word	0x2000d8dc
 8010490:	2000d8c8 	.word	0x2000d8c8
 8010494:	2000d8e2 	.word	0x2000d8e2
 8010498:	2302      	movs	r3, #2
 801049a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801049e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104a8:	fb12 f303 	smulbb	r3, r2, r3
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80104b0:	4293      	cmp	r3, r2
 80104b2:	bf28      	it	cs
 80104b4:	4613      	movcs	r3, r2
 80104b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104c0:	4413      	add	r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d309      	bcc.n	80104e2 <tcp_receive+0x2c6>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80104d6:	4413      	add	r3, r2
 80104d8:	b29a      	uxth	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104e0:	e04e      	b.n	8010580 <tcp_receive+0x364>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104ec:	e048      	b.n	8010580 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80104f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80104f6:	4413      	add	r3, r2
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010500:	429a      	cmp	r2, r3
 8010502:	d309      	bcc.n	8010518 <tcp_receive+0x2fc>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801050a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801050c:	4413      	add	r3, r2
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010516:	e004      	b.n	8010522 <tcp_receive+0x306>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801051e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801052e:	429a      	cmp	r2, r3
 8010530:	d326      	bcc.n	8010580 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	b29a      	uxth	r2, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010552:	4413      	add	r3, r2
 8010554:	b29a      	uxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801055c:	429a      	cmp	r2, r3
 801055e:	d30a      	bcc.n	8010576 <tcp_receive+0x35a>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801056a:	4413      	add	r3, r2
 801056c:	b29a      	uxth	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010574:	e004      	b.n	8010580 <tcp_receive+0x364>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801057c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010588:	4a98      	ldr	r2, [pc, #608]	@ (80107ec <tcp_receive+0x5d0>)
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff fdca 	bl	8010124 <tcp_free_acked_segments>
 8010590:	4602      	mov	r2, r0
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059e:	4a94      	ldr	r2, [pc, #592]	@ (80107f0 <tcp_receive+0x5d4>)
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fdbf 	bl	8010124 <tcp_free_acked_segments>
 80105a6:	4602      	mov	r2, r0
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d104      	bne.n	80105be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105ba:	861a      	strh	r2, [r3, #48]	@ 0x30
 80105bc:	e002      	b.n	80105c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80105e0:	4b84      	ldr	r3, [pc, #528]	@ (80107f4 <tcp_receive+0x5d8>)
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	4413      	add	r3, r2
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8b5b      	ldrh	r3, [r3, #26]
 80105f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d035      	beq.n	8010666 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d118      	bne.n	8010634 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00c      	beq.n	8010624 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	4618      	mov	r0, r3
 8010618:	f7fa fe9d 	bl	800b356 <lwip_htonl>
 801061c:	4603      	mov	r3, r0
 801061e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010620:	2b00      	cmp	r3, #0
 8010622:	dc20      	bgt.n	8010666 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	8b5b      	ldrh	r3, [r3, #26]
 8010628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801062c:	b29a      	uxth	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010632:	e018      	b.n	8010666 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	4618      	mov	r0, r3
 8010642:	f7fa fe88 	bl	800b356 <lwip_htonl>
 8010646:	4603      	mov	r3, r0
 8010648:	1ae3      	subs	r3, r4, r3
 801064a:	2b00      	cmp	r3, #0
 801064c:	dc0b      	bgt.n	8010666 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	8b5b      	ldrh	r3, [r3, #26]
 8010652:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010656:	b29a      	uxth	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801065c:	e003      	b.n	8010666 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f002 fbc8 	bl	8012df4 <tcp_send_empty_ack>
 8010664:	e000      	b.n	8010668 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010666:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801066c:	2b00      	cmp	r3, #0
 801066e:	d05b      	beq.n	8010728 <tcp_receive+0x50c>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010674:	4b60      	ldr	r3, [pc, #384]	@ (80107f8 <tcp_receive+0x5dc>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	da54      	bge.n	8010728 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801067e:	4b5f      	ldr	r3, [pc, #380]	@ (80107fc <tcp_receive+0x5e0>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	b29a      	uxth	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010688:	b29b      	uxth	r3, r3
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	b29b      	uxth	r3, r3
 801068e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010692:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801069c:	10db      	asrs	r3, r3, #3
 801069e:	b21b      	sxth	r3, r3
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106b6:	4413      	add	r3, r2
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	b21a      	sxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80106c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	da05      	bge.n	80106d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80106c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106cc:	425b      	negs	r3, r3
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80106d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80106de:	109b      	asrs	r3, r3, #2
 80106e0:	b21b      	sxth	r3, r3
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80106f8:	4413      	add	r3, r2
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	b21a      	sxth	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010708:	10db      	asrs	r3, r3, #3
 801070a:	b21b      	sxth	r3, r3
 801070c:	b29a      	uxth	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010714:	b29b      	uxth	r3, r3
 8010716:	4413      	add	r3, r2
 8010718:	b29b      	uxth	r3, r3
 801071a:	b21a      	sxth	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010728:	4b35      	ldr	r3, [pc, #212]	@ (8010800 <tcp_receive+0x5e4>)
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 84df 	beq.w	80110f0 <tcp_receive+0xed4>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7d1b      	ldrb	r3, [r3, #20]
 8010736:	2b06      	cmp	r3, #6
 8010738:	f200 84da 	bhi.w	80110f0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010740:	4b30      	ldr	r3, [pc, #192]	@ (8010804 <tcp_receive+0x5e8>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	f2c0 808f 	blt.w	801086c <tcp_receive+0x650>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010752:	4b2b      	ldr	r3, [pc, #172]	@ (8010800 <tcp_receive+0x5e4>)
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	4619      	mov	r1, r3
 8010758:	4b2a      	ldr	r3, [pc, #168]	@ (8010804 <tcp_receive+0x5e8>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	440b      	add	r3, r1
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	3301      	adds	r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	f300 8082 	bgt.w	801086c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010768:	4b27      	ldr	r3, [pc, #156]	@ (8010808 <tcp_receive+0x5ec>)
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010772:	4b24      	ldr	r3, [pc, #144]	@ (8010804 <tcp_receive+0x5e8>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801077a:	4b23      	ldr	r3, [pc, #140]	@ (8010808 <tcp_receive+0x5ec>)
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_receive+0x574>
 8010782:	4b22      	ldr	r3, [pc, #136]	@ (801080c <tcp_receive+0x5f0>)
 8010784:	f240 5294 	movw	r2, #1428	@ 0x594
 8010788:	4921      	ldr	r1, [pc, #132]	@ (8010810 <tcp_receive+0x5f4>)
 801078a:	4822      	ldr	r0, [pc, #136]	@ (8010814 <tcp_receive+0x5f8>)
 801078c:	f006 fac2 	bl	8016d14 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010792:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010796:	4293      	cmp	r3, r2
 8010798:	d906      	bls.n	80107a8 <tcp_receive+0x58c>
 801079a:	4b1c      	ldr	r3, [pc, #112]	@ (801080c <tcp_receive+0x5f0>)
 801079c:	f240 5295 	movw	r2, #1429	@ 0x595
 80107a0:	491d      	ldr	r1, [pc, #116]	@ (8010818 <tcp_receive+0x5fc>)
 80107a2:	481c      	ldr	r0, [pc, #112]	@ (8010814 <tcp_receive+0x5f8>)
 80107a4:	f006 fab6 	bl	8016d14 <iprintf>
      off = (u16_t)off32;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80107ae:	4b16      	ldr	r3, [pc, #88]	@ (8010808 <tcp_receive+0x5ec>)
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	891b      	ldrh	r3, [r3, #8]
 80107b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d906      	bls.n	80107ca <tcp_receive+0x5ae>
 80107bc:	4b13      	ldr	r3, [pc, #76]	@ (801080c <tcp_receive+0x5f0>)
 80107be:	f240 5297 	movw	r2, #1431	@ 0x597
 80107c2:	4916      	ldr	r1, [pc, #88]	@ (801081c <tcp_receive+0x600>)
 80107c4:	4813      	ldr	r0, [pc, #76]	@ (8010814 <tcp_receive+0x5f8>)
 80107c6:	f006 faa5 	bl	8016d14 <iprintf>
      inseg.len -= off;
 80107ca:	4b0f      	ldr	r3, [pc, #60]	@ (8010808 <tcp_receive+0x5ec>)
 80107cc:	891a      	ldrh	r2, [r3, #8]
 80107ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010808 <tcp_receive+0x5ec>)
 80107d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80107da:	4b0b      	ldr	r3, [pc, #44]	@ (8010808 <tcp_receive+0x5ec>)
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	891a      	ldrh	r2, [r3, #8]
 80107e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80107e8:	e02a      	b.n	8010840 <tcp_receive+0x624>
 80107ea:	bf00      	nop
 80107ec:	0801a6bc 	.word	0x0801a6bc
 80107f0:	0801a6c4 	.word	0x0801a6c4
 80107f4:	2000d8e0 	.word	0x2000d8e0
 80107f8:	2000d8dc 	.word	0x2000d8dc
 80107fc:	2000d8a0 	.word	0x2000d8a0
 8010800:	2000d8e2 	.word	0x2000d8e2
 8010804:	2000d8d8 	.word	0x2000d8d8
 8010808:	2000d8b8 	.word	0x2000d8b8
 801080c:	0801a354 	.word	0x0801a354
 8010810:	0801a6cc 	.word	0x0801a6cc
 8010814:	0801a3a0 	.word	0x0801a3a0
 8010818:	0801a6dc 	.word	0x0801a6dc
 801081c:	0801a6ec 	.word	0x0801a6ec
        off -= p->len;
 8010820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010822:	895b      	ldrh	r3, [r3, #10]
 8010824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801082e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010830:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010832:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010836:	2200      	movs	r2, #0
 8010838:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801083a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010842:	895b      	ldrh	r3, [r3, #10]
 8010844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010848:	429a      	cmp	r2, r3
 801084a:	d8e9      	bhi.n	8010820 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801084c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010850:	4619      	mov	r1, r3
 8010852:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010854:	f7fc f8d6 	bl	800ca04 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801085c:	4a90      	ldr	r2, [pc, #576]	@ (8010aa0 <tcp_receive+0x884>)
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	4b90      	ldr	r3, [pc, #576]	@ (8010aa4 <tcp_receive+0x888>)
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	4a8e      	ldr	r2, [pc, #568]	@ (8010aa0 <tcp_receive+0x884>)
 8010866:	6812      	ldr	r2, [r2, #0]
 8010868:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801086a:	e00d      	b.n	8010888 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801086c:	4b8c      	ldr	r3, [pc, #560]	@ (8010aa0 <tcp_receive+0x884>)
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	da06      	bge.n	8010888 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8b5b      	ldrh	r3, [r3, #26]
 801087e:	f043 0302 	orr.w	r3, r3, #2
 8010882:	b29a      	uxth	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010888:	4b85      	ldr	r3, [pc, #532]	@ (8010aa0 <tcp_receive+0x884>)
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	f2c0 8427 	blt.w	80110e6 <tcp_receive+0xeca>
 8010898:	4b81      	ldr	r3, [pc, #516]	@ (8010aa0 <tcp_receive+0x884>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a0:	6879      	ldr	r1, [r7, #4]
 80108a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80108a4:	440b      	add	r3, r1
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	3301      	adds	r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f300 841b 	bgt.w	80110e6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108b4:	4b7a      	ldr	r3, [pc, #488]	@ (8010aa0 <tcp_receive+0x884>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	f040 8298 	bne.w	8010dee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80108be:	4b79      	ldr	r3, [pc, #484]	@ (8010aa4 <tcp_receive+0x888>)
 80108c0:	891c      	ldrh	r4, [r3, #8]
 80108c2:	4b78      	ldr	r3, [pc, #480]	@ (8010aa4 <tcp_receive+0x888>)
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	899b      	ldrh	r3, [r3, #12]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fa fd2e 	bl	800b32c <lwip_htons>
 80108d0:	4603      	mov	r3, r0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	f003 0303 	and.w	r3, r3, #3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d001      	beq.n	80108e0 <tcp_receive+0x6c4>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <tcp_receive+0x6c6>
 80108e0:	2300      	movs	r3, #0
 80108e2:	4423      	add	r3, r4
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	4b70      	ldr	r3, [pc, #448]	@ (8010aa8 <tcp_receive+0x88c>)
 80108e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80108ee:	4b6e      	ldr	r3, [pc, #440]	@ (8010aa8 <tcp_receive+0x88c>)
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d274      	bcs.n	80109e0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108f6:	4b6b      	ldr	r3, [pc, #428]	@ (8010aa4 <tcp_receive+0x888>)
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	899b      	ldrh	r3, [r3, #12]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fa fd14 	bl	800b32c <lwip_htons>
 8010904:	4603      	mov	r3, r0
 8010906:	b2db      	uxtb	r3, r3
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d01e      	beq.n	801094e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010910:	4b64      	ldr	r3, [pc, #400]	@ (8010aa4 <tcp_receive+0x888>)
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	899b      	ldrh	r3, [r3, #12]
 8010916:	b29b      	uxth	r3, r3
 8010918:	b21b      	sxth	r3, r3
 801091a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801091e:	b21c      	sxth	r4, r3
 8010920:	4b60      	ldr	r3, [pc, #384]	@ (8010aa4 <tcp_receive+0x888>)
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4618      	mov	r0, r3
 801092a:	f7fa fcff 	bl	800b32c <lwip_htons>
 801092e:	4603      	mov	r3, r0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010936:	b29b      	uxth	r3, r3
 8010938:	4618      	mov	r0, r3
 801093a:	f7fa fcf7 	bl	800b32c <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	b21b      	sxth	r3, r3
 8010942:	4323      	orrs	r3, r4
 8010944:	b21a      	sxth	r2, r3
 8010946:	4b57      	ldr	r3, [pc, #348]	@ (8010aa4 <tcp_receive+0x888>)
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	b292      	uxth	r2, r2
 801094c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010952:	4b54      	ldr	r3, [pc, #336]	@ (8010aa4 <tcp_receive+0x888>)
 8010954:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010956:	4b53      	ldr	r3, [pc, #332]	@ (8010aa4 <tcp_receive+0x888>)
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	899b      	ldrh	r3, [r3, #12]
 801095c:	b29b      	uxth	r3, r3
 801095e:	4618      	mov	r0, r3
 8010960:	f7fa fce4 	bl	800b32c <lwip_htons>
 8010964:	4603      	mov	r3, r0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f003 0302 	and.w	r3, r3, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d005      	beq.n	801097c <tcp_receive+0x760>
            inseg.len -= 1;
 8010970:	4b4c      	ldr	r3, [pc, #304]	@ (8010aa4 <tcp_receive+0x888>)
 8010972:	891b      	ldrh	r3, [r3, #8]
 8010974:	3b01      	subs	r3, #1
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b4a      	ldr	r3, [pc, #296]	@ (8010aa4 <tcp_receive+0x888>)
 801097a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801097c:	4b49      	ldr	r3, [pc, #292]	@ (8010aa4 <tcp_receive+0x888>)
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	4a48      	ldr	r2, [pc, #288]	@ (8010aa4 <tcp_receive+0x888>)
 8010982:	8912      	ldrh	r2, [r2, #8]
 8010984:	4611      	mov	r1, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb ff3c 	bl	800c804 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801098c:	4b45      	ldr	r3, [pc, #276]	@ (8010aa4 <tcp_receive+0x888>)
 801098e:	891c      	ldrh	r4, [r3, #8]
 8010990:	4b44      	ldr	r3, [pc, #272]	@ (8010aa4 <tcp_receive+0x888>)
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	899b      	ldrh	r3, [r3, #12]
 8010996:	b29b      	uxth	r3, r3
 8010998:	4618      	mov	r0, r3
 801099a:	f7fa fcc7 	bl	800b32c <lwip_htons>
 801099e:	4603      	mov	r3, r0
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d001      	beq.n	80109ae <tcp_receive+0x792>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <tcp_receive+0x794>
 80109ae:	2300      	movs	r3, #0
 80109b0:	4423      	add	r3, r4
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	4b3c      	ldr	r3, [pc, #240]	@ (8010aa8 <tcp_receive+0x88c>)
 80109b6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80109b8:	4b3b      	ldr	r3, [pc, #236]	@ (8010aa8 <tcp_receive+0x88c>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	4b38      	ldr	r3, [pc, #224]	@ (8010aa0 <tcp_receive+0x884>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	441a      	add	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80109cc:	440b      	add	r3, r1
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d006      	beq.n	80109e0 <tcp_receive+0x7c4>
 80109d2:	4b36      	ldr	r3, [pc, #216]	@ (8010aac <tcp_receive+0x890>)
 80109d4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80109d8:	4935      	ldr	r1, [pc, #212]	@ (8010ab0 <tcp_receive+0x894>)
 80109da:	4836      	ldr	r0, [pc, #216]	@ (8010ab4 <tcp_receive+0x898>)
 80109dc:	f006 f99a 	bl	8016d14 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 80e6 	beq.w	8010bb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109ea:	4b2e      	ldr	r3, [pc, #184]	@ (8010aa4 <tcp_receive+0x888>)
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	899b      	ldrh	r3, [r3, #12]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fa fc9a 	bl	800b32c <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0301 	and.w	r3, r3, #1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d010      	beq.n	8010a26 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010a04:	e00a      	b.n	8010a1c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a0a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7fd fcc5 	bl	800e3a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1f0      	bne.n	8010a06 <tcp_receive+0x7ea>
 8010a24:	e0c7      	b.n	8010bb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010a2c:	e051      	b.n	8010ad2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	899b      	ldrh	r3, [r3, #12]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fa fc78 	bl	800b32c <lwip_htons>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d03c      	beq.n	8010ac2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010a48:	4b16      	ldr	r3, [pc, #88]	@ (8010aa4 <tcp_receive+0x888>)
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fa fc6b 	bl	800b32c <lwip_htons>
 8010a56:	4603      	mov	r3, r0
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d12f      	bne.n	8010ac2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a62:	4b10      	ldr	r3, [pc, #64]	@ (8010aa4 <tcp_receive+0x888>)
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	899b      	ldrh	r3, [r3, #12]
 8010a68:	b29c      	uxth	r4, r3
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f7fa fc5e 	bl	800b32c <lwip_htons>
 8010a70:	4603      	mov	r3, r0
 8010a72:	461a      	mov	r2, r3
 8010a74:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa4 <tcp_receive+0x888>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	4322      	orrs	r2, r4
 8010a7a:	b292      	uxth	r2, r2
 8010a7c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010a7e:	4b09      	ldr	r3, [pc, #36]	@ (8010aa4 <tcp_receive+0x888>)
 8010a80:	891c      	ldrh	r4, [r3, #8]
 8010a82:	4b08      	ldr	r3, [pc, #32]	@ (8010aa4 <tcp_receive+0x888>)
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	899b      	ldrh	r3, [r3, #12]
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fa fc4e 	bl	800b32c <lwip_htons>
 8010a90:	4603      	mov	r3, r0
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	f003 0303 	and.w	r3, r3, #3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00d      	beq.n	8010ab8 <tcp_receive+0x89c>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e00c      	b.n	8010aba <tcp_receive+0x89e>
 8010aa0:	2000d8d8 	.word	0x2000d8d8
 8010aa4:	2000d8b8 	.word	0x2000d8b8
 8010aa8:	2000d8e2 	.word	0x2000d8e2
 8010aac:	0801a354 	.word	0x0801a354
 8010ab0:	0801a6fc 	.word	0x0801a6fc
 8010ab4:	0801a3a0 	.word	0x0801a3a0
 8010ab8:	2300      	movs	r3, #0
 8010aba:	4423      	add	r3, r4
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	4b98      	ldr	r3, [pc, #608]	@ (8010d20 <tcp_receive+0xb04>)
 8010ac0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010acc:	6938      	ldr	r0, [r7, #16]
 8010ace:	f7fd fc6a 	bl	800e3a6 <tcp_seg_free>
            while (next &&
 8010ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00e      	beq.n	8010af6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010ad8:	4b91      	ldr	r3, [pc, #580]	@ (8010d20 <tcp_receive+0xb04>)
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b91      	ldr	r3, [pc, #580]	@ (8010d24 <tcp_receive+0xb08>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	441a      	add	r2, r3
 8010ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ae6:	68db      	ldr	r3, [r3, #12]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010aec:	8909      	ldrh	r1, [r1, #8]
 8010aee:	440b      	add	r3, r1
 8010af0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da9b      	bge.n	8010a2e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d059      	beq.n	8010bb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010afc:	4b88      	ldr	r3, [pc, #544]	@ (8010d20 <tcp_receive+0xb04>)
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	461a      	mov	r2, r3
 8010b02:	4b88      	ldr	r3, [pc, #544]	@ (8010d24 <tcp_receive+0xb08>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	441a      	add	r2, r3
 8010b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	dd4d      	ble.n	8010bb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	4b81      	ldr	r3, [pc, #516]	@ (8010d24 <tcp_receive+0xb08>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	4b80      	ldr	r3, [pc, #512]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b2c:	68db      	ldr	r3, [r3, #12]
 8010b2e:	899b      	ldrh	r3, [r3, #12]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fa fbfa 	bl	800b32c <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	f003 0302 	and.w	r3, r3, #2
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d005      	beq.n	8010b50 <tcp_receive+0x934>
                inseg.len -= 1;
 8010b44:	4b78      	ldr	r3, [pc, #480]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b46:	891b      	ldrh	r3, [r3, #8]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	4b76      	ldr	r3, [pc, #472]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010b50:	4b75      	ldr	r3, [pc, #468]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4a74      	ldr	r2, [pc, #464]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b56:	8912      	ldrh	r2, [r2, #8]
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fb fe52 	bl	800c804 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010b60:	4b71      	ldr	r3, [pc, #452]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b62:	891c      	ldrh	r4, [r3, #8]
 8010b64:	4b70      	ldr	r3, [pc, #448]	@ (8010d28 <tcp_receive+0xb0c>)
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	899b      	ldrh	r3, [r3, #12]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fa fbdd 	bl	800b32c <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	f003 0303 	and.w	r3, r3, #3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <tcp_receive+0x966>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e000      	b.n	8010b84 <tcp_receive+0x968>
 8010b82:	2300      	movs	r3, #0
 8010b84:	4423      	add	r3, r4
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	4b65      	ldr	r3, [pc, #404]	@ (8010d20 <tcp_receive+0xb04>)
 8010b8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010b8c:	4b64      	ldr	r3, [pc, #400]	@ (8010d20 <tcp_receive+0xb04>)
 8010b8e:	881b      	ldrh	r3, [r3, #0]
 8010b90:	461a      	mov	r2, r3
 8010b92:	4b64      	ldr	r3, [pc, #400]	@ (8010d24 <tcp_receive+0xb08>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	441a      	add	r2, r3
 8010b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d006      	beq.n	8010bb0 <tcp_receive+0x994>
 8010ba2:	4b62      	ldr	r3, [pc, #392]	@ (8010d2c <tcp_receive+0xb10>)
 8010ba4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010ba8:	4961      	ldr	r1, [pc, #388]	@ (8010d30 <tcp_receive+0xb14>)
 8010baa:	4862      	ldr	r0, [pc, #392]	@ (8010d34 <tcp_receive+0xb18>)
 8010bac:	f006 f8b2 	bl	8016d14 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010bb4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010bb6:	4b5a      	ldr	r3, [pc, #360]	@ (8010d20 <tcp_receive+0xb04>)
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4b59      	ldr	r3, [pc, #356]	@ (8010d24 <tcp_receive+0xb08>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	441a      	add	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010bca:	4b55      	ldr	r3, [pc, #340]	@ (8010d20 <tcp_receive+0xb04>)
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d206      	bcs.n	8010be0 <tcp_receive+0x9c4>
 8010bd2:	4b56      	ldr	r3, [pc, #344]	@ (8010d2c <tcp_receive+0xb10>)
 8010bd4:	f240 6207 	movw	r2, #1543	@ 0x607
 8010bd8:	4957      	ldr	r1, [pc, #348]	@ (8010d38 <tcp_receive+0xb1c>)
 8010bda:	4856      	ldr	r0, [pc, #344]	@ (8010d34 <tcp_receive+0xb18>)
 8010bdc:	f006 f89a 	bl	8016d14 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010be4:	4b4e      	ldr	r3, [pc, #312]	@ (8010d20 <tcp_receive+0xb04>)
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7fc fd99 	bl	800d728 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8010d28 <tcp_receive+0xb0c>)
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	891b      	ldrh	r3, [r3, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d006      	beq.n	8010c0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010c00:	4b49      	ldr	r3, [pc, #292]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4a4d      	ldr	r2, [pc, #308]	@ (8010d3c <tcp_receive+0xb20>)
 8010c06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010c08:	4b47      	ldr	r3, [pc, #284]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c0e:	4b46      	ldr	r3, [pc, #280]	@ (8010d28 <tcp_receive+0xb0c>)
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	899b      	ldrh	r3, [r3, #12]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fa fb88 	bl	800b32c <lwip_htons>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	f003 0301 	and.w	r3, r3, #1
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 80b8 	beq.w	8010d9a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010c2a:	4b45      	ldr	r3, [pc, #276]	@ (8010d40 <tcp_receive+0xb24>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	f043 0320 	orr.w	r3, r3, #32
 8010c32:	b2da      	uxtb	r2, r3
 8010c34:	4b42      	ldr	r3, [pc, #264]	@ (8010d40 <tcp_receive+0xb24>)
 8010c36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010c38:	e0af      	b.n	8010d9a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	4a36      	ldr	r2, [pc, #216]	@ (8010d24 <tcp_receive+0xb08>)
 8010c4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	891b      	ldrh	r3, [r3, #8]
 8010c50:	461c      	mov	r4, r3
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	899b      	ldrh	r3, [r3, #12]
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fa fb66 	bl	800b32c <lwip_htons>
 8010c60:	4603      	mov	r3, r0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	f003 0303 	and.w	r3, r3, #3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <tcp_receive+0xa54>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e000      	b.n	8010c72 <tcp_receive+0xa56>
 8010c70:	2300      	movs	r3, #0
 8010c72:	191a      	adds	r2, r3, r4
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c78:	441a      	add	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c82:	461c      	mov	r4, r3
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	891b      	ldrh	r3, [r3, #8]
 8010c88:	461d      	mov	r5, r3
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	899b      	ldrh	r3, [r3, #12]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fa fb4a 	bl	800b32c <lwip_htons>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	f003 0303 	and.w	r3, r3, #3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <tcp_receive+0xa8c>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e000      	b.n	8010caa <tcp_receive+0xa8e>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	442b      	add	r3, r5
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d206      	bcs.n	8010cbe <tcp_receive+0xaa2>
 8010cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8010d2c <tcp_receive+0xb10>)
 8010cb2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010cb6:	4923      	ldr	r1, [pc, #140]	@ (8010d44 <tcp_receive+0xb28>)
 8010cb8:	481e      	ldr	r0, [pc, #120]	@ (8010d34 <tcp_receive+0xb18>)
 8010cba:	f006 f82b 	bl	8016d14 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	891b      	ldrh	r3, [r3, #8]
 8010cc2:	461c      	mov	r4, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	899b      	ldrh	r3, [r3, #12]
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fa fb2d 	bl	800b32c <lwip_htons>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	f003 0303 	and.w	r3, r3, #3
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <tcp_receive+0xac6>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <tcp_receive+0xac8>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	1919      	adds	r1, r3, r4
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010cea:	b28b      	uxth	r3, r1
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7fc fd17 	bl	800d728 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	891b      	ldrh	r3, [r3, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d028      	beq.n	8010d56 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010d04:	4b0d      	ldr	r3, [pc, #52]	@ (8010d3c <tcp_receive+0xb20>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01d      	beq.n	8010d48 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8010d3c <tcp_receive+0xb20>)
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	4619      	mov	r1, r3
 8010d16:	4610      	mov	r0, r2
 8010d18:	f7fb ffc8 	bl	800ccac <pbuf_cat>
 8010d1c:	e018      	b.n	8010d50 <tcp_receive+0xb34>
 8010d1e:	bf00      	nop
 8010d20:	2000d8e2 	.word	0x2000d8e2
 8010d24:	2000d8d8 	.word	0x2000d8d8
 8010d28:	2000d8b8 	.word	0x2000d8b8
 8010d2c:	0801a354 	.word	0x0801a354
 8010d30:	0801a734 	.word	0x0801a734
 8010d34:	0801a3a0 	.word	0x0801a3a0
 8010d38:	0801a770 	.word	0x0801a770
 8010d3c:	2000d8e8 	.word	0x2000d8e8
 8010d40:	2000d8e5 	.word	0x2000d8e5
 8010d44:	0801a790 	.word	0x0801a790
            } else {
              recv_data = cseg->p;
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	4a70      	ldr	r2, [pc, #448]	@ (8010f10 <tcp_receive+0xcf4>)
 8010d4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	2200      	movs	r2, #0
 8010d54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	899b      	ldrh	r3, [r3, #12]
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fa fae4 	bl	800b32c <lwip_htons>
 8010d64:	4603      	mov	r3, r0
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	f003 0301 	and.w	r3, r3, #1
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00d      	beq.n	8010d8c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010d70:	4b68      	ldr	r3, [pc, #416]	@ (8010f14 <tcp_receive+0xcf8>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	f043 0320 	orr.w	r3, r3, #32
 8010d78:	b2da      	uxtb	r2, r3
 8010d7a:	4b66      	ldr	r3, [pc, #408]	@ (8010f14 <tcp_receive+0xcf8>)
 8010d7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	7d1b      	ldrb	r3, [r3, #20]
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	d102      	bne.n	8010d8c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2207      	movs	r2, #7
 8010d8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010d94:	68b8      	ldr	r0, [r7, #8]
 8010d96:	f7fd fb06 	bl	800e3a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d008      	beq.n	8010db4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	685a      	ldr	r2, [r3, #4]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010dae:	429a      	cmp	r2, r3
 8010db0:	f43f af43 	beq.w	8010c3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	8b5b      	ldrh	r3, [r3, #26]
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00e      	beq.n	8010dde <tcp_receive+0xbc2>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	8b5b      	ldrh	r3, [r3, #26]
 8010dc4:	f023 0301 	bic.w	r3, r3, #1
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	835a      	strh	r2, [r3, #26]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f043 0302 	orr.w	r3, r3, #2
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ddc:	e187      	b.n	80110ee <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8b5b      	ldrh	r3, [r3, #26]
 8010de2:	f043 0301 	orr.w	r3, r3, #1
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010dec:	e17f      	b.n	80110ee <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010df6:	4848      	ldr	r0, [pc, #288]	@ (8010f18 <tcp_receive+0xcfc>)
 8010df8:	f7fd faee 	bl	800e3d8 <tcp_seg_copy>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	675a      	str	r2, [r3, #116]	@ 0x74
 8010e02:	e16c      	b.n	80110de <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010e04:	2300      	movs	r3, #0
 8010e06:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010e0e:	e156      	b.n	80110be <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	685a      	ldr	r2, [r3, #4]
 8010e16:	4b41      	ldr	r3, [pc, #260]	@ (8010f1c <tcp_receive+0xd00>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d11d      	bne.n	8010e5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e20:	891a      	ldrh	r2, [r3, #8]
 8010e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e24:	891b      	ldrh	r3, [r3, #8]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	f240 814e 	bls.w	80110c8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e2c:	483a      	ldr	r0, [pc, #232]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e2e:	f7fd fad3 	bl	800e3d8 <tcp_seg_copy>
 8010e32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 8148 	beq.w	80110cc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	e002      	b.n	8010e50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010e50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e52:	6978      	ldr	r0, [r7, #20]
 8010e54:	f7ff f8de 	bl	8010014 <tcp_oos_insert_segment>
                }
                break;
 8010e58:	e138      	b.n	80110cc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d117      	bne.n	8010e90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010e60:	4b2e      	ldr	r3, [pc, #184]	@ (8010f1c <tcp_receive+0xd00>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	685b      	ldr	r3, [r3, #4]
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	da57      	bge.n	8010f20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e70:	4829      	ldr	r0, [pc, #164]	@ (8010f18 <tcp_receive+0xcfc>)
 8010e72:	f7fd fab1 	bl	800e3d8 <tcp_seg_copy>
 8010e76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 8128 	beq.w	80110d0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	69ba      	ldr	r2, [r7, #24]
 8010e84:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e88:	69b8      	ldr	r0, [r7, #24]
 8010e8a:	f7ff f8c3 	bl	8010014 <tcp_oos_insert_segment>
                  }
                  break;
 8010e8e:	e11f      	b.n	80110d0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010e90:	4b22      	ldr	r3, [pc, #136]	@ (8010f1c <tcp_receive+0xd00>)
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	db3e      	blt.n	8010f20 <tcp_receive+0xd04>
 8010ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8010f1c <tcp_receive+0xd00>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	3301      	adds	r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dc35      	bgt.n	8010f20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010eb4:	4818      	ldr	r0, [pc, #96]	@ (8010f18 <tcp_receive+0xcfc>)
 8010eb6:	f7fd fa8f 	bl	800e3d8 <tcp_seg_copy>
 8010eba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 8108 	beq.w	80110d4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ecc:	8912      	ldrh	r2, [r2, #8]
 8010ece:	441a      	add	r2, r3
 8010ed0:	4b12      	ldr	r3, [pc, #72]	@ (8010f1c <tcp_receive+0xd00>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	1ad3      	subs	r3, r2, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd12      	ble.n	8010f00 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010eda:	4b10      	ldr	r3, [pc, #64]	@ (8010f1c <tcp_receive+0xd00>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4610      	mov	r0, r2
 8010efc:	f7fb fc82 	bl	800c804 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f02:	69fa      	ldr	r2, [r7, #28]
 8010f04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010f08:	69f8      	ldr	r0, [r7, #28]
 8010f0a:	f7ff f883 	bl	8010014 <tcp_oos_insert_segment>
                  }
                  break;
 8010f0e:	e0e1      	b.n	80110d4 <tcp_receive+0xeb8>
 8010f10:	2000d8e8 	.word	0x2000d8e8
 8010f14:	2000d8e5 	.word	0x2000d8e5
 8010f18:	2000d8b8 	.word	0x2000d8b8
 8010f1c:	2000d8d8 	.word	0x2000d8d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f22:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f040 80c5 	bne.w	80110b8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010f2e:	4b7f      	ldr	r3, [pc, #508]	@ (801112c <tcp_receive+0xf10>)
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f340 80bc 	ble.w	80110b8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	899b      	ldrh	r3, [r3, #12]
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fa f9ef 	bl	800b32c <lwip_htons>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f040 80be 	bne.w	80110d8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010f5c:	4874      	ldr	r0, [pc, #464]	@ (8011130 <tcp_receive+0xf14>)
 8010f5e:	f7fd fa3b 	bl	800e3d8 <tcp_seg_copy>
 8010f62:	4602      	mov	r2, r0
 8010f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 80b5 	beq.w	80110dc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f7a:	8912      	ldrh	r2, [r2, #8]
 8010f7c:	441a      	add	r2, r3
 8010f7e:	4b6b      	ldr	r3, [pc, #428]	@ (801112c <tcp_receive+0xf10>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	dd12      	ble.n	8010fae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010f88:	4b68      	ldr	r3, [pc, #416]	@ (801112c <tcp_receive+0xf10>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	891b      	ldrh	r3, [r3, #8]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4610      	mov	r0, r2
 8010faa:	f7fb fc2b 	bl	800c804 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010fae:	4b61      	ldr	r3, [pc, #388]	@ (8011134 <tcp_receive+0xf18>)
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	4b5d      	ldr	r3, [pc, #372]	@ (801112c <tcp_receive+0xf10>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	441a      	add	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fbe:	6879      	ldr	r1, [r7, #4]
 8010fc0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010fc2:	440b      	add	r3, r1
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f340 8088 	ble.w	80110dc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	899b      	ldrh	r3, [r3, #12]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa f9a8 	bl	800b32c <lwip_htons>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d021      	beq.n	801102c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	899b      	ldrh	r3, [r3, #12]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	b21b      	sxth	r3, r3
 8010ff4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010ff8:	b21c      	sxth	r4, r3
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	b29b      	uxth	r3, r3
 8011004:	4618      	mov	r0, r3
 8011006:	f7fa f991 	bl	800b32c <lwip_htons>
 801100a:	4603      	mov	r3, r0
 801100c:	b2db      	uxtb	r3, r3
 801100e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011012:	b29b      	uxth	r3, r3
 8011014:	4618      	mov	r0, r3
 8011016:	f7fa f989 	bl	800b32c <lwip_htons>
 801101a:	4603      	mov	r3, r0
 801101c:	b21b      	sxth	r3, r3
 801101e:	4323      	orrs	r3, r4
 8011020:	b21a      	sxth	r2, r3
 8011022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	b292      	uxth	r2, r2
 801102a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011036:	4413      	add	r3, r2
 8011038:	b299      	uxth	r1, r3
 801103a:	4b3c      	ldr	r3, [pc, #240]	@ (801112c <tcp_receive+0xf10>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	b29a      	uxth	r2, r3
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	1a8a      	subs	r2, r1, r2
 8011046:	b292      	uxth	r2, r2
 8011048:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	891b      	ldrh	r3, [r3, #8]
 8011056:	4619      	mov	r1, r3
 8011058:	4610      	mov	r0, r2
 801105a:	f7fb fbd3 	bl	800c804 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	891c      	ldrh	r4, [r3, #8]
 8011064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7fa f95c 	bl	800b32c <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0303 	and.w	r3, r3, #3
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <tcp_receive+0xe68>
 8011080:	2301      	movs	r3, #1
 8011082:	e000      	b.n	8011086 <tcp_receive+0xe6a>
 8011084:	2300      	movs	r3, #0
 8011086:	4423      	add	r3, r4
 8011088:	b29a      	uxth	r2, r3
 801108a:	4b2a      	ldr	r3, [pc, #168]	@ (8011134 <tcp_receive+0xf18>)
 801108c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801108e:	4b29      	ldr	r3, [pc, #164]	@ (8011134 <tcp_receive+0xf18>)
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	4b25      	ldr	r3, [pc, #148]	@ (801112c <tcp_receive+0xf10>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	441a      	add	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110a2:	440b      	add	r3, r1
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d019      	beq.n	80110dc <tcp_receive+0xec0>
 80110a8:	4b23      	ldr	r3, [pc, #140]	@ (8011138 <tcp_receive+0xf1c>)
 80110aa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80110ae:	4923      	ldr	r1, [pc, #140]	@ (801113c <tcp_receive+0xf20>)
 80110b0:	4823      	ldr	r0, [pc, #140]	@ (8011140 <tcp_receive+0xf24>)
 80110b2:	f005 fe2f 	bl	8016d14 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80110b6:	e011      	b.n	80110dc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80110b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f47f aea5 	bne.w	8010e10 <tcp_receive+0xbf4>
 80110c6:	e00a      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110c8:	bf00      	nop
 80110ca:	e008      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110cc:	bf00      	nop
 80110ce:	e006      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d0:	bf00      	nop
 80110d2:	e004      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d4:	bf00      	nop
 80110d6:	e002      	b.n	80110de <tcp_receive+0xec2>
                  break;
 80110d8:	bf00      	nop
 80110da:	e000      	b.n	80110de <tcp_receive+0xec2>
                break;
 80110dc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f001 fe88 	bl	8012df4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80110e4:	e003      	b.n	80110ee <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f001 fe84 	bl	8012df4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110ec:	e01a      	b.n	8011124 <tcp_receive+0xf08>
 80110ee:	e019      	b.n	8011124 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80110f0:	4b0e      	ldr	r3, [pc, #56]	@ (801112c <tcp_receive+0xf10>)
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	db0a      	blt.n	8011114 <tcp_receive+0xef8>
 80110fe:	4b0b      	ldr	r3, [pc, #44]	@ (801112c <tcp_receive+0xf10>)
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801110a:	440b      	add	r3, r1
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	3301      	adds	r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	dd07      	ble.n	8011124 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8b5b      	ldrh	r3, [r3, #26]
 8011118:	f043 0302 	orr.w	r3, r3, #2
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011122:	e7ff      	b.n	8011124 <tcp_receive+0xf08>
 8011124:	bf00      	nop
 8011126:	3750      	adds	r7, #80	@ 0x50
 8011128:	46bd      	mov	sp, r7
 801112a:	bdb0      	pop	{r4, r5, r7, pc}
 801112c:	2000d8d8 	.word	0x2000d8d8
 8011130:	2000d8b8 	.word	0x2000d8b8
 8011134:	2000d8e2 	.word	0x2000d8e2
 8011138:	0801a354 	.word	0x0801a354
 801113c:	0801a6fc 	.word	0x0801a6fc
 8011140:	0801a3a0 	.word	0x0801a3a0

08011144 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801114a:	4b15      	ldr	r3, [pc, #84]	@ (80111a0 <tcp_get_next_optbyte+0x5c>)
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	1c5a      	adds	r2, r3, #1
 8011150:	b291      	uxth	r1, r2
 8011152:	4a13      	ldr	r2, [pc, #76]	@ (80111a0 <tcp_get_next_optbyte+0x5c>)
 8011154:	8011      	strh	r1, [r2, #0]
 8011156:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011158:	4b12      	ldr	r3, [pc, #72]	@ (80111a4 <tcp_get_next_optbyte+0x60>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d004      	beq.n	801116a <tcp_get_next_optbyte+0x26>
 8011160:	4b11      	ldr	r3, [pc, #68]	@ (80111a8 <tcp_get_next_optbyte+0x64>)
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	88fa      	ldrh	r2, [r7, #6]
 8011166:	429a      	cmp	r2, r3
 8011168:	d208      	bcs.n	801117c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801116a:	4b10      	ldr	r3, [pc, #64]	@ (80111ac <tcp_get_next_optbyte+0x68>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3314      	adds	r3, #20
 8011170:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011172:	88fb      	ldrh	r3, [r7, #6]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	4413      	add	r3, r2
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	e00b      	b.n	8011194 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801117c:	88fb      	ldrh	r3, [r7, #6]
 801117e:	b2da      	uxtb	r2, r3
 8011180:	4b09      	ldr	r3, [pc, #36]	@ (80111a8 <tcp_get_next_optbyte+0x64>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	b2db      	uxtb	r3, r3
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801118a:	4b06      	ldr	r3, [pc, #24]	@ (80111a4 <tcp_get_next_optbyte+0x60>)
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	797b      	ldrb	r3, [r7, #5]
 8011190:	4413      	add	r3, r2
 8011192:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011194:	4618      	mov	r0, r3
 8011196:	370c      	adds	r7, #12
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	2000d8d4 	.word	0x2000d8d4
 80111a4:	2000d8d0 	.word	0x2000d8d0
 80111a8:	2000d8ce 	.word	0x2000d8ce
 80111ac:	2000d8c8 	.word	0x2000d8c8

080111b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <tcp_parseopt+0x1c>
 80111be:	4b32      	ldr	r3, [pc, #200]	@ (8011288 <tcp_parseopt+0xd8>)
 80111c0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80111c4:	4931      	ldr	r1, [pc, #196]	@ (801128c <tcp_parseopt+0xdc>)
 80111c6:	4832      	ldr	r0, [pc, #200]	@ (8011290 <tcp_parseopt+0xe0>)
 80111c8:	f005 fda4 	bl	8016d14 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80111cc:	4b31      	ldr	r3, [pc, #196]	@ (8011294 <tcp_parseopt+0xe4>)
 80111ce:	881b      	ldrh	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d056      	beq.n	8011282 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111d4:	4b30      	ldr	r3, [pc, #192]	@ (8011298 <tcp_parseopt+0xe8>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	801a      	strh	r2, [r3, #0]
 80111da:	e046      	b.n	801126a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80111dc:	f7ff ffb2 	bl	8011144 <tcp_get_next_optbyte>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	2b02      	cmp	r3, #2
 80111e8:	d006      	beq.n	80111f8 <tcp_parseopt+0x48>
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	dc2a      	bgt.n	8011244 <tcp_parseopt+0x94>
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d042      	beq.n	8011278 <tcp_parseopt+0xc8>
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d038      	beq.n	8011268 <tcp_parseopt+0xb8>
 80111f6:	e025      	b.n	8011244 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80111f8:	f7ff ffa4 	bl	8011144 <tcp_get_next_optbyte>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b04      	cmp	r3, #4
 8011200:	d13c      	bne.n	801127c <tcp_parseopt+0xcc>
 8011202:	4b25      	ldr	r3, [pc, #148]	@ (8011298 <tcp_parseopt+0xe8>)
 8011204:	881b      	ldrh	r3, [r3, #0]
 8011206:	3301      	adds	r3, #1
 8011208:	4a22      	ldr	r2, [pc, #136]	@ (8011294 <tcp_parseopt+0xe4>)
 801120a:	8812      	ldrh	r2, [r2, #0]
 801120c:	4293      	cmp	r3, r2
 801120e:	da35      	bge.n	801127c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011210:	f7ff ff98 	bl	8011144 <tcp_get_next_optbyte>
 8011214:	4603      	mov	r3, r0
 8011216:	021b      	lsls	r3, r3, #8
 8011218:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801121a:	f7ff ff93 	bl	8011144 <tcp_get_next_optbyte>
 801121e:	4603      	mov	r3, r0
 8011220:	461a      	mov	r2, r3
 8011222:	89bb      	ldrh	r3, [r7, #12]
 8011224:	4313      	orrs	r3, r2
 8011226:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011228:	89bb      	ldrh	r3, [r7, #12]
 801122a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801122e:	d804      	bhi.n	801123a <tcp_parseopt+0x8a>
 8011230:	89bb      	ldrh	r3, [r7, #12]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <tcp_parseopt+0x8a>
 8011236:	89ba      	ldrh	r2, [r7, #12]
 8011238:	e001      	b.n	801123e <tcp_parseopt+0x8e>
 801123a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011242:	e012      	b.n	801126a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011244:	f7ff ff7e 	bl	8011144 <tcp_get_next_optbyte>
 8011248:	4603      	mov	r3, r0
 801124a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801124c:	7afb      	ldrb	r3, [r7, #11]
 801124e:	2b01      	cmp	r3, #1
 8011250:	d916      	bls.n	8011280 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011252:	7afb      	ldrb	r3, [r7, #11]
 8011254:	b29a      	uxth	r2, r3
 8011256:	4b10      	ldr	r3, [pc, #64]	@ (8011298 <tcp_parseopt+0xe8>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	4413      	add	r3, r2
 801125c:	b29b      	uxth	r3, r3
 801125e:	3b02      	subs	r3, #2
 8011260:	b29a      	uxth	r2, r3
 8011262:	4b0d      	ldr	r3, [pc, #52]	@ (8011298 <tcp_parseopt+0xe8>)
 8011264:	801a      	strh	r2, [r3, #0]
 8011266:	e000      	b.n	801126a <tcp_parseopt+0xba>
          break;
 8011268:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801126a:	4b0b      	ldr	r3, [pc, #44]	@ (8011298 <tcp_parseopt+0xe8>)
 801126c:	881a      	ldrh	r2, [r3, #0]
 801126e:	4b09      	ldr	r3, [pc, #36]	@ (8011294 <tcp_parseopt+0xe4>)
 8011270:	881b      	ldrh	r3, [r3, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d3b2      	bcc.n	80111dc <tcp_parseopt+0x2c>
 8011276:	e004      	b.n	8011282 <tcp_parseopt+0xd2>
          return;
 8011278:	bf00      	nop
 801127a:	e002      	b.n	8011282 <tcp_parseopt+0xd2>
            return;
 801127c:	bf00      	nop
 801127e:	e000      	b.n	8011282 <tcp_parseopt+0xd2>
            return;
 8011280:	bf00      	nop
      }
    }
  }
}
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	0801a354 	.word	0x0801a354
 801128c:	0801a7b8 	.word	0x0801a7b8
 8011290:	0801a3a0 	.word	0x0801a3a0
 8011294:	2000d8cc 	.word	0x2000d8cc
 8011298:	2000d8d4 	.word	0x2000d8d4

0801129c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80112a0:	4b05      	ldr	r3, [pc, #20]	@ (80112b8 <tcp_trigger_input_pcb_close+0x1c>)
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	f043 0310 	orr.w	r3, r3, #16
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	4b03      	ldr	r3, [pc, #12]	@ (80112b8 <tcp_trigger_input_pcb_close+0x1c>)
 80112ac:	701a      	strb	r2, [r3, #0]
}
 80112ae:	bf00      	nop
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	2000d8e5 	.word	0x2000d8e5

080112bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00a      	beq.n	80112e4 <tcp_route+0x28>
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	7a1b      	ldrb	r3, [r3, #8]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d006      	beq.n	80112e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	7a1b      	ldrb	r3, [r3, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fb f88a 	bl	800c3f4 <netif_get_by_index>
 80112e0:	4603      	mov	r3, r0
 80112e2:	e003      	b.n	80112ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f003 fec9 	bl	801507c <ip4_route>
 80112ea:	4603      	mov	r3, r0
  }
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80112f4:	b590      	push	{r4, r7, lr}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	603b      	str	r3, [r7, #0]
 8011300:	4613      	mov	r3, r2
 8011302:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d105      	bne.n	8011316 <tcp_create_segment+0x22>
 801130a:	4b43      	ldr	r3, [pc, #268]	@ (8011418 <tcp_create_segment+0x124>)
 801130c:	22a3      	movs	r2, #163	@ 0xa3
 801130e:	4943      	ldr	r1, [pc, #268]	@ (801141c <tcp_create_segment+0x128>)
 8011310:	4843      	ldr	r0, [pc, #268]	@ (8011420 <tcp_create_segment+0x12c>)
 8011312:	f005 fcff 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d105      	bne.n	8011328 <tcp_create_segment+0x34>
 801131c:	4b3e      	ldr	r3, [pc, #248]	@ (8011418 <tcp_create_segment+0x124>)
 801131e:	22a4      	movs	r2, #164	@ 0xa4
 8011320:	4940      	ldr	r1, [pc, #256]	@ (8011424 <tcp_create_segment+0x130>)
 8011322:	483f      	ldr	r0, [pc, #252]	@ (8011420 <tcp_create_segment+0x12c>)
 8011324:	f005 fcf6 	bl	8016d14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011328:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0304 	and.w	r3, r3, #4
 8011334:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011336:	2003      	movs	r0, #3
 8011338:	f7fa fcd0 	bl	800bcdc <memp_malloc>
 801133c:	6138      	str	r0, [r7, #16]
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d104      	bne.n	801134e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011344:	68b8      	ldr	r0, [r7, #8]
 8011346:	f7fb fbe3 	bl	800cb10 <pbuf_free>
    return NULL;
 801134a:	2300      	movs	r3, #0
 801134c:	e060      	b.n	8011410 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011354:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	891a      	ldrh	r2, [r3, #8]
 8011366:	7dfb      	ldrb	r3, [r7, #23]
 8011368:	b29b      	uxth	r3, r3
 801136a:	429a      	cmp	r2, r3
 801136c:	d205      	bcs.n	801137a <tcp_create_segment+0x86>
 801136e:	4b2a      	ldr	r3, [pc, #168]	@ (8011418 <tcp_create_segment+0x124>)
 8011370:	22b0      	movs	r2, #176	@ 0xb0
 8011372:	492d      	ldr	r1, [pc, #180]	@ (8011428 <tcp_create_segment+0x134>)
 8011374:	482a      	ldr	r0, [pc, #168]	@ (8011420 <tcp_create_segment+0x12c>)
 8011376:	f005 fccd 	bl	8016d14 <iprintf>
  seg->len = p->tot_len - optlen;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	891a      	ldrh	r2, [r3, #8]
 801137e:	7dfb      	ldrb	r3, [r7, #23]
 8011380:	b29b      	uxth	r3, r3
 8011382:	1ad3      	subs	r3, r2, r3
 8011384:	b29a      	uxth	r2, r3
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801138a:	2114      	movs	r1, #20
 801138c:	68b8      	ldr	r0, [r7, #8]
 801138e:	f7fb fb29 	bl	800c9e4 <pbuf_add_header>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d004      	beq.n	80113a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011398:	6938      	ldr	r0, [r7, #16]
 801139a:	f7fd f804 	bl	800e3a6 <tcp_seg_free>
    return NULL;
 801139e:	2300      	movs	r3, #0
 80113a0:	e036      	b.n	8011410 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	685a      	ldr	r2, [r3, #4]
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	8ada      	ldrh	r2, [r3, #22]
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	68dc      	ldr	r4, [r3, #12]
 80113b4:	4610      	mov	r0, r2
 80113b6:	f7f9 ffb9 	bl	800b32c <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	8b1a      	ldrh	r2, [r3, #24]
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	68dc      	ldr	r4, [r3, #12]
 80113c6:	4610      	mov	r0, r2
 80113c8:	f7f9 ffb0 	bl	800b32c <lwip_htons>
 80113cc:	4603      	mov	r3, r0
 80113ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	68dc      	ldr	r4, [r3, #12]
 80113d4:	6838      	ldr	r0, [r7, #0]
 80113d6:	f7f9 ffbe 	bl	800b356 <lwip_htonl>
 80113da:	4603      	mov	r3, r0
 80113dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80113de:	7dfb      	ldrb	r3, [r7, #23]
 80113e0:	089b      	lsrs	r3, r3, #2
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	3305      	adds	r3, #5
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	031b      	lsls	r3, r3, #12
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	79fb      	ldrb	r3, [r7, #7]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4313      	orrs	r3, r2
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	68dc      	ldr	r4, [r3, #12]
 80113f8:	4610      	mov	r0, r2
 80113fa:	f7f9 ff97 	bl	800b32c <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	749a      	strb	r2, [r3, #18]
 801140a:	2200      	movs	r2, #0
 801140c:	74da      	strb	r2, [r3, #19]
  return seg;
 801140e:	693b      	ldr	r3, [r7, #16]
}
 8011410:	4618      	mov	r0, r3
 8011412:	371c      	adds	r7, #28
 8011414:	46bd      	mov	sp, r7
 8011416:	bd90      	pop	{r4, r7, pc}
 8011418:	0801a7d4 	.word	0x0801a7d4
 801141c:	0801a808 	.word	0x0801a808
 8011420:	0801a828 	.word	0x0801a828
 8011424:	0801a850 	.word	0x0801a850
 8011428:	0801a874 	.word	0x0801a874

0801142c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	607b      	str	r3, [r7, #4]
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]
 8011438:	460b      	mov	r3, r1
 801143a:	81bb      	strh	r3, [r7, #12]
 801143c:	4613      	mov	r3, r2
 801143e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011440:	89bb      	ldrh	r3, [r7, #12]
 8011442:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d105      	bne.n	8011456 <tcp_pbuf_prealloc+0x2a>
 801144a:	4b30      	ldr	r3, [pc, #192]	@ (801150c <tcp_pbuf_prealloc+0xe0>)
 801144c:	22e8      	movs	r2, #232	@ 0xe8
 801144e:	4930      	ldr	r1, [pc, #192]	@ (8011510 <tcp_pbuf_prealloc+0xe4>)
 8011450:	4830      	ldr	r0, [pc, #192]	@ (8011514 <tcp_pbuf_prealloc+0xe8>)
 8011452:	f005 fc5f 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d105      	bne.n	8011468 <tcp_pbuf_prealloc+0x3c>
 801145c:	4b2b      	ldr	r3, [pc, #172]	@ (801150c <tcp_pbuf_prealloc+0xe0>)
 801145e:	22e9      	movs	r2, #233	@ 0xe9
 8011460:	492d      	ldr	r1, [pc, #180]	@ (8011518 <tcp_pbuf_prealloc+0xec>)
 8011462:	482c      	ldr	r0, [pc, #176]	@ (8011514 <tcp_pbuf_prealloc+0xe8>)
 8011464:	f005 fc56 	bl	8016d14 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011468:	89ba      	ldrh	r2, [r7, #12]
 801146a:	897b      	ldrh	r3, [r7, #10]
 801146c:	429a      	cmp	r2, r3
 801146e:	d221      	bcs.n	80114b4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011474:	f003 0302 	and.w	r3, r3, #2
 8011478:	2b00      	cmp	r3, #0
 801147a:	d111      	bne.n	80114a0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	8b5b      	ldrh	r3, [r3, #26]
 8011480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011484:	2b00      	cmp	r3, #0
 8011486:	d115      	bne.n	80114b4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011488:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801148c:	2b00      	cmp	r3, #0
 801148e:	d007      	beq.n	80114a0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011490:	6a3b      	ldr	r3, [r7, #32]
 8011492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011494:	2b00      	cmp	r3, #0
 8011496:	d103      	bne.n	80114a0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011498:	6a3b      	ldr	r3, [r7, #32]
 801149a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801149c:	2b00      	cmp	r3, #0
 801149e:	d009      	beq.n	80114b4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80114a0:	89bb      	ldrh	r3, [r7, #12]
 80114a2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80114a6:	f023 0203 	bic.w	r2, r3, #3
 80114aa:	897b      	ldrh	r3, [r7, #10]
 80114ac:	4293      	cmp	r3, r2
 80114ae:	bf28      	it	cs
 80114b0:	4613      	movcs	r3, r2
 80114b2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80114b4:	8af9      	ldrh	r1, [r7, #22]
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
 80114b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fb f843 	bl	800c548 <pbuf_alloc>
 80114c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d101      	bne.n	80114ce <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80114ca:	2300      	movs	r3, #0
 80114cc:	e019      	b.n	8011502 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d006      	beq.n	80114e4 <tcp_pbuf_prealloc+0xb8>
 80114d6:	4b0d      	ldr	r3, [pc, #52]	@ (801150c <tcp_pbuf_prealloc+0xe0>)
 80114d8:	f240 120b 	movw	r2, #267	@ 0x10b
 80114dc:	490f      	ldr	r1, [pc, #60]	@ (801151c <tcp_pbuf_prealloc+0xf0>)
 80114de:	480d      	ldr	r0, [pc, #52]	@ (8011514 <tcp_pbuf_prealloc+0xe8>)
 80114e0:	f005 fc18 	bl	8016d14 <iprintf>
  *oversize = p->len - length;
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	895a      	ldrh	r2, [r3, #10]
 80114e8:	89bb      	ldrh	r3, [r7, #12]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	89ba      	ldrh	r2, [r7, #12]
 80114f6:	811a      	strh	r2, [r3, #8]
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	891a      	ldrh	r2, [r3, #8]
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	815a      	strh	r2, [r3, #10]
  return p;
 8011500:	693b      	ldr	r3, [r7, #16]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	0801a7d4 	.word	0x0801a7d4
 8011510:	0801a88c 	.word	0x0801a88c
 8011514:	0801a828 	.word	0x0801a828
 8011518:	0801a8b0 	.word	0x0801a8b0
 801151c:	0801a8d0 	.word	0x0801a8d0

08011520 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	460b      	mov	r3, r1
 801152a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d106      	bne.n	8011540 <tcp_write_checks+0x20>
 8011532:	4b33      	ldr	r3, [pc, #204]	@ (8011600 <tcp_write_checks+0xe0>)
 8011534:	f240 1233 	movw	r2, #307	@ 0x133
 8011538:	4932      	ldr	r1, [pc, #200]	@ (8011604 <tcp_write_checks+0xe4>)
 801153a:	4833      	ldr	r0, [pc, #204]	@ (8011608 <tcp_write_checks+0xe8>)
 801153c:	f005 fbea 	bl	8016d14 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	7d1b      	ldrb	r3, [r3, #20]
 8011544:	2b04      	cmp	r3, #4
 8011546:	d00e      	beq.n	8011566 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801154c:	2b07      	cmp	r3, #7
 801154e:	d00a      	beq.n	8011566 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011554:	2b02      	cmp	r3, #2
 8011556:	d006      	beq.n	8011566 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801155c:	2b03      	cmp	r3, #3
 801155e:	d002      	beq.n	8011566 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011560:	f06f 030a 	mvn.w	r3, #10
 8011564:	e048      	b.n	80115f8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011566:	887b      	ldrh	r3, [r7, #2]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d101      	bne.n	8011570 <tcp_write_checks+0x50>
    return ERR_OK;
 801156c:	2300      	movs	r3, #0
 801156e:	e043      	b.n	80115f8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011576:	887a      	ldrh	r2, [r7, #2]
 8011578:	429a      	cmp	r2, r3
 801157a:	d909      	bls.n	8011590 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	8b5b      	ldrh	r3, [r3, #26]
 8011580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801158a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801158e:	e033      	b.n	80115f8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011596:	2b08      	cmp	r3, #8
 8011598:	d909      	bls.n	80115ae <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	8b5b      	ldrh	r3, [r3, #26]
 801159e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80115ac:	e024      	b.n	80115f8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d00f      	beq.n	80115d8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d11a      	bne.n	80115f6 <tcp_write_checks+0xd6>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d116      	bne.n	80115f6 <tcp_write_checks+0xd6>
 80115c8:	4b0d      	ldr	r3, [pc, #52]	@ (8011600 <tcp_write_checks+0xe0>)
 80115ca:	f240 1255 	movw	r2, #341	@ 0x155
 80115ce:	490f      	ldr	r1, [pc, #60]	@ (801160c <tcp_write_checks+0xec>)
 80115d0:	480d      	ldr	r0, [pc, #52]	@ (8011608 <tcp_write_checks+0xe8>)
 80115d2:	f005 fb9f 	bl	8016d14 <iprintf>
 80115d6:	e00e      	b.n	80115f6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d103      	bne.n	80115e8 <tcp_write_checks+0xc8>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d006      	beq.n	80115f6 <tcp_write_checks+0xd6>
 80115e8:	4b05      	ldr	r3, [pc, #20]	@ (8011600 <tcp_write_checks+0xe0>)
 80115ea:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80115ee:	4908      	ldr	r1, [pc, #32]	@ (8011610 <tcp_write_checks+0xf0>)
 80115f0:	4805      	ldr	r0, [pc, #20]	@ (8011608 <tcp_write_checks+0xe8>)
 80115f2:	f005 fb8f 	bl	8016d14 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80115f6:	2300      	movs	r3, #0
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	0801a7d4 	.word	0x0801a7d4
 8011604:	0801a8e4 	.word	0x0801a8e4
 8011608:	0801a828 	.word	0x0801a828
 801160c:	0801a904 	.word	0x0801a904
 8011610:	0801a940 	.word	0x0801a940

08011614 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011614:	b590      	push	{r4, r7, lr}
 8011616:	b09b      	sub	sp, #108	@ 0x6c
 8011618:	af04      	add	r7, sp, #16
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4611      	mov	r1, r2
 8011620:	461a      	mov	r2, r3
 8011622:	460b      	mov	r3, r1
 8011624:	80fb      	strh	r3, [r7, #6]
 8011626:	4613      	mov	r3, r2
 8011628:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801162a:	2300      	movs	r3, #0
 801162c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	653b      	str	r3, [r7, #80]	@ 0x50
 8011632:	2300      	movs	r3, #0
 8011634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011636:	2300      	movs	r3, #0
 8011638:	64bb      	str	r3, [r7, #72]	@ 0x48
 801163a:	2300      	movs	r3, #0
 801163c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801163e:	2300      	movs	r3, #0
 8011640:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801164e:	2300      	movs	r3, #0
 8011650:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d109      	bne.n	8011670 <tcp_write+0x5c>
 801165c:	4ba4      	ldr	r3, [pc, #656]	@ (80118f0 <tcp_write+0x2dc>)
 801165e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011662:	49a4      	ldr	r1, [pc, #656]	@ (80118f4 <tcp_write+0x2e0>)
 8011664:	48a4      	ldr	r0, [pc, #656]	@ (80118f8 <tcp_write+0x2e4>)
 8011666:	f005 fb55 	bl	8016d14 <iprintf>
 801166a:	f06f 030f 	mvn.w	r3, #15
 801166e:	e32a      	b.n	8011cc6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011676:	085b      	lsrs	r3, r3, #1
 8011678:	b29a      	uxth	r2, r3
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801167e:	4293      	cmp	r3, r2
 8011680:	bf28      	it	cs
 8011682:	4613      	movcs	r3, r2
 8011684:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <tcp_write+0x7e>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011690:	e000      	b.n	8011694 <tcp_write+0x80>
 8011692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011694:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d109      	bne.n	80116b0 <tcp_write+0x9c>
 801169c:	4b94      	ldr	r3, [pc, #592]	@ (80118f0 <tcp_write+0x2dc>)
 801169e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80116a2:	4996      	ldr	r1, [pc, #600]	@ (80118fc <tcp_write+0x2e8>)
 80116a4:	4894      	ldr	r0, [pc, #592]	@ (80118f8 <tcp_write+0x2e4>)
 80116a6:	f005 fb35 	bl	8016d14 <iprintf>
 80116aa:	f06f 030f 	mvn.w	r3, #15
 80116ae:	e30a      	b.n	8011cc6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80116b0:	88fb      	ldrh	r3, [r7, #6]
 80116b2:	4619      	mov	r1, r3
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f7ff ff33 	bl	8011520 <tcp_write_checks>
 80116ba:	4603      	mov	r3, r0
 80116bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80116c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <tcp_write+0xba>
    return err;
 80116c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80116cc:	e2fb      	b.n	8011cc6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80116d8:	2300      	movs	r3, #0
 80116da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 80f6 	beq.w	80118d4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80116ee:	e002      	b.n	80116f6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80116f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1f8      	bne.n	80116f0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80116fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011700:	7a9b      	ldrb	r3, [r3, #10]
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	b29b      	uxth	r3, r3
 8011706:	f003 0304 	and.w	r3, r3, #4
 801170a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801170c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801170e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011710:	891b      	ldrh	r3, [r3, #8]
 8011712:	4619      	mov	r1, r3
 8011714:	8c3b      	ldrh	r3, [r7, #32]
 8011716:	440b      	add	r3, r1
 8011718:	429a      	cmp	r2, r3
 801171a:	da06      	bge.n	801172a <tcp_write+0x116>
 801171c:	4b74      	ldr	r3, [pc, #464]	@ (80118f0 <tcp_write+0x2dc>)
 801171e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011722:	4977      	ldr	r1, [pc, #476]	@ (8011900 <tcp_write+0x2ec>)
 8011724:	4874      	ldr	r0, [pc, #464]	@ (80118f8 <tcp_write+0x2e4>)
 8011726:	f005 faf5 	bl	8016d14 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801172a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801172c:	891a      	ldrh	r2, [r3, #8]
 801172e:	8c3b      	ldrh	r3, [r7, #32]
 8011730:	4413      	add	r3, r2
 8011732:	b29b      	uxth	r3, r3
 8011734:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011740:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011742:	8a7b      	ldrh	r3, [r7, #18]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d026      	beq.n	8011796 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011748:	8a7b      	ldrh	r3, [r7, #18]
 801174a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801174c:	429a      	cmp	r2, r3
 801174e:	d206      	bcs.n	801175e <tcp_write+0x14a>
 8011750:	4b67      	ldr	r3, [pc, #412]	@ (80118f0 <tcp_write+0x2dc>)
 8011752:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011756:	496b      	ldr	r1, [pc, #428]	@ (8011904 <tcp_write+0x2f0>)
 8011758:	4867      	ldr	r0, [pc, #412]	@ (80118f8 <tcp_write+0x2e4>)
 801175a:	f005 fadb 	bl	8016d14 <iprintf>
      seg = last_unsent;
 801175e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011760:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011762:	8a7b      	ldrh	r3, [r7, #18]
 8011764:	88fa      	ldrh	r2, [r7, #6]
 8011766:	4293      	cmp	r3, r2
 8011768:	bf28      	it	cs
 801176a:	4613      	movcs	r3, r2
 801176c:	b29b      	uxth	r3, r3
 801176e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011770:	4293      	cmp	r3, r2
 8011772:	bf28      	it	cs
 8011774:	4613      	movcs	r3, r2
 8011776:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801177c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801177e:	4413      	add	r3, r2
 8011780:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011784:	8a7a      	ldrh	r2, [r7, #18]
 8011786:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	b29b      	uxth	r3, r3
 801178c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801178e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011790:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011792:	1ad3      	subs	r3, r2, r3
 8011794:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011796:	8a7b      	ldrh	r3, [r7, #18]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00b      	beq.n	80117b4 <tcp_write+0x1a0>
 801179c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80117a0:	88fb      	ldrh	r3, [r7, #6]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d006      	beq.n	80117b4 <tcp_write+0x1a0>
 80117a6:	4b52      	ldr	r3, [pc, #328]	@ (80118f0 <tcp_write+0x2dc>)
 80117a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117ac:	4956      	ldr	r1, [pc, #344]	@ (8011908 <tcp_write+0x2f4>)
 80117ae:	4852      	ldr	r0, [pc, #328]	@ (80118f8 <tcp_write+0x2e4>)
 80117b0:	f005 fab0 	bl	8016d14 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80117b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80117b8:	88fb      	ldrh	r3, [r7, #6]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	f080 8167 	bcs.w	8011a8e <tcp_write+0x47a>
 80117c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 8163 	beq.w	8011a8e <tcp_write+0x47a>
 80117c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ca:	891b      	ldrh	r3, [r3, #8]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 815e 	beq.w	8011a8e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80117d2:	88fa      	ldrh	r2, [r7, #6]
 80117d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80117d8:	1ad2      	subs	r2, r2, r3
 80117da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80117dc:	4293      	cmp	r3, r2
 80117de:	bfa8      	it	ge
 80117e0:	4613      	movge	r3, r2
 80117e2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80117e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80117e8:	797b      	ldrb	r3, [r7, #5]
 80117ea:	f003 0301 	and.w	r3, r3, #1
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d027      	beq.n	8011842 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80117f2:	f107 0012 	add.w	r0, r7, #18
 80117f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80117f8:	8bf9      	ldrh	r1, [r7, #30]
 80117fa:	2301      	movs	r3, #1
 80117fc:	9302      	str	r3, [sp, #8]
 80117fe:	797b      	ldrb	r3, [r7, #5]
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	4603      	mov	r3, r0
 8011808:	2000      	movs	r0, #0
 801180a:	f7ff fe0f 	bl	801142c <tcp_pbuf_prealloc>
 801180e:	6578      	str	r0, [r7, #84]	@ 0x54
 8011810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011812:	2b00      	cmp	r3, #0
 8011814:	f000 8225 	beq.w	8011c62 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801181a:	6858      	ldr	r0, [r3, #4]
 801181c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	4413      	add	r3, r2
 8011824:	8bfa      	ldrh	r2, [r7, #30]
 8011826:	4619      	mov	r1, r3
 8011828:	f005 fb57 	bl	8016eda <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801182c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801182e:	f7fb f9fd 	bl	800cc2c <pbuf_clen>
 8011832:	4603      	mov	r3, r0
 8011834:	461a      	mov	r2, r3
 8011836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801183a:	4413      	add	r3, r2
 801183c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011840:	e041      	b.n	80118c6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	637b      	str	r3, [r7, #52]	@ 0x34
 8011848:	e002      	b.n	8011850 <tcp_write+0x23c>
 801184a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1f8      	bne.n	801184a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801185a:	7b1b      	ldrb	r3, [r3, #12]
 801185c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d115      	bne.n	8011890 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801186a:	8952      	ldrh	r2, [r2, #10]
 801186c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801186e:	68ba      	ldr	r2, [r7, #8]
 8011870:	429a      	cmp	r2, r3
 8011872:	d10d      	bne.n	8011890 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011874:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011878:	2b00      	cmp	r3, #0
 801187a:	d006      	beq.n	801188a <tcp_write+0x276>
 801187c:	4b1c      	ldr	r3, [pc, #112]	@ (80118f0 <tcp_write+0x2dc>)
 801187e:	f240 2231 	movw	r2, #561	@ 0x231
 8011882:	4922      	ldr	r1, [pc, #136]	@ (801190c <tcp_write+0x2f8>)
 8011884:	481c      	ldr	r0, [pc, #112]	@ (80118f8 <tcp_write+0x2e4>)
 8011886:	f005 fa45 	bl	8016d14 <iprintf>
          extendlen = seglen;
 801188a:	8bfb      	ldrh	r3, [r7, #30]
 801188c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801188e:	e01a      	b.n	80118c6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011890:	8bfb      	ldrh	r3, [r7, #30]
 8011892:	2201      	movs	r2, #1
 8011894:	4619      	mov	r1, r3
 8011896:	2000      	movs	r0, #0
 8011898:	f7fa fe56 	bl	800c548 <pbuf_alloc>
 801189c:	6578      	str	r0, [r7, #84]	@ 0x54
 801189e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f000 81e0 	beq.w	8011c66 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80118a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118aa:	68ba      	ldr	r2, [r7, #8]
 80118ac:	441a      	add	r2, r3
 80118ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118b0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80118b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80118b4:	f7fb f9ba 	bl	800cc2c <pbuf_clen>
 80118b8:	4603      	mov	r3, r0
 80118ba:	461a      	mov	r2, r3
 80118bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80118c0:	4413      	add	r3, r2
 80118c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80118c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80118ca:	8bfb      	ldrh	r3, [r7, #30]
 80118cc:	4413      	add	r3, r2
 80118ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80118d2:	e0dc      	b.n	8011a8e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f000 80d7 	beq.w	8011a8e <tcp_write+0x47a>
 80118e0:	4b03      	ldr	r3, [pc, #12]	@ (80118f0 <tcp_write+0x2dc>)
 80118e2:	f240 224a 	movw	r2, #586	@ 0x24a
 80118e6:	490a      	ldr	r1, [pc, #40]	@ (8011910 <tcp_write+0x2fc>)
 80118e8:	4803      	ldr	r0, [pc, #12]	@ (80118f8 <tcp_write+0x2e4>)
 80118ea:	f005 fa13 	bl	8016d14 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80118ee:	e0ce      	b.n	8011a8e <tcp_write+0x47a>
 80118f0:	0801a7d4 	.word	0x0801a7d4
 80118f4:	0801a974 	.word	0x0801a974
 80118f8:	0801a828 	.word	0x0801a828
 80118fc:	0801a98c 	.word	0x0801a98c
 8011900:	0801a9c0 	.word	0x0801a9c0
 8011904:	0801a9d8 	.word	0x0801a9d8
 8011908:	0801a9f8 	.word	0x0801a9f8
 801190c:	0801aa18 	.word	0x0801aa18
 8011910:	0801aa44 	.word	0x0801aa44
    struct pbuf *p;
    u16_t left = len - pos;
 8011914:	88fa      	ldrh	r2, [r7, #6]
 8011916:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801191e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011922:	b29b      	uxth	r3, r3
 8011924:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801192a:	8b7a      	ldrh	r2, [r7, #26]
 801192c:	8bbb      	ldrh	r3, [r7, #28]
 801192e:	4293      	cmp	r3, r2
 8011930:	bf28      	it	cs
 8011932:	4613      	movcs	r3, r2
 8011934:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011936:	797b      	ldrb	r3, [r7, #5]
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	2b00      	cmp	r3, #0
 801193e:	d036      	beq.n	80119ae <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011940:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011944:	b29a      	uxth	r2, r3
 8011946:	8b3b      	ldrh	r3, [r7, #24]
 8011948:	4413      	add	r3, r2
 801194a:	b299      	uxth	r1, r3
 801194c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801194e:	2b00      	cmp	r3, #0
 8011950:	bf0c      	ite	eq
 8011952:	2301      	moveq	r3, #1
 8011954:	2300      	movne	r3, #0
 8011956:	b2db      	uxtb	r3, r3
 8011958:	f107 0012 	add.w	r0, r7, #18
 801195c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801195e:	9302      	str	r3, [sp, #8]
 8011960:	797b      	ldrb	r3, [r7, #5]
 8011962:	9301      	str	r3, [sp, #4]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	4603      	mov	r3, r0
 801196a:	2036      	movs	r0, #54	@ 0x36
 801196c:	f7ff fd5e 	bl	801142c <tcp_pbuf_prealloc>
 8011970:	6338      	str	r0, [r7, #48]	@ 0x30
 8011972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011974:	2b00      	cmp	r3, #0
 8011976:	f000 8178 	beq.w	8011c6a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801197a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801197c:	895b      	ldrh	r3, [r3, #10]
 801197e:	8b3a      	ldrh	r2, [r7, #24]
 8011980:	429a      	cmp	r2, r3
 8011982:	d906      	bls.n	8011992 <tcp_write+0x37e>
 8011984:	4b8c      	ldr	r3, [pc, #560]	@ (8011bb8 <tcp_write+0x5a4>)
 8011986:	f240 2266 	movw	r2, #614	@ 0x266
 801198a:	498c      	ldr	r1, [pc, #560]	@ (8011bbc <tcp_write+0x5a8>)
 801198c:	488c      	ldr	r0, [pc, #560]	@ (8011bc0 <tcp_write+0x5ac>)
 801198e:	f005 f9c1 	bl	8016d14 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801199a:	18d0      	adds	r0, r2, r3
 801199c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	4413      	add	r3, r2
 80119a4:	8b3a      	ldrh	r2, [r7, #24]
 80119a6:	4619      	mov	r1, r3
 80119a8:	f005 fa97 	bl	8016eda <memcpy>
 80119ac:	e02f      	b.n	8011a0e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80119ae:	8a7b      	ldrh	r3, [r7, #18]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d006      	beq.n	80119c2 <tcp_write+0x3ae>
 80119b4:	4b80      	ldr	r3, [pc, #512]	@ (8011bb8 <tcp_write+0x5a4>)
 80119b6:	f240 2271 	movw	r2, #625	@ 0x271
 80119ba:	4982      	ldr	r1, [pc, #520]	@ (8011bc4 <tcp_write+0x5b0>)
 80119bc:	4880      	ldr	r0, [pc, #512]	@ (8011bc0 <tcp_write+0x5ac>)
 80119be:	f005 f9a9 	bl	8016d14 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80119c2:	8b3b      	ldrh	r3, [r7, #24]
 80119c4:	2201      	movs	r2, #1
 80119c6:	4619      	mov	r1, r3
 80119c8:	2036      	movs	r0, #54	@ 0x36
 80119ca:	f7fa fdbd 	bl	800c548 <pbuf_alloc>
 80119ce:	6178      	str	r0, [r7, #20]
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f000 814b 	beq.w	8011c6e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80119d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	441a      	add	r2, r3
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80119ee:	4619      	mov	r1, r3
 80119f0:	2036      	movs	r0, #54	@ 0x36
 80119f2:	f7fa fda9 	bl	800c548 <pbuf_alloc>
 80119f6:	6338      	str	r0, [r7, #48]	@ 0x30
 80119f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d103      	bne.n	8011a06 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80119fe:	6978      	ldr	r0, [r7, #20]
 8011a00:	f7fb f886 	bl	800cb10 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011a04:	e136      	b.n	8011c74 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011a06:	6979      	ldr	r1, [r7, #20]
 8011a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a0a:	f7fb f94f 	bl	800ccac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a10:	f7fb f90c 	bl	800cc2c <pbuf_clen>
 8011a14:	4603      	mov	r3, r0
 8011a16:	461a      	mov	r2, r3
 8011a18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011a22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011a26:	2b09      	cmp	r3, #9
 8011a28:	d903      	bls.n	8011a32 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a2c:	f7fb f870 	bl	800cb10 <pbuf_free>
      goto memerr;
 8011a30:	e120      	b.n	8011c74 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011a36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a3a:	441a      	add	r2, r3
 8011a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	4613      	mov	r3, r2
 8011a44:	2200      	movs	r2, #0
 8011a46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f7ff fc53 	bl	80112f4 <tcp_create_segment>
 8011a4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 810d 	beq.w	8011c72 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d102      	bne.n	8011a64 <tcp_write+0x450>
      queue = seg;
 8011a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a62:	e00c      	b.n	8011a7e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d106      	bne.n	8011a78 <tcp_write+0x464>
 8011a6a:	4b53      	ldr	r3, [pc, #332]	@ (8011bb8 <tcp_write+0x5a4>)
 8011a6c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011a70:	4955      	ldr	r1, [pc, #340]	@ (8011bc8 <tcp_write+0x5b4>)
 8011a72:	4853      	ldr	r0, [pc, #332]	@ (8011bc0 <tcp_write+0x5ac>)
 8011a74:	f005 f94e 	bl	8016d14 <iprintf>
      prev_seg->next = seg;
 8011a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a7c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a80:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011a82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011a86:	8b3b      	ldrh	r3, [r7, #24]
 8011a88:	4413      	add	r3, r2
 8011a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011a8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011a92:	88fb      	ldrh	r3, [r7, #6]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	f4ff af3d 	bcc.w	8011914 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011a9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d02c      	beq.n	8011afa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011aa6:	e01e      	b.n	8011ae6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aaa:	891a      	ldrh	r2, [r3, #8]
 8011aac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011aae:	4413      	add	r3, r2
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d110      	bne.n	8011ae0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ac4:	8952      	ldrh	r2, [r2, #10]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011aca:	68b9      	ldr	r1, [r7, #8]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f005 fa04 	bl	8016eda <memcpy>
        p->len += oversize_used;
 8011ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad4:	895a      	ldrh	r2, [r3, #10]
 8011ad6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ad8:	4413      	add	r3, r2
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ade:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1dd      	bne.n	8011aa8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aee:	891a      	ldrh	r2, [r3, #8]
 8011af0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011af2:	4413      	add	r3, r2
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011af8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011afa:	8a7a      	ldrh	r2, [r7, #18]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d018      	beq.n	8011b3a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d106      	bne.n	8011b1c <tcp_write+0x508>
 8011b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8011bb8 <tcp_write+0x5a4>)
 8011b10:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011b14:	492d      	ldr	r1, [pc, #180]	@ (8011bcc <tcp_write+0x5b8>)
 8011b16:	482a      	ldr	r0, [pc, #168]	@ (8011bc0 <tcp_write+0x5ac>)
 8011b18:	f005 f8fc 	bl	8016d14 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7fb f8c2 	bl	800ccac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b2a:	891a      	ldrh	r2, [r3, #8]
 8011b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b2e:	891b      	ldrh	r3, [r3, #8]
 8011b30:	4413      	add	r3, r2
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b36:	811a      	strh	r2, [r3, #8]
 8011b38:	e037      	b.n	8011baa <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011b3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d034      	beq.n	8011baa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d003      	beq.n	8011b4e <tcp_write+0x53a>
 8011b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d106      	bne.n	8011b5c <tcp_write+0x548>
 8011b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb8 <tcp_write+0x5a4>)
 8011b50:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011b54:	491e      	ldr	r1, [pc, #120]	@ (8011bd0 <tcp_write+0x5bc>)
 8011b56:	481a      	ldr	r0, [pc, #104]	@ (8011bc0 <tcp_write+0x5ac>)
 8011b58:	f005 f8dc 	bl	8016d14 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b62:	e009      	b.n	8011b78 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b66:	891a      	ldrh	r2, [r3, #8]
 8011b68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b6a:	4413      	add	r3, r2
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b70:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d1f1      	bne.n	8011b64 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b82:	891a      	ldrh	r2, [r3, #8]
 8011b84:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b86:	4413      	add	r3, r2
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b90:	895a      	ldrh	r2, [r3, #10]
 8011b92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b94:	4413      	add	r3, r2
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b9e:	891a      	ldrh	r2, [r3, #8]
 8011ba0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ba2:	4413      	add	r3, r2
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d111      	bne.n	8011bd4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011bb6:	e010      	b.n	8011bda <tcp_write+0x5c6>
 8011bb8:	0801a7d4 	.word	0x0801a7d4
 8011bbc:	0801aa74 	.word	0x0801aa74
 8011bc0:	0801a828 	.word	0x0801a828
 8011bc4:	0801aab4 	.word	0x0801aab4
 8011bc8:	0801aac4 	.word	0x0801aac4
 8011bcc:	0801aad8 	.word	0x0801aad8
 8011bd0:	0801ab10 	.word	0x0801ab10
  } else {
    last_unsent->next = queue;
 8011bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bd8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011bde:	88fb      	ldrh	r3, [r7, #6]
 8011be0:	441a      	add	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011bec:	88fb      	ldrh	r3, [r7, #6]
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011bfe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d00e      	beq.n	8011c2a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10a      	bne.n	8011c2a <tcp_write+0x616>
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d106      	bne.n	8011c2a <tcp_write+0x616>
 8011c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8011cd0 <tcp_write+0x6bc>)
 8011c1e:	f240 3212 	movw	r2, #786	@ 0x312
 8011c22:	492c      	ldr	r1, [pc, #176]	@ (8011cd4 <tcp_write+0x6c0>)
 8011c24:	482c      	ldr	r0, [pc, #176]	@ (8011cd8 <tcp_write+0x6c4>)
 8011c26:	f005 f875 	bl	8016d14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d016      	beq.n	8011c5e <tcp_write+0x64a>
 8011c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d012      	beq.n	8011c5e <tcp_write+0x64a>
 8011c38:	797b      	ldrb	r3, [r7, #5]
 8011c3a:	f003 0302 	and.w	r3, r3, #2
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10d      	bne.n	8011c5e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	899b      	ldrh	r3, [r3, #12]
 8011c48:	b29c      	uxth	r4, r3
 8011c4a:	2008      	movs	r0, #8
 8011c4c:	f7f9 fb6e 	bl	800b32c <lwip_htons>
 8011c50:	4603      	mov	r3, r0
 8011c52:	461a      	mov	r2, r3
 8011c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	4322      	orrs	r2, r4
 8011c5a:	b292      	uxth	r2, r2
 8011c5c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	e031      	b.n	8011cc6 <tcp_write+0x6b2>
          goto memerr;
 8011c62:	bf00      	nop
 8011c64:	e006      	b.n	8011c74 <tcp_write+0x660>
            goto memerr;
 8011c66:	bf00      	nop
 8011c68:	e004      	b.n	8011c74 <tcp_write+0x660>
        goto memerr;
 8011c6a:	bf00      	nop
 8011c6c:	e002      	b.n	8011c74 <tcp_write+0x660>
        goto memerr;
 8011c6e:	bf00      	nop
 8011c70:	e000      	b.n	8011c74 <tcp_write+0x660>
      goto memerr;
 8011c72:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	8b5b      	ldrh	r3, [r3, #26]
 8011c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d002      	beq.n	8011c8e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011c88:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011c8a:	f7fa ff41 	bl	800cb10 <pbuf_free>
  }
  if (queue != NULL) {
 8011c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d002      	beq.n	8011c9a <tcp_write+0x686>
    tcp_segs_free(queue);
 8011c94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011c96:	f7fc fb71 	bl	800e37c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00e      	beq.n	8011cc2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d10a      	bne.n	8011cc2 <tcp_write+0x6ae>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d106      	bne.n	8011cc2 <tcp_write+0x6ae>
 8011cb4:	4b06      	ldr	r3, [pc, #24]	@ (8011cd0 <tcp_write+0x6bc>)
 8011cb6:	f240 3227 	movw	r2, #807	@ 0x327
 8011cba:	4906      	ldr	r1, [pc, #24]	@ (8011cd4 <tcp_write+0x6c0>)
 8011cbc:	4806      	ldr	r0, [pc, #24]	@ (8011cd8 <tcp_write+0x6c4>)
 8011cbe:	f005 f829 	bl	8016d14 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	375c      	adds	r7, #92	@ 0x5c
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd90      	pop	{r4, r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	0801a7d4 	.word	0x0801a7d4
 8011cd4:	0801ab48 	.word	0x0801ab48
 8011cd8:	0801a828 	.word	0x0801a828

08011cdc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011cdc:	b590      	push	{r4, r7, lr}
 8011cde:	b08b      	sub	sp, #44	@ 0x2c
 8011ce0:	af02      	add	r7, sp, #8
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	61fb      	str	r3, [r7, #28]
 8011cec:	2300      	movs	r3, #0
 8011cee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <tcp_split_unsent_seg+0x2c>
 8011cfa:	4b95      	ldr	r3, [pc, #596]	@ (8011f50 <tcp_split_unsent_seg+0x274>)
 8011cfc:	f240 324b 	movw	r2, #843	@ 0x34b
 8011d00:	4994      	ldr	r1, [pc, #592]	@ (8011f54 <tcp_split_unsent_seg+0x278>)
 8011d02:	4895      	ldr	r0, [pc, #596]	@ (8011f58 <tcp_split_unsent_seg+0x27c>)
 8011d04:	f005 f806 	bl	8016d14 <iprintf>

  useg = pcb->unsent;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d0c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d102      	bne.n	8011d1a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011d14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d18:	e116      	b.n	8011f48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011d1a:	887b      	ldrh	r3, [r7, #2]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d109      	bne.n	8011d34 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011d20:	4b8b      	ldr	r3, [pc, #556]	@ (8011f50 <tcp_split_unsent_seg+0x274>)
 8011d22:	f240 3253 	movw	r2, #851	@ 0x353
 8011d26:	498d      	ldr	r1, [pc, #564]	@ (8011f5c <tcp_split_unsent_seg+0x280>)
 8011d28:	488b      	ldr	r0, [pc, #556]	@ (8011f58 <tcp_split_unsent_seg+0x27c>)
 8011d2a:	f004 fff3 	bl	8016d14 <iprintf>
    return ERR_VAL;
 8011d2e:	f06f 0305 	mvn.w	r3, #5
 8011d32:	e109      	b.n	8011f48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	891b      	ldrh	r3, [r3, #8]
 8011d38:	887a      	ldrh	r2, [r7, #2]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d301      	bcc.n	8011d42 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e102      	b.n	8011f48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d46:	887a      	ldrh	r2, [r7, #2]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d906      	bls.n	8011d5a <tcp_split_unsent_seg+0x7e>
 8011d4c:	4b80      	ldr	r3, [pc, #512]	@ (8011f50 <tcp_split_unsent_seg+0x274>)
 8011d4e:	f240 325b 	movw	r2, #859	@ 0x35b
 8011d52:	4983      	ldr	r1, [pc, #524]	@ (8011f60 <tcp_split_unsent_seg+0x284>)
 8011d54:	4880      	ldr	r0, [pc, #512]	@ (8011f58 <tcp_split_unsent_seg+0x27c>)
 8011d56:	f004 ffdd 	bl	8016d14 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	891b      	ldrh	r3, [r3, #8]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d106      	bne.n	8011d70 <tcp_split_unsent_seg+0x94>
 8011d62:	4b7b      	ldr	r3, [pc, #492]	@ (8011f50 <tcp_split_unsent_seg+0x274>)
 8011d64:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011d68:	497e      	ldr	r1, [pc, #504]	@ (8011f64 <tcp_split_unsent_seg+0x288>)
 8011d6a:	487b      	ldr	r0, [pc, #492]	@ (8011f58 <tcp_split_unsent_seg+0x27c>)
 8011d6c:	f004 ffd2 	bl	8016d14 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	7a9b      	ldrb	r3, [r3, #10]
 8011d74:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	f003 0304 	and.w	r3, r3, #4
 8011d80:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	891a      	ldrh	r2, [r3, #8]
 8011d86:	887b      	ldrh	r3, [r7, #2]
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011d8c:	7bbb      	ldrb	r3, [r7, #14]
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	89bb      	ldrh	r3, [r7, #12]
 8011d92:	4413      	add	r3, r2
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	2036      	movs	r0, #54	@ 0x36
 8011d9e:	f7fa fbd3 	bl	800c548 <pbuf_alloc>
 8011da2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 80b7 	beq.w	8011f1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	891a      	ldrh	r2, [r3, #8]
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	891b      	ldrh	r3, [r3, #8]
 8011db6:	1ad3      	subs	r3, r2, r3
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	887b      	ldrh	r3, [r7, #2]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	6858      	ldr	r0, [r3, #4]
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	685a      	ldr	r2, [r3, #4]
 8011dc8:	7bbb      	ldrb	r3, [r7, #14]
 8011dca:	18d1      	adds	r1, r2, r3
 8011dcc:	897b      	ldrh	r3, [r7, #10]
 8011dce:	89ba      	ldrh	r2, [r7, #12]
 8011dd0:	f7fb f8a4 	bl	800cf1c <pbuf_copy_partial>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	89bb      	ldrh	r3, [r7, #12]
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	f040 809f 	bne.w	8011f1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7f9 fa9f 	bl	800b32c <lwip_htons>
 8011dee:	4603      	mov	r3, r0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011df6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011df8:	2300      	movs	r3, #0
 8011dfa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011dfc:	7efb      	ldrb	r3, [r7, #27]
 8011dfe:	f003 0308 	and.w	r3, r3, #8
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d007      	beq.n	8011e16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011e06:	7efb      	ldrb	r3, [r7, #27]
 8011e08:	f023 0308 	bic.w	r3, r3, #8
 8011e0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011e0e:	7ebb      	ldrb	r3, [r7, #26]
 8011e10:	f043 0308 	orr.w	r3, r3, #8
 8011e14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011e16:	7efb      	ldrb	r3, [r7, #27]
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d007      	beq.n	8011e30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011e20:	7efb      	ldrb	r3, [r7, #27]
 8011e22:	f023 0301 	bic.w	r3, r3, #1
 8011e26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011e28:	7ebb      	ldrb	r3, [r7, #26]
 8011e2a:	f043 0301 	orr.w	r3, r3, #1
 8011e2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f9 fa8d 	bl	800b356 <lwip_htonl>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	887b      	ldrh	r3, [r7, #2]
 8011e40:	18d1      	adds	r1, r2, r3
 8011e42:	7eba      	ldrb	r2, [r7, #26]
 8011e44:	7bfb      	ldrb	r3, [r7, #15]
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	6939      	ldr	r1, [r7, #16]
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f7ff fa51 	bl	80112f4 <tcp_create_segment>
 8011e52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d063      	beq.n	8011f22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fa fee4 	bl	800cc2c <pbuf_clen>
 8011e64:	4603      	mov	r3, r0
 8011e66:	461a      	mov	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	6858      	ldr	r0, [r3, #4]
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	891a      	ldrh	r2, [r3, #8]
 8011e82:	89bb      	ldrh	r3, [r7, #12]
 8011e84:	1ad3      	subs	r3, r2, r3
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7fa fcbb 	bl	800c804 <pbuf_realloc>
  useg->len -= remainder;
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	891a      	ldrh	r2, [r3, #8]
 8011e92:	89bb      	ldrh	r3, [r7, #12]
 8011e94:	1ad3      	subs	r3, r2, r3
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	899b      	ldrh	r3, [r3, #12]
 8011ea2:	b29c      	uxth	r4, r3
 8011ea4:	7efb      	ldrb	r3, [r7, #27]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f9 fa3f 	bl	800b32c <lwip_htons>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	4322      	orrs	r2, r4
 8011eb8:	b292      	uxth	r2, r2
 8011eba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fa feb3 	bl	800cc2c <pbuf_clen>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	461a      	mov	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ed0:	4413      	add	r3, r2
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fa fea4 	bl	800cc2c <pbuf_clen>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011eee:	4413      	add	r3, r2
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d103      	bne.n	8011f16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	e016      	b.n	8011f48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011f1a:	bf00      	nop
 8011f1c:	e002      	b.n	8011f24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011f1e:	bf00      	nop
 8011f20:	e000      	b.n	8011f24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011f22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d006      	beq.n	8011f38 <tcp_split_unsent_seg+0x25c>
 8011f2a:	4b09      	ldr	r3, [pc, #36]	@ (8011f50 <tcp_split_unsent_seg+0x274>)
 8011f2c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011f30:	490d      	ldr	r1, [pc, #52]	@ (8011f68 <tcp_split_unsent_seg+0x28c>)
 8011f32:	4809      	ldr	r0, [pc, #36]	@ (8011f58 <tcp_split_unsent_seg+0x27c>)
 8011f34:	f004 feee 	bl	8016d14 <iprintf>
  if (p != NULL) {
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d002      	beq.n	8011f44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011f3e:	6938      	ldr	r0, [r7, #16]
 8011f40:	f7fa fde6 	bl	800cb10 <pbuf_free>
  }

  return ERR_MEM;
 8011f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3724      	adds	r7, #36	@ 0x24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd90      	pop	{r4, r7, pc}
 8011f50:	0801a7d4 	.word	0x0801a7d4
 8011f54:	0801ab68 	.word	0x0801ab68
 8011f58:	0801a828 	.word	0x0801a828
 8011f5c:	0801ab8c 	.word	0x0801ab8c
 8011f60:	0801abb0 	.word	0x0801abb0
 8011f64:	0801abc0 	.word	0x0801abc0
 8011f68:	0801abd0 	.word	0x0801abd0

08011f6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011f6c:	b590      	push	{r4, r7, lr}
 8011f6e:	b085      	sub	sp, #20
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <tcp_send_fin+0x1c>
 8011f7a:	4b21      	ldr	r3, [pc, #132]	@ (8012000 <tcp_send_fin+0x94>)
 8011f7c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011f80:	4920      	ldr	r1, [pc, #128]	@ (8012004 <tcp_send_fin+0x98>)
 8011f82:	4821      	ldr	r0, [pc, #132]	@ (8012008 <tcp_send_fin+0x9c>)
 8011f84:	f004 fec6 	bl	8016d14 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d02e      	beq.n	8011fee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f94:	60fb      	str	r3, [r7, #12]
 8011f96:	e002      	b.n	8011f9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1f8      	bne.n	8011f98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	899b      	ldrh	r3, [r3, #12]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7f9 f9bc 	bl	800b32c <lwip_htons>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	f003 0307 	and.w	r3, r3, #7
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d116      	bne.n	8011fee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	899b      	ldrh	r3, [r3, #12]
 8011fc6:	b29c      	uxth	r4, r3
 8011fc8:	2001      	movs	r0, #1
 8011fca:	f7f9 f9af 	bl	800b32c <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	4322      	orrs	r2, r4
 8011fd8:	b292      	uxth	r2, r2
 8011fda:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	8b5b      	ldrh	r3, [r3, #26]
 8011fe0:	f043 0320 	orr.w	r3, r3, #32
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011fea:	2300      	movs	r3, #0
 8011fec:	e004      	b.n	8011ff8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011fee:	2101      	movs	r1, #1
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f80b 	bl	801200c <tcp_enqueue_flags>
 8011ff6:	4603      	mov	r3, r0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3714      	adds	r7, #20
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd90      	pop	{r4, r7, pc}
 8012000:	0801a7d4 	.word	0x0801a7d4
 8012004:	0801abdc 	.word	0x0801abdc
 8012008:	0801a828 	.word	0x0801a828

0801200c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b08a      	sub	sp, #40	@ 0x28
 8012010:	af02      	add	r7, sp, #8
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	460b      	mov	r3, r1
 8012016:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012018:	2300      	movs	r3, #0
 801201a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012020:	78fb      	ldrb	r3, [r7, #3]
 8012022:	f003 0303 	and.w	r3, r3, #3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d106      	bne.n	8012038 <tcp_enqueue_flags+0x2c>
 801202a:	4b67      	ldr	r3, [pc, #412]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 801202c:	f240 4211 	movw	r2, #1041	@ 0x411
 8012030:	4966      	ldr	r1, [pc, #408]	@ (80121cc <tcp_enqueue_flags+0x1c0>)
 8012032:	4867      	ldr	r0, [pc, #412]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 8012034:	f004 fe6e 	bl	8016d14 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <tcp_enqueue_flags+0x40>
 801203e:	4b62      	ldr	r3, [pc, #392]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 8012040:	f240 4213 	movw	r2, #1043	@ 0x413
 8012044:	4963      	ldr	r1, [pc, #396]	@ (80121d4 <tcp_enqueue_flags+0x1c8>)
 8012046:	4862      	ldr	r0, [pc, #392]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 8012048:	f004 fe64 	bl	8016d14 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801204c:	78fb      	ldrb	r3, [r7, #3]
 801204e:	f003 0302 	and.w	r3, r3, #2
 8012052:	2b00      	cmp	r3, #0
 8012054:	d001      	beq.n	801205a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012056:	2301      	movs	r3, #1
 8012058:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801205a:	7ffb      	ldrb	r3, [r7, #31]
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	b2db      	uxtb	r3, r3
 8012060:	f003 0304 	and.w	r3, r3, #4
 8012064:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012066:	7dfb      	ldrb	r3, [r7, #23]
 8012068:	b29b      	uxth	r3, r3
 801206a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801206e:	4619      	mov	r1, r3
 8012070:	2036      	movs	r0, #54	@ 0x36
 8012072:	f7fa fa69 	bl	800c548 <pbuf_alloc>
 8012076:	6138      	str	r0, [r7, #16]
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d109      	bne.n	8012092 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8b5b      	ldrh	r3, [r3, #26]
 8012082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012086:	b29a      	uxth	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801208c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012090:	e095      	b.n	80121be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	895a      	ldrh	r2, [r3, #10]
 8012096:	7dfb      	ldrb	r3, [r7, #23]
 8012098:	b29b      	uxth	r3, r3
 801209a:	429a      	cmp	r2, r3
 801209c:	d206      	bcs.n	80120ac <tcp_enqueue_flags+0xa0>
 801209e:	4b4a      	ldr	r3, [pc, #296]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 80120a0:	f240 4239 	movw	r2, #1081	@ 0x439
 80120a4:	494c      	ldr	r1, [pc, #304]	@ (80121d8 <tcp_enqueue_flags+0x1cc>)
 80120a6:	484a      	ldr	r0, [pc, #296]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 80120a8:	f004 fe34 	bl	8016d14 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80120b0:	78fa      	ldrb	r2, [r7, #3]
 80120b2:	7ffb      	ldrb	r3, [r7, #31]
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	460b      	mov	r3, r1
 80120b8:	6939      	ldr	r1, [r7, #16]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff f91a 	bl	80112f4 <tcp_create_segment>
 80120c0:	60f8      	str	r0, [r7, #12]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d109      	bne.n	80120dc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	8b5b      	ldrh	r3, [r3, #26]
 80120cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80120d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80120da:	e070      	b.n	80121be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	f003 0303 	and.w	r3, r3, #3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d006      	beq.n	80120f6 <tcp_enqueue_flags+0xea>
 80120e8:	4b37      	ldr	r3, [pc, #220]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 80120ea:	f240 4242 	movw	r2, #1090	@ 0x442
 80120ee:	493b      	ldr	r1, [pc, #236]	@ (80121dc <tcp_enqueue_flags+0x1d0>)
 80120f0:	4837      	ldr	r0, [pc, #220]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 80120f2:	f004 fe0f 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	891b      	ldrh	r3, [r3, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d006      	beq.n	801210c <tcp_enqueue_flags+0x100>
 80120fe:	4b32      	ldr	r3, [pc, #200]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 8012100:	f240 4243 	movw	r2, #1091	@ 0x443
 8012104:	4936      	ldr	r1, [pc, #216]	@ (80121e0 <tcp_enqueue_flags+0x1d4>)
 8012106:	4832      	ldr	r0, [pc, #200]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 8012108:	f004 fe04 	bl	8016d14 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012110:	2b00      	cmp	r3, #0
 8012112:	d103      	bne.n	801211c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	66da      	str	r2, [r3, #108]	@ 0x6c
 801211a:	e00d      	b.n	8012138 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012120:	61bb      	str	r3, [r7, #24]
 8012122:	e002      	b.n	801212a <tcp_enqueue_flags+0x11e>
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	61bb      	str	r3, [r7, #24]
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1f8      	bne.n	8012124 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012140:	78fb      	ldrb	r3, [r7, #3]
 8012142:	f003 0302 	and.w	r3, r3, #2
 8012146:	2b00      	cmp	r3, #0
 8012148:	d104      	bne.n	8012154 <tcp_enqueue_flags+0x148>
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	d004      	beq.n	801215e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012158:	1c5a      	adds	r2, r3, #1
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801215e:	78fb      	ldrb	r3, [r7, #3]
 8012160:	f003 0301 	and.w	r3, r3, #1
 8012164:	2b00      	cmp	r3, #0
 8012166:	d006      	beq.n	8012176 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	8b5b      	ldrh	r3, [r3, #26]
 801216c:	f043 0320 	orr.w	r3, r3, #32
 8012170:	b29a      	uxth	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	f7fa fd56 	bl	800cc2c <pbuf_clen>
 8012180:	4603      	mov	r3, r0
 8012182:	461a      	mov	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801218a:	4413      	add	r3, r2
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00e      	beq.n	80121bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d10a      	bne.n	80121bc <tcp_enqueue_flags+0x1b0>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d106      	bne.n	80121bc <tcp_enqueue_flags+0x1b0>
 80121ae:	4b06      	ldr	r3, [pc, #24]	@ (80121c8 <tcp_enqueue_flags+0x1bc>)
 80121b0:	f240 4265 	movw	r2, #1125	@ 0x465
 80121b4:	490b      	ldr	r1, [pc, #44]	@ (80121e4 <tcp_enqueue_flags+0x1d8>)
 80121b6:	4806      	ldr	r0, [pc, #24]	@ (80121d0 <tcp_enqueue_flags+0x1c4>)
 80121b8:	f004 fdac 	bl	8016d14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80121bc:	2300      	movs	r3, #0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3720      	adds	r7, #32
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	0801a7d4 	.word	0x0801a7d4
 80121cc:	0801abf8 	.word	0x0801abf8
 80121d0:	0801a828 	.word	0x0801a828
 80121d4:	0801ac50 	.word	0x0801ac50
 80121d8:	0801ac70 	.word	0x0801ac70
 80121dc:	0801acac 	.word	0x0801acac
 80121e0:	0801acc4 	.word	0x0801acc4
 80121e4:	0801acf0 	.word	0x0801acf0

080121e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80121e8:	b5b0      	push	{r4, r5, r7, lr}
 80121ea:	b08a      	sub	sp, #40	@ 0x28
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d106      	bne.n	8012204 <tcp_output+0x1c>
 80121f6:	4b8a      	ldr	r3, [pc, #552]	@ (8012420 <tcp_output+0x238>)
 80121f8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80121fc:	4989      	ldr	r1, [pc, #548]	@ (8012424 <tcp_output+0x23c>)
 80121fe:	488a      	ldr	r0, [pc, #552]	@ (8012428 <tcp_output+0x240>)
 8012200:	f004 fd88 	bl	8016d14 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	7d1b      	ldrb	r3, [r3, #20]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d106      	bne.n	801221a <tcp_output+0x32>
 801220c:	4b84      	ldr	r3, [pc, #528]	@ (8012420 <tcp_output+0x238>)
 801220e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012212:	4986      	ldr	r1, [pc, #536]	@ (801242c <tcp_output+0x244>)
 8012214:	4884      	ldr	r0, [pc, #528]	@ (8012428 <tcp_output+0x240>)
 8012216:	f004 fd7d 	bl	8016d14 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801221a:	4b85      	ldr	r3, [pc, #532]	@ (8012430 <tcp_output+0x248>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	429a      	cmp	r2, r3
 8012222:	d101      	bne.n	8012228 <tcp_output+0x40>
    return ERR_OK;
 8012224:	2300      	movs	r3, #0
 8012226:	e1ce      	b.n	80125c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012234:	4293      	cmp	r3, r2
 8012236:	bf28      	it	cs
 8012238:	4613      	movcs	r3, r2
 801223a:	b29b      	uxth	r3, r3
 801223c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012242:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012246:	2b00      	cmp	r3, #0
 8012248:	d10b      	bne.n	8012262 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8b5b      	ldrh	r3, [r3, #26]
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 81aa 	beq.w	80125ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fdcb 	bl	8012df4 <tcp_send_empty_ack>
 801225e:	4603      	mov	r3, r0
 8012260:	e1b1      	b.n	80125c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012262:	6879      	ldr	r1, [r7, #4]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	3304      	adds	r3, #4
 8012268:	461a      	mov	r2, r3
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f7ff f826 	bl	80112bc <tcp_route>
 8012270:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <tcp_output+0x96>
    return ERR_RTE;
 8012278:	f06f 0303 	mvn.w	r3, #3
 801227c:	e1a3      	b.n	80125c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d003      	beq.n	801228c <tcp_output+0xa4>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d111      	bne.n	80122b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d002      	beq.n	8012298 <tcp_output+0xb0>
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	3304      	adds	r3, #4
 8012296:	e000      	b.n	801229a <tcp_output+0xb2>
 8012298:	2300      	movs	r3, #0
 801229a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d102      	bne.n	80122a8 <tcp_output+0xc0>
      return ERR_RTE;
 80122a2:	f06f 0303 	mvn.w	r3, #3
 80122a6:	e18e      	b.n	80125c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80122b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f9 f84d 	bl	800b356 <lwip_htonl>
 80122bc:	4602      	mov	r2, r0
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122c2:	1ad3      	subs	r3, r2, r3
 80122c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122c6:	8912      	ldrh	r2, [r2, #8]
 80122c8:	4413      	add	r3, r2
 80122ca:	69ba      	ldr	r2, [r7, #24]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d227      	bcs.n	8012320 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122d6:	461a      	mov	r2, r3
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	4293      	cmp	r3, r2
 80122dc:	d114      	bne.n	8012308 <tcp_output+0x120>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d110      	bne.n	8012308 <tcp_output+0x120>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10b      	bne.n	8012308 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2200      	movs	r2, #0
 80122f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2201      	movs	r2, #1
 80122fc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	8b5b      	ldrh	r3, [r3, #26]
 801230c:	f003 0302 	and.w	r3, r3, #2
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 814d 	beq.w	80125b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fd6c 	bl	8012df4 <tcp_send_empty_ack>
 801231c:	4603      	mov	r3, r0
 801231e:	e152      	b.n	80125c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801232c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801232e:	6a3b      	ldr	r3, [r7, #32]
 8012330:	2b00      	cmp	r3, #0
 8012332:	f000 811c 	beq.w	801256e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012336:	e002      	b.n	801233e <tcp_output+0x156>
 8012338:	6a3b      	ldr	r3, [r7, #32]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	623b      	str	r3, [r7, #32]
 801233e:	6a3b      	ldr	r3, [r7, #32]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1f8      	bne.n	8012338 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012346:	e112      	b.n	801256e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	b29b      	uxth	r3, r3
 8012350:	4618      	mov	r0, r3
 8012352:	f7f8 ffeb 	bl	800b32c <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	b2db      	uxtb	r3, r3
 801235a:	f003 0304 	and.w	r3, r3, #4
 801235e:	2b00      	cmp	r3, #0
 8012360:	d006      	beq.n	8012370 <tcp_output+0x188>
 8012362:	4b2f      	ldr	r3, [pc, #188]	@ (8012420 <tcp_output+0x238>)
 8012364:	f240 5236 	movw	r2, #1334	@ 0x536
 8012368:	4932      	ldr	r1, [pc, #200]	@ (8012434 <tcp_output+0x24c>)
 801236a:	482f      	ldr	r0, [pc, #188]	@ (8012428 <tcp_output+0x240>)
 801236c:	f004 fcd2 	bl	8016d14 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012374:	2b00      	cmp	r3, #0
 8012376:	d01f      	beq.n	80123b8 <tcp_output+0x1d0>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	8b5b      	ldrh	r3, [r3, #26]
 801237c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012380:	2b00      	cmp	r3, #0
 8012382:	d119      	bne.n	80123b8 <tcp_output+0x1d0>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012388:	2b00      	cmp	r3, #0
 801238a:	d00b      	beq.n	80123a4 <tcp_output+0x1bc>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d110      	bne.n	80123b8 <tcp_output+0x1d0>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801239a:	891a      	ldrh	r2, [r3, #8]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d209      	bcs.n	80123b8 <tcp_output+0x1d0>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d004      	beq.n	80123b8 <tcp_output+0x1d0>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80123b4:	2b08      	cmp	r3, #8
 80123b6:	d901      	bls.n	80123bc <tcp_output+0x1d4>
 80123b8:	2301      	movs	r3, #1
 80123ba:	e000      	b.n	80123be <tcp_output+0x1d6>
 80123bc:	2300      	movs	r3, #0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	8b5b      	ldrh	r3, [r3, #26]
 80123c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f000 80e4 	beq.w	8012598 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	7d1b      	ldrb	r3, [r3, #20]
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d00d      	beq.n	80123f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80123d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	899b      	ldrh	r3, [r3, #12]
 80123de:	b29c      	uxth	r4, r3
 80123e0:	2010      	movs	r0, #16
 80123e2:	f7f8 ffa3 	bl	800b32c <lwip_htons>
 80123e6:	4603      	mov	r3, r0
 80123e8:	461a      	mov	r2, r3
 80123ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	4322      	orrs	r2, r4
 80123f0:	b292      	uxth	r2, r2
 80123f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80123f4:	697a      	ldr	r2, [r7, #20]
 80123f6:	6879      	ldr	r1, [r7, #4]
 80123f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80123fa:	f000 f909 	bl	8012610 <tcp_output_segment>
 80123fe:	4603      	mov	r3, r0
 8012400:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d016      	beq.n	8012438 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	8b5b      	ldrh	r3, [r3, #26]
 801240e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012412:	b29a      	uxth	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	835a      	strh	r2, [r3, #26]
      return err;
 8012418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801241c:	e0d3      	b.n	80125c6 <tcp_output+0x3de>
 801241e:	bf00      	nop
 8012420:	0801a7d4 	.word	0x0801a7d4
 8012424:	0801ad18 	.word	0x0801ad18
 8012428:	0801a828 	.word	0x0801a828
 801242c:	0801ad30 	.word	0x0801ad30
 8012430:	2000d8ec 	.word	0x2000d8ec
 8012434:	0801ad58 	.word	0x0801ad58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	7d1b      	ldrb	r3, [r3, #20]
 8012444:	2b02      	cmp	r3, #2
 8012446:	d006      	beq.n	8012456 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8b5b      	ldrh	r3, [r3, #26]
 801244c:	f023 0303 	bic.w	r3, r3, #3
 8012450:	b29a      	uxth	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	4618      	mov	r0, r3
 801245e:	f7f8 ff7a 	bl	800b356 <lwip_htonl>
 8012462:	4604      	mov	r4, r0
 8012464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012466:	891b      	ldrh	r3, [r3, #8]
 8012468:	461d      	mov	r5, r3
 801246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	899b      	ldrh	r3, [r3, #12]
 8012470:	b29b      	uxth	r3, r3
 8012472:	4618      	mov	r0, r3
 8012474:	f7f8 ff5a 	bl	800b32c <lwip_htons>
 8012478:	4603      	mov	r3, r0
 801247a:	b2db      	uxtb	r3, r3
 801247c:	f003 0303 	and.w	r3, r3, #3
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <tcp_output+0x2a0>
 8012484:	2301      	movs	r3, #1
 8012486:	e000      	b.n	801248a <tcp_output+0x2a2>
 8012488:	2300      	movs	r3, #0
 801248a:	442b      	add	r3, r5
 801248c:	4423      	add	r3, r4
 801248e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	1ad3      	subs	r3, r2, r3
 8012498:	2b00      	cmp	r3, #0
 801249a:	da02      	bge.n	80124a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80124a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a4:	891b      	ldrh	r3, [r3, #8]
 80124a6:	461c      	mov	r4, r3
 80124a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	899b      	ldrh	r3, [r3, #12]
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7f8 ff3b 	bl	800b32c <lwip_htons>
 80124b6:	4603      	mov	r3, r0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	f003 0303 	and.w	r3, r3, #3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d001      	beq.n	80124c6 <tcp_output+0x2de>
 80124c2:	2301      	movs	r3, #1
 80124c4:	e000      	b.n	80124c8 <tcp_output+0x2e0>
 80124c6:	2300      	movs	r3, #0
 80124c8:	4423      	add	r3, r4
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d049      	beq.n	8012562 <tcp_output+0x37a>
      seg->next = NULL;
 80124ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d0:	2200      	movs	r2, #0
 80124d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d105      	bne.n	80124e8 <tcp_output+0x300>
        pcb->unacked = seg;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124e0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80124e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e4:	623b      	str	r3, [r7, #32]
 80124e6:	e03f      	b.n	8012568 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80124e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f8 ff31 	bl	800b356 <lwip_htonl>
 80124f4:	4604      	mov	r4, r0
 80124f6:	6a3b      	ldr	r3, [r7, #32]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7f8 ff2a 	bl	800b356 <lwip_htonl>
 8012502:	4603      	mov	r3, r0
 8012504:	1ae3      	subs	r3, r4, r3
 8012506:	2b00      	cmp	r3, #0
 8012508:	da24      	bge.n	8012554 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	3370      	adds	r3, #112	@ 0x70
 801250e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012510:	e002      	b.n	8012518 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d011      	beq.n	8012544 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	4618      	mov	r0, r3
 801252a:	f7f8 ff14 	bl	800b356 <lwip_htonl>
 801252e:	4604      	mov	r4, r0
 8012530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	4618      	mov	r0, r3
 8012538:	f7f8 ff0d 	bl	800b356 <lwip_htonl>
 801253c:	4603      	mov	r3, r0
 801253e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012540:	2b00      	cmp	r3, #0
 8012542:	dbe6      	blt.n	8012512 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	681a      	ldr	r2, [r3, #0]
 8012548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012550:	601a      	str	r2, [r3, #0]
 8012552:	e009      	b.n	8012568 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012558:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801255a:	6a3b      	ldr	r3, [r7, #32]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	623b      	str	r3, [r7, #32]
 8012560:	e002      	b.n	8012568 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012564:	f7fb ff1f 	bl	800e3a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801256c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012570:	2b00      	cmp	r3, #0
 8012572:	d012      	beq.n	801259a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	4618      	mov	r0, r3
 801257c:	f7f8 feeb 	bl	800b356 <lwip_htonl>
 8012580:	4602      	mov	r2, r0
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801258a:	8912      	ldrh	r2, [r2, #8]
 801258c:	4413      	add	r3, r2
  while (seg != NULL &&
 801258e:	69ba      	ldr	r2, [r7, #24]
 8012590:	429a      	cmp	r2, r3
 8012592:	f4bf aed9 	bcs.w	8012348 <tcp_output+0x160>
 8012596:	e000      	b.n	801259a <tcp_output+0x3b2>
      break;
 8012598:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d108      	bne.n	80125b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80125aa:	e004      	b.n	80125b6 <tcp_output+0x3ce>
    goto output_done;
 80125ac:	bf00      	nop
 80125ae:	e002      	b.n	80125b6 <tcp_output+0x3ce>
    goto output_done;
 80125b0:	bf00      	nop
 80125b2:	e000      	b.n	80125b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80125b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	8b5b      	ldrh	r3, [r3, #26]
 80125ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80125be:	b29a      	uxth	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80125c4:	2300      	movs	r3, #0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3728      	adds	r7, #40	@ 0x28
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bdb0      	pop	{r4, r5, r7, pc}
 80125ce:	bf00      	nop

080125d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d106      	bne.n	80125ec <tcp_output_segment_busy+0x1c>
 80125de:	4b09      	ldr	r3, [pc, #36]	@ (8012604 <tcp_output_segment_busy+0x34>)
 80125e0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80125e4:	4908      	ldr	r1, [pc, #32]	@ (8012608 <tcp_output_segment_busy+0x38>)
 80125e6:	4809      	ldr	r0, [pc, #36]	@ (801260c <tcp_output_segment_busy+0x3c>)
 80125e8:	f004 fb94 	bl	8016d14 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	7b9b      	ldrb	r3, [r3, #14]
 80125f2:	2b01      	cmp	r3, #1
 80125f4:	d001      	beq.n	80125fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80125f6:	2301      	movs	r3, #1
 80125f8:	e000      	b.n	80125fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	0801a7d4 	.word	0x0801a7d4
 8012608:	0801ad70 	.word	0x0801ad70
 801260c:	0801a828 	.word	0x0801a828

08012610 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012610:	b5b0      	push	{r4, r5, r7, lr}
 8012612:	b08c      	sub	sp, #48	@ 0x30
 8012614:	af04      	add	r7, sp, #16
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d106      	bne.n	8012630 <tcp_output_segment+0x20>
 8012622:	4b64      	ldr	r3, [pc, #400]	@ (80127b4 <tcp_output_segment+0x1a4>)
 8012624:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012628:	4963      	ldr	r1, [pc, #396]	@ (80127b8 <tcp_output_segment+0x1a8>)
 801262a:	4864      	ldr	r0, [pc, #400]	@ (80127bc <tcp_output_segment+0x1ac>)
 801262c:	f004 fb72 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d106      	bne.n	8012644 <tcp_output_segment+0x34>
 8012636:	4b5f      	ldr	r3, [pc, #380]	@ (80127b4 <tcp_output_segment+0x1a4>)
 8012638:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801263c:	4960      	ldr	r1, [pc, #384]	@ (80127c0 <tcp_output_segment+0x1b0>)
 801263e:	485f      	ldr	r0, [pc, #380]	@ (80127bc <tcp_output_segment+0x1ac>)
 8012640:	f004 fb68 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d106      	bne.n	8012658 <tcp_output_segment+0x48>
 801264a:	4b5a      	ldr	r3, [pc, #360]	@ (80127b4 <tcp_output_segment+0x1a4>)
 801264c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012650:	495c      	ldr	r1, [pc, #368]	@ (80127c4 <tcp_output_segment+0x1b4>)
 8012652:	485a      	ldr	r0, [pc, #360]	@ (80127bc <tcp_output_segment+0x1ac>)
 8012654:	f004 fb5e 	bl	8016d14 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012658:	68f8      	ldr	r0, [r7, #12]
 801265a:	f7ff ffb9 	bl	80125d0 <tcp_output_segment_busy>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012664:	2300      	movs	r3, #0
 8012666:	e0a1      	b.n	80127ac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	68dc      	ldr	r4, [r3, #12]
 8012670:	4610      	mov	r0, r2
 8012672:	f7f8 fe70 	bl	800b356 <lwip_htonl>
 8012676:	4603      	mov	r3, r0
 8012678:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	68dc      	ldr	r4, [r3, #12]
 8012682:	4610      	mov	r0, r2
 8012684:	f7f8 fe52 	bl	800b32c <lwip_htons>
 8012688:	4603      	mov	r3, r0
 801268a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012690:	68ba      	ldr	r2, [r7, #8]
 8012692:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012694:	441a      	add	r2, r3
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	3314      	adds	r3, #20
 80126a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	7a9b      	ldrb	r3, [r3, #10]
 80126a6:	f003 0301 	and.w	r3, r3, #1
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d015      	beq.n	80126da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	3304      	adds	r3, #4
 80126b2:	461a      	mov	r2, r3
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80126ba:	f7fc fa39 	bl	800eb30 <tcp_eff_send_mss_netif>
 80126be:	4603      	mov	r3, r0
 80126c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80126c2:	8b7b      	ldrh	r3, [r7, #26]
 80126c4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f8 fe44 	bl	800b356 <lwip_htonl>
 80126ce:	4602      	mov	r2, r0
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	3304      	adds	r3, #4
 80126d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	da02      	bge.n	80126ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	2200      	movs	r2, #0
 80126e8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10c      	bne.n	801270c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80126f2:	4b35      	ldr	r3, [pc, #212]	@ (80127c8 <tcp_output_segment+0x1b8>)
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	4618      	mov	r0, r3
 8012702:	f7f8 fe28 	bl	800b356 <lwip_htonl>
 8012706:	4602      	mov	r2, r0
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	68da      	ldr	r2, [r3, #12]
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	8959      	ldrh	r1, [r3, #10]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	8b3a      	ldrh	r2, [r7, #24]
 8012726:	1a8a      	subs	r2, r1, r2
 8012728:	b292      	uxth	r2, r2
 801272a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	8919      	ldrh	r1, [r3, #8]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	8b3a      	ldrh	r2, [r7, #24]
 8012738:	1a8a      	subs	r2, r1, r2
 801273a:	b292      	uxth	r2, r2
 801273c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	68d2      	ldr	r2, [r2, #12]
 8012746:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	2200      	movs	r2, #0
 801274e:	741a      	strb	r2, [r3, #16]
 8012750:	2200      	movs	r2, #0
 8012752:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	68da      	ldr	r2, [r3, #12]
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	7a9b      	ldrb	r3, [r3, #10]
 801275c:	f003 0301 	and.w	r3, r3, #1
 8012760:	2b00      	cmp	r3, #0
 8012762:	d001      	beq.n	8012768 <tcp_output_segment+0x158>
 8012764:	2318      	movs	r3, #24
 8012766:	e000      	b.n	801276a <tcp_output_segment+0x15a>
 8012768:	2314      	movs	r3, #20
 801276a:	4413      	add	r3, r2
 801276c:	69fa      	ldr	r2, [r7, #28]
 801276e:	429a      	cmp	r2, r3
 8012770:	d006      	beq.n	8012780 <tcp_output_segment+0x170>
 8012772:	4b10      	ldr	r3, [pc, #64]	@ (80127b4 <tcp_output_segment+0x1a4>)
 8012774:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012778:	4914      	ldr	r1, [pc, #80]	@ (80127cc <tcp_output_segment+0x1bc>)
 801277a:	4810      	ldr	r0, [pc, #64]	@ (80127bc <tcp_output_segment+0x1ac>)
 801277c:	f004 faca 	bl	8016d14 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6858      	ldr	r0, [r3, #4]
 8012784:	68b9      	ldr	r1, [r7, #8]
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	1d1c      	adds	r4, r3, #4
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	7add      	ldrb	r5, [r3, #11]
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	7a9b      	ldrb	r3, [r3, #10]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	9202      	str	r2, [sp, #8]
 8012796:	2206      	movs	r2, #6
 8012798:	9201      	str	r2, [sp, #4]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	462b      	mov	r3, r5
 801279e:	4622      	mov	r2, r4
 80127a0:	f002 fe2a 	bl	80153f8 <ip4_output_if>
 80127a4:	4603      	mov	r3, r0
 80127a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80127a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3720      	adds	r7, #32
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bdb0      	pop	{r4, r5, r7, pc}
 80127b4:	0801a7d4 	.word	0x0801a7d4
 80127b8:	0801ad98 	.word	0x0801ad98
 80127bc:	0801a828 	.word	0x0801a828
 80127c0:	0801adb8 	.word	0x0801adb8
 80127c4:	0801add8 	.word	0x0801add8
 80127c8:	2000d8a0 	.word	0x2000d8a0
 80127cc:	0801adfc 	.word	0x0801adfc

080127d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80127d0:	b5b0      	push	{r4, r5, r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d106      	bne.n	80127ec <tcp_rexmit_rto_prepare+0x1c>
 80127de:	4b31      	ldr	r3, [pc, #196]	@ (80128a4 <tcp_rexmit_rto_prepare+0xd4>)
 80127e0:	f240 6263 	movw	r2, #1635	@ 0x663
 80127e4:	4930      	ldr	r1, [pc, #192]	@ (80128a8 <tcp_rexmit_rto_prepare+0xd8>)
 80127e6:	4831      	ldr	r0, [pc, #196]	@ (80128ac <tcp_rexmit_rto_prepare+0xdc>)
 80127e8:	f004 fa94 	bl	8016d14 <iprintf>

  if (pcb->unacked == NULL) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d102      	bne.n	80127fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80127f4:	f06f 0305 	mvn.w	r3, #5
 80127f8:	e050      	b.n	801289c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127fe:	60fb      	str	r3, [r7, #12]
 8012800:	e00b      	b.n	801281a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f7ff fee4 	bl	80125d0 <tcp_output_segment_busy>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d002      	beq.n	8012814 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801280e:	f06f 0305 	mvn.w	r3, #5
 8012812:	e043      	b.n	801289c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	60fb      	str	r3, [r7, #12]
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d1ef      	bne.n	8012802 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012822:	68f8      	ldr	r0, [r7, #12]
 8012824:	f7ff fed4 	bl	80125d0 <tcp_output_segment_busy>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d002      	beq.n	8012834 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801282e:	f06f 0305 	mvn.w	r3, #5
 8012832:	e033      	b.n	801289c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	8b5b      	ldrh	r3, [r3, #26]
 801284e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012852:	b29a      	uxth	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	4618      	mov	r0, r3
 8012860:	f7f8 fd79 	bl	800b356 <lwip_htonl>
 8012864:	4604      	mov	r4, r0
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	891b      	ldrh	r3, [r3, #8]
 801286a:	461d      	mov	r5, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	899b      	ldrh	r3, [r3, #12]
 8012872:	b29b      	uxth	r3, r3
 8012874:	4618      	mov	r0, r3
 8012876:	f7f8 fd59 	bl	800b32c <lwip_htons>
 801287a:	4603      	mov	r3, r0
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f003 0303 	and.w	r3, r3, #3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d001      	beq.n	801288a <tcp_rexmit_rto_prepare+0xba>
 8012886:	2301      	movs	r3, #1
 8012888:	e000      	b.n	801288c <tcp_rexmit_rto_prepare+0xbc>
 801288a:	2300      	movs	r3, #0
 801288c:	442b      	add	r3, r5
 801288e:	18e2      	adds	r2, r4, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2200      	movs	r2, #0
 8012898:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801289a:	2300      	movs	r3, #0
}
 801289c:	4618      	mov	r0, r3
 801289e:	3710      	adds	r7, #16
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bdb0      	pop	{r4, r5, r7, pc}
 80128a4:	0801a7d4 	.word	0x0801a7d4
 80128a8:	0801ae10 	.word	0x0801ae10
 80128ac:	0801a828 	.word	0x0801a828

080128b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d106      	bne.n	80128cc <tcp_rexmit_rto_commit+0x1c>
 80128be:	4b0d      	ldr	r3, [pc, #52]	@ (80128f4 <tcp_rexmit_rto_commit+0x44>)
 80128c0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80128c4:	490c      	ldr	r1, [pc, #48]	@ (80128f8 <tcp_rexmit_rto_commit+0x48>)
 80128c6:	480d      	ldr	r0, [pc, #52]	@ (80128fc <tcp_rexmit_rto_commit+0x4c>)
 80128c8:	f004 fa24 	bl	8016d14 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128d2:	2bff      	cmp	r3, #255	@ 0xff
 80128d4:	d007      	beq.n	80128e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128dc:	3301      	adds	r3, #1
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff fc7e 	bl	80121e8 <tcp_output>
}
 80128ec:	bf00      	nop
 80128ee:	3708      	adds	r7, #8
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	0801a7d4 	.word	0x0801a7d4
 80128f8:	0801ae34 	.word	0x0801ae34
 80128fc:	0801a828 	.word	0x0801a828

08012900 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d106      	bne.n	801291c <tcp_rexmit_rto+0x1c>
 801290e:	4b0a      	ldr	r3, [pc, #40]	@ (8012938 <tcp_rexmit_rto+0x38>)
 8012910:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012914:	4909      	ldr	r1, [pc, #36]	@ (801293c <tcp_rexmit_rto+0x3c>)
 8012916:	480a      	ldr	r0, [pc, #40]	@ (8012940 <tcp_rexmit_rto+0x40>)
 8012918:	f004 f9fc 	bl	8016d14 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7ff ff57 	bl	80127d0 <tcp_rexmit_rto_prepare>
 8012922:	4603      	mov	r3, r0
 8012924:	2b00      	cmp	r3, #0
 8012926:	d102      	bne.n	801292e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7ff ffc1 	bl	80128b0 <tcp_rexmit_rto_commit>
  }
}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	0801a7d4 	.word	0x0801a7d4
 801293c:	0801ae58 	.word	0x0801ae58
 8012940:	0801a828 	.word	0x0801a828

08012944 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012944:	b590      	push	{r4, r7, lr}
 8012946:	b085      	sub	sp, #20
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d106      	bne.n	8012960 <tcp_rexmit+0x1c>
 8012952:	4b2f      	ldr	r3, [pc, #188]	@ (8012a10 <tcp_rexmit+0xcc>)
 8012954:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012958:	492e      	ldr	r1, [pc, #184]	@ (8012a14 <tcp_rexmit+0xd0>)
 801295a:	482f      	ldr	r0, [pc, #188]	@ (8012a18 <tcp_rexmit+0xd4>)
 801295c:	f004 f9da 	bl	8016d14 <iprintf>

  if (pcb->unacked == NULL) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012964:	2b00      	cmp	r3, #0
 8012966:	d102      	bne.n	801296e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012968:	f06f 0305 	mvn.w	r3, #5
 801296c:	e04c      	b.n	8012a08 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012972:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012974:	68b8      	ldr	r0, [r7, #8]
 8012976:	f7ff fe2b 	bl	80125d0 <tcp_output_segment_busy>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d002      	beq.n	8012986 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012980:	f06f 0305 	mvn.w	r3, #5
 8012984:	e040      	b.n	8012a08 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	336c      	adds	r3, #108	@ 0x6c
 8012992:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012994:	e002      	b.n	801299c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d011      	beq.n	80129c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f8 fcd2 	bl	800b356 <lwip_htonl>
 80129b2:	4604      	mov	r4, r0
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7f8 fccb 	bl	800b356 <lwip_htonl>
 80129c0:	4603      	mov	r3, r0
 80129c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	dbe6      	blt.n	8012996 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	68ba      	ldr	r2, [r7, #8]
 80129d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d103      	bne.n	80129e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2200      	movs	r2, #0
 80129e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129ec:	2bff      	cmp	r3, #255	@ 0xff
 80129ee:	d007      	beq.n	8012a00 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129f6:	3301      	adds	r3, #1
 80129f8:	b2da      	uxtb	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3714      	adds	r7, #20
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd90      	pop	{r4, r7, pc}
 8012a10:	0801a7d4 	.word	0x0801a7d4
 8012a14:	0801ae74 	.word	0x0801ae74
 8012a18:	0801a828 	.word	0x0801a828

08012a1c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_rexmit_fast+0x1c>
 8012a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8012ad4 <tcp_rexmit_fast+0xb8>)
 8012a2c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012a30:	4929      	ldr	r1, [pc, #164]	@ (8012ad8 <tcp_rexmit_fast+0xbc>)
 8012a32:	482a      	ldr	r0, [pc, #168]	@ (8012adc <tcp_rexmit_fast+0xc0>)
 8012a34:	f004 f96e 	bl	8016d14 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d044      	beq.n	8012aca <tcp_rexmit_fast+0xae>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	8b5b      	ldrh	r3, [r3, #26]
 8012a44:	f003 0304 	and.w	r3, r3, #4
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d13e      	bne.n	8012aca <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7ff ff79 	bl	8012944 <tcp_rexmit>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d138      	bne.n	8012aca <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a64:	4293      	cmp	r3, r2
 8012a66:	bf28      	it	cs
 8012a68:	4613      	movcs	r3, r2
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	0fda      	lsrs	r2, r3, #31
 8012a6e:	4413      	add	r3, r2
 8012a70:	105b      	asrs	r3, r3, #1
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012a80:	461a      	mov	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d206      	bcs.n	8012a9a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a90:	005b      	lsls	r3, r3, #1
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	0049      	lsls	r1, r1, #1
 8012aa8:	440b      	add	r3, r1
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	4413      	add	r3, r2
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	8b5b      	ldrh	r3, [r3, #26]
 8012aba:	f043 0304 	orr.w	r3, r3, #4
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012aca:	bf00      	nop
 8012acc:	3708      	adds	r7, #8
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	0801a7d4 	.word	0x0801a7d4
 8012ad8:	0801ae8c 	.word	0x0801ae8c
 8012adc:	0801a828 	.word	0x0801a828

08012ae0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	60f8      	str	r0, [r7, #12]
 8012ae8:	607b      	str	r3, [r7, #4]
 8012aea:	460b      	mov	r3, r1
 8012aec:	817b      	strh	r3, [r7, #10]
 8012aee:	4613      	mov	r3, r2
 8012af0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012af2:	897a      	ldrh	r2, [r7, #10]
 8012af4:	893b      	ldrh	r3, [r7, #8]
 8012af6:	4413      	add	r3, r2
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	3314      	adds	r3, #20
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012b02:	4619      	mov	r1, r3
 8012b04:	2022      	movs	r0, #34	@ 0x22
 8012b06:	f7f9 fd1f 	bl	800c548 <pbuf_alloc>
 8012b0a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d04d      	beq.n	8012bae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012b12:	897b      	ldrh	r3, [r7, #10]
 8012b14:	3313      	adds	r3, #19
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	8952      	ldrh	r2, [r2, #10]
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	db06      	blt.n	8012b2c <tcp_output_alloc_header_common+0x4c>
 8012b1e:	4b26      	ldr	r3, [pc, #152]	@ (8012bb8 <tcp_output_alloc_header_common+0xd8>)
 8012b20:	f240 7223 	movw	r2, #1827	@ 0x723
 8012b24:	4925      	ldr	r1, [pc, #148]	@ (8012bbc <tcp_output_alloc_header_common+0xdc>)
 8012b26:	4826      	ldr	r0, [pc, #152]	@ (8012bc0 <tcp_output_alloc_header_common+0xe0>)
 8012b28:	f004 f8f4 	bl	8016d14 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012b32:	8c3b      	ldrh	r3, [r7, #32]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7f8 fbf9 	bl	800b32c <lwip_htons>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f8 fbf1 	bl	800b32c <lwip_htons>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	f7f8 fbfc 	bl	800b356 <lwip_htonl>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012b64:	897b      	ldrh	r3, [r7, #10]
 8012b66:	089b      	lsrs	r3, r3, #2
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	3305      	adds	r3, #5
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	031b      	lsls	r3, r3, #12
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f8 fbd5 	bl	800b32c <lwip_htons>
 8012b82:	4603      	mov	r3, r0
 8012b84:	461a      	mov	r2, r3
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012b8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f8 fbcd 	bl	800b32c <lwip_htons>
 8012b92:	4603      	mov	r3, r0
 8012b94:	461a      	mov	r2, r3
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	741a      	strb	r2, [r3, #16]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	749a      	strb	r2, [r3, #18]
 8012baa:	2200      	movs	r2, #0
 8012bac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012bae:	697b      	ldr	r3, [r7, #20]
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	0801a7d4 	.word	0x0801a7d4
 8012bbc:	0801aeac 	.word	0x0801aeac
 8012bc0:	0801a828 	.word	0x0801a828

08012bc4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012bc4:	b5b0      	push	{r4, r5, r7, lr}
 8012bc6:	b08a      	sub	sp, #40	@ 0x28
 8012bc8:	af04      	add	r7, sp, #16
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	607b      	str	r3, [r7, #4]
 8012bce:	460b      	mov	r3, r1
 8012bd0:	817b      	strh	r3, [r7, #10]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <tcp_output_alloc_header+0x26>
 8012bdc:	4b15      	ldr	r3, [pc, #84]	@ (8012c34 <tcp_output_alloc_header+0x70>)
 8012bde:	f240 7242 	movw	r2, #1858	@ 0x742
 8012be2:	4915      	ldr	r1, [pc, #84]	@ (8012c38 <tcp_output_alloc_header+0x74>)
 8012be4:	4815      	ldr	r0, [pc, #84]	@ (8012c3c <tcp_output_alloc_header+0x78>)
 8012be6:	f004 f895 	bl	8016d14 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	8adb      	ldrh	r3, [r3, #22]
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	8b12      	ldrh	r2, [r2, #24]
 8012bf6:	68f9      	ldr	r1, [r7, #12]
 8012bf8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012bfa:	893d      	ldrh	r5, [r7, #8]
 8012bfc:	897c      	ldrh	r4, [r7, #10]
 8012bfe:	9103      	str	r1, [sp, #12]
 8012c00:	2110      	movs	r1, #16
 8012c02:	9102      	str	r1, [sp, #8]
 8012c04:	9201      	str	r2, [sp, #4]
 8012c06:	9300      	str	r3, [sp, #0]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	462a      	mov	r2, r5
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	f7ff ff67 	bl	8012ae0 <tcp_output_alloc_header_common>
 8012c12:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d006      	beq.n	8012c28 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012c22:	441a      	add	r2, r3
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012c28:	697b      	ldr	r3, [r7, #20]
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3718      	adds	r7, #24
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bdb0      	pop	{r4, r5, r7, pc}
 8012c32:	bf00      	nop
 8012c34:	0801a7d4 	.word	0x0801a7d4
 8012c38:	0801aedc 	.word	0x0801aedc
 8012c3c:	0801a828 	.word	0x0801a828

08012c40 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b088      	sub	sp, #32
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	4611      	mov	r1, r2
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	460b      	mov	r3, r1
 8012c50:	71fb      	strb	r3, [r7, #7]
 8012c52:	4613      	mov	r3, r2
 8012c54:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012c56:	2300      	movs	r3, #0
 8012c58:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d106      	bne.n	8012c6e <tcp_output_fill_options+0x2e>
 8012c60:	4b12      	ldr	r3, [pc, #72]	@ (8012cac <tcp_output_fill_options+0x6c>)
 8012c62:	f240 7256 	movw	r2, #1878	@ 0x756
 8012c66:	4912      	ldr	r1, [pc, #72]	@ (8012cb0 <tcp_output_fill_options+0x70>)
 8012c68:	4812      	ldr	r0, [pc, #72]	@ (8012cb4 <tcp_output_fill_options+0x74>)
 8012c6a:	f004 f853 	bl	8016d14 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012c74:	69bb      	ldr	r3, [r7, #24]
 8012c76:	3314      	adds	r3, #20
 8012c78:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012c7a:	8bfb      	ldrh	r3, [r7, #30]
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	461a      	mov	r2, r3
 8012c80:	79fb      	ldrb	r3, [r7, #7]
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	f003 0304 	and.w	r3, r3, #4
 8012c88:	4413      	add	r3, r2
 8012c8a:	3314      	adds	r3, #20
 8012c8c:	69ba      	ldr	r2, [r7, #24]
 8012c8e:	4413      	add	r3, r2
 8012c90:	697a      	ldr	r2, [r7, #20]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d006      	beq.n	8012ca4 <tcp_output_fill_options+0x64>
 8012c96:	4b05      	ldr	r3, [pc, #20]	@ (8012cac <tcp_output_fill_options+0x6c>)
 8012c98:	f240 7275 	movw	r2, #1909	@ 0x775
 8012c9c:	4906      	ldr	r1, [pc, #24]	@ (8012cb8 <tcp_output_fill_options+0x78>)
 8012c9e:	4805      	ldr	r0, [pc, #20]	@ (8012cb4 <tcp_output_fill_options+0x74>)
 8012ca0:	f004 f838 	bl	8016d14 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012ca4:	bf00      	nop
 8012ca6:	3720      	adds	r7, #32
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	0801a7d4 	.word	0x0801a7d4
 8012cb0:	0801af04 	.word	0x0801af04
 8012cb4:	0801a828 	.word	0x0801a828
 8012cb8:	0801adfc 	.word	0x0801adfc

08012cbc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b08a      	sub	sp, #40	@ 0x28
 8012cc0:	af04      	add	r7, sp, #16
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d106      	bne.n	8012cde <tcp_output_control_segment+0x22>
 8012cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8012d44 <tcp_output_control_segment+0x88>)
 8012cd2:	f240 7287 	movw	r2, #1927	@ 0x787
 8012cd6:	491c      	ldr	r1, [pc, #112]	@ (8012d48 <tcp_output_control_segment+0x8c>)
 8012cd8:	481c      	ldr	r0, [pc, #112]	@ (8012d4c <tcp_output_control_segment+0x90>)
 8012cda:	f004 f81b 	bl	8016d14 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	6879      	ldr	r1, [r7, #4]
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f7fe faea 	bl	80112bc <tcp_route>
 8012ce8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d102      	bne.n	8012cf6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012cf0:	23fc      	movs	r3, #252	@ 0xfc
 8012cf2:	75fb      	strb	r3, [r7, #23]
 8012cf4:	e01c      	b.n	8012d30 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d006      	beq.n	8012d0a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	7adb      	ldrb	r3, [r3, #11]
 8012d00:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	7a9b      	ldrb	r3, [r3, #10]
 8012d06:	757b      	strb	r3, [r7, #21]
 8012d08:	e003      	b.n	8012d12 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012d0a:	23ff      	movs	r3, #255	@ 0xff
 8012d0c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012d12:	7dba      	ldrb	r2, [r7, #22]
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	9302      	str	r3, [sp, #8]
 8012d18:	2306      	movs	r3, #6
 8012d1a:	9301      	str	r3, [sp, #4]
 8012d1c:	7d7b      	ldrb	r3, [r7, #21]
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	4613      	mov	r3, r2
 8012d22:	683a      	ldr	r2, [r7, #0]
 8012d24:	6879      	ldr	r1, [r7, #4]
 8012d26:	68b8      	ldr	r0, [r7, #8]
 8012d28:	f002 fb66 	bl	80153f8 <ip4_output_if>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012d30:	68b8      	ldr	r0, [r7, #8]
 8012d32:	f7f9 feed 	bl	800cb10 <pbuf_free>
  return err;
 8012d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3718      	adds	r7, #24
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	0801a7d4 	.word	0x0801a7d4
 8012d48:	0801af2c 	.word	0x0801af2c
 8012d4c:	0801a828 	.word	0x0801a828

08012d50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012d50:	b590      	push	{r4, r7, lr}
 8012d52:	b08b      	sub	sp, #44	@ 0x2c
 8012d54:	af04      	add	r7, sp, #16
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
 8012d5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d106      	bne.n	8012d72 <tcp_rst+0x22>
 8012d64:	4b1f      	ldr	r3, [pc, #124]	@ (8012de4 <tcp_rst+0x94>)
 8012d66:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012d6a:	491f      	ldr	r1, [pc, #124]	@ (8012de8 <tcp_rst+0x98>)
 8012d6c:	481f      	ldr	r0, [pc, #124]	@ (8012dec <tcp_rst+0x9c>)
 8012d6e:	f003 ffd1 	bl	8016d14 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d106      	bne.n	8012d86 <tcp_rst+0x36>
 8012d78:	4b1a      	ldr	r3, [pc, #104]	@ (8012de4 <tcp_rst+0x94>)
 8012d7a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012d7e:	491c      	ldr	r1, [pc, #112]	@ (8012df0 <tcp_rst+0xa0>)
 8012d80:	481a      	ldr	r0, [pc, #104]	@ (8012dec <tcp_rst+0x9c>)
 8012d82:	f003 ffc7 	bl	8016d14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d86:	2300      	movs	r3, #0
 8012d88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012d8a:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012d8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012d90:	7dfb      	ldrb	r3, [r7, #23]
 8012d92:	b29c      	uxth	r4, r3
 8012d94:	68b8      	ldr	r0, [r7, #8]
 8012d96:	f7f8 fade 	bl	800b356 <lwip_htonl>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	8abb      	ldrh	r3, [r7, #20]
 8012d9e:	9303      	str	r3, [sp, #12]
 8012da0:	2314      	movs	r3, #20
 8012da2:	9302      	str	r3, [sp, #8]
 8012da4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	4613      	mov	r3, r2
 8012dae:	2200      	movs	r2, #0
 8012db0:	4621      	mov	r1, r4
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7ff fe94 	bl	8012ae0 <tcp_output_alloc_header_common>
 8012db8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00c      	beq.n	8012dda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012dc0:	7dfb      	ldrb	r3, [r7, #23]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	6939      	ldr	r1, [r7, #16]
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f7ff ff3a 	bl	8012c40 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dce:	683a      	ldr	r2, [r7, #0]
 8012dd0:	6939      	ldr	r1, [r7, #16]
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	f7ff ff72 	bl	8012cbc <tcp_output_control_segment>
 8012dd8:	e000      	b.n	8012ddc <tcp_rst+0x8c>
    return;
 8012dda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012ddc:	371c      	adds	r7, #28
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd90      	pop	{r4, r7, pc}
 8012de2:	bf00      	nop
 8012de4:	0801a7d4 	.word	0x0801a7d4
 8012de8:	0801af58 	.word	0x0801af58
 8012dec:	0801a828 	.word	0x0801a828
 8012df0:	0801af74 	.word	0x0801af74

08012df4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012df4:	b590      	push	{r4, r7, lr}
 8012df6:	b087      	sub	sp, #28
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012e00:	2300      	movs	r3, #0
 8012e02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <tcp_send_empty_ack+0x24>
 8012e0a:	4b28      	ldr	r3, [pc, #160]	@ (8012eac <tcp_send_empty_ack+0xb8>)
 8012e0c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012e10:	4927      	ldr	r1, [pc, #156]	@ (8012eb0 <tcp_send_empty_ack+0xbc>)
 8012e12:	4828      	ldr	r0, [pc, #160]	@ (8012eb4 <tcp_send_empty_ack+0xc0>)
 8012e14:	f003 ff7e 	bl	8016d14 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012e18:	7dfb      	ldrb	r3, [r7, #23]
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	f003 0304 	and.w	r3, r3, #4
 8012e22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012e24:	7d7b      	ldrb	r3, [r7, #21]
 8012e26:	b29c      	uxth	r4, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f8 fa92 	bl	800b356 <lwip_htonl>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2200      	movs	r2, #0
 8012e36:	4621      	mov	r1, r4
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff fec3 	bl	8012bc4 <tcp_output_alloc_header>
 8012e3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d109      	bne.n	8012e5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	8b5b      	ldrh	r3, [r3, #26]
 8012e4a:	f043 0303 	orr.w	r3, r3, #3
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012e54:	f06f 0301 	mvn.w	r3, #1
 8012e58:	e023      	b.n	8012ea2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012e5a:	7dbb      	ldrb	r3, [r7, #22]
 8012e5c:	7dfa      	ldrb	r2, [r7, #23]
 8012e5e:	6939      	ldr	r1, [r7, #16]
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f7ff feed 	bl	8012c40 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	6939      	ldr	r1, [r7, #16]
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7ff ff24 	bl	8012cbc <tcp_output_control_segment>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d007      	beq.n	8012e90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	8b5b      	ldrh	r3, [r3, #26]
 8012e84:	f043 0303 	orr.w	r3, r3, #3
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	835a      	strh	r2, [r3, #26]
 8012e8e:	e006      	b.n	8012e9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	8b5b      	ldrh	r3, [r3, #26]
 8012e94:	f023 0303 	bic.w	r3, r3, #3
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	371c      	adds	r7, #28
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd90      	pop	{r4, r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	0801a7d4 	.word	0x0801a7d4
 8012eb0:	0801af90 	.word	0x0801af90
 8012eb4:	0801a828 	.word	0x0801a828

08012eb8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012eb8:	b590      	push	{r4, r7, lr}
 8012eba:	b087      	sub	sp, #28
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d106      	bne.n	8012ed8 <tcp_keepalive+0x20>
 8012eca:	4b18      	ldr	r3, [pc, #96]	@ (8012f2c <tcp_keepalive+0x74>)
 8012ecc:	f640 0224 	movw	r2, #2084	@ 0x824
 8012ed0:	4917      	ldr	r1, [pc, #92]	@ (8012f30 <tcp_keepalive+0x78>)
 8012ed2:	4818      	ldr	r0, [pc, #96]	@ (8012f34 <tcp_keepalive+0x7c>)
 8012ed4:	f003 ff1e 	bl	8016d14 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012ed8:	7dfb      	ldrb	r3, [r7, #23]
 8012eda:	b29c      	uxth	r4, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7f8 fa37 	bl	800b356 <lwip_htonl>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2200      	movs	r2, #0
 8012eec:	4621      	mov	r1, r4
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f7ff fe68 	bl	8012bc4 <tcp_output_alloc_header>
 8012ef4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d102      	bne.n	8012f02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012f00:	e010      	b.n	8012f24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f02:	7dfb      	ldrb	r3, [r7, #23]
 8012f04:	2200      	movs	r2, #0
 8012f06:	6939      	ldr	r1, [r7, #16]
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff fe99 	bl	8012c40 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	3304      	adds	r3, #4
 8012f14:	6939      	ldr	r1, [r7, #16]
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7ff fed0 	bl	8012cbc <tcp_output_control_segment>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	371c      	adds	r7, #28
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd90      	pop	{r4, r7, pc}
 8012f2c:	0801a7d4 	.word	0x0801a7d4
 8012f30:	0801afb0 	.word	0x0801afb0
 8012f34:	0801a828 	.word	0x0801a828

08012f38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012f38:	b590      	push	{r4, r7, lr}
 8012f3a:	b08b      	sub	sp, #44	@ 0x2c
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f40:	2300      	movs	r3, #0
 8012f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d106      	bne.n	8012f5a <tcp_zero_window_probe+0x22>
 8012f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8013080 <tcp_zero_window_probe+0x148>)
 8012f4e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012f52:	494c      	ldr	r1, [pc, #304]	@ (8013084 <tcp_zero_window_probe+0x14c>)
 8012f54:	484c      	ldr	r0, [pc, #304]	@ (8013088 <tcp_zero_window_probe+0x150>)
 8012f56:	f003 fedd 	bl	8016d14 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012f60:	6a3b      	ldr	r3, [r7, #32]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e086      	b.n	8013078 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012f70:	2bff      	cmp	r3, #255	@ 0xff
 8012f72:	d007      	beq.n	8012f84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f84:	6a3b      	ldr	r3, [r7, #32]
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	899b      	ldrh	r3, [r3, #12]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7f8 f9cd 	bl	800b32c <lwip_htons>
 8012f92:	4603      	mov	r3, r0
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	f003 0301 	and.w	r3, r3, #1
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d005      	beq.n	8012faa <tcp_zero_window_probe+0x72>
 8012f9e:	6a3b      	ldr	r3, [r7, #32]
 8012fa0:	891b      	ldrh	r3, [r3, #8]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d101      	bne.n	8012faa <tcp_zero_window_probe+0x72>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	e000      	b.n	8012fac <tcp_zero_window_probe+0x74>
 8012faa:	2300      	movs	r3, #0
 8012fac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012fae:	7ffb      	ldrb	r3, [r7, #31]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	bf0c      	ite	eq
 8012fb4:	2301      	moveq	r3, #1
 8012fb6:	2300      	movne	r3, #0
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fc0:	b299      	uxth	r1, r3
 8012fc2:	6a3b      	ldr	r3, [r7, #32]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	8bba      	ldrh	r2, [r7, #28]
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7ff fdfa 	bl	8012bc4 <tcp_output_alloc_header>
 8012fd0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d102      	bne.n	8012fde <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012fdc:	e04c      	b.n	8013078 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012fe4:	7ffb      	ldrb	r3, [r7, #31]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d011      	beq.n	801300e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	899b      	ldrh	r3, [r3, #12]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	b21b      	sxth	r3, r3
 8012ff2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012ff6:	b21c      	sxth	r4, r3
 8012ff8:	2011      	movs	r0, #17
 8012ffa:	f7f8 f997 	bl	800b32c <lwip_htons>
 8012ffe:	4603      	mov	r3, r0
 8013000:	b21b      	sxth	r3, r3
 8013002:	4323      	orrs	r3, r4
 8013004:	b21b      	sxth	r3, r3
 8013006:	b29a      	uxth	r2, r3
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	819a      	strh	r2, [r3, #12]
 801300c:	e010      	b.n	8013030 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	3314      	adds	r3, #20
 8013014:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013016:	6a3b      	ldr	r3, [r7, #32]
 8013018:	6858      	ldr	r0, [r3, #4]
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	891a      	ldrh	r2, [r3, #8]
 8013020:	6a3b      	ldr	r3, [r7, #32]
 8013022:	891b      	ldrh	r3, [r3, #8]
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	b29b      	uxth	r3, r3
 8013028:	2201      	movs	r2, #1
 801302a:	6939      	ldr	r1, [r7, #16]
 801302c:	f7f9 ff76 	bl	800cf1c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013030:	6a3b      	ldr	r3, [r7, #32]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	4618      	mov	r0, r3
 8013038:	f7f8 f98d 	bl	800b356 <lwip_htonl>
 801303c:	4603      	mov	r3, r0
 801303e:	3301      	adds	r3, #1
 8013040:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	1ad3      	subs	r3, r2, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	da02      	bge.n	8013054 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013058:	2200      	movs	r2, #0
 801305a:	69b9      	ldr	r1, [r7, #24]
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7ff fdef 	bl	8012c40 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	3304      	adds	r3, #4
 8013068:	69b9      	ldr	r1, [r7, #24]
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7ff fe26 	bl	8012cbc <tcp_output_control_segment>
 8013070:	4603      	mov	r3, r0
 8013072:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013074:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013078:	4618      	mov	r0, r3
 801307a:	372c      	adds	r7, #44	@ 0x2c
 801307c:	46bd      	mov	sp, r7
 801307e:	bd90      	pop	{r4, r7, pc}
 8013080:	0801a7d4 	.word	0x0801a7d4
 8013084:	0801afcc 	.word	0x0801afcc
 8013088:	0801a828 	.word	0x0801a828

0801308c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013094:	f7fa f830 	bl	800d0f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013098:	4b0a      	ldr	r3, [pc, #40]	@ (80130c4 <tcpip_tcp_timer+0x38>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d103      	bne.n	80130a8 <tcpip_tcp_timer+0x1c>
 80130a0:	4b09      	ldr	r3, [pc, #36]	@ (80130c8 <tcpip_tcp_timer+0x3c>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d005      	beq.n	80130b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130a8:	2200      	movs	r2, #0
 80130aa:	4908      	ldr	r1, [pc, #32]	@ (80130cc <tcpip_tcp_timer+0x40>)
 80130ac:	20fa      	movs	r0, #250	@ 0xfa
 80130ae:	f000 f8f3 	bl	8013298 <sys_timeout>
 80130b2:	e003      	b.n	80130bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80130b4:	4b06      	ldr	r3, [pc, #24]	@ (80130d0 <tcpip_tcp_timer+0x44>)
 80130b6:	2200      	movs	r2, #0
 80130b8:	601a      	str	r2, [r3, #0]
  }
}
 80130ba:	bf00      	nop
 80130bc:	bf00      	nop
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	2000d8ac 	.word	0x2000d8ac
 80130c8:	2000d8b0 	.word	0x2000d8b0
 80130cc:	0801308d 	.word	0x0801308d
 80130d0:	2000d8f8 	.word	0x2000d8f8

080130d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80130d8:	4b0a      	ldr	r3, [pc, #40]	@ (8013104 <tcp_timer_needed+0x30>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d10f      	bne.n	8013100 <tcp_timer_needed+0x2c>
 80130e0:	4b09      	ldr	r3, [pc, #36]	@ (8013108 <tcp_timer_needed+0x34>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d103      	bne.n	80130f0 <tcp_timer_needed+0x1c>
 80130e8:	4b08      	ldr	r3, [pc, #32]	@ (801310c <tcp_timer_needed+0x38>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d007      	beq.n	8013100 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80130f0:	4b04      	ldr	r3, [pc, #16]	@ (8013104 <tcp_timer_needed+0x30>)
 80130f2:	2201      	movs	r2, #1
 80130f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130f6:	2200      	movs	r2, #0
 80130f8:	4905      	ldr	r1, [pc, #20]	@ (8013110 <tcp_timer_needed+0x3c>)
 80130fa:	20fa      	movs	r0, #250	@ 0xfa
 80130fc:	f000 f8cc 	bl	8013298 <sys_timeout>
  }
}
 8013100:	bf00      	nop
 8013102:	bd80      	pop	{r7, pc}
 8013104:	2000d8f8 	.word	0x2000d8f8
 8013108:	2000d8ac 	.word	0x2000d8ac
 801310c:	2000d8b0 	.word	0x2000d8b0
 8013110:	0801308d 	.word	0x0801308d

08013114 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b086      	sub	sp, #24
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013120:	200a      	movs	r0, #10
 8013122:	f7f8 fddb 	bl	800bcdc <memp_malloc>
 8013126:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d109      	bne.n	8013142 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d151      	bne.n	80131d8 <sys_timeout_abs+0xc4>
 8013134:	4b2a      	ldr	r3, [pc, #168]	@ (80131e0 <sys_timeout_abs+0xcc>)
 8013136:	22be      	movs	r2, #190	@ 0xbe
 8013138:	492a      	ldr	r1, [pc, #168]	@ (80131e4 <sys_timeout_abs+0xd0>)
 801313a:	482b      	ldr	r0, [pc, #172]	@ (80131e8 <sys_timeout_abs+0xd4>)
 801313c:	f003 fdea 	bl	8016d14 <iprintf>
    return;
 8013140:	e04a      	b.n	80131d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	2200      	movs	r2, #0
 8013146:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	68ba      	ldr	r2, [r7, #8]
 801314c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801315a:	4b24      	ldr	r3, [pc, #144]	@ (80131ec <sys_timeout_abs+0xd8>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d103      	bne.n	801316a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013162:	4a22      	ldr	r2, [pc, #136]	@ (80131ec <sys_timeout_abs+0xd8>)
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	6013      	str	r3, [r2, #0]
    return;
 8013168:	e037      	b.n	80131da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	4b1f      	ldr	r3, [pc, #124]	@ (80131ec <sys_timeout_abs+0xd8>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	1ad3      	subs	r3, r2, r3
 8013176:	0fdb      	lsrs	r3, r3, #31
 8013178:	f003 0301 	and.w	r3, r3, #1
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2b00      	cmp	r3, #0
 8013180:	d007      	beq.n	8013192 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013182:	4b1a      	ldr	r3, [pc, #104]	@ (80131ec <sys_timeout_abs+0xd8>)
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801318a:	4a18      	ldr	r2, [pc, #96]	@ (80131ec <sys_timeout_abs+0xd8>)
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	6013      	str	r3, [r2, #0]
 8013190:	e023      	b.n	80131da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013192:	4b16      	ldr	r3, [pc, #88]	@ (80131ec <sys_timeout_abs+0xd8>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	617b      	str	r3, [r7, #20]
 8013198:	e01a      	b.n	80131d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00b      	beq.n	80131ba <sys_timeout_abs+0xa6>
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	685a      	ldr	r2, [r3, #4]
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	1ad3      	subs	r3, r2, r3
 80131ae:	0fdb      	lsrs	r3, r3, #31
 80131b0:	f003 0301 	and.w	r3, r3, #1
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d007      	beq.n	80131ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	693a      	ldr	r2, [r7, #16]
 80131c6:	601a      	str	r2, [r3, #0]
        break;
 80131c8:	e007      	b.n	80131da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	617b      	str	r3, [r7, #20]
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d1e1      	bne.n	801319a <sys_timeout_abs+0x86>
 80131d6:	e000      	b.n	80131da <sys_timeout_abs+0xc6>
    return;
 80131d8:	bf00      	nop
      }
    }
  }
}
 80131da:	3718      	adds	r7, #24
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	0801aff0 	.word	0x0801aff0
 80131e4:	0801b024 	.word	0x0801b024
 80131e8:	0801b064 	.word	0x0801b064
 80131ec:	2000d8f0 	.word	0x2000d8f0

080131f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	4798      	blx	r3

  now = sys_now();
 8013202:	f7f2 f93f 	bl	8005484 <sys_now>
 8013206:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	4b0f      	ldr	r3, [pc, #60]	@ (801324c <lwip_cyclic_timer+0x5c>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4413      	add	r3, r2
 8013212:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	1ad3      	subs	r3, r2, r3
 801321a:	0fdb      	lsrs	r3, r3, #31
 801321c:	f003 0301 	and.w	r3, r3, #1
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2b00      	cmp	r3, #0
 8013224:	d009      	beq.n	801323a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	4413      	add	r3, r2
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	4907      	ldr	r1, [pc, #28]	@ (8013250 <lwip_cyclic_timer+0x60>)
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff ff6e 	bl	8013114 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013238:	e004      	b.n	8013244 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	4904      	ldr	r1, [pc, #16]	@ (8013250 <lwip_cyclic_timer+0x60>)
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f7ff ff68 	bl	8013114 <sys_timeout_abs>
}
 8013244:	bf00      	nop
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	2000d8f4 	.word	0x2000d8f4
 8013250:	080131f1 	.word	0x080131f1

08013254 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801325a:	2301      	movs	r3, #1
 801325c:	607b      	str	r3, [r7, #4]
 801325e:	e00e      	b.n	801327e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013260:	4a0b      	ldr	r2, [pc, #44]	@ (8013290 <sys_timeouts_init+0x3c>)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	4a08      	ldr	r2, [pc, #32]	@ (8013290 <sys_timeouts_init+0x3c>)
 801326e:	4413      	add	r3, r2
 8013270:	461a      	mov	r2, r3
 8013272:	4908      	ldr	r1, [pc, #32]	@ (8013294 <sys_timeouts_init+0x40>)
 8013274:	f000 f810 	bl	8013298 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	3301      	adds	r3, #1
 801327c:	607b      	str	r3, [r7, #4]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d9ed      	bls.n	8013260 <sys_timeouts_init+0xc>
  }
}
 8013284:	bf00      	nop
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	0801bcd4 	.word	0x0801bcd4
 8013294:	080131f1 	.word	0x080131f1

08013298 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b086      	sub	sp, #24
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80132aa:	d306      	bcc.n	80132ba <sys_timeout+0x22>
 80132ac:	4b0a      	ldr	r3, [pc, #40]	@ (80132d8 <sys_timeout+0x40>)
 80132ae:	f240 1229 	movw	r2, #297	@ 0x129
 80132b2:	490a      	ldr	r1, [pc, #40]	@ (80132dc <sys_timeout+0x44>)
 80132b4:	480a      	ldr	r0, [pc, #40]	@ (80132e0 <sys_timeout+0x48>)
 80132b6:	f003 fd2d 	bl	8016d14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80132ba:	f7f2 f8e3 	bl	8005484 <sys_now>
 80132be:	4602      	mov	r2, r0
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	4413      	add	r3, r2
 80132c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	68b9      	ldr	r1, [r7, #8]
 80132ca:	6978      	ldr	r0, [r7, #20]
 80132cc:	f7ff ff22 	bl	8013114 <sys_timeout_abs>
#endif
}
 80132d0:	bf00      	nop
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	0801aff0 	.word	0x0801aff0
 80132dc:	0801b08c 	.word	0x0801b08c
 80132e0:	0801b064 	.word	0x0801b064

080132e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80132ea:	f7f2 f8cb 	bl	8005484 <sys_now>
 80132ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80132f0:	4b17      	ldr	r3, [pc, #92]	@ (8013350 <sys_check_timeouts+0x6c>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d022      	beq.n	8013342 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	1ad3      	subs	r3, r2, r3
 8013304:	0fdb      	lsrs	r3, r3, #31
 8013306:	f003 0301 	and.w	r3, r3, #1
 801330a:	b2db      	uxtb	r3, r3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d11a      	bne.n	8013346 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4a0e      	ldr	r2, [pc, #56]	@ (8013350 <sys_check_timeouts+0x6c>)
 8013316:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	689b      	ldr	r3, [r3, #8]
 801331c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	4a0a      	ldr	r2, [pc, #40]	@ (8013354 <sys_check_timeouts+0x70>)
 801332a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801332c:	68b9      	ldr	r1, [r7, #8]
 801332e:	200a      	movs	r0, #10
 8013330:	f7f8 fd4a 	bl	800bdc8 <memp_free>
    if (handler != NULL) {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d0da      	beq.n	80132f0 <sys_check_timeouts+0xc>
      handler(arg);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6838      	ldr	r0, [r7, #0]
 801333e:	4798      	blx	r3
  do {
 8013340:	e7d6      	b.n	80132f0 <sys_check_timeouts+0xc>
      return;
 8013342:	bf00      	nop
 8013344:	e000      	b.n	8013348 <sys_check_timeouts+0x64>
      return;
 8013346:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	2000d8f0 	.word	0x2000d8f0
 8013354:	2000d8f4 	.word	0x2000d8f4

08013358 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801335e:	4b16      	ldr	r3, [pc, #88]	@ (80133b8 <sys_timeouts_sleeptime+0x60>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d102      	bne.n	801336c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013366:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801336a:	e020      	b.n	80133ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801336c:	f7f2 f88a 	bl	8005484 <sys_now>
 8013370:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013372:	4b11      	ldr	r3, [pc, #68]	@ (80133b8 <sys_timeouts_sleeptime+0x60>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	685a      	ldr	r2, [r3, #4]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	0fdb      	lsrs	r3, r3, #31
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	b2db      	uxtb	r3, r3
 8013384:	2b00      	cmp	r3, #0
 8013386:	d001      	beq.n	801338c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013388:	2300      	movs	r3, #0
 801338a:	e010      	b.n	80133ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801338c:	4b0a      	ldr	r3, [pc, #40]	@ (80133b8 <sys_timeouts_sleeptime+0x60>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	685a      	ldr	r2, [r3, #4]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	1ad3      	subs	r3, r2, r3
 8013396:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	da06      	bge.n	80133ac <sys_timeouts_sleeptime+0x54>
 801339e:	4b07      	ldr	r3, [pc, #28]	@ (80133bc <sys_timeouts_sleeptime+0x64>)
 80133a0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80133a4:	4906      	ldr	r1, [pc, #24]	@ (80133c0 <sys_timeouts_sleeptime+0x68>)
 80133a6:	4807      	ldr	r0, [pc, #28]	@ (80133c4 <sys_timeouts_sleeptime+0x6c>)
 80133a8:	f003 fcb4 	bl	8016d14 <iprintf>
    return ret;
 80133ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3708      	adds	r7, #8
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	2000d8f0 	.word	0x2000d8f0
 80133bc:	0801aff0 	.word	0x0801aff0
 80133c0:	0801b0c4 	.word	0x0801b0c4
 80133c4:	0801b064 	.word	0x0801b064

080133c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80133cc:	f003 fba2 	bl	8016b14 <rand>
 80133d0:	4603      	mov	r3, r0
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80133d8:	b29b      	uxth	r3, r3
 80133da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80133de:	b29a      	uxth	r2, r3
 80133e0:	4b01      	ldr	r3, [pc, #4]	@ (80133e8 <udp_init+0x20>)
 80133e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80133e4:	bf00      	nop
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	2000002c 	.word	0x2000002c

080133ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80133f2:	2300      	movs	r3, #0
 80133f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80133f6:	4b17      	ldr	r3, [pc, #92]	@ (8013454 <udp_new_port+0x68>)
 80133f8:	881b      	ldrh	r3, [r3, #0]
 80133fa:	1c5a      	adds	r2, r3, #1
 80133fc:	b291      	uxth	r1, r2
 80133fe:	4a15      	ldr	r2, [pc, #84]	@ (8013454 <udp_new_port+0x68>)
 8013400:	8011      	strh	r1, [r2, #0]
 8013402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013406:	4293      	cmp	r3, r2
 8013408:	d103      	bne.n	8013412 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801340a:	4b12      	ldr	r3, [pc, #72]	@ (8013454 <udp_new_port+0x68>)
 801340c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013410:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013412:	4b11      	ldr	r3, [pc, #68]	@ (8013458 <udp_new_port+0x6c>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	603b      	str	r3, [r7, #0]
 8013418:	e011      	b.n	801343e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	8a5a      	ldrh	r2, [r3, #18]
 801341e:	4b0d      	ldr	r3, [pc, #52]	@ (8013454 <udp_new_port+0x68>)
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	429a      	cmp	r2, r3
 8013424:	d108      	bne.n	8013438 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013426:	88fb      	ldrh	r3, [r7, #6]
 8013428:	3301      	adds	r3, #1
 801342a:	80fb      	strh	r3, [r7, #6]
 801342c:	88fb      	ldrh	r3, [r7, #6]
 801342e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013432:	d3e0      	bcc.n	80133f6 <udp_new_port+0xa>
        return 0;
 8013434:	2300      	movs	r3, #0
 8013436:	e007      	b.n	8013448 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	603b      	str	r3, [r7, #0]
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1ea      	bne.n	801341a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013444:	4b03      	ldr	r3, [pc, #12]	@ (8013454 <udp_new_port+0x68>)
 8013446:	881b      	ldrh	r3, [r3, #0]
}
 8013448:	4618      	mov	r0, r3
 801344a:	370c      	adds	r7, #12
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr
 8013454:	2000002c 	.word	0x2000002c
 8013458:	2000d8fc 	.word	0x2000d8fc

0801345c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b084      	sub	sp, #16
 8013460:	af00      	add	r7, sp, #0
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	60b9      	str	r1, [r7, #8]
 8013466:	4613      	mov	r3, r2
 8013468:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d105      	bne.n	801347c <udp_input_local_match+0x20>
 8013470:	4b27      	ldr	r3, [pc, #156]	@ (8013510 <udp_input_local_match+0xb4>)
 8013472:	2287      	movs	r2, #135	@ 0x87
 8013474:	4927      	ldr	r1, [pc, #156]	@ (8013514 <udp_input_local_match+0xb8>)
 8013476:	4828      	ldr	r0, [pc, #160]	@ (8013518 <udp_input_local_match+0xbc>)
 8013478:	f003 fc4c 	bl	8016d14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d105      	bne.n	801348e <udp_input_local_match+0x32>
 8013482:	4b23      	ldr	r3, [pc, #140]	@ (8013510 <udp_input_local_match+0xb4>)
 8013484:	2288      	movs	r2, #136	@ 0x88
 8013486:	4925      	ldr	r1, [pc, #148]	@ (801351c <udp_input_local_match+0xc0>)
 8013488:	4823      	ldr	r0, [pc, #140]	@ (8013518 <udp_input_local_match+0xbc>)
 801348a:	f003 fc43 	bl	8016d14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	7a1b      	ldrb	r3, [r3, #8]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d00b      	beq.n	80134ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	7a1a      	ldrb	r2, [r3, #8]
 801349a:	4b21      	ldr	r3, [pc, #132]	@ (8013520 <udp_input_local_match+0xc4>)
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134a2:	3301      	adds	r3, #1
 80134a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d001      	beq.n	80134ae <udp_input_local_match+0x52>
    return 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	e02b      	b.n	8013506 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d018      	beq.n	80134e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d013      	beq.n	80134e2 <udp_input_local_match+0x86>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d00f      	beq.n	80134e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80134c2:	4b17      	ldr	r3, [pc, #92]	@ (8013520 <udp_input_local_match+0xc4>)
 80134c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134ca:	d00a      	beq.n	80134e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	4b13      	ldr	r3, [pc, #76]	@ (8013520 <udp_input_local_match+0xc4>)
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	405a      	eors	r2, r3
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	3308      	adds	r3, #8
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d110      	bne.n	8013504 <udp_input_local_match+0xa8>
          return 1;
 80134e2:	2301      	movs	r3, #1
 80134e4:	e00f      	b.n	8013506 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d009      	beq.n	8013500 <udp_input_local_match+0xa4>
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d005      	beq.n	8013500 <udp_input_local_match+0xa4>
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	4b09      	ldr	r3, [pc, #36]	@ (8013520 <udp_input_local_match+0xc4>)
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d101      	bne.n	8013504 <udp_input_local_match+0xa8>
        return 1;
 8013500:	2301      	movs	r3, #1
 8013502:	e000      	b.n	8013506 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013504:	2300      	movs	r3, #0
}
 8013506:	4618      	mov	r0, r3
 8013508:	3710      	adds	r7, #16
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	0801b0d8 	.word	0x0801b0d8
 8013514:	0801b108 	.word	0x0801b108
 8013518:	0801b12c 	.word	0x0801b12c
 801351c:	0801b154 	.word	0x0801b154
 8013520:	2000a14c 	.word	0x2000a14c

08013524 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013524:	b590      	push	{r4, r7, lr}
 8013526:	b08d      	sub	sp, #52	@ 0x34
 8013528:	af02      	add	r7, sp, #8
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801352e:	2300      	movs	r3, #0
 8013530:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d105      	bne.n	8013544 <udp_input+0x20>
 8013538:	4b7c      	ldr	r3, [pc, #496]	@ (801372c <udp_input+0x208>)
 801353a:	22cf      	movs	r2, #207	@ 0xcf
 801353c:	497c      	ldr	r1, [pc, #496]	@ (8013730 <udp_input+0x20c>)
 801353e:	487d      	ldr	r0, [pc, #500]	@ (8013734 <udp_input+0x210>)
 8013540:	f003 fbe8 	bl	8016d14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d105      	bne.n	8013556 <udp_input+0x32>
 801354a:	4b78      	ldr	r3, [pc, #480]	@ (801372c <udp_input+0x208>)
 801354c:	22d0      	movs	r2, #208	@ 0xd0
 801354e:	497a      	ldr	r1, [pc, #488]	@ (8013738 <udp_input+0x214>)
 8013550:	4878      	ldr	r0, [pc, #480]	@ (8013734 <udp_input+0x210>)
 8013552:	f003 fbdf 	bl	8016d14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	895b      	ldrh	r3, [r3, #10]
 801355a:	2b07      	cmp	r3, #7
 801355c:	d803      	bhi.n	8013566 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f7f9 fad6 	bl	800cb10 <pbuf_free>
    goto end;
 8013564:	e0de      	b.n	8013724 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801356c:	4b73      	ldr	r3, [pc, #460]	@ (801373c <udp_input+0x218>)
 801356e:	695b      	ldr	r3, [r3, #20]
 8013570:	4a72      	ldr	r2, [pc, #456]	@ (801373c <udp_input+0x218>)
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	4611      	mov	r1, r2
 8013576:	4618      	mov	r0, r3
 8013578:	f002 f816 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 801357c:	4603      	mov	r3, r0
 801357e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	881b      	ldrh	r3, [r3, #0]
 8013584:	b29b      	uxth	r3, r3
 8013586:	4618      	mov	r0, r3
 8013588:	f7f7 fed0 	bl	800b32c <lwip_htons>
 801358c:	4603      	mov	r3, r0
 801358e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	885b      	ldrh	r3, [r3, #2]
 8013594:	b29b      	uxth	r3, r3
 8013596:	4618      	mov	r0, r3
 8013598:	f7f7 fec8 	bl	800b32c <lwip_htons>
 801359c:	4603      	mov	r3, r0
 801359e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80135a0:	2300      	movs	r3, #0
 80135a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80135a8:	2300      	movs	r3, #0
 80135aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ac:	4b64      	ldr	r3, [pc, #400]	@ (8013740 <udp_input+0x21c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80135b2:	e054      	b.n	801365e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80135b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b6:	8a5b      	ldrh	r3, [r3, #18]
 80135b8:	89fa      	ldrh	r2, [r7, #14]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d14a      	bne.n	8013654 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80135be:	7cfb      	ldrb	r3, [r7, #19]
 80135c0:	461a      	mov	r2, r3
 80135c2:	6839      	ldr	r1, [r7, #0]
 80135c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80135c6:	f7ff ff49 	bl	801345c <udp_input_local_match>
 80135ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d041      	beq.n	8013654 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80135d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d2:	7c1b      	ldrb	r3, [r3, #16]
 80135d4:	f003 0304 	and.w	r3, r3, #4
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d11d      	bne.n	8013618 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d102      	bne.n	80135e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80135e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e4:	61fb      	str	r3, [r7, #28]
 80135e6:	e017      	b.n	8013618 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80135e8:	7cfb      	ldrb	r3, [r7, #19]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d014      	beq.n	8013618 <udp_input+0xf4>
 80135ee:	4b53      	ldr	r3, [pc, #332]	@ (801373c <udp_input+0x218>)
 80135f0:	695b      	ldr	r3, [r3, #20]
 80135f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80135f6:	d10f      	bne.n	8013618 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	3304      	adds	r3, #4
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	429a      	cmp	r2, r3
 8013604:	d008      	beq.n	8013618 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	3304      	adds	r3, #4
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	429a      	cmp	r2, r3
 8013612:	d101      	bne.n	8013618 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013616:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801361a:	8a9b      	ldrh	r3, [r3, #20]
 801361c:	8a3a      	ldrh	r2, [r7, #16]
 801361e:	429a      	cmp	r2, r3
 8013620:	d118      	bne.n	8013654 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013624:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013626:	2b00      	cmp	r3, #0
 8013628:	d005      	beq.n	8013636 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362c:	685a      	ldr	r2, [r3, #4]
 801362e:	4b43      	ldr	r3, [pc, #268]	@ (801373c <udp_input+0x218>)
 8013630:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013632:	429a      	cmp	r2, r3
 8013634:	d10e      	bne.n	8013654 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d014      	beq.n	8013666 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363e:	68da      	ldr	r2, [r3, #12]
 8013640:	6a3b      	ldr	r3, [r7, #32]
 8013642:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013644:	4b3e      	ldr	r3, [pc, #248]	@ (8013740 <udp_input+0x21c>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801364a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801364c:	4a3c      	ldr	r2, [pc, #240]	@ (8013740 <udp_input+0x21c>)
 801364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013650:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013652:	e008      	b.n	8013666 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013656:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	627b      	str	r3, [r7, #36]	@ 0x24
 801365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1a7      	bne.n	80135b4 <udp_input+0x90>
 8013664:	e000      	b.n	8013668 <udp_input+0x144>
        break;
 8013666:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <udp_input+0x14e>
    pcb = uncon_pcb;
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013674:	2b00      	cmp	r3, #0
 8013676:	d002      	beq.n	801367e <udp_input+0x15a>
    for_us = 1;
 8013678:	2301      	movs	r3, #1
 801367a:	76fb      	strb	r3, [r7, #27]
 801367c:	e00a      	b.n	8013694 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	3304      	adds	r3, #4
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	4b2d      	ldr	r3, [pc, #180]	@ (801373c <udp_input+0x218>)
 8013686:	695b      	ldr	r3, [r3, #20]
 8013688:	429a      	cmp	r2, r3
 801368a:	bf0c      	ite	eq
 801368c:	2301      	moveq	r3, #1
 801368e:	2300      	movne	r3, #0
 8013690:	b2db      	uxtb	r3, r3
 8013692:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013694:	7efb      	ldrb	r3, [r7, #27]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d041      	beq.n	801371e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801369a:	2108      	movs	r1, #8
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7f9 f9b1 	bl	800ca04 <pbuf_remove_header>
 80136a2:	4603      	mov	r3, r0
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00a      	beq.n	80136be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80136a8:	4b20      	ldr	r3, [pc, #128]	@ (801372c <udp_input+0x208>)
 80136aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80136ae:	4925      	ldr	r1, [pc, #148]	@ (8013744 <udp_input+0x220>)
 80136b0:	4820      	ldr	r0, [pc, #128]	@ (8013734 <udp_input+0x210>)
 80136b2:	f003 fb2f 	bl	8016d14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7f9 fa2a 	bl	800cb10 <pbuf_free>
      goto end;
 80136bc:	e032      	b.n	8013724 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80136be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d012      	beq.n	80136ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80136c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d00a      	beq.n	80136e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80136cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ce:	699c      	ldr	r4, [r3, #24]
 80136d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d2:	69d8      	ldr	r0, [r3, #28]
 80136d4:	8a3b      	ldrh	r3, [r7, #16]
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	4b1b      	ldr	r3, [pc, #108]	@ (8013748 <udp_input+0x224>)
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80136de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80136e0:	e021      	b.n	8013726 <udp_input+0x202>
        pbuf_free(p);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7f9 fa14 	bl	800cb10 <pbuf_free>
        goto end;
 80136e8:	e01c      	b.n	8013724 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80136ea:	7cfb      	ldrb	r3, [r7, #19]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d112      	bne.n	8013716 <udp_input+0x1f2>
 80136f0:	4b12      	ldr	r3, [pc, #72]	@ (801373c <udp_input+0x218>)
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80136f8:	2be0      	cmp	r3, #224	@ 0xe0
 80136fa:	d00c      	beq.n	8013716 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80136fc:	4b0f      	ldr	r3, [pc, #60]	@ (801373c <udp_input+0x218>)
 80136fe:	899b      	ldrh	r3, [r3, #12]
 8013700:	3308      	adds	r3, #8
 8013702:	b29b      	uxth	r3, r3
 8013704:	b21b      	sxth	r3, r3
 8013706:	4619      	mov	r1, r3
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f7f9 f9ee 	bl	800caea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801370e:	2103      	movs	r1, #3
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f001 fc29 	bl	8014f68 <icmp_dest_unreach>
      pbuf_free(p);
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f7f9 f9fa 	bl	800cb10 <pbuf_free>
  return;
 801371c:	e003      	b.n	8013726 <udp_input+0x202>
    pbuf_free(p);
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7f9 f9f6 	bl	800cb10 <pbuf_free>
  return;
 8013724:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013726:	372c      	adds	r7, #44	@ 0x2c
 8013728:	46bd      	mov	sp, r7
 801372a:	bd90      	pop	{r4, r7, pc}
 801372c:	0801b0d8 	.word	0x0801b0d8
 8013730:	0801b17c 	.word	0x0801b17c
 8013734:	0801b12c 	.word	0x0801b12c
 8013738:	0801b194 	.word	0x0801b194
 801373c:	2000a14c 	.word	0x2000a14c
 8013740:	2000d8fc 	.word	0x2000d8fc
 8013744:	0801b1b0 	.word	0x0801b1b0
 8013748:	2000a15c 	.word	0x2000a15c

0801374c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d109      	bne.n	8013770 <udp_send+0x24>
 801375c:	4b11      	ldr	r3, [pc, #68]	@ (80137a4 <udp_send+0x58>)
 801375e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8013762:	4911      	ldr	r1, [pc, #68]	@ (80137a8 <udp_send+0x5c>)
 8013764:	4811      	ldr	r0, [pc, #68]	@ (80137ac <udp_send+0x60>)
 8013766:	f003 fad5 	bl	8016d14 <iprintf>
 801376a:	f06f 030f 	mvn.w	r3, #15
 801376e:	e015      	b.n	801379c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d109      	bne.n	801378a <udp_send+0x3e>
 8013776:	4b0b      	ldr	r3, [pc, #44]	@ (80137a4 <udp_send+0x58>)
 8013778:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801377c:	490c      	ldr	r1, [pc, #48]	@ (80137b0 <udp_send+0x64>)
 801377e:	480b      	ldr	r0, [pc, #44]	@ (80137ac <udp_send+0x60>)
 8013780:	f003 fac8 	bl	8016d14 <iprintf>
 8013784:	f06f 030f 	mvn.w	r3, #15
 8013788:	e008      	b.n	801379c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	1d1a      	adds	r2, r3, #4
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	8a9b      	ldrh	r3, [r3, #20]
 8013792:	6839      	ldr	r1, [r7, #0]
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f000 f80d 	bl	80137b4 <udp_sendto>
 801379a:	4603      	mov	r3, r0
}
 801379c:	4618      	mov	r0, r3
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	0801b0d8 	.word	0x0801b0d8
 80137a8:	0801b1cc 	.word	0x0801b1cc
 80137ac:	0801b12c 	.word	0x0801b12c
 80137b0:	0801b1e4 	.word	0x0801b1e4

080137b4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b088      	sub	sp, #32
 80137b8:	af02      	add	r7, sp, #8
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d109      	bne.n	80137dc <udp_sendto+0x28>
 80137c8:	4b23      	ldr	r3, [pc, #140]	@ (8013858 <udp_sendto+0xa4>)
 80137ca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80137ce:	4923      	ldr	r1, [pc, #140]	@ (801385c <udp_sendto+0xa8>)
 80137d0:	4823      	ldr	r0, [pc, #140]	@ (8013860 <udp_sendto+0xac>)
 80137d2:	f003 fa9f 	bl	8016d14 <iprintf>
 80137d6:	f06f 030f 	mvn.w	r3, #15
 80137da:	e038      	b.n	801384e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d109      	bne.n	80137f6 <udp_sendto+0x42>
 80137e2:	4b1d      	ldr	r3, [pc, #116]	@ (8013858 <udp_sendto+0xa4>)
 80137e4:	f240 2219 	movw	r2, #537	@ 0x219
 80137e8:	491e      	ldr	r1, [pc, #120]	@ (8013864 <udp_sendto+0xb0>)
 80137ea:	481d      	ldr	r0, [pc, #116]	@ (8013860 <udp_sendto+0xac>)
 80137ec:	f003 fa92 	bl	8016d14 <iprintf>
 80137f0:	f06f 030f 	mvn.w	r3, #15
 80137f4:	e02b      	b.n	801384e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d109      	bne.n	8013810 <udp_sendto+0x5c>
 80137fc:	4b16      	ldr	r3, [pc, #88]	@ (8013858 <udp_sendto+0xa4>)
 80137fe:	f240 221a 	movw	r2, #538	@ 0x21a
 8013802:	4919      	ldr	r1, [pc, #100]	@ (8013868 <udp_sendto+0xb4>)
 8013804:	4816      	ldr	r0, [pc, #88]	@ (8013860 <udp_sendto+0xac>)
 8013806:	f003 fa85 	bl	8016d14 <iprintf>
 801380a:	f06f 030f 	mvn.w	r3, #15
 801380e:	e01e      	b.n	801384e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	7a1b      	ldrb	r3, [r3, #8]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d006      	beq.n	8013826 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	7a1b      	ldrb	r3, [r3, #8]
 801381c:	4618      	mov	r0, r3
 801381e:	f7f8 fde9 	bl	800c3f4 <netif_get_by_index>
 8013822:	6178      	str	r0, [r7, #20]
 8013824:	e003      	b.n	801382e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f001 fc28 	bl	801507c <ip4_route>
 801382c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013834:	f06f 0303 	mvn.w	r3, #3
 8013838:	e009      	b.n	801384e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801383a:	887a      	ldrh	r2, [r7, #2]
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	4613      	mov	r3, r2
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	68b9      	ldr	r1, [r7, #8]
 8013846:	68f8      	ldr	r0, [r7, #12]
 8013848:	f000 f810 	bl	801386c <udp_sendto_if>
 801384c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801384e:	4618      	mov	r0, r3
 8013850:	3718      	adds	r7, #24
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
 8013856:	bf00      	nop
 8013858:	0801b0d8 	.word	0x0801b0d8
 801385c:	0801b1fc 	.word	0x0801b1fc
 8013860:	0801b12c 	.word	0x0801b12c
 8013864:	0801b214 	.word	0x0801b214
 8013868:	0801b230 	.word	0x0801b230

0801386c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af02      	add	r7, sp, #8
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d109      	bne.n	8013894 <udp_sendto_if+0x28>
 8013880:	4b2e      	ldr	r3, [pc, #184]	@ (801393c <udp_sendto_if+0xd0>)
 8013882:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013886:	492e      	ldr	r1, [pc, #184]	@ (8013940 <udp_sendto_if+0xd4>)
 8013888:	482e      	ldr	r0, [pc, #184]	@ (8013944 <udp_sendto_if+0xd8>)
 801388a:	f003 fa43 	bl	8016d14 <iprintf>
 801388e:	f06f 030f 	mvn.w	r3, #15
 8013892:	e04f      	b.n	8013934 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <udp_sendto_if+0x42>
 801389a:	4b28      	ldr	r3, [pc, #160]	@ (801393c <udp_sendto_if+0xd0>)
 801389c:	f240 2281 	movw	r2, #641	@ 0x281
 80138a0:	4929      	ldr	r1, [pc, #164]	@ (8013948 <udp_sendto_if+0xdc>)
 80138a2:	4828      	ldr	r0, [pc, #160]	@ (8013944 <udp_sendto_if+0xd8>)
 80138a4:	f003 fa36 	bl	8016d14 <iprintf>
 80138a8:	f06f 030f 	mvn.w	r3, #15
 80138ac:	e042      	b.n	8013934 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d109      	bne.n	80138c8 <udp_sendto_if+0x5c>
 80138b4:	4b21      	ldr	r3, [pc, #132]	@ (801393c <udp_sendto_if+0xd0>)
 80138b6:	f240 2282 	movw	r2, #642	@ 0x282
 80138ba:	4924      	ldr	r1, [pc, #144]	@ (801394c <udp_sendto_if+0xe0>)
 80138bc:	4821      	ldr	r0, [pc, #132]	@ (8013944 <udp_sendto_if+0xd8>)
 80138be:	f003 fa29 	bl	8016d14 <iprintf>
 80138c2:	f06f 030f 	mvn.w	r3, #15
 80138c6:	e035      	b.n	8013934 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80138c8:	6a3b      	ldr	r3, [r7, #32]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d109      	bne.n	80138e2 <udp_sendto_if+0x76>
 80138ce:	4b1b      	ldr	r3, [pc, #108]	@ (801393c <udp_sendto_if+0xd0>)
 80138d0:	f240 2283 	movw	r2, #643	@ 0x283
 80138d4:	491e      	ldr	r1, [pc, #120]	@ (8013950 <udp_sendto_if+0xe4>)
 80138d6:	481b      	ldr	r0, [pc, #108]	@ (8013944 <udp_sendto_if+0xd8>)
 80138d8:	f003 fa1c 	bl	8016d14 <iprintf>
 80138dc:	f06f 030f 	mvn.w	r3, #15
 80138e0:	e028      	b.n	8013934 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d009      	beq.n	80138fc <udp_sendto_if+0x90>
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d005      	beq.n	80138fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138f8:	2be0      	cmp	r3, #224	@ 0xe0
 80138fa:	d103      	bne.n	8013904 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	3304      	adds	r3, #4
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	e00b      	b.n	801391c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	6a3b      	ldr	r3, [r7, #32]
 801390a:	3304      	adds	r3, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	429a      	cmp	r2, r3
 8013910:	d002      	beq.n	8013918 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013912:	f06f 0303 	mvn.w	r3, #3
 8013916:	e00d      	b.n	8013934 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801391c:	887a      	ldrh	r2, [r7, #2]
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	9301      	str	r3, [sp, #4]
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	9300      	str	r3, [sp, #0]
 8013926:	4613      	mov	r3, r2
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	68b9      	ldr	r1, [r7, #8]
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f000 f811 	bl	8013954 <udp_sendto_if_src>
 8013932:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013934:	4618      	mov	r0, r3
 8013936:	3718      	adds	r7, #24
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	0801b0d8 	.word	0x0801b0d8
 8013940:	0801b24c 	.word	0x0801b24c
 8013944:	0801b12c 	.word	0x0801b12c
 8013948:	0801b268 	.word	0x0801b268
 801394c:	0801b284 	.word	0x0801b284
 8013950:	0801b2a4 	.word	0x0801b2a4

08013954 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b08c      	sub	sp, #48	@ 0x30
 8013958:	af04      	add	r7, sp, #16
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
 8013960:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d109      	bne.n	801397c <udp_sendto_if_src+0x28>
 8013968:	4b65      	ldr	r3, [pc, #404]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 801396a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801396e:	4965      	ldr	r1, [pc, #404]	@ (8013b04 <udp_sendto_if_src+0x1b0>)
 8013970:	4865      	ldr	r0, [pc, #404]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 8013972:	f003 f9cf 	bl	8016d14 <iprintf>
 8013976:	f06f 030f 	mvn.w	r3, #15
 801397a:	e0bc      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d109      	bne.n	8013996 <udp_sendto_if_src+0x42>
 8013982:	4b5f      	ldr	r3, [pc, #380]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 8013984:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013988:	4960      	ldr	r1, [pc, #384]	@ (8013b0c <udp_sendto_if_src+0x1b8>)
 801398a:	485f      	ldr	r0, [pc, #380]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 801398c:	f003 f9c2 	bl	8016d14 <iprintf>
 8013990:	f06f 030f 	mvn.w	r3, #15
 8013994:	e0af      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d109      	bne.n	80139b0 <udp_sendto_if_src+0x5c>
 801399c:	4b58      	ldr	r3, [pc, #352]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 801399e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80139a2:	495b      	ldr	r1, [pc, #364]	@ (8013b10 <udp_sendto_if_src+0x1bc>)
 80139a4:	4858      	ldr	r0, [pc, #352]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 80139a6:	f003 f9b5 	bl	8016d14 <iprintf>
 80139aa:	f06f 030f 	mvn.w	r3, #15
 80139ae:	e0a2      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80139b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d109      	bne.n	80139ca <udp_sendto_if_src+0x76>
 80139b6:	4b52      	ldr	r3, [pc, #328]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 80139b8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80139bc:	4955      	ldr	r1, [pc, #340]	@ (8013b14 <udp_sendto_if_src+0x1c0>)
 80139be:	4852      	ldr	r0, [pc, #328]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 80139c0:	f003 f9a8 	bl	8016d14 <iprintf>
 80139c4:	f06f 030f 	mvn.w	r3, #15
 80139c8:	e095      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80139ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d109      	bne.n	80139e4 <udp_sendto_if_src+0x90>
 80139d0:	4b4b      	ldr	r3, [pc, #300]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 80139d2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80139d6:	4950      	ldr	r1, [pc, #320]	@ (8013b18 <udp_sendto_if_src+0x1c4>)
 80139d8:	484b      	ldr	r0, [pc, #300]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 80139da:	f003 f99b 	bl	8016d14 <iprintf>
 80139de:	f06f 030f 	mvn.w	r3, #15
 80139e2:	e088      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	8a5b      	ldrh	r3, [r3, #18]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d10f      	bne.n	8013a0c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80139ec:	68f9      	ldr	r1, [r7, #12]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	8a5b      	ldrh	r3, [r3, #18]
 80139f2:	461a      	mov	r2, r3
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	f000 f893 	bl	8013b20 <udp_bind>
 80139fa:	4603      	mov	r3, r0
 80139fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80139fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013a06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013a0a:	e074      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	891b      	ldrh	r3, [r3, #8]
 8013a10:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d902      	bls.n	8013a1e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a1c:	e06b      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013a1e:	2108      	movs	r1, #8
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7f8 ffdf 	bl	800c9e4 <pbuf_add_header>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d015      	beq.n	8013a58 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013a2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a30:	2108      	movs	r1, #8
 8013a32:	2022      	movs	r0, #34	@ 0x22
 8013a34:	f7f8 fd88 	bl	800c548 <pbuf_alloc>
 8013a38:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d102      	bne.n	8013a46 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a44:	e057      	b.n	8013af6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	891b      	ldrh	r3, [r3, #8]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d006      	beq.n	8013a5c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013a4e:	68b9      	ldr	r1, [r7, #8]
 8013a50:	69f8      	ldr	r0, [r7, #28]
 8013a52:	f7f9 f981 	bl	800cd58 <pbuf_chain>
 8013a56:	e001      	b.n	8013a5c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	895b      	ldrh	r3, [r3, #10]
 8013a60:	2b07      	cmp	r3, #7
 8013a62:	d806      	bhi.n	8013a72 <udp_sendto_if_src+0x11e>
 8013a64:	4b26      	ldr	r3, [pc, #152]	@ (8013b00 <udp_sendto_if_src+0x1ac>)
 8013a66:	f240 320d 	movw	r2, #781	@ 0x30d
 8013a6a:	492c      	ldr	r1, [pc, #176]	@ (8013b1c <udp_sendto_if_src+0x1c8>)
 8013a6c:	4826      	ldr	r0, [pc, #152]	@ (8013b08 <udp_sendto_if_src+0x1b4>)
 8013a6e:	f003 f951 	bl	8016d14 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	8a5b      	ldrh	r3, [r3, #18]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f7 fc55 	bl	800b32c <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	461a      	mov	r2, r3
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013a8a:	887b      	ldrh	r3, [r7, #2]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7f7 fc4d 	bl	800b32c <lwip_htons>
 8013a92:	4603      	mov	r3, r0
 8013a94:	461a      	mov	r2, r3
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	719a      	strb	r2, [r3, #6]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013aa4:	69fb      	ldr	r3, [r7, #28]
 8013aa6:	891b      	ldrh	r3, [r3, #8]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7f7 fc3f 	bl	800b32c <lwip_htons>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013ab6:	2311      	movs	r3, #17
 8013ab8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	7adb      	ldrb	r3, [r3, #11]
 8013abe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	7a9b      	ldrb	r3, [r3, #10]
 8013ac4:	7cb9      	ldrb	r1, [r7, #18]
 8013ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ac8:	9202      	str	r2, [sp, #8]
 8013aca:	7cfa      	ldrb	r2, [r7, #19]
 8013acc:	9201      	str	r2, [sp, #4]
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ad6:	69f8      	ldr	r0, [r7, #28]
 8013ad8:	f001 fcb8 	bl	801544c <ip4_output_if_src>
 8013adc:	4603      	mov	r3, r0
 8013ade:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013ae0:	69fa      	ldr	r2, [r7, #28]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d004      	beq.n	8013af2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013ae8:	69f8      	ldr	r0, [r7, #28]
 8013aea:	f7f9 f811 	bl	800cb10 <pbuf_free>
    q = NULL;
 8013aee:	2300      	movs	r3, #0
 8013af0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013af2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3720      	adds	r7, #32
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	0801b0d8 	.word	0x0801b0d8
 8013b04:	0801b2c4 	.word	0x0801b2c4
 8013b08:	0801b12c 	.word	0x0801b12c
 8013b0c:	0801b2e4 	.word	0x0801b2e4
 8013b10:	0801b304 	.word	0x0801b304
 8013b14:	0801b328 	.word	0x0801b328
 8013b18:	0801b34c 	.word	0x0801b34c
 8013b1c:	0801b370 	.word	0x0801b370

08013b20 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b086      	sub	sp, #24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	4613      	mov	r3, r2
 8013b2c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d101      	bne.n	8013b38 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013b34:	4b39      	ldr	r3, [pc, #228]	@ (8013c1c <udp_bind+0xfc>)
 8013b36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d109      	bne.n	8013b52 <udp_bind+0x32>
 8013b3e:	4b38      	ldr	r3, [pc, #224]	@ (8013c20 <udp_bind+0x100>)
 8013b40:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013b44:	4937      	ldr	r1, [pc, #220]	@ (8013c24 <udp_bind+0x104>)
 8013b46:	4838      	ldr	r0, [pc, #224]	@ (8013c28 <udp_bind+0x108>)
 8013b48:	f003 f8e4 	bl	8016d14 <iprintf>
 8013b4c:	f06f 030f 	mvn.w	r3, #15
 8013b50:	e060      	b.n	8013c14 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013b52:	2300      	movs	r3, #0
 8013b54:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b56:	4b35      	ldr	r3, [pc, #212]	@ (8013c2c <udp_bind+0x10c>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	617b      	str	r3, [r7, #20]
 8013b5c:	e009      	b.n	8013b72 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013b5e:	68fa      	ldr	r2, [r7, #12]
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d102      	bne.n	8013b6c <udp_bind+0x4c>
      rebind = 1;
 8013b66:	2301      	movs	r3, #1
 8013b68:	74fb      	strb	r3, [r7, #19]
      break;
 8013b6a:	e005      	b.n	8013b78 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	617b      	str	r3, [r7, #20]
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1f2      	bne.n	8013b5e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013b78:	88fb      	ldrh	r3, [r7, #6]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d109      	bne.n	8013b92 <udp_bind+0x72>
    port = udp_new_port();
 8013b7e:	f7ff fc35 	bl	80133ec <udp_new_port>
 8013b82:	4603      	mov	r3, r0
 8013b84:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013b86:	88fb      	ldrh	r3, [r7, #6]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d12c      	bne.n	8013be6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013b8c:	f06f 0307 	mvn.w	r3, #7
 8013b90:	e040      	b.n	8013c14 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b92:	4b26      	ldr	r3, [pc, #152]	@ (8013c2c <udp_bind+0x10c>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	617b      	str	r3, [r7, #20]
 8013b98:	e022      	b.n	8013be0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d01b      	beq.n	8013bda <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	8a5b      	ldrh	r3, [r3, #18]
 8013ba6:	88fa      	ldrh	r2, [r7, #6]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d116      	bne.n	8013bda <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d00d      	beq.n	8013bd4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d00a      	beq.n	8013bd4 <udp_bind+0xb4>
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d006      	beq.n	8013bd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013bc6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d003      	beq.n	8013bd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d102      	bne.n	8013bda <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013bd4:	f06f 0307 	mvn.w	r3, #7
 8013bd8:	e01c      	b.n	8013c14 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	617b      	str	r3, [r7, #20]
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1d9      	bne.n	8013b9a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <udp_bind+0xd2>
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	e000      	b.n	8013bf4 <udp_bind+0xd4>
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	88fa      	ldrh	r2, [r7, #6]
 8013bfc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013bfe:	7cfb      	ldrb	r3, [r7, #19]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d106      	bne.n	8013c12 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013c04:	4b09      	ldr	r3, [pc, #36]	@ (8013c2c <udp_bind+0x10c>)
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013c0c:	4a07      	ldr	r2, [pc, #28]	@ (8013c2c <udp_bind+0x10c>)
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3718      	adds	r7, #24
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	0801bcec 	.word	0x0801bcec
 8013c20:	0801b0d8 	.word	0x0801b0d8
 8013c24:	0801b3a0 	.word	0x0801b3a0
 8013c28:	0801b12c 	.word	0x0801b12c
 8013c2c:	2000d8fc 	.word	0x2000d8fc

08013c30 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b086      	sub	sp, #24
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d109      	bne.n	8013c58 <udp_connect+0x28>
 8013c44:	4b2c      	ldr	r3, [pc, #176]	@ (8013cf8 <udp_connect+0xc8>)
 8013c46:	f240 4235 	movw	r2, #1077	@ 0x435
 8013c4a:	492c      	ldr	r1, [pc, #176]	@ (8013cfc <udp_connect+0xcc>)
 8013c4c:	482c      	ldr	r0, [pc, #176]	@ (8013d00 <udp_connect+0xd0>)
 8013c4e:	f003 f861 	bl	8016d14 <iprintf>
 8013c52:	f06f 030f 	mvn.w	r3, #15
 8013c56:	e04b      	b.n	8013cf0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d109      	bne.n	8013c72 <udp_connect+0x42>
 8013c5e:	4b26      	ldr	r3, [pc, #152]	@ (8013cf8 <udp_connect+0xc8>)
 8013c60:	f240 4236 	movw	r2, #1078	@ 0x436
 8013c64:	4927      	ldr	r1, [pc, #156]	@ (8013d04 <udp_connect+0xd4>)
 8013c66:	4826      	ldr	r0, [pc, #152]	@ (8013d00 <udp_connect+0xd0>)
 8013c68:	f003 f854 	bl	8016d14 <iprintf>
 8013c6c:	f06f 030f 	mvn.w	r3, #15
 8013c70:	e03e      	b.n	8013cf0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	8a5b      	ldrh	r3, [r3, #18]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d10f      	bne.n	8013c9a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013c7a:	68f9      	ldr	r1, [r7, #12]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	8a5b      	ldrh	r3, [r3, #18]
 8013c80:	461a      	mov	r2, r3
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f7ff ff4c 	bl	8013b20 <udp_bind>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013c8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d002      	beq.n	8013c9a <udp_connect+0x6a>
      return err;
 8013c94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c98:	e02a      	b.n	8013cf0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d002      	beq.n	8013ca6 <udp_connect+0x76>
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	e000      	b.n	8013ca8 <udp_connect+0x78>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	88fa      	ldrh	r2, [r7, #6]
 8013cb0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	7c1b      	ldrb	r3, [r3, #16]
 8013cb6:	f043 0304 	orr.w	r3, r3, #4
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cc0:	4b11      	ldr	r3, [pc, #68]	@ (8013d08 <udp_connect+0xd8>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	617b      	str	r3, [r7, #20]
 8013cc6:	e008      	b.n	8013cda <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013cc8:	68fa      	ldr	r2, [r7, #12]
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d101      	bne.n	8013cd4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	e00d      	b.n	8013cf0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	617b      	str	r3, [r7, #20]
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d1f3      	bne.n	8013cc8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013ce0:	4b09      	ldr	r3, [pc, #36]	@ (8013d08 <udp_connect+0xd8>)
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013ce8:	4a07      	ldr	r2, [pc, #28]	@ (8013d08 <udp_connect+0xd8>)
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3718      	adds	r7, #24
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}
 8013cf8:	0801b0d8 	.word	0x0801b0d8
 8013cfc:	0801b3b8 	.word	0x0801b3b8
 8013d00:	0801b12c 	.word	0x0801b12c
 8013d04:	0801b3d4 	.word	0x0801b3d4
 8013d08:	2000d8fc 	.word	0x2000d8fc

08013d0c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d107      	bne.n	8013d2a <udp_disconnect+0x1e>
 8013d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8013d50 <udp_disconnect+0x44>)
 8013d1c:	f240 426a 	movw	r2, #1130	@ 0x46a
 8013d20:	490c      	ldr	r1, [pc, #48]	@ (8013d54 <udp_disconnect+0x48>)
 8013d22:	480d      	ldr	r0, [pc, #52]	@ (8013d58 <udp_disconnect+0x4c>)
 8013d24:	f002 fff6 	bl	8016d14 <iprintf>
 8013d28:	e00f      	b.n	8013d4a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	7c1b      	ldrb	r3, [r3, #16]
 8013d40:	f023 0304 	bic.w	r3, r3, #4
 8013d44:	b2da      	uxtb	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	741a      	strb	r2, [r3, #16]
}
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	0801b0d8 	.word	0x0801b0d8
 8013d54:	0801b3f0 	.word	0x0801b3f0
 8013d58:	0801b12c 	.word	0x0801b12c

08013d5c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b084      	sub	sp, #16
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d107      	bne.n	8013d7e <udp_recv+0x22>
 8013d6e:	4b08      	ldr	r3, [pc, #32]	@ (8013d90 <udp_recv+0x34>)
 8013d70:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013d74:	4907      	ldr	r1, [pc, #28]	@ (8013d94 <udp_recv+0x38>)
 8013d76:	4808      	ldr	r0, [pc, #32]	@ (8013d98 <udp_recv+0x3c>)
 8013d78:	f002 ffcc 	bl	8016d14 <iprintf>
 8013d7c:	e005      	b.n	8013d8a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	61da      	str	r2, [r3, #28]
}
 8013d8a:	3710      	adds	r7, #16
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	0801b0d8 	.word	0x0801b0d8
 8013d94:	0801b40c 	.word	0x0801b40c
 8013d98:	0801b12c 	.word	0x0801b12c

08013d9c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d107      	bne.n	8013dba <udp_remove+0x1e>
 8013daa:	4b19      	ldr	r3, [pc, #100]	@ (8013e10 <udp_remove+0x74>)
 8013dac:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013db0:	4918      	ldr	r1, [pc, #96]	@ (8013e14 <udp_remove+0x78>)
 8013db2:	4819      	ldr	r0, [pc, #100]	@ (8013e18 <udp_remove+0x7c>)
 8013db4:	f002 ffae 	bl	8016d14 <iprintf>
 8013db8:	e026      	b.n	8013e08 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013dba:	4b18      	ldr	r3, [pc, #96]	@ (8013e1c <udp_remove+0x80>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d105      	bne.n	8013dd0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013dc4:	4b15      	ldr	r3, [pc, #84]	@ (8013e1c <udp_remove+0x80>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	68db      	ldr	r3, [r3, #12]
 8013dca:	4a14      	ldr	r2, [pc, #80]	@ (8013e1c <udp_remove+0x80>)
 8013dcc:	6013      	str	r3, [r2, #0]
 8013dce:	e017      	b.n	8013e00 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013dd0:	4b12      	ldr	r3, [pc, #72]	@ (8013e1c <udp_remove+0x80>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	60fb      	str	r3, [r7, #12]
 8013dd6:	e010      	b.n	8013dfa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d009      	beq.n	8013df4 <udp_remove+0x58>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d104      	bne.n	8013df4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	68da      	ldr	r2, [r3, #12]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	60da      	str	r2, [r3, #12]
        break;
 8013df2:	e005      	b.n	8013e00 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	60fb      	str	r3, [r7, #12]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1eb      	bne.n	8013dd8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013e00:	6879      	ldr	r1, [r7, #4]
 8013e02:	2000      	movs	r0, #0
 8013e04:	f7f7 ffe0 	bl	800bdc8 <memp_free>
}
 8013e08:	3710      	adds	r7, #16
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	0801b0d8 	.word	0x0801b0d8
 8013e14:	0801b424 	.word	0x0801b424
 8013e18:	0801b12c 	.word	0x0801b12c
 8013e1c:	2000d8fc 	.word	0x2000d8fc

08013e20 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013e26:	2000      	movs	r0, #0
 8013e28:	f7f7 ff58 	bl	800bcdc <memp_malloc>
 8013e2c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d007      	beq.n	8013e44 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013e34:	2220      	movs	r2, #32
 8013e36:	2100      	movs	r1, #0
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f002 ffc9 	bl	8016dd0 <memset>
    pcb->ttl = UDP_TTL;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	22ff      	movs	r2, #255	@ 0xff
 8013e42:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013e44:	687b      	ldr	r3, [r7, #4]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b084      	sub	sp, #16
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	4603      	mov	r3, r0
 8013e56:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013e58:	f7ff ffe2 	bl	8013e20 <udp_new>
 8013e5c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b085      	sub	sp, #20
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d01e      	beq.n	8013eb6 <udp_netif_ip_addr_changed+0x4e>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d01a      	beq.n	8013eb6 <udp_netif_ip_addr_changed+0x4e>
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d017      	beq.n	8013eb6 <udp_netif_ip_addr_changed+0x4e>
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d013      	beq.n	8013eb6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ec4 <udp_netif_ip_addr_changed+0x5c>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	60fb      	str	r3, [r7, #12]
 8013e94:	e00c      	b.n	8013eb0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d103      	bne.n	8013eaa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	68db      	ldr	r3, [r3, #12]
 8013eae:	60fb      	str	r3, [r7, #12]
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d1ef      	bne.n	8013e96 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013eb6:	bf00      	nop
 8013eb8:	3714      	adds	r7, #20
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr
 8013ec2:	bf00      	nop
 8013ec4:	2000d8fc 	.word	0x2000d8fc

08013ec8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ed0:	4915      	ldr	r1, [pc, #84]	@ (8013f28 <etharp_free_entry+0x60>)
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	440b      	add	r3, r1
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d013      	beq.n	8013f0c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013ee4:	4910      	ldr	r1, [pc, #64]	@ (8013f28 <etharp_free_entry+0x60>)
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	4613      	mov	r3, r2
 8013eea:	005b      	lsls	r3, r3, #1
 8013eec:	4413      	add	r3, r2
 8013eee:	00db      	lsls	r3, r3, #3
 8013ef0:	440b      	add	r3, r1
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7f8 fe0b 	bl	800cb10 <pbuf_free>
    arp_table[i].q = NULL;
 8013efa:	490b      	ldr	r1, [pc, #44]	@ (8013f28 <etharp_free_entry+0x60>)
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	4613      	mov	r3, r2
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	4413      	add	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	440b      	add	r3, r1
 8013f08:	2200      	movs	r2, #0
 8013f0a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013f0c:	4906      	ldr	r1, [pc, #24]	@ (8013f28 <etharp_free_entry+0x60>)
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	4613      	mov	r3, r2
 8013f12:	005b      	lsls	r3, r3, #1
 8013f14:	4413      	add	r3, r2
 8013f16:	00db      	lsls	r3, r3, #3
 8013f18:	440b      	add	r3, r1
 8013f1a:	3314      	adds	r3, #20
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013f20:	bf00      	nop
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	2000d900 	.word	0x2000d900

08013f2c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f32:	2300      	movs	r3, #0
 8013f34:	607b      	str	r3, [r7, #4]
 8013f36:	e096      	b.n	8014066 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013f38:	494f      	ldr	r1, [pc, #316]	@ (8014078 <etharp_tmr+0x14c>)
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	4413      	add	r3, r2
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	440b      	add	r3, r1
 8013f46:	3314      	adds	r3, #20
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013f4c:	78fb      	ldrb	r3, [r7, #3]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 8086 	beq.w	8014060 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013f54:	4948      	ldr	r1, [pc, #288]	@ (8014078 <etharp_tmr+0x14c>)
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	005b      	lsls	r3, r3, #1
 8013f5c:	4413      	add	r3, r2
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	440b      	add	r3, r1
 8013f62:	3312      	adds	r3, #18
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	3301      	adds	r3, #1
 8013f68:	b298      	uxth	r0, r3
 8013f6a:	4943      	ldr	r1, [pc, #268]	@ (8014078 <etharp_tmr+0x14c>)
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	4413      	add	r3, r2
 8013f74:	00db      	lsls	r3, r3, #3
 8013f76:	440b      	add	r3, r1
 8013f78:	3312      	adds	r3, #18
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f7e:	493e      	ldr	r1, [pc, #248]	@ (8014078 <etharp_tmr+0x14c>)
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	4613      	mov	r3, r2
 8013f84:	005b      	lsls	r3, r3, #1
 8013f86:	4413      	add	r3, r2
 8013f88:	00db      	lsls	r3, r3, #3
 8013f8a:	440b      	add	r3, r1
 8013f8c:	3312      	adds	r3, #18
 8013f8e:	881b      	ldrh	r3, [r3, #0]
 8013f90:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013f94:	d215      	bcs.n	8013fc2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f96:	4938      	ldr	r1, [pc, #224]	@ (8014078 <etharp_tmr+0x14c>)
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	005b      	lsls	r3, r3, #1
 8013f9e:	4413      	add	r3, r2
 8013fa0:	00db      	lsls	r3, r3, #3
 8013fa2:	440b      	add	r3, r1
 8013fa4:	3314      	adds	r3, #20
 8013fa6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d10e      	bne.n	8013fca <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013fac:	4932      	ldr	r1, [pc, #200]	@ (8014078 <etharp_tmr+0x14c>)
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	4413      	add	r3, r2
 8013fb6:	00db      	lsls	r3, r3, #3
 8013fb8:	440b      	add	r3, r1
 8013fba:	3312      	adds	r3, #18
 8013fbc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013fbe:	2b04      	cmp	r3, #4
 8013fc0:	d903      	bls.n	8013fca <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7ff ff80 	bl	8013ec8 <etharp_free_entry>
 8013fc8:	e04a      	b.n	8014060 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013fca:	492b      	ldr	r1, [pc, #172]	@ (8014078 <etharp_tmr+0x14c>)
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	440b      	add	r3, r1
 8013fd8:	3314      	adds	r3, #20
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	2b03      	cmp	r3, #3
 8013fde:	d10a      	bne.n	8013ff6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013fe0:	4925      	ldr	r1, [pc, #148]	@ (8014078 <etharp_tmr+0x14c>)
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3314      	adds	r3, #20
 8013ff0:	2204      	movs	r2, #4
 8013ff2:	701a      	strb	r2, [r3, #0]
 8013ff4:	e034      	b.n	8014060 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013ff6:	4920      	ldr	r1, [pc, #128]	@ (8014078 <etharp_tmr+0x14c>)
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	440b      	add	r3, r1
 8014004:	3314      	adds	r3, #20
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b04      	cmp	r3, #4
 801400a:	d10a      	bne.n	8014022 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801400c:	491a      	ldr	r1, [pc, #104]	@ (8014078 <etharp_tmr+0x14c>)
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	4613      	mov	r3, r2
 8014012:	005b      	lsls	r3, r3, #1
 8014014:	4413      	add	r3, r2
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	440b      	add	r3, r1
 801401a:	3314      	adds	r3, #20
 801401c:	2202      	movs	r2, #2
 801401e:	701a      	strb	r2, [r3, #0]
 8014020:	e01e      	b.n	8014060 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014022:	4915      	ldr	r1, [pc, #84]	@ (8014078 <etharp_tmr+0x14c>)
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4613      	mov	r3, r2
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	4413      	add	r3, r2
 801402c:	00db      	lsls	r3, r3, #3
 801402e:	440b      	add	r3, r1
 8014030:	3314      	adds	r3, #20
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2b01      	cmp	r3, #1
 8014036:	d113      	bne.n	8014060 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014038:	490f      	ldr	r1, [pc, #60]	@ (8014078 <etharp_tmr+0x14c>)
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	3308      	adds	r3, #8
 8014048:	6818      	ldr	r0, [r3, #0]
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	4613      	mov	r3, r2
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	4413      	add	r3, r2
 8014052:	00db      	lsls	r3, r3, #3
 8014054:	4a08      	ldr	r2, [pc, #32]	@ (8014078 <etharp_tmr+0x14c>)
 8014056:	4413      	add	r3, r2
 8014058:	3304      	adds	r3, #4
 801405a:	4619      	mov	r1, r3
 801405c:	f000 fe6e 	bl	8014d3c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	3301      	adds	r3, #1
 8014064:	607b      	str	r3, [r7, #4]
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b09      	cmp	r3, #9
 801406a:	f77f af65 	ble.w	8013f38 <etharp_tmr+0xc>
      }
    }
  }
}
 801406e:	bf00      	nop
 8014070:	bf00      	nop
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	2000d900 	.word	0x2000d900

0801407c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b08a      	sub	sp, #40	@ 0x28
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	460b      	mov	r3, r1
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801408a:	230a      	movs	r3, #10
 801408c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801408e:	230a      	movs	r3, #10
 8014090:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014092:	230a      	movs	r3, #10
 8014094:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801409a:	230a      	movs	r3, #10
 801409c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801409e:	2300      	movs	r3, #0
 80140a0:	83bb      	strh	r3, [r7, #28]
 80140a2:	2300      	movs	r3, #0
 80140a4:	837b      	strh	r3, [r7, #26]
 80140a6:	2300      	movs	r3, #0
 80140a8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140aa:	2300      	movs	r3, #0
 80140ac:	843b      	strh	r3, [r7, #32]
 80140ae:	e0ae      	b.n	801420e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80140b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140b4:	49a6      	ldr	r1, [pc, #664]	@ (8014350 <etharp_find_entry+0x2d4>)
 80140b6:	4613      	mov	r3, r2
 80140b8:	005b      	lsls	r3, r3, #1
 80140ba:	4413      	add	r3, r2
 80140bc:	00db      	lsls	r3, r3, #3
 80140be:	440b      	add	r3, r1
 80140c0:	3314      	adds	r3, #20
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80140c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80140ca:	2b0a      	cmp	r3, #10
 80140cc:	d105      	bne.n	80140da <etharp_find_entry+0x5e>
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d102      	bne.n	80140da <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80140d4:	8c3b      	ldrh	r3, [r7, #32]
 80140d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80140d8:	e095      	b.n	8014206 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80140da:	7dfb      	ldrb	r3, [r7, #23]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 8092 	beq.w	8014206 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80140e2:	7dfb      	ldrb	r3, [r7, #23]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d009      	beq.n	80140fc <etharp_find_entry+0x80>
 80140e8:	7dfb      	ldrb	r3, [r7, #23]
 80140ea:	2b01      	cmp	r3, #1
 80140ec:	d806      	bhi.n	80140fc <etharp_find_entry+0x80>
 80140ee:	4b99      	ldr	r3, [pc, #612]	@ (8014354 <etharp_find_entry+0x2d8>)
 80140f0:	f240 1223 	movw	r2, #291	@ 0x123
 80140f4:	4998      	ldr	r1, [pc, #608]	@ (8014358 <etharp_find_entry+0x2dc>)
 80140f6:	4899      	ldr	r0, [pc, #612]	@ (801435c <etharp_find_entry+0x2e0>)
 80140f8:	f002 fe0c 	bl	8016d14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d020      	beq.n	8014144 <etharp_find_entry+0xc8>
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	6819      	ldr	r1, [r3, #0]
 8014106:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410a:	4891      	ldr	r0, [pc, #580]	@ (8014350 <etharp_find_entry+0x2d4>)
 801410c:	4613      	mov	r3, r2
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	4413      	add	r3, r2
 8014112:	00db      	lsls	r3, r3, #3
 8014114:	4403      	add	r3, r0
 8014116:	3304      	adds	r3, #4
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4299      	cmp	r1, r3
 801411c:	d112      	bne.n	8014144 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00c      	beq.n	801413e <etharp_find_entry+0xc2>
 8014124:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014128:	4989      	ldr	r1, [pc, #548]	@ (8014350 <etharp_find_entry+0x2d4>)
 801412a:	4613      	mov	r3, r2
 801412c:	005b      	lsls	r3, r3, #1
 801412e:	4413      	add	r3, r2
 8014130:	00db      	lsls	r3, r3, #3
 8014132:	440b      	add	r3, r1
 8014134:	3308      	adds	r3, #8
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	429a      	cmp	r2, r3
 801413c:	d102      	bne.n	8014144 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801413e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014142:	e100      	b.n	8014346 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014144:	7dfb      	ldrb	r3, [r7, #23]
 8014146:	2b01      	cmp	r3, #1
 8014148:	d140      	bne.n	80141cc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801414a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801414e:	4980      	ldr	r1, [pc, #512]	@ (8014350 <etharp_find_entry+0x2d4>)
 8014150:	4613      	mov	r3, r2
 8014152:	005b      	lsls	r3, r3, #1
 8014154:	4413      	add	r3, r2
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	440b      	add	r3, r1
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d01a      	beq.n	8014196 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014160:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014164:	497a      	ldr	r1, [pc, #488]	@ (8014350 <etharp_find_entry+0x2d4>)
 8014166:	4613      	mov	r3, r2
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	4413      	add	r3, r2
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	440b      	add	r3, r1
 8014170:	3312      	adds	r3, #18
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	8bba      	ldrh	r2, [r7, #28]
 8014176:	429a      	cmp	r2, r3
 8014178:	d845      	bhi.n	8014206 <etharp_find_entry+0x18a>
            old_queue = i;
 801417a:	8c3b      	ldrh	r3, [r7, #32]
 801417c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801417e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014182:	4973      	ldr	r1, [pc, #460]	@ (8014350 <etharp_find_entry+0x2d4>)
 8014184:	4613      	mov	r3, r2
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	4413      	add	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	440b      	add	r3, r1
 801418e:	3312      	adds	r3, #18
 8014190:	881b      	ldrh	r3, [r3, #0]
 8014192:	83bb      	strh	r3, [r7, #28]
 8014194:	e037      	b.n	8014206 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801419a:	496d      	ldr	r1, [pc, #436]	@ (8014350 <etharp_find_entry+0x2d4>)
 801419c:	4613      	mov	r3, r2
 801419e:	005b      	lsls	r3, r3, #1
 80141a0:	4413      	add	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	440b      	add	r3, r1
 80141a6:	3312      	adds	r3, #18
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	8b7a      	ldrh	r2, [r7, #26]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d82a      	bhi.n	8014206 <etharp_find_entry+0x18a>
            old_pending = i;
 80141b0:	8c3b      	ldrh	r3, [r7, #32]
 80141b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80141b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b8:	4965      	ldr	r1, [pc, #404]	@ (8014350 <etharp_find_entry+0x2d4>)
 80141ba:	4613      	mov	r3, r2
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	4413      	add	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	440b      	add	r3, r1
 80141c4:	3312      	adds	r3, #18
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	837b      	strh	r3, [r7, #26]
 80141ca:	e01c      	b.n	8014206 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80141cc:	7dfb      	ldrb	r3, [r7, #23]
 80141ce:	2b01      	cmp	r3, #1
 80141d0:	d919      	bls.n	8014206 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80141d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d6:	495e      	ldr	r1, [pc, #376]	@ (8014350 <etharp_find_entry+0x2d4>)
 80141d8:	4613      	mov	r3, r2
 80141da:	005b      	lsls	r3, r3, #1
 80141dc:	4413      	add	r3, r2
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	440b      	add	r3, r1
 80141e2:	3312      	adds	r3, #18
 80141e4:	881b      	ldrh	r3, [r3, #0]
 80141e6:	8b3a      	ldrh	r2, [r7, #24]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d80c      	bhi.n	8014206 <etharp_find_entry+0x18a>
            old_stable = i;
 80141ec:	8c3b      	ldrh	r3, [r7, #32]
 80141ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80141f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f4:	4956      	ldr	r1, [pc, #344]	@ (8014350 <etharp_find_entry+0x2d4>)
 80141f6:	4613      	mov	r3, r2
 80141f8:	005b      	lsls	r3, r3, #1
 80141fa:	4413      	add	r3, r2
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	440b      	add	r3, r1
 8014200:	3312      	adds	r3, #18
 8014202:	881b      	ldrh	r3, [r3, #0]
 8014204:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014206:	8c3b      	ldrh	r3, [r7, #32]
 8014208:	3301      	adds	r3, #1
 801420a:	b29b      	uxth	r3, r3
 801420c:	843b      	strh	r3, [r7, #32]
 801420e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014212:	2b09      	cmp	r3, #9
 8014214:	f77f af4c 	ble.w	80140b0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014218:	7afb      	ldrb	r3, [r7, #11]
 801421a:	f003 0302 	and.w	r3, r3, #2
 801421e:	2b00      	cmp	r3, #0
 8014220:	d108      	bne.n	8014234 <etharp_find_entry+0x1b8>
 8014222:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014226:	2b0a      	cmp	r3, #10
 8014228:	d107      	bne.n	801423a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801422a:	7afb      	ldrb	r3, [r7, #11]
 801422c:	f003 0301 	and.w	r3, r3, #1
 8014230:	2b00      	cmp	r3, #0
 8014232:	d102      	bne.n	801423a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014238:	e085      	b.n	8014346 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801423a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801423e:	2b09      	cmp	r3, #9
 8014240:	dc02      	bgt.n	8014248 <etharp_find_entry+0x1cc>
    i = empty;
 8014242:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014244:	843b      	strh	r3, [r7, #32]
 8014246:	e039      	b.n	80142bc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014248:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801424c:	2b09      	cmp	r3, #9
 801424e:	dc14      	bgt.n	801427a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014250:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014252:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014258:	493d      	ldr	r1, [pc, #244]	@ (8014350 <etharp_find_entry+0x2d4>)
 801425a:	4613      	mov	r3, r2
 801425c:	005b      	lsls	r3, r3, #1
 801425e:	4413      	add	r3, r2
 8014260:	00db      	lsls	r3, r3, #3
 8014262:	440b      	add	r3, r1
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d018      	beq.n	801429c <etharp_find_entry+0x220>
 801426a:	4b3a      	ldr	r3, [pc, #232]	@ (8014354 <etharp_find_entry+0x2d8>)
 801426c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014270:	493b      	ldr	r1, [pc, #236]	@ (8014360 <etharp_find_entry+0x2e4>)
 8014272:	483a      	ldr	r0, [pc, #232]	@ (801435c <etharp_find_entry+0x2e0>)
 8014274:	f002 fd4e 	bl	8016d14 <iprintf>
 8014278:	e010      	b.n	801429c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801427a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801427e:	2b09      	cmp	r3, #9
 8014280:	dc02      	bgt.n	8014288 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014282:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014284:	843b      	strh	r3, [r7, #32]
 8014286:	e009      	b.n	801429c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014288:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801428c:	2b09      	cmp	r3, #9
 801428e:	dc02      	bgt.n	8014296 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014290:	8bfb      	ldrh	r3, [r7, #30]
 8014292:	843b      	strh	r3, [r7, #32]
 8014294:	e002      	b.n	801429c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801429a:	e054      	b.n	8014346 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801429c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142a0:	2b09      	cmp	r3, #9
 80142a2:	dd06      	ble.n	80142b2 <etharp_find_entry+0x236>
 80142a4:	4b2b      	ldr	r3, [pc, #172]	@ (8014354 <etharp_find_entry+0x2d8>)
 80142a6:	f240 127f 	movw	r2, #383	@ 0x17f
 80142aa:	492e      	ldr	r1, [pc, #184]	@ (8014364 <etharp_find_entry+0x2e8>)
 80142ac:	482b      	ldr	r0, [pc, #172]	@ (801435c <etharp_find_entry+0x2e0>)
 80142ae:	f002 fd31 	bl	8016d14 <iprintf>
    etharp_free_entry(i);
 80142b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7ff fe06 	bl	8013ec8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80142bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142c0:	2b09      	cmp	r3, #9
 80142c2:	dd06      	ble.n	80142d2 <etharp_find_entry+0x256>
 80142c4:	4b23      	ldr	r3, [pc, #140]	@ (8014354 <etharp_find_entry+0x2d8>)
 80142c6:	f240 1283 	movw	r2, #387	@ 0x183
 80142ca:	4926      	ldr	r1, [pc, #152]	@ (8014364 <etharp_find_entry+0x2e8>)
 80142cc:	4823      	ldr	r0, [pc, #140]	@ (801435c <etharp_find_entry+0x2e0>)
 80142ce:	f002 fd21 	bl	8016d14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80142d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d6:	491e      	ldr	r1, [pc, #120]	@ (8014350 <etharp_find_entry+0x2d4>)
 80142d8:	4613      	mov	r3, r2
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	4413      	add	r3, r2
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	440b      	add	r3, r1
 80142e2:	3314      	adds	r3, #20
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d006      	beq.n	80142f8 <etharp_find_entry+0x27c>
 80142ea:	4b1a      	ldr	r3, [pc, #104]	@ (8014354 <etharp_find_entry+0x2d8>)
 80142ec:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80142f0:	491d      	ldr	r1, [pc, #116]	@ (8014368 <etharp_find_entry+0x2ec>)
 80142f2:	481a      	ldr	r0, [pc, #104]	@ (801435c <etharp_find_entry+0x2e0>)
 80142f4:	f002 fd0e 	bl	8016d14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00b      	beq.n	8014316 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80142fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	6819      	ldr	r1, [r3, #0]
 8014306:	4812      	ldr	r0, [pc, #72]	@ (8014350 <etharp_find_entry+0x2d4>)
 8014308:	4613      	mov	r3, r2
 801430a:	005b      	lsls	r3, r3, #1
 801430c:	4413      	add	r3, r2
 801430e:	00db      	lsls	r3, r3, #3
 8014310:	4403      	add	r3, r0
 8014312:	3304      	adds	r3, #4
 8014314:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014316:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801431a:	490d      	ldr	r1, [pc, #52]	@ (8014350 <etharp_find_entry+0x2d4>)
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	440b      	add	r3, r1
 8014326:	3312      	adds	r3, #18
 8014328:	2200      	movs	r2, #0
 801432a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801432c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014330:	4907      	ldr	r1, [pc, #28]	@ (8014350 <etharp_find_entry+0x2d4>)
 8014332:	4613      	mov	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	4413      	add	r3, r2
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	440b      	add	r3, r1
 801433c:	3308      	adds	r3, #8
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014342:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014346:	4618      	mov	r0, r3
 8014348:	3728      	adds	r7, #40	@ 0x28
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	2000d900 	.word	0x2000d900
 8014354:	0801b43c 	.word	0x0801b43c
 8014358:	0801b474 	.word	0x0801b474
 801435c:	0801b4b4 	.word	0x0801b4b4
 8014360:	0801b4dc 	.word	0x0801b4dc
 8014364:	0801b4f4 	.word	0x0801b4f4
 8014368:	0801b508 	.word	0x0801b508

0801436c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b088      	sub	sp, #32
 8014370:	af02      	add	r7, sp, #8
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
 8014378:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014380:	2b06      	cmp	r3, #6
 8014382:	d006      	beq.n	8014392 <etharp_update_arp_entry+0x26>
 8014384:	4b48      	ldr	r3, [pc, #288]	@ (80144a8 <etharp_update_arp_entry+0x13c>)
 8014386:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801438a:	4948      	ldr	r1, [pc, #288]	@ (80144ac <etharp_update_arp_entry+0x140>)
 801438c:	4848      	ldr	r0, [pc, #288]	@ (80144b0 <etharp_update_arp_entry+0x144>)
 801438e:	f002 fcc1 	bl	8016d14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d012      	beq.n	80143be <etharp_update_arp_entry+0x52>
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d00e      	beq.n	80143be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	68f9      	ldr	r1, [r7, #12]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f001 f8fe 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 80143ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d105      	bne.n	80143be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80143ba:	2be0      	cmp	r3, #224	@ 0xe0
 80143bc:	d102      	bne.n	80143c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80143be:	f06f 030f 	mvn.w	r3, #15
 80143c2:	e06c      	b.n	801449e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80143c4:	78fb      	ldrb	r3, [r7, #3]
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	4619      	mov	r1, r3
 80143ca:	68b8      	ldr	r0, [r7, #8]
 80143cc:	f7ff fe56 	bl	801407c <etharp_find_entry>
 80143d0:	4603      	mov	r3, r0
 80143d2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80143d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	da02      	bge.n	80143e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80143dc:	8afb      	ldrh	r3, [r7, #22]
 80143de:	b25b      	sxtb	r3, r3
 80143e0:	e05d      	b.n	801449e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80143e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143e6:	4933      	ldr	r1, [pc, #204]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	440b      	add	r3, r1
 80143f2:	3314      	adds	r3, #20
 80143f4:	2202      	movs	r2, #2
 80143f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80143f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143fc:	492d      	ldr	r1, [pc, #180]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 80143fe:	4613      	mov	r3, r2
 8014400:	005b      	lsls	r3, r3, #1
 8014402:	4413      	add	r3, r2
 8014404:	00db      	lsls	r3, r3, #3
 8014406:	440b      	add	r3, r1
 8014408:	3308      	adds	r3, #8
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801440e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014412:	4613      	mov	r3, r2
 8014414:	005b      	lsls	r3, r3, #1
 8014416:	4413      	add	r3, r2
 8014418:	00db      	lsls	r3, r3, #3
 801441a:	3308      	adds	r3, #8
 801441c:	4a25      	ldr	r2, [pc, #148]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 801441e:	4413      	add	r3, r2
 8014420:	3304      	adds	r3, #4
 8014422:	2206      	movs	r2, #6
 8014424:	6879      	ldr	r1, [r7, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	f002 fd57 	bl	8016eda <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801442c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014430:	4920      	ldr	r1, [pc, #128]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 8014432:	4613      	mov	r3, r2
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	4413      	add	r3, r2
 8014438:	00db      	lsls	r3, r3, #3
 801443a:	440b      	add	r3, r1
 801443c:	3312      	adds	r3, #18
 801443e:	2200      	movs	r2, #0
 8014440:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014446:	491b      	ldr	r1, [pc, #108]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 8014448:	4613      	mov	r3, r2
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	4413      	add	r3, r2
 801444e:	00db      	lsls	r3, r3, #3
 8014450:	440b      	add	r3, r1
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d021      	beq.n	801449c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014458:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801445c:	4915      	ldr	r1, [pc, #84]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 801445e:	4613      	mov	r3, r2
 8014460:	005b      	lsls	r3, r3, #1
 8014462:	4413      	add	r3, r2
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	440b      	add	r3, r1
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801446c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014470:	4910      	ldr	r1, [pc, #64]	@ (80144b4 <etharp_update_arp_entry+0x148>)
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	440b      	add	r3, r1
 801447c:	2200      	movs	r2, #0
 801447e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014486:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6939      	ldr	r1, [r7, #16]
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f002 f8c1 	bl	8016618 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014496:	6938      	ldr	r0, [r7, #16]
 8014498:	f7f8 fb3a 	bl	800cb10 <pbuf_free>
  }
  return ERR_OK;
 801449c:	2300      	movs	r3, #0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3718      	adds	r7, #24
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	0801b43c 	.word	0x0801b43c
 80144ac:	0801b534 	.word	0x0801b534
 80144b0:	0801b4b4 	.word	0x0801b4b4
 80144b4:	2000d900 	.word	0x2000d900

080144b8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]
 80144c4:	e01e      	b.n	8014504 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80144c6:	4913      	ldr	r1, [pc, #76]	@ (8014514 <etharp_cleanup_netif+0x5c>)
 80144c8:	68fa      	ldr	r2, [r7, #12]
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3314      	adds	r3, #20
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80144da:	7afb      	ldrb	r3, [r7, #11]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00e      	beq.n	80144fe <etharp_cleanup_netif+0x46>
 80144e0:	490c      	ldr	r1, [pc, #48]	@ (8014514 <etharp_cleanup_netif+0x5c>)
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	4613      	mov	r3, r2
 80144e6:	005b      	lsls	r3, r3, #1
 80144e8:	4413      	add	r3, r2
 80144ea:	00db      	lsls	r3, r3, #3
 80144ec:	440b      	add	r3, r1
 80144ee:	3308      	adds	r3, #8
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d102      	bne.n	80144fe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	f7ff fce5 	bl	8013ec8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	3301      	adds	r3, #1
 8014502:	60fb      	str	r3, [r7, #12]
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2b09      	cmp	r3, #9
 8014508:	dddd      	ble.n	80144c6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801450a:	bf00      	nop
 801450c:	bf00      	nop
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	2000d900 	.word	0x2000d900

08014518 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014518:	b5b0      	push	{r4, r5, r7, lr}
 801451a:	b08a      	sub	sp, #40	@ 0x28
 801451c:	af04      	add	r7, sp, #16
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d107      	bne.n	8014538 <etharp_input+0x20>
 8014528:	4b3d      	ldr	r3, [pc, #244]	@ (8014620 <etharp_input+0x108>)
 801452a:	f240 228a 	movw	r2, #650	@ 0x28a
 801452e:	493d      	ldr	r1, [pc, #244]	@ (8014624 <etharp_input+0x10c>)
 8014530:	483d      	ldr	r0, [pc, #244]	@ (8014628 <etharp_input+0x110>)
 8014532:	f002 fbef 	bl	8016d14 <iprintf>
 8014536:	e06f      	b.n	8014618 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	881b      	ldrh	r3, [r3, #0]
 8014542:	b29b      	uxth	r3, r3
 8014544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014548:	d10c      	bne.n	8014564 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801454e:	2b06      	cmp	r3, #6
 8014550:	d108      	bne.n	8014564 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014556:	2b04      	cmp	r3, #4
 8014558:	d104      	bne.n	8014564 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	885b      	ldrh	r3, [r3, #2]
 801455e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014560:	2b08      	cmp	r3, #8
 8014562:	d003      	beq.n	801456c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7f8 fad3 	bl	800cb10 <pbuf_free>
    return;
 801456a:	e055      	b.n	8014618 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	330e      	adds	r3, #14
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	3318      	adds	r3, #24
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	3304      	adds	r3, #4
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d102      	bne.n	801458c <etharp_input+0x74>
    for_us = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	75fb      	strb	r3, [r7, #23]
 801458a:	e009      	b.n	80145a0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801458c:	68ba      	ldr	r2, [r7, #8]
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	3304      	adds	r3, #4
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	429a      	cmp	r2, r3
 8014596:	bf0c      	ite	eq
 8014598:	2301      	moveq	r3, #1
 801459a:	2300      	movne	r3, #0
 801459c:	b2db      	uxtb	r3, r3
 801459e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	f103 0208 	add.w	r2, r3, #8
 80145a6:	7dfb      	ldrb	r3, [r7, #23]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d001      	beq.n	80145b0 <etharp_input+0x98>
 80145ac:	2301      	movs	r3, #1
 80145ae:	e000      	b.n	80145b2 <etharp_input+0x9a>
 80145b0:	2302      	movs	r3, #2
 80145b2:	f107 010c 	add.w	r1, r7, #12
 80145b6:	6838      	ldr	r0, [r7, #0]
 80145b8:	f7ff fed8 	bl	801436c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	88db      	ldrh	r3, [r3, #6]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80145c6:	d003      	beq.n	80145d0 <etharp_input+0xb8>
 80145c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145cc:	d01e      	beq.n	801460c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80145ce:	e020      	b.n	8014612 <etharp_input+0xfa>
      if (for_us) {
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d01c      	beq.n	8014610 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80145ec:	693a      	ldr	r2, [r7, #16]
 80145ee:	3208      	adds	r2, #8
        etharp_raw(netif,
 80145f0:	2102      	movs	r1, #2
 80145f2:	9103      	str	r1, [sp, #12]
 80145f4:	f107 010c 	add.w	r1, r7, #12
 80145f8:	9102      	str	r1, [sp, #8]
 80145fa:	9201      	str	r2, [sp, #4]
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	462b      	mov	r3, r5
 8014600:	4622      	mov	r2, r4
 8014602:	4601      	mov	r1, r0
 8014604:	6838      	ldr	r0, [r7, #0]
 8014606:	f000 faeb 	bl	8014be0 <etharp_raw>
      break;
 801460a:	e001      	b.n	8014610 <etharp_input+0xf8>
      break;
 801460c:	bf00      	nop
 801460e:	e000      	b.n	8014612 <etharp_input+0xfa>
      break;
 8014610:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f7f8 fa7c 	bl	800cb10 <pbuf_free>
}
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bdb0      	pop	{r4, r5, r7, pc}
 801461e:	bf00      	nop
 8014620:	0801b43c 	.word	0x0801b43c
 8014624:	0801b58c 	.word	0x0801b58c
 8014628:	0801b4b4 	.word	0x0801b4b4

0801462c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b086      	sub	sp, #24
 8014630:	af02      	add	r7, sp, #8
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	4613      	mov	r3, r2
 8014638:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801463a:	79fa      	ldrb	r2, [r7, #7]
 801463c:	4944      	ldr	r1, [pc, #272]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	440b      	add	r3, r1
 8014648:	3314      	adds	r3, #20
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	2b01      	cmp	r3, #1
 801464e:	d806      	bhi.n	801465e <etharp_output_to_arp_index+0x32>
 8014650:	4b40      	ldr	r3, [pc, #256]	@ (8014754 <etharp_output_to_arp_index+0x128>)
 8014652:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014656:	4940      	ldr	r1, [pc, #256]	@ (8014758 <etharp_output_to_arp_index+0x12c>)
 8014658:	4840      	ldr	r0, [pc, #256]	@ (801475c <etharp_output_to_arp_index+0x130>)
 801465a:	f002 fb5b 	bl	8016d14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801465e:	79fa      	ldrb	r2, [r7, #7]
 8014660:	493b      	ldr	r1, [pc, #236]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 8014662:	4613      	mov	r3, r2
 8014664:	005b      	lsls	r3, r3, #1
 8014666:	4413      	add	r3, r2
 8014668:	00db      	lsls	r3, r3, #3
 801466a:	440b      	add	r3, r1
 801466c:	3314      	adds	r3, #20
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	2b02      	cmp	r3, #2
 8014672:	d153      	bne.n	801471c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014674:	79fa      	ldrb	r2, [r7, #7]
 8014676:	4936      	ldr	r1, [pc, #216]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 8014678:	4613      	mov	r3, r2
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	4413      	add	r3, r2
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	440b      	add	r3, r1
 8014682:	3312      	adds	r3, #18
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801468a:	d919      	bls.n	80146c0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801468c:	79fa      	ldrb	r2, [r7, #7]
 801468e:	4613      	mov	r3, r2
 8014690:	005b      	lsls	r3, r3, #1
 8014692:	4413      	add	r3, r2
 8014694:	00db      	lsls	r3, r3, #3
 8014696:	4a2e      	ldr	r2, [pc, #184]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 8014698:	4413      	add	r3, r2
 801469a:	3304      	adds	r3, #4
 801469c:	4619      	mov	r1, r3
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	f000 fb4c 	bl	8014d3c <etharp_request>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d138      	bne.n	801471c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146aa:	79fa      	ldrb	r2, [r7, #7]
 80146ac:	4928      	ldr	r1, [pc, #160]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 80146ae:	4613      	mov	r3, r2
 80146b0:	005b      	lsls	r3, r3, #1
 80146b2:	4413      	add	r3, r2
 80146b4:	00db      	lsls	r3, r3, #3
 80146b6:	440b      	add	r3, r1
 80146b8:	3314      	adds	r3, #20
 80146ba:	2203      	movs	r2, #3
 80146bc:	701a      	strb	r2, [r3, #0]
 80146be:	e02d      	b.n	801471c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80146c0:	79fa      	ldrb	r2, [r7, #7]
 80146c2:	4923      	ldr	r1, [pc, #140]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 80146c4:	4613      	mov	r3, r2
 80146c6:	005b      	lsls	r3, r3, #1
 80146c8:	4413      	add	r3, r2
 80146ca:	00db      	lsls	r3, r3, #3
 80146cc:	440b      	add	r3, r1
 80146ce:	3312      	adds	r3, #18
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80146d6:	d321      	bcc.n	801471c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80146d8:	79fa      	ldrb	r2, [r7, #7]
 80146da:	4613      	mov	r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	4413      	add	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	4a1b      	ldr	r2, [pc, #108]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 80146e4:	4413      	add	r3, r2
 80146e6:	1d19      	adds	r1, r3, #4
 80146e8:	79fa      	ldrb	r2, [r7, #7]
 80146ea:	4613      	mov	r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	3308      	adds	r3, #8
 80146f4:	4a16      	ldr	r2, [pc, #88]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 80146f6:	4413      	add	r3, r2
 80146f8:	3304      	adds	r3, #4
 80146fa:	461a      	mov	r2, r3
 80146fc:	68f8      	ldr	r0, [r7, #12]
 80146fe:	f000 fafb 	bl	8014cf8 <etharp_request_dst>
 8014702:	4603      	mov	r3, r0
 8014704:	2b00      	cmp	r3, #0
 8014706:	d109      	bne.n	801471c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014708:	79fa      	ldrb	r2, [r7, #7]
 801470a:	4911      	ldr	r1, [pc, #68]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 801470c:	4613      	mov	r3, r2
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	4413      	add	r3, r2
 8014712:	00db      	lsls	r3, r3, #3
 8014714:	440b      	add	r3, r1
 8014716:	3314      	adds	r3, #20
 8014718:	2203      	movs	r2, #3
 801471a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014722:	79fa      	ldrb	r2, [r7, #7]
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	3308      	adds	r3, #8
 801472e:	4a08      	ldr	r2, [pc, #32]	@ (8014750 <etharp_output_to_arp_index+0x124>)
 8014730:	4413      	add	r3, r2
 8014732:	3304      	adds	r3, #4
 8014734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014738:	9200      	str	r2, [sp, #0]
 801473a:	460a      	mov	r2, r1
 801473c:	68b9      	ldr	r1, [r7, #8]
 801473e:	68f8      	ldr	r0, [r7, #12]
 8014740:	f001 ff6a 	bl	8016618 <ethernet_output>
 8014744:	4603      	mov	r3, r0
}
 8014746:	4618      	mov	r0, r3
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	2000d900 	.word	0x2000d900
 8014754:	0801b43c 	.word	0x0801b43c
 8014758:	0801b5ac 	.word	0x0801b5ac
 801475c:	0801b4b4 	.word	0x0801b4b4

08014760 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b08a      	sub	sp, #40	@ 0x28
 8014764:	af02      	add	r7, sp, #8
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d106      	bne.n	8014784 <etharp_output+0x24>
 8014776:	4b73      	ldr	r3, [pc, #460]	@ (8014944 <etharp_output+0x1e4>)
 8014778:	f240 321e 	movw	r2, #798	@ 0x31e
 801477c:	4972      	ldr	r1, [pc, #456]	@ (8014948 <etharp_output+0x1e8>)
 801477e:	4873      	ldr	r0, [pc, #460]	@ (801494c <etharp_output+0x1ec>)
 8014780:	f002 fac8 	bl	8016d14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d106      	bne.n	8014798 <etharp_output+0x38>
 801478a:	4b6e      	ldr	r3, [pc, #440]	@ (8014944 <etharp_output+0x1e4>)
 801478c:	f240 321f 	movw	r2, #799	@ 0x31f
 8014790:	496f      	ldr	r1, [pc, #444]	@ (8014950 <etharp_output+0x1f0>)
 8014792:	486e      	ldr	r0, [pc, #440]	@ (801494c <etharp_output+0x1ec>)
 8014794:	f002 fabe 	bl	8016d14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <etharp_output+0x4c>
 801479e:	4b69      	ldr	r3, [pc, #420]	@ (8014944 <etharp_output+0x1e4>)
 80147a0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80147a4:	496b      	ldr	r1, [pc, #428]	@ (8014954 <etharp_output+0x1f4>)
 80147a6:	4869      	ldr	r0, [pc, #420]	@ (801494c <etharp_output+0x1ec>)
 80147a8:	f002 fab4 	bl	8016d14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	68f9      	ldr	r1, [r7, #12]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f000 fef8 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d002      	beq.n	80147c4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80147be:	4b66      	ldr	r3, [pc, #408]	@ (8014958 <etharp_output+0x1f8>)
 80147c0:	61fb      	str	r3, [r7, #28]
 80147c2:	e0af      	b.n	8014924 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80147cc:	2be0      	cmp	r3, #224	@ 0xe0
 80147ce:	d118      	bne.n	8014802 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80147d0:	2301      	movs	r3, #1
 80147d2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80147d4:	2300      	movs	r3, #0
 80147d6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80147d8:	235e      	movs	r3, #94	@ 0x5e
 80147da:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	3301      	adds	r3, #1
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	3302      	adds	r3, #2
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	3303      	adds	r3, #3
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80147fa:	f107 0310 	add.w	r3, r7, #16
 80147fe:	61fb      	str	r3, [r7, #28]
 8014800:	e090      	b.n	8014924 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	3304      	adds	r3, #4
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	405a      	eors	r2, r3
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	3308      	adds	r3, #8
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4013      	ands	r3, r2
 8014816:	2b00      	cmp	r3, #0
 8014818:	d012      	beq.n	8014840 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014820:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014824:	4293      	cmp	r3, r2
 8014826:	d00b      	beq.n	8014840 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	330c      	adds	r3, #12
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d003      	beq.n	801483a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	330c      	adds	r3, #12
 8014836:	61bb      	str	r3, [r7, #24]
 8014838:	e002      	b.n	8014840 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801483a:	f06f 0303 	mvn.w	r3, #3
 801483e:	e07d      	b.n	801493c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014840:	4b46      	ldr	r3, [pc, #280]	@ (801495c <etharp_output+0x1fc>)
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	4619      	mov	r1, r3
 8014846:	4a46      	ldr	r2, [pc, #280]	@ (8014960 <etharp_output+0x200>)
 8014848:	460b      	mov	r3, r1
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	440b      	add	r3, r1
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	4413      	add	r3, r2
 8014852:	3314      	adds	r3, #20
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d925      	bls.n	80148a6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801485a:	4b40      	ldr	r3, [pc, #256]	@ (801495c <etharp_output+0x1fc>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	4619      	mov	r1, r3
 8014860:	4a3f      	ldr	r2, [pc, #252]	@ (8014960 <etharp_output+0x200>)
 8014862:	460b      	mov	r3, r1
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	440b      	add	r3, r1
 8014868:	00db      	lsls	r3, r3, #3
 801486a:	4413      	add	r3, r2
 801486c:	3308      	adds	r3, #8
 801486e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014870:	68fa      	ldr	r2, [r7, #12]
 8014872:	429a      	cmp	r2, r3
 8014874:	d117      	bne.n	80148a6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	4b38      	ldr	r3, [pc, #224]	@ (801495c <etharp_output+0x1fc>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	4618      	mov	r0, r3
 8014880:	4937      	ldr	r1, [pc, #220]	@ (8014960 <etharp_output+0x200>)
 8014882:	4603      	mov	r3, r0
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	4403      	add	r3, r0
 8014888:	00db      	lsls	r3, r3, #3
 801488a:	440b      	add	r3, r1
 801488c:	3304      	adds	r3, #4
 801488e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014890:	429a      	cmp	r2, r3
 8014892:	d108      	bne.n	80148a6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014894:	4b31      	ldr	r3, [pc, #196]	@ (801495c <etharp_output+0x1fc>)
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	461a      	mov	r2, r3
 801489a:	68b9      	ldr	r1, [r7, #8]
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f7ff fec5 	bl	801462c <etharp_output_to_arp_index>
 80148a2:	4603      	mov	r3, r0
 80148a4:	e04a      	b.n	801493c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148a6:	2300      	movs	r3, #0
 80148a8:	75fb      	strb	r3, [r7, #23]
 80148aa:	e031      	b.n	8014910 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80148ac:	7dfa      	ldrb	r2, [r7, #23]
 80148ae:	492c      	ldr	r1, [pc, #176]	@ (8014960 <etharp_output+0x200>)
 80148b0:	4613      	mov	r3, r2
 80148b2:	005b      	lsls	r3, r3, #1
 80148b4:	4413      	add	r3, r2
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	440b      	add	r3, r1
 80148ba:	3314      	adds	r3, #20
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d923      	bls.n	801490a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80148c2:	7dfa      	ldrb	r2, [r7, #23]
 80148c4:	4926      	ldr	r1, [pc, #152]	@ (8014960 <etharp_output+0x200>)
 80148c6:	4613      	mov	r3, r2
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	4413      	add	r3, r2
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	440b      	add	r3, r1
 80148d0:	3308      	adds	r3, #8
 80148d2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80148d4:	68fa      	ldr	r2, [r7, #12]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d117      	bne.n	801490a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	6819      	ldr	r1, [r3, #0]
 80148de:	7dfa      	ldrb	r2, [r7, #23]
 80148e0:	481f      	ldr	r0, [pc, #124]	@ (8014960 <etharp_output+0x200>)
 80148e2:	4613      	mov	r3, r2
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	4413      	add	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	4403      	add	r3, r0
 80148ec:	3304      	adds	r3, #4
 80148ee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80148f0:	4299      	cmp	r1, r3
 80148f2:	d10a      	bne.n	801490a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80148f4:	4a19      	ldr	r2, [pc, #100]	@ (801495c <etharp_output+0x1fc>)
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
 80148f8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80148fa:	7dfb      	ldrb	r3, [r7, #23]
 80148fc:	461a      	mov	r2, r3
 80148fe:	68b9      	ldr	r1, [r7, #8]
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	f7ff fe93 	bl	801462c <etharp_output_to_arp_index>
 8014906:	4603      	mov	r3, r0
 8014908:	e018      	b.n	801493c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801490a:	7dfb      	ldrb	r3, [r7, #23]
 801490c:	3301      	adds	r3, #1
 801490e:	75fb      	strb	r3, [r7, #23]
 8014910:	7dfb      	ldrb	r3, [r7, #23]
 8014912:	2b09      	cmp	r3, #9
 8014914:	d9ca      	bls.n	80148ac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014916:	68ba      	ldr	r2, [r7, #8]
 8014918:	69b9      	ldr	r1, [r7, #24]
 801491a:	68f8      	ldr	r0, [r7, #12]
 801491c:	f000 f822 	bl	8014964 <etharp_query>
 8014920:	4603      	mov	r3, r0
 8014922:	e00b      	b.n	801493c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801492a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	68b9      	ldr	r1, [r7, #8]
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f001 fe6f 	bl	8016618 <ethernet_output>
 801493a:	4603      	mov	r3, r0
}
 801493c:	4618      	mov	r0, r3
 801493e:	3720      	adds	r7, #32
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	0801b43c 	.word	0x0801b43c
 8014948:	0801b58c 	.word	0x0801b58c
 801494c:	0801b4b4 	.word	0x0801b4b4
 8014950:	0801b5dc 	.word	0x0801b5dc
 8014954:	0801b57c 	.word	0x0801b57c
 8014958:	0801bcf0 	.word	0x0801bcf0
 801495c:	2000d9f0 	.word	0x2000d9f0
 8014960:	2000d900 	.word	0x2000d900

08014964 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b08c      	sub	sp, #48	@ 0x30
 8014968:	af02      	add	r7, sp, #8
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	3326      	adds	r3, #38	@ 0x26
 8014974:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014976:	23ff      	movs	r3, #255	@ 0xff
 8014978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	68f9      	ldr	r1, [r7, #12]
 8014986:	4618      	mov	r0, r3
 8014988:	f000 fe0e 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d10c      	bne.n	80149ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801499a:	2be0      	cmp	r3, #224	@ 0xe0
 801499c:	d006      	beq.n	80149ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d003      	beq.n	80149ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d102      	bne.n	80149b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149ac:	f06f 030f 	mvn.w	r3, #15
 80149b0:	e101      	b.n	8014bb6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	2101      	movs	r1, #1
 80149b6:	68b8      	ldr	r0, [r7, #8]
 80149b8:	f7ff fb60 	bl	801407c <etharp_find_entry>
 80149bc:	4603      	mov	r3, r0
 80149be:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80149c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	da02      	bge.n	80149ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80149c8:	8a7b      	ldrh	r3, [r7, #18]
 80149ca:	b25b      	sxtb	r3, r3
 80149cc:	e0f3      	b.n	8014bb6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80149ce:	8a7b      	ldrh	r3, [r7, #18]
 80149d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80149d2:	d906      	bls.n	80149e2 <etharp_query+0x7e>
 80149d4:	4b7a      	ldr	r3, [pc, #488]	@ (8014bc0 <etharp_query+0x25c>)
 80149d6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80149da:	497a      	ldr	r1, [pc, #488]	@ (8014bc4 <etharp_query+0x260>)
 80149dc:	487a      	ldr	r0, [pc, #488]	@ (8014bc8 <etharp_query+0x264>)
 80149de:	f002 f999 	bl	8016d14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80149e2:	8a7b      	ldrh	r3, [r7, #18]
 80149e4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80149e6:	7c7a      	ldrb	r2, [r7, #17]
 80149e8:	4978      	ldr	r1, [pc, #480]	@ (8014bcc <etharp_query+0x268>)
 80149ea:	4613      	mov	r3, r2
 80149ec:	005b      	lsls	r3, r3, #1
 80149ee:	4413      	add	r3, r2
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	440b      	add	r3, r1
 80149f4:	3314      	adds	r3, #20
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d115      	bne.n	8014a28 <etharp_query+0xc4>
    is_new_entry = 1;
 80149fc:	2301      	movs	r3, #1
 80149fe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a00:	7c7a      	ldrb	r2, [r7, #17]
 8014a02:	4972      	ldr	r1, [pc, #456]	@ (8014bcc <etharp_query+0x268>)
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	00db      	lsls	r3, r3, #3
 8014a0c:	440b      	add	r3, r1
 8014a0e:	3314      	adds	r3, #20
 8014a10:	2201      	movs	r2, #1
 8014a12:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014a14:	7c7a      	ldrb	r2, [r7, #17]
 8014a16:	496d      	ldr	r1, [pc, #436]	@ (8014bcc <etharp_query+0x268>)
 8014a18:	4613      	mov	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	440b      	add	r3, r1
 8014a22:	3308      	adds	r3, #8
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014a28:	7c7a      	ldrb	r2, [r7, #17]
 8014a2a:	4968      	ldr	r1, [pc, #416]	@ (8014bcc <etharp_query+0x268>)
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	005b      	lsls	r3, r3, #1
 8014a30:	4413      	add	r3, r2
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	440b      	add	r3, r1
 8014a36:	3314      	adds	r3, #20
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	d011      	beq.n	8014a62 <etharp_query+0xfe>
 8014a3e:	7c7a      	ldrb	r2, [r7, #17]
 8014a40:	4962      	ldr	r1, [pc, #392]	@ (8014bcc <etharp_query+0x268>)
 8014a42:	4613      	mov	r3, r2
 8014a44:	005b      	lsls	r3, r3, #1
 8014a46:	4413      	add	r3, r2
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	440b      	add	r3, r1
 8014a4c:	3314      	adds	r3, #20
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	2b01      	cmp	r3, #1
 8014a52:	d806      	bhi.n	8014a62 <etharp_query+0xfe>
 8014a54:	4b5a      	ldr	r3, [pc, #360]	@ (8014bc0 <etharp_query+0x25c>)
 8014a56:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014a5a:	495d      	ldr	r1, [pc, #372]	@ (8014bd0 <etharp_query+0x26c>)
 8014a5c:	485a      	ldr	r0, [pc, #360]	@ (8014bc8 <etharp_query+0x264>)
 8014a5e:	f002 f959 	bl	8016d14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a62:	6a3b      	ldr	r3, [r7, #32]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d102      	bne.n	8014a6e <etharp_query+0x10a>
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d10c      	bne.n	8014a88 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a6e:	68b9      	ldr	r1, [r7, #8]
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f000 f963 	bl	8014d3c <etharp_request>
 8014a76:	4603      	mov	r3, r0
 8014a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d102      	bne.n	8014a88 <etharp_query+0x124>
      return result;
 8014a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014a86:	e096      	b.n	8014bb6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d106      	bne.n	8014a9c <etharp_query+0x138>
 8014a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8014bc0 <etharp_query+0x25c>)
 8014a90:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014a94:	494f      	ldr	r1, [pc, #316]	@ (8014bd4 <etharp_query+0x270>)
 8014a96:	484c      	ldr	r0, [pc, #304]	@ (8014bc8 <etharp_query+0x264>)
 8014a98:	f002 f93c 	bl	8016d14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a9c:	7c7a      	ldrb	r2, [r7, #17]
 8014a9e:	494b      	ldr	r1, [pc, #300]	@ (8014bcc <etharp_query+0x268>)
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	00db      	lsls	r3, r3, #3
 8014aa8:	440b      	add	r3, r1
 8014aaa:	3314      	adds	r3, #20
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	2b01      	cmp	r3, #1
 8014ab0:	d917      	bls.n	8014ae2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014ab2:	4a49      	ldr	r2, [pc, #292]	@ (8014bd8 <etharp_query+0x274>)
 8014ab4:	7c7b      	ldrb	r3, [r7, #17]
 8014ab6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014ab8:	7c7a      	ldrb	r2, [r7, #17]
 8014aba:	4613      	mov	r3, r2
 8014abc:	005b      	lsls	r3, r3, #1
 8014abe:	4413      	add	r3, r2
 8014ac0:	00db      	lsls	r3, r3, #3
 8014ac2:	3308      	adds	r3, #8
 8014ac4:	4a41      	ldr	r2, [pc, #260]	@ (8014bcc <etharp_query+0x268>)
 8014ac6:	4413      	add	r3, r2
 8014ac8:	3304      	adds	r3, #4
 8014aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014ace:	9200      	str	r2, [sp, #0]
 8014ad0:	697a      	ldr	r2, [r7, #20]
 8014ad2:	6879      	ldr	r1, [r7, #4]
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f001 fd9f 	bl	8016618 <ethernet_output>
 8014ada:	4603      	mov	r3, r0
 8014adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ae0:	e067      	b.n	8014bb2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014ae2:	7c7a      	ldrb	r2, [r7, #17]
 8014ae4:	4939      	ldr	r1, [pc, #228]	@ (8014bcc <etharp_query+0x268>)
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	4413      	add	r3, r2
 8014aec:	00db      	lsls	r3, r3, #3
 8014aee:	440b      	add	r3, r1
 8014af0:	3314      	adds	r3, #20
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d15c      	bne.n	8014bb2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014af8:	2300      	movs	r3, #0
 8014afa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b00:	e01c      	b.n	8014b3c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	895a      	ldrh	r2, [r3, #10]
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	891b      	ldrh	r3, [r3, #8]
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d10a      	bne.n	8014b24 <etharp_query+0x1c0>
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d006      	beq.n	8014b24 <etharp_query+0x1c0>
 8014b16:	4b2a      	ldr	r3, [pc, #168]	@ (8014bc0 <etharp_query+0x25c>)
 8014b18:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014b1c:	492f      	ldr	r1, [pc, #188]	@ (8014bdc <etharp_query+0x278>)
 8014b1e:	482a      	ldr	r0, [pc, #168]	@ (8014bc8 <etharp_query+0x264>)
 8014b20:	f002 f8f8 	bl	8016d14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	7b1b      	ldrb	r3, [r3, #12]
 8014b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d002      	beq.n	8014b36 <etharp_query+0x1d2>
        copy_needed = 1;
 8014b30:	2301      	movs	r3, #1
 8014b32:	61bb      	str	r3, [r7, #24]
        break;
 8014b34:	e005      	b.n	8014b42 <etharp_query+0x1de>
      }
      p = p->next;
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b3c:	69fb      	ldr	r3, [r7, #28]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d1df      	bne.n	8014b02 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d007      	beq.n	8014b58 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014b4e:	200e      	movs	r0, #14
 8014b50:	f7f8 fa56 	bl	800d000 <pbuf_clone>
 8014b54:	61f8      	str	r0, [r7, #28]
 8014b56:	e004      	b.n	8014b62 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b5c:	69f8      	ldr	r0, [r7, #28]
 8014b5e:	f7f8 f87d 	bl	800cc5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b62:	69fb      	ldr	r3, [r7, #28]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d021      	beq.n	8014bac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b68:	7c7a      	ldrb	r2, [r7, #17]
 8014b6a:	4918      	ldr	r1, [pc, #96]	@ (8014bcc <etharp_query+0x268>)
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	4413      	add	r3, r2
 8014b72:	00db      	lsls	r3, r3, #3
 8014b74:	440b      	add	r3, r1
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d00a      	beq.n	8014b92 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b7c:	7c7a      	ldrb	r2, [r7, #17]
 8014b7e:	4913      	ldr	r1, [pc, #76]	@ (8014bcc <etharp_query+0x268>)
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	440b      	add	r3, r1
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7f7 ffbf 	bl	800cb10 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b92:	7c7a      	ldrb	r2, [r7, #17]
 8014b94:	490d      	ldr	r1, [pc, #52]	@ (8014bcc <etharp_query+0x268>)
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	440b      	add	r3, r1
 8014ba0:	69fa      	ldr	r2, [r7, #28]
 8014ba2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014baa:	e002      	b.n	8014bb2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014bac:	23ff      	movs	r3, #255	@ 0xff
 8014bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3728      	adds	r7, #40	@ 0x28
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	0801b43c 	.word	0x0801b43c
 8014bc4:	0801b5e8 	.word	0x0801b5e8
 8014bc8:	0801b4b4 	.word	0x0801b4b4
 8014bcc:	2000d900 	.word	0x2000d900
 8014bd0:	0801b5f8 	.word	0x0801b5f8
 8014bd4:	0801b5dc 	.word	0x0801b5dc
 8014bd8:	2000d9f0 	.word	0x2000d9f0
 8014bdc:	0801b620 	.word	0x0801b620

08014be0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b08a      	sub	sp, #40	@ 0x28
 8014be4:	af02      	add	r7, sp, #8
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	607a      	str	r2, [r7, #4]
 8014bec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d106      	bne.n	8014c06 <etharp_raw+0x26>
 8014bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8014ce4 <etharp_raw+0x104>)
 8014bfa:	f240 4257 	movw	r2, #1111	@ 0x457
 8014bfe:	493a      	ldr	r1, [pc, #232]	@ (8014ce8 <etharp_raw+0x108>)
 8014c00:	483a      	ldr	r0, [pc, #232]	@ (8014cec <etharp_raw+0x10c>)
 8014c02:	f002 f887 	bl	8016d14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c0a:	211c      	movs	r1, #28
 8014c0c:	200e      	movs	r0, #14
 8014c0e:	f7f7 fc9b 	bl	800c548 <pbuf_alloc>
 8014c12:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d102      	bne.n	8014c20 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014c1e:	e05d      	b.n	8014cdc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014c20:	69bb      	ldr	r3, [r7, #24]
 8014c22:	895b      	ldrh	r3, [r3, #10]
 8014c24:	2b1b      	cmp	r3, #27
 8014c26:	d806      	bhi.n	8014c36 <etharp_raw+0x56>
 8014c28:	4b2e      	ldr	r3, [pc, #184]	@ (8014ce4 <etharp_raw+0x104>)
 8014c2a:	f240 4262 	movw	r2, #1122	@ 0x462
 8014c2e:	4930      	ldr	r1, [pc, #192]	@ (8014cf0 <etharp_raw+0x110>)
 8014c30:	482e      	ldr	r0, [pc, #184]	@ (8014cec <etharp_raw+0x10c>)
 8014c32:	f002 f86f 	bl	8016d14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014c36:	69bb      	ldr	r3, [r7, #24]
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014c3c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f6 fb74 	bl	800b32c <lwip_htons>
 8014c44:	4603      	mov	r3, r0
 8014c46:	461a      	mov	r2, r3
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014c52:	2b06      	cmp	r3, #6
 8014c54:	d006      	beq.n	8014c64 <etharp_raw+0x84>
 8014c56:	4b23      	ldr	r3, [pc, #140]	@ (8014ce4 <etharp_raw+0x104>)
 8014c58:	f240 4269 	movw	r2, #1129	@ 0x469
 8014c5c:	4925      	ldr	r1, [pc, #148]	@ (8014cf4 <etharp_raw+0x114>)
 8014c5e:	4823      	ldr	r0, [pc, #140]	@ (8014cec <etharp_raw+0x10c>)
 8014c60:	f002 f858 	bl	8016d14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	3308      	adds	r3, #8
 8014c68:	2206      	movs	r2, #6
 8014c6a:	6839      	ldr	r1, [r7, #0]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f002 f934 	bl	8016eda <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	3312      	adds	r3, #18
 8014c76:	2206      	movs	r2, #6
 8014c78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f002 f92d 	bl	8016eda <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	330e      	adds	r3, #14
 8014c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c86:	6812      	ldr	r2, [r2, #0]
 8014c88:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c90:	6812      	ldr	r2, [r2, #0]
 8014c92:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	2200      	movs	r2, #0
 8014c98:	701a      	strb	r2, [r3, #0]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f042 0201 	orr.w	r2, r2, #1
 8014ca0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	f042 0208 	orr.w	r2, r2, #8
 8014caa:	709a      	strb	r2, [r3, #2]
 8014cac:	2200      	movs	r2, #0
 8014cae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	2206      	movs	r2, #6
 8014cb4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	2204      	movs	r2, #4
 8014cba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014cbc:	f640 0306 	movw	r3, #2054	@ 0x806
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	69b9      	ldr	r1, [r7, #24]
 8014cc8:	68f8      	ldr	r0, [r7, #12]
 8014cca:	f001 fca5 	bl	8016618 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014cce:	69b8      	ldr	r0, [r7, #24]
 8014cd0:	f7f7 ff1e 	bl	800cb10 <pbuf_free>
  p = NULL;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3720      	adds	r7, #32
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}
 8014ce4:	0801b43c 	.word	0x0801b43c
 8014ce8:	0801b58c 	.word	0x0801b58c
 8014cec:	0801b4b4 	.word	0x0801b4b4
 8014cf0:	0801b63c 	.word	0x0801b63c
 8014cf4:	0801b670 	.word	0x0801b670

08014cf8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b088      	sub	sp, #32
 8014cfc:	af04      	add	r7, sp, #16
 8014cfe:	60f8      	str	r0, [r7, #12]
 8014d00:	60b9      	str	r1, [r7, #8]
 8014d02:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d14:	2201      	movs	r2, #1
 8014d16:	9203      	str	r2, [sp, #12]
 8014d18:	68ba      	ldr	r2, [r7, #8]
 8014d1a:	9202      	str	r2, [sp, #8]
 8014d1c:	4a06      	ldr	r2, [pc, #24]	@ (8014d38 <etharp_request_dst+0x40>)
 8014d1e:	9201      	str	r2, [sp, #4]
 8014d20:	9300      	str	r3, [sp, #0]
 8014d22:	4603      	mov	r3, r0
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	68f8      	ldr	r0, [r7, #12]
 8014d28:	f7ff ff5a 	bl	8014be0 <etharp_raw>
 8014d2c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	0801bcf8 	.word	0x0801bcf8

08014d3c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d46:	4a05      	ldr	r2, [pc, #20]	@ (8014d5c <etharp_request+0x20>)
 8014d48:	6839      	ldr	r1, [r7, #0]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7ff ffd4 	bl	8014cf8 <etharp_request_dst>
 8014d50:	4603      	mov	r3, r0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	0801bcf0 	.word	0x0801bcf0

08014d60 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b08e      	sub	sp, #56	@ 0x38
 8014d64:	af04      	add	r7, sp, #16
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014d6a:	4b79      	ldr	r3, [pc, #484]	@ (8014f50 <icmp_input+0x1f0>)
 8014d6c:	689b      	ldr	r3, [r3, #8]
 8014d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	f003 030f 	and.w	r3, r3, #15
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014d80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d82:	2b13      	cmp	r3, #19
 8014d84:	f240 80cd 	bls.w	8014f22 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	895b      	ldrh	r3, [r3, #10]
 8014d8c:	2b03      	cmp	r3, #3
 8014d8e:	f240 80ca 	bls.w	8014f26 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	f000 80b7 	beq.w	8014f14 <icmp_input+0x1b4>
 8014da6:	2b08      	cmp	r3, #8
 8014da8:	f040 80b7 	bne.w	8014f1a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014dac:	4b69      	ldr	r3, [pc, #420]	@ (8014f54 <icmp_input+0x1f4>)
 8014dae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014db0:	4b67      	ldr	r3, [pc, #412]	@ (8014f50 <icmp_input+0x1f0>)
 8014db2:	695b      	ldr	r3, [r3, #20]
 8014db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014db8:	2be0      	cmp	r3, #224	@ 0xe0
 8014dba:	f000 80bb 	beq.w	8014f34 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014dbe:	4b64      	ldr	r3, [pc, #400]	@ (8014f50 <icmp_input+0x1f0>)
 8014dc0:	695b      	ldr	r3, [r3, #20]
 8014dc2:	4a63      	ldr	r2, [pc, #396]	@ (8014f50 <icmp_input+0x1f0>)
 8014dc4:	6812      	ldr	r2, [r2, #0]
 8014dc6:	4611      	mov	r1, r2
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 fbed 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	f040 80b1 	bne.w	8014f38 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	891b      	ldrh	r3, [r3, #8]
 8014dda:	2b07      	cmp	r3, #7
 8014ddc:	f240 80a5 	bls.w	8014f2a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014de0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014de2:	330e      	adds	r3, #14
 8014de4:	4619      	mov	r1, r3
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7f7 fdfc 	bl	800c9e4 <pbuf_add_header>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d04b      	beq.n	8014e8a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	891a      	ldrh	r2, [r3, #8]
 8014df6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014df8:	4413      	add	r3, r2
 8014dfa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	891b      	ldrh	r3, [r3, #8]
 8014e00:	8b7a      	ldrh	r2, [r7, #26]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	f0c0 809a 	bcc.w	8014f3c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014e08:	8b7b      	ldrh	r3, [r7, #26]
 8014e0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e0e:	4619      	mov	r1, r3
 8014e10:	200e      	movs	r0, #14
 8014e12:	f7f7 fb99 	bl	800c548 <pbuf_alloc>
 8014e16:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f000 8090 	beq.w	8014f40 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	895b      	ldrh	r3, [r3, #10]
 8014e24:	461a      	mov	r2, r3
 8014e26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e28:	3308      	adds	r3, #8
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d203      	bcs.n	8014e36 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014e2e:	6978      	ldr	r0, [r7, #20]
 8014e30:	f7f7 fe6e 	bl	800cb10 <pbuf_free>
          goto icmperr;
 8014e34:	e085      	b.n	8014f42 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f002 f84b 	bl	8016eda <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014e44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e46:	4619      	mov	r1, r3
 8014e48:	6978      	ldr	r0, [r7, #20]
 8014e4a:	f7f7 fddb 	bl	800ca04 <pbuf_remove_header>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d009      	beq.n	8014e68 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014e54:	4b40      	ldr	r3, [pc, #256]	@ (8014f58 <icmp_input+0x1f8>)
 8014e56:	22b6      	movs	r2, #182	@ 0xb6
 8014e58:	4940      	ldr	r1, [pc, #256]	@ (8014f5c <icmp_input+0x1fc>)
 8014e5a:	4841      	ldr	r0, [pc, #260]	@ (8014f60 <icmp_input+0x200>)
 8014e5c:	f001 ff5a 	bl	8016d14 <iprintf>
          pbuf_free(r);
 8014e60:	6978      	ldr	r0, [r7, #20]
 8014e62:	f7f7 fe55 	bl	800cb10 <pbuf_free>
          goto icmperr;
 8014e66:	e06c      	b.n	8014f42 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014e68:	6879      	ldr	r1, [r7, #4]
 8014e6a:	6978      	ldr	r0, [r7, #20]
 8014e6c:	f7f7 ff84 	bl	800cd78 <pbuf_copy>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d003      	beq.n	8014e7e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014e76:	6978      	ldr	r0, [r7, #20]
 8014e78:	f7f7 fe4a 	bl	800cb10 <pbuf_free>
          goto icmperr;
 8014e7c:	e061      	b.n	8014f42 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7f7 fe46 	bl	800cb10 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	607b      	str	r3, [r7, #4]
 8014e88:	e00f      	b.n	8014eaa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e8c:	330e      	adds	r3, #14
 8014e8e:	4619      	mov	r1, r3
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7f7 fdb7 	bl	800ca04 <pbuf_remove_header>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d006      	beq.n	8014eaa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8014f58 <icmp_input+0x1f8>)
 8014e9e:	22c7      	movs	r2, #199	@ 0xc7
 8014ea0:	4930      	ldr	r1, [pc, #192]	@ (8014f64 <icmp_input+0x204>)
 8014ea2:	482f      	ldr	r0, [pc, #188]	@ (8014f60 <icmp_input+0x200>)
 8014ea4:	f001 ff36 	bl	8016d14 <iprintf>
          goto icmperr;
 8014ea8:	e04b      	b.n	8014f42 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014eb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7f7 fd95 	bl	800c9e4 <pbuf_add_header>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d12b      	bne.n	8014f18 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014ece:	4b20      	ldr	r3, [pc, #128]	@ (8014f50 <icmp_input+0x1f0>)
 8014ed0:	691a      	ldr	r2, [r3, #16]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	709a      	strb	r2, [r3, #2]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	22ff      	movs	r2, #255	@ 0xff
 8014eea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	729a      	strb	r2, [r3, #10]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	9302      	str	r3, [sp, #8]
 8014efa:	2301      	movs	r3, #1
 8014efc:	9301      	str	r3, [sp, #4]
 8014efe:	2300      	movs	r3, #0
 8014f00:	9300      	str	r3, [sp, #0]
 8014f02:	23ff      	movs	r3, #255	@ 0xff
 8014f04:	2200      	movs	r2, #0
 8014f06:	69f9      	ldr	r1, [r7, #28]
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fa75 	bl	80153f8 <ip4_output_if>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014f12:	e001      	b.n	8014f18 <icmp_input+0x1b8>
      break;
 8014f14:	bf00      	nop
 8014f16:	e000      	b.n	8014f1a <icmp_input+0x1ba>
      break;
 8014f18:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7f7 fdf8 	bl	800cb10 <pbuf_free>
  return;
 8014f20:	e013      	b.n	8014f4a <icmp_input+0x1ea>
    goto lenerr;
 8014f22:	bf00      	nop
 8014f24:	e002      	b.n	8014f2c <icmp_input+0x1cc>
    goto lenerr;
 8014f26:	bf00      	nop
 8014f28:	e000      	b.n	8014f2c <icmp_input+0x1cc>
        goto lenerr;
 8014f2a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f7f7 fdef 	bl	800cb10 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f32:	e00a      	b.n	8014f4a <icmp_input+0x1ea>
        goto icmperr;
 8014f34:	bf00      	nop
 8014f36:	e004      	b.n	8014f42 <icmp_input+0x1e2>
        goto icmperr;
 8014f38:	bf00      	nop
 8014f3a:	e002      	b.n	8014f42 <icmp_input+0x1e2>
          goto icmperr;
 8014f3c:	bf00      	nop
 8014f3e:	e000      	b.n	8014f42 <icmp_input+0x1e2>
          goto icmperr;
 8014f40:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7f7 fde4 	bl	800cb10 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f48:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014f4a:	3728      	adds	r7, #40	@ 0x28
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	2000a14c 	.word	0x2000a14c
 8014f54:	2000a160 	.word	0x2000a160
 8014f58:	0801b6b4 	.word	0x0801b6b4
 8014f5c:	0801b6ec 	.word	0x0801b6ec
 8014f60:	0801b724 	.word	0x0801b724
 8014f64:	0801b74c 	.word	0x0801b74c

08014f68 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	460b      	mov	r3, r1
 8014f72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014f74:	78fb      	ldrb	r3, [r7, #3]
 8014f76:	461a      	mov	r2, r3
 8014f78:	2103      	movs	r1, #3
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f000 f814 	bl	8014fa8 <icmp_send_response>
}
 8014f80:	bf00      	nop
 8014f82:	3708      	adds	r7, #8
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}

08014f88 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
 8014f90:	460b      	mov	r3, r1
 8014f92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f94:	78fb      	ldrb	r3, [r7, #3]
 8014f96:	461a      	mov	r2, r3
 8014f98:	210b      	movs	r1, #11
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 f804 	bl	8014fa8 <icmp_send_response>
}
 8014fa0:	bf00      	nop
 8014fa2:	3708      	adds	r7, #8
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b08c      	sub	sp, #48	@ 0x30
 8014fac:	af04      	add	r7, sp, #16
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	70fb      	strb	r3, [r7, #3]
 8014fb4:	4613      	mov	r3, r2
 8014fb6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014fb8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014fbc:	2124      	movs	r1, #36	@ 0x24
 8014fbe:	2022      	movs	r0, #34	@ 0x22
 8014fc0:	f7f7 fac2 	bl	800c548 <pbuf_alloc>
 8014fc4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d04c      	beq.n	8015066 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	895b      	ldrh	r3, [r3, #10]
 8014fd0:	2b23      	cmp	r3, #35	@ 0x23
 8014fd2:	d806      	bhi.n	8014fe2 <icmp_send_response+0x3a>
 8014fd4:	4b26      	ldr	r3, [pc, #152]	@ (8015070 <icmp_send_response+0xc8>)
 8014fd6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014fda:	4926      	ldr	r1, [pc, #152]	@ (8015074 <icmp_send_response+0xcc>)
 8014fdc:	4826      	ldr	r0, [pc, #152]	@ (8015078 <icmp_send_response+0xd0>)
 8014fde:	f001 fe99 	bl	8016d14 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014fe8:	69fb      	ldr	r3, [r7, #28]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	78fa      	ldrb	r2, [r7, #3]
 8014ff2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	78ba      	ldrb	r2, [r7, #2]
 8014ff8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	711a      	strb	r2, [r3, #4]
 8015000:	2200      	movs	r2, #0
 8015002:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2200      	movs	r2, #0
 8015008:	719a      	strb	r2, [r3, #6]
 801500a:	2200      	movs	r2, #0
 801500c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801500e:	69fb      	ldr	r3, [r7, #28]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	f103 0008 	add.w	r0, r3, #8
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	221c      	movs	r2, #28
 801501c:	4619      	mov	r1, r3
 801501e:	f001 ff5c 	bl	8016eda <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015028:	f107 030c 	add.w	r3, r7, #12
 801502c:	4618      	mov	r0, r3
 801502e:	f000 f825 	bl	801507c <ip4_route>
 8015032:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d011      	beq.n	801505e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	2200      	movs	r2, #0
 801503e:	709a      	strb	r2, [r3, #2]
 8015040:	2200      	movs	r2, #0
 8015042:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015044:	f107 020c 	add.w	r2, r7, #12
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	9302      	str	r3, [sp, #8]
 801504c:	2301      	movs	r3, #1
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	2300      	movs	r3, #0
 8015052:	9300      	str	r3, [sp, #0]
 8015054:	23ff      	movs	r3, #255	@ 0xff
 8015056:	2100      	movs	r1, #0
 8015058:	69f8      	ldr	r0, [r7, #28]
 801505a:	f000 f9cd 	bl	80153f8 <ip4_output_if>
  }
  pbuf_free(q);
 801505e:	69f8      	ldr	r0, [r7, #28]
 8015060:	f7f7 fd56 	bl	800cb10 <pbuf_free>
 8015064:	e000      	b.n	8015068 <icmp_send_response+0xc0>
    return;
 8015066:	bf00      	nop
}
 8015068:	3720      	adds	r7, #32
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	0801b6b4 	.word	0x0801b6b4
 8015074:	0801b780 	.word	0x0801b780
 8015078:	0801b724 	.word	0x0801b724

0801507c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015084:	4b33      	ldr	r3, [pc, #204]	@ (8015154 <ip4_route+0xd8>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	60fb      	str	r3, [r7, #12]
 801508a:	e036      	b.n	80150fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015092:	f003 0301 	and.w	r3, r3, #1
 8015096:	b2db      	uxtb	r3, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	d02b      	beq.n	80150f4 <ip4_route+0x78>
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150a2:	089b      	lsrs	r3, r3, #2
 80150a4:	f003 0301 	and.w	r3, r3, #1
 80150a8:	b2db      	uxtb	r3, r3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d022      	beq.n	80150f4 <ip4_route+0x78>
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	3304      	adds	r3, #4
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d01d      	beq.n	80150f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	3304      	adds	r3, #4
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	405a      	eors	r2, r3
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	3308      	adds	r3, #8
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	4013      	ands	r3, r2
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d101      	bne.n	80150d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	e038      	b.n	8015146 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80150da:	f003 0302 	and.w	r3, r3, #2
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d108      	bne.n	80150f4 <ip4_route+0x78>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681a      	ldr	r2, [r3, #0]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	330c      	adds	r3, #12
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d101      	bne.n	80150f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	e028      	b.n	8015146 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	60fb      	str	r3, [r7, #12]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1c5      	bne.n	801508c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015100:	4b15      	ldr	r3, [pc, #84]	@ (8015158 <ip4_route+0xdc>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d01a      	beq.n	801513e <ip4_route+0xc2>
 8015108:	4b13      	ldr	r3, [pc, #76]	@ (8015158 <ip4_route+0xdc>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015110:	f003 0301 	and.w	r3, r3, #1
 8015114:	2b00      	cmp	r3, #0
 8015116:	d012      	beq.n	801513e <ip4_route+0xc2>
 8015118:	4b0f      	ldr	r3, [pc, #60]	@ (8015158 <ip4_route+0xdc>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015120:	f003 0304 	and.w	r3, r3, #4
 8015124:	2b00      	cmp	r3, #0
 8015126:	d00a      	beq.n	801513e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015128:	4b0b      	ldr	r3, [pc, #44]	@ (8015158 <ip4_route+0xdc>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	3304      	adds	r3, #4
 801512e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015130:	2b00      	cmp	r3, #0
 8015132:	d004      	beq.n	801513e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	b2db      	uxtb	r3, r3
 801513a:	2b7f      	cmp	r3, #127	@ 0x7f
 801513c:	d101      	bne.n	8015142 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801513e:	2300      	movs	r3, #0
 8015140:	e001      	b.n	8015146 <ip4_route+0xca>
  }

  return netif_default;
 8015142:	4b05      	ldr	r3, [pc, #20]	@ (8015158 <ip4_route+0xdc>)
 8015144:	681b      	ldr	r3, [r3, #0]
}
 8015146:	4618      	mov	r0, r3
 8015148:	3714      	adds	r7, #20
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	2000d894 	.word	0x2000d894
 8015158:	2000d898 	.word	0x2000d898

0801515c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801516a:	f003 0301 	and.w	r3, r3, #1
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b00      	cmp	r3, #0
 8015172:	d016      	beq.n	80151a2 <ip4_input_accept+0x46>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	3304      	adds	r3, #4
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d011      	beq.n	80151a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801517e:	4b0b      	ldr	r3, [pc, #44]	@ (80151ac <ip4_input_accept+0x50>)
 8015180:	695a      	ldr	r2, [r3, #20]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	3304      	adds	r3, #4
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	429a      	cmp	r2, r3
 801518a:	d008      	beq.n	801519e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801518c:	4b07      	ldr	r3, [pc, #28]	@ (80151ac <ip4_input_accept+0x50>)
 801518e:	695b      	ldr	r3, [r3, #20]
 8015190:	6879      	ldr	r1, [r7, #4]
 8015192:	4618      	mov	r0, r3
 8015194:	f000 fa08 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 8015198:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801519a:	2b00      	cmp	r3, #0
 801519c:	d001      	beq.n	80151a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801519e:	2301      	movs	r3, #1
 80151a0:	e000      	b.n	80151a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80151a2:	2300      	movs	r3, #0
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	2000a14c 	.word	0x2000a14c

080151b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b086      	sub	sp, #24
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	781b      	ldrb	r3, [r3, #0]
 80151c4:	091b      	lsrs	r3, r3, #4
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	2b04      	cmp	r3, #4
 80151ca:	d004      	beq.n	80151d6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f7 fc9f 	bl	800cb10 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80151d2:	2300      	movs	r3, #0
 80151d4:	e107      	b.n	80153e6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	f003 030f 	and.w	r3, r3, #15
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	009b      	lsls	r3, r3, #2
 80151e2:	b2db      	uxtb	r3, r3
 80151e4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	885b      	ldrh	r3, [r3, #2]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f6 f89d 	bl	800b32c <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	891b      	ldrh	r3, [r3, #8]
 80151fa:	89ba      	ldrh	r2, [r7, #12]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d204      	bcs.n	801520a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015200:	89bb      	ldrh	r3, [r7, #12]
 8015202:	4619      	mov	r1, r3
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f7f7 fafd 	bl	800c804 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	895b      	ldrh	r3, [r3, #10]
 801520e:	89fa      	ldrh	r2, [r7, #14]
 8015210:	429a      	cmp	r2, r3
 8015212:	d807      	bhi.n	8015224 <ip4_input+0x74>
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	891b      	ldrh	r3, [r3, #8]
 8015218:	89ba      	ldrh	r2, [r7, #12]
 801521a:	429a      	cmp	r2, r3
 801521c:	d802      	bhi.n	8015224 <ip4_input+0x74>
 801521e:	89fb      	ldrh	r3, [r7, #14]
 8015220:	2b13      	cmp	r3, #19
 8015222:	d804      	bhi.n	801522e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7f7 fc73 	bl	800cb10 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801522a:	2300      	movs	r3, #0
 801522c:	e0db      	b.n	80153e6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	691b      	ldr	r3, [r3, #16]
 8015232:	4a6f      	ldr	r2, [pc, #444]	@ (80153f0 <ip4_input+0x240>)
 8015234:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	4a6d      	ldr	r2, [pc, #436]	@ (80153f0 <ip4_input+0x240>)
 801523c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801523e:	4b6c      	ldr	r3, [pc, #432]	@ (80153f0 <ip4_input+0x240>)
 8015240:	695b      	ldr	r3, [r3, #20]
 8015242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015246:	2be0      	cmp	r3, #224	@ 0xe0
 8015248:	d112      	bne.n	8015270 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015250:	f003 0301 	and.w	r3, r3, #1
 8015254:	b2db      	uxtb	r3, r3
 8015256:	2b00      	cmp	r3, #0
 8015258:	d007      	beq.n	801526a <ip4_input+0xba>
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	3304      	adds	r3, #4
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d002      	beq.n	801526a <ip4_input+0xba>
      netif = inp;
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	613b      	str	r3, [r7, #16]
 8015268:	e02a      	b.n	80152c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801526a:	2300      	movs	r3, #0
 801526c:	613b      	str	r3, [r7, #16]
 801526e:	e027      	b.n	80152c0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015270:	6838      	ldr	r0, [r7, #0]
 8015272:	f7ff ff73 	bl	801515c <ip4_input_accept>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d002      	beq.n	8015282 <ip4_input+0xd2>
      netif = inp;
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	613b      	str	r3, [r7, #16]
 8015280:	e01e      	b.n	80152c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015282:	2300      	movs	r3, #0
 8015284:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015286:	4b5a      	ldr	r3, [pc, #360]	@ (80153f0 <ip4_input+0x240>)
 8015288:	695b      	ldr	r3, [r3, #20]
 801528a:	b2db      	uxtb	r3, r3
 801528c:	2b7f      	cmp	r3, #127	@ 0x7f
 801528e:	d017      	beq.n	80152c0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015290:	4b58      	ldr	r3, [pc, #352]	@ (80153f4 <ip4_input+0x244>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	613b      	str	r3, [r7, #16]
 8015296:	e00e      	b.n	80152b6 <ip4_input+0x106>
          if (netif == inp) {
 8015298:	693a      	ldr	r2, [r7, #16]
 801529a:	683b      	ldr	r3, [r7, #0]
 801529c:	429a      	cmp	r2, r3
 801529e:	d006      	beq.n	80152ae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80152a0:	6938      	ldr	r0, [r7, #16]
 80152a2:	f7ff ff5b 	bl	801515c <ip4_input_accept>
 80152a6:	4603      	mov	r3, r0
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d108      	bne.n	80152be <ip4_input+0x10e>
 80152ac:	e000      	b.n	80152b0 <ip4_input+0x100>
            continue;
 80152ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	613b      	str	r3, [r7, #16]
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1ed      	bne.n	8015298 <ip4_input+0xe8>
 80152bc:	e000      	b.n	80152c0 <ip4_input+0x110>
            break;
 80152be:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152c0:	4b4b      	ldr	r3, [pc, #300]	@ (80153f0 <ip4_input+0x240>)
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	6839      	ldr	r1, [r7, #0]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f000 f96e 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d105      	bne.n	80152de <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80152d2:	4b47      	ldr	r3, [pc, #284]	@ (80153f0 <ip4_input+0x240>)
 80152d4:	691b      	ldr	r3, [r3, #16]
 80152d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152da:	2be0      	cmp	r3, #224	@ 0xe0
 80152dc:	d104      	bne.n	80152e8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f7f7 fc16 	bl	800cb10 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80152e4:	2300      	movs	r3, #0
 80152e6:	e07e      	b.n	80153e6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d104      	bne.n	80152f8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7f7 fc0e 	bl	800cb10 <pbuf_free>
    return ERR_OK;
 80152f4:	2300      	movs	r3, #0
 80152f6:	e076      	b.n	80153e6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	88db      	ldrh	r3, [r3, #6]
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	461a      	mov	r2, r3
 8015300:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015304:	4013      	ands	r3, r2
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00b      	beq.n	8015322 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f000 fdbc 	bl	8015e88 <ip4_reass>
 8015310:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d101      	bne.n	801531c <ip4_input+0x16c>
      return ERR_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	e064      	b.n	80153e6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015322:	4a33      	ldr	r2, [pc, #204]	@ (80153f0 <ip4_input+0x240>)
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015328:	4a31      	ldr	r2, [pc, #196]	@ (80153f0 <ip4_input+0x240>)
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801532e:	4a30      	ldr	r2, [pc, #192]	@ (80153f0 <ip4_input+0x240>)
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	f003 030f 	and.w	r3, r3, #15
 801533c:	b2db      	uxtb	r3, r3
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	b2db      	uxtb	r3, r3
 8015342:	461a      	mov	r2, r3
 8015344:	4b2a      	ldr	r3, [pc, #168]	@ (80153f0 <ip4_input+0x240>)
 8015346:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015348:	89fb      	ldrh	r3, [r7, #14]
 801534a:	4619      	mov	r1, r3
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f7f7 fb59 	bl	800ca04 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	7a5b      	ldrb	r3, [r3, #9]
 8015356:	2b11      	cmp	r3, #17
 8015358:	d006      	beq.n	8015368 <ip4_input+0x1b8>
 801535a:	2b11      	cmp	r3, #17
 801535c:	dc13      	bgt.n	8015386 <ip4_input+0x1d6>
 801535e:	2b01      	cmp	r3, #1
 8015360:	d00c      	beq.n	801537c <ip4_input+0x1cc>
 8015362:	2b06      	cmp	r3, #6
 8015364:	d005      	beq.n	8015372 <ip4_input+0x1c2>
 8015366:	e00e      	b.n	8015386 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015368:	6839      	ldr	r1, [r7, #0]
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7fe f8da 	bl	8013524 <udp_input>
        break;
 8015370:	e026      	b.n	80153c0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015372:	6839      	ldr	r1, [r7, #0]
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7f9 fc99 	bl	800ecac <tcp_input>
        break;
 801537a:	e021      	b.n	80153c0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801537c:	6839      	ldr	r1, [r7, #0]
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f7ff fcee 	bl	8014d60 <icmp_input>
        break;
 8015384:	e01c      	b.n	80153c0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015386:	4b1a      	ldr	r3, [pc, #104]	@ (80153f0 <ip4_input+0x240>)
 8015388:	695b      	ldr	r3, [r3, #20]
 801538a:	6939      	ldr	r1, [r7, #16]
 801538c:	4618      	mov	r0, r3
 801538e:	f000 f90b 	bl	80155a8 <ip4_addr_isbroadcast_u32>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d10f      	bne.n	80153b8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015398:	4b15      	ldr	r3, [pc, #84]	@ (80153f0 <ip4_input+0x240>)
 801539a:	695b      	ldr	r3, [r3, #20]
 801539c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153a0:	2be0      	cmp	r3, #224	@ 0xe0
 80153a2:	d009      	beq.n	80153b8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80153a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80153a8:	4619      	mov	r1, r3
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f7f7 fb9d 	bl	800caea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80153b0:	2102      	movs	r1, #2
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f7ff fdd8 	bl	8014f68 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f7f7 fba9 	bl	800cb10 <pbuf_free>
        break;
 80153be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80153c0:	4b0b      	ldr	r3, [pc, #44]	@ (80153f0 <ip4_input+0x240>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80153c6:	4b0a      	ldr	r3, [pc, #40]	@ (80153f0 <ip4_input+0x240>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80153cc:	4b08      	ldr	r3, [pc, #32]	@ (80153f0 <ip4_input+0x240>)
 80153ce:	2200      	movs	r2, #0
 80153d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80153d2:	4b07      	ldr	r3, [pc, #28]	@ (80153f0 <ip4_input+0x240>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80153d8:	4b05      	ldr	r3, [pc, #20]	@ (80153f0 <ip4_input+0x240>)
 80153da:	2200      	movs	r2, #0
 80153dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80153de:	4b04      	ldr	r3, [pc, #16]	@ (80153f0 <ip4_input+0x240>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80153e4:	2300      	movs	r3, #0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3718      	adds	r7, #24
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	2000a14c 	.word	0x2000a14c
 80153f4:	2000d894 	.word	0x2000d894

080153f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b08a      	sub	sp, #40	@ 0x28
 80153fc:	af04      	add	r7, sp, #16
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	60b9      	str	r1, [r7, #8]
 8015402:	607a      	str	r2, [r7, #4]
 8015404:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d009      	beq.n	8015424 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d003      	beq.n	801541e <ip4_output_if+0x26>
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d102      	bne.n	8015424 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015420:	3304      	adds	r3, #4
 8015422:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015424:	78fa      	ldrb	r2, [r7, #3]
 8015426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015428:	9302      	str	r3, [sp, #8]
 801542a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801542e:	9301      	str	r3, [sp, #4]
 8015430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015434:	9300      	str	r3, [sp, #0]
 8015436:	4613      	mov	r3, r2
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	6979      	ldr	r1, [r7, #20]
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f000 f805 	bl	801544c <ip4_output_if_src>
 8015442:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015444:	4618      	mov	r0, r3
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b088      	sub	sp, #32
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	607a      	str	r2, [r7, #4]
 8015458:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	7b9b      	ldrb	r3, [r3, #14]
 801545e:	2b01      	cmp	r3, #1
 8015460:	d006      	beq.n	8015470 <ip4_output_if_src+0x24>
 8015462:	4b4b      	ldr	r3, [pc, #300]	@ (8015590 <ip4_output_if_src+0x144>)
 8015464:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015468:	494a      	ldr	r1, [pc, #296]	@ (8015594 <ip4_output_if_src+0x148>)
 801546a:	484b      	ldr	r0, [pc, #300]	@ (8015598 <ip4_output_if_src+0x14c>)
 801546c:	f001 fc52 	bl	8016d14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d060      	beq.n	8015538 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015476:	2314      	movs	r3, #20
 8015478:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801547a:	2114      	movs	r1, #20
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f7f7 fab1 	bl	800c9e4 <pbuf_add_header>
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d002      	beq.n	801548e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015488:	f06f 0301 	mvn.w	r3, #1
 801548c:	e07c      	b.n	8015588 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	895b      	ldrh	r3, [r3, #10]
 8015498:	2b13      	cmp	r3, #19
 801549a:	d806      	bhi.n	80154aa <ip4_output_if_src+0x5e>
 801549c:	4b3c      	ldr	r3, [pc, #240]	@ (8015590 <ip4_output_if_src+0x144>)
 801549e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80154a2:	493e      	ldr	r1, [pc, #248]	@ (801559c <ip4_output_if_src+0x150>)
 80154a4:	483c      	ldr	r0, [pc, #240]	@ (8015598 <ip4_output_if_src+0x14c>)
 80154a6:	f001 fc35 	bl	8016d14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	78fa      	ldrb	r2, [r7, #3]
 80154ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80154b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681a      	ldr	r2, [r3, #0]
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80154c0:	8b7b      	ldrh	r3, [r7, #26]
 80154c2:	089b      	lsrs	r3, r3, #2
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154cc:	b2da      	uxtb	r2, r3
 80154ce:	69fb      	ldr	r3, [r7, #28]
 80154d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80154d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	891b      	ldrh	r3, [r3, #8]
 80154de:	4618      	mov	r0, r3
 80154e0:	f7f5 ff24 	bl	800b32c <lwip_htons>
 80154e4:	4603      	mov	r3, r0
 80154e6:	461a      	mov	r2, r3
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	2200      	movs	r2, #0
 80154f0:	719a      	strb	r2, [r3, #6]
 80154f2:	2200      	movs	r2, #0
 80154f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80154f6:	4b2a      	ldr	r3, [pc, #168]	@ (80155a0 <ip4_output_if_src+0x154>)
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7f5 ff16 	bl	800b32c <lwip_htons>
 8015500:	4603      	mov	r3, r0
 8015502:	461a      	mov	r2, r3
 8015504:	69fb      	ldr	r3, [r7, #28]
 8015506:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015508:	4b25      	ldr	r3, [pc, #148]	@ (80155a0 <ip4_output_if_src+0x154>)
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	3301      	adds	r3, #1
 801550e:	b29a      	uxth	r2, r3
 8015510:	4b23      	ldr	r3, [pc, #140]	@ (80155a0 <ip4_output_if_src+0x154>)
 8015512:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d104      	bne.n	8015524 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801551a:	4b22      	ldr	r3, [pc, #136]	@ (80155a4 <ip4_output_if_src+0x158>)
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	60da      	str	r2, [r3, #12]
 8015522:	e003      	b.n	801552c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	2200      	movs	r2, #0
 8015530:	729a      	strb	r2, [r3, #10]
 8015532:	2200      	movs	r2, #0
 8015534:	72da      	strb	r2, [r3, #11]
 8015536:	e00f      	b.n	8015558 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	895b      	ldrh	r3, [r3, #10]
 801553c:	2b13      	cmp	r3, #19
 801553e:	d802      	bhi.n	8015546 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015540:	f06f 0301 	mvn.w	r3, #1
 8015544:	e020      	b.n	8015588 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	691b      	ldr	r3, [r3, #16]
 8015550:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015552:	f107 0314 	add.w	r3, r7, #20
 8015556:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801555a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00c      	beq.n	801557a <ip4_output_if_src+0x12e>
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	891a      	ldrh	r2, [r3, #8]
 8015564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015566:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015568:	429a      	cmp	r2, r3
 801556a:	d906      	bls.n	801557a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	f000 fe7d 	bl	8016270 <ip4_frag>
 8015576:	4603      	mov	r3, r0
 8015578:	e006      	b.n	8015588 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557c:	695b      	ldr	r3, [r3, #20]
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	68f9      	ldr	r1, [r7, #12]
 8015582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015584:	4798      	blx	r3
 8015586:	4603      	mov	r3, r0
}
 8015588:	4618      	mov	r0, r3
 801558a:	3720      	adds	r7, #32
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0801b7ac 	.word	0x0801b7ac
 8015594:	0801b7e0 	.word	0x0801b7e0
 8015598:	0801b7ec 	.word	0x0801b7ec
 801559c:	0801b814 	.word	0x0801b814
 80155a0:	2000d9f2 	.word	0x2000d9f2
 80155a4:	0801bcec 	.word	0x0801bcec

080155a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80155a8:	b480      	push	{r7}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80155bc:	d002      	beq.n	80155c4 <ip4_addr_isbroadcast_u32+0x1c>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d101      	bne.n	80155c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80155c4:	2301      	movs	r3, #1
 80155c6:	e02a      	b.n	801561e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155ce:	f003 0302 	and.w	r3, r3, #2
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d101      	bne.n	80155da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80155d6:	2300      	movs	r3, #0
 80155d8:	e021      	b.n	801561e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	3304      	adds	r3, #4
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d101      	bne.n	80155ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80155e6:	2300      	movs	r3, #0
 80155e8:	e019      	b.n	801561e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80155ea:	68fa      	ldr	r2, [r7, #12]
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	3304      	adds	r3, #4
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	405a      	eors	r2, r3
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	3308      	adds	r3, #8
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	4013      	ands	r3, r2
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d10d      	bne.n	801561c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	3308      	adds	r3, #8
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	43da      	mvns	r2, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	3308      	adds	r3, #8
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015614:	429a      	cmp	r2, r3
 8015616:	d101      	bne.n	801561c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015618:	2301      	movs	r3, #1
 801561a:	e000      	b.n	801561e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801561c:	2300      	movs	r3, #0
  }
}
 801561e:	4618      	mov	r0, r3
 8015620:	3714      	adds	r7, #20
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr
	...

0801562c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b08a      	sub	sp, #40	@ 0x28
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8015636:	f107 030c 	add.w	r3, r7, #12
 801563a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8015644:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015648:	3301      	adds	r3, #1
 801564a:	4a89      	ldr	r2, [pc, #548]	@ (8015870 <ip4addr_aton+0x244>)
 801564c:	4413      	add	r3, r2
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	f003 0304 	and.w	r3, r3, #4
 8015654:	2b00      	cmp	r3, #0
 8015656:	d101      	bne.n	801565c <ip4addr_aton+0x30>
      return 0;
 8015658:	2300      	movs	r3, #0
 801565a:	e105      	b.n	8015868 <ip4addr_aton+0x23c>
    }
    val = 0;
 801565c:	2300      	movs	r3, #0
 801565e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8015660:	230a      	movs	r3, #10
 8015662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8015666:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801566a:	2b30      	cmp	r3, #48	@ 0x30
 801566c:	d11c      	bne.n	80156a8 <ip4addr_aton+0x7c>
      c = *++cp;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	3301      	adds	r3, #1
 8015672:	607b      	str	r3, [r7, #4]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801567c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015680:	2b78      	cmp	r3, #120	@ 0x78
 8015682:	d003      	beq.n	801568c <ip4addr_aton+0x60>
 8015684:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015688:	2b58      	cmp	r3, #88	@ 0x58
 801568a:	d10a      	bne.n	80156a2 <ip4addr_aton+0x76>
        base = 16;
 801568c:	2310      	movs	r3, #16
 801568e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	3301      	adds	r3, #1
 8015696:	607b      	str	r3, [r7, #4]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80156a0:	e002      	b.n	80156a8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80156a2:	2308      	movs	r3, #8
 80156a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80156a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80156ac:	3301      	adds	r3, #1
 80156ae:	4a70      	ldr	r2, [pc, #448]	@ (8015870 <ip4addr_aton+0x244>)
 80156b0:	4413      	add	r3, r2
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	f003 0304 	and.w	r3, r3, #4
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d011      	beq.n	80156e0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80156bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80156c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156c2:	fb03 f202 	mul.w	r2, r3, r2
 80156c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80156ca:	4413      	add	r3, r2
 80156cc:	3b30      	subs	r3, #48	@ 0x30
 80156ce:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3301      	adds	r3, #1
 80156d4:	607b      	str	r3, [r7, #4]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80156de:	e7e3      	b.n	80156a8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80156e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80156e4:	2b10      	cmp	r3, #16
 80156e6:	d127      	bne.n	8015738 <ip4addr_aton+0x10c>
 80156e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80156ec:	3301      	adds	r3, #1
 80156ee:	4a60      	ldr	r2, [pc, #384]	@ (8015870 <ip4addr_aton+0x244>)
 80156f0:	4413      	add	r3, r2
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01d      	beq.n	8015738 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80156fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156fe:	011b      	lsls	r3, r3, #4
 8015700:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015704:	f102 010a 	add.w	r1, r2, #10
 8015708:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801570c:	3201      	adds	r2, #1
 801570e:	4858      	ldr	r0, [pc, #352]	@ (8015870 <ip4addr_aton+0x244>)
 8015710:	4402      	add	r2, r0
 8015712:	7812      	ldrb	r2, [r2, #0]
 8015714:	f002 0203 	and.w	r2, r2, #3
 8015718:	2a02      	cmp	r2, #2
 801571a:	d101      	bne.n	8015720 <ip4addr_aton+0xf4>
 801571c:	2261      	movs	r2, #97	@ 0x61
 801571e:	e000      	b.n	8015722 <ip4addr_aton+0xf6>
 8015720:	2241      	movs	r2, #65	@ 0x41
 8015722:	1a8a      	subs	r2, r1, r2
 8015724:	4313      	orrs	r3, r2
 8015726:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	3301      	adds	r3, #1
 801572c:	607b      	str	r3, [r7, #4]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8015736:	e7b7      	b.n	80156a8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015738:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801573c:	2b2e      	cmp	r3, #46	@ 0x2e
 801573e:	d114      	bne.n	801576a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015740:	f107 030c 	add.w	r3, r7, #12
 8015744:	330c      	adds	r3, #12
 8015746:	69fa      	ldr	r2, [r7, #28]
 8015748:	429a      	cmp	r2, r3
 801574a:	d301      	bcc.n	8015750 <ip4addr_aton+0x124>
        return 0;
 801574c:	2300      	movs	r3, #0
 801574e:	e08b      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	1d1a      	adds	r2, r3, #4
 8015754:	61fa      	str	r2, [r7, #28]
 8015756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015758:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	3301      	adds	r3, #1
 801575e:	607b      	str	r3, [r7, #4]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8015768:	e76c      	b.n	8015644 <ip4addr_aton+0x18>
    } else {
      break;
 801576a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801576c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015770:	2b00      	cmp	r3, #0
 8015772:	d00b      	beq.n	801578c <ip4addr_aton+0x160>
 8015774:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015778:	3301      	adds	r3, #1
 801577a:	4a3d      	ldr	r2, [pc, #244]	@ (8015870 <ip4addr_aton+0x244>)
 801577c:	4413      	add	r3, r2
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	f003 0308 	and.w	r3, r3, #8
 8015784:	2b00      	cmp	r3, #0
 8015786:	d101      	bne.n	801578c <ip4addr_aton+0x160>
    return 0;
 8015788:	2300      	movs	r3, #0
 801578a:	e06d      	b.n	8015868 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801578c:	f107 030c 	add.w	r3, r7, #12
 8015790:	69fa      	ldr	r2, [r7, #28]
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	109b      	asrs	r3, r3, #2
 8015796:	3301      	adds	r3, #1
 8015798:	2b04      	cmp	r3, #4
 801579a:	d853      	bhi.n	8015844 <ip4addr_aton+0x218>
 801579c:	a201      	add	r2, pc, #4	@ (adr r2, 80157a4 <ip4addr_aton+0x178>)
 801579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a2:	bf00      	nop
 80157a4:	080157b9 	.word	0x080157b9
 80157a8:	08015853 	.word	0x08015853
 80157ac:	080157bd 	.word	0x080157bd
 80157b0:	080157df 	.word	0x080157df
 80157b4:	0801580d 	.word	0x0801580d

    case 0:
      return 0;       /* initial nondigit */
 80157b8:	2300      	movs	r3, #0
 80157ba:	e055      	b.n	8015868 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80157bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80157c2:	d301      	bcc.n	80157c8 <ip4addr_aton+0x19c>
        return 0;
 80157c4:	2300      	movs	r3, #0
 80157c6:	e04f      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2bff      	cmp	r3, #255	@ 0xff
 80157cc:	d901      	bls.n	80157d2 <ip4addr_aton+0x1a6>
        return 0;
 80157ce:	2300      	movs	r3, #0
 80157d0:	e04a      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	061b      	lsls	r3, r3, #24
 80157d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157d8:	4313      	orrs	r3, r2
 80157da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80157dc:	e03a      	b.n	8015854 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80157de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80157e4:	d301      	bcc.n	80157ea <ip4addr_aton+0x1be>
        return 0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	e03e      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2bff      	cmp	r3, #255	@ 0xff
 80157ee:	d802      	bhi.n	80157f6 <ip4addr_aton+0x1ca>
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	2bff      	cmp	r3, #255	@ 0xff
 80157f4:	d901      	bls.n	80157fa <ip4addr_aton+0x1ce>
        return 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	e036      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	061a      	lsls	r2, r3, #24
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	041b      	lsls	r3, r3, #16
 8015802:	4313      	orrs	r3, r2
 8015804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015806:	4313      	orrs	r3, r2
 8015808:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801580a:	e023      	b.n	8015854 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580e:	2bff      	cmp	r3, #255	@ 0xff
 8015810:	d901      	bls.n	8015816 <ip4addr_aton+0x1ea>
        return 0;
 8015812:	2300      	movs	r3, #0
 8015814:	e028      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	2bff      	cmp	r3, #255	@ 0xff
 801581a:	d805      	bhi.n	8015828 <ip4addr_aton+0x1fc>
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	2bff      	cmp	r3, #255	@ 0xff
 8015820:	d802      	bhi.n	8015828 <ip4addr_aton+0x1fc>
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	2bff      	cmp	r3, #255	@ 0xff
 8015826:	d901      	bls.n	801582c <ip4addr_aton+0x200>
        return 0;
 8015828:	2300      	movs	r3, #0
 801582a:	e01d      	b.n	8015868 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	061a      	lsls	r2, r3, #24
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	041b      	lsls	r3, r3, #16
 8015834:	431a      	orrs	r2, r3
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	021b      	lsls	r3, r3, #8
 801583a:	4313      	orrs	r3, r2
 801583c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801583e:	4313      	orrs	r3, r2
 8015840:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8015842:	e007      	b.n	8015854 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015844:	4b0b      	ldr	r3, [pc, #44]	@ (8015874 <ip4addr_aton+0x248>)
 8015846:	22f9      	movs	r2, #249	@ 0xf9
 8015848:	490b      	ldr	r1, [pc, #44]	@ (8015878 <ip4addr_aton+0x24c>)
 801584a:	480c      	ldr	r0, [pc, #48]	@ (801587c <ip4addr_aton+0x250>)
 801584c:	f001 fa62 	bl	8016d14 <iprintf>
      break;
 8015850:	e000      	b.n	8015854 <ip4addr_aton+0x228>
      break;
 8015852:	bf00      	nop
  }
  if (addr) {
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d005      	beq.n	8015866 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801585a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801585c:	f7f5 fd7b 	bl	800b356 <lwip_htonl>
 8015860:	4602      	mov	r2, r0
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015866:	2301      	movs	r3, #1
}
 8015868:	4618      	mov	r0, r3
 801586a:	3728      	adds	r7, #40	@ 0x28
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	0801bd77 	.word	0x0801bd77
 8015874:	0801b844 	.word	0x0801b844
 8015878:	0801b880 	.word	0x0801b880
 801587c:	0801b88c 	.word	0x0801b88c

08015880 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b084      	sub	sp, #16
 8015884:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801588a:	4b12      	ldr	r3, [pc, #72]	@ (80158d4 <ip_reass_tmr+0x54>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015890:	e018      	b.n	80158c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	7fdb      	ldrb	r3, [r3, #31]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d00b      	beq.n	80158b2 <ip_reass_tmr+0x32>
      r->timer--;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	7fdb      	ldrb	r3, [r3, #31]
 801589e:	3b01      	subs	r3, #1
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	60fb      	str	r3, [r7, #12]
 80158b0:	e008      	b.n	80158c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158bc:	68b9      	ldr	r1, [r7, #8]
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f000 f80a 	bl	80158d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1e3      	bne.n	8015892 <ip_reass_tmr+0x12>
    }
  }
}
 80158ca:	bf00      	nop
 80158cc:	bf00      	nop
 80158ce:	3710      	adds	r7, #16
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	2000d9f4 	.word	0x2000d9f4

080158d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b088      	sub	sp, #32
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80158e2:	2300      	movs	r3, #0
 80158e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80158e6:	683a      	ldr	r2, [r7, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d105      	bne.n	80158fa <ip_reass_free_complete_datagram+0x22>
 80158ee:	4b45      	ldr	r3, [pc, #276]	@ (8015a04 <ip_reass_free_complete_datagram+0x12c>)
 80158f0:	22ab      	movs	r2, #171	@ 0xab
 80158f2:	4945      	ldr	r1, [pc, #276]	@ (8015a08 <ip_reass_free_complete_datagram+0x130>)
 80158f4:	4845      	ldr	r0, [pc, #276]	@ (8015a0c <ip_reass_free_complete_datagram+0x134>)
 80158f6:	f001 fa0d 	bl	8016d14 <iprintf>
  if (prev != NULL) {
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d00a      	beq.n	8015916 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	429a      	cmp	r2, r3
 8015908:	d005      	beq.n	8015916 <ip_reass_free_complete_datagram+0x3e>
 801590a:	4b3e      	ldr	r3, [pc, #248]	@ (8015a04 <ip_reass_free_complete_datagram+0x12c>)
 801590c:	22ad      	movs	r2, #173	@ 0xad
 801590e:	4940      	ldr	r1, [pc, #256]	@ (8015a10 <ip_reass_free_complete_datagram+0x138>)
 8015910:	483e      	ldr	r0, [pc, #248]	@ (8015a0c <ip_reass_free_complete_datagram+0x134>)
 8015912:	f001 f9ff 	bl	8016d14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	685b      	ldr	r3, [r3, #4]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	889b      	ldrh	r3, [r3, #4]
 8015922:	b29b      	uxth	r3, r3
 8015924:	2b00      	cmp	r3, #0
 8015926:	d12a      	bne.n	801597e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	685b      	ldr	r3, [r3, #4]
 801592c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	6858      	ldr	r0, [r3, #4]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	3308      	adds	r3, #8
 801593e:	2214      	movs	r2, #20
 8015940:	4619      	mov	r1, r3
 8015942:	f001 faca 	bl	8016eda <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015946:	2101      	movs	r1, #1
 8015948:	69b8      	ldr	r0, [r7, #24]
 801594a:	f7ff fb1d 	bl	8014f88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801594e:	69b8      	ldr	r0, [r7, #24]
 8015950:	f7f7 f96c 	bl	800cc2c <pbuf_clen>
 8015954:	4603      	mov	r3, r0
 8015956:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015958:	8bfa      	ldrh	r2, [r7, #30]
 801595a:	8a7b      	ldrh	r3, [r7, #18]
 801595c:	4413      	add	r3, r2
 801595e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015962:	db05      	blt.n	8015970 <ip_reass_free_complete_datagram+0x98>
 8015964:	4b27      	ldr	r3, [pc, #156]	@ (8015a04 <ip_reass_free_complete_datagram+0x12c>)
 8015966:	22bc      	movs	r2, #188	@ 0xbc
 8015968:	492a      	ldr	r1, [pc, #168]	@ (8015a14 <ip_reass_free_complete_datagram+0x13c>)
 801596a:	4828      	ldr	r0, [pc, #160]	@ (8015a0c <ip_reass_free_complete_datagram+0x134>)
 801596c:	f001 f9d2 	bl	8016d14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015970:	8bfa      	ldrh	r2, [r7, #30]
 8015972:	8a7b      	ldrh	r3, [r7, #18]
 8015974:	4413      	add	r3, r2
 8015976:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015978:	69b8      	ldr	r0, [r7, #24]
 801597a:	f7f7 f8c9 	bl	800cb10 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015984:	e01f      	b.n	80159c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015996:	68f8      	ldr	r0, [r7, #12]
 8015998:	f7f7 f948 	bl	800cc2c <pbuf_clen>
 801599c:	4603      	mov	r3, r0
 801599e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80159a0:	8bfa      	ldrh	r2, [r7, #30]
 80159a2:	8a7b      	ldrh	r3, [r7, #18]
 80159a4:	4413      	add	r3, r2
 80159a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159aa:	db05      	blt.n	80159b8 <ip_reass_free_complete_datagram+0xe0>
 80159ac:	4b15      	ldr	r3, [pc, #84]	@ (8015a04 <ip_reass_free_complete_datagram+0x12c>)
 80159ae:	22cc      	movs	r2, #204	@ 0xcc
 80159b0:	4918      	ldr	r1, [pc, #96]	@ (8015a14 <ip_reass_free_complete_datagram+0x13c>)
 80159b2:	4816      	ldr	r0, [pc, #88]	@ (8015a0c <ip_reass_free_complete_datagram+0x134>)
 80159b4:	f001 f9ae 	bl	8016d14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159b8:	8bfa      	ldrh	r2, [r7, #30]
 80159ba:	8a7b      	ldrh	r3, [r7, #18]
 80159bc:	4413      	add	r3, r2
 80159be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	f7f7 f8a5 	bl	800cb10 <pbuf_free>
  while (p != NULL) {
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1dc      	bne.n	8015986 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 f8c2 	bl	8015b58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80159d4:	4b10      	ldr	r3, [pc, #64]	@ (8015a18 <ip_reass_free_complete_datagram+0x140>)
 80159d6:	881b      	ldrh	r3, [r3, #0]
 80159d8:	8bfa      	ldrh	r2, [r7, #30]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d905      	bls.n	80159ea <ip_reass_free_complete_datagram+0x112>
 80159de:	4b09      	ldr	r3, [pc, #36]	@ (8015a04 <ip_reass_free_complete_datagram+0x12c>)
 80159e0:	22d2      	movs	r2, #210	@ 0xd2
 80159e2:	490e      	ldr	r1, [pc, #56]	@ (8015a1c <ip_reass_free_complete_datagram+0x144>)
 80159e4:	4809      	ldr	r0, [pc, #36]	@ (8015a0c <ip_reass_free_complete_datagram+0x134>)
 80159e6:	f001 f995 	bl	8016d14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80159ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015a18 <ip_reass_free_complete_datagram+0x140>)
 80159ec:	881a      	ldrh	r2, [r3, #0]
 80159ee:	8bfb      	ldrh	r3, [r7, #30]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	4b08      	ldr	r3, [pc, #32]	@ (8015a18 <ip_reass_free_complete_datagram+0x140>)
 80159f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80159f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3720      	adds	r7, #32
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	0801b8b4 	.word	0x0801b8b4
 8015a08:	0801b8f0 	.word	0x0801b8f0
 8015a0c:	0801b8fc 	.word	0x0801b8fc
 8015a10:	0801b924 	.word	0x0801b924
 8015a14:	0801b938 	.word	0x0801b938
 8015a18:	2000d9f8 	.word	0x2000d9f8
 8015a1c:	0801b958 	.word	0x0801b958

08015a20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b08a      	sub	sp, #40	@ 0x28
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a32:	2300      	movs	r3, #0
 8015a34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a36:	2300      	movs	r3, #0
 8015a38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a3e:	4b28      	ldr	r3, [pc, #160]	@ (8015ae0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015a44:	e030      	b.n	8015aa8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a48:	695a      	ldr	r2, [r3, #20]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d10c      	bne.n	8015a6c <ip_reass_remove_oldest_datagram+0x4c>
 8015a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a54:	699a      	ldr	r2, [r3, #24]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	691b      	ldr	r3, [r3, #16]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d106      	bne.n	8015a6c <ip_reass_remove_oldest_datagram+0x4c>
 8015a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a60:	899a      	ldrh	r2, [r3, #12]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	889b      	ldrh	r3, [r3, #4]
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d014      	beq.n	8015a96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	3301      	adds	r3, #1
 8015a70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a72:	6a3b      	ldr	r3, [r7, #32]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d104      	bne.n	8015a82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a7c:	69fb      	ldr	r3, [r7, #28]
 8015a7e:	61bb      	str	r3, [r7, #24]
 8015a80:	e009      	b.n	8015a96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a84:	7fda      	ldrb	r2, [r3, #31]
 8015a86:	6a3b      	ldr	r3, [r7, #32]
 8015a88:	7fdb      	ldrb	r3, [r3, #31]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d803      	bhi.n	8015a96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d001      	beq.n	8015aa2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d1cb      	bne.n	8015a46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015aae:	6a3b      	ldr	r3, [r7, #32]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d008      	beq.n	8015ac6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015ab4:	69b9      	ldr	r1, [r7, #24]
 8015ab6:	6a38      	ldr	r0, [r7, #32]
 8015ab8:	f7ff ff0e 	bl	80158d8 <ip_reass_free_complete_datagram>
 8015abc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015abe:	697a      	ldr	r2, [r7, #20]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	4413      	add	r3, r2
 8015ac4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ac6:	697a      	ldr	r2, [r7, #20]
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	da02      	bge.n	8015ad4 <ip_reass_remove_oldest_datagram+0xb4>
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	dcac      	bgt.n	8015a2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ad4:	697b      	ldr	r3, [r7, #20]
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3728      	adds	r7, #40	@ 0x28
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
 8015ade:	bf00      	nop
 8015ae0:	2000d9f4 	.word	0x2000d9f4

08015ae4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015aee:	2004      	movs	r0, #4
 8015af0:	f7f6 f8f4 	bl	800bcdc <memp_malloc>
 8015af4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d110      	bne.n	8015b1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7ff ff8e 	bl	8015a20 <ip_reass_remove_oldest_datagram>
 8015b04:	4602      	mov	r2, r0
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	dc03      	bgt.n	8015b14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b0c:	2004      	movs	r0, #4
 8015b0e:	f7f6 f8e5 	bl	800bcdc <memp_malloc>
 8015b12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d101      	bne.n	8015b1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	e016      	b.n	8015b4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b1e:	2220      	movs	r2, #32
 8015b20:	2100      	movs	r1, #0
 8015b22:	68f8      	ldr	r0, [r7, #12]
 8015b24:	f001 f954 	bl	8016dd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	220f      	movs	r2, #15
 8015b2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b2e:	4b09      	ldr	r3, [pc, #36]	@ (8015b54 <ip_reass_enqueue_new_datagram+0x70>)
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b36:	4a07      	ldr	r2, [pc, #28]	@ (8015b54 <ip_reass_enqueue_new_datagram+0x70>)
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	3308      	adds	r3, #8
 8015b40:	2214      	movs	r2, #20
 8015b42:	6879      	ldr	r1, [r7, #4]
 8015b44:	4618      	mov	r0, r3
 8015b46:	f001 f9c8 	bl	8016eda <memcpy>
  return ipr;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3710      	adds	r7, #16
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	2000d9f4 	.word	0x2000d9f4

08015b58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b62:	4b10      	ldr	r3, [pc, #64]	@ (8015ba4 <ip_reass_dequeue_datagram+0x4c>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d104      	bne.n	8015b76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	4a0c      	ldr	r2, [pc, #48]	@ (8015ba4 <ip_reass_dequeue_datagram+0x4c>)
 8015b72:	6013      	str	r3, [r2, #0]
 8015b74:	e00d      	b.n	8015b92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d106      	bne.n	8015b8a <ip_reass_dequeue_datagram+0x32>
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba8 <ip_reass_dequeue_datagram+0x50>)
 8015b7e:	f240 1245 	movw	r2, #325	@ 0x145
 8015b82:	490a      	ldr	r1, [pc, #40]	@ (8015bac <ip_reass_dequeue_datagram+0x54>)
 8015b84:	480a      	ldr	r0, [pc, #40]	@ (8015bb0 <ip_reass_dequeue_datagram+0x58>)
 8015b86:	f001 f8c5 	bl	8016d14 <iprintf>
    prev->next = ipr->next;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b92:	6879      	ldr	r1, [r7, #4]
 8015b94:	2004      	movs	r0, #4
 8015b96:	f7f6 f917 	bl	800bdc8 <memp_free>
}
 8015b9a:	bf00      	nop
 8015b9c:	3708      	adds	r7, #8
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	2000d9f4 	.word	0x2000d9f4
 8015ba8:	0801b8b4 	.word	0x0801b8b4
 8015bac:	0801b97c 	.word	0x0801b97c
 8015bb0:	0801b8fc 	.word	0x0801b8fc

08015bb4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b08c      	sub	sp, #48	@ 0x30
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	885b      	ldrh	r3, [r3, #2]
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7f5 fba9 	bl	800b32c <lwip_htons>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	f003 030f 	and.w	r3, r3, #15
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015bec:	7e7b      	ldrb	r3, [r7, #25]
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	8b7a      	ldrh	r2, [r7, #26]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d202      	bcs.n	8015bfc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bfa:	e135      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015bfc:	7e7b      	ldrb	r3, [r7, #25]
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	8b7a      	ldrh	r2, [r7, #26]
 8015c02:	1ad3      	subs	r3, r2, r3
 8015c04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	88db      	ldrh	r3, [r3, #6]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7f5 fb8d 	bl	800b32c <lwip_htons>
 8015c12:	4603      	mov	r3, r0
 8015c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	00db      	lsls	r3, r3, #3
 8015c1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c1e:	68bb      	ldr	r3, [r7, #8]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c26:	2200      	movs	r2, #0
 8015c28:	701a      	strb	r2, [r3, #0]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	705a      	strb	r2, [r3, #1]
 8015c2e:	2200      	movs	r2, #0
 8015c30:	709a      	strb	r2, [r3, #2]
 8015c32:	2200      	movs	r2, #0
 8015c34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c38:	8afa      	ldrh	r2, [r7, #22]
 8015c3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c3c:	8afa      	ldrh	r2, [r7, #22]
 8015c3e:	8b7b      	ldrh	r3, [r7, #26]
 8015c40:	4413      	add	r3, r2
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c4a:	88db      	ldrh	r3, [r3, #6]
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	8afa      	ldrh	r2, [r7, #22]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d902      	bls.n	8015c5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c58:	e106      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c60:	e068      	b.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c6a:	889b      	ldrh	r3, [r3, #4]
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	889b      	ldrh	r3, [r3, #4]
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d235      	bcs.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d020      	beq.n	8015cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c86:	889b      	ldrh	r3, [r3, #4]
 8015c88:	b29a      	uxth	r2, r3
 8015c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c8c:	88db      	ldrh	r3, [r3, #6]
 8015c8e:	b29b      	uxth	r3, r3
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d307      	bcc.n	8015ca4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c96:	88db      	ldrh	r3, [r3, #6]
 8015c98:	b29a      	uxth	r2, r3
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	889b      	ldrh	r3, [r3, #4]
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d902      	bls.n	8015caa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015ca8:	e0de      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cb2:	88db      	ldrh	r3, [r3, #6]
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb8:	889b      	ldrh	r3, [r3, #4]
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d03d      	beq.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015cc4:	e03a      	b.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	889b      	ldrh	r3, [r3, #4]
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d902      	bls.n	8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cda:	e0c5      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	68ba      	ldr	r2, [r7, #8]
 8015ce0:	605a      	str	r2, [r3, #4]
      break;
 8015ce2:	e02b      	b.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce6:	889b      	ldrh	r3, [r3, #4]
 8015ce8:	b29a      	uxth	r2, r3
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	889b      	ldrh	r3, [r3, #4]
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d102      	bne.n	8015cfa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cf8:	e0b6      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cfc:	889b      	ldrh	r3, [r3, #4]
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	88db      	ldrh	r3, [r3, #6]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d202      	bcs.n	8015d10 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d0e:	e0ab      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d009      	beq.n	8015d2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d18:	88db      	ldrh	r3, [r3, #6]
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	889b      	ldrh	r3, [r3, #4]
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d001      	beq.n	8015d2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d26:	2300      	movs	r3, #0
 8015d28:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d193      	bne.n	8015c62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d3a:	e000      	b.n	8015d3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d3c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d12d      	bne.n	8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d01c      	beq.n	8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d4c:	88db      	ldrh	r3, [r3, #6]
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d52:	889b      	ldrh	r3, [r3, #4]
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d906      	bls.n	8015d68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d5a:	4b45      	ldr	r3, [pc, #276]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d5c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015d60:	4944      	ldr	r1, [pc, #272]	@ (8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d62:	4845      	ldr	r0, [pc, #276]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d64:	f000 ffd6 	bl	8016d14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d6a:	68ba      	ldr	r2, [r7, #8]
 8015d6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d70:	88db      	ldrh	r3, [r3, #6]
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d76:	889b      	ldrh	r3, [r3, #4]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d010      	beq.n	8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	623b      	str	r3, [r7, #32]
 8015d82:	e00d      	b.n	8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d006      	beq.n	8015d9a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d8c:	4b38      	ldr	r3, [pc, #224]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d8e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015d92:	493a      	ldr	r1, [pc, #232]	@ (8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d94:	4838      	ldr	r0, [pc, #224]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d96:	f000 ffbd 	bl	8016d14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d105      	bne.n	8015db2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	7f9b      	ldrb	r3, [r3, #30]
 8015daa:	f003 0301 	and.w	r3, r3, #1
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d059      	beq.n	8015e66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015db2:	6a3b      	ldr	r3, [r7, #32]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d04f      	beq.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d006      	beq.n	8015dce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	889b      	ldrh	r3, [r3, #4]
 8015dc8:	b29b      	uxth	r3, r3
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d002      	beq.n	8015dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	623b      	str	r3, [r7, #32]
 8015dd2:	e041      	b.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015dde:	e012      	b.n	8015e06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015de8:	88db      	ldrh	r3, [r3, #6]
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	889b      	ldrh	r3, [r3, #4]
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d002      	beq.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	623b      	str	r3, [r7, #32]
            break;
 8015dfa:	e007      	b.n	8015e0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d1e9      	bne.n	8015de0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e0c:	6a3b      	ldr	r3, [r7, #32]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d022      	beq.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d106      	bne.n	8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e1a:	4b15      	ldr	r3, [pc, #84]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e1c:	f240 12df 	movw	r2, #479	@ 0x1df
 8015e20:	4917      	ldr	r1, [pc, #92]	@ (8015e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e22:	4815      	ldr	r0, [pc, #84]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e24:	f000 ff76 	bl	8016d14 <iprintf>
          LWIP_ASSERT("sanity check",
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d106      	bne.n	8015e42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e34:	4b0e      	ldr	r3, [pc, #56]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e36:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015e3a:	4911      	ldr	r1, [pc, #68]	@ (8015e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e3c:	480e      	ldr	r0, [pc, #56]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e3e:	f000 ff69 	bl	8016d14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d006      	beq.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e4a:	4b09      	ldr	r3, [pc, #36]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e4c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015e50:	490c      	ldr	r1, [pc, #48]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e52:	4809      	ldr	r0, [pc, #36]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e54:	f000 ff5e 	bl	8016d14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e58:	6a3b      	ldr	r3, [r7, #32]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	bf14      	ite	ne
 8015e5e:	2301      	movne	r3, #1
 8015e60:	2300      	moveq	r3, #0
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	e000      	b.n	8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e66:	2300      	movs	r3, #0
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3730      	adds	r7, #48	@ 0x30
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}
 8015e70:	0801b8b4 	.word	0x0801b8b4
 8015e74:	0801b998 	.word	0x0801b998
 8015e78:	0801b8fc 	.word	0x0801b8fc
 8015e7c:	0801b9b8 	.word	0x0801b9b8
 8015e80:	0801b9f0 	.word	0x0801b9f0
 8015e84:	0801ba00 	.word	0x0801ba00

08015e88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b08e      	sub	sp, #56	@ 0x38
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	f003 030f 	and.w	r3, r3, #15
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	009b      	lsls	r3, r3, #2
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	2b14      	cmp	r3, #20
 8015ea6:	f040 8171 	bne.w	801618c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eac:	88db      	ldrh	r3, [r3, #6]
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7f5 fa3b 	bl	800b32c <lwip_htons>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	00db      	lsls	r3, r3, #3
 8015ec0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ec4:	885b      	ldrh	r3, [r3, #2]
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f5 fa2f 	bl	800b32c <lwip_htons>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	f003 030f 	and.w	r3, r3, #15
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015eea:	429a      	cmp	r2, r3
 8015eec:	f0c0 8150 	bcc.w	8016190 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7f6 fe95 	bl	800cc2c <pbuf_clen>
 8015f02:	4603      	mov	r3, r0
 8015f04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015f06:	4b8c      	ldr	r3, [pc, #560]	@ (8016138 <ip4_reass+0x2b0>)
 8015f08:	881b      	ldrh	r3, [r3, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	8c3b      	ldrh	r3, [r7, #32]
 8015f0e:	4413      	add	r3, r2
 8015f10:	2b0a      	cmp	r3, #10
 8015f12:	dd10      	ble.n	8015f36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f14:	8c3b      	ldrh	r3, [r7, #32]
 8015f16:	4619      	mov	r1, r3
 8015f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f1a:	f7ff fd81 	bl	8015a20 <ip_reass_remove_oldest_datagram>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f000 8137 	beq.w	8016194 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f26:	4b84      	ldr	r3, [pc, #528]	@ (8016138 <ip4_reass+0x2b0>)
 8015f28:	881b      	ldrh	r3, [r3, #0]
 8015f2a:	461a      	mov	r2, r3
 8015f2c:	8c3b      	ldrh	r3, [r7, #32]
 8015f2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f30:	2b0a      	cmp	r3, #10
 8015f32:	f300 812f 	bgt.w	8016194 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f36:	4b81      	ldr	r3, [pc, #516]	@ (801613c <ip4_reass+0x2b4>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f3c:	e015      	b.n	8015f6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f40:	695a      	ldr	r2, [r3, #20]
 8015f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d10c      	bne.n	8015f64 <ip4_reass+0xdc>
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f4c:	699a      	ldr	r2, [r3, #24]
 8015f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f50:	691b      	ldr	r3, [r3, #16]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d106      	bne.n	8015f64 <ip4_reass+0xdc>
 8015f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f58:	899a      	ldrh	r2, [r3, #12]
 8015f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f5c:	889b      	ldrh	r3, [r3, #4]
 8015f5e:	b29b      	uxth	r3, r3
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d006      	beq.n	8015f72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d1e6      	bne.n	8015f3e <ip4_reass+0xb6>
 8015f70:	e000      	b.n	8015f74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d109      	bne.n	8015f8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f7a:	8c3b      	ldrh	r3, [r7, #32]
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f80:	f7ff fdb0 	bl	8015ae4 <ip_reass_enqueue_new_datagram>
 8015f84:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d11c      	bne.n	8015fc6 <ip4_reass+0x13e>
      goto nullreturn;
 8015f8c:	e105      	b.n	801619a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f90:	88db      	ldrh	r3, [r3, #6]
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7f5 f9c9 	bl	800b32c <lwip_htons>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d110      	bne.n	8015fc6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa6:	89db      	ldrh	r3, [r3, #14]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f5 f9bf 	bl	800b32c <lwip_htons>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d006      	beq.n	8015fc6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fba:	3308      	adds	r3, #8
 8015fbc:	2214      	movs	r2, #20
 8015fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f000 ff8a 	bl	8016eda <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fc8:	88db      	ldrh	r3, [r3, #6]
 8015fca:	b29b      	uxth	r3, r3
 8015fcc:	f003 0320 	and.w	r3, r3, #32
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	bf0c      	ite	eq
 8015fd4:	2301      	moveq	r3, #1
 8015fd6:	2300      	movne	r3, #0
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015fdc:	69fb      	ldr	r3, [r7, #28]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d00e      	beq.n	8016000 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fe2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015fe6:	4413      	add	r3, r2
 8015fe8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015fea:	8b7a      	ldrh	r2, [r7, #26]
 8015fec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	f0c0 80a0 	bcc.w	8016134 <ip4_reass+0x2ac>
 8015ff4:	8b7b      	ldrh	r3, [r7, #26]
 8015ff6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	f200 809a 	bhi.w	8016134 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016000:	69fa      	ldr	r2, [r7, #28]
 8016002:	6879      	ldr	r1, [r7, #4]
 8016004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016006:	f7ff fdd5 	bl	8015bb4 <ip_reass_chain_frag_into_datagram_and_validate>
 801600a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016012:	f000 809b 	beq.w	801614c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016016:	4b48      	ldr	r3, [pc, #288]	@ (8016138 <ip4_reass+0x2b0>)
 8016018:	881a      	ldrh	r2, [r3, #0]
 801601a:	8c3b      	ldrh	r3, [r7, #32]
 801601c:	4413      	add	r3, r2
 801601e:	b29a      	uxth	r2, r3
 8016020:	4b45      	ldr	r3, [pc, #276]	@ (8016138 <ip4_reass+0x2b0>)
 8016022:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016024:	69fb      	ldr	r3, [r7, #28]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d00d      	beq.n	8016046 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801602a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801602c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801602e:	4413      	add	r3, r2
 8016030:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016034:	8a7a      	ldrh	r2, [r7, #18]
 8016036:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603a:	7f9b      	ldrb	r3, [r3, #30]
 801603c:	f043 0301 	orr.w	r3, r3, #1
 8016040:	b2da      	uxtb	r2, r3
 8016042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016044:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	2b01      	cmp	r3, #1
 801604a:	d171      	bne.n	8016130 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604e:	8b9b      	ldrh	r3, [r3, #28]
 8016050:	3314      	adds	r3, #20
 8016052:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016068:	3308      	adds	r3, #8
 801606a:	2214      	movs	r2, #20
 801606c:	4619      	mov	r1, r3
 801606e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016070:	f000 ff33 	bl	8016eda <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016074:	8a3b      	ldrh	r3, [r7, #16]
 8016076:	4618      	mov	r0, r3
 8016078:	f7f5 f958 	bl	800b32c <lwip_htons>
 801607c:	4603      	mov	r3, r0
 801607e:	461a      	mov	r2, r3
 8016080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016082:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016086:	2200      	movs	r2, #0
 8016088:	719a      	strb	r2, [r3, #6]
 801608a:	2200      	movs	r2, #0
 801608c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016090:	2200      	movs	r2, #0
 8016092:	729a      	strb	r2, [r3, #10]
 8016094:	2200      	movs	r2, #0
 8016096:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801609e:	e00d      	b.n	80160bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80160a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80160a6:	2114      	movs	r1, #20
 80160a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80160aa:	f7f6 fcab 	bl	800ca04 <pbuf_remove_header>
      pbuf_cat(p, r);
 80160ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7f6 fdfb 	bl	800ccac <pbuf_cat>
      r = iprh->next_pbuf;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80160bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d1ee      	bne.n	80160a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160c2:	4b1e      	ldr	r3, [pc, #120]	@ (801613c <ip4_reass+0x2b4>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d102      	bne.n	80160d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80160cc:	2300      	movs	r3, #0
 80160ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160d0:	e010      	b.n	80160f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160d2:	4b1a      	ldr	r3, [pc, #104]	@ (801613c <ip4_reass+0x2b4>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160d8:	e007      	b.n	80160ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80160da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d006      	beq.n	80160f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1f4      	bne.n	80160da <ip4_reass+0x252>
 80160f0:	e000      	b.n	80160f4 <ip4_reass+0x26c>
          break;
 80160f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80160f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80160f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80160f8:	f7ff fd2e 	bl	8015b58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f7f6 fd95 	bl	800cc2c <pbuf_clen>
 8016102:	4603      	mov	r3, r0
 8016104:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016106:	4b0c      	ldr	r3, [pc, #48]	@ (8016138 <ip4_reass+0x2b0>)
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	8c3a      	ldrh	r2, [r7, #32]
 801610c:	429a      	cmp	r2, r3
 801610e:	d906      	bls.n	801611e <ip4_reass+0x296>
 8016110:	4b0b      	ldr	r3, [pc, #44]	@ (8016140 <ip4_reass+0x2b8>)
 8016112:	f240 229b 	movw	r2, #667	@ 0x29b
 8016116:	490b      	ldr	r1, [pc, #44]	@ (8016144 <ip4_reass+0x2bc>)
 8016118:	480b      	ldr	r0, [pc, #44]	@ (8016148 <ip4_reass+0x2c0>)
 801611a:	f000 fdfb 	bl	8016d14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801611e:	4b06      	ldr	r3, [pc, #24]	@ (8016138 <ip4_reass+0x2b0>)
 8016120:	881a      	ldrh	r2, [r3, #0]
 8016122:	8c3b      	ldrh	r3, [r7, #32]
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	b29a      	uxth	r2, r3
 8016128:	4b03      	ldr	r3, [pc, #12]	@ (8016138 <ip4_reass+0x2b0>)
 801612a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	e038      	b.n	80161a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016130:	2300      	movs	r3, #0
 8016132:	e036      	b.n	80161a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016134:	bf00      	nop
 8016136:	e00a      	b.n	801614e <ip4_reass+0x2c6>
 8016138:	2000d9f8 	.word	0x2000d9f8
 801613c:	2000d9f4 	.word	0x2000d9f4
 8016140:	0801b8b4 	.word	0x0801b8b4
 8016144:	0801ba24 	.word	0x0801ba24
 8016148:	0801b8fc 	.word	0x0801b8fc
    goto nullreturn_ipr;
 801614c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016150:	2b00      	cmp	r3, #0
 8016152:	d106      	bne.n	8016162 <ip4_reass+0x2da>
 8016154:	4b15      	ldr	r3, [pc, #84]	@ (80161ac <ip4_reass+0x324>)
 8016156:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801615a:	4915      	ldr	r1, [pc, #84]	@ (80161b0 <ip4_reass+0x328>)
 801615c:	4815      	ldr	r0, [pc, #84]	@ (80161b4 <ip4_reass+0x32c>)
 801615e:	f000 fdd9 	bl	8016d14 <iprintf>
  if (ipr->p == NULL) {
 8016162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d116      	bne.n	8016198 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801616a:	4b13      	ldr	r3, [pc, #76]	@ (80161b8 <ip4_reass+0x330>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016170:	429a      	cmp	r2, r3
 8016172:	d006      	beq.n	8016182 <ip4_reass+0x2fa>
 8016174:	4b0d      	ldr	r3, [pc, #52]	@ (80161ac <ip4_reass+0x324>)
 8016176:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801617a:	4910      	ldr	r1, [pc, #64]	@ (80161bc <ip4_reass+0x334>)
 801617c:	480d      	ldr	r0, [pc, #52]	@ (80161b4 <ip4_reass+0x32c>)
 801617e:	f000 fdc9 	bl	8016d14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016182:	2100      	movs	r1, #0
 8016184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016186:	f7ff fce7 	bl	8015b58 <ip_reass_dequeue_datagram>
 801618a:	e006      	b.n	801619a <ip4_reass+0x312>
    goto nullreturn;
 801618c:	bf00      	nop
 801618e:	e004      	b.n	801619a <ip4_reass+0x312>
    goto nullreturn;
 8016190:	bf00      	nop
 8016192:	e002      	b.n	801619a <ip4_reass+0x312>
      goto nullreturn;
 8016194:	bf00      	nop
 8016196:	e000      	b.n	801619a <ip4_reass+0x312>
  }

nullreturn:
 8016198:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f7f6 fcb8 	bl	800cb10 <pbuf_free>
  return NULL;
 80161a0:	2300      	movs	r3, #0
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3738      	adds	r7, #56	@ 0x38
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	0801b8b4 	.word	0x0801b8b4
 80161b0:	0801ba40 	.word	0x0801ba40
 80161b4:	0801b8fc 	.word	0x0801b8fc
 80161b8:	2000d9f4 	.word	0x2000d9f4
 80161bc:	0801ba4c 	.word	0x0801ba4c

080161c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80161c4:	2005      	movs	r0, #5
 80161c6:	f7f5 fd89 	bl	800bcdc <memp_malloc>
 80161ca:	4603      	mov	r3, r0
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d106      	bne.n	80161ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80161de:	4b07      	ldr	r3, [pc, #28]	@ (80161fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80161e0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80161e4:	4906      	ldr	r1, [pc, #24]	@ (8016200 <ip_frag_free_pbuf_custom_ref+0x30>)
 80161e6:	4807      	ldr	r0, [pc, #28]	@ (8016204 <ip_frag_free_pbuf_custom_ref+0x34>)
 80161e8:	f000 fd94 	bl	8016d14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80161ec:	6879      	ldr	r1, [r7, #4]
 80161ee:	2005      	movs	r0, #5
 80161f0:	f7f5 fdea 	bl	800bdc8 <memp_free>
}
 80161f4:	bf00      	nop
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	0801b8b4 	.word	0x0801b8b4
 8016200:	0801ba6c 	.word	0x0801ba6c
 8016204:	0801b8fc 	.word	0x0801b8fc

08016208 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <ipfrag_free_pbuf_custom+0x20>
 801621a:	4b11      	ldr	r3, [pc, #68]	@ (8016260 <ipfrag_free_pbuf_custom+0x58>)
 801621c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016220:	4910      	ldr	r1, [pc, #64]	@ (8016264 <ipfrag_free_pbuf_custom+0x5c>)
 8016222:	4811      	ldr	r0, [pc, #68]	@ (8016268 <ipfrag_free_pbuf_custom+0x60>)
 8016224:	f000 fd76 	bl	8016d14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016228:	68fa      	ldr	r2, [r7, #12]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	429a      	cmp	r2, r3
 801622e:	d006      	beq.n	801623e <ipfrag_free_pbuf_custom+0x36>
 8016230:	4b0b      	ldr	r3, [pc, #44]	@ (8016260 <ipfrag_free_pbuf_custom+0x58>)
 8016232:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016236:	490d      	ldr	r1, [pc, #52]	@ (801626c <ipfrag_free_pbuf_custom+0x64>)
 8016238:	480b      	ldr	r0, [pc, #44]	@ (8016268 <ipfrag_free_pbuf_custom+0x60>)
 801623a:	f000 fd6b 	bl	8016d14 <iprintf>
  if (pcr->original != NULL) {
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	695b      	ldr	r3, [r3, #20]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d004      	beq.n	8016250 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	695b      	ldr	r3, [r3, #20]
 801624a:	4618      	mov	r0, r3
 801624c:	f7f6 fc60 	bl	800cb10 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016250:	68f8      	ldr	r0, [r7, #12]
 8016252:	f7ff ffbd 	bl	80161d0 <ip_frag_free_pbuf_custom_ref>
}
 8016256:	bf00      	nop
 8016258:	3710      	adds	r7, #16
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	0801b8b4 	.word	0x0801b8b4
 8016264:	0801ba78 	.word	0x0801ba78
 8016268:	0801b8fc 	.word	0x0801b8fc
 801626c:	0801ba84 	.word	0x0801ba84

08016270 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b094      	sub	sp, #80	@ 0x50
 8016274:	af02      	add	r7, sp, #8
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801627c:	2300      	movs	r3, #0
 801627e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016286:	3b14      	subs	r3, #20
 8016288:	2b00      	cmp	r3, #0
 801628a:	da00      	bge.n	801628e <ip4_frag+0x1e>
 801628c:	3307      	adds	r3, #7
 801628e:	10db      	asrs	r3, r3, #3
 8016290:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016292:	2314      	movs	r3, #20
 8016294:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801629e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80162a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	f003 030f 	and.w	r3, r3, #15
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	2b14      	cmp	r3, #20
 80162b0:	d002      	beq.n	80162b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162b2:	f06f 0305 	mvn.w	r3, #5
 80162b6:	e110      	b.n	80164da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	895b      	ldrh	r3, [r3, #10]
 80162bc:	2b13      	cmp	r3, #19
 80162be:	d809      	bhi.n	80162d4 <ip4_frag+0x64>
 80162c0:	4b88      	ldr	r3, [pc, #544]	@ (80164e4 <ip4_frag+0x274>)
 80162c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80162c6:	4988      	ldr	r1, [pc, #544]	@ (80164e8 <ip4_frag+0x278>)
 80162c8:	4888      	ldr	r0, [pc, #544]	@ (80164ec <ip4_frag+0x27c>)
 80162ca:	f000 fd23 	bl	8016d14 <iprintf>
 80162ce:	f06f 0305 	mvn.w	r3, #5
 80162d2:	e102      	b.n	80164da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80162d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162d6:	88db      	ldrh	r3, [r3, #6]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4618      	mov	r0, r3
 80162dc:	f7f5 f826 	bl	800b32c <lwip_htons>
 80162e0:	4603      	mov	r3, r0
 80162e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80162e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80162ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80162f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	891b      	ldrh	r3, [r3, #8]
 80162fa:	3b14      	subs	r3, #20
 80162fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016300:	e0e1      	b.n	80164c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016302:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016304:	00db      	lsls	r3, r3, #3
 8016306:	b29b      	uxth	r3, r3
 8016308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801630c:	4293      	cmp	r3, r2
 801630e:	bf28      	it	cs
 8016310:	4613      	movcs	r3, r2
 8016312:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016314:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016318:	2114      	movs	r1, #20
 801631a:	200e      	movs	r0, #14
 801631c:	f7f6 f914 	bl	800c548 <pbuf_alloc>
 8016320:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016324:	2b00      	cmp	r3, #0
 8016326:	f000 80d5 	beq.w	80164d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632c:	895b      	ldrh	r3, [r3, #10]
 801632e:	2b13      	cmp	r3, #19
 8016330:	d806      	bhi.n	8016340 <ip4_frag+0xd0>
 8016332:	4b6c      	ldr	r3, [pc, #432]	@ (80164e4 <ip4_frag+0x274>)
 8016334:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016338:	496d      	ldr	r1, [pc, #436]	@ (80164f0 <ip4_frag+0x280>)
 801633a:	486c      	ldr	r0, [pc, #432]	@ (80164ec <ip4_frag+0x27c>)
 801633c:	f000 fcea 	bl	8016d14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016342:	685b      	ldr	r3, [r3, #4]
 8016344:	2214      	movs	r2, #20
 8016346:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016348:	4618      	mov	r0, r3
 801634a:	f000 fdc6 	bl	8016eda <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016354:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016356:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801635a:	e064      	b.n	8016426 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	895a      	ldrh	r2, [r3, #10]
 8016360:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016362:	1ad3      	subs	r3, r2, r3
 8016364:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	895b      	ldrh	r3, [r3, #10]
 801636a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801636c:	429a      	cmp	r2, r3
 801636e:	d906      	bls.n	801637e <ip4_frag+0x10e>
 8016370:	4b5c      	ldr	r3, [pc, #368]	@ (80164e4 <ip4_frag+0x274>)
 8016372:	f240 322d 	movw	r2, #813	@ 0x32d
 8016376:	495f      	ldr	r1, [pc, #380]	@ (80164f4 <ip4_frag+0x284>)
 8016378:	485c      	ldr	r0, [pc, #368]	@ (80164ec <ip4_frag+0x27c>)
 801637a:	f000 fccb 	bl	8016d14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801637e:	8bfa      	ldrh	r2, [r7, #30]
 8016380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016384:	4293      	cmp	r3, r2
 8016386:	bf28      	it	cs
 8016388:	4613      	movcs	r3, r2
 801638a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801638e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016392:	2b00      	cmp	r3, #0
 8016394:	d105      	bne.n	80163a2 <ip4_frag+0x132>
        poff = 0;
 8016396:	2300      	movs	r3, #0
 8016398:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	60fb      	str	r3, [r7, #12]
        continue;
 80163a0:	e041      	b.n	8016426 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80163a2:	f7ff ff0d 	bl	80161c0 <ip_frag_alloc_pbuf_custom_ref>
 80163a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d103      	bne.n	80163b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163b0:	f7f6 fbae 	bl	800cb10 <pbuf_free>
        goto memerr;
 80163b4:	e08f      	b.n	80164d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80163be:	4413      	add	r3, r2
 80163c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80163c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80163c8:	9201      	str	r2, [sp, #4]
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	4603      	mov	r3, r0
 80163ce:	2241      	movs	r2, #65	@ 0x41
 80163d0:	2000      	movs	r0, #0
 80163d2:	f7f6 f9e3 	bl	800c79c <pbuf_alloced_custom>
 80163d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d106      	bne.n	80163ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80163de:	69b8      	ldr	r0, [r7, #24]
 80163e0:	f7ff fef6 	bl	80161d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80163e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163e6:	f7f6 fb93 	bl	800cb10 <pbuf_free>
        goto memerr;
 80163ea:	e074      	b.n	80164d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80163ec:	68f8      	ldr	r0, [r7, #12]
 80163ee:	f7f6 fc35 	bl	800cc5c <pbuf_ref>
      pcr->original = p;
 80163f2:	69bb      	ldr	r3, [r7, #24]
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80163f8:	69bb      	ldr	r3, [r7, #24]
 80163fa:	4a3f      	ldr	r2, [pc, #252]	@ (80164f8 <ip4_frag+0x288>)
 80163fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80163fe:	6979      	ldr	r1, [r7, #20]
 8016400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016402:	f7f6 fc53 	bl	800ccac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016406:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801640a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801640e:	1ad3      	subs	r3, r2, r3
 8016410:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016418:	2b00      	cmp	r3, #0
 801641a:	d004      	beq.n	8016426 <ip4_frag+0x1b6>
        poff = 0;
 801641c:	2300      	movs	r3, #0
 801641e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016426:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801642a:	2b00      	cmp	r3, #0
 801642c:	d196      	bne.n	801635c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801642e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016434:	4413      	add	r3, r2
 8016436:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801643c:	f1a3 0213 	sub.w	r2, r3, #19
 8016440:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016444:	429a      	cmp	r2, r3
 8016446:	bfcc      	ite	gt
 8016448:	2301      	movgt	r3, #1
 801644a:	2300      	movle	r3, #0
 801644c:	b2db      	uxtb	r3, r3
 801644e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016458:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801645a:	6a3b      	ldr	r3, [r7, #32]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d002      	beq.n	8016466 <ip4_frag+0x1f6>
 8016460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016462:	2b00      	cmp	r3, #0
 8016464:	d003      	beq.n	801646e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016466:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801646c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801646e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016470:	4618      	mov	r0, r3
 8016472:	f7f4 ff5b 	bl	800b32c <lwip_htons>
 8016476:	4603      	mov	r3, r0
 8016478:	461a      	mov	r2, r3
 801647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801647c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801647e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016480:	3314      	adds	r3, #20
 8016482:	b29b      	uxth	r3, r3
 8016484:	4618      	mov	r0, r3
 8016486:	f7f4 ff51 	bl	800b32c <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	461a      	mov	r2, r3
 801648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016490:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016494:	2200      	movs	r2, #0
 8016496:	729a      	strb	r2, [r3, #10]
 8016498:	2200      	movs	r2, #0
 801649a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	695b      	ldr	r3, [r3, #20]
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164a4:	68b8      	ldr	r0, [r7, #8]
 80164a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164aa:	f7f6 fb31 	bl	800cb10 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80164ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80164be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164c0:	4413      	add	r3, r2
 80164c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80164c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	f47f af19 	bne.w	8016302 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80164d0:	2300      	movs	r3, #0
 80164d2:	e002      	b.n	80164da <ip4_frag+0x26a>
      goto memerr;
 80164d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80164d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3748      	adds	r7, #72	@ 0x48
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	0801b8b4 	.word	0x0801b8b4
 80164e8:	0801ba90 	.word	0x0801ba90
 80164ec:	0801b8fc 	.word	0x0801b8fc
 80164f0:	0801baac 	.word	0x0801baac
 80164f4:	0801bacc 	.word	0x0801bacc
 80164f8:	08016209 	.word	0x08016209

080164fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b086      	sub	sp, #24
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016506:	230e      	movs	r3, #14
 8016508:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	895b      	ldrh	r3, [r3, #10]
 801650e:	2b0e      	cmp	r3, #14
 8016510:	d96e      	bls.n	80165f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	7bdb      	ldrb	r3, [r3, #15]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d106      	bne.n	8016528 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016520:	3301      	adds	r3, #1
 8016522:	b2da      	uxtb	r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	7b1a      	ldrb	r2, [r3, #12]
 8016532:	7b5b      	ldrb	r3, [r3, #13]
 8016534:	021b      	lsls	r3, r3, #8
 8016536:	4313      	orrs	r3, r2
 8016538:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	f003 0301 	and.w	r3, r3, #1
 8016542:	2b00      	cmp	r3, #0
 8016544:	d023      	beq.n	801658e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016546:	693b      	ldr	r3, [r7, #16]
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	2b01      	cmp	r3, #1
 801654c:	d10f      	bne.n	801656e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	785b      	ldrb	r3, [r3, #1]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d11b      	bne.n	801658e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801655a:	2b5e      	cmp	r3, #94	@ 0x5e
 801655c:	d117      	bne.n	801658e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	7b5b      	ldrb	r3, [r3, #13]
 8016562:	f043 0310 	orr.w	r3, r3, #16
 8016566:	b2da      	uxtb	r2, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	735a      	strb	r2, [r3, #13]
 801656c:	e00f      	b.n	801658e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801656e:	693b      	ldr	r3, [r7, #16]
 8016570:	2206      	movs	r2, #6
 8016572:	4928      	ldr	r1, [pc, #160]	@ (8016614 <ethernet_input+0x118>)
 8016574:	4618      	mov	r0, r3
 8016576:	f000 fc01 	bl	8016d7c <memcmp>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d106      	bne.n	801658e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	7b5b      	ldrb	r3, [r3, #13]
 8016584:	f043 0308 	orr.w	r3, r3, #8
 8016588:	b2da      	uxtb	r2, r3
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801658e:	89fb      	ldrh	r3, [r7, #14]
 8016590:	2b08      	cmp	r3, #8
 8016592:	d003      	beq.n	801659c <ethernet_input+0xa0>
 8016594:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016598:	d014      	beq.n	80165c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801659a:	e032      	b.n	8016602 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165a2:	f003 0308 	and.w	r3, r3, #8
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d024      	beq.n	80165f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165aa:	8afb      	ldrh	r3, [r7, #22]
 80165ac:	4619      	mov	r1, r3
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7f6 fa28 	bl	800ca04 <pbuf_remove_header>
 80165b4:	4603      	mov	r3, r0
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d11e      	bne.n	80165f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165ba:	6839      	ldr	r1, [r7, #0]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f7fe fdf7 	bl	80151b0 <ip4_input>
      break;
 80165c2:	e013      	b.n	80165ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165ca:	f003 0308 	and.w	r3, r3, #8
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d014      	beq.n	80165fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165d2:	8afb      	ldrh	r3, [r7, #22]
 80165d4:	4619      	mov	r1, r3
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f7f6 fa14 	bl	800ca04 <pbuf_remove_header>
 80165dc:	4603      	mov	r3, r0
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d10e      	bne.n	8016600 <ethernet_input+0x104>
        etharp_input(p, netif);
 80165e2:	6839      	ldr	r1, [r7, #0]
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f7fd ff97 	bl	8014518 <etharp_input>
      break;
 80165ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80165ec:	2300      	movs	r3, #0
 80165ee:	e00c      	b.n	801660a <ethernet_input+0x10e>
    goto free_and_return;
 80165f0:	bf00      	nop
 80165f2:	e006      	b.n	8016602 <ethernet_input+0x106>
        goto free_and_return;
 80165f4:	bf00      	nop
 80165f6:	e004      	b.n	8016602 <ethernet_input+0x106>
        goto free_and_return;
 80165f8:	bf00      	nop
 80165fa:	e002      	b.n	8016602 <ethernet_input+0x106>
        goto free_and_return;
 80165fc:	bf00      	nop
 80165fe:	e000      	b.n	8016602 <ethernet_input+0x106>
        goto free_and_return;
 8016600:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7f6 fa84 	bl	800cb10 <pbuf_free>
  return ERR_OK;
 8016608:	2300      	movs	r3, #0
}
 801660a:	4618      	mov	r0, r3
 801660c:	3718      	adds	r7, #24
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	0801bcf0 	.word	0x0801bcf0

08016618 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016618:	b580      	push	{r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	607a      	str	r2, [r7, #4]
 8016624:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016626:	8c3b      	ldrh	r3, [r7, #32]
 8016628:	4618      	mov	r0, r3
 801662a:	f7f4 fe7f 	bl	800b32c <lwip_htons>
 801662e:	4603      	mov	r3, r0
 8016630:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016632:	210e      	movs	r1, #14
 8016634:	68b8      	ldr	r0, [r7, #8]
 8016636:	f7f6 f9d5 	bl	800c9e4 <pbuf_add_header>
 801663a:	4603      	mov	r3, r0
 801663c:	2b00      	cmp	r3, #0
 801663e:	d125      	bne.n	801668c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	8afa      	ldrh	r2, [r7, #22]
 801664a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	2206      	movs	r2, #6
 8016650:	6839      	ldr	r1, [r7, #0]
 8016652:	4618      	mov	r0, r3
 8016654:	f000 fc41 	bl	8016eda <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	3306      	adds	r3, #6
 801665c:	2206      	movs	r2, #6
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	4618      	mov	r0, r3
 8016662:	f000 fc3a 	bl	8016eda <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801666c:	2b06      	cmp	r3, #6
 801666e:	d006      	beq.n	801667e <ethernet_output+0x66>
 8016670:	4b0a      	ldr	r3, [pc, #40]	@ (801669c <ethernet_output+0x84>)
 8016672:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016676:	490a      	ldr	r1, [pc, #40]	@ (80166a0 <ethernet_output+0x88>)
 8016678:	480a      	ldr	r0, [pc, #40]	@ (80166a4 <ethernet_output+0x8c>)
 801667a:	f000 fb4b 	bl	8016d14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	699b      	ldr	r3, [r3, #24]
 8016682:	68b9      	ldr	r1, [r7, #8]
 8016684:	68f8      	ldr	r0, [r7, #12]
 8016686:	4798      	blx	r3
 8016688:	4603      	mov	r3, r0
 801668a:	e002      	b.n	8016692 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801668c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801668e:	f06f 0301 	mvn.w	r3, #1
}
 8016692:	4618      	mov	r0, r3
 8016694:	3718      	adds	r7, #24
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}
 801669a:	bf00      	nop
 801669c:	0801badc 	.word	0x0801badc
 80166a0:	0801bb14 	.word	0x0801bb14
 80166a4:	0801bb48 	.word	0x0801bb48

080166a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b086      	sub	sp, #24
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	60bb      	str	r3, [r7, #8]
 80166b6:	2304      	movs	r3, #4
 80166b8:	60fb      	str	r3, [r7, #12]
 80166ba:	2300      	movs	r3, #0
 80166bc:	613b      	str	r3, [r7, #16]
 80166be:	2300      	movs	r3, #0
 80166c0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80166c2:	f107 0308 	add.w	r3, r7, #8
 80166c6:	2100      	movs	r1, #0
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ef fb0e 	bl	8005cea <osMessageCreate>
 80166ce:	4602      	mov	r2, r0
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d102      	bne.n	80166e2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80166dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80166e0:	e000      	b.n	80166e4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80166e2:	2300      	movs	r3, #0
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3718      	adds	r7, #24
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7ef fbd3 	bl	8005ea4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4618      	mov	r0, r3
 8016704:	f7ef fbe4 	bl	8005ed0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016708:	bf00      	nop
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	6839      	ldr	r1, [r7, #0]
 8016720:	2200      	movs	r2, #0
 8016722:	4618      	mov	r0, r3
 8016724:	f7ef fb0a 	bl	8005d3c <osMessagePut>
 8016728:	4603      	mov	r3, r0
 801672a:	2b00      	cmp	r3, #0
 801672c:	d102      	bne.n	8016734 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801672e:	2300      	movs	r3, #0
 8016730:	73fb      	strb	r3, [r7, #15]
 8016732:	e001      	b.n	8016738 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016734:	23ff      	movs	r3, #255	@ 0xff
 8016736:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801673c:	4618      	mov	r0, r3
 801673e:	3710      	adds	r7, #16
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}

08016744 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b08c      	sub	sp, #48	@ 0x30
 8016748:	af00      	add	r7, sp, #0
 801674a:	61f8      	str	r0, [r7, #28]
 801674c:	61b9      	str	r1, [r7, #24]
 801674e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016750:	f7ef f8f6 	bl	8005940 <osKernelSysTick>
 8016754:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d017      	beq.n	801678c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	6819      	ldr	r1, [r3, #0]
 8016760:	f107 0320 	add.w	r3, r7, #32
 8016764:	697a      	ldr	r2, [r7, #20]
 8016766:	4618      	mov	r0, r3
 8016768:	f7ef fb28 	bl	8005dbc <osMessageGet>

    if(event.status == osEventMessage)
 801676c:	6a3b      	ldr	r3, [r7, #32]
 801676e:	2b10      	cmp	r3, #16
 8016770:	d109      	bne.n	8016786 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016774:	461a      	mov	r2, r3
 8016776:	69bb      	ldr	r3, [r7, #24]
 8016778:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801677a:	f7ef f8e1 	bl	8005940 <osKernelSysTick>
 801677e:	4602      	mov	r2, r0
 8016780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016782:	1ad3      	subs	r3, r2, r3
 8016784:	e019      	b.n	80167ba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801678a:	e016      	b.n	80167ba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	6819      	ldr	r1, [r3, #0]
 8016790:	463b      	mov	r3, r7
 8016792:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016796:	4618      	mov	r0, r3
 8016798:	f7ef fb10 	bl	8005dbc <osMessageGet>
 801679c:	f107 0320 	add.w	r3, r7, #32
 80167a0:	463a      	mov	r2, r7
 80167a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80167a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80167a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167aa:	461a      	mov	r2, r3
 80167ac:	69bb      	ldr	r3, [r7, #24]
 80167ae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80167b0:	f7ef f8c6 	bl	8005940 <osKernelSysTick>
 80167b4:	4602      	mov	r2, r0
 80167b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3730      	adds	r7, #48	@ 0x30
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b086      	sub	sp, #24
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
 80167ca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6819      	ldr	r1, [r3, #0]
 80167d0:	f107 030c 	add.w	r3, r7, #12
 80167d4:	2200      	movs	r2, #0
 80167d6:	4618      	mov	r0, r3
 80167d8:	f7ef faf0 	bl	8005dbc <osMessageGet>

  if(event.status == osEventMessage)
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2b10      	cmp	r3, #16
 80167e0:	d105      	bne.n	80167ee <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	461a      	mov	r2, r3
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80167ea:	2300      	movs	r3, #0
 80167ec:	e001      	b.n	80167f2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80167ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3718      	adds	r7, #24
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80167fa:	b480      	push	{r7}
 80167fc:	b083      	sub	sp, #12
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d101      	bne.n	801680e <sys_mbox_valid+0x14>
    return 0;
 801680a:	2300      	movs	r3, #0
 801680c:	e000      	b.n	8016810 <sys_mbox_valid+0x16>
  else
    return 1;
 801680e:	2301      	movs	r3, #1
}
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2200      	movs	r2, #0
 8016828:	601a      	str	r2, [r3, #0]
}
 801682a:	bf00      	nop
 801682c:	370c      	adds	r7, #12
 801682e:	46bd      	mov	sp, r7
 8016830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016834:	4770      	bx	lr

08016836 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016836:	b580      	push	{r7, lr}
 8016838:	b084      	sub	sp, #16
 801683a:	af00      	add	r7, sp, #0
 801683c:	6078      	str	r0, [r7, #4]
 801683e:	460b      	mov	r3, r1
 8016840:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016842:	2300      	movs	r3, #0
 8016844:	60bb      	str	r3, [r7, #8]
 8016846:	2300      	movs	r3, #0
 8016848:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801684a:	f107 0308 	add.w	r3, r7, #8
 801684e:	2101      	movs	r1, #1
 8016850:	4618      	mov	r0, r3
 8016852:	f7ef f981 	bl	8005b58 <osSemaphoreCreate>
 8016856:	4602      	mov	r2, r0
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d102      	bne.n	801686a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016868:	e009      	b.n	801687e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801686a:	78fb      	ldrb	r3, [r7, #3]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d105      	bne.n	801687c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2100      	movs	r1, #0
 8016876:	4618      	mov	r0, r3
 8016878:	f7ef f9a0 	bl	8005bbc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801687c:	2300      	movs	r3, #0
}
 801687e:	4618      	mov	r0, r3
 8016880:	3710      	adds	r7, #16
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016886:	b580      	push	{r7, lr}
 8016888:	b084      	sub	sp, #16
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016890:	f7ef f856 	bl	8005940 <osKernelSysTick>
 8016894:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d011      	beq.n	80168c0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	6839      	ldr	r1, [r7, #0]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7ef f98a 	bl	8005bbc <osSemaphoreWait>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d105      	bne.n	80168ba <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80168ae:	f7ef f847 	bl	8005940 <osKernelSysTick>
 80168b2:	4602      	mov	r2, r0
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	1ad3      	subs	r3, r2, r3
 80168b8:	e012      	b.n	80168e0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80168ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80168be:	e00f      	b.n	80168e0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80168c0:	bf00      	nop
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7ef f976 	bl	8005bbc <osSemaphoreWait>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d1f5      	bne.n	80168c2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80168d6:	f7ef f833 	bl	8005940 <osKernelSysTick>
 80168da:	4602      	mov	r2, r0
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3710      	adds	r7, #16
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7ef f9af 	bl	8005c58 <osSemaphoreRelease>
}
 80168fa:	bf00      	nop
 80168fc:	3708      	adds	r7, #8
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b082      	sub	sp, #8
 8016906:	af00      	add	r7, sp, #0
 8016908:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	4618      	mov	r0, r3
 8016910:	f7ef f9d8 	bl	8005cc4 <osSemaphoreDelete>
}
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d101      	bne.n	8016930 <sys_sem_valid+0x14>
    return 0;
 801692c:	2300      	movs	r3, #0
 801692e:	e000      	b.n	8016932 <sys_sem_valid+0x16>
  else
    return 1;
 8016930:	2301      	movs	r3, #1
}
 8016932:	4618      	mov	r0, r3
 8016934:	370c      	adds	r7, #12
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr

0801693e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801693e:	b480      	push	{r7}
 8016940:	b083      	sub	sp, #12
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2200      	movs	r2, #0
 801694a:	601a      	str	r2, [r3, #0]
}
 801694c:	bf00      	nop
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801695c:	4803      	ldr	r0, [pc, #12]	@ (801696c <sys_init+0x14>)
 801695e:	f7ef f85f 	bl	8005a20 <osMutexCreate>
 8016962:	4603      	mov	r3, r0
 8016964:	4a02      	ldr	r2, [pc, #8]	@ (8016970 <sys_init+0x18>)
 8016966:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016968:	bf00      	nop
 801696a:	bd80      	pop	{r7, pc}
 801696c:	0801bd00 	.word	0x0801bd00
 8016970:	2000d9fc 	.word	0x2000d9fc

08016974 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016974:	b580      	push	{r7, lr}
 8016976:	b084      	sub	sp, #16
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801697c:	2300      	movs	r3, #0
 801697e:	60bb      	str	r3, [r7, #8]
 8016980:	2300      	movs	r3, #0
 8016982:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016984:	f107 0308 	add.w	r3, r7, #8
 8016988:	4618      	mov	r0, r3
 801698a:	f7ef f849 	bl	8005a20 <osMutexCreate>
 801698e:	4602      	mov	r2, r0
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d102      	bne.n	80169a2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801699c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80169a0:	e000      	b.n	80169a4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80169a2:	2300      	movs	r3, #0
}
 80169a4:	4618      	mov	r0, r3
 80169a6:	3710      	adds	r7, #16
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80169bc:	4618      	mov	r0, r3
 80169be:	f7ef f847 	bl	8005a50 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80169c2:	bf00      	nop
 80169c4:	3708      	adds	r7, #8
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}

080169ca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80169ca:	b580      	push	{r7, lr}
 80169cc:	b082      	sub	sp, #8
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7ef f888 	bl	8005aec <osMutexRelease>
}
 80169dc:	bf00      	nop
 80169de:	3708      	adds	r7, #8
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b08c      	sub	sp, #48	@ 0x30
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
 80169f0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80169f2:	f107 0314 	add.w	r3, r7, #20
 80169f6:	2200      	movs	r2, #0
 80169f8:	601a      	str	r2, [r3, #0]
 80169fa:	605a      	str	r2, [r3, #4]
 80169fc:	609a      	str	r2, [r3, #8]
 80169fe:	60da      	str	r2, [r3, #12]
 8016a00:	611a      	str	r2, [r3, #16]
 8016a02:	615a      	str	r2, [r3, #20]
 8016a04:	619a      	str	r2, [r3, #24]
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	617b      	str	r3, [r7, #20]
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	61bb      	str	r3, [r7, #24]
 8016a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a10:	b21b      	sxth	r3, r3
 8016a12:	83bb      	strh	r3, [r7, #28]
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016a18:	f107 0314 	add.w	r3, r7, #20
 8016a1c:	6879      	ldr	r1, [r7, #4]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7ee ff9e 	bl	8005960 <osThreadCreate>
 8016a24:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3730      	adds	r7, #48	@ 0x30
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
	...

08016a30 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016a34:	4b04      	ldr	r3, [pc, #16]	@ (8016a48 <sys_arch_protect+0x18>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7ef f807 	bl	8005a50 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016a42:	2301      	movs	r3, #1
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	2000d9fc 	.word	0x2000d9fc

08016a4c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016a54:	4b04      	ldr	r3, [pc, #16]	@ (8016a68 <sys_arch_unprotect+0x1c>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7ef f847 	bl	8005aec <osMutexRelease>
}
 8016a5e:	bf00      	nop
 8016a60:	3708      	adds	r7, #8
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	2000d9fc 	.word	0x2000d9fc

08016a6c <sniprintf>:
 8016a6c:	b40c      	push	{r2, r3}
 8016a6e:	b530      	push	{r4, r5, lr}
 8016a70:	4b17      	ldr	r3, [pc, #92]	@ (8016ad0 <sniprintf+0x64>)
 8016a72:	1e0c      	subs	r4, r1, #0
 8016a74:	681d      	ldr	r5, [r3, #0]
 8016a76:	b09d      	sub	sp, #116	@ 0x74
 8016a78:	da08      	bge.n	8016a8c <sniprintf+0x20>
 8016a7a:	238b      	movs	r3, #139	@ 0x8b
 8016a7c:	602b      	str	r3, [r5, #0]
 8016a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a82:	b01d      	add	sp, #116	@ 0x74
 8016a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a88:	b002      	add	sp, #8
 8016a8a:	4770      	bx	lr
 8016a8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016a94:	bf14      	ite	ne
 8016a96:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016a9a:	4623      	moveq	r3, r4
 8016a9c:	9304      	str	r3, [sp, #16]
 8016a9e:	9307      	str	r3, [sp, #28]
 8016aa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016aa4:	9002      	str	r0, [sp, #8]
 8016aa6:	9006      	str	r0, [sp, #24]
 8016aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016aac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016aae:	ab21      	add	r3, sp, #132	@ 0x84
 8016ab0:	a902      	add	r1, sp, #8
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	9301      	str	r3, [sp, #4]
 8016ab6:	f000 fae3 	bl	8017080 <_svfiprintf_r>
 8016aba:	1c43      	adds	r3, r0, #1
 8016abc:	bfbc      	itt	lt
 8016abe:	238b      	movlt	r3, #139	@ 0x8b
 8016ac0:	602b      	strlt	r3, [r5, #0]
 8016ac2:	2c00      	cmp	r4, #0
 8016ac4:	d0dd      	beq.n	8016a82 <sniprintf+0x16>
 8016ac6:	9b02      	ldr	r3, [sp, #8]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	701a      	strb	r2, [r3, #0]
 8016acc:	e7d9      	b.n	8016a82 <sniprintf+0x16>
 8016ace:	bf00      	nop
 8016ad0:	2000003c 	.word	0x2000003c

08016ad4 <siprintf>:
 8016ad4:	b40e      	push	{r1, r2, r3}
 8016ad6:	b500      	push	{lr}
 8016ad8:	b09c      	sub	sp, #112	@ 0x70
 8016ada:	ab1d      	add	r3, sp, #116	@ 0x74
 8016adc:	9002      	str	r0, [sp, #8]
 8016ade:	9006      	str	r0, [sp, #24]
 8016ae0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ae4:	4809      	ldr	r0, [pc, #36]	@ (8016b0c <siprintf+0x38>)
 8016ae6:	9107      	str	r1, [sp, #28]
 8016ae8:	9104      	str	r1, [sp, #16]
 8016aea:	4909      	ldr	r1, [pc, #36]	@ (8016b10 <siprintf+0x3c>)
 8016aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8016af0:	9105      	str	r1, [sp, #20]
 8016af2:	6800      	ldr	r0, [r0, #0]
 8016af4:	9301      	str	r3, [sp, #4]
 8016af6:	a902      	add	r1, sp, #8
 8016af8:	f000 fac2 	bl	8017080 <_svfiprintf_r>
 8016afc:	9b02      	ldr	r3, [sp, #8]
 8016afe:	2200      	movs	r2, #0
 8016b00:	701a      	strb	r2, [r3, #0]
 8016b02:	b01c      	add	sp, #112	@ 0x70
 8016b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b08:	b003      	add	sp, #12
 8016b0a:	4770      	bx	lr
 8016b0c:	2000003c 	.word	0x2000003c
 8016b10:	ffff0208 	.word	0xffff0208

08016b14 <rand>:
 8016b14:	4b16      	ldr	r3, [pc, #88]	@ (8016b70 <rand+0x5c>)
 8016b16:	b510      	push	{r4, lr}
 8016b18:	681c      	ldr	r4, [r3, #0]
 8016b1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b1c:	b9b3      	cbnz	r3, 8016b4c <rand+0x38>
 8016b1e:	2018      	movs	r0, #24
 8016b20:	f000 fcec 	bl	80174fc <malloc>
 8016b24:	4602      	mov	r2, r0
 8016b26:	6320      	str	r0, [r4, #48]	@ 0x30
 8016b28:	b920      	cbnz	r0, 8016b34 <rand+0x20>
 8016b2a:	4b12      	ldr	r3, [pc, #72]	@ (8016b74 <rand+0x60>)
 8016b2c:	4812      	ldr	r0, [pc, #72]	@ (8016b78 <rand+0x64>)
 8016b2e:	2152      	movs	r1, #82	@ 0x52
 8016b30:	f000 f9e2 	bl	8016ef8 <__assert_func>
 8016b34:	4911      	ldr	r1, [pc, #68]	@ (8016b7c <rand+0x68>)
 8016b36:	4b12      	ldr	r3, [pc, #72]	@ (8016b80 <rand+0x6c>)
 8016b38:	e9c0 1300 	strd	r1, r3, [r0]
 8016b3c:	4b11      	ldr	r3, [pc, #68]	@ (8016b84 <rand+0x70>)
 8016b3e:	6083      	str	r3, [r0, #8]
 8016b40:	230b      	movs	r3, #11
 8016b42:	8183      	strh	r3, [r0, #12]
 8016b44:	2100      	movs	r1, #0
 8016b46:	2001      	movs	r0, #1
 8016b48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b4e:	480e      	ldr	r0, [pc, #56]	@ (8016b88 <rand+0x74>)
 8016b50:	690b      	ldr	r3, [r1, #16]
 8016b52:	694c      	ldr	r4, [r1, #20]
 8016b54:	4a0d      	ldr	r2, [pc, #52]	@ (8016b8c <rand+0x78>)
 8016b56:	4358      	muls	r0, r3
 8016b58:	fb02 0004 	mla	r0, r2, r4, r0
 8016b5c:	fba3 3202 	umull	r3, r2, r3, r2
 8016b60:	3301      	adds	r3, #1
 8016b62:	eb40 0002 	adc.w	r0, r0, r2
 8016b66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b6a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b6e:	bd10      	pop	{r4, pc}
 8016b70:	2000003c 	.word	0x2000003c
 8016b74:	0801bd08 	.word	0x0801bd08
 8016b78:	0801bd1f 	.word	0x0801bd1f
 8016b7c:	abcd330e 	.word	0xabcd330e
 8016b80:	e66d1234 	.word	0xe66d1234
 8016b84:	0005deec 	.word	0x0005deec
 8016b88:	5851f42d 	.word	0x5851f42d
 8016b8c:	4c957f2d 	.word	0x4c957f2d

08016b90 <std>:
 8016b90:	2300      	movs	r3, #0
 8016b92:	b510      	push	{r4, lr}
 8016b94:	4604      	mov	r4, r0
 8016b96:	e9c0 3300 	strd	r3, r3, [r0]
 8016b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b9e:	6083      	str	r3, [r0, #8]
 8016ba0:	8181      	strh	r1, [r0, #12]
 8016ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ba4:	81c2      	strh	r2, [r0, #14]
 8016ba6:	6183      	str	r3, [r0, #24]
 8016ba8:	4619      	mov	r1, r3
 8016baa:	2208      	movs	r2, #8
 8016bac:	305c      	adds	r0, #92	@ 0x5c
 8016bae:	f000 f90f 	bl	8016dd0 <memset>
 8016bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8016be8 <std+0x58>)
 8016bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8016bec <std+0x5c>)
 8016bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016bba:	4b0d      	ldr	r3, [pc, #52]	@ (8016bf0 <std+0x60>)
 8016bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8016bf4 <std+0x64>)
 8016bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8016bf8 <std+0x68>)
 8016bc4:	6224      	str	r4, [r4, #32]
 8016bc6:	429c      	cmp	r4, r3
 8016bc8:	d006      	beq.n	8016bd8 <std+0x48>
 8016bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016bce:	4294      	cmp	r4, r2
 8016bd0:	d002      	beq.n	8016bd8 <std+0x48>
 8016bd2:	33d0      	adds	r3, #208	@ 0xd0
 8016bd4:	429c      	cmp	r4, r3
 8016bd6:	d105      	bne.n	8016be4 <std+0x54>
 8016bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016be0:	f000 b978 	b.w	8016ed4 <__retarget_lock_init_recursive>
 8016be4:	bd10      	pop	{r4, pc}
 8016be6:	bf00      	nop
 8016be8:	08017add 	.word	0x08017add
 8016bec:	08017aff 	.word	0x08017aff
 8016bf0:	08017b37 	.word	0x08017b37
 8016bf4:	08017b5b 	.word	0x08017b5b
 8016bf8:	2000da00 	.word	0x2000da00

08016bfc <stdio_exit_handler>:
 8016bfc:	4a02      	ldr	r2, [pc, #8]	@ (8016c08 <stdio_exit_handler+0xc>)
 8016bfe:	4903      	ldr	r1, [pc, #12]	@ (8016c0c <stdio_exit_handler+0x10>)
 8016c00:	4803      	ldr	r0, [pc, #12]	@ (8016c10 <stdio_exit_handler+0x14>)
 8016c02:	f000 b869 	b.w	8016cd8 <_fwalk_sglue>
 8016c06:	bf00      	nop
 8016c08:	20000030 	.word	0x20000030
 8016c0c:	08017a75 	.word	0x08017a75
 8016c10:	20000040 	.word	0x20000040

08016c14 <cleanup_stdio>:
 8016c14:	6841      	ldr	r1, [r0, #4]
 8016c16:	4b0c      	ldr	r3, [pc, #48]	@ (8016c48 <cleanup_stdio+0x34>)
 8016c18:	4299      	cmp	r1, r3
 8016c1a:	b510      	push	{r4, lr}
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	d001      	beq.n	8016c24 <cleanup_stdio+0x10>
 8016c20:	f000 ff28 	bl	8017a74 <_fflush_r>
 8016c24:	68a1      	ldr	r1, [r4, #8]
 8016c26:	4b09      	ldr	r3, [pc, #36]	@ (8016c4c <cleanup_stdio+0x38>)
 8016c28:	4299      	cmp	r1, r3
 8016c2a:	d002      	beq.n	8016c32 <cleanup_stdio+0x1e>
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	f000 ff21 	bl	8017a74 <_fflush_r>
 8016c32:	68e1      	ldr	r1, [r4, #12]
 8016c34:	4b06      	ldr	r3, [pc, #24]	@ (8016c50 <cleanup_stdio+0x3c>)
 8016c36:	4299      	cmp	r1, r3
 8016c38:	d004      	beq.n	8016c44 <cleanup_stdio+0x30>
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c40:	f000 bf18 	b.w	8017a74 <_fflush_r>
 8016c44:	bd10      	pop	{r4, pc}
 8016c46:	bf00      	nop
 8016c48:	2000da00 	.word	0x2000da00
 8016c4c:	2000da68 	.word	0x2000da68
 8016c50:	2000dad0 	.word	0x2000dad0

08016c54 <global_stdio_init.part.0>:
 8016c54:	b510      	push	{r4, lr}
 8016c56:	4b0b      	ldr	r3, [pc, #44]	@ (8016c84 <global_stdio_init.part.0+0x30>)
 8016c58:	4c0b      	ldr	r4, [pc, #44]	@ (8016c88 <global_stdio_init.part.0+0x34>)
 8016c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8016c8c <global_stdio_init.part.0+0x38>)
 8016c5c:	601a      	str	r2, [r3, #0]
 8016c5e:	4620      	mov	r0, r4
 8016c60:	2200      	movs	r2, #0
 8016c62:	2104      	movs	r1, #4
 8016c64:	f7ff ff94 	bl	8016b90 <std>
 8016c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c6c:	2201      	movs	r2, #1
 8016c6e:	2109      	movs	r1, #9
 8016c70:	f7ff ff8e 	bl	8016b90 <std>
 8016c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c78:	2202      	movs	r2, #2
 8016c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c7e:	2112      	movs	r1, #18
 8016c80:	f7ff bf86 	b.w	8016b90 <std>
 8016c84:	2000db38 	.word	0x2000db38
 8016c88:	2000da00 	.word	0x2000da00
 8016c8c:	08016bfd 	.word	0x08016bfd

08016c90 <__sfp_lock_acquire>:
 8016c90:	4801      	ldr	r0, [pc, #4]	@ (8016c98 <__sfp_lock_acquire+0x8>)
 8016c92:	f000 b920 	b.w	8016ed6 <__retarget_lock_acquire_recursive>
 8016c96:	bf00      	nop
 8016c98:	2000db41 	.word	0x2000db41

08016c9c <__sfp_lock_release>:
 8016c9c:	4801      	ldr	r0, [pc, #4]	@ (8016ca4 <__sfp_lock_release+0x8>)
 8016c9e:	f000 b91b 	b.w	8016ed8 <__retarget_lock_release_recursive>
 8016ca2:	bf00      	nop
 8016ca4:	2000db41 	.word	0x2000db41

08016ca8 <__sinit>:
 8016ca8:	b510      	push	{r4, lr}
 8016caa:	4604      	mov	r4, r0
 8016cac:	f7ff fff0 	bl	8016c90 <__sfp_lock_acquire>
 8016cb0:	6a23      	ldr	r3, [r4, #32]
 8016cb2:	b11b      	cbz	r3, 8016cbc <__sinit+0x14>
 8016cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cb8:	f7ff bff0 	b.w	8016c9c <__sfp_lock_release>
 8016cbc:	4b04      	ldr	r3, [pc, #16]	@ (8016cd0 <__sinit+0x28>)
 8016cbe:	6223      	str	r3, [r4, #32]
 8016cc0:	4b04      	ldr	r3, [pc, #16]	@ (8016cd4 <__sinit+0x2c>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1f5      	bne.n	8016cb4 <__sinit+0xc>
 8016cc8:	f7ff ffc4 	bl	8016c54 <global_stdio_init.part.0>
 8016ccc:	e7f2      	b.n	8016cb4 <__sinit+0xc>
 8016cce:	bf00      	nop
 8016cd0:	08016c15 	.word	0x08016c15
 8016cd4:	2000db38 	.word	0x2000db38

08016cd8 <_fwalk_sglue>:
 8016cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cdc:	4607      	mov	r7, r0
 8016cde:	4688      	mov	r8, r1
 8016ce0:	4614      	mov	r4, r2
 8016ce2:	2600      	movs	r6, #0
 8016ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8016cec:	d505      	bpl.n	8016cfa <_fwalk_sglue+0x22>
 8016cee:	6824      	ldr	r4, [r4, #0]
 8016cf0:	2c00      	cmp	r4, #0
 8016cf2:	d1f7      	bne.n	8016ce4 <_fwalk_sglue+0xc>
 8016cf4:	4630      	mov	r0, r6
 8016cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cfa:	89ab      	ldrh	r3, [r5, #12]
 8016cfc:	2b01      	cmp	r3, #1
 8016cfe:	d907      	bls.n	8016d10 <_fwalk_sglue+0x38>
 8016d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d04:	3301      	adds	r3, #1
 8016d06:	d003      	beq.n	8016d10 <_fwalk_sglue+0x38>
 8016d08:	4629      	mov	r1, r5
 8016d0a:	4638      	mov	r0, r7
 8016d0c:	47c0      	blx	r8
 8016d0e:	4306      	orrs	r6, r0
 8016d10:	3568      	adds	r5, #104	@ 0x68
 8016d12:	e7e9      	b.n	8016ce8 <_fwalk_sglue+0x10>

08016d14 <iprintf>:
 8016d14:	b40f      	push	{r0, r1, r2, r3}
 8016d16:	b507      	push	{r0, r1, r2, lr}
 8016d18:	4906      	ldr	r1, [pc, #24]	@ (8016d34 <iprintf+0x20>)
 8016d1a:	ab04      	add	r3, sp, #16
 8016d1c:	6808      	ldr	r0, [r1, #0]
 8016d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d22:	6881      	ldr	r1, [r0, #8]
 8016d24:	9301      	str	r3, [sp, #4]
 8016d26:	f000 fad1 	bl	80172cc <_vfiprintf_r>
 8016d2a:	b003      	add	sp, #12
 8016d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d30:	b004      	add	sp, #16
 8016d32:	4770      	bx	lr
 8016d34:	2000003c 	.word	0x2000003c

08016d38 <strcat>:
 8016d38:	b510      	push	{r4, lr}
 8016d3a:	4602      	mov	r2, r0
 8016d3c:	7814      	ldrb	r4, [r2, #0]
 8016d3e:	4613      	mov	r3, r2
 8016d40:	3201      	adds	r2, #1
 8016d42:	2c00      	cmp	r4, #0
 8016d44:	d1fa      	bne.n	8016d3c <strcat+0x4>
 8016d46:	3b01      	subs	r3, #1
 8016d48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d50:	2a00      	cmp	r2, #0
 8016d52:	d1f9      	bne.n	8016d48 <strcat+0x10>
 8016d54:	bd10      	pop	{r4, pc}

08016d56 <strncpy>:
 8016d56:	b510      	push	{r4, lr}
 8016d58:	3901      	subs	r1, #1
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	b132      	cbz	r2, 8016d6c <strncpy+0x16>
 8016d5e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016d62:	f803 4b01 	strb.w	r4, [r3], #1
 8016d66:	3a01      	subs	r2, #1
 8016d68:	2c00      	cmp	r4, #0
 8016d6a:	d1f7      	bne.n	8016d5c <strncpy+0x6>
 8016d6c:	441a      	add	r2, r3
 8016d6e:	2100      	movs	r1, #0
 8016d70:	4293      	cmp	r3, r2
 8016d72:	d100      	bne.n	8016d76 <strncpy+0x20>
 8016d74:	bd10      	pop	{r4, pc}
 8016d76:	f803 1b01 	strb.w	r1, [r3], #1
 8016d7a:	e7f9      	b.n	8016d70 <strncpy+0x1a>

08016d7c <memcmp>:
 8016d7c:	b510      	push	{r4, lr}
 8016d7e:	3901      	subs	r1, #1
 8016d80:	4402      	add	r2, r0
 8016d82:	4290      	cmp	r0, r2
 8016d84:	d101      	bne.n	8016d8a <memcmp+0xe>
 8016d86:	2000      	movs	r0, #0
 8016d88:	e005      	b.n	8016d96 <memcmp+0x1a>
 8016d8a:	7803      	ldrb	r3, [r0, #0]
 8016d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016d90:	42a3      	cmp	r3, r4
 8016d92:	d001      	beq.n	8016d98 <memcmp+0x1c>
 8016d94:	1b18      	subs	r0, r3, r4
 8016d96:	bd10      	pop	{r4, pc}
 8016d98:	3001      	adds	r0, #1
 8016d9a:	e7f2      	b.n	8016d82 <memcmp+0x6>

08016d9c <memmove>:
 8016d9c:	4288      	cmp	r0, r1
 8016d9e:	b510      	push	{r4, lr}
 8016da0:	eb01 0402 	add.w	r4, r1, r2
 8016da4:	d902      	bls.n	8016dac <memmove+0x10>
 8016da6:	4284      	cmp	r4, r0
 8016da8:	4623      	mov	r3, r4
 8016daa:	d807      	bhi.n	8016dbc <memmove+0x20>
 8016dac:	1e43      	subs	r3, r0, #1
 8016dae:	42a1      	cmp	r1, r4
 8016db0:	d008      	beq.n	8016dc4 <memmove+0x28>
 8016db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016dba:	e7f8      	b.n	8016dae <memmove+0x12>
 8016dbc:	4402      	add	r2, r0
 8016dbe:	4601      	mov	r1, r0
 8016dc0:	428a      	cmp	r2, r1
 8016dc2:	d100      	bne.n	8016dc6 <memmove+0x2a>
 8016dc4:	bd10      	pop	{r4, pc}
 8016dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016dce:	e7f7      	b.n	8016dc0 <memmove+0x24>

08016dd0 <memset>:
 8016dd0:	4402      	add	r2, r0
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	4293      	cmp	r3, r2
 8016dd6:	d100      	bne.n	8016dda <memset+0xa>
 8016dd8:	4770      	bx	lr
 8016dda:	f803 1b01 	strb.w	r1, [r3], #1
 8016dde:	e7f9      	b.n	8016dd4 <memset+0x4>

08016de0 <_reclaim_reent>:
 8016de0:	4b29      	ldr	r3, [pc, #164]	@ (8016e88 <_reclaim_reent+0xa8>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4283      	cmp	r3, r0
 8016de6:	b570      	push	{r4, r5, r6, lr}
 8016de8:	4604      	mov	r4, r0
 8016dea:	d04b      	beq.n	8016e84 <_reclaim_reent+0xa4>
 8016dec:	69c3      	ldr	r3, [r0, #28]
 8016dee:	b1ab      	cbz	r3, 8016e1c <_reclaim_reent+0x3c>
 8016df0:	68db      	ldr	r3, [r3, #12]
 8016df2:	b16b      	cbz	r3, 8016e10 <_reclaim_reent+0x30>
 8016df4:	2500      	movs	r5, #0
 8016df6:	69e3      	ldr	r3, [r4, #28]
 8016df8:	68db      	ldr	r3, [r3, #12]
 8016dfa:	5959      	ldr	r1, [r3, r5]
 8016dfc:	2900      	cmp	r1, #0
 8016dfe:	d13b      	bne.n	8016e78 <_reclaim_reent+0x98>
 8016e00:	3504      	adds	r5, #4
 8016e02:	2d80      	cmp	r5, #128	@ 0x80
 8016e04:	d1f7      	bne.n	8016df6 <_reclaim_reent+0x16>
 8016e06:	69e3      	ldr	r3, [r4, #28]
 8016e08:	4620      	mov	r0, r4
 8016e0a:	68d9      	ldr	r1, [r3, #12]
 8016e0c:	f000 f892 	bl	8016f34 <_free_r>
 8016e10:	69e3      	ldr	r3, [r4, #28]
 8016e12:	6819      	ldr	r1, [r3, #0]
 8016e14:	b111      	cbz	r1, 8016e1c <_reclaim_reent+0x3c>
 8016e16:	4620      	mov	r0, r4
 8016e18:	f000 f88c 	bl	8016f34 <_free_r>
 8016e1c:	6961      	ldr	r1, [r4, #20]
 8016e1e:	b111      	cbz	r1, 8016e26 <_reclaim_reent+0x46>
 8016e20:	4620      	mov	r0, r4
 8016e22:	f000 f887 	bl	8016f34 <_free_r>
 8016e26:	69e1      	ldr	r1, [r4, #28]
 8016e28:	b111      	cbz	r1, 8016e30 <_reclaim_reent+0x50>
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f000 f882 	bl	8016f34 <_free_r>
 8016e30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e32:	b111      	cbz	r1, 8016e3a <_reclaim_reent+0x5a>
 8016e34:	4620      	mov	r0, r4
 8016e36:	f000 f87d 	bl	8016f34 <_free_r>
 8016e3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e3c:	b111      	cbz	r1, 8016e44 <_reclaim_reent+0x64>
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f000 f878 	bl	8016f34 <_free_r>
 8016e44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016e46:	b111      	cbz	r1, 8016e4e <_reclaim_reent+0x6e>
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f000 f873 	bl	8016f34 <_free_r>
 8016e4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016e50:	b111      	cbz	r1, 8016e58 <_reclaim_reent+0x78>
 8016e52:	4620      	mov	r0, r4
 8016e54:	f000 f86e 	bl	8016f34 <_free_r>
 8016e58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016e5a:	b111      	cbz	r1, 8016e62 <_reclaim_reent+0x82>
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f000 f869 	bl	8016f34 <_free_r>
 8016e62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016e64:	b111      	cbz	r1, 8016e6c <_reclaim_reent+0x8c>
 8016e66:	4620      	mov	r0, r4
 8016e68:	f000 f864 	bl	8016f34 <_free_r>
 8016e6c:	6a23      	ldr	r3, [r4, #32]
 8016e6e:	b14b      	cbz	r3, 8016e84 <_reclaim_reent+0xa4>
 8016e70:	4620      	mov	r0, r4
 8016e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e76:	4718      	bx	r3
 8016e78:	680e      	ldr	r6, [r1, #0]
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	f000 f85a 	bl	8016f34 <_free_r>
 8016e80:	4631      	mov	r1, r6
 8016e82:	e7bb      	b.n	8016dfc <_reclaim_reent+0x1c>
 8016e84:	bd70      	pop	{r4, r5, r6, pc}
 8016e86:	bf00      	nop
 8016e88:	2000003c 	.word	0x2000003c

08016e8c <__libc_init_array>:
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8016ec4 <__libc_init_array+0x38>)
 8016e90:	4c0d      	ldr	r4, [pc, #52]	@ (8016ec8 <__libc_init_array+0x3c>)
 8016e92:	1b64      	subs	r4, r4, r5
 8016e94:	10a4      	asrs	r4, r4, #2
 8016e96:	2600      	movs	r6, #0
 8016e98:	42a6      	cmp	r6, r4
 8016e9a:	d109      	bne.n	8016eb0 <__libc_init_array+0x24>
 8016e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8016ecc <__libc_init_array+0x40>)
 8016e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8016ed0 <__libc_init_array+0x44>)
 8016ea0:	f001 f862 	bl	8017f68 <_init>
 8016ea4:	1b64      	subs	r4, r4, r5
 8016ea6:	10a4      	asrs	r4, r4, #2
 8016ea8:	2600      	movs	r6, #0
 8016eaa:	42a6      	cmp	r6, r4
 8016eac:	d105      	bne.n	8016eba <__libc_init_array+0x2e>
 8016eae:	bd70      	pop	{r4, r5, r6, pc}
 8016eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eb4:	4798      	blx	r3
 8016eb6:	3601      	adds	r6, #1
 8016eb8:	e7ee      	b.n	8016e98 <__libc_init_array+0xc>
 8016eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ebe:	4798      	blx	r3
 8016ec0:	3601      	adds	r6, #1
 8016ec2:	e7f2      	b.n	8016eaa <__libc_init_array+0x1e>
 8016ec4:	0801bef0 	.word	0x0801bef0
 8016ec8:	0801bef0 	.word	0x0801bef0
 8016ecc:	0801bef0 	.word	0x0801bef0
 8016ed0:	0801bef4 	.word	0x0801bef4

08016ed4 <__retarget_lock_init_recursive>:
 8016ed4:	4770      	bx	lr

08016ed6 <__retarget_lock_acquire_recursive>:
 8016ed6:	4770      	bx	lr

08016ed8 <__retarget_lock_release_recursive>:
 8016ed8:	4770      	bx	lr

08016eda <memcpy>:
 8016eda:	440a      	add	r2, r1
 8016edc:	4291      	cmp	r1, r2
 8016ede:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016ee2:	d100      	bne.n	8016ee6 <memcpy+0xc>
 8016ee4:	4770      	bx	lr
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ef0:	4291      	cmp	r1, r2
 8016ef2:	d1f9      	bne.n	8016ee8 <memcpy+0xe>
 8016ef4:	bd10      	pop	{r4, pc}
	...

08016ef8 <__assert_func>:
 8016ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016efa:	4614      	mov	r4, r2
 8016efc:	461a      	mov	r2, r3
 8016efe:	4b09      	ldr	r3, [pc, #36]	@ (8016f24 <__assert_func+0x2c>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	4605      	mov	r5, r0
 8016f04:	68d8      	ldr	r0, [r3, #12]
 8016f06:	b954      	cbnz	r4, 8016f1e <__assert_func+0x26>
 8016f08:	4b07      	ldr	r3, [pc, #28]	@ (8016f28 <__assert_func+0x30>)
 8016f0a:	461c      	mov	r4, r3
 8016f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f10:	9100      	str	r1, [sp, #0]
 8016f12:	462b      	mov	r3, r5
 8016f14:	4905      	ldr	r1, [pc, #20]	@ (8016f2c <__assert_func+0x34>)
 8016f16:	f000 fe25 	bl	8017b64 <fiprintf>
 8016f1a:	f000 ffd1 	bl	8017ec0 <abort>
 8016f1e:	4b04      	ldr	r3, [pc, #16]	@ (8016f30 <__assert_func+0x38>)
 8016f20:	e7f4      	b.n	8016f0c <__assert_func+0x14>
 8016f22:	bf00      	nop
 8016f24:	2000003c 	.word	0x2000003c
 8016f28:	0801beb3 	.word	0x0801beb3
 8016f2c:	0801be85 	.word	0x0801be85
 8016f30:	0801be78 	.word	0x0801be78

08016f34 <_free_r>:
 8016f34:	b538      	push	{r3, r4, r5, lr}
 8016f36:	4605      	mov	r5, r0
 8016f38:	2900      	cmp	r1, #0
 8016f3a:	d041      	beq.n	8016fc0 <_free_r+0x8c>
 8016f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f40:	1f0c      	subs	r4, r1, #4
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	bfb8      	it	lt
 8016f46:	18e4      	addlt	r4, r4, r3
 8016f48:	f000 fdbc 	bl	8017ac4 <__malloc_lock>
 8016f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8016fc4 <_free_r+0x90>)
 8016f4e:	6813      	ldr	r3, [r2, #0]
 8016f50:	b933      	cbnz	r3, 8016f60 <_free_r+0x2c>
 8016f52:	6063      	str	r3, [r4, #4]
 8016f54:	6014      	str	r4, [r2, #0]
 8016f56:	4628      	mov	r0, r5
 8016f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f5c:	f000 bdb8 	b.w	8017ad0 <__malloc_unlock>
 8016f60:	42a3      	cmp	r3, r4
 8016f62:	d908      	bls.n	8016f76 <_free_r+0x42>
 8016f64:	6820      	ldr	r0, [r4, #0]
 8016f66:	1821      	adds	r1, r4, r0
 8016f68:	428b      	cmp	r3, r1
 8016f6a:	bf01      	itttt	eq
 8016f6c:	6819      	ldreq	r1, [r3, #0]
 8016f6e:	685b      	ldreq	r3, [r3, #4]
 8016f70:	1809      	addeq	r1, r1, r0
 8016f72:	6021      	streq	r1, [r4, #0]
 8016f74:	e7ed      	b.n	8016f52 <_free_r+0x1e>
 8016f76:	461a      	mov	r2, r3
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	b10b      	cbz	r3, 8016f80 <_free_r+0x4c>
 8016f7c:	42a3      	cmp	r3, r4
 8016f7e:	d9fa      	bls.n	8016f76 <_free_r+0x42>
 8016f80:	6811      	ldr	r1, [r2, #0]
 8016f82:	1850      	adds	r0, r2, r1
 8016f84:	42a0      	cmp	r0, r4
 8016f86:	d10b      	bne.n	8016fa0 <_free_r+0x6c>
 8016f88:	6820      	ldr	r0, [r4, #0]
 8016f8a:	4401      	add	r1, r0
 8016f8c:	1850      	adds	r0, r2, r1
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	6011      	str	r1, [r2, #0]
 8016f92:	d1e0      	bne.n	8016f56 <_free_r+0x22>
 8016f94:	6818      	ldr	r0, [r3, #0]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	6053      	str	r3, [r2, #4]
 8016f9a:	4408      	add	r0, r1
 8016f9c:	6010      	str	r0, [r2, #0]
 8016f9e:	e7da      	b.n	8016f56 <_free_r+0x22>
 8016fa0:	d902      	bls.n	8016fa8 <_free_r+0x74>
 8016fa2:	230c      	movs	r3, #12
 8016fa4:	602b      	str	r3, [r5, #0]
 8016fa6:	e7d6      	b.n	8016f56 <_free_r+0x22>
 8016fa8:	6820      	ldr	r0, [r4, #0]
 8016faa:	1821      	adds	r1, r4, r0
 8016fac:	428b      	cmp	r3, r1
 8016fae:	bf04      	itt	eq
 8016fb0:	6819      	ldreq	r1, [r3, #0]
 8016fb2:	685b      	ldreq	r3, [r3, #4]
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	bf04      	itt	eq
 8016fb8:	1809      	addeq	r1, r1, r0
 8016fba:	6021      	streq	r1, [r4, #0]
 8016fbc:	6054      	str	r4, [r2, #4]
 8016fbe:	e7ca      	b.n	8016f56 <_free_r+0x22>
 8016fc0:	bd38      	pop	{r3, r4, r5, pc}
 8016fc2:	bf00      	nop
 8016fc4:	2000db48 	.word	0x2000db48

08016fc8 <__ssputs_r>:
 8016fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fcc:	688e      	ldr	r6, [r1, #8]
 8016fce:	461f      	mov	r7, r3
 8016fd0:	42be      	cmp	r6, r7
 8016fd2:	680b      	ldr	r3, [r1, #0]
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	460c      	mov	r4, r1
 8016fd8:	4690      	mov	r8, r2
 8016fda:	d82d      	bhi.n	8017038 <__ssputs_r+0x70>
 8016fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016fe0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016fe4:	d026      	beq.n	8017034 <__ssputs_r+0x6c>
 8016fe6:	6965      	ldr	r5, [r4, #20]
 8016fe8:	6909      	ldr	r1, [r1, #16]
 8016fea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fee:	eba3 0901 	sub.w	r9, r3, r1
 8016ff2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ff6:	1c7b      	adds	r3, r7, #1
 8016ff8:	444b      	add	r3, r9
 8016ffa:	106d      	asrs	r5, r5, #1
 8016ffc:	429d      	cmp	r5, r3
 8016ffe:	bf38      	it	cc
 8017000:	461d      	movcc	r5, r3
 8017002:	0553      	lsls	r3, r2, #21
 8017004:	d527      	bpl.n	8017056 <__ssputs_r+0x8e>
 8017006:	4629      	mov	r1, r5
 8017008:	f000 faa2 	bl	8017550 <_malloc_r>
 801700c:	4606      	mov	r6, r0
 801700e:	b360      	cbz	r0, 801706a <__ssputs_r+0xa2>
 8017010:	6921      	ldr	r1, [r4, #16]
 8017012:	464a      	mov	r2, r9
 8017014:	f7ff ff61 	bl	8016eda <memcpy>
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801701e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017022:	81a3      	strh	r3, [r4, #12]
 8017024:	6126      	str	r6, [r4, #16]
 8017026:	6165      	str	r5, [r4, #20]
 8017028:	444e      	add	r6, r9
 801702a:	eba5 0509 	sub.w	r5, r5, r9
 801702e:	6026      	str	r6, [r4, #0]
 8017030:	60a5      	str	r5, [r4, #8]
 8017032:	463e      	mov	r6, r7
 8017034:	42be      	cmp	r6, r7
 8017036:	d900      	bls.n	801703a <__ssputs_r+0x72>
 8017038:	463e      	mov	r6, r7
 801703a:	6820      	ldr	r0, [r4, #0]
 801703c:	4632      	mov	r2, r6
 801703e:	4641      	mov	r1, r8
 8017040:	f7ff feac 	bl	8016d9c <memmove>
 8017044:	68a3      	ldr	r3, [r4, #8]
 8017046:	1b9b      	subs	r3, r3, r6
 8017048:	60a3      	str	r3, [r4, #8]
 801704a:	6823      	ldr	r3, [r4, #0]
 801704c:	4433      	add	r3, r6
 801704e:	6023      	str	r3, [r4, #0]
 8017050:	2000      	movs	r0, #0
 8017052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017056:	462a      	mov	r2, r5
 8017058:	f000 fd96 	bl	8017b88 <_realloc_r>
 801705c:	4606      	mov	r6, r0
 801705e:	2800      	cmp	r0, #0
 8017060:	d1e0      	bne.n	8017024 <__ssputs_r+0x5c>
 8017062:	6921      	ldr	r1, [r4, #16]
 8017064:	4650      	mov	r0, sl
 8017066:	f7ff ff65 	bl	8016f34 <_free_r>
 801706a:	230c      	movs	r3, #12
 801706c:	f8ca 3000 	str.w	r3, [sl]
 8017070:	89a3      	ldrh	r3, [r4, #12]
 8017072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017076:	81a3      	strh	r3, [r4, #12]
 8017078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801707c:	e7e9      	b.n	8017052 <__ssputs_r+0x8a>
	...

08017080 <_svfiprintf_r>:
 8017080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017084:	4698      	mov	r8, r3
 8017086:	898b      	ldrh	r3, [r1, #12]
 8017088:	061b      	lsls	r3, r3, #24
 801708a:	b09d      	sub	sp, #116	@ 0x74
 801708c:	4607      	mov	r7, r0
 801708e:	460d      	mov	r5, r1
 8017090:	4614      	mov	r4, r2
 8017092:	d510      	bpl.n	80170b6 <_svfiprintf_r+0x36>
 8017094:	690b      	ldr	r3, [r1, #16]
 8017096:	b973      	cbnz	r3, 80170b6 <_svfiprintf_r+0x36>
 8017098:	2140      	movs	r1, #64	@ 0x40
 801709a:	f000 fa59 	bl	8017550 <_malloc_r>
 801709e:	6028      	str	r0, [r5, #0]
 80170a0:	6128      	str	r0, [r5, #16]
 80170a2:	b930      	cbnz	r0, 80170b2 <_svfiprintf_r+0x32>
 80170a4:	230c      	movs	r3, #12
 80170a6:	603b      	str	r3, [r7, #0]
 80170a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170ac:	b01d      	add	sp, #116	@ 0x74
 80170ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b2:	2340      	movs	r3, #64	@ 0x40
 80170b4:	616b      	str	r3, [r5, #20]
 80170b6:	2300      	movs	r3, #0
 80170b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80170ba:	2320      	movs	r3, #32
 80170bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80170c4:	2330      	movs	r3, #48	@ 0x30
 80170c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017264 <_svfiprintf_r+0x1e4>
 80170ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170ce:	f04f 0901 	mov.w	r9, #1
 80170d2:	4623      	mov	r3, r4
 80170d4:	469a      	mov	sl, r3
 80170d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170da:	b10a      	cbz	r2, 80170e0 <_svfiprintf_r+0x60>
 80170dc:	2a25      	cmp	r2, #37	@ 0x25
 80170de:	d1f9      	bne.n	80170d4 <_svfiprintf_r+0x54>
 80170e0:	ebba 0b04 	subs.w	fp, sl, r4
 80170e4:	d00b      	beq.n	80170fe <_svfiprintf_r+0x7e>
 80170e6:	465b      	mov	r3, fp
 80170e8:	4622      	mov	r2, r4
 80170ea:	4629      	mov	r1, r5
 80170ec:	4638      	mov	r0, r7
 80170ee:	f7ff ff6b 	bl	8016fc8 <__ssputs_r>
 80170f2:	3001      	adds	r0, #1
 80170f4:	f000 80a7 	beq.w	8017246 <_svfiprintf_r+0x1c6>
 80170f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170fa:	445a      	add	r2, fp
 80170fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80170fe:	f89a 3000 	ldrb.w	r3, [sl]
 8017102:	2b00      	cmp	r3, #0
 8017104:	f000 809f 	beq.w	8017246 <_svfiprintf_r+0x1c6>
 8017108:	2300      	movs	r3, #0
 801710a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801710e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017112:	f10a 0a01 	add.w	sl, sl, #1
 8017116:	9304      	str	r3, [sp, #16]
 8017118:	9307      	str	r3, [sp, #28]
 801711a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801711e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017120:	4654      	mov	r4, sl
 8017122:	2205      	movs	r2, #5
 8017124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017128:	484e      	ldr	r0, [pc, #312]	@ (8017264 <_svfiprintf_r+0x1e4>)
 801712a:	f7e9 f859 	bl	80001e0 <memchr>
 801712e:	9a04      	ldr	r2, [sp, #16]
 8017130:	b9d8      	cbnz	r0, 801716a <_svfiprintf_r+0xea>
 8017132:	06d0      	lsls	r0, r2, #27
 8017134:	bf44      	itt	mi
 8017136:	2320      	movmi	r3, #32
 8017138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801713c:	0711      	lsls	r1, r2, #28
 801713e:	bf44      	itt	mi
 8017140:	232b      	movmi	r3, #43	@ 0x2b
 8017142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017146:	f89a 3000 	ldrb.w	r3, [sl]
 801714a:	2b2a      	cmp	r3, #42	@ 0x2a
 801714c:	d015      	beq.n	801717a <_svfiprintf_r+0xfa>
 801714e:	9a07      	ldr	r2, [sp, #28]
 8017150:	4654      	mov	r4, sl
 8017152:	2000      	movs	r0, #0
 8017154:	f04f 0c0a 	mov.w	ip, #10
 8017158:	4621      	mov	r1, r4
 801715a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801715e:	3b30      	subs	r3, #48	@ 0x30
 8017160:	2b09      	cmp	r3, #9
 8017162:	d94b      	bls.n	80171fc <_svfiprintf_r+0x17c>
 8017164:	b1b0      	cbz	r0, 8017194 <_svfiprintf_r+0x114>
 8017166:	9207      	str	r2, [sp, #28]
 8017168:	e014      	b.n	8017194 <_svfiprintf_r+0x114>
 801716a:	eba0 0308 	sub.w	r3, r0, r8
 801716e:	fa09 f303 	lsl.w	r3, r9, r3
 8017172:	4313      	orrs	r3, r2
 8017174:	9304      	str	r3, [sp, #16]
 8017176:	46a2      	mov	sl, r4
 8017178:	e7d2      	b.n	8017120 <_svfiprintf_r+0xa0>
 801717a:	9b03      	ldr	r3, [sp, #12]
 801717c:	1d19      	adds	r1, r3, #4
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	9103      	str	r1, [sp, #12]
 8017182:	2b00      	cmp	r3, #0
 8017184:	bfbb      	ittet	lt
 8017186:	425b      	neglt	r3, r3
 8017188:	f042 0202 	orrlt.w	r2, r2, #2
 801718c:	9307      	strge	r3, [sp, #28]
 801718e:	9307      	strlt	r3, [sp, #28]
 8017190:	bfb8      	it	lt
 8017192:	9204      	strlt	r2, [sp, #16]
 8017194:	7823      	ldrb	r3, [r4, #0]
 8017196:	2b2e      	cmp	r3, #46	@ 0x2e
 8017198:	d10a      	bne.n	80171b0 <_svfiprintf_r+0x130>
 801719a:	7863      	ldrb	r3, [r4, #1]
 801719c:	2b2a      	cmp	r3, #42	@ 0x2a
 801719e:	d132      	bne.n	8017206 <_svfiprintf_r+0x186>
 80171a0:	9b03      	ldr	r3, [sp, #12]
 80171a2:	1d1a      	adds	r2, r3, #4
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	9203      	str	r2, [sp, #12]
 80171a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171ac:	3402      	adds	r4, #2
 80171ae:	9305      	str	r3, [sp, #20]
 80171b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017274 <_svfiprintf_r+0x1f4>
 80171b4:	7821      	ldrb	r1, [r4, #0]
 80171b6:	2203      	movs	r2, #3
 80171b8:	4650      	mov	r0, sl
 80171ba:	f7e9 f811 	bl	80001e0 <memchr>
 80171be:	b138      	cbz	r0, 80171d0 <_svfiprintf_r+0x150>
 80171c0:	9b04      	ldr	r3, [sp, #16]
 80171c2:	eba0 000a 	sub.w	r0, r0, sl
 80171c6:	2240      	movs	r2, #64	@ 0x40
 80171c8:	4082      	lsls	r2, r0
 80171ca:	4313      	orrs	r3, r2
 80171cc:	3401      	adds	r4, #1
 80171ce:	9304      	str	r3, [sp, #16]
 80171d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171d4:	4824      	ldr	r0, [pc, #144]	@ (8017268 <_svfiprintf_r+0x1e8>)
 80171d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171da:	2206      	movs	r2, #6
 80171dc:	f7e9 f800 	bl	80001e0 <memchr>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d036      	beq.n	8017252 <_svfiprintf_r+0x1d2>
 80171e4:	4b21      	ldr	r3, [pc, #132]	@ (801726c <_svfiprintf_r+0x1ec>)
 80171e6:	bb1b      	cbnz	r3, 8017230 <_svfiprintf_r+0x1b0>
 80171e8:	9b03      	ldr	r3, [sp, #12]
 80171ea:	3307      	adds	r3, #7
 80171ec:	f023 0307 	bic.w	r3, r3, #7
 80171f0:	3308      	adds	r3, #8
 80171f2:	9303      	str	r3, [sp, #12]
 80171f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171f6:	4433      	add	r3, r6
 80171f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80171fa:	e76a      	b.n	80170d2 <_svfiprintf_r+0x52>
 80171fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017200:	460c      	mov	r4, r1
 8017202:	2001      	movs	r0, #1
 8017204:	e7a8      	b.n	8017158 <_svfiprintf_r+0xd8>
 8017206:	2300      	movs	r3, #0
 8017208:	3401      	adds	r4, #1
 801720a:	9305      	str	r3, [sp, #20]
 801720c:	4619      	mov	r1, r3
 801720e:	f04f 0c0a 	mov.w	ip, #10
 8017212:	4620      	mov	r0, r4
 8017214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017218:	3a30      	subs	r2, #48	@ 0x30
 801721a:	2a09      	cmp	r2, #9
 801721c:	d903      	bls.n	8017226 <_svfiprintf_r+0x1a6>
 801721e:	2b00      	cmp	r3, #0
 8017220:	d0c6      	beq.n	80171b0 <_svfiprintf_r+0x130>
 8017222:	9105      	str	r1, [sp, #20]
 8017224:	e7c4      	b.n	80171b0 <_svfiprintf_r+0x130>
 8017226:	fb0c 2101 	mla	r1, ip, r1, r2
 801722a:	4604      	mov	r4, r0
 801722c:	2301      	movs	r3, #1
 801722e:	e7f0      	b.n	8017212 <_svfiprintf_r+0x192>
 8017230:	ab03      	add	r3, sp, #12
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	462a      	mov	r2, r5
 8017236:	4b0e      	ldr	r3, [pc, #56]	@ (8017270 <_svfiprintf_r+0x1f0>)
 8017238:	a904      	add	r1, sp, #16
 801723a:	4638      	mov	r0, r7
 801723c:	f3af 8000 	nop.w
 8017240:	1c42      	adds	r2, r0, #1
 8017242:	4606      	mov	r6, r0
 8017244:	d1d6      	bne.n	80171f4 <_svfiprintf_r+0x174>
 8017246:	89ab      	ldrh	r3, [r5, #12]
 8017248:	065b      	lsls	r3, r3, #25
 801724a:	f53f af2d 	bmi.w	80170a8 <_svfiprintf_r+0x28>
 801724e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017250:	e72c      	b.n	80170ac <_svfiprintf_r+0x2c>
 8017252:	ab03      	add	r3, sp, #12
 8017254:	9300      	str	r3, [sp, #0]
 8017256:	462a      	mov	r2, r5
 8017258:	4b05      	ldr	r3, [pc, #20]	@ (8017270 <_svfiprintf_r+0x1f0>)
 801725a:	a904      	add	r1, sp, #16
 801725c:	4638      	mov	r0, r7
 801725e:	f000 fa65 	bl	801772c <_printf_i>
 8017262:	e7ed      	b.n	8017240 <_svfiprintf_r+0x1c0>
 8017264:	0801beb4 	.word	0x0801beb4
 8017268:	0801bebe 	.word	0x0801bebe
 801726c:	00000000 	.word	0x00000000
 8017270:	08016fc9 	.word	0x08016fc9
 8017274:	0801beba 	.word	0x0801beba

08017278 <__sfputc_r>:
 8017278:	6893      	ldr	r3, [r2, #8]
 801727a:	3b01      	subs	r3, #1
 801727c:	2b00      	cmp	r3, #0
 801727e:	b410      	push	{r4}
 8017280:	6093      	str	r3, [r2, #8]
 8017282:	da08      	bge.n	8017296 <__sfputc_r+0x1e>
 8017284:	6994      	ldr	r4, [r2, #24]
 8017286:	42a3      	cmp	r3, r4
 8017288:	db01      	blt.n	801728e <__sfputc_r+0x16>
 801728a:	290a      	cmp	r1, #10
 801728c:	d103      	bne.n	8017296 <__sfputc_r+0x1e>
 801728e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017292:	f000 bca7 	b.w	8017be4 <__swbuf_r>
 8017296:	6813      	ldr	r3, [r2, #0]
 8017298:	1c58      	adds	r0, r3, #1
 801729a:	6010      	str	r0, [r2, #0]
 801729c:	7019      	strb	r1, [r3, #0]
 801729e:	4608      	mov	r0, r1
 80172a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172a4:	4770      	bx	lr

080172a6 <__sfputs_r>:
 80172a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172a8:	4606      	mov	r6, r0
 80172aa:	460f      	mov	r7, r1
 80172ac:	4614      	mov	r4, r2
 80172ae:	18d5      	adds	r5, r2, r3
 80172b0:	42ac      	cmp	r4, r5
 80172b2:	d101      	bne.n	80172b8 <__sfputs_r+0x12>
 80172b4:	2000      	movs	r0, #0
 80172b6:	e007      	b.n	80172c8 <__sfputs_r+0x22>
 80172b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172bc:	463a      	mov	r2, r7
 80172be:	4630      	mov	r0, r6
 80172c0:	f7ff ffda 	bl	8017278 <__sfputc_r>
 80172c4:	1c43      	adds	r3, r0, #1
 80172c6:	d1f3      	bne.n	80172b0 <__sfputs_r+0xa>
 80172c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172cc <_vfiprintf_r>:
 80172cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d0:	460d      	mov	r5, r1
 80172d2:	b09d      	sub	sp, #116	@ 0x74
 80172d4:	4614      	mov	r4, r2
 80172d6:	4698      	mov	r8, r3
 80172d8:	4606      	mov	r6, r0
 80172da:	b118      	cbz	r0, 80172e4 <_vfiprintf_r+0x18>
 80172dc:	6a03      	ldr	r3, [r0, #32]
 80172de:	b90b      	cbnz	r3, 80172e4 <_vfiprintf_r+0x18>
 80172e0:	f7ff fce2 	bl	8016ca8 <__sinit>
 80172e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172e6:	07d9      	lsls	r1, r3, #31
 80172e8:	d405      	bmi.n	80172f6 <_vfiprintf_r+0x2a>
 80172ea:	89ab      	ldrh	r3, [r5, #12]
 80172ec:	059a      	lsls	r2, r3, #22
 80172ee:	d402      	bmi.n	80172f6 <_vfiprintf_r+0x2a>
 80172f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172f2:	f7ff fdf0 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 80172f6:	89ab      	ldrh	r3, [r5, #12]
 80172f8:	071b      	lsls	r3, r3, #28
 80172fa:	d501      	bpl.n	8017300 <_vfiprintf_r+0x34>
 80172fc:	692b      	ldr	r3, [r5, #16]
 80172fe:	b99b      	cbnz	r3, 8017328 <_vfiprintf_r+0x5c>
 8017300:	4629      	mov	r1, r5
 8017302:	4630      	mov	r0, r6
 8017304:	f000 fcac 	bl	8017c60 <__swsetup_r>
 8017308:	b170      	cbz	r0, 8017328 <_vfiprintf_r+0x5c>
 801730a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801730c:	07dc      	lsls	r4, r3, #31
 801730e:	d504      	bpl.n	801731a <_vfiprintf_r+0x4e>
 8017310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017314:	b01d      	add	sp, #116	@ 0x74
 8017316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801731a:	89ab      	ldrh	r3, [r5, #12]
 801731c:	0598      	lsls	r0, r3, #22
 801731e:	d4f7      	bmi.n	8017310 <_vfiprintf_r+0x44>
 8017320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017322:	f7ff fdd9 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017326:	e7f3      	b.n	8017310 <_vfiprintf_r+0x44>
 8017328:	2300      	movs	r3, #0
 801732a:	9309      	str	r3, [sp, #36]	@ 0x24
 801732c:	2320      	movs	r3, #32
 801732e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017332:	f8cd 800c 	str.w	r8, [sp, #12]
 8017336:	2330      	movs	r3, #48	@ 0x30
 8017338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80174e8 <_vfiprintf_r+0x21c>
 801733c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017340:	f04f 0901 	mov.w	r9, #1
 8017344:	4623      	mov	r3, r4
 8017346:	469a      	mov	sl, r3
 8017348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801734c:	b10a      	cbz	r2, 8017352 <_vfiprintf_r+0x86>
 801734e:	2a25      	cmp	r2, #37	@ 0x25
 8017350:	d1f9      	bne.n	8017346 <_vfiprintf_r+0x7a>
 8017352:	ebba 0b04 	subs.w	fp, sl, r4
 8017356:	d00b      	beq.n	8017370 <_vfiprintf_r+0xa4>
 8017358:	465b      	mov	r3, fp
 801735a:	4622      	mov	r2, r4
 801735c:	4629      	mov	r1, r5
 801735e:	4630      	mov	r0, r6
 8017360:	f7ff ffa1 	bl	80172a6 <__sfputs_r>
 8017364:	3001      	adds	r0, #1
 8017366:	f000 80a7 	beq.w	80174b8 <_vfiprintf_r+0x1ec>
 801736a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801736c:	445a      	add	r2, fp
 801736e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017370:	f89a 3000 	ldrb.w	r3, [sl]
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 809f 	beq.w	80174b8 <_vfiprintf_r+0x1ec>
 801737a:	2300      	movs	r3, #0
 801737c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017384:	f10a 0a01 	add.w	sl, sl, #1
 8017388:	9304      	str	r3, [sp, #16]
 801738a:	9307      	str	r3, [sp, #28]
 801738c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017390:	931a      	str	r3, [sp, #104]	@ 0x68
 8017392:	4654      	mov	r4, sl
 8017394:	2205      	movs	r2, #5
 8017396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801739a:	4853      	ldr	r0, [pc, #332]	@ (80174e8 <_vfiprintf_r+0x21c>)
 801739c:	f7e8 ff20 	bl	80001e0 <memchr>
 80173a0:	9a04      	ldr	r2, [sp, #16]
 80173a2:	b9d8      	cbnz	r0, 80173dc <_vfiprintf_r+0x110>
 80173a4:	06d1      	lsls	r1, r2, #27
 80173a6:	bf44      	itt	mi
 80173a8:	2320      	movmi	r3, #32
 80173aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173ae:	0713      	lsls	r3, r2, #28
 80173b0:	bf44      	itt	mi
 80173b2:	232b      	movmi	r3, #43	@ 0x2b
 80173b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173b8:	f89a 3000 	ldrb.w	r3, [sl]
 80173bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80173be:	d015      	beq.n	80173ec <_vfiprintf_r+0x120>
 80173c0:	9a07      	ldr	r2, [sp, #28]
 80173c2:	4654      	mov	r4, sl
 80173c4:	2000      	movs	r0, #0
 80173c6:	f04f 0c0a 	mov.w	ip, #10
 80173ca:	4621      	mov	r1, r4
 80173cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173d0:	3b30      	subs	r3, #48	@ 0x30
 80173d2:	2b09      	cmp	r3, #9
 80173d4:	d94b      	bls.n	801746e <_vfiprintf_r+0x1a2>
 80173d6:	b1b0      	cbz	r0, 8017406 <_vfiprintf_r+0x13a>
 80173d8:	9207      	str	r2, [sp, #28]
 80173da:	e014      	b.n	8017406 <_vfiprintf_r+0x13a>
 80173dc:	eba0 0308 	sub.w	r3, r0, r8
 80173e0:	fa09 f303 	lsl.w	r3, r9, r3
 80173e4:	4313      	orrs	r3, r2
 80173e6:	9304      	str	r3, [sp, #16]
 80173e8:	46a2      	mov	sl, r4
 80173ea:	e7d2      	b.n	8017392 <_vfiprintf_r+0xc6>
 80173ec:	9b03      	ldr	r3, [sp, #12]
 80173ee:	1d19      	adds	r1, r3, #4
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	9103      	str	r1, [sp, #12]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	bfbb      	ittet	lt
 80173f8:	425b      	neglt	r3, r3
 80173fa:	f042 0202 	orrlt.w	r2, r2, #2
 80173fe:	9307      	strge	r3, [sp, #28]
 8017400:	9307      	strlt	r3, [sp, #28]
 8017402:	bfb8      	it	lt
 8017404:	9204      	strlt	r2, [sp, #16]
 8017406:	7823      	ldrb	r3, [r4, #0]
 8017408:	2b2e      	cmp	r3, #46	@ 0x2e
 801740a:	d10a      	bne.n	8017422 <_vfiprintf_r+0x156>
 801740c:	7863      	ldrb	r3, [r4, #1]
 801740e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017410:	d132      	bne.n	8017478 <_vfiprintf_r+0x1ac>
 8017412:	9b03      	ldr	r3, [sp, #12]
 8017414:	1d1a      	adds	r2, r3, #4
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	9203      	str	r2, [sp, #12]
 801741a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801741e:	3402      	adds	r4, #2
 8017420:	9305      	str	r3, [sp, #20]
 8017422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80174f8 <_vfiprintf_r+0x22c>
 8017426:	7821      	ldrb	r1, [r4, #0]
 8017428:	2203      	movs	r2, #3
 801742a:	4650      	mov	r0, sl
 801742c:	f7e8 fed8 	bl	80001e0 <memchr>
 8017430:	b138      	cbz	r0, 8017442 <_vfiprintf_r+0x176>
 8017432:	9b04      	ldr	r3, [sp, #16]
 8017434:	eba0 000a 	sub.w	r0, r0, sl
 8017438:	2240      	movs	r2, #64	@ 0x40
 801743a:	4082      	lsls	r2, r0
 801743c:	4313      	orrs	r3, r2
 801743e:	3401      	adds	r4, #1
 8017440:	9304      	str	r3, [sp, #16]
 8017442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017446:	4829      	ldr	r0, [pc, #164]	@ (80174ec <_vfiprintf_r+0x220>)
 8017448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801744c:	2206      	movs	r2, #6
 801744e:	f7e8 fec7 	bl	80001e0 <memchr>
 8017452:	2800      	cmp	r0, #0
 8017454:	d03f      	beq.n	80174d6 <_vfiprintf_r+0x20a>
 8017456:	4b26      	ldr	r3, [pc, #152]	@ (80174f0 <_vfiprintf_r+0x224>)
 8017458:	bb1b      	cbnz	r3, 80174a2 <_vfiprintf_r+0x1d6>
 801745a:	9b03      	ldr	r3, [sp, #12]
 801745c:	3307      	adds	r3, #7
 801745e:	f023 0307 	bic.w	r3, r3, #7
 8017462:	3308      	adds	r3, #8
 8017464:	9303      	str	r3, [sp, #12]
 8017466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017468:	443b      	add	r3, r7
 801746a:	9309      	str	r3, [sp, #36]	@ 0x24
 801746c:	e76a      	b.n	8017344 <_vfiprintf_r+0x78>
 801746e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017472:	460c      	mov	r4, r1
 8017474:	2001      	movs	r0, #1
 8017476:	e7a8      	b.n	80173ca <_vfiprintf_r+0xfe>
 8017478:	2300      	movs	r3, #0
 801747a:	3401      	adds	r4, #1
 801747c:	9305      	str	r3, [sp, #20]
 801747e:	4619      	mov	r1, r3
 8017480:	f04f 0c0a 	mov.w	ip, #10
 8017484:	4620      	mov	r0, r4
 8017486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801748a:	3a30      	subs	r2, #48	@ 0x30
 801748c:	2a09      	cmp	r2, #9
 801748e:	d903      	bls.n	8017498 <_vfiprintf_r+0x1cc>
 8017490:	2b00      	cmp	r3, #0
 8017492:	d0c6      	beq.n	8017422 <_vfiprintf_r+0x156>
 8017494:	9105      	str	r1, [sp, #20]
 8017496:	e7c4      	b.n	8017422 <_vfiprintf_r+0x156>
 8017498:	fb0c 2101 	mla	r1, ip, r1, r2
 801749c:	4604      	mov	r4, r0
 801749e:	2301      	movs	r3, #1
 80174a0:	e7f0      	b.n	8017484 <_vfiprintf_r+0x1b8>
 80174a2:	ab03      	add	r3, sp, #12
 80174a4:	9300      	str	r3, [sp, #0]
 80174a6:	462a      	mov	r2, r5
 80174a8:	4b12      	ldr	r3, [pc, #72]	@ (80174f4 <_vfiprintf_r+0x228>)
 80174aa:	a904      	add	r1, sp, #16
 80174ac:	4630      	mov	r0, r6
 80174ae:	f3af 8000 	nop.w
 80174b2:	4607      	mov	r7, r0
 80174b4:	1c78      	adds	r0, r7, #1
 80174b6:	d1d6      	bne.n	8017466 <_vfiprintf_r+0x19a>
 80174b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80174ba:	07d9      	lsls	r1, r3, #31
 80174bc:	d405      	bmi.n	80174ca <_vfiprintf_r+0x1fe>
 80174be:	89ab      	ldrh	r3, [r5, #12]
 80174c0:	059a      	lsls	r2, r3, #22
 80174c2:	d402      	bmi.n	80174ca <_vfiprintf_r+0x1fe>
 80174c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174c6:	f7ff fd07 	bl	8016ed8 <__retarget_lock_release_recursive>
 80174ca:	89ab      	ldrh	r3, [r5, #12]
 80174cc:	065b      	lsls	r3, r3, #25
 80174ce:	f53f af1f 	bmi.w	8017310 <_vfiprintf_r+0x44>
 80174d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174d4:	e71e      	b.n	8017314 <_vfiprintf_r+0x48>
 80174d6:	ab03      	add	r3, sp, #12
 80174d8:	9300      	str	r3, [sp, #0]
 80174da:	462a      	mov	r2, r5
 80174dc:	4b05      	ldr	r3, [pc, #20]	@ (80174f4 <_vfiprintf_r+0x228>)
 80174de:	a904      	add	r1, sp, #16
 80174e0:	4630      	mov	r0, r6
 80174e2:	f000 f923 	bl	801772c <_printf_i>
 80174e6:	e7e4      	b.n	80174b2 <_vfiprintf_r+0x1e6>
 80174e8:	0801beb4 	.word	0x0801beb4
 80174ec:	0801bebe 	.word	0x0801bebe
 80174f0:	00000000 	.word	0x00000000
 80174f4:	080172a7 	.word	0x080172a7
 80174f8:	0801beba 	.word	0x0801beba

080174fc <malloc>:
 80174fc:	4b02      	ldr	r3, [pc, #8]	@ (8017508 <malloc+0xc>)
 80174fe:	4601      	mov	r1, r0
 8017500:	6818      	ldr	r0, [r3, #0]
 8017502:	f000 b825 	b.w	8017550 <_malloc_r>
 8017506:	bf00      	nop
 8017508:	2000003c 	.word	0x2000003c

0801750c <sbrk_aligned>:
 801750c:	b570      	push	{r4, r5, r6, lr}
 801750e:	4e0f      	ldr	r6, [pc, #60]	@ (801754c <sbrk_aligned+0x40>)
 8017510:	460c      	mov	r4, r1
 8017512:	6831      	ldr	r1, [r6, #0]
 8017514:	4605      	mov	r5, r0
 8017516:	b911      	cbnz	r1, 801751e <sbrk_aligned+0x12>
 8017518:	f000 fcb0 	bl	8017e7c <_sbrk_r>
 801751c:	6030      	str	r0, [r6, #0]
 801751e:	4621      	mov	r1, r4
 8017520:	4628      	mov	r0, r5
 8017522:	f000 fcab 	bl	8017e7c <_sbrk_r>
 8017526:	1c43      	adds	r3, r0, #1
 8017528:	d103      	bne.n	8017532 <sbrk_aligned+0x26>
 801752a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801752e:	4620      	mov	r0, r4
 8017530:	bd70      	pop	{r4, r5, r6, pc}
 8017532:	1cc4      	adds	r4, r0, #3
 8017534:	f024 0403 	bic.w	r4, r4, #3
 8017538:	42a0      	cmp	r0, r4
 801753a:	d0f8      	beq.n	801752e <sbrk_aligned+0x22>
 801753c:	1a21      	subs	r1, r4, r0
 801753e:	4628      	mov	r0, r5
 8017540:	f000 fc9c 	bl	8017e7c <_sbrk_r>
 8017544:	3001      	adds	r0, #1
 8017546:	d1f2      	bne.n	801752e <sbrk_aligned+0x22>
 8017548:	e7ef      	b.n	801752a <sbrk_aligned+0x1e>
 801754a:	bf00      	nop
 801754c:	2000db44 	.word	0x2000db44

08017550 <_malloc_r>:
 8017550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017554:	1ccd      	adds	r5, r1, #3
 8017556:	f025 0503 	bic.w	r5, r5, #3
 801755a:	3508      	adds	r5, #8
 801755c:	2d0c      	cmp	r5, #12
 801755e:	bf38      	it	cc
 8017560:	250c      	movcc	r5, #12
 8017562:	2d00      	cmp	r5, #0
 8017564:	4606      	mov	r6, r0
 8017566:	db01      	blt.n	801756c <_malloc_r+0x1c>
 8017568:	42a9      	cmp	r1, r5
 801756a:	d904      	bls.n	8017576 <_malloc_r+0x26>
 801756c:	230c      	movs	r3, #12
 801756e:	6033      	str	r3, [r6, #0]
 8017570:	2000      	movs	r0, #0
 8017572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801764c <_malloc_r+0xfc>
 801757a:	f000 faa3 	bl	8017ac4 <__malloc_lock>
 801757e:	f8d8 3000 	ldr.w	r3, [r8]
 8017582:	461c      	mov	r4, r3
 8017584:	bb44      	cbnz	r4, 80175d8 <_malloc_r+0x88>
 8017586:	4629      	mov	r1, r5
 8017588:	4630      	mov	r0, r6
 801758a:	f7ff ffbf 	bl	801750c <sbrk_aligned>
 801758e:	1c43      	adds	r3, r0, #1
 8017590:	4604      	mov	r4, r0
 8017592:	d158      	bne.n	8017646 <_malloc_r+0xf6>
 8017594:	f8d8 4000 	ldr.w	r4, [r8]
 8017598:	4627      	mov	r7, r4
 801759a:	2f00      	cmp	r7, #0
 801759c:	d143      	bne.n	8017626 <_malloc_r+0xd6>
 801759e:	2c00      	cmp	r4, #0
 80175a0:	d04b      	beq.n	801763a <_malloc_r+0xea>
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	4639      	mov	r1, r7
 80175a6:	4630      	mov	r0, r6
 80175a8:	eb04 0903 	add.w	r9, r4, r3
 80175ac:	f000 fc66 	bl	8017e7c <_sbrk_r>
 80175b0:	4581      	cmp	r9, r0
 80175b2:	d142      	bne.n	801763a <_malloc_r+0xea>
 80175b4:	6821      	ldr	r1, [r4, #0]
 80175b6:	1a6d      	subs	r5, r5, r1
 80175b8:	4629      	mov	r1, r5
 80175ba:	4630      	mov	r0, r6
 80175bc:	f7ff ffa6 	bl	801750c <sbrk_aligned>
 80175c0:	3001      	adds	r0, #1
 80175c2:	d03a      	beq.n	801763a <_malloc_r+0xea>
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	442b      	add	r3, r5
 80175c8:	6023      	str	r3, [r4, #0]
 80175ca:	f8d8 3000 	ldr.w	r3, [r8]
 80175ce:	685a      	ldr	r2, [r3, #4]
 80175d0:	bb62      	cbnz	r2, 801762c <_malloc_r+0xdc>
 80175d2:	f8c8 7000 	str.w	r7, [r8]
 80175d6:	e00f      	b.n	80175f8 <_malloc_r+0xa8>
 80175d8:	6822      	ldr	r2, [r4, #0]
 80175da:	1b52      	subs	r2, r2, r5
 80175dc:	d420      	bmi.n	8017620 <_malloc_r+0xd0>
 80175de:	2a0b      	cmp	r2, #11
 80175e0:	d917      	bls.n	8017612 <_malloc_r+0xc2>
 80175e2:	1961      	adds	r1, r4, r5
 80175e4:	42a3      	cmp	r3, r4
 80175e6:	6025      	str	r5, [r4, #0]
 80175e8:	bf18      	it	ne
 80175ea:	6059      	strne	r1, [r3, #4]
 80175ec:	6863      	ldr	r3, [r4, #4]
 80175ee:	bf08      	it	eq
 80175f0:	f8c8 1000 	streq.w	r1, [r8]
 80175f4:	5162      	str	r2, [r4, r5]
 80175f6:	604b      	str	r3, [r1, #4]
 80175f8:	4630      	mov	r0, r6
 80175fa:	f000 fa69 	bl	8017ad0 <__malloc_unlock>
 80175fe:	f104 000b 	add.w	r0, r4, #11
 8017602:	1d23      	adds	r3, r4, #4
 8017604:	f020 0007 	bic.w	r0, r0, #7
 8017608:	1ac2      	subs	r2, r0, r3
 801760a:	bf1c      	itt	ne
 801760c:	1a1b      	subne	r3, r3, r0
 801760e:	50a3      	strne	r3, [r4, r2]
 8017610:	e7af      	b.n	8017572 <_malloc_r+0x22>
 8017612:	6862      	ldr	r2, [r4, #4]
 8017614:	42a3      	cmp	r3, r4
 8017616:	bf0c      	ite	eq
 8017618:	f8c8 2000 	streq.w	r2, [r8]
 801761c:	605a      	strne	r2, [r3, #4]
 801761e:	e7eb      	b.n	80175f8 <_malloc_r+0xa8>
 8017620:	4623      	mov	r3, r4
 8017622:	6864      	ldr	r4, [r4, #4]
 8017624:	e7ae      	b.n	8017584 <_malloc_r+0x34>
 8017626:	463c      	mov	r4, r7
 8017628:	687f      	ldr	r7, [r7, #4]
 801762a:	e7b6      	b.n	801759a <_malloc_r+0x4a>
 801762c:	461a      	mov	r2, r3
 801762e:	685b      	ldr	r3, [r3, #4]
 8017630:	42a3      	cmp	r3, r4
 8017632:	d1fb      	bne.n	801762c <_malloc_r+0xdc>
 8017634:	2300      	movs	r3, #0
 8017636:	6053      	str	r3, [r2, #4]
 8017638:	e7de      	b.n	80175f8 <_malloc_r+0xa8>
 801763a:	230c      	movs	r3, #12
 801763c:	6033      	str	r3, [r6, #0]
 801763e:	4630      	mov	r0, r6
 8017640:	f000 fa46 	bl	8017ad0 <__malloc_unlock>
 8017644:	e794      	b.n	8017570 <_malloc_r+0x20>
 8017646:	6005      	str	r5, [r0, #0]
 8017648:	e7d6      	b.n	80175f8 <_malloc_r+0xa8>
 801764a:	bf00      	nop
 801764c:	2000db48 	.word	0x2000db48

08017650 <_printf_common>:
 8017650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017654:	4616      	mov	r6, r2
 8017656:	4698      	mov	r8, r3
 8017658:	688a      	ldr	r2, [r1, #8]
 801765a:	690b      	ldr	r3, [r1, #16]
 801765c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017660:	4293      	cmp	r3, r2
 8017662:	bfb8      	it	lt
 8017664:	4613      	movlt	r3, r2
 8017666:	6033      	str	r3, [r6, #0]
 8017668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801766c:	4607      	mov	r7, r0
 801766e:	460c      	mov	r4, r1
 8017670:	b10a      	cbz	r2, 8017676 <_printf_common+0x26>
 8017672:	3301      	adds	r3, #1
 8017674:	6033      	str	r3, [r6, #0]
 8017676:	6823      	ldr	r3, [r4, #0]
 8017678:	0699      	lsls	r1, r3, #26
 801767a:	bf42      	ittt	mi
 801767c:	6833      	ldrmi	r3, [r6, #0]
 801767e:	3302      	addmi	r3, #2
 8017680:	6033      	strmi	r3, [r6, #0]
 8017682:	6825      	ldr	r5, [r4, #0]
 8017684:	f015 0506 	ands.w	r5, r5, #6
 8017688:	d106      	bne.n	8017698 <_printf_common+0x48>
 801768a:	f104 0a19 	add.w	sl, r4, #25
 801768e:	68e3      	ldr	r3, [r4, #12]
 8017690:	6832      	ldr	r2, [r6, #0]
 8017692:	1a9b      	subs	r3, r3, r2
 8017694:	42ab      	cmp	r3, r5
 8017696:	dc26      	bgt.n	80176e6 <_printf_common+0x96>
 8017698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801769c:	6822      	ldr	r2, [r4, #0]
 801769e:	3b00      	subs	r3, #0
 80176a0:	bf18      	it	ne
 80176a2:	2301      	movne	r3, #1
 80176a4:	0692      	lsls	r2, r2, #26
 80176a6:	d42b      	bmi.n	8017700 <_printf_common+0xb0>
 80176a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176ac:	4641      	mov	r1, r8
 80176ae:	4638      	mov	r0, r7
 80176b0:	47c8      	blx	r9
 80176b2:	3001      	adds	r0, #1
 80176b4:	d01e      	beq.n	80176f4 <_printf_common+0xa4>
 80176b6:	6823      	ldr	r3, [r4, #0]
 80176b8:	6922      	ldr	r2, [r4, #16]
 80176ba:	f003 0306 	and.w	r3, r3, #6
 80176be:	2b04      	cmp	r3, #4
 80176c0:	bf02      	ittt	eq
 80176c2:	68e5      	ldreq	r5, [r4, #12]
 80176c4:	6833      	ldreq	r3, [r6, #0]
 80176c6:	1aed      	subeq	r5, r5, r3
 80176c8:	68a3      	ldr	r3, [r4, #8]
 80176ca:	bf0c      	ite	eq
 80176cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176d0:	2500      	movne	r5, #0
 80176d2:	4293      	cmp	r3, r2
 80176d4:	bfc4      	itt	gt
 80176d6:	1a9b      	subgt	r3, r3, r2
 80176d8:	18ed      	addgt	r5, r5, r3
 80176da:	2600      	movs	r6, #0
 80176dc:	341a      	adds	r4, #26
 80176de:	42b5      	cmp	r5, r6
 80176e0:	d11a      	bne.n	8017718 <_printf_common+0xc8>
 80176e2:	2000      	movs	r0, #0
 80176e4:	e008      	b.n	80176f8 <_printf_common+0xa8>
 80176e6:	2301      	movs	r3, #1
 80176e8:	4652      	mov	r2, sl
 80176ea:	4641      	mov	r1, r8
 80176ec:	4638      	mov	r0, r7
 80176ee:	47c8      	blx	r9
 80176f0:	3001      	adds	r0, #1
 80176f2:	d103      	bne.n	80176fc <_printf_common+0xac>
 80176f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fc:	3501      	adds	r5, #1
 80176fe:	e7c6      	b.n	801768e <_printf_common+0x3e>
 8017700:	18e1      	adds	r1, r4, r3
 8017702:	1c5a      	adds	r2, r3, #1
 8017704:	2030      	movs	r0, #48	@ 0x30
 8017706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801770a:	4422      	add	r2, r4
 801770c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017714:	3302      	adds	r3, #2
 8017716:	e7c7      	b.n	80176a8 <_printf_common+0x58>
 8017718:	2301      	movs	r3, #1
 801771a:	4622      	mov	r2, r4
 801771c:	4641      	mov	r1, r8
 801771e:	4638      	mov	r0, r7
 8017720:	47c8      	blx	r9
 8017722:	3001      	adds	r0, #1
 8017724:	d0e6      	beq.n	80176f4 <_printf_common+0xa4>
 8017726:	3601      	adds	r6, #1
 8017728:	e7d9      	b.n	80176de <_printf_common+0x8e>
	...

0801772c <_printf_i>:
 801772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017730:	7e0f      	ldrb	r7, [r1, #24]
 8017732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017734:	2f78      	cmp	r7, #120	@ 0x78
 8017736:	4691      	mov	r9, r2
 8017738:	4680      	mov	r8, r0
 801773a:	460c      	mov	r4, r1
 801773c:	469a      	mov	sl, r3
 801773e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017742:	d807      	bhi.n	8017754 <_printf_i+0x28>
 8017744:	2f62      	cmp	r7, #98	@ 0x62
 8017746:	d80a      	bhi.n	801775e <_printf_i+0x32>
 8017748:	2f00      	cmp	r7, #0
 801774a:	f000 80d2 	beq.w	80178f2 <_printf_i+0x1c6>
 801774e:	2f58      	cmp	r7, #88	@ 0x58
 8017750:	f000 80b9 	beq.w	80178c6 <_printf_i+0x19a>
 8017754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801775c:	e03a      	b.n	80177d4 <_printf_i+0xa8>
 801775e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017762:	2b15      	cmp	r3, #21
 8017764:	d8f6      	bhi.n	8017754 <_printf_i+0x28>
 8017766:	a101      	add	r1, pc, #4	@ (adr r1, 801776c <_printf_i+0x40>)
 8017768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801776c:	080177c5 	.word	0x080177c5
 8017770:	080177d9 	.word	0x080177d9
 8017774:	08017755 	.word	0x08017755
 8017778:	08017755 	.word	0x08017755
 801777c:	08017755 	.word	0x08017755
 8017780:	08017755 	.word	0x08017755
 8017784:	080177d9 	.word	0x080177d9
 8017788:	08017755 	.word	0x08017755
 801778c:	08017755 	.word	0x08017755
 8017790:	08017755 	.word	0x08017755
 8017794:	08017755 	.word	0x08017755
 8017798:	080178d9 	.word	0x080178d9
 801779c:	08017803 	.word	0x08017803
 80177a0:	08017893 	.word	0x08017893
 80177a4:	08017755 	.word	0x08017755
 80177a8:	08017755 	.word	0x08017755
 80177ac:	080178fb 	.word	0x080178fb
 80177b0:	08017755 	.word	0x08017755
 80177b4:	08017803 	.word	0x08017803
 80177b8:	08017755 	.word	0x08017755
 80177bc:	08017755 	.word	0x08017755
 80177c0:	0801789b 	.word	0x0801789b
 80177c4:	6833      	ldr	r3, [r6, #0]
 80177c6:	1d1a      	adds	r2, r3, #4
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	6032      	str	r2, [r6, #0]
 80177cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80177d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80177d4:	2301      	movs	r3, #1
 80177d6:	e09d      	b.n	8017914 <_printf_i+0x1e8>
 80177d8:	6833      	ldr	r3, [r6, #0]
 80177da:	6820      	ldr	r0, [r4, #0]
 80177dc:	1d19      	adds	r1, r3, #4
 80177de:	6031      	str	r1, [r6, #0]
 80177e0:	0606      	lsls	r6, r0, #24
 80177e2:	d501      	bpl.n	80177e8 <_printf_i+0xbc>
 80177e4:	681d      	ldr	r5, [r3, #0]
 80177e6:	e003      	b.n	80177f0 <_printf_i+0xc4>
 80177e8:	0645      	lsls	r5, r0, #25
 80177ea:	d5fb      	bpl.n	80177e4 <_printf_i+0xb8>
 80177ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80177f0:	2d00      	cmp	r5, #0
 80177f2:	da03      	bge.n	80177fc <_printf_i+0xd0>
 80177f4:	232d      	movs	r3, #45	@ 0x2d
 80177f6:	426d      	negs	r5, r5
 80177f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80177fc:	4859      	ldr	r0, [pc, #356]	@ (8017964 <_printf_i+0x238>)
 80177fe:	230a      	movs	r3, #10
 8017800:	e011      	b.n	8017826 <_printf_i+0xfa>
 8017802:	6821      	ldr	r1, [r4, #0]
 8017804:	6833      	ldr	r3, [r6, #0]
 8017806:	0608      	lsls	r0, r1, #24
 8017808:	f853 5b04 	ldr.w	r5, [r3], #4
 801780c:	d402      	bmi.n	8017814 <_printf_i+0xe8>
 801780e:	0649      	lsls	r1, r1, #25
 8017810:	bf48      	it	mi
 8017812:	b2ad      	uxthmi	r5, r5
 8017814:	2f6f      	cmp	r7, #111	@ 0x6f
 8017816:	4853      	ldr	r0, [pc, #332]	@ (8017964 <_printf_i+0x238>)
 8017818:	6033      	str	r3, [r6, #0]
 801781a:	bf14      	ite	ne
 801781c:	230a      	movne	r3, #10
 801781e:	2308      	moveq	r3, #8
 8017820:	2100      	movs	r1, #0
 8017822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017826:	6866      	ldr	r6, [r4, #4]
 8017828:	60a6      	str	r6, [r4, #8]
 801782a:	2e00      	cmp	r6, #0
 801782c:	bfa2      	ittt	ge
 801782e:	6821      	ldrge	r1, [r4, #0]
 8017830:	f021 0104 	bicge.w	r1, r1, #4
 8017834:	6021      	strge	r1, [r4, #0]
 8017836:	b90d      	cbnz	r5, 801783c <_printf_i+0x110>
 8017838:	2e00      	cmp	r6, #0
 801783a:	d04b      	beq.n	80178d4 <_printf_i+0x1a8>
 801783c:	4616      	mov	r6, r2
 801783e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017842:	fb03 5711 	mls	r7, r3, r1, r5
 8017846:	5dc7      	ldrb	r7, [r0, r7]
 8017848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801784c:	462f      	mov	r7, r5
 801784e:	42bb      	cmp	r3, r7
 8017850:	460d      	mov	r5, r1
 8017852:	d9f4      	bls.n	801783e <_printf_i+0x112>
 8017854:	2b08      	cmp	r3, #8
 8017856:	d10b      	bne.n	8017870 <_printf_i+0x144>
 8017858:	6823      	ldr	r3, [r4, #0]
 801785a:	07df      	lsls	r7, r3, #31
 801785c:	d508      	bpl.n	8017870 <_printf_i+0x144>
 801785e:	6923      	ldr	r3, [r4, #16]
 8017860:	6861      	ldr	r1, [r4, #4]
 8017862:	4299      	cmp	r1, r3
 8017864:	bfde      	ittt	le
 8017866:	2330      	movle	r3, #48	@ 0x30
 8017868:	f806 3c01 	strble.w	r3, [r6, #-1]
 801786c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017870:	1b92      	subs	r2, r2, r6
 8017872:	6122      	str	r2, [r4, #16]
 8017874:	f8cd a000 	str.w	sl, [sp]
 8017878:	464b      	mov	r3, r9
 801787a:	aa03      	add	r2, sp, #12
 801787c:	4621      	mov	r1, r4
 801787e:	4640      	mov	r0, r8
 8017880:	f7ff fee6 	bl	8017650 <_printf_common>
 8017884:	3001      	adds	r0, #1
 8017886:	d14a      	bne.n	801791e <_printf_i+0x1f2>
 8017888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801788c:	b004      	add	sp, #16
 801788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	f043 0320 	orr.w	r3, r3, #32
 8017898:	6023      	str	r3, [r4, #0]
 801789a:	4833      	ldr	r0, [pc, #204]	@ (8017968 <_printf_i+0x23c>)
 801789c:	2778      	movs	r7, #120	@ 0x78
 801789e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	6831      	ldr	r1, [r6, #0]
 80178a6:	061f      	lsls	r7, r3, #24
 80178a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80178ac:	d402      	bmi.n	80178b4 <_printf_i+0x188>
 80178ae:	065f      	lsls	r7, r3, #25
 80178b0:	bf48      	it	mi
 80178b2:	b2ad      	uxthmi	r5, r5
 80178b4:	6031      	str	r1, [r6, #0]
 80178b6:	07d9      	lsls	r1, r3, #31
 80178b8:	bf44      	itt	mi
 80178ba:	f043 0320 	orrmi.w	r3, r3, #32
 80178be:	6023      	strmi	r3, [r4, #0]
 80178c0:	b11d      	cbz	r5, 80178ca <_printf_i+0x19e>
 80178c2:	2310      	movs	r3, #16
 80178c4:	e7ac      	b.n	8017820 <_printf_i+0xf4>
 80178c6:	4827      	ldr	r0, [pc, #156]	@ (8017964 <_printf_i+0x238>)
 80178c8:	e7e9      	b.n	801789e <_printf_i+0x172>
 80178ca:	6823      	ldr	r3, [r4, #0]
 80178cc:	f023 0320 	bic.w	r3, r3, #32
 80178d0:	6023      	str	r3, [r4, #0]
 80178d2:	e7f6      	b.n	80178c2 <_printf_i+0x196>
 80178d4:	4616      	mov	r6, r2
 80178d6:	e7bd      	b.n	8017854 <_printf_i+0x128>
 80178d8:	6833      	ldr	r3, [r6, #0]
 80178da:	6825      	ldr	r5, [r4, #0]
 80178dc:	6961      	ldr	r1, [r4, #20]
 80178de:	1d18      	adds	r0, r3, #4
 80178e0:	6030      	str	r0, [r6, #0]
 80178e2:	062e      	lsls	r6, r5, #24
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	d501      	bpl.n	80178ec <_printf_i+0x1c0>
 80178e8:	6019      	str	r1, [r3, #0]
 80178ea:	e002      	b.n	80178f2 <_printf_i+0x1c6>
 80178ec:	0668      	lsls	r0, r5, #25
 80178ee:	d5fb      	bpl.n	80178e8 <_printf_i+0x1bc>
 80178f0:	8019      	strh	r1, [r3, #0]
 80178f2:	2300      	movs	r3, #0
 80178f4:	6123      	str	r3, [r4, #16]
 80178f6:	4616      	mov	r6, r2
 80178f8:	e7bc      	b.n	8017874 <_printf_i+0x148>
 80178fa:	6833      	ldr	r3, [r6, #0]
 80178fc:	1d1a      	adds	r2, r3, #4
 80178fe:	6032      	str	r2, [r6, #0]
 8017900:	681e      	ldr	r6, [r3, #0]
 8017902:	6862      	ldr	r2, [r4, #4]
 8017904:	2100      	movs	r1, #0
 8017906:	4630      	mov	r0, r6
 8017908:	f7e8 fc6a 	bl	80001e0 <memchr>
 801790c:	b108      	cbz	r0, 8017912 <_printf_i+0x1e6>
 801790e:	1b80      	subs	r0, r0, r6
 8017910:	6060      	str	r0, [r4, #4]
 8017912:	6863      	ldr	r3, [r4, #4]
 8017914:	6123      	str	r3, [r4, #16]
 8017916:	2300      	movs	r3, #0
 8017918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801791c:	e7aa      	b.n	8017874 <_printf_i+0x148>
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	4632      	mov	r2, r6
 8017922:	4649      	mov	r1, r9
 8017924:	4640      	mov	r0, r8
 8017926:	47d0      	blx	sl
 8017928:	3001      	adds	r0, #1
 801792a:	d0ad      	beq.n	8017888 <_printf_i+0x15c>
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	079b      	lsls	r3, r3, #30
 8017930:	d413      	bmi.n	801795a <_printf_i+0x22e>
 8017932:	68e0      	ldr	r0, [r4, #12]
 8017934:	9b03      	ldr	r3, [sp, #12]
 8017936:	4298      	cmp	r0, r3
 8017938:	bfb8      	it	lt
 801793a:	4618      	movlt	r0, r3
 801793c:	e7a6      	b.n	801788c <_printf_i+0x160>
 801793e:	2301      	movs	r3, #1
 8017940:	4632      	mov	r2, r6
 8017942:	4649      	mov	r1, r9
 8017944:	4640      	mov	r0, r8
 8017946:	47d0      	blx	sl
 8017948:	3001      	adds	r0, #1
 801794a:	d09d      	beq.n	8017888 <_printf_i+0x15c>
 801794c:	3501      	adds	r5, #1
 801794e:	68e3      	ldr	r3, [r4, #12]
 8017950:	9903      	ldr	r1, [sp, #12]
 8017952:	1a5b      	subs	r3, r3, r1
 8017954:	42ab      	cmp	r3, r5
 8017956:	dcf2      	bgt.n	801793e <_printf_i+0x212>
 8017958:	e7eb      	b.n	8017932 <_printf_i+0x206>
 801795a:	2500      	movs	r5, #0
 801795c:	f104 0619 	add.w	r6, r4, #25
 8017960:	e7f5      	b.n	801794e <_printf_i+0x222>
 8017962:	bf00      	nop
 8017964:	0801bec5 	.word	0x0801bec5
 8017968:	0801bed6 	.word	0x0801bed6

0801796c <__sflush_r>:
 801796c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017974:	0716      	lsls	r6, r2, #28
 8017976:	4605      	mov	r5, r0
 8017978:	460c      	mov	r4, r1
 801797a:	d454      	bmi.n	8017a26 <__sflush_r+0xba>
 801797c:	684b      	ldr	r3, [r1, #4]
 801797e:	2b00      	cmp	r3, #0
 8017980:	dc02      	bgt.n	8017988 <__sflush_r+0x1c>
 8017982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017984:	2b00      	cmp	r3, #0
 8017986:	dd48      	ble.n	8017a1a <__sflush_r+0xae>
 8017988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801798a:	2e00      	cmp	r6, #0
 801798c:	d045      	beq.n	8017a1a <__sflush_r+0xae>
 801798e:	2300      	movs	r3, #0
 8017990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017994:	682f      	ldr	r7, [r5, #0]
 8017996:	6a21      	ldr	r1, [r4, #32]
 8017998:	602b      	str	r3, [r5, #0]
 801799a:	d030      	beq.n	80179fe <__sflush_r+0x92>
 801799c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	0759      	lsls	r1, r3, #29
 80179a2:	d505      	bpl.n	80179b0 <__sflush_r+0x44>
 80179a4:	6863      	ldr	r3, [r4, #4]
 80179a6:	1ad2      	subs	r2, r2, r3
 80179a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179aa:	b10b      	cbz	r3, 80179b0 <__sflush_r+0x44>
 80179ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179ae:	1ad2      	subs	r2, r2, r3
 80179b0:	2300      	movs	r3, #0
 80179b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179b4:	6a21      	ldr	r1, [r4, #32]
 80179b6:	4628      	mov	r0, r5
 80179b8:	47b0      	blx	r6
 80179ba:	1c43      	adds	r3, r0, #1
 80179bc:	89a3      	ldrh	r3, [r4, #12]
 80179be:	d106      	bne.n	80179ce <__sflush_r+0x62>
 80179c0:	6829      	ldr	r1, [r5, #0]
 80179c2:	291d      	cmp	r1, #29
 80179c4:	d82b      	bhi.n	8017a1e <__sflush_r+0xb2>
 80179c6:	4a2a      	ldr	r2, [pc, #168]	@ (8017a70 <__sflush_r+0x104>)
 80179c8:	410a      	asrs	r2, r1
 80179ca:	07d6      	lsls	r6, r2, #31
 80179cc:	d427      	bmi.n	8017a1e <__sflush_r+0xb2>
 80179ce:	2200      	movs	r2, #0
 80179d0:	6062      	str	r2, [r4, #4]
 80179d2:	04d9      	lsls	r1, r3, #19
 80179d4:	6922      	ldr	r2, [r4, #16]
 80179d6:	6022      	str	r2, [r4, #0]
 80179d8:	d504      	bpl.n	80179e4 <__sflush_r+0x78>
 80179da:	1c42      	adds	r2, r0, #1
 80179dc:	d101      	bne.n	80179e2 <__sflush_r+0x76>
 80179de:	682b      	ldr	r3, [r5, #0]
 80179e0:	b903      	cbnz	r3, 80179e4 <__sflush_r+0x78>
 80179e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80179e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179e6:	602f      	str	r7, [r5, #0]
 80179e8:	b1b9      	cbz	r1, 8017a1a <__sflush_r+0xae>
 80179ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80179ee:	4299      	cmp	r1, r3
 80179f0:	d002      	beq.n	80179f8 <__sflush_r+0x8c>
 80179f2:	4628      	mov	r0, r5
 80179f4:	f7ff fa9e 	bl	8016f34 <_free_r>
 80179f8:	2300      	movs	r3, #0
 80179fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80179fc:	e00d      	b.n	8017a1a <__sflush_r+0xae>
 80179fe:	2301      	movs	r3, #1
 8017a00:	4628      	mov	r0, r5
 8017a02:	47b0      	blx	r6
 8017a04:	4602      	mov	r2, r0
 8017a06:	1c50      	adds	r0, r2, #1
 8017a08:	d1c9      	bne.n	801799e <__sflush_r+0x32>
 8017a0a:	682b      	ldr	r3, [r5, #0]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d0c6      	beq.n	801799e <__sflush_r+0x32>
 8017a10:	2b1d      	cmp	r3, #29
 8017a12:	d001      	beq.n	8017a18 <__sflush_r+0xac>
 8017a14:	2b16      	cmp	r3, #22
 8017a16:	d11e      	bne.n	8017a56 <__sflush_r+0xea>
 8017a18:	602f      	str	r7, [r5, #0]
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	e022      	b.n	8017a64 <__sflush_r+0xf8>
 8017a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a22:	b21b      	sxth	r3, r3
 8017a24:	e01b      	b.n	8017a5e <__sflush_r+0xf2>
 8017a26:	690f      	ldr	r7, [r1, #16]
 8017a28:	2f00      	cmp	r7, #0
 8017a2a:	d0f6      	beq.n	8017a1a <__sflush_r+0xae>
 8017a2c:	0793      	lsls	r3, r2, #30
 8017a2e:	680e      	ldr	r6, [r1, #0]
 8017a30:	bf08      	it	eq
 8017a32:	694b      	ldreq	r3, [r1, #20]
 8017a34:	600f      	str	r7, [r1, #0]
 8017a36:	bf18      	it	ne
 8017a38:	2300      	movne	r3, #0
 8017a3a:	eba6 0807 	sub.w	r8, r6, r7
 8017a3e:	608b      	str	r3, [r1, #8]
 8017a40:	f1b8 0f00 	cmp.w	r8, #0
 8017a44:	dde9      	ble.n	8017a1a <__sflush_r+0xae>
 8017a46:	6a21      	ldr	r1, [r4, #32]
 8017a48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a4a:	4643      	mov	r3, r8
 8017a4c:	463a      	mov	r2, r7
 8017a4e:	4628      	mov	r0, r5
 8017a50:	47b0      	blx	r6
 8017a52:	2800      	cmp	r0, #0
 8017a54:	dc08      	bgt.n	8017a68 <__sflush_r+0xfc>
 8017a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a5e:	81a3      	strh	r3, [r4, #12]
 8017a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a68:	4407      	add	r7, r0
 8017a6a:	eba8 0800 	sub.w	r8, r8, r0
 8017a6e:	e7e7      	b.n	8017a40 <__sflush_r+0xd4>
 8017a70:	dfbffffe 	.word	0xdfbffffe

08017a74 <_fflush_r>:
 8017a74:	b538      	push	{r3, r4, r5, lr}
 8017a76:	690b      	ldr	r3, [r1, #16]
 8017a78:	4605      	mov	r5, r0
 8017a7a:	460c      	mov	r4, r1
 8017a7c:	b913      	cbnz	r3, 8017a84 <_fflush_r+0x10>
 8017a7e:	2500      	movs	r5, #0
 8017a80:	4628      	mov	r0, r5
 8017a82:	bd38      	pop	{r3, r4, r5, pc}
 8017a84:	b118      	cbz	r0, 8017a8e <_fflush_r+0x1a>
 8017a86:	6a03      	ldr	r3, [r0, #32]
 8017a88:	b90b      	cbnz	r3, 8017a8e <_fflush_r+0x1a>
 8017a8a:	f7ff f90d 	bl	8016ca8 <__sinit>
 8017a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d0f3      	beq.n	8017a7e <_fflush_r+0xa>
 8017a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017a98:	07d0      	lsls	r0, r2, #31
 8017a9a:	d404      	bmi.n	8017aa6 <_fflush_r+0x32>
 8017a9c:	0599      	lsls	r1, r3, #22
 8017a9e:	d402      	bmi.n	8017aa6 <_fflush_r+0x32>
 8017aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aa2:	f7ff fa18 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	f7ff ff5f 	bl	801796c <__sflush_r>
 8017aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ab0:	07da      	lsls	r2, r3, #31
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	d4e4      	bmi.n	8017a80 <_fflush_r+0xc>
 8017ab6:	89a3      	ldrh	r3, [r4, #12]
 8017ab8:	059b      	lsls	r3, r3, #22
 8017aba:	d4e1      	bmi.n	8017a80 <_fflush_r+0xc>
 8017abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017abe:	f7ff fa0b 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017ac2:	e7dd      	b.n	8017a80 <_fflush_r+0xc>

08017ac4 <__malloc_lock>:
 8017ac4:	4801      	ldr	r0, [pc, #4]	@ (8017acc <__malloc_lock+0x8>)
 8017ac6:	f7ff ba06 	b.w	8016ed6 <__retarget_lock_acquire_recursive>
 8017aca:	bf00      	nop
 8017acc:	2000db40 	.word	0x2000db40

08017ad0 <__malloc_unlock>:
 8017ad0:	4801      	ldr	r0, [pc, #4]	@ (8017ad8 <__malloc_unlock+0x8>)
 8017ad2:	f7ff ba01 	b.w	8016ed8 <__retarget_lock_release_recursive>
 8017ad6:	bf00      	nop
 8017ad8:	2000db40 	.word	0x2000db40

08017adc <__sread>:
 8017adc:	b510      	push	{r4, lr}
 8017ade:	460c      	mov	r4, r1
 8017ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ae4:	f000 f9b8 	bl	8017e58 <_read_r>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	bfab      	itete	ge
 8017aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017aee:	89a3      	ldrhlt	r3, [r4, #12]
 8017af0:	181b      	addge	r3, r3, r0
 8017af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017af6:	bfac      	ite	ge
 8017af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017afa:	81a3      	strhlt	r3, [r4, #12]
 8017afc:	bd10      	pop	{r4, pc}

08017afe <__swrite>:
 8017afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b02:	461f      	mov	r7, r3
 8017b04:	898b      	ldrh	r3, [r1, #12]
 8017b06:	05db      	lsls	r3, r3, #23
 8017b08:	4605      	mov	r5, r0
 8017b0a:	460c      	mov	r4, r1
 8017b0c:	4616      	mov	r6, r2
 8017b0e:	d505      	bpl.n	8017b1c <__swrite+0x1e>
 8017b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b14:	2302      	movs	r3, #2
 8017b16:	2200      	movs	r2, #0
 8017b18:	f000 f98c 	bl	8017e34 <_lseek_r>
 8017b1c:	89a3      	ldrh	r3, [r4, #12]
 8017b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b26:	81a3      	strh	r3, [r4, #12]
 8017b28:	4632      	mov	r2, r6
 8017b2a:	463b      	mov	r3, r7
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b32:	f000 b9b3 	b.w	8017e9c <_write_r>

08017b36 <__sseek>:
 8017b36:	b510      	push	{r4, lr}
 8017b38:	460c      	mov	r4, r1
 8017b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3e:	f000 f979 	bl	8017e34 <_lseek_r>
 8017b42:	1c43      	adds	r3, r0, #1
 8017b44:	89a3      	ldrh	r3, [r4, #12]
 8017b46:	bf15      	itete	ne
 8017b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017b52:	81a3      	strheq	r3, [r4, #12]
 8017b54:	bf18      	it	ne
 8017b56:	81a3      	strhne	r3, [r4, #12]
 8017b58:	bd10      	pop	{r4, pc}

08017b5a <__sclose>:
 8017b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b5e:	f000 b937 	b.w	8017dd0 <_close_r>
	...

08017b64 <fiprintf>:
 8017b64:	b40e      	push	{r1, r2, r3}
 8017b66:	b503      	push	{r0, r1, lr}
 8017b68:	4601      	mov	r1, r0
 8017b6a:	ab03      	add	r3, sp, #12
 8017b6c:	4805      	ldr	r0, [pc, #20]	@ (8017b84 <fiprintf+0x20>)
 8017b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b72:	6800      	ldr	r0, [r0, #0]
 8017b74:	9301      	str	r3, [sp, #4]
 8017b76:	f7ff fba9 	bl	80172cc <_vfiprintf_r>
 8017b7a:	b002      	add	sp, #8
 8017b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b80:	b003      	add	sp, #12
 8017b82:	4770      	bx	lr
 8017b84:	2000003c 	.word	0x2000003c

08017b88 <_realloc_r>:
 8017b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8c:	4680      	mov	r8, r0
 8017b8e:	4615      	mov	r5, r2
 8017b90:	460c      	mov	r4, r1
 8017b92:	b921      	cbnz	r1, 8017b9e <_realloc_r+0x16>
 8017b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b98:	4611      	mov	r1, r2
 8017b9a:	f7ff bcd9 	b.w	8017550 <_malloc_r>
 8017b9e:	b92a      	cbnz	r2, 8017bac <_realloc_r+0x24>
 8017ba0:	f7ff f9c8 	bl	8016f34 <_free_r>
 8017ba4:	2400      	movs	r4, #0
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bac:	f000 f98f 	bl	8017ece <_malloc_usable_size_r>
 8017bb0:	4285      	cmp	r5, r0
 8017bb2:	4606      	mov	r6, r0
 8017bb4:	d802      	bhi.n	8017bbc <_realloc_r+0x34>
 8017bb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017bba:	d8f4      	bhi.n	8017ba6 <_realloc_r+0x1e>
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	4640      	mov	r0, r8
 8017bc0:	f7ff fcc6 	bl	8017550 <_malloc_r>
 8017bc4:	4607      	mov	r7, r0
 8017bc6:	2800      	cmp	r0, #0
 8017bc8:	d0ec      	beq.n	8017ba4 <_realloc_r+0x1c>
 8017bca:	42b5      	cmp	r5, r6
 8017bcc:	462a      	mov	r2, r5
 8017bce:	4621      	mov	r1, r4
 8017bd0:	bf28      	it	cs
 8017bd2:	4632      	movcs	r2, r6
 8017bd4:	f7ff f981 	bl	8016eda <memcpy>
 8017bd8:	4621      	mov	r1, r4
 8017bda:	4640      	mov	r0, r8
 8017bdc:	f7ff f9aa 	bl	8016f34 <_free_r>
 8017be0:	463c      	mov	r4, r7
 8017be2:	e7e0      	b.n	8017ba6 <_realloc_r+0x1e>

08017be4 <__swbuf_r>:
 8017be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017be6:	460e      	mov	r6, r1
 8017be8:	4614      	mov	r4, r2
 8017bea:	4605      	mov	r5, r0
 8017bec:	b118      	cbz	r0, 8017bf6 <__swbuf_r+0x12>
 8017bee:	6a03      	ldr	r3, [r0, #32]
 8017bf0:	b90b      	cbnz	r3, 8017bf6 <__swbuf_r+0x12>
 8017bf2:	f7ff f859 	bl	8016ca8 <__sinit>
 8017bf6:	69a3      	ldr	r3, [r4, #24]
 8017bf8:	60a3      	str	r3, [r4, #8]
 8017bfa:	89a3      	ldrh	r3, [r4, #12]
 8017bfc:	071a      	lsls	r2, r3, #28
 8017bfe:	d501      	bpl.n	8017c04 <__swbuf_r+0x20>
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	b943      	cbnz	r3, 8017c16 <__swbuf_r+0x32>
 8017c04:	4621      	mov	r1, r4
 8017c06:	4628      	mov	r0, r5
 8017c08:	f000 f82a 	bl	8017c60 <__swsetup_r>
 8017c0c:	b118      	cbz	r0, 8017c16 <__swbuf_r+0x32>
 8017c0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017c12:	4638      	mov	r0, r7
 8017c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	6922      	ldr	r2, [r4, #16]
 8017c1a:	1a98      	subs	r0, r3, r2
 8017c1c:	6963      	ldr	r3, [r4, #20]
 8017c1e:	b2f6      	uxtb	r6, r6
 8017c20:	4283      	cmp	r3, r0
 8017c22:	4637      	mov	r7, r6
 8017c24:	dc05      	bgt.n	8017c32 <__swbuf_r+0x4e>
 8017c26:	4621      	mov	r1, r4
 8017c28:	4628      	mov	r0, r5
 8017c2a:	f7ff ff23 	bl	8017a74 <_fflush_r>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	d1ed      	bne.n	8017c0e <__swbuf_r+0x2a>
 8017c32:	68a3      	ldr	r3, [r4, #8]
 8017c34:	3b01      	subs	r3, #1
 8017c36:	60a3      	str	r3, [r4, #8]
 8017c38:	6823      	ldr	r3, [r4, #0]
 8017c3a:	1c5a      	adds	r2, r3, #1
 8017c3c:	6022      	str	r2, [r4, #0]
 8017c3e:	701e      	strb	r6, [r3, #0]
 8017c40:	6962      	ldr	r2, [r4, #20]
 8017c42:	1c43      	adds	r3, r0, #1
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d004      	beq.n	8017c52 <__swbuf_r+0x6e>
 8017c48:	89a3      	ldrh	r3, [r4, #12]
 8017c4a:	07db      	lsls	r3, r3, #31
 8017c4c:	d5e1      	bpl.n	8017c12 <__swbuf_r+0x2e>
 8017c4e:	2e0a      	cmp	r6, #10
 8017c50:	d1df      	bne.n	8017c12 <__swbuf_r+0x2e>
 8017c52:	4621      	mov	r1, r4
 8017c54:	4628      	mov	r0, r5
 8017c56:	f7ff ff0d 	bl	8017a74 <_fflush_r>
 8017c5a:	2800      	cmp	r0, #0
 8017c5c:	d0d9      	beq.n	8017c12 <__swbuf_r+0x2e>
 8017c5e:	e7d6      	b.n	8017c0e <__swbuf_r+0x2a>

08017c60 <__swsetup_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	4b29      	ldr	r3, [pc, #164]	@ (8017d08 <__swsetup_r+0xa8>)
 8017c64:	4605      	mov	r5, r0
 8017c66:	6818      	ldr	r0, [r3, #0]
 8017c68:	460c      	mov	r4, r1
 8017c6a:	b118      	cbz	r0, 8017c74 <__swsetup_r+0x14>
 8017c6c:	6a03      	ldr	r3, [r0, #32]
 8017c6e:	b90b      	cbnz	r3, 8017c74 <__swsetup_r+0x14>
 8017c70:	f7ff f81a 	bl	8016ca8 <__sinit>
 8017c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c78:	0719      	lsls	r1, r3, #28
 8017c7a:	d422      	bmi.n	8017cc2 <__swsetup_r+0x62>
 8017c7c:	06da      	lsls	r2, r3, #27
 8017c7e:	d407      	bmi.n	8017c90 <__swsetup_r+0x30>
 8017c80:	2209      	movs	r2, #9
 8017c82:	602a      	str	r2, [r5, #0]
 8017c84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c88:	81a3      	strh	r3, [r4, #12]
 8017c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c8e:	e033      	b.n	8017cf8 <__swsetup_r+0x98>
 8017c90:	0758      	lsls	r0, r3, #29
 8017c92:	d512      	bpl.n	8017cba <__swsetup_r+0x5a>
 8017c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c96:	b141      	cbz	r1, 8017caa <__swsetup_r+0x4a>
 8017c98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c9c:	4299      	cmp	r1, r3
 8017c9e:	d002      	beq.n	8017ca6 <__swsetup_r+0x46>
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	f7ff f947 	bl	8016f34 <_free_r>
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8017caa:	89a3      	ldrh	r3, [r4, #12]
 8017cac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017cb0:	81a3      	strh	r3, [r4, #12]
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	6063      	str	r3, [r4, #4]
 8017cb6:	6923      	ldr	r3, [r4, #16]
 8017cb8:	6023      	str	r3, [r4, #0]
 8017cba:	89a3      	ldrh	r3, [r4, #12]
 8017cbc:	f043 0308 	orr.w	r3, r3, #8
 8017cc0:	81a3      	strh	r3, [r4, #12]
 8017cc2:	6923      	ldr	r3, [r4, #16]
 8017cc4:	b94b      	cbnz	r3, 8017cda <__swsetup_r+0x7a>
 8017cc6:	89a3      	ldrh	r3, [r4, #12]
 8017cc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017cd0:	d003      	beq.n	8017cda <__swsetup_r+0x7a>
 8017cd2:	4621      	mov	r1, r4
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	f000 f83f 	bl	8017d58 <__smakebuf_r>
 8017cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cde:	f013 0201 	ands.w	r2, r3, #1
 8017ce2:	d00a      	beq.n	8017cfa <__swsetup_r+0x9a>
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	60a2      	str	r2, [r4, #8]
 8017ce8:	6962      	ldr	r2, [r4, #20]
 8017cea:	4252      	negs	r2, r2
 8017cec:	61a2      	str	r2, [r4, #24]
 8017cee:	6922      	ldr	r2, [r4, #16]
 8017cf0:	b942      	cbnz	r2, 8017d04 <__swsetup_r+0xa4>
 8017cf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017cf6:	d1c5      	bne.n	8017c84 <__swsetup_r+0x24>
 8017cf8:	bd38      	pop	{r3, r4, r5, pc}
 8017cfa:	0799      	lsls	r1, r3, #30
 8017cfc:	bf58      	it	pl
 8017cfe:	6962      	ldrpl	r2, [r4, #20]
 8017d00:	60a2      	str	r2, [r4, #8]
 8017d02:	e7f4      	b.n	8017cee <__swsetup_r+0x8e>
 8017d04:	2000      	movs	r0, #0
 8017d06:	e7f7      	b.n	8017cf8 <__swsetup_r+0x98>
 8017d08:	2000003c 	.word	0x2000003c

08017d0c <__swhatbuf_r>:
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	460c      	mov	r4, r1
 8017d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d14:	2900      	cmp	r1, #0
 8017d16:	b096      	sub	sp, #88	@ 0x58
 8017d18:	4615      	mov	r5, r2
 8017d1a:	461e      	mov	r6, r3
 8017d1c:	da0d      	bge.n	8017d3a <__swhatbuf_r+0x2e>
 8017d1e:	89a3      	ldrh	r3, [r4, #12]
 8017d20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d24:	f04f 0100 	mov.w	r1, #0
 8017d28:	bf14      	ite	ne
 8017d2a:	2340      	movne	r3, #64	@ 0x40
 8017d2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d30:	2000      	movs	r0, #0
 8017d32:	6031      	str	r1, [r6, #0]
 8017d34:	602b      	str	r3, [r5, #0]
 8017d36:	b016      	add	sp, #88	@ 0x58
 8017d38:	bd70      	pop	{r4, r5, r6, pc}
 8017d3a:	466a      	mov	r2, sp
 8017d3c:	f000 f858 	bl	8017df0 <_fstat_r>
 8017d40:	2800      	cmp	r0, #0
 8017d42:	dbec      	blt.n	8017d1e <__swhatbuf_r+0x12>
 8017d44:	9901      	ldr	r1, [sp, #4]
 8017d46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d4e:	4259      	negs	r1, r3
 8017d50:	4159      	adcs	r1, r3
 8017d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d56:	e7eb      	b.n	8017d30 <__swhatbuf_r+0x24>

08017d58 <__smakebuf_r>:
 8017d58:	898b      	ldrh	r3, [r1, #12]
 8017d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d5c:	079d      	lsls	r5, r3, #30
 8017d5e:	4606      	mov	r6, r0
 8017d60:	460c      	mov	r4, r1
 8017d62:	d507      	bpl.n	8017d74 <__smakebuf_r+0x1c>
 8017d64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d68:	6023      	str	r3, [r4, #0]
 8017d6a:	6123      	str	r3, [r4, #16]
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	6163      	str	r3, [r4, #20]
 8017d70:	b003      	add	sp, #12
 8017d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d74:	ab01      	add	r3, sp, #4
 8017d76:	466a      	mov	r2, sp
 8017d78:	f7ff ffc8 	bl	8017d0c <__swhatbuf_r>
 8017d7c:	9f00      	ldr	r7, [sp, #0]
 8017d7e:	4605      	mov	r5, r0
 8017d80:	4639      	mov	r1, r7
 8017d82:	4630      	mov	r0, r6
 8017d84:	f7ff fbe4 	bl	8017550 <_malloc_r>
 8017d88:	b948      	cbnz	r0, 8017d9e <__smakebuf_r+0x46>
 8017d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d8e:	059a      	lsls	r2, r3, #22
 8017d90:	d4ee      	bmi.n	8017d70 <__smakebuf_r+0x18>
 8017d92:	f023 0303 	bic.w	r3, r3, #3
 8017d96:	f043 0302 	orr.w	r3, r3, #2
 8017d9a:	81a3      	strh	r3, [r4, #12]
 8017d9c:	e7e2      	b.n	8017d64 <__smakebuf_r+0xc>
 8017d9e:	89a3      	ldrh	r3, [r4, #12]
 8017da0:	6020      	str	r0, [r4, #0]
 8017da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017da6:	81a3      	strh	r3, [r4, #12]
 8017da8:	9b01      	ldr	r3, [sp, #4]
 8017daa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017dae:	b15b      	cbz	r3, 8017dc8 <__smakebuf_r+0x70>
 8017db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017db4:	4630      	mov	r0, r6
 8017db6:	f000 f82d 	bl	8017e14 <_isatty_r>
 8017dba:	b128      	cbz	r0, 8017dc8 <__smakebuf_r+0x70>
 8017dbc:	89a3      	ldrh	r3, [r4, #12]
 8017dbe:	f023 0303 	bic.w	r3, r3, #3
 8017dc2:	f043 0301 	orr.w	r3, r3, #1
 8017dc6:	81a3      	strh	r3, [r4, #12]
 8017dc8:	89a3      	ldrh	r3, [r4, #12]
 8017dca:	431d      	orrs	r5, r3
 8017dcc:	81a5      	strh	r5, [r4, #12]
 8017dce:	e7cf      	b.n	8017d70 <__smakebuf_r+0x18>

08017dd0 <_close_r>:
 8017dd0:	b538      	push	{r3, r4, r5, lr}
 8017dd2:	4d06      	ldr	r5, [pc, #24]	@ (8017dec <_close_r+0x1c>)
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	4604      	mov	r4, r0
 8017dd8:	4608      	mov	r0, r1
 8017dda:	602b      	str	r3, [r5, #0]
 8017ddc:	f7e9 f830 	bl	8000e40 <_close>
 8017de0:	1c43      	adds	r3, r0, #1
 8017de2:	d102      	bne.n	8017dea <_close_r+0x1a>
 8017de4:	682b      	ldr	r3, [r5, #0]
 8017de6:	b103      	cbz	r3, 8017dea <_close_r+0x1a>
 8017de8:	6023      	str	r3, [r4, #0]
 8017dea:	bd38      	pop	{r3, r4, r5, pc}
 8017dec:	2000db3c 	.word	0x2000db3c

08017df0 <_fstat_r>:
 8017df0:	b538      	push	{r3, r4, r5, lr}
 8017df2:	4d07      	ldr	r5, [pc, #28]	@ (8017e10 <_fstat_r+0x20>)
 8017df4:	2300      	movs	r3, #0
 8017df6:	4604      	mov	r4, r0
 8017df8:	4608      	mov	r0, r1
 8017dfa:	4611      	mov	r1, r2
 8017dfc:	602b      	str	r3, [r5, #0]
 8017dfe:	f7e9 f82b 	bl	8000e58 <_fstat>
 8017e02:	1c43      	adds	r3, r0, #1
 8017e04:	d102      	bne.n	8017e0c <_fstat_r+0x1c>
 8017e06:	682b      	ldr	r3, [r5, #0]
 8017e08:	b103      	cbz	r3, 8017e0c <_fstat_r+0x1c>
 8017e0a:	6023      	str	r3, [r4, #0]
 8017e0c:	bd38      	pop	{r3, r4, r5, pc}
 8017e0e:	bf00      	nop
 8017e10:	2000db3c 	.word	0x2000db3c

08017e14 <_isatty_r>:
 8017e14:	b538      	push	{r3, r4, r5, lr}
 8017e16:	4d06      	ldr	r5, [pc, #24]	@ (8017e30 <_isatty_r+0x1c>)
 8017e18:	2300      	movs	r3, #0
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	4608      	mov	r0, r1
 8017e1e:	602b      	str	r3, [r5, #0]
 8017e20:	f7e9 f82a 	bl	8000e78 <_isatty>
 8017e24:	1c43      	adds	r3, r0, #1
 8017e26:	d102      	bne.n	8017e2e <_isatty_r+0x1a>
 8017e28:	682b      	ldr	r3, [r5, #0]
 8017e2a:	b103      	cbz	r3, 8017e2e <_isatty_r+0x1a>
 8017e2c:	6023      	str	r3, [r4, #0]
 8017e2e:	bd38      	pop	{r3, r4, r5, pc}
 8017e30:	2000db3c 	.word	0x2000db3c

08017e34 <_lseek_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4d07      	ldr	r5, [pc, #28]	@ (8017e54 <_lseek_r+0x20>)
 8017e38:	4604      	mov	r4, r0
 8017e3a:	4608      	mov	r0, r1
 8017e3c:	4611      	mov	r1, r2
 8017e3e:	2200      	movs	r2, #0
 8017e40:	602a      	str	r2, [r5, #0]
 8017e42:	461a      	mov	r2, r3
 8017e44:	f7e9 f823 	bl	8000e8e <_lseek>
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	d102      	bne.n	8017e52 <_lseek_r+0x1e>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	b103      	cbz	r3, 8017e52 <_lseek_r+0x1e>
 8017e50:	6023      	str	r3, [r4, #0]
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	2000db3c 	.word	0x2000db3c

08017e58 <_read_r>:
 8017e58:	b538      	push	{r3, r4, r5, lr}
 8017e5a:	4d07      	ldr	r5, [pc, #28]	@ (8017e78 <_read_r+0x20>)
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	4608      	mov	r0, r1
 8017e60:	4611      	mov	r1, r2
 8017e62:	2200      	movs	r2, #0
 8017e64:	602a      	str	r2, [r5, #0]
 8017e66:	461a      	mov	r2, r3
 8017e68:	f7e8 ffb1 	bl	8000dce <_read>
 8017e6c:	1c43      	adds	r3, r0, #1
 8017e6e:	d102      	bne.n	8017e76 <_read_r+0x1e>
 8017e70:	682b      	ldr	r3, [r5, #0]
 8017e72:	b103      	cbz	r3, 8017e76 <_read_r+0x1e>
 8017e74:	6023      	str	r3, [r4, #0]
 8017e76:	bd38      	pop	{r3, r4, r5, pc}
 8017e78:	2000db3c 	.word	0x2000db3c

08017e7c <_sbrk_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4d06      	ldr	r5, [pc, #24]	@ (8017e98 <_sbrk_r+0x1c>)
 8017e80:	2300      	movs	r3, #0
 8017e82:	4604      	mov	r4, r0
 8017e84:	4608      	mov	r0, r1
 8017e86:	602b      	str	r3, [r5, #0]
 8017e88:	f7e9 f80e 	bl	8000ea8 <_sbrk>
 8017e8c:	1c43      	adds	r3, r0, #1
 8017e8e:	d102      	bne.n	8017e96 <_sbrk_r+0x1a>
 8017e90:	682b      	ldr	r3, [r5, #0]
 8017e92:	b103      	cbz	r3, 8017e96 <_sbrk_r+0x1a>
 8017e94:	6023      	str	r3, [r4, #0]
 8017e96:	bd38      	pop	{r3, r4, r5, pc}
 8017e98:	2000db3c 	.word	0x2000db3c

08017e9c <_write_r>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4d07      	ldr	r5, [pc, #28]	@ (8017ebc <_write_r+0x20>)
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	4608      	mov	r0, r1
 8017ea4:	4611      	mov	r1, r2
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	602a      	str	r2, [r5, #0]
 8017eaa:	461a      	mov	r2, r3
 8017eac:	f7e8 ffac 	bl	8000e08 <_write>
 8017eb0:	1c43      	adds	r3, r0, #1
 8017eb2:	d102      	bne.n	8017eba <_write_r+0x1e>
 8017eb4:	682b      	ldr	r3, [r5, #0]
 8017eb6:	b103      	cbz	r3, 8017eba <_write_r+0x1e>
 8017eb8:	6023      	str	r3, [r4, #0]
 8017eba:	bd38      	pop	{r3, r4, r5, pc}
 8017ebc:	2000db3c 	.word	0x2000db3c

08017ec0 <abort>:
 8017ec0:	b508      	push	{r3, lr}
 8017ec2:	2006      	movs	r0, #6
 8017ec4:	f000 f834 	bl	8017f30 <raise>
 8017ec8:	2001      	movs	r0, #1
 8017eca:	f7e8 ff75 	bl	8000db8 <_exit>

08017ece <_malloc_usable_size_r>:
 8017ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ed2:	1f18      	subs	r0, r3, #4
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	bfbc      	itt	lt
 8017ed8:	580b      	ldrlt	r3, [r1, r0]
 8017eda:	18c0      	addlt	r0, r0, r3
 8017edc:	4770      	bx	lr

08017ede <_raise_r>:
 8017ede:	291f      	cmp	r1, #31
 8017ee0:	b538      	push	{r3, r4, r5, lr}
 8017ee2:	4605      	mov	r5, r0
 8017ee4:	460c      	mov	r4, r1
 8017ee6:	d904      	bls.n	8017ef2 <_raise_r+0x14>
 8017ee8:	2316      	movs	r3, #22
 8017eea:	6003      	str	r3, [r0, #0]
 8017eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ef0:	bd38      	pop	{r3, r4, r5, pc}
 8017ef2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017ef4:	b112      	cbz	r2, 8017efc <_raise_r+0x1e>
 8017ef6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017efa:	b94b      	cbnz	r3, 8017f10 <_raise_r+0x32>
 8017efc:	4628      	mov	r0, r5
 8017efe:	f000 f831 	bl	8017f64 <_getpid_r>
 8017f02:	4622      	mov	r2, r4
 8017f04:	4601      	mov	r1, r0
 8017f06:	4628      	mov	r0, r5
 8017f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f0c:	f000 b818 	b.w	8017f40 <_kill_r>
 8017f10:	2b01      	cmp	r3, #1
 8017f12:	d00a      	beq.n	8017f2a <_raise_r+0x4c>
 8017f14:	1c59      	adds	r1, r3, #1
 8017f16:	d103      	bne.n	8017f20 <_raise_r+0x42>
 8017f18:	2316      	movs	r3, #22
 8017f1a:	6003      	str	r3, [r0, #0]
 8017f1c:	2001      	movs	r0, #1
 8017f1e:	e7e7      	b.n	8017ef0 <_raise_r+0x12>
 8017f20:	2100      	movs	r1, #0
 8017f22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017f26:	4620      	mov	r0, r4
 8017f28:	4798      	blx	r3
 8017f2a:	2000      	movs	r0, #0
 8017f2c:	e7e0      	b.n	8017ef0 <_raise_r+0x12>
	...

08017f30 <raise>:
 8017f30:	4b02      	ldr	r3, [pc, #8]	@ (8017f3c <raise+0xc>)
 8017f32:	4601      	mov	r1, r0
 8017f34:	6818      	ldr	r0, [r3, #0]
 8017f36:	f7ff bfd2 	b.w	8017ede <_raise_r>
 8017f3a:	bf00      	nop
 8017f3c:	2000003c 	.word	0x2000003c

08017f40 <_kill_r>:
 8017f40:	b538      	push	{r3, r4, r5, lr}
 8017f42:	4d07      	ldr	r5, [pc, #28]	@ (8017f60 <_kill_r+0x20>)
 8017f44:	2300      	movs	r3, #0
 8017f46:	4604      	mov	r4, r0
 8017f48:	4608      	mov	r0, r1
 8017f4a:	4611      	mov	r1, r2
 8017f4c:	602b      	str	r3, [r5, #0]
 8017f4e:	f7e8 ff21 	bl	8000d94 <_kill>
 8017f52:	1c43      	adds	r3, r0, #1
 8017f54:	d102      	bne.n	8017f5c <_kill_r+0x1c>
 8017f56:	682b      	ldr	r3, [r5, #0]
 8017f58:	b103      	cbz	r3, 8017f5c <_kill_r+0x1c>
 8017f5a:	6023      	str	r3, [r4, #0]
 8017f5c:	bd38      	pop	{r3, r4, r5, pc}
 8017f5e:	bf00      	nop
 8017f60:	2000db3c 	.word	0x2000db3c

08017f64 <_getpid_r>:
 8017f64:	f7e8 bf0e 	b.w	8000d84 <_getpid>

08017f68 <_init>:
 8017f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f6a:	bf00      	nop
 8017f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f6e:	bc08      	pop	{r3}
 8017f70:	469e      	mov	lr, r3
 8017f72:	4770      	bx	lr

08017f74 <_fini>:
 8017f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f76:	bf00      	nop
 8017f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f7a:	bc08      	pop	{r3}
 8017f7c:	469e      	mov	lr, r3
 8017f7e:	4770      	bx	lr
