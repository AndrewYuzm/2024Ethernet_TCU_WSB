
TCU_EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e98  08017674  08017674  00027674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b50c  0801b50c  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b50c  0801b50c  0002b50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b514  0801b514  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b514  0801b514  0002b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b518  0801b518  0002b518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801b51c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000ca18  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000caa4  2000caa4  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034015  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007ec0  00000000  00000000  00064114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024d8  00000000  00000000  0006bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d73  00000000  00000000  0006e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034b66  00000000  00000000  00070223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b304  00000000  00000000  000a4d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4c59  00000000  00000000  000e008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a278  00000000  00000000  001d4ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  001def60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801765c 	.word	0x0801765c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0801765c 	.word	0x0801765c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	20000148 	.word	0x20000148

080005b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串�???????
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <__io_putchar+0x20>)
 80005c2:	f003 fb9c 	bl	8003cfe <HAL_UART_Transmit>
    return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000348 	.word	0x20000348

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fe5d 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f81d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8af 	bl	8000744 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f883 	bl	80006f0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x40>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fd41 	bl	8005088 <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <main+0x44>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f004 fd25 	bl	800505a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x3c>
 8000612:	bf00      	nop
 8000614:	08017680 	.word	0x08017680
 8000618:	2000038c 	.word	0x2000038c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f016 f80c 	bl	8016648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fba7 	bl	8002df4 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f946 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fe08 	bl	80032e4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f92f 	bl	800093c <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART1_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART1_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART1_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x4c>)
 8000728:	f003 fa9c 	bl	8003c64 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f903 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000348 	.word	0x20000348
 8000740:	40011000 	.word	0x40011000

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0x84>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_GPIO_Init+0x84>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_GPIO_Init+0x84>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_GPIO_Init+0x84>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <MX_GPIO_Init+0x84>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	f5ad 6dc5 	sub.w	sp, sp, #1576	; 0x628
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80007d8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80007dc:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007de:	f003 fe03 	bl	80043e8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //  TCP_Client_Init();
    int soctemp=create_tcp_client();
 80007e2:	f000 fa9f 	bl	8000d24 <create_tcp_client>
 80007e6:	f8c7 0620 	str.w	r0, [r7, #1568]	; 0x620
  //  double t=0,y=0;
    int t=0,y=0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
  //	sprintf(send_buf,"{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n{\"t\": %d, \"y\": %d}\n",t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y,t,y);
  //	sprintf(send_buf,"{\"t\": %d, \"y\": %d}\n",(int)t,(int)y);
  //	t+=0.05;
  //	if(t>4)t=0;
  //	y=sin(t*7);
  	t+=1;
 80007f6:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80007fa:	3301      	adds	r3, #1
 80007fc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
  	if(t>100)t=0;
 8000800:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000804:	2b64      	cmp	r3, #100	; 0x64
 8000806:	dd02      	ble.n	800080e <StartDefaultTask+0x42>
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
  	y=t*2;//(int)sin(t*7);
 800080e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
  	//发�?�数据到服务�???????
  //	send_json_data(client_pcb, send_buf);
  	add_or_update_data(1,1);add_or_update_data(2,2);add_or_update_data(3,3);add_or_update_data(4,4);
 8000818:	2101      	movs	r1, #1
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fb08 	bl	8000e30 <add_or_update_data>
 8000820:	2102      	movs	r1, #2
 8000822:	2002      	movs	r0, #2
 8000824:	f000 fb04 	bl	8000e30 <add_or_update_data>
 8000828:	2103      	movs	r1, #3
 800082a:	2003      	movs	r0, #3
 800082c:	f000 fb00 	bl	8000e30 <add_or_update_data>
 8000830:	2104      	movs	r1, #4
 8000832:	2004      	movs	r0, #4
 8000834:	f000 fafc 	bl	8000e30 <add_or_update_data>
//  	tcp_client_send(soctemp, send_buf);
  	tcp_client_send(soctemp, get_all_data_str());
 8000838:	f000 fb70 	bl	8000f1c <get_all_data_str>
 800083c:	4603      	mov	r3, r0
 800083e:	4619      	mov	r1, r3
 8000840:	f8d7 0620 	ldr.w	r0, [r7, #1568]	; 0x620
 8000844:	f000 faac 	bl	8000da0 <tcp_client_send>
      osDelay(200);
 8000848:	20c8      	movs	r0, #200	; 0xc8
 800084a:	f004 fc69 	bl	8005120 <osDelay>
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800084e:	2101      	movs	r1, #1
 8000850:	4830      	ldr	r0, [pc, #192]	; (8000914 <StartDefaultTask+0x148>)
 8000852:	f002 fab5 	bl	8002dc0 <HAL_GPIO_TogglePin>
////        			",0x000000010000000000000003,0x000000020000000000000004,0x000000030000000000000009,0x000000040000000000000004\n"
////        			",0x000000010000000000000004,0x000000020000000000000005,0x0000000300000000000000012,0x000000040000000000000004\n"
//     			);

//        	tcp_client_send(soctemp, send_buf);
      add_or_update_data(1,2);add_or_update_data(2,4);add_or_update_data(3,6);add_or_update_data(4,4);
 8000856:	2102      	movs	r1, #2
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fae9 	bl	8000e30 <add_or_update_data>
 800085e:	2104      	movs	r1, #4
 8000860:	2002      	movs	r0, #2
 8000862:	f000 fae5 	bl	8000e30 <add_or_update_data>
 8000866:	2106      	movs	r1, #6
 8000868:	2003      	movs	r0, #3
 800086a:	f000 fae1 	bl	8000e30 <add_or_update_data>
 800086e:	2104      	movs	r1, #4
 8000870:	2004      	movs	r0, #4
 8000872:	f000 fadd 	bl	8000e30 <add_or_update_data>
      tcp_client_send(soctemp, get_all_data_str());
 8000876:	f000 fb51 	bl	8000f1c <get_all_data_str>
 800087a:	4603      	mov	r3, r0
 800087c:	4619      	mov	r1, r3
 800087e:	f8d7 0620 	ldr.w	r0, [r7, #1568]	; 0x620
 8000882:	f000 fa8d 	bl	8000da0 <tcp_client_send>
            osDelay(200);
 8000886:	20c8      	movs	r0, #200	; 0xc8
 8000888:	f004 fc4a 	bl	8005120 <osDelay>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800088c:	2101      	movs	r1, #1
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <StartDefaultTask+0x148>)
 8000890:	f002 fa96 	bl	8002dc0 <HAL_GPIO_TogglePin>
//              			",0x000000010000000000000003,0x000000020000000000000004,0x000000030000000000000009,0x000000040000000000000004\n"
//      //        			",0x000000010000000000000004,0x000000020000000000000005,0x0000000300000000000000012,0x000000040000000000000004\n"
//           			);

//              	tcp_client_send(soctemp, send_buf);
            add_or_update_data(1,3);add_or_update_data(2,6);add_or_update_data(3,9);add_or_update_data(4,4);
 8000894:	2103      	movs	r1, #3
 8000896:	2001      	movs	r0, #1
 8000898:	f000 faca 	bl	8000e30 <add_or_update_data>
 800089c:	2106      	movs	r1, #6
 800089e:	2002      	movs	r0, #2
 80008a0:	f000 fac6 	bl	8000e30 <add_or_update_data>
 80008a4:	2109      	movs	r1, #9
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 fac2 	bl	8000e30 <add_or_update_data>
 80008ac:	2104      	movs	r1, #4
 80008ae:	2004      	movs	r0, #4
 80008b0:	f000 fabe 	bl	8000e30 <add_or_update_data>
            tcp_client_send(soctemp, get_all_data_str());
 80008b4:	f000 fb32 	bl	8000f1c <get_all_data_str>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4619      	mov	r1, r3
 80008bc:	f8d7 0620 	ldr.w	r0, [r7, #1568]	; 0x620
 80008c0:	f000 fa6e 	bl	8000da0 <tcp_client_send>
                  osDelay(200);
 80008c4:	20c8      	movs	r0, #200	; 0xc8
 80008c6:	f004 fc2b 	bl	8005120 <osDelay>
                  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008ca:	2101      	movs	r1, #1
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <StartDefaultTask+0x148>)
 80008ce:	f002 fa77 	bl	8002dc0 <HAL_GPIO_TogglePin>
//            //        			",0x000000010000000000000003,0x000000020000000000000004,0x000000030000000000000009,0x000000040000000000000004\n"
//                    			",0x000000010000000000000004,0x000000020000000000000005,0x0000000300000000000000012,0x000000040000000000000004\n"
//                 			);

//                    	tcp_client_send(soctemp, send_buf);
                  add_or_update_data(1,4);add_or_update_data(2,8);add_or_update_data(3,12);add_or_update_data(4,4);
 80008d2:	2104      	movs	r1, #4
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 faab 	bl	8000e30 <add_or_update_data>
 80008da:	2108      	movs	r1, #8
 80008dc:	2002      	movs	r0, #2
 80008de:	f000 faa7 	bl	8000e30 <add_or_update_data>
 80008e2:	210c      	movs	r1, #12
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 faa3 	bl	8000e30 <add_or_update_data>
 80008ea:	2104      	movs	r1, #4
 80008ec:	2004      	movs	r0, #4
 80008ee:	f000 fa9f 	bl	8000e30 <add_or_update_data>
                  tcp_client_send(soctemp, get_all_data_str());
 80008f2:	f000 fb13 	bl	8000f1c <get_all_data_str>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	f8d7 0620 	ldr.w	r0, [r7, #1568]	; 0x620
 80008fe:	f000 fa4f 	bl	8000da0 <tcp_client_send>
                        osDelay(200);
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f004 fc0c 	bl	8005120 <osDelay>
                        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000908:	2101      	movs	r1, #1
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <StartDefaultTask+0x148>)
 800090c:	f002 fa58 	bl	8002dc0 <HAL_GPIO_TogglePin>
  	t+=1;
 8000910:	e771      	b.n	80007f6 <StartDefaultTask+0x2a>
 8000912:	bf00      	nop
 8000914:	40020400 	.word	0x40020400

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fcd7 	bl	80012dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010000 	.word	0x40010000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <HAL_MspInit+0x54>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x54>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_MspInit+0x54>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_MspInit+0x54>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fda1 	bl	80014d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12c      	bne.n	8000a1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a18:	f002 f836 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <HAL_InitTick+0xd4>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <HAL_InitTick+0xd4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a50:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <HAL_InitTick+0xd4>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 020c 	add.w	r2, r7, #12
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fe1c 	bl	80036a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a6c:	f002 fe06 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8000a70:	4603      	mov	r3, r0
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_InitTick+0xdc>)
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_InitTick+0xe0>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_InitTick+0xdc>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <HAL_InitTick+0xdc>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_InitTick+0xdc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_InitTick+0xdc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_InitTick+0xdc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <HAL_InitTick+0xdc>)
 8000aac:	f002 fe2c 	bl	8003708 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11b      	bne.n	8000af6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000abe:	4813      	ldr	r0, [pc, #76]	; (8000b0c <HAL_InitTick+0xdc>)
 8000ac0:	f002 fe7c 	bl	80037bc <HAL_TIM_Base_Start_IT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d111      	bne.n	8000af6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 fd1a 	bl	800150c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	d808      	bhi.n	8000af0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 fcf6 	bl	80014d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_InitTick+0xe4>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e002      	b.n	8000af6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	20000390 	.word	0x20000390
 8000b10:	40010000 	.word	0x40010000
 8000b14:	20000004 	.word	0x20000004

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b4a:	f002 fea7 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000390 	.word	0x20000390

08000b58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <ETH_IRQHandler+0x10>)
 8000b5e:	f001 f8bd 	bl	8001cdc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200051b4 	.word	0x200051b4

08000b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_kill>:

int _kill(int pid, int sig)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_kill+0x20>)
 8000b88:	2216      	movs	r2, #22
 8000b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	2000ca94 	.word	0x2000ca94

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe5 	bl	8000b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
	}

return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fcd1 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
	}
	return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d205      	bcs.n	8000ccc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x6c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	200003d8 	.word	0x200003d8
 8000cf8:	2000caa8 	.word	0x2000caa8
 8000cfc:	2000ca94 	.word	0x2000ca94

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <create_tcp_client>:
//#define SERVER_IP "192.168.2.19" // 服务器IP地址
//#define SERVER_IP "192.168.2.89" // 服务器IP地址
//#define SERVER_IP "192.168.56.1" // 服务器IP地址
#define SERVER_PORT 2333         // 服务器端口号

int create_tcp_client(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
    int sock;
    struct sockaddr_in server_address;

    // 创建socket
    sock = lwip_socket(AF_INET, SOCK_STREAM, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f009 fab2 	bl	800a298 <lwip_socket>
 8000d34:	6178      	str	r0, [r7, #20]
    if (sock < 0) {
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da05      	bge.n	8000d48 <create_tcp_client+0x24>
    	printf("soc create error...\n\r");
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <create_tcp_client+0x70>)
 8000d3e:	f015 faf3 	bl	8016328 <iprintf>
        return -1; // Socket创建失败
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e020      	b.n	8000d8a <create_tcp_client+0x66>
    }

    // 设置服务器地址
    server_address.sin_family = AF_INET;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	717b      	strb	r3, [r7, #5]
    server_address.sin_port = htons(SERVER_PORT);
 8000d4c:	f640 101d 	movw	r0, #2333	; 0x91d
 8000d50:	f009 fe46 	bl	800a9e0 <lwip_htons>
 8000d54:	4603      	mov	r3, r0
 8000d56:	80fb      	strh	r3, [r7, #6]
    inet_aton(SERVER_IP, &server_address.sin_addr.s_addr);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <create_tcp_client+0x74>)
 8000d60:	f013 ffc2 	bl	8014ce8 <ip4addr_aton>

    // 连接服务器
    if (lwip_connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2210      	movs	r2, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f009 f904 	bl	8009f78 <lwip_connect>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da08      	bge.n	8000d88 <create_tcp_client+0x64>
        lwip_close(sock);
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f009 f8a8 	bl	8009ecc <lwip_close>
    	printf("connect error...\n\r");
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <create_tcp_client+0x78>)
 8000d7e:	f015 fad3 	bl	8016328 <iprintf>
        return -2; // 连接失败
 8000d82:	f06f 0301 	mvn.w	r3, #1
 8000d86:	e000      	b.n	8000d8a <create_tcp_client+0x66>
    }

    return sock; // 返回socket描述符
 8000d88:	697b      	ldr	r3, [r7, #20]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0801769c 	.word	0x0801769c
 8000d98:	080176b4 	.word	0x080176b4
 8000d9c:	080176c4 	.word	0x080176c4

08000da0 <tcp_client_send>:
void tcp_client_send(int sock, const char *data) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	err_t err;
    err = lwip_send(sock, data, strlen(data), 0);
 8000daa:	6838      	ldr	r0, [r7, #0]
 8000dac:	f7ff fa10 	bl	80001d0 <strlen>
 8000db0:	4602      	mov	r2, r0
 8000db2:	2300      	movs	r3, #0
 8000db4:	6839      	ldr	r1, [r7, #0]
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f009 f95e 	bl	800a078 <lwip_send>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
//		printf("memerr..\n\r");
		// 处理错误
		// ERR_MEM 如果发送缓冲区太小不能放下全部数据
		// 其他错误码表示其他问题
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <init_dataItems>:
//
DataItem dataItems[MAX_DATA];
SemaphoreHandle_t dataMutex;

//初始化存储空间
void init_dataItems() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
//    dataMutex = xSemaphoreCreateMutex();
    for (int i = 0; i < MAX_DATA; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e023      	b.n	8000e1c <init_dataItems+0x54>
        dataItems[i].id = -1;  // 使用-1表示该位置为空
 8000dd4:	4915      	ldr	r1, [pc, #84]	; (8000e2c <init_dataItems+0x64>)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	601a      	str	r2, [r3, #0]
        dataItems[i].data = 0;
 8000de8:	4910      	ldr	r1, [pc, #64]	; (8000e2c <init_dataItems+0x64>)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	3304      	adds	r3, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
        memset(dataItems[i].str, 0, sizeof(dataItems[i].str));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	3308      	adds	r3, #8
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <init_dataItems+0x64>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	221d      	movs	r2, #29
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f015 fc19 	bl	8016648 <memset>
    for (int i = 0; i < MAX_DATA; i++) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	ddd8      	ble.n	8000dd4 <init_dataItems+0xc>
    }
//    xSemaphoreGive(dataMutex);
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200003dc 	.word	0x200003dc

08000e30 <add_or_update_data>:

//产生新数据
void add_or_update_data(int id, int data) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]

//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    int emptyIndex = -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	60fb      	str	r3, [r7, #12]
printf("running..\n");
 8000e40:	4833      	ldr	r0, [pc, #204]	; (8000f10 <add_or_update_data+0xe0>)
 8000e42:	f015 fad7 	bl	80163f4 <puts>
    for (int i = 0; i < MAX_DATA; i++) {
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	e036      	b.n	8000eba <add_or_update_data+0x8a>
        if (dataItems[i].id == id) {  // 找到相同ID，更新数据
 8000e4c:	4931      	ldr	r1, [pc, #196]	; (8000f14 <add_or_update_data+0xe4>)
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d117      	bne.n	8000e92 <add_or_update_data+0x62>
            dataItems[i].data = data;
 8000e62:	492c      	ldr	r1, [pc, #176]	; (8000f14 <add_or_update_data+0xe4>)
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3304      	adds	r3, #4
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	601a      	str	r2, [r3, #0]
            sprintf(dataItems[i].str, ",0x%08X%016X\n", id, data);
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	3308      	adds	r3, #8
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <add_or_update_data+0xe4>)
 8000e84:	1898      	adds	r0, r3, r2
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4923      	ldr	r1, [pc, #140]	; (8000f18 <add_or_update_data+0xe8>)
 8000e8c:	f015 faba 	bl	8016404 <siprintf>
//            xSemaphoreGive(dataMutex);
            return;
 8000e90:	e03a      	b.n	8000f08 <add_or_update_data+0xd8>
        }
        if (dataItems[i].id == -1 && emptyIndex == -1) {  // 记录第一个空位
 8000e92:	4920      	ldr	r1, [pc, #128]	; (8000f14 <add_or_update_data+0xe4>)
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea6:	d105      	bne.n	8000eb4 <add_or_update_data+0x84>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eae:	d101      	bne.n	8000eb4 <add_or_update_data+0x84>
            emptyIndex = i;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < MAX_DATA; i++) {
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	ddc5      	ble.n	8000e4c <add_or_update_data+0x1c>
        }
    }

    if (emptyIndex != -1) {  // 有空位，添加新数据
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d01f      	beq.n	8000f08 <add_or_update_data+0xd8>
        dataItems[emptyIndex].id = id;
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <add_or_update_data+0xe4>)
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
        dataItems[emptyIndex].data = data;
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <add_or_update_data+0xe4>)
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3304      	adds	r3, #4
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	601a      	str	r2, [r3, #0]
        sprintf(dataItems[emptyIndex].str, ",0x%08X%016X\n", id, data);
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	3308      	adds	r3, #8
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <add_or_update_data+0xe4>)
 8000efc:	1898      	adds	r0, r3, r2
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4905      	ldr	r1, [pc, #20]	; (8000f18 <add_or_update_data+0xe8>)
 8000f04:	f015 fa7e 	bl	8016404 <siprintf>
    }

//    xSemaphoreGive(dataMutex);
}
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	080177b4 	.word	0x080177b4
 8000f14:	200003dc 	.word	0x200003dc
 8000f18:	080177c0 	.word	0x080177c0

08000f1c <get_all_data_str>:

char* get_all_data_str() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
    static char allDataStr[MAX_DATA * 29];  // 需要足够大的空间来存储所有字符串
//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    strcpy(allDataStr, "");  // 初始化字符串
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <get_all_data_str+0x60>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < MAX_DATA; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e019      	b.n	8000f62 <get_all_data_str+0x46>
        if (dataItems[i].id != -1) {
 8000f2e:	4914      	ldr	r1, [pc, #80]	; (8000f80 <get_all_data_str+0x64>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f42:	d00b      	beq.n	8000f5c <get_all_data_str+0x40>
            strcat(allDataStr, dataItems[i].str);
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	3308      	adds	r3, #8
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <get_all_data_str+0x64>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <get_all_data_str+0x60>)
 8000f58:	f015 fb7e 	bl	8016658 <strcat>
    for (int i = 0; i < MAX_DATA; i++) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b09      	cmp	r3, #9
 8000f66:	dde2      	ble.n	8000f2e <get_all_data_str+0x12>
        }
    }
//    strcat(allDataStr, '\n');
    printf(allDataStr);
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <get_all_data_str+0x60>)
 8000f6a:	f015 f9dd 	bl	8016328 <iprintf>
//    xSemaphoreGive(dataMutex);
    init_dataItems();
 8000f6e:	f7ff ff2b 	bl	8000dc8 <init_dataItems>
    return allDataStr;
 8000f72:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <get_all_data_str+0x60>)
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000056c 	.word	0x2000056c
 8000f80:	200003dc 	.word	0x200003dc

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fae:	f7ff fea7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f015 fbfd 	bl	80167b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fb0d 	bl	80005d4 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000fc8:	0801b51c 	.word	0x0801b51c
  ldr r2, =_sbss
 8000fcc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000fd0:	2000caa4 	.word	0x2000caa4

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>

08000fd6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <DP83848_RegisterBusIO+0x28>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <DP83848_RegisterBusIO+0x28>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <DP83848_RegisterBusIO+0x28>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e014      	b.n	800102e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d17c      	bne.n	8001154 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2220      	movs	r2, #32
 800106c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e01c      	b.n	80010ae <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	2119      	movs	r1, #25
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	4798      	blx	r3
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	da03      	bge.n	8001090 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001088:	f06f 0304 	mvn.w	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800108e:	e00b      	b.n	80010a8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	d105      	bne.n	80010a8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
         break;
 80010a6:	e005      	b.n	80010b4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	d9df      	bls.n	8001074 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b1f      	cmp	r3, #31
 80010ba:	d902      	bls.n	80010c2 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d145      	bne.n	8001154 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6810      	ldr	r0, [r2, #0]
 80010d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d4:	2100      	movs	r1, #0
 80010d6:	4798      	blx	r3
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db37      	blt.n	800114e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6810      	ldr	r0, [r2, #0]
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	2100      	movs	r1, #0
 80010ec:	4798      	blx	r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db28      	blt.n	8001146 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4798      	blx	r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80010fe:	e01c      	b.n	800113a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4798      	blx	r3
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001112:	d80e      	bhi.n	8001132 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6810      	ldr	r0, [r2, #0]
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	2100      	movs	r1, #0
 8001122:	4798      	blx	r3
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	da07      	bge.n	800113a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800112a:	f06f 0304 	mvn.w	r3, #4
 800112e:	613b      	str	r3, [r7, #16]
                 break;
 8001130:	e010      	b.n	8001154 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001132:	f06f 0301 	mvn.w	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
               break;
 8001138:	e00c      	b.n	8001154 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1dd      	bne.n	8001100 <DP83848_Init+0xc6>
 8001144:	e006      	b.n	8001154 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001146:	f06f 0304 	mvn.w	r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e002      	b.n	8001154 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800114e:	f06f 0303 	mvn.w	r3, #3
 8001152:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d112      	bne.n	8001180 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4798      	blx	r3
 8001160:	4603      	mov	r3, r0
 8001162:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001164:	bf00      	nop
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4798      	blx	r3
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001178:	d9f5      	bls.n	8001166 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001180:	693b      	ldr	r3, [r7, #16]
 }
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6810      	ldr	r0, [r2, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	2101      	movs	r1, #1
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da02      	bge.n	80011b2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80011ac:	f06f 0304 	mvn.w	r3, #4
 80011b0:	e06e      	b.n	8001290 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6810      	ldr	r0, [r2, #0]
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	2101      	movs	r1, #1
 80011c0:	4798      	blx	r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da02      	bge.n	80011ce <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80011c8:	f06f 0304 	mvn.w	r3, #4
 80011cc:	e060      	b.n	8001290 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80011d8:	2301      	movs	r3, #1
 80011da:	e059      	b.n	8001290 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	f107 020c 	add.w	r2, r7, #12
 80011e8:	2100      	movs	r1, #0
 80011ea:	4798      	blx	r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da02      	bge.n	80011f8 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80011f2:	f06f 0304 	mvn.w	r3, #4
 80011f6:	e04b      	b.n	8001290 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d11b      	bne.n	800123a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <DP83848_GetLinkState+0x90>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001216:	2302      	movs	r3, #2
 8001218:	e03a      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001224:	2303      	movs	r3, #3
 8001226:	e033      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001232:	2304      	movs	r3, #4
 8001234:	e02c      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001236:	2305      	movs	r3, #5
 8001238:	e02a      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	2110      	movs	r1, #16
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	da02      	bge.n	8001256 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001250:	f06f 0304 	mvn.w	r3, #4
 8001254:	e01c      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001260:	2306      	movs	r3, #6
 8001262:	e015      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0306 	and.w	r3, r3, #6
 800126a:	2b04      	cmp	r3, #4
 800126c:	d101      	bne.n	8001272 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800126e:	2302      	movs	r3, #2
 8001270:	e00e      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0306 	and.w	r3, r3, #6
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800127c:	2303      	movs	r3, #3
 800127e:	e007      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0306 	and.w	r3, r3, #6
 8001286:	2b06      	cmp	r3, #6
 8001288:	d101      	bne.n	800128e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800128a:	2304      	movs	r3, #4
 800128c:	e000      	b.n	8001290 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800128e:	2305      	movs	r3, #5
    }
  }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f8fc 	bl	80014be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f7ff fbb2 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fb3c 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000690 	.word	0x20000690

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000690 	.word	0x20000690

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ff4c 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e6:	f7ff ff61 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	6978      	ldr	r0, [r7, #20]
 80014f2:	f7ff ffb1 	bl	8001458 <NVIC_EncodePriority>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff80 	bl	8001404 <__NVIC_SetPriority>
}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff54 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06c      	b.n	8001614 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001540:	2b00      	cmp	r3, #0
 8001542:	d106      	bne.n	8001552 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2223      	movs	r2, #35	; 0x23
 8001548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f003 fb35 	bl	8004bbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_ETH_Init+0xf4>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_ETH_Init+0xf4>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_ETH_Init+0xf4>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_ETH_Init+0xf8>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <HAL_ETH_Init+0xf8>)
 8001574:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001578:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_ETH_Init+0xf8>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_ETH_Init+0xf8>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_ETH_Init+0xf8>)
 800158a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff feae 	bl	8001304 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015aa:	e011      	b.n	80015d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015ac:	f7ff feaa 	bl	8001304 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ba:	d909      	bls.n	80015d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	22e0      	movs	r2, #224	; 0xe0
 80015c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e021      	b.n	8001614 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e4      	bne.n	80015ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 ffaa 	bl	800253c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f001 f851 	bl	8002690 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f001 f8a7 	bl	8002742 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f001 f80f 	bl	8002620 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2210      	movs	r2, #16
 800160e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800

08001624 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001632:	2b10      	cmp	r3, #16
 8001634:	d150      	bne.n	80016d8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2223      	movs	r2, #35	; 0x23
 800163a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2204      	movs	r2, #4
 8001642:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fa79 	bl	8001b3c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0208 	orr.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff fe5a 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0204 	orr.w	r2, r2, #4
 800167e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fe47 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fdf1 	bl	800227e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ca:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2223      	movs	r2, #35	; 0x23
 80016d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
  }
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d17f      	bne.n	80017f4 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2223      	movs	r2, #35	; 0x23
 80016f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001722:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001726:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800173a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f9f9 	bl	8001b3c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0208 	orr.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff fdda 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0204 	orr.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fdc7 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fd71 	bl	800227e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ca:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80017de:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80017e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017e6:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2223      	movs	r2, #35	; 0x23
 80017ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800180c:	2b23      	cmp	r3, #35	; 0x23
 800180e:	d170      	bne.n	80018f2 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2223      	movs	r2, #35	; 0x23
 8001814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 800182a:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 800182e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001832:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800184a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	f023 0302 	bic.w	r3, r3, #2
 800185e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001862:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff fd4d 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fcf7 	bl	800227e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0208 	bic.w	r2, r2, #8
 800189e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fd37 	bl	800131c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00e      	b.n	80018da <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	3212      	adds	r2, #18
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d9ed      	bls.n	80018bc <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2210      	movs	r2, #16
 80018ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e045      	b.n	80019ac <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001926:	2b23      	cmp	r3, #35	; 0x23
 8001928:	d13f      	bne.n	80019aa <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001932:	2201      	movs	r2, #1
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 ff70 	bl	800281c <ETH_Prepare_Tx_Descriptors>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001948:	f043 0202 	orr.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e02a      	b.n	80019ac <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001956:	f3bf 8f4f 	dsb	sy
}
 800195a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	2b03      	cmp	r3, #3
 800196c:	d904      	bls.n	8001978 <HAL_ETH_Transmit_IT+0x7c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	1f1a      	subs	r2, r3, #4
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00d      	beq.n	80019a6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	461a      	mov	r2, r3
 8001994:	2304      	movs	r3, #4
 8001996:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a0:	461a      	mov	r2, r3
 80019a2:	2300      	movs	r3, #0
 80019a4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
  }
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0a8      	b.n	8001b32 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019e6:	2b23      	cmp	r3, #35	; 0x23
 80019e8:	d001      	beq.n	80019ee <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0a1      	b.n	8001b32 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	3212      	adds	r2, #18
 80019fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a04:	f1c3 0304 	rsb	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a0a:	e06a      	b.n	8001ae2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <HAL_ETH_ReadData+0x88>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d040      	beq.n	8001abe <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00c      	beq.n	8001a80 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a70:	3b04      	subs	r3, #4
 8001a72:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a98:	461a      	mov	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f003 fa67 	bl	8004f70 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	441a      	add	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d902      	bls.n	8001ad0 <HAL_ETH_ReadData+0x11c>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b04      	subs	r3, #4
 8001ace:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	3212      	adds	r2, #18
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db06      	blt.n	8001af8 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d202      	bcs.n	8001af8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d089      	beq.n	8001a0c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f815 	bl	8001b3c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b50:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	3212      	adds	r2, #18
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b62:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b64:	e040      	b.n	8001be8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f9cc 	bl	8004f10 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	74fb      	strb	r3, [r7, #19]
 8001b82:	e007      	b.n	8001b94 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d026      	beq.n	8001be8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <ETH_UpdateDescriptor+0xe4>)
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	e003      	b.n	8001bb2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001bb0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bb2:	f3bf 8f5f 	dmb	sy
}
 8001bb6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d902      	bls.n	8001bd6 <ETH_UpdateDescriptor+0x9a>
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	3212      	adds	r2, #18
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <ETH_UpdateDescriptor+0xb8>
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1b8      	bne.n	8001b66 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d00c      	beq.n	8001c18 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c06:	461a      	mov	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	800045f8 	.word	0x800045f8

08001c24 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c42:	e03f      	b.n	8001cc4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	3304      	adds	r3, #4
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d028      	beq.n	8001cc4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db1b      	blt.n	8001cc0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f9ab 	bl	8004ff0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	3301      	adds	r3, #1
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbe:	e001      	b.n	8001cc4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_ETH_ReleaseTxPacket+0xac>
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1b9      	bne.n	8001c44 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d112      	bne.n	8001d1c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d109      	bne.n	8001d1c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_ETH_IRQHandler+0x178>)
 8001d14:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f002 fcb6 	bl	8004688 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d113      	bne.n	8001d56 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10a      	bne.n	8001d56 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001d4e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f002 fca9 	bl	80046a8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d68:	d14c      	bne.n	8001e04 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7c:	d142      	bne.n	8001e04 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	f043 0208 	orr.w	r2, r3, #8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da0:	d11a      	bne.n	8001dd8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_ETH_IRQHandler+0x17c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001dc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dcc:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	22e0      	movs	r2, #224	; 0xe0
 8001dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001dd6:	e012      	b.n	8001dfe <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	f248 6380 	movw	r3, #34432	; 0x8680
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df6:	461a      	mov	r2, r3
 8001df8:	f248 6380 	movw	r3, #34432	; 0x8680
 8001dfc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f002 fc62 	bl	80046c8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d10e      	bne.n	8001e30 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f81c 	bl	8001e60 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_ETH_IRQHandler+0x180>)
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_ETH_IRQHandler+0x180>)
 8001e3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e42:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f815 	bl	8001e74 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	00010040 	.word	0x00010040
 8001e58:	007e2000 	.word	0x007e2000
 8001e5c:	40013c00 	.word	0x40013c00

08001e60 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 031c 	and.w	r3, r3, #28
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	02db      	lsls	r3, r3, #11
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f023 0302 	bic.w	r3, r3, #2
 8001ec6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ed8:	f7ff fa14 	bl	8001304 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ede:	e00d      	b.n	8001efc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ee0:	f7ff fa10 	bl	8001304 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d301      	bcc.n	8001ef4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e010      	b.n	8001f16 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ec      	bne.n	8001ee0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 031c 	and.w	r3, r3, #28
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	02db      	lsls	r3, r3, #11
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	019b      	lsls	r3, r3, #6
 8001f4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f78:	f7ff f9c4 	bl	8001304 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f7e:	e00d      	b.n	8001f9c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f80:	f7ff f9c0 	bl	8001304 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d301      	bcc.n	8001f94 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e009      	b.n	8001fa8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ec      	bne.n	8001f80 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d9      	b.n	8002178 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf0c      	ite	eq
 8002082:	2301      	moveq	r3, #1
 8002084:	2300      	movne	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf14      	ite	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	2300      	moveq	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	b29a      	uxth	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00b      	b.n	80021b0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d105      	bne.n	80021ae <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f88f 	bl	80022c8 <ETH_SetMACConfig>

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
  }
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 031c 	bic.w	r3, r3, #28
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80021d0:	f001 fa34 	bl	800363c <HAL_RCC_GetHCLKFreq>
 80021d4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_ETH_SetMDIOClockRange+0x98>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d908      	bls.n	80021f0 <HAL_ETH_SetMDIOClockRange+0x38>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d804      	bhi.n	80021f0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e027      	b.n	8002240 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d908      	bls.n	800220a <HAL_ETH_SetMDIOClockRange+0x52>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d204      	bcs.n	800220a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f043 030c 	orr.w	r3, r3, #12
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e01a      	b.n	8002240 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d303      	bcc.n	800221a <HAL_ETH_SetMDIOClockRange+0x62>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d911      	bls.n	800223e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d908      	bls.n	8002234 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d804      	bhi.n	8002234 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e005      	b.n	8002240 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e000      	b.n	8002240 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800223e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	611a      	str	r2, [r3, #16]
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	01312cff 	.word	0x01312cff
 8002254:	02160ebf 	.word	0x02160ebf
 8002258:	03938700 	.word	0x03938700
 800225c:	05f5e0ff 	.word	0x05f5e0ff
 8002260:	08f0d17f 	.word	0x08f0d17f

08002264 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff f834 	bl	800131c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022be:	6193      	str	r3, [r2, #24]
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4b51      	ldr	r3, [pc, #324]	; (8002424 <ETH_SetMACConfig+0x15c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	7c1b      	ldrb	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <ETH_SetMACConfig+0x28>
 80022ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022ee:	e000      	b.n	80022f2 <ETH_SetMACConfig+0x2a>
 80022f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7c5b      	ldrb	r3, [r3, #17]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <ETH_SetMACConfig+0x38>
 80022fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fe:	e000      	b.n	8002302 <ETH_SetMACConfig+0x3a>
 8002300:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002302:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	7fdb      	ldrb	r3, [r3, #31]
 800230e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002310:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002316:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	7f92      	ldrb	r2, [r2, #30]
 800231c:	2a00      	cmp	r2, #0
 800231e:	d102      	bne.n	8002326 <ETH_SetMACConfig+0x5e>
 8002320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002324:	e000      	b.n	8002328 <ETH_SetMACConfig+0x60>
 8002326:	2200      	movs	r2, #0
                        macconf->Speed |
 8002328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7f1b      	ldrb	r3, [r3, #28]
 800232e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002330:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800233e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002346:	2a00      	cmp	r2, #0
 8002348:	d102      	bne.n	8002350 <ETH_SetMACConfig+0x88>
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	e000      	b.n	8002352 <ETH_SetMACConfig+0x8a>
 8002350:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002352:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7bdb      	ldrb	r3, [r3, #15]
 8002358:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800235a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002368:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800236a:	4313      	orrs	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002382:	2001      	movs	r0, #1
 8002384:	f7fe ffca 	bl	800131c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d101      	bne.n	80023b6 <ETH_SetMACConfig+0xee>
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	e000      	b.n	80023b8 <ETH_SetMACConfig+0xf0>
 80023b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80023be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80023c6:	2a01      	cmp	r2, #1
 80023c8:	d101      	bne.n	80023ce <ETH_SetMACConfig+0x106>
 80023ca:	2208      	movs	r2, #8
 80023cc:	e000      	b.n	80023d0 <ETH_SetMACConfig+0x108>
 80023ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80023d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80023d8:	2a01      	cmp	r2, #1
 80023da:	d101      	bne.n	80023e0 <ETH_SetMACConfig+0x118>
 80023dc:	2204      	movs	r2, #4
 80023de:	e000      	b.n	80023e2 <ETH_SetMACConfig+0x11a>
 80023e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80023ea:	2a01      	cmp	r2, #1
 80023ec:	d101      	bne.n	80023f2 <ETH_SetMACConfig+0x12a>
 80023ee:	2202      	movs	r2, #2
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x12c>
 80023f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023f4:	4313      	orrs	r3, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe ff85 	bl	800131c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	ff20810f 	.word	0xff20810f

08002428 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <ETH_SetDMAConfig+0x110>)
 8002442:	4013      	ands	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7b1b      	ldrb	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <ETH_SetDMAConfig+0x2c>
 800244e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002452:	e000      	b.n	8002456 <ETH_SetDMAConfig+0x2e>
 8002454:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7b5b      	ldrb	r3, [r3, #13]
 800245a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800245c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	7f52      	ldrb	r2, [r2, #29]
 8002462:	2a00      	cmp	r2, #0
 8002464:	d102      	bne.n	800246c <ETH_SetDMAConfig+0x44>
 8002466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800246a:	e000      	b.n	800246e <ETH_SetDMAConfig+0x46>
 800246c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800246e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7b9b      	ldrb	r3, [r3, #14]
 8002474:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002476:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800247c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	7f1b      	ldrb	r3, [r3, #28]
 8002482:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7f9b      	ldrb	r3, [r3, #30]
 800248a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800248c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002492:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800249c:	4313      	orrs	r3, r2
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	461a      	mov	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024be:	2001      	movs	r0, #1
 80024c0:	f7fe ff2c 	bl	800131c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024cc:	461a      	mov	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002500:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800251c:	2001      	movs	r0, #1
 800251e:	f7fe fefd 	bl	800131c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	f8de3f23 	.word	0xf8de3f23

0800253c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0a6      	sub	sp, #152	; 0x98
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002578:	2300      	movs	r3, #0
 800257a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002582:	2300      	movs	r3, #0
 8002584:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800259e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fe86 	bl	80022c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80025bc:	2301      	movs	r3, #1
 80025be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002604:	2300      	movs	r3, #0
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff08 	bl	8002428 <ETH_SetDMAConfig>
}
 8002618:	bf00      	nop
 800261a:	3798      	adds	r7, #152	; 0x98
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3305      	adds	r3, #5
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	3204      	adds	r2, #4
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <ETH_MACAddressConfig+0x68>)
 8002642:	4413      	add	r3, r2
 8002644:	461a      	mov	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3303      	adds	r3, #3
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	061a      	lsls	r2, r3, #24
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3302      	adds	r3, #2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3301      	adds	r3, #1
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4313      	orrs	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <ETH_MACAddressConfig+0x6c>)
 8002672:	4413      	add	r3, r2
 8002674:	461a      	mov	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40028040 	.word	0x40028040
 800268c:	40028044 	.word	0x40028044

08002690 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e03e      	b.n	800271c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	3206      	adds	r2, #6
 80026d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d80c      	bhi.n	8002700 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68d9      	ldr	r1, [r3, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e004      	b.n	800270a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3301      	adds	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d9bd      	bls.n	800269e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002734:	611a      	str	r2, [r3, #16]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e046      	b.n	80027de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6919      	ldr	r1, [r3, #16]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800278c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002794:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	3212      	adds	r2, #18
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d80c      	bhi.n	80027ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	e004      	b.n	80027d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3301      	adds	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d9b5      	bls.n	8002750 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280e:	60da      	str	r2, [r3, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800281c:	b480      	push	{r7}
 800281e:	b08d      	sub	sp, #52	; 0x34
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3318      	adds	r3, #24
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800285a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285e:	d007      	beq.n	8002870 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	3304      	adds	r3, #4
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	e103      	b.n	8002a7c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3301      	adds	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800288c:	f023 031f 	bic.w	r3, r3, #31
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	6852      	ldr	r2, [r2, #4]
 8002894:	431a      	orrs	r2, r3
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80028fa:	f3bf 8f5f 	dmb	sy
}
 80028fe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800290c:	e084      	b.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e005      	b.n	800293a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	3301      	adds	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b03      	cmp	r3, #3
 8002944:	d902      	bls.n	800294c <ETH_Prepare_Tx_Descriptors+0x130>
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	3b04      	subs	r3, #4
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800296a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800296e:	d007      	beq.n	8002980 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	3304      	adds	r3, #4
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d029      	beq.n	80029d4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
 8002992:	e019      	b.n	80029c8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002994:	f3bf 8f5f 	dmb	sy
}
 8002998:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	3301      	adds	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d902      	bls.n	80029b8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	3b04      	subs	r3, #4
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	3301      	adds	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d3e1      	bcc.n	8002994 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	e053      	b.n	8002a7c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	3301      	adds	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80029f2:	f023 031f 	bic.w	r3, r3, #31
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a06:	f3bf 8f5f 	dmb	sy
}
 8002a0a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f af76 	bne.w	800290e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e005      	b.n	8002a42 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a52:	6979      	ldr	r1, [r7, #20]
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	3304      	adds	r3, #4
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a62:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002a76:	b662      	cpsie	i
}
 8002a78:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3734      	adds	r7, #52	; 0x34
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e16b      	b.n	8002d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 815a 	bne.w	8002d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d017      	beq.n	8002b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b4 	beq.w	8002d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_GPIO_Init+0x310>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_GPIO_Init+0x314>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <HAL_GPIO_Init+0x226>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_GPIO_Init+0x318>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d025      	beq.n	8002caa <HAL_GPIO_Init+0x222>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_GPIO_Init+0x31c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x21e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	; (8002da8 <HAL_GPIO_Init+0x320>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x21a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x216>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	; (8002db0 <HAL_GPIO_Init+0x328>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x212>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <HAL_GPIO_Init+0x32c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x20e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x20a>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e00e      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c92:	2308      	movs	r3, #8
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	; (8002d98 <HAL_GPIO_Init+0x310>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f ae90 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40021c00 	.word	0x40021c00
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43d9      	mvns	r1, r3
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	400b      	ands	r3, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e267      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d075      	beq.n	8002efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d112      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b82      	ldr	r3, [pc, #520]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05b      	beq.n	8002efc <HAL_RCC_OscConfig+0x108>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d157      	bne.n	8002efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e242      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x74>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4b70      	ldr	r3, [pc, #448]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6f      	ldr	r2, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6c      	ldr	r2, [pc, #432]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e8c:	4b69      	ldr	r3, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a68      	ldr	r2, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fa2a 	bl	8001304 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fa26 	bl	8001304 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e207      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fa16 	bl	8001304 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fa12 	bl	8001304 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1f3      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0xe8>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c7      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe f9cb 	bl	8001304 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe f9c7 	bl	8001304 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a8      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4925      	ldr	r1, [pc, #148]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe f9aa 	bl	8001304 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe f9a6 	bl	8001304 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e187      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe f98a 	bl	8001304 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe f986 	bl	8001304 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e167      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x200>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f973 	bl	8001304 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe f96f 	bl	8001304 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d907      	bls.n	8003040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e150      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	42470000 	.word	0x42470000
 800303c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ea      	bne.n	8003022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b81      	ldr	r3, [pc, #516]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b77      	ldr	r3, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a73      	ldr	r2, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f92f 	bl	8001304 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe f92b 	bl	8001304 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e10c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x2ea>
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a63      	ldr	r2, [pc, #396]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x30c>
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b55      	ldr	r3, [pc, #340]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a54      	ldr	r2, [pc, #336]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe f8f0 	bl	8001304 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f8ec 	bl	8001304 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0cb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCC_OscConfig+0x334>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe f8da 	bl	8001304 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe f8d6 	bl	8001304 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b5      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a38      	ldr	r2, [pc, #224]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d05c      	beq.n	8003258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d141      	bne.n	800322a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe f8aa 	bl	8001304 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f8a6 	bl	8001304 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e087      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f87f 	bl	8001304 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f87b 	bl	8001304 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e05c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x416>
 8003228:	e054      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f868 	bl	8001304 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f864 	bl	8001304 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e045      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
 8003256:	e03d      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e038      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000
 800326c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d028      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d121      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d11a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d111      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0cc      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d90c      	bls.n	8003320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b65      	ldr	r3, [pc, #404]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003338:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	494d      	ldr	r1, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d044      	beq.n	8003404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e067      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4934      	ldr	r1, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fd ff96 	bl	8001304 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fd ff92 	bl	8001304 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e04f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 020c 	and.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d1eb      	bne.n	80033dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d20c      	bcs.n	800342c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4916      	ldr	r1, [pc, #88]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346a:	f000 f821 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	490a      	ldr	r1, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fad0 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023c00 	.word	0x40023c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	0801b194 	.word	0x0801b194
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b4:	b090      	sub	sp, #64	; 0x40
 80034b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
 80034bc:	2300      	movs	r3, #0
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c0:	2300      	movs	r3, #0
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d00d      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	f200 80a1 	bhi.w	800361c <HAL_RCC_GetSysClockFreq+0x16c>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x3a>
 80034e2:	e09b      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCC_GetSysClockFreq+0x184>)
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034e8:	e09b      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ea:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ee:	e098      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f0:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b4d      	ldr	r3, [pc, #308]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d028      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b4a      	ldr	r3, [pc, #296]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	627a      	str	r2, [r7, #36]	; 0x24
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003518:	2100      	movs	r1, #0
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_GetSysClockFreq+0x188>)
 800351c:	fb03 f201 	mul.w	r2, r3, r1
 8003520:	2300      	movs	r3, #0
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	4413      	add	r3, r2
 8003528:	4a43      	ldr	r2, [pc, #268]	; (8003638 <HAL_RCC_GetSysClockFreq+0x188>)
 800352a:	fba0 1202 	umull	r1, r2, r0, r2
 800352e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003530:	460a      	mov	r2, r1
 8003532:	62ba      	str	r2, [r7, #40]	; 0x28
 8003534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003536:	4413      	add	r3, r2
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353c:	2200      	movs	r2, #0
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	61fa      	str	r2, [r7, #28]
 8003542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003546:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800354a:	f7fc fe99 	bl	8000280 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4613      	mov	r3, r2
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003556:	e053      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	2200      	movs	r2, #0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	617a      	str	r2, [r7, #20]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800356a:	f04f 0b00 	mov.w	fp, #0
 800356e:	4652      	mov	r2, sl
 8003570:	465b      	mov	r3, fp
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	0159      	lsls	r1, r3, #5
 800357c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003580:	0150      	lsls	r0, r2, #5
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	ebb2 080a 	subs.w	r8, r2, sl
 800358a:	eb63 090b 	sbc.w	r9, r3, fp
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800359a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800359e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035a2:	ebb2 0408 	subs.w	r4, r2, r8
 80035a6:	eb63 0509 	sbc.w	r5, r3, r9
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	00eb      	lsls	r3, r5, #3
 80035b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b8:	00e2      	lsls	r2, r4, #3
 80035ba:	4614      	mov	r4, r2
 80035bc:	461d      	mov	r5, r3
 80035be:	eb14 030a 	adds.w	r3, r4, sl
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	eb45 030b 	adc.w	r3, r5, fp
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d6:	4629      	mov	r1, r5
 80035d8:	028b      	lsls	r3, r1, #10
 80035da:	4621      	mov	r1, r4
 80035dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e0:	4621      	mov	r1, r4
 80035e2:	028a      	lsls	r2, r1, #10
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	2200      	movs	r2, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f4:	f7fc fe44 	bl	8000280 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_GetSysClockFreq+0x180>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetSysClockFreq+0x184>)
 800361e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003624:	4618      	mov	r0, r3
 8003626:	3740      	adds	r7, #64	; 0x40
 8003628:	46bd      	mov	sp, r7
 800362a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400
 8003638:	017d7840 	.word	0x017d7840

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a9b      	lsrs	r3, r3, #10
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	0801b1a4 	.word	0x0801b1a4

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffdc 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0b5b      	lsrs	r3, r3, #13
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	0801b1a4 	.word	0x0801b1a4

080036a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	220f      	movs	r2, #15
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_RCC_GetClockConfig+0x60>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40023c00 	.word	0x40023c00

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f839 	bl	80037a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 f9d8 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d001      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e04e      	b.n	8003872 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a23      	ldr	r2, [pc, #140]	; (8003880 <HAL_TIM_Base_Start_IT+0xc4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d01d      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_TIM_Base_Start_IT+0xc8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <HAL_TIM_Base_Start_IT+0xcc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1c      	ldr	r2, [pc, #112]	; (800388c <HAL_TIM_Base_Start_IT+0xd0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_TIM_Base_Start_IT+0xd4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_Base_Start_IT+0xd8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_TIM_Base_Start_IT+0xdc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d010      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	e007      	b.n	8003870 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40010400 	.word	0x40010400
 8003894:	40014000 	.word	0x40014000
 8003898:	40001800 	.word	0x40001800

0800389c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0202 	mvn.w	r2, #2
 80038c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8ee 	bl	8003ac0 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8e0 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8f1 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0204 	mvn.w	r2, #4
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8c4 	bl	8003ac0 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8b6 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8c7 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d122      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b08      	cmp	r3, #8
 8003966:	d11b      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0208 	mvn.w	r2, #8
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f89a 	bl	8003ac0 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f88c 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f89d 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d122      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f870 	bl	8003ac0 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f862 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f873 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10e      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0201 	mvn.w	r2, #1
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fc ff7c 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b80      	cmp	r3, #128	; 0x80
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f902 	bl	8003c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f838 	bl	8003ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d10e      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d107      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0220 	mvn.w	r2, #32
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8cc 	bl	8003c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d00f      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d027      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <TIM_Base_SetConfig+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d023      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <TIM_Base_SetConfig+0x11c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <TIM_Base_SetConfig+0x120>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_Base_SetConfig+0x128>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_Base_SetConfig+0x138>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <TIM_Base_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <TIM_Base_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	40001800 	.word	0x40001800
 8003c34:	40001c00 	.word	0x40001c00
 8003c38:	40002000 	.word	0x40002000

08003c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e03f      	b.n	8003cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc fe88 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f929 	bl	8003f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b08a      	sub	sp, #40	; 0x28
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d17c      	bne.n	8003e18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_UART_Transmit+0x2c>
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e075      	b.n	8003e1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Transmit+0x3e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e06e      	b.n	8003e1a <HAL_UART_Transmit+0x11c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2221      	movs	r2, #33	; 0x21
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d52:	f7fd fad7 	bl	8001304 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	88fa      	ldrh	r2, [r7, #6]
 8003d62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d108      	bne.n	8003d80 <HAL_UART_Transmit+0x82>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e003      	b.n	8003d88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d90:	e02a      	b.n	8003de8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f840 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e036      	b.n	8003e1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e007      	b.n	8003dda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1cf      	bne.n	8003d92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2140      	movs	r1, #64	; 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f810 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e006      	b.n	8003e1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b090      	sub	sp, #64	; 0x40
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	e050      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d04c      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e42:	f7fd fa5f 	bl	8001304 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d241      	bcs.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e72:	637a      	str	r2, [r7, #52]	; 0x34
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	613b      	str	r3, [r7, #16]
   return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea6:	623a      	str	r2, [r7, #32]
 8003ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	69f9      	ldr	r1, [r7, #28]
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e00f      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d09f      	beq.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3740      	adds	r7, #64	; 0x40
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b0c0      	sub	sp, #256	; 0x100
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	68d9      	ldr	r1, [r3, #12]
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	ea40 0301 	orr.w	r3, r0, r1
 8003f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f58:	f021 010c 	bic.w	r1, r1, #12
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f66:	430b      	orrs	r3, r1
 8003f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	6999      	ldr	r1, [r3, #24]
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	ea40 0301 	orr.w	r3, r0, r1
 8003f86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <UART_SetConfig+0x2cc>)
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d005      	beq.n	8003fa0 <UART_SetConfig+0xa0>
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b8d      	ldr	r3, [pc, #564]	; (80041d0 <UART_SetConfig+0x2d0>)
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d104      	bne.n	8003faa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff fb6c 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8003fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fa8:	e003      	b.n	8003fb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003faa:	f7ff fb53 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8003fae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	f040 810c 	bne.w	80041d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	eb12 0801 	adds.w	r8, r2, r1
 8003fe8:	4629      	mov	r1, r5
 8003fea:	eb43 0901 	adc.w	r9, r3, r1
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004002:	4690      	mov	r8, r2
 8004004:	4699      	mov	r9, r3
 8004006:	4623      	mov	r3, r4
 8004008:	eb18 0303 	adds.w	r3, r8, r3
 800400c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004010:	462b      	mov	r3, r5
 8004012:	eb49 0303 	adc.w	r3, r9, r3
 8004016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004026:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800402a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800402e:	460b      	mov	r3, r1
 8004030:	18db      	adds	r3, r3, r3
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
 8004034:	4613      	mov	r3, r2
 8004036:	eb42 0303 	adc.w	r3, r2, r3
 800403a:	657b      	str	r3, [r7, #84]	; 0x54
 800403c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004040:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004044:	f7fc f91c 	bl	8000280 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <UART_SetConfig+0x2d4>)
 800404e:	fba3 2302 	umull	r2, r3, r3, r2
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	011c      	lsls	r4, r3, #4
 8004056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004060:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004064:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	1891      	adds	r1, r2, r2
 800406e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004070:	415b      	adcs	r3, r3
 8004072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004074:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004078:	4641      	mov	r1, r8
 800407a:	eb12 0a01 	adds.w	sl, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0b01 	adc.w	fp, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004090:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004098:	4692      	mov	sl, r2
 800409a:	469b      	mov	fp, r3
 800409c:	4643      	mov	r3, r8
 800409e:	eb1a 0303 	adds.w	r3, sl, r3
 80040a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040a6:	464b      	mov	r3, r9
 80040a8:	eb4b 0303 	adc.w	r3, fp, r3
 80040ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040c4:	460b      	mov	r3, r1
 80040c6:	18db      	adds	r3, r3, r3
 80040c8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ca:	4613      	mov	r3, r2
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
 80040d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040da:	f7fc f8d1 	bl	8000280 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <UART_SetConfig+0x2d4>)
 80040e6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2264      	movs	r2, #100	; 0x64
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	1acb      	subs	r3, r1, r3
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <UART_SetConfig+0x2d4>)
 80040fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004108:	441c      	add	r4, r3
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004114:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004118:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	63b9      	str	r1, [r7, #56]	; 0x38
 8004124:	415b      	adcs	r3, r3
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004128:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800412c:	4641      	mov	r1, r8
 800412e:	1851      	adds	r1, r2, r1
 8004130:	6339      	str	r1, [r7, #48]	; 0x30
 8004132:	4649      	mov	r1, r9
 8004134:	414b      	adcs	r3, r1
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004144:	4659      	mov	r1, fp
 8004146:	00cb      	lsls	r3, r1, #3
 8004148:	4651      	mov	r1, sl
 800414a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414e:	4651      	mov	r1, sl
 8004150:	00ca      	lsls	r2, r1, #3
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	4603      	mov	r3, r0
 8004158:	4642      	mov	r2, r8
 800415a:	189b      	adds	r3, r3, r2
 800415c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004160:	464b      	mov	r3, r9
 8004162:	460a      	mov	r2, r1
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004178:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800417c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004180:	460b      	mov	r3, r1
 8004182:	18db      	adds	r3, r3, r3
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
 8004186:	4613      	mov	r3, r2
 8004188:	eb42 0303 	adc.w	r3, r2, r3
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004192:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004196:	f7fc f873 	bl	8000280 <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <UART_SetConfig+0x2d4>)
 80041a0:	fba3 1302 	umull	r1, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2164      	movs	r1, #100	; 0x64
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	3332      	adds	r3, #50	; 0x32
 80041b2:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <UART_SetConfig+0x2d4>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	f003 0207 	and.w	r2, r3, #7
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4422      	add	r2, r4
 80041c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041c8:	e106      	b.n	80043d8 <UART_SetConfig+0x4d8>
 80041ca:	bf00      	nop
 80041cc:	40011000 	.word	0x40011000
 80041d0:	40011400 	.word	0x40011400
 80041d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ea:	4642      	mov	r2, r8
 80041ec:	464b      	mov	r3, r9
 80041ee:	1891      	adds	r1, r2, r2
 80041f0:	6239      	str	r1, [r7, #32]
 80041f2:	415b      	adcs	r3, r3
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041fa:	4641      	mov	r1, r8
 80041fc:	1854      	adds	r4, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb43 0501 	adc.w	r5, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	00eb      	lsls	r3, r5, #3
 800420e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004212:	00e2      	lsls	r2, r4, #3
 8004214:	4614      	mov	r4, r2
 8004216:	461d      	mov	r5, r3
 8004218:	4643      	mov	r3, r8
 800421a:	18e3      	adds	r3, r4, r3
 800421c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004220:	464b      	mov	r3, r9
 8004222:	eb45 0303 	adc.w	r3, r5, r3
 8004226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004246:	4629      	mov	r1, r5
 8004248:	008b      	lsls	r3, r1, #2
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004250:	4621      	mov	r1, r4
 8004252:	008a      	lsls	r2, r1, #2
 8004254:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004258:	f7fc f812 	bl	8000280 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4b60      	ldr	r3, [pc, #384]	; (80043e4 <UART_SetConfig+0x4e4>)
 8004262:	fba3 2302 	umull	r2, r3, r3, r2
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	011c      	lsls	r4, r3, #4
 800426a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004274:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004278:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	1891      	adds	r1, r2, r2
 8004282:	61b9      	str	r1, [r7, #24]
 8004284:	415b      	adcs	r3, r3
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800428c:	4641      	mov	r1, r8
 800428e:	1851      	adds	r1, r2, r1
 8004290:	6139      	str	r1, [r7, #16]
 8004292:	4649      	mov	r1, r9
 8004294:	414b      	adcs	r3, r1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a4:	4659      	mov	r1, fp
 80042a6:	00cb      	lsls	r3, r1, #3
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ae:	4651      	mov	r1, sl
 80042b0:	00ca      	lsls	r2, r1, #3
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	4642      	mov	r2, r8
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042c0:	464b      	mov	r3, r9
 80042c2:	460a      	mov	r2, r1
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042e4:	4649      	mov	r1, r9
 80042e6:	008b      	lsls	r3, r1, #2
 80042e8:	4641      	mov	r1, r8
 80042ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ee:	4641      	mov	r1, r8
 80042f0:	008a      	lsls	r2, r1, #2
 80042f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042f6:	f7fb ffc3 	bl	8000280 <__aeabi_uldivmod>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <UART_SetConfig+0x4e4>)
 8004302:	fba3 2301 	umull	r2, r3, r3, r1
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2264      	movs	r2, #100	; 0x64
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	1acb      	subs	r3, r1, r3
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	3332      	adds	r3, #50	; 0x32
 8004314:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <UART_SetConfig+0x4e4>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004320:	441c      	add	r4, r3
 8004322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004326:	2200      	movs	r2, #0
 8004328:	673b      	str	r3, [r7, #112]	; 0x70
 800432a:	677a      	str	r2, [r7, #116]	; 0x74
 800432c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	415b      	adcs	r3, r3
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004340:	4641      	mov	r1, r8
 8004342:	1851      	adds	r1, r2, r1
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	4649      	mov	r1, r9
 8004348:	414b      	adcs	r3, r1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004358:	4659      	mov	r1, fp
 800435a:	00cb      	lsls	r3, r1, #3
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004362:	4651      	mov	r1, sl
 8004364:	00ca      	lsls	r2, r1, #3
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	4603      	mov	r3, r0
 800436c:	4642      	mov	r2, r8
 800436e:	189b      	adds	r3, r3, r2
 8004370:	66bb      	str	r3, [r7, #104]	; 0x68
 8004372:	464b      	mov	r3, r9
 8004374:	460a      	mov	r2, r1
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	663b      	str	r3, [r7, #96]	; 0x60
 8004386:	667a      	str	r2, [r7, #100]	; 0x64
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004394:	4649      	mov	r1, r9
 8004396:	008b      	lsls	r3, r1, #2
 8004398:	4641      	mov	r1, r8
 800439a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439e:	4641      	mov	r1, r8
 80043a0:	008a      	lsls	r2, r1, #2
 80043a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043a6:	f7fb ff6b 	bl	8000280 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <UART_SetConfig+0x4e4>)
 80043b0:	fba3 1302 	umull	r1, r3, r3, r2
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	3332      	adds	r3, #50	; 0x32
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <UART_SetConfig+0x4e4>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f003 020f 	and.w	r2, r3, #15
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4422      	add	r2, r4
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043de:	46bd      	mov	sp, r7
 80043e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80043e8:	b5b0      	push	{r4, r5, r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80043ee:	4b96      	ldr	r3, [pc, #600]	; (8004648 <MX_LWIP_Init+0x260>)
 80043f0:	22c0      	movs	r2, #192	; 0xc0
 80043f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80043f4:	4b94      	ldr	r3, [pc, #592]	; (8004648 <MX_LWIP_Init+0x260>)
 80043f6:	22a8      	movs	r2, #168	; 0xa8
 80043f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80043fa:	4b93      	ldr	r3, [pc, #588]	; (8004648 <MX_LWIP_Init+0x260>)
 80043fc:	2202      	movs	r2, #2
 80043fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 36;
 8004400:	4b91      	ldr	r3, [pc, #580]	; (8004648 <MX_LWIP_Init+0x260>)
 8004402:	2224      	movs	r2, #36	; 0x24
 8004404:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004406:	4b91      	ldr	r3, [pc, #580]	; (800464c <MX_LWIP_Init+0x264>)
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800440c:	4b8f      	ldr	r3, [pc, #572]	; (800464c <MX_LWIP_Init+0x264>)
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004412:	4b8e      	ldr	r3, [pc, #568]	; (800464c <MX_LWIP_Init+0x264>)
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004418:	4b8c      	ldr	r3, [pc, #560]	; (800464c <MX_LWIP_Init+0x264>)
 800441a:	2200      	movs	r2, #0
 800441c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800441e:	4b8c      	ldr	r3, [pc, #560]	; (8004650 <MX_LWIP_Init+0x268>)
 8004420:	22c0      	movs	r2, #192	; 0xc0
 8004422:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004424:	4b8a      	ldr	r3, [pc, #552]	; (8004650 <MX_LWIP_Init+0x268>)
 8004426:	22a8      	movs	r2, #168	; 0xa8
 8004428:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800442a:	4b89      	ldr	r3, [pc, #548]	; (8004650 <MX_LWIP_Init+0x268>)
 800442c:	2202      	movs	r2, #2
 800442e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 2;
 8004430:	4b87      	ldr	r3, [pc, #540]	; (8004650 <MX_LWIP_Init+0x268>)
 8004432:	2202      	movs	r2, #2
 8004434:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004436:	2100      	movs	r1, #0
 8004438:	2000      	movs	r0, #0
 800443a:	f006 fa87 	bl	800a94c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800443e:	4b82      	ldr	r3, [pc, #520]	; (8004648 <MX_LWIP_Init+0x260>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	061a      	lsls	r2, r3, #24
 8004444:	4b80      	ldr	r3, [pc, #512]	; (8004648 <MX_LWIP_Init+0x260>)
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	4b7e      	ldr	r3, [pc, #504]	; (8004648 <MX_LWIP_Init+0x260>)
 800444e:	789b      	ldrb	r3, [r3, #2]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	4313      	orrs	r3, r2
 8004454:	4a7c      	ldr	r2, [pc, #496]	; (8004648 <MX_LWIP_Init+0x260>)
 8004456:	78d2      	ldrb	r2, [r2, #3]
 8004458:	4313      	orrs	r3, r2
 800445a:	061a      	lsls	r2, r3, #24
 800445c:	4b7a      	ldr	r3, [pc, #488]	; (8004648 <MX_LWIP_Init+0x260>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	0619      	lsls	r1, r3, #24
 8004462:	4b79      	ldr	r3, [pc, #484]	; (8004648 <MX_LWIP_Init+0x260>)
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	4319      	orrs	r1, r3
 800446a:	4b77      	ldr	r3, [pc, #476]	; (8004648 <MX_LWIP_Init+0x260>)
 800446c:	789b      	ldrb	r3, [r3, #2]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	430b      	orrs	r3, r1
 8004472:	4975      	ldr	r1, [pc, #468]	; (8004648 <MX_LWIP_Init+0x260>)
 8004474:	78c9      	ldrb	r1, [r1, #3]
 8004476:	430b      	orrs	r3, r1
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800447e:	431a      	orrs	r2, r3
 8004480:	4b71      	ldr	r3, [pc, #452]	; (8004648 <MX_LWIP_Init+0x260>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	0619      	lsls	r1, r3, #24
 8004486:	4b70      	ldr	r3, [pc, #448]	; (8004648 <MX_LWIP_Init+0x260>)
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	4319      	orrs	r1, r3
 800448e:	4b6e      	ldr	r3, [pc, #440]	; (8004648 <MX_LWIP_Init+0x260>)
 8004490:	789b      	ldrb	r3, [r3, #2]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	430b      	orrs	r3, r1
 8004496:	496c      	ldr	r1, [pc, #432]	; (8004648 <MX_LWIP_Init+0x260>)
 8004498:	78c9      	ldrb	r1, [r1, #3]
 800449a:	430b      	orrs	r3, r1
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044a2:	431a      	orrs	r2, r3
 80044a4:	4b68      	ldr	r3, [pc, #416]	; (8004648 <MX_LWIP_Init+0x260>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	0619      	lsls	r1, r3, #24
 80044aa:	4b67      	ldr	r3, [pc, #412]	; (8004648 <MX_LWIP_Init+0x260>)
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	4319      	orrs	r1, r3
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <MX_LWIP_Init+0x260>)
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	430b      	orrs	r3, r1
 80044ba:	4963      	ldr	r1, [pc, #396]	; (8004648 <MX_LWIP_Init+0x260>)
 80044bc:	78c9      	ldrb	r1, [r1, #3]
 80044be:	430b      	orrs	r3, r1
 80044c0:	0e1b      	lsrs	r3, r3, #24
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a63      	ldr	r2, [pc, #396]	; (8004654 <MX_LWIP_Init+0x26c>)
 80044c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80044c8:	4b60      	ldr	r3, [pc, #384]	; (800464c <MX_LWIP_Init+0x264>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	061a      	lsls	r2, r3, #24
 80044ce:	4b5f      	ldr	r3, [pc, #380]	; (800464c <MX_LWIP_Init+0x264>)
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	4b5d      	ldr	r3, [pc, #372]	; (800464c <MX_LWIP_Init+0x264>)
 80044d8:	789b      	ldrb	r3, [r3, #2]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	4313      	orrs	r3, r2
 80044de:	4a5b      	ldr	r2, [pc, #364]	; (800464c <MX_LWIP_Init+0x264>)
 80044e0:	78d2      	ldrb	r2, [r2, #3]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	061a      	lsls	r2, r3, #24
 80044e6:	4b59      	ldr	r3, [pc, #356]	; (800464c <MX_LWIP_Init+0x264>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	0619      	lsls	r1, r3, #24
 80044ec:	4b57      	ldr	r3, [pc, #348]	; (800464c <MX_LWIP_Init+0x264>)
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	4319      	orrs	r1, r3
 80044f4:	4b55      	ldr	r3, [pc, #340]	; (800464c <MX_LWIP_Init+0x264>)
 80044f6:	789b      	ldrb	r3, [r3, #2]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	430b      	orrs	r3, r1
 80044fc:	4953      	ldr	r1, [pc, #332]	; (800464c <MX_LWIP_Init+0x264>)
 80044fe:	78c9      	ldrb	r1, [r1, #3]
 8004500:	430b      	orrs	r3, r1
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004508:	431a      	orrs	r2, r3
 800450a:	4b50      	ldr	r3, [pc, #320]	; (800464c <MX_LWIP_Init+0x264>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	0619      	lsls	r1, r3, #24
 8004510:	4b4e      	ldr	r3, [pc, #312]	; (800464c <MX_LWIP_Init+0x264>)
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	4319      	orrs	r1, r3
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <MX_LWIP_Init+0x264>)
 800451a:	789b      	ldrb	r3, [r3, #2]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	430b      	orrs	r3, r1
 8004520:	494a      	ldr	r1, [pc, #296]	; (800464c <MX_LWIP_Init+0x264>)
 8004522:	78c9      	ldrb	r1, [r1, #3]
 8004524:	430b      	orrs	r3, r1
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800452c:	431a      	orrs	r2, r3
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <MX_LWIP_Init+0x264>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	0619      	lsls	r1, r3, #24
 8004534:	4b45      	ldr	r3, [pc, #276]	; (800464c <MX_LWIP_Init+0x264>)
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	4319      	orrs	r1, r3
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <MX_LWIP_Init+0x264>)
 800453e:	789b      	ldrb	r3, [r3, #2]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	430b      	orrs	r3, r1
 8004544:	4941      	ldr	r1, [pc, #260]	; (800464c <MX_LWIP_Init+0x264>)
 8004546:	78c9      	ldrb	r1, [r1, #3]
 8004548:	430b      	orrs	r3, r1
 800454a:	0e1b      	lsrs	r3, r3, #24
 800454c:	4313      	orrs	r3, r2
 800454e:	4a42      	ldr	r2, [pc, #264]	; (8004658 <MX_LWIP_Init+0x270>)
 8004550:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004552:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <MX_LWIP_Init+0x268>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	061a      	lsls	r2, r3, #24
 8004558:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <MX_LWIP_Init+0x268>)
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <MX_LWIP_Init+0x268>)
 8004562:	789b      	ldrb	r3, [r3, #2]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4313      	orrs	r3, r2
 8004568:	4a39      	ldr	r2, [pc, #228]	; (8004650 <MX_LWIP_Init+0x268>)
 800456a:	78d2      	ldrb	r2, [r2, #3]
 800456c:	4313      	orrs	r3, r2
 800456e:	061a      	lsls	r2, r3, #24
 8004570:	4b37      	ldr	r3, [pc, #220]	; (8004650 <MX_LWIP_Init+0x268>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	0619      	lsls	r1, r3, #24
 8004576:	4b36      	ldr	r3, [pc, #216]	; (8004650 <MX_LWIP_Init+0x268>)
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	4319      	orrs	r1, r3
 800457e:	4b34      	ldr	r3, [pc, #208]	; (8004650 <MX_LWIP_Init+0x268>)
 8004580:	789b      	ldrb	r3, [r3, #2]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	430b      	orrs	r3, r1
 8004586:	4932      	ldr	r1, [pc, #200]	; (8004650 <MX_LWIP_Init+0x268>)
 8004588:	78c9      	ldrb	r1, [r1, #3]
 800458a:	430b      	orrs	r3, r1
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004592:	431a      	orrs	r2, r3
 8004594:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <MX_LWIP_Init+0x268>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	0619      	lsls	r1, r3, #24
 800459a:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <MX_LWIP_Init+0x268>)
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	4319      	orrs	r1, r3
 80045a2:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <MX_LWIP_Init+0x268>)
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	430b      	orrs	r3, r1
 80045aa:	4929      	ldr	r1, [pc, #164]	; (8004650 <MX_LWIP_Init+0x268>)
 80045ac:	78c9      	ldrb	r1, [r1, #3]
 80045ae:	430b      	orrs	r3, r1
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045b6:	431a      	orrs	r2, r3
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <MX_LWIP_Init+0x268>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	0619      	lsls	r1, r3, #24
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <MX_LWIP_Init+0x268>)
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	4319      	orrs	r1, r3
 80045c6:	4b22      	ldr	r3, [pc, #136]	; (8004650 <MX_LWIP_Init+0x268>)
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	430b      	orrs	r3, r1
 80045ce:	4920      	ldr	r1, [pc, #128]	; (8004650 <MX_LWIP_Init+0x268>)
 80045d0:	78c9      	ldrb	r1, [r1, #3]
 80045d2:	430b      	orrs	r3, r1
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	4313      	orrs	r3, r2
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <MX_LWIP_Init+0x274>)
 80045da:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80045dc:	4b20      	ldr	r3, [pc, #128]	; (8004660 <MX_LWIP_Init+0x278>)
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <MX_LWIP_Init+0x27c>)
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <MX_LWIP_Init+0x274>)
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <MX_LWIP_Init+0x270>)
 80045ec:	4919      	ldr	r1, [pc, #100]	; (8004654 <MX_LWIP_Init+0x26c>)
 80045ee:	481e      	ldr	r0, [pc, #120]	; (8004668 <MX_LWIP_Init+0x280>)
 80045f0:	f006 ff76 	bl	800b4e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80045f4:	481c      	ldr	r0, [pc, #112]	; (8004668 <MX_LWIP_Init+0x280>)
 80045f6:	f007 f925 	bl	800b844 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <MX_LWIP_Init+0x280>)
 80045fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800460c:	4816      	ldr	r0, [pc, #88]	; (8004668 <MX_LWIP_Init+0x280>)
 800460e:	f007 f929 	bl	800b864 <netif_set_up>
 8004612:	e002      	b.n	800461a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004614:	4814      	ldr	r0, [pc, #80]	; (8004668 <MX_LWIP_Init+0x280>)
 8004616:	f007 f991 	bl	800b93c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800461a:	4914      	ldr	r1, [pc, #80]	; (800466c <MX_LWIP_Init+0x284>)
 800461c:	4812      	ldr	r0, [pc, #72]	; (8004668 <MX_LWIP_Init+0x280>)
 800461e:	f007 fa23 	bl	800ba68 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <MX_LWIP_Init+0x288>)
 8004624:	1d3c      	adds	r4, r7, #4
 8004626:	461d      	mov	r5, r3
 8004628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800462c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	490c      	ldr	r1, [pc, #48]	; (8004668 <MX_LWIP_Init+0x280>)
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fd25 	bl	8005088 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800463e:	bf00      	nop
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}
 8004646:	bf00      	nop
 8004648:	200006d4 	.word	0x200006d4
 800464c:	200006d8 	.word	0x200006d8
 8004650:	200006dc 	.word	0x200006dc
 8004654:	200006c8 	.word	0x200006c8
 8004658:	200006cc 	.word	0x200006cc
 800465c:	200006d0 	.word	0x200006d0
 8004660:	0800a85d 	.word	0x0800a85d
 8004664:	08004b11 	.word	0x08004b11
 8004668:	20000694 	.word	0x20000694
 800466c:	08004675 	.word	0x08004675
 8004670:	080177e8 	.word	0x080177e8

08004674 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fe73 	bl	8005380 <osSemaphoreRelease>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200051ac 	.word	0x200051ac

080046a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fe63 	bl	8005380 <osSemaphoreRelease>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200051b0 	.word	0x200051b0

080046c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fd fdc7 	bl	8002264 <HAL_ETH_GetDMAError>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d104      	bne.n	80046ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_ETH_ErrorCallback+0x2c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fe4b 	bl	8005380 <osSemaphoreRelease>
  }
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200051ac 	.word	0x200051ac

080046f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	b0a8      	sub	sp, #160	; 0xa0
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004716:	2264      	movs	r2, #100	; 0x64
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f011 ff94 	bl	8016648 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004720:	4b84      	ldr	r3, [pc, #528]	; (8004934 <low_level_init+0x23c>)
 8004722:	4a85      	ldr	r2, [pc, #532]	; (8004938 <low_level_init+0x240>)
 8004724:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004732:	23e1      	movs	r3, #225	; 0xe1
 8004734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800474a:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <low_level_init+0x23c>)
 800474c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004750:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8004752:	4b78      	ldr	r3, [pc, #480]	; (8004934 <low_level_init+0x23c>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <low_level_init+0x23c>)
 800475a:	4a78      	ldr	r2, [pc, #480]	; (800493c <low_level_init+0x244>)
 800475c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800475e:	4b75      	ldr	r3, [pc, #468]	; (8004934 <low_level_init+0x23c>)
 8004760:	4a77      	ldr	r2, [pc, #476]	; (8004940 <low_level_init+0x248>)
 8004762:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004764:	4b73      	ldr	r3, [pc, #460]	; (8004934 <low_level_init+0x23c>)
 8004766:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800476a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800476c:	4871      	ldr	r0, [pc, #452]	; (8004934 <low_level_init+0x23c>)
 800476e:	f7fc fedb 	bl	8001528 <HAL_ETH_Init>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004778:	2238      	movs	r2, #56	; 0x38
 800477a:	2100      	movs	r1, #0
 800477c:	4871      	ldr	r0, [pc, #452]	; (8004944 <low_level_init+0x24c>)
 800477e:	f011 ff63 	bl	8016648 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004782:	4b70      	ldr	r3, [pc, #448]	; (8004944 <low_level_init+0x24c>)
 8004784:	2221      	movs	r2, #33	; 0x21
 8004786:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004788:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <low_level_init+0x24c>)
 800478a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800478e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004790:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <low_level_init+0x24c>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004796:	486c      	ldr	r0, [pc, #432]	; (8004948 <low_level_init+0x250>)
 8004798:	f006 fd5c 	bl	800b254 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2206      	movs	r2, #6
 80047a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80047a4:	4b63      	ldr	r3, [pc, #396]	; (8004934 <low_level_init+0x23c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80047b0:	4b60      	ldr	r3, [pc, #384]	; (8004934 <low_level_init+0x23c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	785a      	ldrb	r2, [r3, #1]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047bc:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <low_level_init+0x23c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	789a      	ldrb	r2, [r3, #2]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <low_level_init+0x23c>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	78da      	ldrb	r2, [r3, #3]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047d4:	4b57      	ldr	r3, [pc, #348]	; (8004934 <low_level_init+0x23c>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	791a      	ldrb	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047e0:	4b54      	ldr	r3, [pc, #336]	; (8004934 <low_level_init+0x23c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	795a      	ldrb	r2, [r3, #5]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047f2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047fa:	f043 030a 	orr.w	r3, r3, #10
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004806:	2203      	movs	r2, #3
 8004808:	2100      	movs	r1, #0
 800480a:	2001      	movs	r0, #1
 800480c:	f001 f89c 	bl	8005948 <xQueueGenericCreate>
 8004810:	4603      	mov	r3, r0
 8004812:	4a4e      	ldr	r2, [pc, #312]	; (800494c <low_level_init+0x254>)
 8004814:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004816:	2203      	movs	r2, #3
 8004818:	2100      	movs	r1, #0
 800481a:	2001      	movs	r0, #1
 800481c:	f001 f894 	bl	8005948 <xQueueGenericCreate>
 8004820:	4603      	mov	r3, r0
 8004822:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <low_level_init+0x258>)
 8004824:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004826:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <low_level_init+0x25c>)
 8004828:	f107 0408 	add.w	r4, r7, #8
 800482c:	461d      	mov	r5, r3
 800482e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fc21 	bl	8005088 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004846:	4944      	ldr	r1, [pc, #272]	; (8004958 <low_level_init+0x260>)
 8004848:	4844      	ldr	r0, [pc, #272]	; (800495c <low_level_init+0x264>)
 800484a:	f7fc fbc4 	bl	8000fd6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800484e:	4843      	ldr	r0, [pc, #268]	; (800495c <low_level_init+0x264>)
 8004850:	f7fc fbf3 	bl	800103a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004854:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004858:	2b00      	cmp	r3, #0
 800485a:	d164      	bne.n	8004926 <low_level_init+0x22e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800485c:	483f      	ldr	r0, [pc, #252]	; (800495c <low_level_init+0x264>)
 800485e:	f7fc fc94 	bl	800118a <DP83848_GetLinkState>
 8004862:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8004866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800486a:	2b01      	cmp	r3, #1
 800486c:	dc06      	bgt.n	800487c <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f007 f8ca 	bl	800ba08 <netif_set_link_down>
      netif_set_down(netif);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f007 f861 	bl	800b93c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800487a:	e056      	b.n	800492a <low_level_init+0x232>
      switch (PHYLinkState)
 800487c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004880:	3b02      	subs	r3, #2
 8004882:	2b03      	cmp	r3, #3
 8004884:	d82a      	bhi.n	80048dc <low_level_init+0x1e4>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <low_level_init+0x194>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048af 	.word	0x080048af
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
        duplex = ETH_FULLDUPLEX_MODE;
 800489c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048ac:	e01f      	b.n	80048ee <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048bc:	e017      	b.n	80048ee <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80048be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048cc:	e00f      	b.n	80048ee <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048da:	e008      	b.n	80048ee <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80048dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048ec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80048ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f2:	4619      	mov	r1, r3
 80048f4:	480f      	ldr	r0, [pc, #60]	; (8004934 <low_level_init+0x23c>)
 80048f6:	f7fd fb5b 	bl	8001fb0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80048fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004904:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800490a:	4619      	mov	r1, r3
 800490c:	4809      	ldr	r0, [pc, #36]	; (8004934 <low_level_init+0x23c>)
 800490e:	f7fd fc39 	bl	8002184 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004912:	4808      	ldr	r0, [pc, #32]	; (8004934 <low_level_init+0x23c>)
 8004914:	f7fc fee5 	bl	80016e2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f006 ffa3 	bl	800b864 <netif_set_up>
    netif_set_link_up(netif);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f007 f83e 	bl	800b9a0 <netif_set_link_up>
}
 8004924:	e001      	b.n	800492a <low_level_init+0x232>
    Error_Handler();
 8004926:	f7fc f809 	bl	800093c <Error_Handler>
}
 800492a:	bf00      	nop
 800492c:	37a0      	adds	r7, #160	; 0xa0
 800492e:	46bd      	mov	sp, r7
 8004930:	bdb0      	pop	{r4, r5, r7, pc}
 8004932:	bf00      	nop
 8004934:	200051b4 	.word	0x200051b4
 8004938:	40028000 	.word	0x40028000
 800493c:	2000510c 	.word	0x2000510c
 8004940:	2000506c 	.word	0x2000506c
 8004944:	20005264 	.word	0x20005264
 8004948:	0801b1ac 	.word	0x0801b1ac
 800494c:	200051ac 	.word	0x200051ac
 8004950:	200051b0 	.word	0x200051b0
 8004954:	0801780c 	.word	0x0801780c
 8004958:	2000000c 	.word	0x2000000c
 800495c:	2000529c 	.word	0x2000529c

08004960 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b092      	sub	sp, #72	; 0x48
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004978:	f107 030c 	add.w	r3, r7, #12
 800497c:	2230      	movs	r2, #48	; 0x30
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f011 fe61 	bl	8016648 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004986:	f107 030c 	add.w	r3, r7, #12
 800498a:	2230      	movs	r2, #48	; 0x30
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f011 fe5a 	bl	8016648 <memset>

  for(q = p; q != NULL; q = q->next)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
 8004998:	e045      	b.n	8004a26 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800499a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499c:	2b03      	cmp	r3, #3
 800499e:	d902      	bls.n	80049a6 <low_level_output+0x46>
      return ERR_IF;
 80049a0:	f06f 030b 	mvn.w	r3, #11
 80049a4:	e065      	b.n	8004a72 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80049a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	3348      	adds	r3, #72	; 0x48
 80049b6:	443b      	add	r3, r7
 80049b8:	3b3c      	subs	r3, #60	; 0x3c
 80049ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80049bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049be:	895b      	ldrh	r3, [r3, #10]
 80049c0:	4619      	mov	r1, r3
 80049c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	3348      	adds	r3, #72	; 0x48
 80049ce:	443b      	add	r3, r7
 80049d0:	3b38      	subs	r3, #56	; 0x38
 80049d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80049d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80049da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	f107 000c 	add.w	r0, r7, #12
 80049e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049e4:	460b      	mov	r3, r1
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	440b      	add	r3, r1
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	18c1      	adds	r1, r0, r3
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	3348      	adds	r3, #72	; 0x48
 80049f8:	443b      	add	r3, r7
 80049fa:	3b34      	subs	r3, #52	; 0x34
 80049fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80049fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	3348      	adds	r3, #72	; 0x48
 8004a12:	443b      	add	r3, r7
 8004a14:	3b34      	subs	r3, #52	; 0x34
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1b6      	bne.n	800499a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	891b      	ldrh	r3, [r3, #8]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <low_level_output+0x11c>)
 8004a34:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004a36:	4a11      	ldr	r2, [pc, #68]	; (8004a7c <low_level_output+0x11c>)
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004a3e:	4a0f      	ldr	r2, [pc, #60]	; (8004a7c <low_level_output+0x11c>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f007 fc63 	bl	800c310 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004a4a:	490c      	ldr	r1, [pc, #48]	; (8004a7c <low_level_output+0x11c>)
 8004a4c:	480c      	ldr	r0, [pc, #48]	; (8004a80 <low_level_output+0x120>)
 8004a4e:	f7fc ff55 	bl	80018fc <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004a52:	bf00      	nop
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <low_level_output+0x124>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f04f 31ff 	mov.w	r1, #4294967295
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fc41 	bl	80052e4 <osSemaphoreWait>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f5      	bne.n	8004a54 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004a68:	4805      	ldr	r0, [pc, #20]	; (8004a80 <low_level_output+0x120>)
 8004a6a:	f7fd f8db 	bl	8001c24 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004a6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3748      	adds	r7, #72	; 0x48
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20005264 	.word	0x20005264
 8004a80:	200051b4 	.word	0x200051b4
 8004a84:	200051b0 	.word	0x200051b0

08004a88 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <low_level_input+0x2c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <low_level_input+0x30>)
 8004aa4:	f7fc ff86 	bl	80019b4 <HAL_ETH_ReadData>
  }

  return p;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20005068 	.word	0x20005068
 8004ab8:	200051b4 	.word	0x200051b4

08004abc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <ethernetif_input+0x50>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fc05 	bl	80052e4 <osSemaphoreWait>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f5      	bne.n	8004acc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f7ff ffd1 	bl	8004a88 <low_level_input>
 8004ae6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	4798      	blx	r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f007 fb60 	bl	800c1c4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ea      	bne.n	8004ae0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b0a:	e7df      	b.n	8004acc <ethernetif_input+0x10>
 8004b0c:	200051ac 	.word	0x200051ac

08004b10 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <ethernetif_init+0x1c>
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <ethernetif_init+0x48>)
 8004b20:	f240 12df 	movw	r2, #479	; 0x1df
 8004b24:	490d      	ldr	r1, [pc, #52]	; (8004b5c <ethernetif_init+0x4c>)
 8004b26:	480e      	ldr	r0, [pc, #56]	; (8004b60 <ethernetif_init+0x50>)
 8004b28:	f011 fbfe 	bl	8016328 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2273      	movs	r2, #115	; 0x73
 8004b30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2274      	movs	r2, #116	; 0x74
 8004b38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <ethernetif_init+0x54>)
 8004b40:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <ethernetif_init+0x58>)
 8004b46:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fdd5 	bl	80046f8 <low_level_init>

  return ERR_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08017828 	.word	0x08017828
 8004b5c:	08017844 	.word	0x08017844
 8004b60:	08017854 	.word	0x08017854
 8004b64:	08013e1d 	.word	0x08013e1d
 8004b68:	08004961 	.word	0x08004961

08004b6c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	4809      	ldr	r0, [pc, #36]	; (8004ba0 <pbuf_free_custom+0x34>)
 8004b7c:	f006 fc5a 	bl	800b434 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004b80:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <pbuf_free_custom+0x38>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <pbuf_free_custom+0x38>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <pbuf_free_custom+0x3c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fbf4 	bl	8005380 <osSemaphoreRelease>
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	0801b1ac 	.word	0x0801b1ac
 8004ba4:	20005068 	.word	0x20005068
 8004ba8:	200051ac 	.word	0x200051ac

08004bac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bb0:	f7fc fba8 	bl	8001304 <HAL_GetTick>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a59      	ldr	r2, [pc, #356]	; (8004d40 <HAL_ETH_MspInit+0x184>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	f040 80ab 	bne.w	8004d36 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004be0:	2300      	movs	r3, #0
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	4b57      	ldr	r3, [pc, #348]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	4a56      	ldr	r2, [pc, #344]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bee:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf0:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4a4f      	ldr	r2, [pc, #316]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0c:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	4b49      	ldr	r3, [pc, #292]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	4a48      	ldr	r2, [pc, #288]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c26:	6313      	str	r3, [r2, #48]	; 0x30
 8004c28:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c3e:	f043 0310 	orr.w	r3, r3, #16
 8004c42:	6313      	str	r3, [r2, #48]	; 0x30
 8004c44:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c60:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4a33      	ldr	r2, [pc, #204]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7c:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c92:	f043 0302 	orr.w	r3, r3, #2
 8004c96:	6313      	str	r3, [r2, #48]	; 0x30
 8004c98:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_ETH_MspInit+0x188>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cb4:	230b      	movs	r3, #11
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4822      	ldr	r0, [pc, #136]	; (8004d48 <HAL_ETH_MspInit+0x18c>)
 8004cc0:	f7fd fee2 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004cc4:	233e      	movs	r3, #62	; 0x3e
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cd4:	230b      	movs	r3, #11
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	481b      	ldr	r0, [pc, #108]	; (8004d4c <HAL_ETH_MspInit+0x190>)
 8004ce0:	f7fd fed2 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004ce4:	238f      	movs	r3, #143	; 0x8f
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cf4:	230b      	movs	r3, #11
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4814      	ldr	r0, [pc, #80]	; (8004d50 <HAL_ETH_MspInit+0x194>)
 8004d00:	f7fd fec2 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8004d04:	f643 0303 	movw	r3, #14339	; 0x3803
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d12:	2303      	movs	r3, #3
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d16:	230b      	movs	r3, #11
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d1e:	4619      	mov	r1, r3
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <HAL_ETH_MspInit+0x198>)
 8004d22:	f7fd feb1 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2105      	movs	r1, #5
 8004d2a:	203d      	movs	r0, #61	; 0x3d
 8004d2c:	f7fc fbd2 	bl	80014d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004d30:	203d      	movs	r0, #61	; 0x3d
 8004d32:	f7fc fbeb 	bl	800150c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d36:	bf00      	nop
 8004d38:	3738      	adds	r7, #56	; 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40028000 	.word	0x40028000
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40020800 	.word	0x40020800
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020400 	.word	0x40020400

08004d58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004d5c:	4802      	ldr	r0, [pc, #8]	; (8004d68 <ETH_PHY_IO_Init+0x10>)
 8004d5e:	f7fd fa2b 	bl	80021b8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200051b4 	.word	0x200051b4

08004d6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return 0;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <ETH_PHY_IO_ReadReg+0x30>)
 8004d90:	f7fd f87a 	bl	8001e88 <HAL_ETH_ReadPHYRegister>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	e000      	b.n	8004da2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200051b4 	.word	0x200051b4

08004db0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	4807      	ldr	r0, [pc, #28]	; (8004de0 <ETH_PHY_IO_WriteReg+0x30>)
 8004dc4:	f7fd f8ab 	bl	8001f1e <HAL_ETH_WritePHYRegister>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e000      	b.n	8004dd6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200051b4 	.word	0x200051b4

08004de4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004de8:	f7fc fa8c 	bl	8001304 <HAL_GetTick>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b0a0      	sub	sp, #128	; 0x80
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004dfc:	f107 0308 	add.w	r3, r7, #8
 8004e00:	2264      	movs	r2, #100	; 0x64
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f011 fc1f 	bl	8016648 <memset>
  int32_t PHYLinkState = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e12:	2300      	movs	r3, #0
 8004e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e16:	2300      	movs	r3, #0
 8004e18:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004e1e:	483a      	ldr	r0, [pc, #232]	; (8004f08 <ethernet_link_thread+0x114>)
 8004e20:	f7fc f9b3 	bl	800118a <DP83848_GetLinkState>
 8004e24:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00c      	beq.n	8004e52 <ethernet_link_thread+0x5e>
 8004e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	dc09      	bgt.n	8004e52 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004e3e:	4833      	ldr	r0, [pc, #204]	; (8004f0c <ethernet_link_thread+0x118>)
 8004e40:	f7fc fcdd 	bl	80017fe <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004e44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e46:	f006 fd79 	bl	800b93c <netif_set_down>
    netif_set_link_down(netif);
 8004e4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e4c:	f006 fddc 	bl	800ba08 <netif_set_link_down>
 8004e50:	e055      	b.n	8004efe <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d14e      	bne.n	8004efe <ethernet_link_thread+0x10a>
 8004e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	dd4b      	ble.n	8004efe <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e68:	3b02      	subs	r3, #2
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d82a      	bhi.n	8004ec4 <ethernet_link_thread+0xd0>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <ethernet_link_thread+0x80>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e90:	2301      	movs	r3, #1
 8004e92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e94:	e017      	b.n	8004ec6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ea4:	e00f      	b.n	8004ec6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eaa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004eac:	2300      	movs	r3, #0
 8004eae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004eb4:	e007      	b.n	8004ec6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ec2:	e000      	b.n	8004ec6 <ethernet_link_thread+0xd2>
    default:
      break;
 8004ec4:	bf00      	nop
    }

    if(linkchanged)
 8004ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d018      	beq.n	8004efe <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480e      	ldr	r0, [pc, #56]	; (8004f0c <ethernet_link_thread+0x118>)
 8004ed4:	f7fd f86c 	bl	8001fb0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ede:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4809      	ldr	r0, [pc, #36]	; (8004f0c <ethernet_link_thread+0x118>)
 8004ee8:	f7fd f94c 	bl	8002184 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004eec:	4807      	ldr	r0, [pc, #28]	; (8004f0c <ethernet_link_thread+0x118>)
 8004eee:	f7fc fb99 	bl	8001624 <HAL_ETH_Start>
      netif_set_up(netif);
 8004ef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ef4:	f006 fcb6 	bl	800b864 <netif_set_up>
      netif_set_link_up(netif);
 8004ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004efa:	f006 fd51 	bl	800b9a0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004efe:	2064      	movs	r0, #100	; 0x64
 8004f00:	f000 f90e 	bl	8005120 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004f04:	e78b      	b.n	8004e1e <ethernet_link_thread+0x2a>
 8004f06:	bf00      	nop
 8004f08:	2000529c 	.word	0x2000529c
 8004f0c:	200051b4 	.word	0x200051b4

08004f10 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f18:	4812      	ldr	r0, [pc, #72]	; (8004f64 <HAL_ETH_RxAllocateCallback+0x54>)
 8004f1a:	f006 fa17 	bl	800b34c <memp_malloc_pool>
 8004f1e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f103 0220 	add.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <HAL_ETH_RxAllocateCallback+0x58>)
 8004f34:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f3e:	9201      	str	r2, [sp, #4]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2241      	movs	r2, #65	; 0x41
 8004f46:	2100      	movs	r1, #0
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f006 ff81 	bl	800be50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004f4e:	e005      	b.n	8004f5c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	0801b1ac 	.word	0x0801b1ac
 8004f68:	08004b6d 	.word	0x08004b6d
 8004f6c:	20005068 	.word	0x20005068

08004f70 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3b20      	subs	r3, #32
 8004f8e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e003      	b.n	8004fba <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	e009      	b.n	8004fdc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	891a      	ldrh	r2, [r3, #8]
 8004fcc:	887b      	ldrh	r3, [r7, #2]
 8004fce:	4413      	add	r3, r2
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f2      	bne.n	8004fc8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	3724      	adds	r7, #36	; 0x24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f007 f8e3 	bl	800c1c4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	4603      	mov	r3, r0
 800500e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005018:	2b84      	cmp	r3, #132	; 0x84
 800501a:	d005      	beq.n	8005028 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800501c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	3303      	adds	r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503c:	f3ef 8305 	mrs	r3, IPSR
 8005040:	607b      	str	r3, [r7, #4]
  return(result);
 8005042:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800505e:	f001 fd3b 	bl	8006ad8 <vTaskStartScheduler>
  
  return osOK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}

08005068 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800506c:	f7ff ffe3 	bl	8005036 <inHandlerMode>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005076:	f001 fe53 	bl	8006d20 <xTaskGetTickCountFromISR>
 800507a:	4603      	mov	r3, r0
 800507c:	e002      	b.n	8005084 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800507e:	f001 fe3f 	bl	8006d00 <xTaskGetTickCount>
 8005082:	4603      	mov	r3, r0
  }
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}

08005088 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af04      	add	r7, sp, #16
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <osThreadCreate+0x54>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01c      	beq.n	80050dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685c      	ldr	r4, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691e      	ldr	r6, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff ffa6 	bl	8005006 <makeFreeRtosPriority>
 80050ba:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c4:	9202      	str	r2, [sp, #8]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	9100      	str	r1, [sp, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4632      	mov	r2, r6
 80050ce:	4629      	mov	r1, r5
 80050d0:	4620      	mov	r0, r4
 80050d2:	f001 fb23 	bl	800671c <xTaskCreateStatic>
 80050d6:	4603      	mov	r3, r0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e01c      	b.n	8005116 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685c      	ldr	r4, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050e8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff88 	bl	8005006 <makeFreeRtosPriority>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	9200      	str	r2, [sp, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	4632      	mov	r2, r6
 8005104:	4629      	mov	r1, r5
 8005106:	4620      	mov	r0, r4
 8005108:	f001 fb65 	bl	80067d6 <xTaskCreate>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005120 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <osDelay+0x16>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	e000      	b.n	8005138 <osDelay+0x18>
 8005136:	2301      	movs	r3, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fc99 	bl	8006a70 <vTaskDelay>
  
  return osOK;
 800513e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4619      	mov	r1, r3
 800515e:	2001      	movs	r0, #1
 8005160:	f000 fc7d 	bl	8005a5e <xQueueCreateMutexStatic>
 8005164:	4603      	mov	r3, r0
 8005166:	e003      	b.n	8005170 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005168:	2001      	movs	r0, #1
 800516a:	f000 fc60 	bl	8005a2e <xQueueCreateMutex>
 800516e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <osMutexWait+0x18>
    return osErrorParameter;
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	e03a      	b.n	8005206 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d103      	bne.n	80051a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e009      	b.n	80051b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <osMutexWait+0x40>
      ticks = 1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80051b8:	f7ff ff3d 	bl	8005036 <inHandlerMode>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	461a      	mov	r2, r3
 80051c8:	2100      	movs	r1, #0
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 f874 	bl	80062b8 <xQueueReceiveFromISR>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d001      	beq.n	80051da <osMutexWait+0x62>
      return osErrorOS;
 80051d6:	23ff      	movs	r3, #255	; 0xff
 80051d8:	e015      	b.n	8005206 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d011      	beq.n	8005204 <osMutexWait+0x8c>
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <osMutexWait+0x98>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	e008      	b.n	8005204 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 ff53 	bl	80060a0 <xQueueSemaphoreTake>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d001      	beq.n	8005204 <osMutexWait+0x8c>
    return osErrorOS;
 8005200:	23ff      	movs	r3, #255	; 0xff
 8005202:	e000      	b.n	8005206 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005224:	f7ff ff07 	bl	8005036 <inHandlerMode>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fdc6 	bl	8005dc6 <xQueueGiveFromISR>
 800523a:	4603      	mov	r3, r0
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <osMutexRelease+0x30>
      return osErrorOS;
 8005240:	23ff      	movs	r3, #255	; 0xff
 8005242:	e017      	b.n	8005274 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d013      	beq.n	8005272 <osMutexRelease+0x5e>
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <osMutexRelease+0x68>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	e00a      	b.n	8005272 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800525c:	2300      	movs	r3, #0
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fc16 	bl	8005a94 <xQueueGenericSend>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800526e:	23ff      	movs	r3, #255	; 0xff
 8005270:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00f      	beq.n	80052b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10a      	bne.n	80052ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	9200      	str	r2, [sp, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2100      	movs	r1, #0
 80052a4:	2001      	movs	r0, #1
 80052a6:	f000 fad7 	bl	8005858 <xQueueGenericCreateStatic>
 80052aa:	4603      	mov	r3, r0
 80052ac:	e016      	b.n	80052dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e014      	b.n	80052dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d110      	bne.n	80052da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80052b8:	2203      	movs	r2, #3
 80052ba:	2100      	movs	r1, #0
 80052bc:	2001      	movs	r0, #1
 80052be:	f000 fb43 	bl	8005948 <xQueueGenericCreate>
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <osSemaphoreCreate+0x56>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2200      	movs	r2, #0
 80052ce:	2100      	movs	r1, #0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fbdf 	bl	8005a94 <xQueueGenericSend>
      return sema;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	e000      	b.n	80052dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80052da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	e03a      	b.n	8005372 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d103      	bne.n	8005310 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e009      	b.n	8005324 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <osSemaphoreWait+0x40>
      ticks = 1;
 8005320:	2301      	movs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005324:	f7ff fe87 	bl	8005036 <inHandlerMode>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	461a      	mov	r2, r3
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 ffbe 	bl	80062b8 <xQueueReceiveFromISR>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d001      	beq.n	8005346 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005342:	23ff      	movs	r3, #255	; 0xff
 8005344:	e015      	b.n	8005372 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d011      	beq.n	8005370 <osSemaphoreWait+0x8c>
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <osSemaphoreWait+0x98>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	e008      	b.n	8005370 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fe9d 	bl	80060a0 <xQueueSemaphoreTake>
 8005366:	4603      	mov	r3, r0
 8005368:	2b01      	cmp	r3, #1
 800536a:	d001      	beq.n	8005370 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800536c:	23ff      	movs	r3, #255	; 0xff
 800536e:	e000      	b.n	8005372 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005390:	f7ff fe51 	bl	8005036 <inHandlerMode>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800539a:	f107 0308 	add.w	r3, r7, #8
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fd10 	bl	8005dc6 <xQueueGiveFromISR>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80053ac:	23ff      	movs	r3, #255	; 0xff
 80053ae:	e017      	b.n	80053e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <osSemaphoreRelease+0x5e>
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <osSemaphoreRelease+0x68>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	e00a      	b.n	80053de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80053c8:	2300      	movs	r3, #0
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb60 	bl	8005a94 <xQueueGenericSend>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80053da:	23ff      	movs	r3, #255	; 0xff
 80053dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80053f4:	f7ff fe1f 	bl	8005036 <inHandlerMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80053fe:	2382      	movs	r3, #130	; 0x82
 8005400:	e003      	b.n	800540a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f814 	bl	8006430 <vQueueDelete>

  return osOK; 
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005412:	b590      	push	{r4, r7, lr}
 8005414:	b085      	sub	sp, #20
 8005416:	af02      	add	r7, sp, #8
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d011      	beq.n	8005448 <osMessageCreate+0x36>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2400      	movs	r4, #0
 800543e:	9400      	str	r4, [sp, #0]
 8005440:	f000 fa0a 	bl	8005858 <xQueueGenericCreateStatic>
 8005444:	4603      	mov	r3, r0
 8005446:	e008      	b.n	800545a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	4619      	mov	r1, r3
 8005454:	f000 fa78 	bl	8005948 <xQueueGenericCreate>
 8005458:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}
	...

08005464 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <osMessagePut+0x1e>
    ticks = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005482:	f7ff fdd8 	bl	8005036 <inHandlerMode>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d018      	beq.n	80054be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800548c:	f107 0210 	add.w	r2, r7, #16
 8005490:	f107 0108 	add.w	r1, r7, #8
 8005494:	2300      	movs	r3, #0
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fbfa 	bl	8005c90 <xQueueGenericSendFromISR>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <osMessagePut+0x42>
      return osErrorOS;
 80054a2:	23ff      	movs	r3, #255	; 0xff
 80054a4:	e018      	b.n	80054d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d014      	beq.n	80054d6 <osMessagePut+0x72>
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <osMessagePut+0x7c>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	e00b      	b.n	80054d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80054be:	f107 0108 	add.w	r1, r7, #8
 80054c2:	2300      	movs	r3, #0
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fae4 	bl	8005a94 <xQueueGenericSend>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d001      	beq.n	80054d6 <osMessagePut+0x72>
      return osErrorOS;
 80054d2:	23ff      	movs	r3, #255	; 0xff
 80054d4:	e000      	b.n	80054d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b08b      	sub	sp, #44	; 0x2c
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	617b      	str	r3, [r7, #20]
    return event;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	461c      	mov	r4, r3
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800550e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005512:	e054      	b.n	80055be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d103      	bne.n	800552c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	e009      	b.n	8005540 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <osMessageGet+0x5c>
      ticks = 1;
 800553c:	2301      	movs	r3, #1
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005540:	f7ff fd79 	bl	8005036 <inHandlerMode>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01c      	beq.n	8005584 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800554a:	f107 0220 	add.w	r2, r7, #32
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	68b8      	ldr	r0, [r7, #8]
 8005558:	f000 feae 	bl	80062b8 <xQueueReceiveFromISR>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005562:	2310      	movs	r3, #16
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e001      	b.n	800556c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01d      	beq.n	80055ae <osMessageGet+0xca>
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <osMessageGet+0xe4>)
 8005574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	e014      	b.n	80055ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	3304      	adds	r3, #4
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	4619      	mov	r1, r3
 800558e:	68b8      	ldr	r0, [r7, #8]
 8005590:	f000 fca6 	bl	8005ee0 <xQueueReceive>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800559a:	2310      	movs	r3, #16
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e006      	b.n	80055ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <osMessageGet+0xc6>
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <osMessageGet+0xc8>
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	461c      	mov	r4, r3
 80055b2:	f107 0314 	add.w	r3, r7, #20
 80055b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	372c      	adds	r7, #44	; 0x2c
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80055d4:	f7ff fd2f 	bl	8005036 <inHandlerMode>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 ff08 	bl	80063f4 <uxQueueMessagesWaitingFromISR>
 80055e4:	4603      	mov	r3, r0
 80055e6:	e003      	b.n	80055f0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fee5 	bl	80063b8 <uxQueueMessagesWaiting>
 80055ee:	4603      	mov	r3, r0
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005600:	f7ff fd19 	bl	8005036 <inHandlerMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <osMessageDelete+0x16>
    return osErrorISR;
 800560a:	2382      	movs	r3, #130	; 0x82
 800560c:	e003      	b.n	8005616 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 ff0e 	bl	8006430 <vQueueDelete>

  return osOK; 
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f103 0208 	add.w	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 0208 	add.w	r2, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f103 0208 	add.w	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d103      	bne.n	80056e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e00c      	b.n	80056fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3308      	adds	r3, #8
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e002      	b.n	80056ee <vListInsert+0x2e>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d2f6      	bcs.n	80056e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6892      	ldr	r2, [r2, #8]
 8005748:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6852      	ldr	r2, [r2, #4]
 8005752:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d103      	bne.n	8005766 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	1e5a      	subs	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057b2:	f002 f917 	bl	80079e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	441a      	add	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	3b01      	subs	r3, #1
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	441a      	add	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d114      	bne.n	8005832 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3310      	adds	r3, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fbd3 	bl	8006fc0 <xTaskRemoveFromEventList>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d012      	beq.n	8005846 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <xQueueGenericReset+0xcc>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	e009      	b.n	8005846 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3310      	adds	r3, #16
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fef1 	bl	800561e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3324      	adds	r3, #36	; 0x24
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff feec 	bl	800561e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005846:	f002 f8fd 	bl	8007a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08e      	sub	sp, #56	; 0x38
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <xQueueGenericCreateStatic+0x52>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <xQueueGenericCreateStatic+0x56>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueGenericCreateStatic+0x58>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	623b      	str	r3, [r7, #32]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <xQueueGenericCreateStatic+0x7e>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <xQueueGenericCreateStatic+0x82>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericCreateStatic+0x84>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61fb      	str	r3, [r7, #28]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058f6:	2348      	movs	r3, #72	; 0x48
 80058f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b48      	cmp	r3, #72	; 0x48
 80058fe:	d00a      	beq.n	8005916 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	61bb      	str	r3, [r7, #24]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005916:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00d      	beq.n	800593e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800592a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f83f 	bl	80059bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005940:	4618      	mov	r0, r3
 8005942:	3730      	adds	r7, #48	; 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericCreate+0x2a>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	613b      	str	r3, [r7, #16]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3348      	adds	r3, #72	; 0x48
 8005980:	4618      	mov	r0, r3
 8005982:	f002 f951 	bl	8007c28 <pvPortMalloc>
 8005986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d011      	beq.n	80059b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3348      	adds	r3, #72	; 0x48
 8005996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f805 	bl	80059bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059b2:	69bb      	ldr	r3, [r7, #24]
	}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e002      	b.n	80059de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059ea:	2101      	movs	r1, #1
 80059ec:	69b8      	ldr	r0, [r7, #24]
 80059ee:	f7ff fecb 	bl	8005788 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2100      	movs	r1, #0
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f837 	bl	8005a94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	4603      	mov	r3, r0
 8005a36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6939      	ldr	r1, [r7, #16]
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff7e 	bl	8005948 <xQueueGenericCreate>
 8005a4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f7ff ffd3 	bl	80059fa <prvInitialiseMutex>

		return xNewQueue;
 8005a54:	68fb      	ldr	r3, [r7, #12]
	}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b088      	sub	sp, #32
 8005a62:	af02      	add	r7, sp, #8
 8005a64:	4603      	mov	r3, r0
 8005a66:	6039      	str	r1, [r7, #0]
 8005a68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	6939      	ldr	r1, [r7, #16]
 8005a7c:	6978      	ldr	r0, [r7, #20]
 8005a7e:	f7ff feeb 	bl	8005858 <xQueueGenericCreateStatic>
 8005a82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff ffb8 	bl	80059fa <prvInitialiseMutex>

		return xNewQueue;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
	}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08e      	sub	sp, #56	; 0x38
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <xQueueGenericSend+0x40>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <xQueueGenericSend+0x44>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <xQueueGenericSend+0x46>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xQueueGenericSend+0x60>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d103      	bne.n	8005b02 <xQueueGenericSend+0x6e>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <xQueueGenericSend+0x72>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericSend+0x74>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b22:	f001 fc0d 	bl	8007340 <xTaskGetSchedulerState>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <xQueueGenericSend+0x9e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSend+0xa2>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSend+0xa4>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	61fb      	str	r3, [r7, #28]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b52:	f001 ff47 	bl	80079e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <xQueueGenericSend+0xd4>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d129      	bne.n	8005bbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6e:	f000 fc9a 	bl	80064a6 <prvCopyDataToQueue>
 8005b72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	3324      	adds	r3, #36	; 0x24
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fa1d 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <xQueueGenericSend+0x1f8>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	e00a      	b.n	8005bb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <xQueueGenericSend+0x1f8>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bb4:	f001 ff46 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e063      	b.n	8005c84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc2:	f001 ff3f 	bl	8007a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e05c      	b.n	8005c84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fa55 	bl	8007084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bde:	f001 ff31 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be2:	f000 ffe3 	bl	8006bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005be6:	f001 fefd 	bl	80079e4 <vPortEnterCritical>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bf0:	b25b      	sxtb	r3, r3
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d103      	bne.n	8005c00 <xQueueGenericSend+0x16c>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c06:	b25b      	sxtb	r3, r3
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSend+0x182>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c16:	f001 ff15 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c1a:	1d3a      	adds	r2, r7, #4
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fa44 	bl	80070b0 <xTaskCheckForTimeOut>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d124      	bne.n	8005c78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c30:	f000 fd31 	bl	8006696 <prvIsQueueFull>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d018      	beq.n	8005c6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	3310      	adds	r3, #16
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 f998 	bl	8006f78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4a:	f000 fcbc 	bl	80065c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c4e:	f000 ffbb 	bl	8006bc8 <xTaskResumeAll>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f47f af7c 	bne.w	8005b52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <xQueueGenericSend+0x1f8>)
 8005c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	e772      	b.n	8005b52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c6e:	f000 fcaa 	bl	80065c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c72:	f000 ffa9 	bl	8006bc8 <xTaskResumeAll>
 8005c76:	e76c      	b.n	8005b52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fca4 	bl	80065c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c7e:	f000 ffa3 	bl	8006bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3738      	adds	r7, #56	; 0x38
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b090      	sub	sp, #64	; 0x40
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <xQueueGenericSendFromISR+0x3c>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x40>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <xQueueGenericSendFromISR+0x42>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericSendFromISR+0x6a>
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <xQueueGenericSendFromISR+0x6e>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueGenericSendFromISR+0x70>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	623b      	str	r3, [r7, #32]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d1a:	f001 ff45 	bl	8007ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	61fa      	str	r2, [r7, #28]
 8005d34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d302      	bcc.n	8005d4c <xQueueGenericSendFromISR+0xbc>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d12f      	bne.n	8005dac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d62:	f000 fba0 	bl	80064a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d112      	bne.n	8005d96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d016      	beq.n	8005da6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 f91f 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e007      	b.n	8005da6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	b25a      	sxtb	r2, r3
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005da6:	2301      	movs	r3, #1
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005daa:	e001      	b.n	8005db0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3740      	adds	r7, #64	; 0x40
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b08e      	sub	sp, #56	; 0x38
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	623b      	str	r3, [r7, #32]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	61fb      	str	r3, [r7, #28]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <xQueueGiveFromISR+0x58>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <xQueueGiveFromISR+0x5c>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueGiveFromISR+0x5e>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61bb      	str	r3, [r7, #24]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e3e:	f001 feb3 	bl	8007ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e42:	f3ef 8211 	mrs	r2, BASEPRI
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	617a      	str	r2, [r7, #20]
 8005e58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005e5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d22b      	bcs.n	8005ec6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d112      	bne.n	8005eb0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	3324      	adds	r3, #36	; 0x24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 f892 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e007      	b.n	8005ec0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	b25a      	sxtb	r2, r3
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec4:	e001      	b.n	8005eca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
}
 8005ed4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3738      	adds	r7, #56	; 0x38
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	; 0x30
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <xQueueReceive+0x30>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	623b      	str	r3, [r7, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <xQueueReceive+0x3e>
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <xQueueReceive+0x42>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueReceive+0x44>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xQueueReceive+0x5e>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61fb      	str	r3, [r7, #28]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f3e:	f001 f9ff 	bl	8007340 <xTaskGetSchedulerState>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xQueueReceive+0x6e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueReceive+0x72>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueReceive+0x74>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueReceive+0x8e>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61bb      	str	r3, [r7, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f6e:	f001 fd39 	bl	80079e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01f      	beq.n	8005fbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f82:	f000 fafa 	bl	800657a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00f      	beq.n	8005fb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	3310      	adds	r3, #16
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f810 	bl	8006fc0 <xTaskRemoveFromEventList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fa6:	4b3d      	ldr	r3, [pc, #244]	; (800609c <xQueueReceive+0x1bc>)
 8005fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fb6:	f001 fd45 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e069      	b.n	8006092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fc4:	f001 fd3e 	bl	8007a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e062      	b.n	8006092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd2:	f107 0310 	add.w	r3, r7, #16
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 f854 	bl	8007084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fe0:	f001 fd30 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fe4:	f000 fde2 	bl	8006bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fe8:	f001 fcfc 	bl	80079e4 <vPortEnterCritical>
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d103      	bne.n	8006002 <xQueueReceive+0x122>
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006008:	b25b      	sxtb	r3, r3
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d103      	bne.n	8006018 <xQueueReceive+0x138>
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006018:	f001 fd14 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800601c:	1d3a      	adds	r2, r7, #4
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	4611      	mov	r1, r2
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f843 	bl	80070b0 <xTaskCheckForTimeOut>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d123      	bne.n	8006078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006032:	f000 fb1a 	bl	800666a <prvIsQueueEmpty>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d017      	beq.n	800606c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	3324      	adds	r3, #36	; 0x24
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f000 ff97 	bl	8006f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800604a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604c:	f000 fabb 	bl	80065c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006050:	f000 fdba 	bl	8006bc8 <xTaskResumeAll>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d189      	bne.n	8005f6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <xQueueReceive+0x1bc>)
 800605c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	e780      	b.n	8005f6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800606c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606e:	f000 faaa 	bl	80065c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006072:	f000 fda9 	bl	8006bc8 <xTaskResumeAll>
 8006076:	e77a      	b.n	8005f6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f000 faa4 	bl	80065c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800607e:	f000 fda3 	bl	8006bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006084:	f000 faf1 	bl	800666a <prvIsQueueEmpty>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f43f af6f 	beq.w	8005f6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006092:	4618      	mov	r0, r3
 8006094:	3730      	adds	r7, #48	; 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	; 0x38
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	623b      	str	r3, [r7, #32]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fb      	str	r3, [r7, #28]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060f0:	f001 f926 	bl	8007340 <xTaskGetSchedulerState>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <xQueueSemaphoreTake+0x60>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <xQueueSemaphoreTake+0x64>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <xQueueSemaphoreTake+0x66>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61bb      	str	r3, [r7, #24]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006120:	f001 fc60 	bl	80079e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	2b00      	cmp	r3, #0
 800612e:	d024      	beq.n	800617a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	1e5a      	subs	r2, r3, #1
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006140:	f001 faa6 	bl	8007690 <pvTaskIncrementMutexHeldCount>
 8006144:	4602      	mov	r2, r0
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00f      	beq.n	8006172 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	3310      	adds	r3, #16
 8006156:	4618      	mov	r0, r3
 8006158:	f000 ff32 	bl	8006fc0 <xTaskRemoveFromEventList>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006162:	4b54      	ldr	r3, [pc, #336]	; (80062b4 <xQueueSemaphoreTake+0x214>)
 8006164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006172:	f001 fc67 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 8006176:	2301      	movs	r3, #1
 8006178:	e097      	b.n	80062aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	617b      	str	r3, [r7, #20]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800619c:	f001 fc52 	bl	8007a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e082      	b.n	80062aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ff68 	bl	8007084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061b8:	f001 fc44 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061bc:	f000 fcf6 	bl	8006bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061c0:	f001 fc10 	bl	80079e4 <vPortEnterCritical>
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d103      	bne.n	80061da <xQueueSemaphoreTake+0x13a>
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d103      	bne.n	80061f0 <xQueueSemaphoreTake+0x150>
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f0:	f001 fc28 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061f4:	463a      	mov	r2, r7
 80061f6:	f107 030c 	add.w	r3, r7, #12
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 ff57 	bl	80070b0 <xTaskCheckForTimeOut>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d132      	bne.n	800626e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620a:	f000 fa2e 	bl	800666a <prvIsQueueEmpty>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d026      	beq.n	8006262 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800621c:	f001 fbe2 	bl	80079e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f8a9 	bl	800737c <xTaskPriorityInherit>
 800622a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800622c:	f001 fc0a 	bl	8007a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fe9d 	bl	8006f78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800623e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006240:	f000 f9c1 	bl	80065c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006244:	f000 fcc0 	bl	8006bc8 <xTaskResumeAll>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	f47f af68 	bne.w	8006120 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006250:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <xQueueSemaphoreTake+0x214>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	e75e      	b.n	8006120 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006264:	f000 f9af 	bl	80065c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006268:	f000 fcae 	bl	8006bc8 <xTaskResumeAll>
 800626c:	e758      	b.n	8006120 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800626e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006270:	f000 f9a9 	bl	80065c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006274:	f000 fca8 	bl	8006bc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800627a:	f000 f9f6 	bl	800666a <prvIsQueueEmpty>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f43f af4d 	beq.w	8006120 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00d      	beq.n	80062a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800628c:	f001 fbaa 	bl	80079e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006292:	f000 f8f0 	bl	8006476 <prvGetDisinheritPriorityAfterTimeout>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 f968 	bl	8007574 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80062a4:	f001 fbce 	bl	8007a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3738      	adds	r7, #56	; 0x38
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	623b      	str	r3, [r7, #32]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <xQueueReceiveFromISR+0x3a>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueReceiveFromISR+0x3e>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueReceiveFromISR+0x40>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61fb      	str	r3, [r7, #28]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006312:	f001 fc49 	bl	8007ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8006316:	f3ef 8211 	mrs	r2, BASEPRI
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	61ba      	str	r2, [r7, #24]
 800632c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800632e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d02f      	beq.n	800639e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634c:	f000 f915 	bl	800657a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	1e5a      	subs	r2, r3, #1
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d112      	bne.n	8006388 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	3310      	adds	r3, #16
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fe26 	bl	8006fc0 <xTaskRemoveFromEventList>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e007      	b.n	8006398 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800638c:	3301      	adds	r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	b25a      	sxtb	r2, r3
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006398:	2301      	movs	r3, #1
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	e001      	b.n	80063a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f383 8811 	msr	BASEPRI, r3
}
 80063ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3738      	adds	r7, #56	; 0x38
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60bb      	str	r3, [r7, #8]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80063dc:	f001 fb02 	bl	80079e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80063e6:	f001 fb2d 	bl	8007a44 <vPortExitCritical>

	return uxReturn;
 80063ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60fb      	str	r3, [r7, #12]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006422:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <vQueueDelete+0x28>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f935 	bl	80066c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f001 fca9 	bl	8007dc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d006      	beq.n	8006494 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1c3 0307 	rsb	r3, r3, #7
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e001      	b.n	8006498 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006498:	68fb      	ldr	r3, [r7, #12]
	}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d14d      	bne.n	8006568 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 ffc9 	bl	8007468 <xTaskPriorityDisinherit>
 80064d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	609a      	str	r2, [r3, #8]
 80064de:	e043      	b.n	8006568 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d119      	bne.n	800651a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6858      	ldr	r0, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	461a      	mov	r2, r3
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	f010 f984 	bl	80167fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	441a      	add	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	d32b      	bcc.n	8006568 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]
 8006518:	e026      	b.n	8006568 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68d8      	ldr	r0, [r3, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	f010 f96a 	bl	80167fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	425b      	negs	r3, r3
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d207      	bcs.n	8006556 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	425b      	negs	r3, r3
 8006550:	441a      	add	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d105      	bne.n	8006568 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3b01      	subs	r3, #1
 8006566:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006570:	697b      	ldr	r3, [r7, #20]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d018      	beq.n	80065be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d303      	bcc.n	80065ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68d9      	ldr	r1, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	461a      	mov	r2, r3
 80065b8:	6838      	ldr	r0, [r7, #0]
 80065ba:	f010 f920 	bl	80167fe <memcpy>
	}
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065ce:	f001 fa09 	bl	80079e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065da:	e011      	b.n	8006600 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d012      	beq.n	800660a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3324      	adds	r3, #36	; 0x24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fce9 	bl	8006fc0 <xTaskRemoveFromEventList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065f4:	f000 fdbe 	bl	8007174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dce9      	bgt.n	80065dc <prvUnlockQueue+0x16>
 8006608:	e000      	b.n	800660c <prvUnlockQueue+0x46>
					break;
 800660a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006614:	f001 fa16 	bl	8007a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006618:	f001 f9e4 	bl	80079e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006622:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006624:	e011      	b.n	800664a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d012      	beq.n	8006654 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3310      	adds	r3, #16
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fcc4 	bl	8006fc0 <xTaskRemoveFromEventList>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800663e:	f000 fd99 	bl	8007174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	3b01      	subs	r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800664a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	dce9      	bgt.n	8006626 <prvUnlockQueue+0x60>
 8006652:	e000      	b.n	8006656 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006654:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	22ff      	movs	r2, #255	; 0xff
 800665a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800665e:	f001 f9f1 	bl	8007a44 <vPortExitCritical>
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006672:	f001 f9b7 	bl	80079e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e001      	b.n	8006688 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006688:	f001 f9dc 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 800668c:	68fb      	ldr	r3, [r7, #12]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800669e:	f001 f9a1 	bl	80079e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d102      	bne.n	80066b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066ae:	2301      	movs	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	e001      	b.n	80066b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066b8:	f001 f9c4 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e016      	b.n	8006704 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <vQueueUnregisterQueue+0x50>)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4413      	add	r3, r2
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d10b      	bne.n	80066fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80066e6:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <vQueueUnregisterQueue+0x50>)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2100      	movs	r1, #0
 80066ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80066f0:	4a09      	ldr	r2, [pc, #36]	; (8006718 <vQueueUnregisterQueue+0x50>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
				break;
 80066fc:	e006      	b.n	800670c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b07      	cmp	r3, #7
 8006708:	d9e5      	bls.n	80066d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	200052bc 	.word	0x200052bc

0800671c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08e      	sub	sp, #56	; 0x38
 8006720:	af04      	add	r7, sp, #16
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	623b      	str	r3, [r7, #32]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xTaskCreateStatic+0x46>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	61fb      	str	r3, [r7, #28]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006762:	23a0      	movs	r3, #160	; 0xa0
 8006764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2ba0      	cmp	r3, #160	; 0xa0
 800676a:	d00a      	beq.n	8006782 <xTaskCreateStatic+0x66>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	61bb      	str	r3, [r7, #24]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01e      	beq.n	80067c8 <xTaskCreateStatic+0xac>
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01b      	beq.n	80067c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	2202      	movs	r2, #2
 800679e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067a2:	2300      	movs	r3, #0
 80067a4:	9303      	str	r3, [sp, #12]
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	9302      	str	r3, [sp, #8]
 80067aa:	f107 0314 	add.w	r3, r7, #20
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f850 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067c2:	f000 f8eb 	bl	800699c <prvAddNewTaskToReadyList>
 80067c6:	e001      	b.n	80067cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067cc:	697b      	ldr	r3, [r7, #20]
	}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3728      	adds	r7, #40	; 0x28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b08c      	sub	sp, #48	; 0x30
 80067da:	af04      	add	r7, sp, #16
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 fa1c 	bl	8007c28 <pvPortMalloc>
 80067f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067f8:	20a0      	movs	r0, #160	; 0xa0
 80067fa:	f001 fa15 	bl	8007c28 <pvPortMalloc>
 80067fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
 800680c:	e005      	b.n	800681a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800680e:	6978      	ldr	r0, [r7, #20]
 8006810:	f001 fad6 	bl	8007dc0 <vPortFree>
 8006814:	e001      	b.n	800681a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d017      	beq.n	8006850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	2300      	movs	r3, #0
 800682c:	9303      	str	r3, [sp, #12]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	9302      	str	r3, [sp, #8]
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 f80e 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006844:	69f8      	ldr	r0, [r7, #28]
 8006846:	f000 f8a9 	bl	800699c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800684a:	2301      	movs	r3, #1
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e002      	b.n	8006856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006850:	f04f 33ff 	mov.w	r3, #4294967295
 8006854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006856:	69bb      	ldr	r3, [r7, #24]
	}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006878:	3b01      	subs	r3, #1
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f023 0307 	bic.w	r3, r3, #7
 8006886:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	617b      	str	r3, [r7, #20]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01f      	beq.n	80068ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e012      	b.n	80068da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	7819      	ldrb	r1, [r3, #0]
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	3334      	adds	r3, #52	; 0x34
 80068c4:	460a      	mov	r2, r1
 80068c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d006      	beq.n	80068e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d9e9      	bls.n	80068b4 <prvInitialiseNewTask+0x54>
 80068e0:	e000      	b.n	80068e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80068e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ec:	e003      	b.n	80068f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	2b06      	cmp	r3, #6
 80068fa:	d901      	bls.n	8006900 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fc:	2306      	movs	r3, #6
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006904:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	2200      	movs	r2, #0
 8006910:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fea1 	bl	800565e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	3318      	adds	r3, #24
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fe9c 	bl	800565e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	f1c3 0207 	rsb	r2, r3, #7
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2200      	movs	r2, #0
 8006948:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	334c      	adds	r3, #76	; 0x4c
 8006950:	224c      	movs	r2, #76	; 0x4c
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f00f fe77 	bl	8016648 <memset>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <prvInitialiseNewTask+0x130>)
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <prvInitialiseNewTask+0x134>)
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	4a0b      	ldr	r2, [pc, #44]	; (8006998 <prvInitialiseNewTask+0x138>)
 800696a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	69b8      	ldr	r0, [r7, #24]
 8006972:	f000 ff07 	bl	8007784 <pxPortInitialiseStack>
 8006976:	4602      	mov	r2, r0
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006988:	bf00      	nop
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000c958 	.word	0x2000c958
 8006994:	2000c9c0 	.word	0x2000c9c0
 8006998:	2000ca28 	.word	0x2000ca28

0800699c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069a4:	f001 f81e 	bl	80079e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a29      	ldr	r2, [pc, #164]	; (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069b2:	4b29      	ldr	r3, [pc, #164]	; (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069c0:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069c8:	f000 fbf8 	bl	80071bc <prvInitialiseTaskLists>
 80069cc:	e00d      	b.n	80069ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069d6:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d802      	bhi.n	80069ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069e4:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <prvAddNewTaskToReadyList+0xcc>)
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe fe2b 	bl	8005678 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a22:	f001 f80f 	bl	8007a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a26:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d207      	bcs.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200053fc 	.word	0x200053fc
 8006a58:	200052fc 	.word	0x200052fc
 8006a5c:	20005408 	.word	0x20005408
 8006a60:	20005418 	.word	0x20005418
 8006a64:	20005404 	.word	0x20005404
 8006a68:	20005300 	.word	0x20005300
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d017      	beq.n	8006ab2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a82:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <vTaskDelay+0x60>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <vTaskDelay+0x30>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	60bb      	str	r3, [r7, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006aa0:	f000 f884 	bl	8006bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fe06 	bl	80076b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006aac:	f000 f88c 	bl	8006bc8 <xTaskResumeAll>
 8006ab0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <vTaskDelay+0x64>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20005424 	.word	0x20005424
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ae6:	463a      	mov	r2, r7
 8006ae8:	1d39      	adds	r1, r7, #4
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7f9 fd44 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	9202      	str	r2, [sp, #8]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	2300      	movs	r3, #0
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	460a      	mov	r2, r1
 8006b06:	4921      	ldr	r1, [pc, #132]	; (8006b8c <vTaskStartScheduler+0xb4>)
 8006b08:	4821      	ldr	r0, [pc, #132]	; (8006b90 <vTaskStartScheduler+0xb8>)
 8006b0a:	f7ff fe07 	bl	800671c <xTaskCreateStatic>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <vTaskStartScheduler+0xbc>)
 8006b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b14:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <vTaskStartScheduler+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e001      	b.n	8006b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d11b      	bne.n	8006b64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	613b      	str	r3, [r7, #16]
}
 8006b3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b40:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <vTaskStartScheduler+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	334c      	adds	r3, #76	; 0x4c
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <vTaskStartScheduler+0xc4>)
 8006b48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <vTaskStartScheduler+0xc8>)
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b52:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <vTaskStartScheduler+0xcc>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <vTaskStartScheduler+0xd0>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b5e:	f000 fe9f 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b62:	e00e      	b.n	8006b82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d10a      	bne.n	8006b82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <vTaskStartScheduler+0xa8>
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	0801787c 	.word	0x0801787c
 8006b90:	0800718d 	.word	0x0800718d
 8006b94:	20005420 	.word	0x20005420
 8006b98:	200052fc 	.word	0x200052fc
 8006b9c:	20000088 	.word	0x20000088
 8006ba0:	2000541c 	.word	0x2000541c
 8006ba4:	20005408 	.word	0x20005408
 8006ba8:	20005400 	.word	0x20005400

08006bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <vTaskSuspendAll+0x18>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a03      	ldr	r2, [pc, #12]	; (8006bc4 <vTaskSuspendAll+0x18>)
 8006bb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bba:	bf00      	nop
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20005424 	.word	0x20005424

08006bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bd6:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <xTaskResumeAll+0x114>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	603b      	str	r3, [r7, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bf4:	f000 fef6 	bl	80079e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bf8:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <xTaskResumeAll+0x114>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	4a37      	ldr	r2, [pc, #220]	; (8006cdc <xTaskResumeAll+0x114>)
 8006c00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c02:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <xTaskResumeAll+0x114>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d161      	bne.n	8006cce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c0a:	4b35      	ldr	r3, [pc, #212]	; (8006ce0 <xTaskResumeAll+0x118>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d05d      	beq.n	8006cce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c12:	e02e      	b.n	8006c72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c14:	4b33      	ldr	r3, [pc, #204]	; (8006ce4 <xTaskResumeAll+0x11c>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3318      	adds	r3, #24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fd86 	bl	8005732 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fd81 	bl	8005732 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2201      	movs	r2, #1
 8006c36:	409a      	lsls	r2, r3
 8006c38:	4b2b      	ldr	r3, [pc, #172]	; (8006ce8 <xTaskResumeAll+0x120>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <xTaskResumeAll+0x120>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4a27      	ldr	r2, [pc, #156]	; (8006cec <xTaskResumeAll+0x124>)
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe fd0d 	bl	8005678 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <xTaskResumeAll+0x128>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c6c:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c72:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <xTaskResumeAll+0x11c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1cc      	bne.n	8006c14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c80:	f000 fb3e 	bl	8007300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <xTaskResumeAll+0x130>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d010      	beq.n	8006cb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c90:	f000 f858 	bl	8006d44 <xTaskIncrementTick>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c9a:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f1      	bne.n	8006c90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006cac:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <xTaskResumeAll+0x130>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cb2:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <xTaskResumeAll+0x134>)
 8006cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f000 feb9 	bl	8007a44 <vPortExitCritical>

	return xAlreadyYielded;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20005424 	.word	0x20005424
 8006ce0:	200053fc 	.word	0x200053fc
 8006ce4:	200053bc 	.word	0x200053bc
 8006ce8:	20005404 	.word	0x20005404
 8006cec:	20005300 	.word	0x20005300
 8006cf0:	200052fc 	.word	0x200052fc
 8006cf4:	20005410 	.word	0x20005410
 8006cf8:	2000540c 	.word	0x2000540c
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <xTaskGetTickCount+0x1c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d0c:	687b      	ldr	r3, [r7, #4]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20005400 	.word	0x20005400

08006d20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d26:	f000 ff3f 	bl	8007ba8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <xTaskGetTickCountFromISR+0x20>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d34:	683b      	ldr	r3, [r7, #0]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20005400 	.word	0x20005400

08006d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d4e:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <xTaskIncrementTick+0x144>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 808e 	bne.w	8006e74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d58:	4b4c      	ldr	r3, [pc, #304]	; (8006e8c <xTaskIncrementTick+0x148>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d60:	4a4a      	ldr	r2, [pc, #296]	; (8006e8c <xTaskIncrementTick+0x148>)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d120      	bne.n	8006dae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d6c:	4b48      	ldr	r3, [pc, #288]	; (8006e90 <xTaskIncrementTick+0x14c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <xTaskIncrementTick+0x48>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	603b      	str	r3, [r7, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <xTaskIncrementTick+0x46>
 8006d8c:	4b40      	ldr	r3, [pc, #256]	; (8006e90 <xTaskIncrementTick+0x14c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	4b40      	ldr	r3, [pc, #256]	; (8006e94 <xTaskIncrementTick+0x150>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a3e      	ldr	r2, [pc, #248]	; (8006e90 <xTaskIncrementTick+0x14c>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	4a3e      	ldr	r2, [pc, #248]	; (8006e94 <xTaskIncrementTick+0x150>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b3d      	ldr	r3, [pc, #244]	; (8006e98 <xTaskIncrementTick+0x154>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <xTaskIncrementTick+0x154>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	f000 faa9 	bl	8007300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dae:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <xTaskIncrementTick+0x158>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d348      	bcc.n	8006e4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db8:	4b35      	ldr	r3, [pc, #212]	; (8006e90 <xTaskIncrementTick+0x14c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dc2:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <xTaskIncrementTick+0x158>)
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	601a      	str	r2, [r3, #0]
					break;
 8006dca:	e03e      	b.n	8006e4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dcc:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <xTaskIncrementTick+0x14c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d203      	bcs.n	8006dec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006de4:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <xTaskIncrementTick+0x158>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dea:	e02e      	b.n	8006e4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fc9e 	bl	8005732 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3318      	adds	r3, #24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fc95 	bl	8005732 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	4b23      	ldr	r3, [pc, #140]	; (8006ea0 <xTaskIncrementTick+0x15c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	4a22      	ldr	r2, [pc, #136]	; (8006ea0 <xTaskIncrementTick+0x15c>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4a1f      	ldr	r2, [pc, #124]	; (8006ea4 <xTaskIncrementTick+0x160>)
 8006e28:	441a      	add	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f7fe fc21 	bl	8005678 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ea8 <xTaskIncrementTick+0x164>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d3b9      	bcc.n	8006db8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e48:	e7b6      	b.n	8006db8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e4a:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <xTaskIncrementTick+0x164>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4914      	ldr	r1, [pc, #80]	; (8006ea4 <xTaskIncrementTick+0x160>)
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d901      	bls.n	8006e66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006e62:	2301      	movs	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <xTaskIncrementTick+0x168>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	e004      	b.n	8006e7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <xTaskIncrementTick+0x16c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <xTaskIncrementTick+0x16c>)
 8006e7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e7e:	697b      	ldr	r3, [r7, #20]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20005424 	.word	0x20005424
 8006e8c:	20005400 	.word	0x20005400
 8006e90:	200053b4 	.word	0x200053b4
 8006e94:	200053b8 	.word	0x200053b8
 8006e98:	20005414 	.word	0x20005414
 8006e9c:	2000541c 	.word	0x2000541c
 8006ea0:	20005404 	.word	0x20005404
 8006ea4:	20005300 	.word	0x20005300
 8006ea8:	200052fc 	.word	0x200052fc
 8006eac:	20005410 	.word	0x20005410
 8006eb0:	2000540c 	.word	0x2000540c

08006eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eba:	4b29      	ldr	r3, [pc, #164]	; (8006f60 <vTaskSwitchContext+0xac>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ec2:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <vTaskSwitchContext+0xb0>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ec8:	e044      	b.n	8006f54 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006eca:	4b26      	ldr	r3, [pc, #152]	; (8006f64 <vTaskSwitchContext+0xb0>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed0:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <vTaskSwitchContext+0xb4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	fab3 f383 	clz	r3, r3
 8006edc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	f1c3 031f 	rsb	r3, r3, #31
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	4921      	ldr	r1, [pc, #132]	; (8006f6c <vTaskSwitchContext+0xb8>)
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	607b      	str	r3, [r7, #4]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vTaskSwitchContext+0x5a>
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <vTaskSwitchContext+0xb8>)
 8006f1c:	4413      	add	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3308      	adds	r3, #8
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d104      	bne.n	8006f40 <vTaskSwitchContext+0x8c>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <vTaskSwitchContext+0xbc>)
 8006f48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f4a:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <vTaskSwitchContext+0xbc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	334c      	adds	r3, #76	; 0x4c
 8006f50:	4a08      	ldr	r2, [pc, #32]	; (8006f74 <vTaskSwitchContext+0xc0>)
 8006f52:	6013      	str	r3, [r2, #0]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20005424 	.word	0x20005424
 8006f64:	20005410 	.word	0x20005410
 8006f68:	20005404 	.word	0x20005404
 8006f6c:	20005300 	.word	0x20005300
 8006f70:	200052fc 	.word	0x200052fc
 8006f74:	20000088 	.word	0x20000088

08006f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60fb      	str	r3, [r7, #12]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <vTaskPlaceOnEventList+0x44>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fe fb8a 	bl	80056c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fac:	2101      	movs	r1, #1
 8006fae:	6838      	ldr	r0, [r7, #0]
 8006fb0:	f000 fb82 	bl	80076b8 <prvAddCurrentTaskToDelayedList>
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200052fc 	.word	0x200052fc

08006fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3318      	adds	r3, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fb9e 	bl	8005732 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <xTaskRemoveFromEventList+0xac>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d11c      	bne.n	8007038 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fb95 	bl	8005732 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <xTaskRemoveFromEventList+0xb0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <xTaskRemoveFromEventList+0xb0>)
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <xTaskRemoveFromEventList+0xb4>)
 8007028:	441a      	add	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7fe fb21 	bl	8005678 <vListInsertEnd>
 8007036:	e005      	b.n	8007044 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3318      	adds	r3, #24
 800703c:	4619      	mov	r1, r3
 800703e:	480e      	ldr	r0, [pc, #56]	; (8007078 <xTaskRemoveFromEventList+0xb8>)
 8007040:	f7fe fb1a 	bl	8005678 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <xTaskRemoveFromEventList+0xbc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	429a      	cmp	r2, r3
 8007050:	d905      	bls.n	800705e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <xTaskRemoveFromEventList+0xc0>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e001      	b.n	8007062 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007062:	697b      	ldr	r3, [r7, #20]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20005424 	.word	0x20005424
 8007070:	20005404 	.word	0x20005404
 8007074:	20005300 	.word	0x20005300
 8007078:	200053bc 	.word	0x200053bc
 800707c:	200052fc 	.word	0x200052fc
 8007080:	20005410 	.word	0x20005410

08007084 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <vTaskInternalSetTimeOutState+0x24>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <vTaskInternalSetTimeOutState+0x28>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	605a      	str	r2, [r3, #4]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20005414 	.word	0x20005414
 80070ac:	20005400 	.word	0x20005400

080070b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60fb      	str	r3, [r7, #12]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070f2:	f000 fc77 	bl	80079e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <xTaskCheckForTimeOut+0xbc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d102      	bne.n	8007116 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	e023      	b.n	800715e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <xTaskCheckForTimeOut+0xc0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d007      	beq.n	8007132 <xTaskCheckForTimeOut+0x82>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e015      	b.n	800715e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	429a      	cmp	r2, r3
 800713a:	d20b      	bcs.n	8007154 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad2      	subs	r2, r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ff9b 	bl	8007084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e004      	b.n	800715e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800715e:	f000 fc71 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20005400 	.word	0x20005400
 8007170:	20005414 	.word	0x20005414

08007174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <vTaskMissedYield+0x14>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20005410 	.word	0x20005410

0800718c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007194:	f000 f852 	bl	800723c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <prvIdleTask+0x28>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d9f9      	bls.n	8007194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <prvIdleTask+0x2c>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b0:	e7f0      	b.n	8007194 <prvIdleTask+0x8>
 80071b2:	bf00      	nop
 80071b4:	20005300 	.word	0x20005300
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	e00c      	b.n	80071e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <prvInitialiseTaskLists+0x60>)
 80071d4:	4413      	add	r3, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fa21 	bl	800561e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d9ef      	bls.n	80071c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e8:	480d      	ldr	r0, [pc, #52]	; (8007220 <prvInitialiseTaskLists+0x64>)
 80071ea:	f7fe fa18 	bl	800561e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ee:	480d      	ldr	r0, [pc, #52]	; (8007224 <prvInitialiseTaskLists+0x68>)
 80071f0:	f7fe fa15 	bl	800561e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f4:	480c      	ldr	r0, [pc, #48]	; (8007228 <prvInitialiseTaskLists+0x6c>)
 80071f6:	f7fe fa12 	bl	800561e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071fa:	480c      	ldr	r0, [pc, #48]	; (800722c <prvInitialiseTaskLists+0x70>)
 80071fc:	f7fe fa0f 	bl	800561e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007200:	480b      	ldr	r0, [pc, #44]	; (8007230 <prvInitialiseTaskLists+0x74>)
 8007202:	f7fe fa0c 	bl	800561e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <prvInitialiseTaskLists+0x78>)
 8007208:	4a05      	ldr	r2, [pc, #20]	; (8007220 <prvInitialiseTaskLists+0x64>)
 800720a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <prvInitialiseTaskLists+0x7c>)
 800720e:	4a05      	ldr	r2, [pc, #20]	; (8007224 <prvInitialiseTaskLists+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20005300 	.word	0x20005300
 8007220:	2000538c 	.word	0x2000538c
 8007224:	200053a0 	.word	0x200053a0
 8007228:	200053bc 	.word	0x200053bc
 800722c:	200053d0 	.word	0x200053d0
 8007230:	200053e8 	.word	0x200053e8
 8007234:	200053b4 	.word	0x200053b4
 8007238:	200053b8 	.word	0x200053b8

0800723c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007242:	e019      	b.n	8007278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007244:	f000 fbce 	bl	80079e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007248:	4b10      	ldr	r3, [pc, #64]	; (800728c <prvCheckTasksWaitingTermination+0x50>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fa6c 	bl	8005732 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a0b      	ldr	r2, [pc, #44]	; (8007290 <prvCheckTasksWaitingTermination+0x54>)
 8007262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <prvCheckTasksWaitingTermination+0x58>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <prvCheckTasksWaitingTermination+0x58>)
 800726c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726e:	f000 fbe9 	bl	8007a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f810 	bl	8007298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e1      	bne.n	8007244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	200053d0 	.word	0x200053d0
 8007290:	200053fc 	.word	0x200053fc
 8007294:	200053e4 	.word	0x200053e4

08007298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	334c      	adds	r3, #76	; 0x4c
 80072a4:	4618      	mov	r0, r3
 80072a6:	f00f f9f7 	bl	8016698 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fd81 	bl	8007dc0 <vPortFree>
				vPortFree( pxTCB );
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fd7e 	bl	8007dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072c4:	e018      	b.n	80072f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d103      	bne.n	80072d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd75 	bl	8007dc0 <vPortFree>
	}
 80072d6:	e00f      	b.n	80072f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d00a      	beq.n	80072f8 <prvDeleteTCB+0x60>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	60fb      	str	r3, [r7, #12]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <prvDeleteTCB+0x5e>
	}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvResetNextTaskUnblockTime+0x38>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvResetNextTaskUnblockTime+0x3c>)
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007318:	e008      	b.n	800732c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <prvResetNextTaskUnblockTime+0x38>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4a04      	ldr	r2, [pc, #16]	; (800733c <prvResetNextTaskUnblockTime+0x3c>)
 800732a:	6013      	str	r3, [r2, #0]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	200053b4 	.word	0x200053b4
 800733c:	2000541c 	.word	0x2000541c

08007340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <xTaskGetSchedulerState+0x34>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800734e:	2301      	movs	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e008      	b.n	8007366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007354:	4b08      	ldr	r3, [pc, #32]	; (8007378 <xTaskGetSchedulerState+0x38>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800735c:	2302      	movs	r3, #2
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e001      	b.n	8007366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007366:	687b      	ldr	r3, [r7, #4]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	20005408 	.word	0x20005408
 8007378:	20005424 	.word	0x20005424

0800737c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d05e      	beq.n	8007450 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	4b31      	ldr	r3, [pc, #196]	; (800745c <xTaskPriorityInherit+0xe0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d24e      	bcs.n	800743e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	db06      	blt.n	80073b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a8:	4b2c      	ldr	r3, [pc, #176]	; (800745c <xTaskPriorityInherit+0xe0>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	f1c3 0207 	rsb	r2, r3, #7
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6959      	ldr	r1, [r3, #20]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <xTaskPriorityInherit+0xe4>)
 80073c8:	4413      	add	r3, r2
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d12f      	bne.n	800742e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f9ad 	bl	8005732 <uxListRemove>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	2201      	movs	r2, #1
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	43da      	mvns	r2, r3
 80073ea:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <xTaskPriorityInherit+0xe8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4013      	ands	r3, r2
 80073f0:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <xTaskPriorityInherit+0xe8>)
 80073f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073f4:	4b19      	ldr	r3, [pc, #100]	; (800745c <xTaskPriorityInherit+0xe0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	2201      	movs	r2, #1
 8007404:	409a      	lsls	r2, r3
 8007406:	4b17      	ldr	r3, [pc, #92]	; (8007464 <xTaskPriorityInherit+0xe8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4313      	orrs	r3, r2
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <xTaskPriorityInherit+0xe8>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4a10      	ldr	r2, [pc, #64]	; (8007460 <xTaskPriorityInherit+0xe4>)
 800741e:	441a      	add	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe f926 	bl	8005678 <vListInsertEnd>
 800742c:	e004      	b.n	8007438 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800742e:	4b0b      	ldr	r3, [pc, #44]	; (800745c <xTaskPriorityInherit+0xe0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e008      	b.n	8007450 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <xTaskPriorityInherit+0xe0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	429a      	cmp	r2, r3
 800744a:	d201      	bcs.n	8007450 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007450:	68fb      	ldr	r3, [r7, #12]
	}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200052fc 	.word	0x200052fc
 8007460:	20005300 	.word	0x20005300
 8007464:	20005404 	.word	0x20005404

08007468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d06e      	beq.n	800755c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800747e:	4b3a      	ldr	r3, [pc, #232]	; (8007568 <xTaskPriorityDisinherit+0x100>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d00a      	beq.n	800749e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60bb      	str	r3, [r7, #8]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d044      	beq.n	800755c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d140      	bne.n	800755c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	3304      	adds	r3, #4
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f927 	bl	8005732 <uxListRemove>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d115      	bne.n	8007516 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ee:	491f      	ldr	r1, [pc, #124]	; (800756c <xTaskPriorityDisinherit+0x104>)
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <xTaskPriorityDisinherit+0xae>
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	2201      	movs	r2, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	43da      	mvns	r2, r3
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <xTaskPriorityDisinherit+0x108>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4013      	ands	r3, r2
 8007512:	4a17      	ldr	r2, [pc, #92]	; (8007570 <xTaskPriorityDisinherit+0x108>)
 8007514:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f1c3 0207 	rsb	r2, r3, #7
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	2201      	movs	r2, #1
 8007530:	409a      	lsls	r2, r3
 8007532:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <xTaskPriorityDisinherit+0x108>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	4a0d      	ldr	r2, [pc, #52]	; (8007570 <xTaskPriorityDisinherit+0x108>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4a08      	ldr	r2, [pc, #32]	; (800756c <xTaskPriorityDisinherit+0x104>)
 800754a:	441a      	add	r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7fe f890 	bl	8005678 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800755c:	697b      	ldr	r3, [r7, #20]
	}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200052fc 	.word	0x200052fc
 800756c:	20005300 	.word	0x20005300
 8007570:	20005404 	.word	0x20005404

08007574 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007582:	2301      	movs	r3, #1
 8007584:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d077      	beq.n	800767c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60fb      	str	r3, [r7, #12]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d902      	bls.n	80075ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	61fb      	str	r3, [r7, #28]
 80075b8:	e002      	b.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d058      	beq.n	800767c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d153      	bne.n	800767c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d10a      	bne.n	80075f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	60bb      	str	r3, [r7, #8]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db04      	blt.n	8007612 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f1c3 0207 	rsb	r2, r3, #7
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6959      	ldr	r1, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4a19      	ldr	r2, [pc, #100]	; (8007688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007622:	4413      	add	r3, r2
 8007624:	4299      	cmp	r1, r3
 8007626:	d129      	bne.n	800767c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	3304      	adds	r3, #4
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe f880 	bl	8005732 <uxListRemove>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	2201      	movs	r2, #1
 800763e:	fa02 f303 	lsl.w	r3, r2, r3
 8007642:	43da      	mvns	r2, r3
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4013      	ands	r3, r2
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800764c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	2201      	movs	r2, #1
 8007654:	409a      	lsls	r2, r3
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4313      	orrs	r3, r2
 800765c:	4a0b      	ldr	r2, [pc, #44]	; (800768c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4a06      	ldr	r2, [pc, #24]	; (8007688 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800766e:	441a      	add	r2, r3
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	3304      	adds	r3, #4
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fd fffe 	bl	8005678 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	200052fc 	.word	0x200052fc
 8007688:	20005300 	.word	0x20005300
 800768c:	20005404 	.word	0x20005404

08007690 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076a2:	3201      	adds	r2, #1
 80076a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80076a6:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076a8:	681b      	ldr	r3, [r3, #0]
	}
 80076aa:	4618      	mov	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	200052fc 	.word	0x200052fc

080076b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076c2:	4b29      	ldr	r3, [pc, #164]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c8:	4b28      	ldr	r3, [pc, #160]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe f82f 	bl	8005732 <uxListRemove>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	2201      	movs	r2, #1
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	43da      	mvns	r2, r3
 80076e8:	4b21      	ldr	r3, [pc, #132]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4013      	ands	r3, r2
 80076ee:	4a20      	ldr	r2, [pc, #128]	; (8007770 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d10a      	bne.n	8007710 <prvAddCurrentTaskToDelayedList+0x58>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	481a      	ldr	r0, [pc, #104]	; (8007774 <prvAddCurrentTaskToDelayedList+0xbc>)
 800770a:	f7fd ffb5 	bl	8005678 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800770e:	e026      	b.n	800775e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007718:	4b14      	ldr	r3, [pc, #80]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	429a      	cmp	r2, r3
 8007726:	d209      	bcs.n	800773c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <prvAddCurrentTaskToDelayedList+0xc0>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fd ffc3 	bl	80056c0 <vListInsert>
}
 800773a:	e010      	b.n	800775e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <prvAddCurrentTaskToDelayedList+0xc4>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fd ffb9 	bl	80056c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	429a      	cmp	r2, r3
 8007756:	d202      	bcs.n	800775e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <prvAddCurrentTaskToDelayedList+0xc8>)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6013      	str	r3, [r2, #0]
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20005400 	.word	0x20005400
 800776c:	200052fc 	.word	0x200052fc
 8007770:	20005404 	.word	0x20005404
 8007774:	200053e8 	.word	0x200053e8
 8007778:	200053b8 	.word	0x200053b8
 800777c:	200053b4 	.word	0x200053b4
 8007780:	2000541c 	.word	0x2000541c

08007784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3b04      	subs	r3, #4
 8007794:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800779c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3b04      	subs	r3, #4
 80077a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0201 	bic.w	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077b4:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <pxPortInitialiseStack+0x64>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b14      	subs	r3, #20
 80077be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f06f 0202 	mvn.w	r2, #2
 80077d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b20      	subs	r3, #32
 80077d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077da:	68fb      	ldr	r3, [r7, #12]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	080077ed 	.word	0x080077ed

080077ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <prvTaskExitError+0x54>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	d00a      	beq.n	8007816 <prvTaskExitError+0x2a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <prvTaskExitError+0x28>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800782a:	bf00      	nop
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0fc      	beq.n	800782c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000020 	.word	0x20000020
	...

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	200052fc 	.word	0x200052fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078a6:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <xPortStartScheduler+0x120>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a46      	ldr	r2, [pc, #280]	; (80079c4 <xPortStartScheduler+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10a      	bne.n	80078c6 <xPortStartScheduler+0x26>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078c6:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <xPortStartScheduler+0x120>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a3f      	ldr	r2, [pc, #252]	; (80079c8 <xPortStartScheduler+0x128>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10a      	bne.n	80078e6 <xPortStartScheduler+0x46>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078e6:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xPortStartScheduler+0x12c>)
 80078e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007908:	b2da      	uxtb	r2, r3
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <xPortStartScheduler+0x130>)
 800790c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800790e:	4b31      	ldr	r3, [pc, #196]	; (80079d4 <xPortStartScheduler+0x134>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007914:	e009      	b.n	800792a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007916:	4b2f      	ldr	r3, [pc, #188]	; (80079d4 <xPortStartScheduler+0x134>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <xPortStartScheduler+0x134>)
 800791e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	b2db      	uxtb	r3, r3
 8007928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b80      	cmp	r3, #128	; 0x80
 8007934:	d0ef      	beq.n	8007916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007936:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <xPortStartScheduler+0x134>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1c3 0307 	rsb	r3, r3, #7
 800793e:	2b04      	cmp	r3, #4
 8007940:	d00a      	beq.n	8007958 <xPortStartScheduler+0xb8>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60bb      	str	r3, [r7, #8]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <xPortStartScheduler+0x134>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <xPortStartScheduler+0x134>)
 8007960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <xPortStartScheduler+0x134>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800796a:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <xPortStartScheduler+0x134>)
 800796c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <xPortStartScheduler+0x138>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <xPortStartScheduler+0x138>)
 800797c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <xPortStartScheduler+0x138>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <xPortStartScheduler+0x138>)
 8007988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800798c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800798e:	f000 f8dd 	bl	8007b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <xPortStartScheduler+0x13c>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007998:	f000 f8fc 	bl	8007b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <xPortStartScheduler+0x140>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <xPortStartScheduler+0x140>)
 80079a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079a8:	f7ff ff66 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ac:	f7ff fa82 	bl	8006eb4 <vTaskSwitchContext>
	prvTaskExitError();
 80079b0:	f7ff ff1c 	bl	80077ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	e000ed00 	.word	0xe000ed00
 80079c4:	410fc271 	.word	0x410fc271
 80079c8:	410fc270 	.word	0x410fc270
 80079cc:	e000e400 	.word	0xe000e400
 80079d0:	20005428 	.word	0x20005428
 80079d4:	2000542c 	.word	0x2000542c
 80079d8:	e000ed20 	.word	0xe000ed20
 80079dc:	20000020 	.word	0x20000020
 80079e0:	e000ef34 	.word	0xe000ef34

080079e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	607b      	str	r3, [r7, #4]
}
 80079fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10f      	bne.n	8007a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <vPortEnterCritical+0x5c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	603b      	str	r3, [r7, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <vPortEnterCritical+0x4a>
	}
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000020 	.word	0x20000020
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <vPortExitCritical+0x50>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <vPortExitCritical+0x24>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <vPortExitCritical+0x50>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <vPortExitCritical+0x50>)
 8007a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <vPortExitCritical+0x50>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <vPortExitCritical+0x42>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f383 8811 	msr	BASEPRI, r3
}
 8007a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000020 	.word	0x20000020
	...

08007aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007aa0:	f3ef 8009 	mrs	r0, PSP
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <pxCurrentTCBConst>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f01e 0f10 	tst.w	lr, #16
 8007ab0:	bf08      	it	eq
 8007ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	6010      	str	r0, [r2, #0]
 8007abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ac4:	f380 8811 	msr	BASEPRI, r0
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f7ff f9f0 	bl	8006eb4 <vTaskSwitchContext>
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f380 8811 	msr	BASEPRI, r0
 8007adc:	bc09      	pop	{r0, r3}
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	6808      	ldr	r0, [r1, #0]
 8007ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae6:	f01e 0f10 	tst.w	lr, #16
 8007aea:	bf08      	it	eq
 8007aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007af0:	f380 8809 	msr	PSP, r0
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w

08007b00 <pxCurrentTCBConst>:
 8007b00:	200052fc 	.word	0x200052fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f7ff f90f 	bl	8006d44 <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <SysTick_Handler+0x40>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
}
 8007b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <vPortSetupTimerInterrupt+0x38>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <vPortSetupTimerInterrupt+0x3c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <vPortSetupTimerInterrupt+0x40>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <vPortSetupTimerInterrupt+0x44>)
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	e000e010 	.word	0xe000e010
 8007b84:	e000e018 	.word	0xe000e018
 8007b88:	20000000 	.word	0x20000000
 8007b8c:	10624dd3 	.word	0x10624dd3
 8007b90:	e000e014 	.word	0xe000e014

08007b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ba4 <vPortEnableVFP+0x10>
 8007b98:	6801      	ldr	r1, [r0, #0]
 8007b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b9e:	6001      	str	r1, [r0, #0]
 8007ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ba2:	bf00      	nop
 8007ba4:	e000ed88 	.word	0xe000ed88

08007ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bae:	f3ef 8305 	mrs	r3, IPSR
 8007bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d914      	bls.n	8007be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <vPortValidateInterruptPriority+0x70>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <vPortValidateInterruptPriority+0x74>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	7afa      	ldrb	r2, [r7, #11]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d20a      	bcs.n	8007be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <vPortValidateInterruptPriority+0x78>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <vPortValidateInterruptPriority+0x7c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d90a      	bls.n	8007c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	603b      	str	r3, [r7, #0]
}
 8007c06:	bf00      	nop
 8007c08:	e7fe      	b.n	8007c08 <vPortValidateInterruptPriority+0x60>
	}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	e000e3f0 	.word	0xe000e3f0
 8007c1c:	20005428 	.word	0x20005428
 8007c20:	e000ed0c 	.word	0xe000ed0c
 8007c24:	2000542c 	.word	0x2000542c

08007c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c34:	f7fe ffba 	bl	8006bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c38:	4b5b      	ldr	r3, [pc, #364]	; (8007da8 <pvPortMalloc+0x180>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c40:	f000 f920 	bl	8007e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c44:	4b59      	ldr	r3, [pc, #356]	; (8007dac <pvPortMalloc+0x184>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 8093 	bne.w	8007d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01d      	beq.n	8007c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c58:	2208      	movs	r2, #8
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d014      	beq.n	8007c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	3308      	adds	r3, #8
 8007c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <pvPortMalloc+0x6c>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d06e      	beq.n	8007d78 <pvPortMalloc+0x150>
 8007c9a:	4b45      	ldr	r3, [pc, #276]	; (8007db0 <pvPortMalloc+0x188>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d869      	bhi.n	8007d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ca4:	4b43      	ldr	r3, [pc, #268]	; (8007db4 <pvPortMalloc+0x18c>)
 8007ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ca8:	4b42      	ldr	r3, [pc, #264]	; (8007db4 <pvPortMalloc+0x18c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cae:	e004      	b.n	8007cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d903      	bls.n	8007ccc <pvPortMalloc+0xa4>
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f1      	bne.n	8007cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ccc:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <pvPortMalloc+0x180>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d050      	beq.n	8007d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2208      	movs	r2, #8
 8007cdc:	4413      	add	r3, r2
 8007cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d91f      	bls.n	8007d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <pvPortMalloc+0xf8>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	613b      	str	r3, [r7, #16]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d32:	69b8      	ldr	r0, [r7, #24]
 8007d34:	f000 f908 	bl	8007f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d38:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <pvPortMalloc+0x188>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <pvPortMalloc+0x188>)
 8007d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d46:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <pvPortMalloc+0x188>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <pvPortMalloc+0x190>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d203      	bcs.n	8007d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d52:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <pvPortMalloc+0x188>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <pvPortMalloc+0x190>)
 8007d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <pvPortMalloc+0x184>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <pvPortMalloc+0x194>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <pvPortMalloc+0x194>)
 8007d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d78:	f7fe ff26 	bl	8006bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <pvPortMalloc+0x174>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60fb      	str	r3, [r7, #12]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <pvPortMalloc+0x172>
	return pvReturn;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20009038 	.word	0x20009038
 8007dac:	2000904c 	.word	0x2000904c
 8007db0:	2000903c 	.word	0x2000903c
 8007db4:	20009030 	.word	0x20009030
 8007db8:	20009040 	.word	0x20009040
 8007dbc:	20009044 	.word	0x20009044

08007dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d04d      	beq.n	8007e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	425b      	negs	r3, r3
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4413      	add	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <vPortFree+0xb8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <vPortFree+0x44>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	60fb      	str	r3, [r7, #12]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <vPortFree+0x62>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60bb      	str	r3, [r7, #8]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <vPortFree+0xb8>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01e      	beq.n	8007e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d11a      	bne.n	8007e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <vPortFree+0xb8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	43db      	mvns	r3, r3
 8007e42:	401a      	ands	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e48:	f7fe feb0 	bl	8006bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <vPortFree+0xbc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4413      	add	r3, r2
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <vPortFree+0xbc>)
 8007e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e5a:	6938      	ldr	r0, [r7, #16]
 8007e5c:	f000 f874 	bl	8007f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <vPortFree+0xc0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a06      	ldr	r2, [pc, #24]	; (8007e80 <vPortFree+0xc0>)
 8007e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e6a:	f7fe fead 	bl	8006bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e6e:	bf00      	nop
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	2000904c 	.word	0x2000904c
 8007e7c:	2000903c 	.word	0x2000903c
 8007e80:	20009048 	.word	0x20009048

08007e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e90:	4b27      	ldr	r3, [pc, #156]	; (8007f30 <prvHeapInit+0xac>)
 8007e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3307      	adds	r3, #7
 8007ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <prvHeapInit+0xac>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	; (8007f34 <prvHeapInit+0xb0>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <prvHeapInit+0xb0>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <prvHeapInit+0xb4>)
 8007ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <prvHeapInit+0xb4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <prvHeapInit+0xb4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <prvHeapInit+0xb4>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <prvHeapInit+0xb8>)
 8007f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <prvHeapInit+0xbc>)
 8007f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <prvHeapInit+0xc0>)
 8007f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20005430 	.word	0x20005430
 8007f34:	20009030 	.word	0x20009030
 8007f38:	20009038 	.word	0x20009038
 8007f3c:	20009040 	.word	0x20009040
 8007f40:	2000903c 	.word	0x2000903c
 8007f44:	2000904c 	.word	0x2000904c

08007f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f50:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <prvInsertBlockIntoFreeList+0xac>)
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e002      	b.n	8007f5c <prvInsertBlockIntoFreeList+0x14>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d8f7      	bhi.n	8007f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d108      	bne.n	8007f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d118      	bne.n	8007fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d00d      	beq.n	8007fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	441a      	add	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e008      	b.n	8007fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e003      	b.n	8007fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d002      	beq.n	8007fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20009030 	.word	0x20009030
 8007ff8:	20009038 	.word	0x20009038

08007ffc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	330c      	adds	r3, #12
 800800c:	461a      	mov	r2, r3
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f002 fc85 	bl	800a920 <tcpip_send_msg_wait_sem>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800801a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008028:	e001      	b.n	800802e <netconn_apimsg+0x32>
  }
  return err;
 800802a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08c      	sub	sp, #48	; 0x30
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	603a      	str	r2, [r7, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
 8008044:	460b      	mov	r3, r1
 8008046:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fdd5 	bl	8008bfc <netconn_alloc>
 8008052:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d054      	beq.n	8008104 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800805a:	79bb      	ldrb	r3, [r7, #6]
 800805c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008062:	f107 0308 	add.w	r3, r7, #8
 8008066:	4619      	mov	r1, r3
 8008068:	4829      	ldr	r0, [pc, #164]	; (8008110 <netconn_new_with_proto_and_callback+0xd8>)
 800806a:	f7ff ffc7 	bl	8007ffc <netconn_apimsg>
 800806e:	4603      	mov	r3, r0
 8008070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008074:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008078:	2b00      	cmp	r3, #0
 800807a:	d043      	beq.n	8008104 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <netconn_new_with_proto_and_callback+0x58>
 8008084:	4b23      	ldr	r3, [pc, #140]	; (8008114 <netconn_new_with_proto_and_callback+0xdc>)
 8008086:	22a3      	movs	r2, #163	; 0xa3
 8008088:	4923      	ldr	r1, [pc, #140]	; (8008118 <netconn_new_with_proto_and_callback+0xe0>)
 800808a:	4824      	ldr	r0, [pc, #144]	; (800811c <netconn_new_with_proto_and_callback+0xe4>)
 800808c:	f00e f94c 	bl	8016328 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	3310      	adds	r3, #16
 8008094:	4618      	mov	r0, r3
 8008096:	f00d ff0e 	bl	8015eb6 <sys_mbox_valid>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <netconn_new_with_proto_and_callback+0x74>
 80080a0:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <netconn_new_with_proto_and_callback+0xdc>)
 80080a2:	22a4      	movs	r2, #164	; 0xa4
 80080a4:	491e      	ldr	r1, [pc, #120]	; (8008120 <netconn_new_with_proto_and_callback+0xe8>)
 80080a6:	481d      	ldr	r0, [pc, #116]	; (800811c <netconn_new_with_proto_and_callback+0xe4>)
 80080a8:	f00e f93e 	bl	8016328 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	3314      	adds	r3, #20
 80080b0:	4618      	mov	r0, r3
 80080b2:	f00d ff00 	bl	8015eb6 <sys_mbox_valid>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <netconn_new_with_proto_and_callback+0x90>
 80080bc:	4b15      	ldr	r3, [pc, #84]	; (8008114 <netconn_new_with_proto_and_callback+0xdc>)
 80080be:	22a6      	movs	r2, #166	; 0xa6
 80080c0:	4918      	ldr	r1, [pc, #96]	; (8008124 <netconn_new_with_proto_and_callback+0xec>)
 80080c2:	4816      	ldr	r0, [pc, #88]	; (800811c <netconn_new_with_proto_and_callback+0xe4>)
 80080c4:	f00e f930 	bl	8016328 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	330c      	adds	r3, #12
 80080cc:	4618      	mov	r0, r3
 80080ce:	f00d ff83 	bl	8015fd8 <sys_sem_valid>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <netconn_new_with_proto_and_callback+0xac>
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <netconn_new_with_proto_and_callback+0xdc>)
 80080da:	22a9      	movs	r2, #169	; 0xa9
 80080dc:	4912      	ldr	r1, [pc, #72]	; (8008128 <netconn_new_with_proto_and_callback+0xf0>)
 80080de:	480f      	ldr	r0, [pc, #60]	; (800811c <netconn_new_with_proto_and_callback+0xe4>)
 80080e0:	f00e f922 	bl	8016328 <iprintf>
      sys_sem_free(&conn->op_completed);
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	330c      	adds	r3, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f00d ff68 	bl	8015fbe <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	3310      	adds	r3, #16
 80080f2:	4618      	mov	r0, r3
 80080f4:	f00d fe58 	bl	8015da8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80080f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080fa:	2007      	movs	r0, #7
 80080fc:	f003 f9be 	bl	800b47c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	e000      	b.n	8008106 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008106:	4618      	mov	r0, r3
 8008108:	3730      	adds	r7, #48	; 0x30
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	08008bd1 	.word	0x08008bd1
 8008114:	08017884 	.word	0x08017884
 8008118:	080178b8 	.word	0x080178b8
 800811c:	080178dc 	.word	0x080178dc
 8008120:	08017904 	.word	0x08017904
 8008124:	0801791c 	.word	0x0801791c
 8008128:	08017940 	.word	0x08017940

0800812c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e014      	b.n	8008168 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008142:	2329      	movs	r3, #41	; 0x29
 8008144:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008146:	f107 030c 	add.w	r3, r7, #12
 800814a:	4619      	mov	r1, r3
 800814c:	4808      	ldr	r0, [pc, #32]	; (8008170 <netconn_prepare_delete+0x44>)
 800814e:	f7ff ff55 	bl	8007ffc <netconn_apimsg>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008158:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <netconn_prepare_delete+0x3a>
    return err;
 8008160:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008164:	e000      	b.n	8008168 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3730      	adds	r7, #48	; 0x30
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	0800913d 	.word	0x0800913d

08008174 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <netconn_delete+0x12>
    return ERR_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	e00d      	b.n	80081a2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff ffd0 	bl	800812c <netconn_prepare_delete>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <netconn_delete+0x2a>
    netconn_free(conn);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd9d 	bl	8008cd8 <netconn_free>
  }
  return err;
 800819e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <netconn_connect+0x28>
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <netconn_connect+0x5c>)
 80081c2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80081c6:	4911      	ldr	r1, [pc, #68]	; (800820c <netconn_connect+0x60>)
 80081c8:	4811      	ldr	r0, [pc, #68]	; (8008210 <netconn_connect+0x64>)
 80081ca:	f00e f8ad 	bl	8016328 <iprintf>
 80081ce:	f06f 030f 	mvn.w	r3, #15
 80081d2:	e015      	b.n	8008200 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80081da:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <netconn_connect+0x68>)
 80081dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80081ea:	f107 0314 	add.w	r3, r7, #20
 80081ee:	4619      	mov	r1, r3
 80081f0:	4809      	ldr	r0, [pc, #36]	; (8008218 <netconn_connect+0x6c>)
 80081f2:	f7ff ff03 	bl	8007ffc <netconn_apimsg>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80081fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008200:	4618      	mov	r0, r3
 8008202:	3738      	adds	r7, #56	; 0x38
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08017884 	.word	0x08017884
 800820c:	080179f8 	.word	0x080179f8
 8008210:	080178dc 	.word	0x080178dc
 8008214:	0801b310 	.word	0x0801b310
 8008218:	08009425 	.word	0x08009425

0800821c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <netconn_disconnect+0x22>
 800822a:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <netconn_disconnect+0x44>)
 800822c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8008230:	490c      	ldr	r1, [pc, #48]	; (8008264 <netconn_disconnect+0x48>)
 8008232:	480d      	ldr	r0, [pc, #52]	; (8008268 <netconn_disconnect+0x4c>)
 8008234:	f00e f878 	bl	8016328 <iprintf>
 8008238:	f06f 030f 	mvn.w	r3, #15
 800823c:	e00c      	b.n	8008258 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008242:	f107 030c 	add.w	r3, r7, #12
 8008246:	4619      	mov	r1, r3
 8008248:	4808      	ldr	r0, [pc, #32]	; (800826c <netconn_disconnect+0x50>)
 800824a:	f7ff fed7 	bl	8007ffc <netconn_apimsg>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008254:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	08017884 	.word	0x08017884
 8008264:	08017a18 	.word	0x08017a18
 8008268:	080178dc 	.word	0x080178dc
 800826c:	080095a1 	.word	0x080095a1

08008270 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	; 0x30
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <netconn_send+0x24>
 8008280:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <netconn_send+0x4c>)
 8008282:	f240 32b2 	movw	r2, #946	; 0x3b2
 8008286:	490e      	ldr	r1, [pc, #56]	; (80082c0 <netconn_send+0x50>)
 8008288:	480e      	ldr	r0, [pc, #56]	; (80082c4 <netconn_send+0x54>)
 800828a:	f00e f84d 	bl	8016328 <iprintf>
 800828e:	f06f 030f 	mvn.w	r3, #15
 8008292:	e00e      	b.n	80082b2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800829c:	f107 030c 	add.w	r3, r7, #12
 80082a0:	4619      	mov	r1, r3
 80082a2:	4809      	ldr	r0, [pc, #36]	; (80082c8 <netconn_send+0x58>)
 80082a4:	f7ff feaa 	bl	8007ffc <netconn_apimsg>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80082ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	08017884 	.word	0x08017884
 80082c0:	08017b40 	.word	0x08017b40
 80082c4:	080178dc 	.word	0x080178dc
 80082c8:	080095dd 	.word	0x080095dd

080082cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	f107 0110 	add.w	r1, r7, #16
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	2201      	movs	r2, #1
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 f805 	bl	8008300 <netconn_write_vectors_partly>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b092      	sub	sp, #72	; 0x48
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4611      	mov	r1, r2
 800830c:	461a      	mov	r2, r3
 800830e:	460b      	mov	r3, r1
 8008310:	80fb      	strh	r3, [r7, #6]
 8008312:	4613      	mov	r3, r2
 8008314:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <netconn_write_vectors_partly+0x30>
 800831c:	4b4e      	ldr	r3, [pc, #312]	; (8008458 <netconn_write_vectors_partly+0x158>)
 800831e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008322:	494e      	ldr	r1, [pc, #312]	; (800845c <netconn_write_vectors_partly+0x15c>)
 8008324:	484e      	ldr	r0, [pc, #312]	; (8008460 <netconn_write_vectors_partly+0x160>)
 8008326:	f00d ffff 	bl	8016328 <iprintf>
 800832a:	f06f 030f 	mvn.w	r3, #15
 800832e:	e08e      	b.n	800844e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008338:	2b10      	cmp	r3, #16
 800833a:	d009      	beq.n	8008350 <netconn_write_vectors_partly+0x50>
 800833c:	4b46      	ldr	r3, [pc, #280]	; (8008458 <netconn_write_vectors_partly+0x158>)
 800833e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008342:	4948      	ldr	r1, [pc, #288]	; (8008464 <netconn_write_vectors_partly+0x164>)
 8008344:	4846      	ldr	r0, [pc, #280]	; (8008460 <netconn_write_vectors_partly+0x160>)
 8008346:	f00d ffef 	bl	8016328 <iprintf>
 800834a:	f06f 0305 	mvn.w	r3, #5
 800834e:	e07e      	b.n	800844e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	7f1b      	ldrb	r3, [r3, #28]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <netconn_write_vectors_partly+0x66>
 800835c:	797b      	ldrb	r3, [r7, #5]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <netconn_write_vectors_partly+0x6a>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <netconn_write_vectors_partly+0x6c>
 800836a:	2300      	movs	r3, #0
 800836c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <netconn_write_vectors_partly+0x84>
 8008378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d102      	bne.n	8008384 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800837e:	f06f 0305 	mvn.w	r3, #5
 8008382:	e064      	b.n	800844e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008388:	2300      	movs	r3, #0
 800838a:	643b      	str	r3, [r7, #64]	; 0x40
 800838c:	e015      	b.n	80083ba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800838e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	4413      	add	r3, r2
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800839a:	4413      	add	r3, r2
 800839c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800839e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4413      	add	r3, r2
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d202      	bcs.n	80083b4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80083ae:	f06f 0305 	mvn.w	r3, #5
 80083b2:	e04c      	b.n	800844e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80083b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b6:	3301      	adds	r3, #1
 80083b8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083be:	429a      	cmp	r2, r3
 80083c0:	dbe5      	blt.n	800838e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80083c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e040      	b.n	800844e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80083cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da0a      	bge.n	80083e8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80083d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80083d8:	f06f 0305 	mvn.w	r3, #5
 80083dc:	e037      	b.n	800844e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80083de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80083e2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80083f8:	797b      	ldrb	r3, [r7, #5]
 80083fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80083fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008406:	f107 0314 	add.w	r3, r7, #20
 800840a:	4619      	mov	r1, r3
 800840c:	4816      	ldr	r0, [pc, #88]	; (8008468 <netconn_write_vectors_partly+0x168>)
 800840e:	f7ff fdf5 	bl	8007ffc <netconn_apimsg>
 8008412:	4603      	mov	r3, r0
 8008414:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008418:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800841c:	2b00      	cmp	r3, #0
 800841e:	d114      	bne.n	800844a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800842c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008438:	429a      	cmp	r2, r3
 800843a:	d006      	beq.n	800844a <netconn_write_vectors_partly+0x14a>
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <netconn_write_vectors_partly+0x158>)
 800843e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008442:	490a      	ldr	r1, [pc, #40]	; (800846c <netconn_write_vectors_partly+0x16c>)
 8008444:	4806      	ldr	r0, [pc, #24]	; (8008460 <netconn_write_vectors_partly+0x160>)
 8008446:	f00d ff6f 	bl	8016328 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800844a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800844e:	4618      	mov	r0, r3
 8008450:	3748      	adds	r7, #72	; 0x48
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	08017884 	.word	0x08017884
 800845c:	08017b5c 	.word	0x08017b5c
 8008460:	080178dc 	.word	0x080178dc
 8008464:	08017b78 	.word	0x08017b78
 8008468:	08009a11 	.word	0x08009a11
 800846c:	08017b9c 	.word	0x08017b9c

08008470 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <netconn_err+0x12>
    return ERR_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e00d      	b.n	800849e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008482:	f00d fe33 	bl	80160ec <sys_arch_protect>
 8008486:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7a1b      	ldrb	r3, [r3, #8]
 800848c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f00d fe37 	bl	8016108 <sys_arch_unprotect>
  return err;
 800849a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80084b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b6:	f113 0f0d 	cmn.w	r3, #13
 80084ba:	d009      	beq.n	80084d0 <lwip_netconn_err_to_msg+0x28>
 80084bc:	f113 0f0d 	cmn.w	r3, #13
 80084c0:	dc0c      	bgt.n	80084dc <lwip_netconn_err_to_msg+0x34>
 80084c2:	f113 0f0f 	cmn.w	r3, #15
 80084c6:	d007      	beq.n	80084d8 <lwip_netconn_err_to_msg+0x30>
 80084c8:	f113 0f0e 	cmn.w	r3, #14
 80084cc:	d002      	beq.n	80084d4 <lwip_netconn_err_to_msg+0x2c>
 80084ce:	e005      	b.n	80084dc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <lwip_netconn_err_to_msg+0x54>)
 80084d2:	e00e      	b.n	80084f2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <lwip_netconn_err_to_msg+0x58>)
 80084d6:	e00c      	b.n	80084f2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <lwip_netconn_err_to_msg+0x5c>)
 80084da:	e00a      	b.n	80084f2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80084dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <lwip_netconn_err_to_msg+0x48>
 80084e4:	4b08      	ldr	r3, [pc, #32]	; (8008508 <lwip_netconn_err_to_msg+0x60>)
 80084e6:	227d      	movs	r2, #125	; 0x7d
 80084e8:	4908      	ldr	r1, [pc, #32]	; (800850c <lwip_netconn_err_to_msg+0x64>)
 80084ea:	4809      	ldr	r0, [pc, #36]	; (8008510 <lwip_netconn_err_to_msg+0x68>)
 80084ec:	f00d ff1c 	bl	8016328 <iprintf>
      return NULL;
 80084f0:	2300      	movs	r3, #0
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	0801b1b8 	.word	0x0801b1b8
 8008500:	0801b1b9 	.word	0x0801b1b9
 8008504:	0801b1ba 	.word	0x0801b1ba
 8008508:	08017bdc 	.word	0x08017bdc
 800850c:	08017c10 	.word	0x08017c10
 8008510:	08017c20 	.word	0x08017c20

08008514 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <lwip_netconn_is_err_msg+0x1c>
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <lwip_netconn_is_err_msg+0x5c>)
 8008526:	2285      	movs	r2, #133	; 0x85
 8008528:	4912      	ldr	r1, [pc, #72]	; (8008574 <lwip_netconn_is_err_msg+0x60>)
 800852a:	4813      	ldr	r0, [pc, #76]	; (8008578 <lwip_netconn_is_err_msg+0x64>)
 800852c:	f00d fefc 	bl	8016328 <iprintf>

  if (msg == &netconn_aborted) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a12      	ldr	r2, [pc, #72]	; (800857c <lwip_netconn_is_err_msg+0x68>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d104      	bne.n	8008542 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	22f3      	movs	r2, #243	; 0xf3
 800853c:	701a      	strb	r2, [r3, #0]
    return 1;
 800853e:	2301      	movs	r3, #1
 8008540:	e012      	b.n	8008568 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <lwip_netconn_is_err_msg+0x6c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d104      	bne.n	8008554 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	22f2      	movs	r2, #242	; 0xf2
 800854e:	701a      	strb	r2, [r3, #0]
    return 1;
 8008550:	2301      	movs	r3, #1
 8008552:	e009      	b.n	8008568 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <lwip_netconn_is_err_msg+0x70>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d104      	bne.n	8008566 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	22f1      	movs	r2, #241	; 0xf1
 8008560:	701a      	strb	r2, [r3, #0]
    return 1;
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	08017bdc 	.word	0x08017bdc
 8008574:	08017c48 	.word	0x08017c48
 8008578:	08017c20 	.word	0x08017c20
 800857c:	0801b1b8 	.word	0x0801b1b8
 8008580:	0801b1b9 	.word	0x0801b1b9
 8008584:	0801b1ba 	.word	0x0801b1ba

08008588 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <recv_udp+0x20>
 800859c:	4b34      	ldr	r3, [pc, #208]	; (8008670 <recv_udp+0xe8>)
 800859e:	22e5      	movs	r2, #229	; 0xe5
 80085a0:	4934      	ldr	r1, [pc, #208]	; (8008674 <recv_udp+0xec>)
 80085a2:	4835      	ldr	r0, [pc, #212]	; (8008678 <recv_udp+0xf0>)
 80085a4:	f00d fec0 	bl	8016328 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d105      	bne.n	80085ba <recv_udp+0x32>
 80085ae:	4b30      	ldr	r3, [pc, #192]	; (8008670 <recv_udp+0xe8>)
 80085b0:	22e6      	movs	r2, #230	; 0xe6
 80085b2:	4932      	ldr	r1, [pc, #200]	; (800867c <recv_udp+0xf4>)
 80085b4:	4830      	ldr	r0, [pc, #192]	; (8008678 <recv_udp+0xf0>)
 80085b6:	f00d feb7 	bl	8016328 <iprintf>
  conn = (struct netconn *)arg;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <recv_udp+0x44>
    pbuf_free(p);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f003 fdfd 	bl	800c1c4 <pbuf_free>
    return;
 80085ca:	e04d      	b.n	8008668 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d005      	beq.n	80085e2 <recv_udp+0x5a>
 80085d6:	4b26      	ldr	r3, [pc, #152]	; (8008670 <recv_udp+0xe8>)
 80085d8:	22ee      	movs	r2, #238	; 0xee
 80085da:	4929      	ldr	r1, [pc, #164]	; (8008680 <recv_udp+0xf8>)
 80085dc:	4826      	ldr	r0, [pc, #152]	; (8008678 <recv_udp+0xf0>)
 80085de:	f00d fea3 	bl	8016328 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	3310      	adds	r3, #16
 80085e6:	4618      	mov	r0, r3
 80085e8:	f00d fc65 	bl	8015eb6 <sys_mbox_valid>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f003 fde6 	bl	800c1c4 <pbuf_free>
    return;
 80085f8:	e036      	b.n	8008668 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80085fa:	2006      	movs	r0, #6
 80085fc:	f002 fec8 	bl	800b390 <memp_malloc>
 8008600:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <recv_udp+0x88>
    pbuf_free(p);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f003 fddb 	bl	800c1c4 <pbuf_free>
    return;
 800860e:	e02b      	b.n	8008668 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <recv_udp+0xa0>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	e000      	b.n	800862a <recv_udp+0xa2>
 8008628:	2300      	movs	r3, #0
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008632:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	891b      	ldrh	r3, [r3, #8]
 8008638:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	3310      	adds	r3, #16
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	4618      	mov	r0, r3
 8008642:	f00d fbc3 	bl	8015dcc <sys_mbox_trypost>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <recv_udp+0xcc>
    netbuf_delete(buf);
 800864c:	69b8      	ldr	r0, [r7, #24]
 800864e:	f001 fa89 	bl	8009b64 <netbuf_delete>
    return;
 8008652:	e009      	b.n	8008668 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <recv_udp+0xe0>
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	8afa      	ldrh	r2, [r7, #22]
 8008662:	2100      	movs	r1, #0
 8008664:	69f8      	ldr	r0, [r7, #28]
 8008666:	4798      	blx	r3
  }
}
 8008668:	3720      	adds	r7, #32
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	08017bdc 	.word	0x08017bdc
 8008674:	08017c54 	.word	0x08017c54
 8008678:	08017c20 	.word	0x08017c20
 800867c:	08017c78 	.word	0x08017c78
 8008680:	08017c98 	.word	0x08017c98

08008684 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <recv_tcp+0x22>
 8008698:	4b36      	ldr	r3, [pc, #216]	; (8008774 <recv_tcp+0xf0>)
 800869a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800869e:	4936      	ldr	r1, [pc, #216]	; (8008778 <recv_tcp+0xf4>)
 80086a0:	4836      	ldr	r0, [pc, #216]	; (800877c <recv_tcp+0xf8>)
 80086a2:	f00d fe41 	bl	8016328 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <recv_tcp+0x36>
 80086ac:	4b31      	ldr	r3, [pc, #196]	; (8008774 <recv_tcp+0xf0>)
 80086ae:	f240 122d 	movw	r2, #301	; 0x12d
 80086b2:	4933      	ldr	r1, [pc, #204]	; (8008780 <recv_tcp+0xfc>)
 80086b4:	4831      	ldr	r0, [pc, #196]	; (800877c <recv_tcp+0xf8>)
 80086b6:	f00d fe37 	bl	8016328 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80086ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <recv_tcp+0x4c>
 80086c2:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <recv_tcp+0xf0>)
 80086c4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80086c8:	492e      	ldr	r1, [pc, #184]	; (8008784 <recv_tcp+0x100>)
 80086ca:	482c      	ldr	r0, [pc, #176]	; (800877c <recv_tcp+0xf8>)
 80086cc:	f00d fe2c 	bl	8016328 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <recv_tcp+0x5c>
    return ERR_VAL;
 80086da:	f06f 0305 	mvn.w	r3, #5
 80086de:	e045      	b.n	800876c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d006      	beq.n	80086f8 <recv_tcp+0x74>
 80086ea:	4b22      	ldr	r3, [pc, #136]	; (8008774 <recv_tcp+0xf0>)
 80086ec:	f240 1235 	movw	r2, #309	; 0x135
 80086f0:	4925      	ldr	r1, [pc, #148]	; (8008788 <recv_tcp+0x104>)
 80086f2:	4822      	ldr	r0, [pc, #136]	; (800877c <recv_tcp+0xf8>)
 80086f4:	f00d fe18 	bl	8016328 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3310      	adds	r3, #16
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00d fbda 	bl	8015eb6 <sys_mbox_valid>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	891b      	ldrh	r3, [r3, #8]
 8008712:	4619      	mov	r1, r3
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f004 fbbb 	bl	800ce90 <tcp_recved>
      pbuf_free(p);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f003 fd52 	bl	800c1c4 <pbuf_free>
    }
    return ERR_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e023      	b.n	800876c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <recv_tcp+0xb2>
    msg = p;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	891b      	ldrh	r3, [r3, #8]
 8008732:	83fb      	strh	r3, [r7, #30]
 8008734:	e003      	b.n	800873e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008736:	4b15      	ldr	r3, [pc, #84]	; (800878c <recv_tcp+0x108>)
 8008738:	61bb      	str	r3, [r7, #24]
    len = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	3310      	adds	r3, #16
 8008742:	69b9      	ldr	r1, [r7, #24]
 8008744:	4618      	mov	r0, r3
 8008746:	f00d fb41 	bl	8015dcc <sys_mbox_trypost>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	e00a      	b.n	800876c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <recv_tcp+0xe6>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	8bfa      	ldrh	r2, [r7, #30]
 8008764:	2100      	movs	r1, #0
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	4798      	blx	r3
  }

  return ERR_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	08017bdc 	.word	0x08017bdc
 8008778:	08017cb8 	.word	0x08017cb8
 800877c:	08017c20 	.word	0x08017c20
 8008780:	08017cdc 	.word	0x08017cdc
 8008784:	08017cfc 	.word	0x08017cfc
 8008788:	08017d14 	.word	0x08017d14
 800878c:	0801b1ba 	.word	0x0801b1ba

08008790 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <poll_tcp+0x22>
 80087a4:	4b29      	ldr	r3, [pc, #164]	; (800884c <poll_tcp+0xbc>)
 80087a6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80087aa:	4929      	ldr	r1, [pc, #164]	; (8008850 <poll_tcp+0xc0>)
 80087ac:	4829      	ldr	r0, [pc, #164]	; (8008854 <poll_tcp+0xc4>)
 80087ae:	f00d fdbb 	bl	8016328 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d104      	bne.n	80087c4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80087ba:	2101      	movs	r1, #1
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 ff5b 	bl	8009678 <lwip_netconn_do_writemore>
 80087c2:	e016      	b.n	80087f2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d112      	bne.n	80087f2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <poll_tcp+0x5a>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	7a5b      	ldrb	r3, [r3, #9]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	7a5a      	ldrb	r2, [r3, #9]
 80087e4:	3a01      	subs	r2, #1
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80087ea:	2101      	movs	r1, #1
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fb3b 	bl	8008e68 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7f1b      	ldrb	r3, [r3, #28]
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d021      	beq.n	8008842 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01d      	beq.n	8008842 <poll_tcp+0xb2>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800880e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008812:	d316      	bcc.n	8008842 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800881c:	2b04      	cmp	r3, #4
 800881e:	d810      	bhi.n	8008842 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	7f1b      	ldrb	r3, [r3, #28]
 8008824:	f023 0310 	bic.w	r3, r3, #16
 8008828:	b2da      	uxtb	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <poll_tcp+0xb2>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	2200      	movs	r2, #0
 800883c:	2102      	movs	r1, #2
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08017bdc 	.word	0x08017bdc
 8008850:	08017d34 	.word	0x08017d34
 8008854:	08017c20 	.word	0x08017c20

08008858 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <sent_tcp+0x26>
 8008870:	4b20      	ldr	r3, [pc, #128]	; (80088f4 <sent_tcp+0x9c>)
 8008872:	f240 1293 	movw	r2, #403	; 0x193
 8008876:	4920      	ldr	r1, [pc, #128]	; (80088f8 <sent_tcp+0xa0>)
 8008878:	4820      	ldr	r0, [pc, #128]	; (80088fc <sent_tcp+0xa4>)
 800887a:	f00d fd55 	bl	8016328 <iprintf>

  if (conn) {
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d032      	beq.n	80088ea <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d104      	bne.n	8008896 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800888c:	2101      	movs	r1, #1
 800888e:	6978      	ldr	r0, [r7, #20]
 8008890:	f000 fef2 	bl	8009678 <lwip_netconn_do_writemore>
 8008894:	e007      	b.n	80088a6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b04      	cmp	r3, #4
 800889c:	d103      	bne.n	80088a6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800889e:	2101      	movs	r1, #1
 80088a0:	6978      	ldr	r0, [r7, #20]
 80088a2:	f000 fae1 	bl	8008e68 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01d      	beq.n	80088ea <sent_tcp+0x92>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80088b6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80088ba:	d316      	bcc.n	80088ea <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d810      	bhi.n	80088ea <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	7f1b      	ldrb	r3, [r3, #28]
 80088cc:	f023 0310 	bic.w	r3, r3, #16
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <sent_tcp+0x92>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	2102      	movs	r1, #2
 80088e6:	6978      	ldr	r0, [r7, #20]
 80088e8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	08017bdc 	.word	0x08017bdc
 80088f8:	08017d34 	.word	0x08017d34
 80088fc:	08017c20 	.word	0x08017c20

08008900 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <err_tcp+0x24>
 8008916:	4b5f      	ldr	r3, [pc, #380]	; (8008a94 <err_tcp+0x194>)
 8008918:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800891c:	495e      	ldr	r1, [pc, #376]	; (8008a98 <err_tcp+0x198>)
 800891e:	485f      	ldr	r0, [pc, #380]	; (8008a9c <err_tcp+0x19c>)
 8008920:	f00d fd02 	bl	8016328 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008924:	f00d fbe2 	bl	80160ec <sys_arch_protect>
 8008928:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2200      	movs	r2, #0
 800892e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	7f1b      	ldrb	r3, [r3, #28]
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2200      	movs	r2, #0
 800894e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008950:	69b8      	ldr	r0, [r7, #24]
 8008952:	f00d fbd9 	bl	8016108 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <err_tcp+0x6a>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2200      	movs	r2, #0
 8008964:	2104      	movs	r1, #4
 8008966:	69f8      	ldr	r0, [r7, #28]
 8008968:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <err_tcp+0x7e>
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	69f8      	ldr	r0, [r7, #28]
 800897c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <err_tcp+0x92>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2200      	movs	r2, #0
 800898c:	2102      	movs	r1, #2
 800898e:	69f8      	ldr	r0, [r7, #28]
 8008990:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fd86 	bl	80084a8 <lwip_netconn_err_to_msg>
 800899c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3310      	adds	r3, #16
 80089a2:	4618      	mov	r0, r3
 80089a4:	f00d fa87 	bl	8015eb6 <sys_mbox_valid>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	3310      	adds	r3, #16
 80089b2:	6939      	ldr	r1, [r7, #16]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f00d fa09 	bl	8015dcc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	3314      	adds	r3, #20
 80089be:	4618      	mov	r0, r3
 80089c0:	f00d fa79 	bl	8015eb6 <sys_mbox_valid>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	3314      	adds	r3, #20
 80089ce:	6939      	ldr	r1, [r7, #16]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f00d f9fb 	bl	8015dcc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d005      	beq.n	80089e8 <err_tcp+0xe8>
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d002      	beq.n	80089e8 <err_tcp+0xe8>
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d143      	bne.n	8008a70 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	7f1b      	ldrb	r3, [r3, #28]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bf14      	ite	ne
 80089f4:	2301      	movne	r3, #1
 80089f6:	2300      	moveq	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	7f1b      	ldrb	r3, [r3, #28]
 8008a00:	f023 0304 	bic.w	r3, r3, #4
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d13b      	bne.n	8008a88 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <err_tcp+0x126>
 8008a18:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <err_tcp+0x194>)
 8008a1a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008a1e:	4920      	ldr	r1, [pc, #128]	; (8008aa0 <err_tcp+0x1a0>)
 8008a20:	481e      	ldr	r0, [pc, #120]	; (8008a9c <err_tcp+0x19c>)
 8008a22:	f00d fc81 	bl	8016328 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d104      	bne.n	8008a36 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	2200      	movs	r2, #0
 8008a32:	711a      	strb	r2, [r3, #4]
 8008a34:	e003      	b.n	8008a3e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008a48:	68b8      	ldr	r0, [r7, #8]
 8008a4a:	f00d fac5 	bl	8015fd8 <sys_sem_valid>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <err_tcp+0x162>
 8008a54:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <err_tcp+0x194>)
 8008a56:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008a5a:	4912      	ldr	r1, [pc, #72]	; (8008aa4 <err_tcp+0x1a4>)
 8008a5c:	480f      	ldr	r0, [pc, #60]	; (8008a9c <err_tcp+0x19c>)
 8008a5e:	f00d fc63 	bl	8016328 <iprintf>
      conn->current_msg = NULL;
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2200      	movs	r2, #0
 8008a66:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008a68:	68b8      	ldr	r0, [r7, #8]
 8008a6a:	f00d fa9b 	bl	8015fa4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008a6e:	e00b      	b.n	8008a88 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d008      	beq.n	8008a8a <err_tcp+0x18a>
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <err_tcp+0x194>)
 8008a7a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008a7e:	490a      	ldr	r1, [pc, #40]	; (8008aa8 <err_tcp+0x1a8>)
 8008a80:	4806      	ldr	r0, [pc, #24]	; (8008a9c <err_tcp+0x19c>)
 8008a82:	f00d fc51 	bl	8016328 <iprintf>
  }
}
 8008a86:	e000      	b.n	8008a8a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008a88:	bf00      	nop
}
 8008a8a:	bf00      	nop
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08017bdc 	.word	0x08017bdc
 8008a98:	08017d34 	.word	0x08017d34
 8008a9c:	08017c20 	.word	0x08017c20
 8008aa0:	08017d44 	.word	0x08017d44
 8008aa4:	08017d60 	.word	0x08017d60
 8008aa8:	08017d7c 	.word	0x08017d7c

08008aac <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f005 f9c5 	bl	800de4c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008ac2:	490a      	ldr	r1, [pc, #40]	; (8008aec <setup_tcp+0x40>)
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f005 f9d3 	bl	800de70 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008aca:	4909      	ldr	r1, [pc, #36]	; (8008af0 <setup_tcp+0x44>)
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f005 f9f1 	bl	800deb4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	4907      	ldr	r1, [pc, #28]	; (8008af4 <setup_tcp+0x48>)
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f005 fa48 	bl	800df6c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008adc:	4906      	ldr	r1, [pc, #24]	; (8008af8 <setup_tcp+0x4c>)
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f005 fa0a 	bl	800def8 <tcp_err>
}
 8008ae4:	bf00      	nop
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08008685 	.word	0x08008685
 8008af0:	08008859 	.word	0x08008859
 8008af4:	08008791 	.word	0x08008791
 8008af8:	08008901 	.word	0x08008901

08008afc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d006      	beq.n	8008b20 <pcb_new+0x24>
 8008b12:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <pcb_new+0xc4>)
 8008b14:	f240 2265 	movw	r2, #613	; 0x265
 8008b18:	492a      	ldr	r1, [pc, #168]	; (8008bc4 <pcb_new+0xc8>)
 8008b1a:	482b      	ldr	r0, [pc, #172]	; (8008bc8 <pcb_new+0xcc>)
 8008b1c:	f00d fc04 	bl	8016328 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b2a:	2b10      	cmp	r3, #16
 8008b2c:	d022      	beq.n	8008b74 <pcb_new+0x78>
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d133      	bne.n	8008b9a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681c      	ldr	r4, [r3, #0]
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f00a fce6 	bl	801350a <udp_new_ip_type>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d02a      	beq.n	8008ba2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b22      	cmp	r3, #34	; 0x22
 8008b54:	d104      	bne.n	8008b60 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6858      	ldr	r0, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4917      	ldr	r1, [pc, #92]	; (8008bcc <pcb_new+0xd0>)
 8008b6e:	f00a fc53 	bl	8013418 <udp_recv>
      }
      break;
 8008b72:	e016      	b.n	8008ba2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681c      	ldr	r4, [r3, #0]
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f005 f958 	bl	800de30 <tcp_new_ip_type>
 8008b80:	4603      	mov	r3, r0
 8008b82:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff ff8a 	bl	8008aac <setup_tcp>
      }
      break;
 8008b98:	e005      	b.n	8008ba6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	22fa      	movs	r2, #250	; 0xfa
 8008b9e:	711a      	strb	r2, [r3, #4]
      return;
 8008ba0:	e00a      	b.n	8008bb8 <pcb_new+0xbc>
      break;
 8008ba2:	bf00      	nop
 8008ba4:	e000      	b.n	8008ba8 <pcb_new+0xac>
      break;
 8008ba6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	22ff      	movs	r2, #255	; 0xff
 8008bb6:	711a      	strb	r2, [r3, #4]
  }
}
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08017bdc 	.word	0x08017bdc
 8008bc4:	08017dc0 	.word	0x08017dc0
 8008bc8:	08017c20 	.word	0x08017c20
 8008bcc:	08008589 	.word	0x08008589

08008bd0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff ff85 	bl	8008afc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008c0c:	2007      	movs	r0, #7
 8008c0e:	f002 fbbf 	bl	800b390 <memp_malloc>
 8008c12:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <netconn_alloc+0x22>
    return NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e052      	b.n	8008cc4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	79fa      	ldrb	r2, [r7, #7]
 8008c28:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d004      	beq.n	8008c44 <netconn_alloc+0x48>
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d105      	bne.n	8008c4a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008c3e:	2306      	movs	r3, #6
 8008c40:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008c42:	e00a      	b.n	8008c5a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008c44:	2306      	movs	r3, #6
 8008c46:	617b      	str	r3, [r7, #20]
      break;
 8008c48:	e007      	b.n	8008c5a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008c4a:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <netconn_alloc+0xd0>)
 8008c4c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008c50:	491f      	ldr	r1, [pc, #124]	; (8008cd0 <netconn_alloc+0xd4>)
 8008c52:	4820      	ldr	r0, [pc, #128]	; (8008cd4 <netconn_alloc+0xd8>)
 8008c54:	f00d fb68 	bl	8016328 <iprintf>
      goto free_and_return;
 8008c58:	e02f      	b.n	8008cba <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3310      	adds	r3, #16
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00d f87f 	bl	8015d64 <sys_mbox_new>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d125      	bne.n	8008cb8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	330c      	adds	r3, #12
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f00d f93d 	bl	8015ef2 <sys_sem_new>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3310      	adds	r3, #16
 8008c82:	4618      	mov	r0, r3
 8008c84:	f00d f890 	bl	8015da8 <sys_mbox_free>
    goto free_and_return;
 8008c88:	e017      	b.n	8008cba <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f00d f922 	bl	8015ed8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	7cfa      	ldrb	r2, [r7, #19]
 8008cb2:	771a      	strb	r2, [r3, #28]
  return conn;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	e005      	b.n	8008cc4 <netconn_alloc+0xc8>
    goto free_and_return;
 8008cb8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	2007      	movs	r0, #7
 8008cbe:	f002 fbdd 	bl	800b47c <memp_free>
  return NULL;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	08017bdc 	.word	0x08017bdc
 8008cd0:	08017de0 	.word	0x08017de0
 8008cd4:	08017c20 	.word	0x08017c20

08008cd8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <netconn_free+0x1e>
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <netconn_free+0x80>)
 8008cea:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008cee:	491b      	ldr	r1, [pc, #108]	; (8008d5c <netconn_free+0x84>)
 8008cf0:	481b      	ldr	r0, [pc, #108]	; (8008d60 <netconn_free+0x88>)
 8008cf2:	f00d fb19 	bl	8016328 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3310      	adds	r3, #16
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f00d f8db 	bl	8015eb6 <sys_mbox_valid>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d006      	beq.n	8008d14 <netconn_free+0x3c>
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <netconn_free+0x80>)
 8008d08:	f240 3223 	movw	r2, #803	; 0x323
 8008d0c:	4915      	ldr	r1, [pc, #84]	; (8008d64 <netconn_free+0x8c>)
 8008d0e:	4814      	ldr	r0, [pc, #80]	; (8008d60 <netconn_free+0x88>)
 8008d10:	f00d fb0a 	bl	8016328 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3314      	adds	r3, #20
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f00d f8cc 	bl	8015eb6 <sys_mbox_valid>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d006      	beq.n	8008d32 <netconn_free+0x5a>
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <netconn_free+0x80>)
 8008d26:	f240 3226 	movw	r2, #806	; 0x326
 8008d2a:	490f      	ldr	r1, [pc, #60]	; (8008d68 <netconn_free+0x90>)
 8008d2c:	480c      	ldr	r0, [pc, #48]	; (8008d60 <netconn_free+0x88>)
 8008d2e:	f00d fafb 	bl	8016328 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	330c      	adds	r3, #12
 8008d36:	4618      	mov	r0, r3
 8008d38:	f00d f941 	bl	8015fbe <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	4618      	mov	r0, r3
 8008d42:	f00d f95a 	bl	8015ffa <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	2007      	movs	r0, #7
 8008d4a:	f002 fb97 	bl	800b47c <memp_free>
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08017bdc 	.word	0x08017bdc
 8008d5c:	08017e08 	.word	0x08017e08
 8008d60:	08017c20 	.word	0x08017c20
 8008d64:	08017e38 	.word	0x08017e38
 8008d68:	08017e74 	.word	0x08017e74

08008d6c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3310      	adds	r3, #16
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00d f89c 	bl	8015eb6 <sys_mbox_valid>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d02f      	beq.n	8008de4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d84:	e018      	b.n	8008db8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d8e:	2b10      	cmp	r3, #16
 8008d90:	d10e      	bne.n	8008db0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f107 020f 	add.w	r2, r7, #15
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fbba 	bl	8008514 <lwip_netconn_is_err_msg>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d108      	bne.n	8008db8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f003 fa0b 	bl	800c1c4 <pbuf_free>
 8008dae:	e003      	b.n	8008db8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fed6 	bl	8009b64 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3310      	adds	r3, #16
 8008dbc:	f107 0210 	add.w	r2, r7, #16
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f00d f85b 	bl	8015e7e <sys_arch_mbox_tryfetch>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dce:	d1da      	bne.n	8008d86 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3310      	adds	r3, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f00c ffe7 	bl	8015da8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3310      	adds	r3, #16
 8008dde:	4618      	mov	r0, r3
 8008de0:	f00d f87a 	bl	8015ed8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3314      	adds	r3, #20
 8008de8:	4618      	mov	r0, r3
 8008dea:	f00d f864 	bl	8015eb6 <sys_mbox_valid>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d034      	beq.n	8008e5e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008df4:	e01d      	b.n	8008e32 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f107 020e 	add.w	r2, r7, #14
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fb88 	bl	8008514 <lwip_netconn_is_err_msg>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d113      	bne.n	8008e32 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008e0e:	6978      	ldr	r0, [r7, #20]
 8008e10:	f7ff ffac 	bl	8008d6c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d007      	beq.n	8008e2c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f003 ffcf 	bl	800cdc4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008e2c:	6978      	ldr	r0, [r7, #20]
 8008e2e:	f7ff ff53 	bl	8008cd8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3314      	adds	r3, #20
 8008e36:	f107 0210 	add.w	r2, r7, #16
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f00d f81e 	bl	8015e7e <sys_arch_mbox_tryfetch>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d1d5      	bne.n	8008df6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	3314      	adds	r3, #20
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f00c ffaa 	bl	8015da8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3314      	adds	r3, #20
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f00d f83d 	bl	8015ed8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008e5e:	bf00      	nop
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <lwip_netconn_do_close_internal+0x24>
 8008e7e:	4b87      	ldr	r3, [pc, #540]	; (800909c <lwip_netconn_do_close_internal+0x234>)
 8008e80:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008e84:	4986      	ldr	r1, [pc, #536]	; (80090a0 <lwip_netconn_do_close_internal+0x238>)
 8008e86:	4887      	ldr	r0, [pc, #540]	; (80090a4 <lwip_netconn_do_close_internal+0x23c>)
 8008e88:	f00d fa4e 	bl	8016328 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d006      	beq.n	8008ea6 <lwip_netconn_do_close_internal+0x3e>
 8008e98:	4b80      	ldr	r3, [pc, #512]	; (800909c <lwip_netconn_do_close_internal+0x234>)
 8008e9a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008e9e:	4982      	ldr	r1, [pc, #520]	; (80090a8 <lwip_netconn_do_close_internal+0x240>)
 8008ea0:	4880      	ldr	r0, [pc, #512]	; (80090a4 <lwip_netconn_do_close_internal+0x23c>)
 8008ea2:	f00d fa41 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d006      	beq.n	8008ebc <lwip_netconn_do_close_internal+0x54>
 8008eae:	4b7b      	ldr	r3, [pc, #492]	; (800909c <lwip_netconn_do_close_internal+0x234>)
 8008eb0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008eb4:	497d      	ldr	r1, [pc, #500]	; (80090ac <lwip_netconn_do_close_internal+0x244>)
 8008eb6:	487b      	ldr	r0, [pc, #492]	; (80090a4 <lwip_netconn_do_close_internal+0x23c>)
 8008eb8:	f00d fa36 	bl	8016328 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <lwip_netconn_do_close_internal+0x6a>
 8008ec4:	4b75      	ldr	r3, [pc, #468]	; (800909c <lwip_netconn_do_close_internal+0x234>)
 8008ec6:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008eca:	4979      	ldr	r1, [pc, #484]	; (80090b0 <lwip_netconn_do_close_internal+0x248>)
 8008ecc:	4875      	ldr	r0, [pc, #468]	; (80090a4 <lwip_netconn_do_close_internal+0x23c>)
 8008ece:	f00d fa2b 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <lwip_netconn_do_close_internal+0x80>
 8008eda:	4b70      	ldr	r3, [pc, #448]	; (800909c <lwip_netconn_do_close_internal+0x234>)
 8008edc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008ee0:	4974      	ldr	r1, [pc, #464]	; (80090b4 <lwip_netconn_do_close_internal+0x24c>)
 8008ee2:	4870      	ldr	r0, [pc, #448]	; (80090a4 <lwip_netconn_do_close_internal+0x23c>)
 8008ee4:	f00d fa20 	bl	8016328 <iprintf>

  tpcb = conn->pcb.tcp;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	7a1b      	ldrb	r3, [r3, #8]
 8008ef4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d102      	bne.n	8008f12 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	75bb      	strb	r3, [r7, #22]
 8008f10:	e01f      	b.n	8008f52 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00e      	beq.n	8008f36 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008f1c:	2b05      	cmp	r3, #5
 8008f1e:	d007      	beq.n	8008f30 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008f24:	2b06      	cmp	r3, #6
 8008f26:	d003      	beq.n	8008f30 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d102      	bne.n	8008f36 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75bb      	strb	r3, [r7, #22]
 8008f34:	e00d      	b.n	8008f52 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008f36:	7b7b      	ldrb	r3, [r7, #13]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <lwip_netconn_do_close_internal+0xe6>
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	8b5b      	ldrh	r3, [r3, #26]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	75bb      	strb	r3, [r7, #22]
 8008f4c:	e001      	b.n	8008f52 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008f52:	7dbb      	ldrb	r3, [r7, #22]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6938      	ldr	r0, [r7, #16]
 8008f5c:	f004 ff76 	bl	800de4c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	7d1b      	ldrb	r3, [r3, #20]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d104      	bne.n	8008f72 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6938      	ldr	r0, [r7, #16]
 8008f6c:	f004 ffe6 	bl	800df3c <tcp_accept>
 8008f70:	e01d      	b.n	8008fae <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f004 ff78 	bl	800de70 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008f80:	2100      	movs	r1, #0
 8008f82:	6938      	ldr	r0, [r7, #16]
 8008f84:	f004 ffda 	bl	800df3c <tcp_accept>
    }
    if (shut_tx) {
 8008f88:	7b7b      	ldrb	r3, [r7, #13]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6938      	ldr	r0, [r7, #16]
 8008f92:	f004 ff8f 	bl	800deb4 <tcp_sent>
    }
    if (shut_close) {
 8008f96:	7dbb      	ldrb	r3, [r7, #22]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d008      	beq.n	8008fae <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f004 ffe3 	bl	800df6c <tcp_poll>
      tcp_err(tpcb, NULL);
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6938      	ldr	r0, [r7, #16]
 8008faa:	f004 ffa5 	bl	800def8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008fae:	7dbb      	ldrb	r3, [r7, #22]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008fb4:	6938      	ldr	r0, [r7, #16]
 8008fb6:	f003 fdbf 	bl	800cb38 <tcp_close>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]
 8008fbe:	e007      	b.n	8008fd0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	7b7a      	ldrb	r2, [r7, #13]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6938      	ldr	r0, [r7, #16]
 8008fc8:	f003 fde2 	bl	800cb90 <tcp_shutdown>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	757b      	strb	r3, [r7, #21]
 8008fdc:	e016      	b.n	800900c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d10f      	bne.n	8009008 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	7a5b      	ldrb	r3, [r3, #9]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10c      	bne.n	800900c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008ffc:	6938      	ldr	r0, [r7, #16]
 8008ffe:	f003 fee1 	bl	800cdc4 <tcp_abort>
          err = ERR_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
 8009006:	e001      	b.n	800900c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009008:	2301      	movs	r3, #1
 800900a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800900c:	7d7b      	ldrb	r3, [r7, #21]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d052      	beq.n	80090b8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	330c      	adds	r3, #12
 800901a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	7dfa      	ldrb	r2, [r7, #23]
 8009022:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d129      	bne.n	800908c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009038:	7dbb      	ldrb	r3, [r7, #22]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d005      	beq.n	8009058 <lwip_netconn_do_close_internal+0x1f0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2200      	movs	r2, #0
 8009052:	2104      	movs	r1, #4
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	4798      	blx	r3
      }
      if (shut_rx) {
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <lwip_netconn_do_close_internal+0x20a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
      }
      if (shut_tx) {
 8009072:	7b7b      	ldrb	r3, [r7, #13]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <lwip_netconn_do_close_internal+0x224>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	2200      	movs	r2, #0
 8009086:	2102      	movs	r1, #2
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009092:	68b8      	ldr	r0, [r7, #8]
 8009094:	f00c ff86 	bl	8015fa4 <sys_sem_signal>
    }
    return ERR_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e03c      	b.n	8009116 <lwip_netconn_do_close_internal+0x2ae>
 800909c:	08017bdc 	.word	0x08017bdc
 80090a0:	08017eb0 	.word	0x08017eb0
 80090a4:	08017c20 	.word	0x08017c20
 80090a8:	08017ec0 	.word	0x08017ec0
 80090ac:	08017ee0 	.word	0x08017ee0
 80090b0:	08017f04 	.word	0x08017f04
 80090b4:	08017d44 	.word	0x08017d44
  }
  if (!close_finished) {
 80090b8:	7d7b      	ldrb	r3, [r7, #21]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d11e      	bne.n	80090fc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	7d1b      	ldrb	r3, [r3, #20]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d106      	bne.n	80090d4 <lwip_netconn_do_close_internal+0x26c>
 80090c6:	4b16      	ldr	r3, [pc, #88]	; (8009120 <lwip_netconn_do_close_internal+0x2b8>)
 80090c8:	f240 4241 	movw	r2, #1089	; 0x441
 80090cc:	4915      	ldr	r1, [pc, #84]	; (8009124 <lwip_netconn_do_close_internal+0x2bc>)
 80090ce:	4816      	ldr	r0, [pc, #88]	; (8009128 <lwip_netconn_do_close_internal+0x2c0>)
 80090d0:	f00d f92a 	bl	8016328 <iprintf>
    if (shut_tx) {
 80090d4:	7b7b      	ldrb	r3, [r7, #13]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80090da:	4914      	ldr	r1, [pc, #80]	; (800912c <lwip_netconn_do_close_internal+0x2c4>)
 80090dc:	6938      	ldr	r0, [r7, #16]
 80090de:	f004 fee9 	bl	800deb4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80090e2:	2201      	movs	r2, #1
 80090e4:	4912      	ldr	r1, [pc, #72]	; (8009130 <lwip_netconn_do_close_internal+0x2c8>)
 80090e6:	6938      	ldr	r0, [r7, #16]
 80090e8:	f004 ff40 	bl	800df6c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80090ec:	4911      	ldr	r1, [pc, #68]	; (8009134 <lwip_netconn_do_close_internal+0x2cc>)
 80090ee:	6938      	ldr	r0, [r7, #16]
 80090f0:	f004 ff02 	bl	800def8 <tcp_err>
    tcp_arg(tpcb, conn);
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	6938      	ldr	r0, [r7, #16]
 80090f8:	f004 fea8 	bl	800de4c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80090fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d106      	bne.n	8009112 <lwip_netconn_do_close_internal+0x2aa>
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <lwip_netconn_do_close_internal+0x2b8>)
 8009106:	f240 424d 	movw	r2, #1101	; 0x44d
 800910a:	490b      	ldr	r1, [pc, #44]	; (8009138 <lwip_netconn_do_close_internal+0x2d0>)
 800910c:	4806      	ldr	r0, [pc, #24]	; (8009128 <lwip_netconn_do_close_internal+0x2c0>)
 800910e:	f00d f90b 	bl	8016328 <iprintf>
  return err;
 8009112:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	08017bdc 	.word	0x08017bdc
 8009124:	08017f18 	.word	0x08017f18
 8009128:	08017c20 	.word	0x08017c20
 800912c:	08008859 	.word	0x08008859
 8009130:	08008791 	.word	0x08008791
 8009134:	08008901 	.word	0x08008901
 8009138:	08017f3c 	.word	0x08017f3c

0800913c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00d      	beq.n	8009172 <lwip_netconn_do_delconn+0x36>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009160:	2b10      	cmp	r3, #16
 8009162:	d006      	beq.n	8009172 <lwip_netconn_do_delconn+0x36>
 8009164:	4b60      	ldr	r3, [pc, #384]	; (80092e8 <lwip_netconn_do_delconn+0x1ac>)
 8009166:	f240 425e 	movw	r2, #1118	; 0x45e
 800916a:	4960      	ldr	r1, [pc, #384]	; (80092ec <lwip_netconn_do_delconn+0x1b0>)
 800916c:	4860      	ldr	r0, [pc, #384]	; (80092f0 <lwip_netconn_do_delconn+0x1b4>)
 800916e:	f00d f8db 	bl	8016328 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <lwip_netconn_do_delconn+0x48>
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d002      	beq.n	8009184 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d109      	bne.n	8009198 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009184:	7afb      	ldrb	r3, [r7, #11]
 8009186:	2b03      	cmp	r3, #3
 8009188:	d10a      	bne.n	80091a0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	7f1b      	ldrb	r3, [r3, #28]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	22fb      	movs	r2, #251	; 0xfb
 800919c:	711a      	strb	r2, [r3, #4]
 800919e:	e097      	b.n	80092d0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d10d      	bne.n	80091c2 <lwip_netconn_do_delconn+0x86>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	7f1b      	ldrb	r3, [r3, #28]
 80091ac:	f003 0304 	and.w	r3, r3, #4
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d106      	bne.n	80091c2 <lwip_netconn_do_delconn+0x86>
 80091b4:	4b4c      	ldr	r3, [pc, #304]	; (80092e8 <lwip_netconn_do_delconn+0x1ac>)
 80091b6:	f240 427a 	movw	r2, #1146	; 0x47a
 80091ba:	494e      	ldr	r1, [pc, #312]	; (80092f4 <lwip_netconn_do_delconn+0x1b8>)
 80091bc:	484c      	ldr	r0, [pc, #304]	; (80092f0 <lwip_netconn_do_delconn+0x1b4>)
 80091be:	f00d f8b3 	bl	8016328 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fdcd 	bl	8008d6c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d05f      	beq.n	800929c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e6:	2b10      	cmp	r3, #16
 80091e8:	d00d      	beq.n	8009206 <lwip_netconn_do_delconn+0xca>
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d151      	bne.n	8009292 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	4618      	mov	r0, r3
 8009200:	f00a f92a 	bl	8013458 <udp_remove>
          break;
 8009204:	e046      	b.n	8009294 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <lwip_netconn_do_delconn+0xe2>
 8009210:	4b35      	ldr	r3, [pc, #212]	; (80092e8 <lwip_netconn_do_delconn+0x1ac>)
 8009212:	f240 4294 	movw	r2, #1172	; 0x494
 8009216:	4938      	ldr	r1, [pc, #224]	; (80092f8 <lwip_netconn_do_delconn+0x1bc>)
 8009218:	4835      	ldr	r0, [pc, #212]	; (80092f0 <lwip_netconn_do_delconn+0x1b4>)
 800921a:	f00d f885 	bl	8016328 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2204      	movs	r2, #4
 8009224:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2203      	movs	r2, #3
 800922a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2100      	movs	r1, #0
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff fe14 	bl	8008e68 <lwip_netconn_do_close_internal>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d04b      	beq.n	80092de <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	785b      	ldrb	r3, [r3, #1]
 800924c:	2b04      	cmp	r3, #4
 800924e:	d006      	beq.n	800925e <lwip_netconn_do_delconn+0x122>
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <lwip_netconn_do_delconn+0x1ac>)
 8009252:	f240 429a 	movw	r2, #1178	; 0x49a
 8009256:	4929      	ldr	r1, [pc, #164]	; (80092fc <lwip_netconn_do_delconn+0x1c0>)
 8009258:	4825      	ldr	r0, [pc, #148]	; (80092f0 <lwip_netconn_do_delconn+0x1b4>)
 800925a:	f00d f865 	bl	8016328 <iprintf>
            UNLOCK_TCPIP_CORE();
 800925e:	4828      	ldr	r0, [pc, #160]	; (8009300 <lwip_netconn_do_delconn+0x1c4>)
 8009260:	f00c ff11 	bl	8016086 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	330c      	adds	r3, #12
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f00c fe68 	bl	8015f42 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009272:	4823      	ldr	r0, [pc, #140]	; (8009300 <lwip_netconn_do_delconn+0x1c4>)
 8009274:	f00c fef8 	bl	8016068 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02d      	beq.n	80092de <lwip_netconn_do_delconn+0x1a2>
 8009282:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <lwip_netconn_do_delconn+0x1ac>)
 8009284:	f240 429e 	movw	r2, #1182	; 0x49e
 8009288:	491c      	ldr	r1, [pc, #112]	; (80092fc <lwip_netconn_do_delconn+0x1c0>)
 800928a:	4819      	ldr	r0, [pc, #100]	; (80092f0 <lwip_netconn_do_delconn+0x1b4>)
 800928c:	f00d f84c 	bl	8016328 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009290:	e025      	b.n	80092de <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009292:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2200      	movs	r2, #0
 800929a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <lwip_netconn_do_delconn+0x17a>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	6810      	ldr	r0, [r2, #0]
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <lwip_netconn_do_delconn+0x194>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	6810      	ldr	r0, [r2, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	2102      	movs	r1, #2
 80092ce:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	330c      	adds	r3, #12
 80092d6:	4618      	mov	r0, r3
 80092d8:	f00c fe7e 	bl	8015fd8 <sys_sem_valid>
 80092dc:	e000      	b.n	80092e0 <lwip_netconn_do_delconn+0x1a4>
          return;
 80092de:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	08017bdc 	.word	0x08017bdc
 80092ec:	08017f4c 	.word	0x08017f4c
 80092f0:	08017c20 	.word	0x08017c20
 80092f4:	08017f60 	.word	0x08017f60
 80092f8:	08017f80 	.word	0x08017f80
 80092fc:	08017f9c 	.word	0x08017f9c
 8009300:	200090a0 	.word	0x200090a0

08009304 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009320:	f06f 0305 	mvn.w	r3, #5
 8009324:	e070      	b.n	8009408 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b03      	cmp	r3, #3
 800932c:	d006      	beq.n	800933c <lwip_netconn_do_connected+0x38>
 800932e:	4b38      	ldr	r3, [pc, #224]	; (8009410 <lwip_netconn_do_connected+0x10c>)
 8009330:	f240 5223 	movw	r2, #1315	; 0x523
 8009334:	4937      	ldr	r1, [pc, #220]	; (8009414 <lwip_netconn_do_connected+0x110>)
 8009336:	4838      	ldr	r0, [pc, #224]	; (8009418 <lwip_netconn_do_connected+0x114>)
 8009338:	f00c fff6 	bl	8016328 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10c      	bne.n	800935e <lwip_netconn_do_connected+0x5a>
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	7f1b      	ldrb	r3, [r3, #28]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <lwip_netconn_do_connected+0x5a>
 8009350:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <lwip_netconn_do_connected+0x10c>)
 8009352:	f240 5224 	movw	r2, #1316	; 0x524
 8009356:	4931      	ldr	r1, [pc, #196]	; (800941c <lwip_netconn_do_connected+0x118>)
 8009358:	482f      	ldr	r0, [pc, #188]	; (8009418 <lwip_netconn_do_connected+0x114>)
 800935a:	f00c ffe5 	bl	8016328 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d008      	beq.n	8009378 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	79fa      	ldrb	r2, [r7, #7]
 800936c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	330c      	adds	r3, #12
 8009376:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009380:	2b10      	cmp	r3, #16
 8009382:	d106      	bne.n	8009392 <lwip_netconn_do_connected+0x8e>
 8009384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800938c:	69b8      	ldr	r0, [r7, #24]
 800938e:	f7ff fb8d 	bl	8008aac <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	7f1b      	ldrb	r3, [r3, #28]
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	bf0c      	ite	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	2300      	movne	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	7f1b      	ldrb	r3, [r3, #28]
 80093aa:	f023 0304 	bic.w	r3, r3, #4
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <lwip_netconn_do_connected+0xbc>
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10c      	bne.n	80093da <lwip_netconn_do_connected+0xd6>
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <lwip_netconn_do_connected+0xc8>
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <lwip_netconn_do_connected+0xd6>
 80093cc:	4b10      	ldr	r3, [pc, #64]	; (8009410 <lwip_netconn_do_connected+0x10c>)
 80093ce:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80093d2:	4913      	ldr	r1, [pc, #76]	; (8009420 <lwip_netconn_do_connected+0x11c>)
 80093d4:	4810      	ldr	r0, [pc, #64]	; (8009418 <lwip_netconn_do_connected+0x114>)
 80093d6:	f00c ffa7 	bl	8016328 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2200      	movs	r2, #0
 80093de:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2200      	movs	r2, #0
 80093e4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <lwip_netconn_do_connected+0xf6>
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	2200      	movs	r2, #0
 80093f4:	2102      	movs	r1, #2
 80093f6:	69b8      	ldr	r0, [r7, #24]
 80093f8:	4798      	blx	r3

  if (was_blocking) {
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009400:	69f8      	ldr	r0, [r7, #28]
 8009402:	f00c fdcf 	bl	8015fa4 <sys_sem_signal>
  }
  return ERR_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	08017bdc 	.word	0x08017bdc
 8009414:	08017fa4 	.word	0x08017fa4
 8009418:	08017c20 	.word	0x08017c20
 800941c:	08017fc4 	.word	0x08017fc4
 8009420:	08018004 	.word	0x08018004

08009424 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800943a:	23f1      	movs	r3, #241	; 0xf1
 800943c:	75fb      	strb	r3, [r7, #23]
 800943e:	e09b      	b.n	8009578 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944a:	2b10      	cmp	r3, #16
 800944c:	d00f      	beq.n	800946e <lwip_netconn_do_connect+0x4a>
 800944e:	2b20      	cmp	r3, #32
 8009450:	f040 8087 	bne.w	8009562 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6858      	ldr	r0, [r3, #4]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	899b      	ldrh	r3, [r3, #12]
 8009462:	461a      	mov	r2, r3
 8009464:	f009 ff42 	bl	80132ec <udp_connect>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]
        break;
 800946c:	e084      	b.n	8009578 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	785b      	ldrb	r3, [r3, #1]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d102      	bne.n	800947e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009478:	23f7      	movs	r3, #247	; 0xf7
 800947a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800947c:	e07b      	b.n	8009576 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009488:	23f6      	movs	r3, #246	; 0xf6
 800948a:	75fb      	strb	r3, [r7, #23]
        break;
 800948c:	e073      	b.n	8009576 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fb0a 	bl	8008aac <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6858      	ldr	r0, [r3, #4]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6899      	ldr	r1, [r3, #8]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	899a      	ldrh	r2, [r3, #12]
 80094a6:	4b38      	ldr	r3, [pc, #224]	; (8009588 <lwip_netconn_do_connect+0x164>)
 80094a8:	f003 fd88 	bl	800cfbc <tcp_connect>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80094b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d15e      	bne.n	8009576 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	7f1b      	ldrb	r3, [r3, #28]
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bf14      	ite	ne
 80094c6:	2301      	movne	r3, #1
 80094c8:	2300      	moveq	r3, #0
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2203      	movs	r2, #3
 80094d4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d009      	beq.n	80094f0 <lwip_netconn_do_connect+0xcc>
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	7f1a      	ldrb	r2, [r3, #28]
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0204 	orr.w	r2, r2, #4
 80094ea:	b2d2      	uxtb	r2, r2
 80094ec:	771a      	strb	r2, [r3, #28]
 80094ee:	e008      	b.n	8009502 <lwip_netconn_do_connect+0xde>
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	7f1a      	ldrb	r2, [r3, #28]
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0204 	bic.w	r2, r2, #4
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009508:	23fb      	movs	r3, #251	; 0xfb
 800950a:	75fb      	strb	r3, [r7, #23]
        break;
 800950c:	e033      	b.n	8009576 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d006      	beq.n	800952e <lwip_netconn_do_connect+0x10a>
 8009520:	4b1a      	ldr	r3, [pc, #104]	; (800958c <lwip_netconn_do_connect+0x168>)
 8009522:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009526:	491a      	ldr	r1, [pc, #104]	; (8009590 <lwip_netconn_do_connect+0x16c>)
 8009528:	481a      	ldr	r0, [pc, #104]	; (8009594 <lwip_netconn_do_connect+0x170>)
 800952a:	f00c fefd 	bl	8016328 <iprintf>
              UNLOCK_TCPIP_CORE();
 800952e:	481a      	ldr	r0, [pc, #104]	; (8009598 <lwip_netconn_do_connect+0x174>)
 8009530:	f00c fda9 	bl	8016086 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	330c      	adds	r3, #12
 800953a:	2100      	movs	r1, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f00c fd00 	bl	8015f42 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009542:	4815      	ldr	r0, [pc, #84]	; (8009598 <lwip_netconn_do_connect+0x174>)
 8009544:	f00c fd90 	bl	8016068 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	2b03      	cmp	r3, #3
 8009550:	d116      	bne.n	8009580 <lwip_netconn_do_connect+0x15c>
 8009552:	4b0e      	ldr	r3, [pc, #56]	; (800958c <lwip_netconn_do_connect+0x168>)
 8009554:	f240 5274 	movw	r2, #1396	; 0x574
 8009558:	490d      	ldr	r1, [pc, #52]	; (8009590 <lwip_netconn_do_connect+0x16c>)
 800955a:	480e      	ldr	r0, [pc, #56]	; (8009594 <lwip_netconn_do_connect+0x170>)
 800955c:	f00c fee4 	bl	8016328 <iprintf>
              return;
 8009560:	e00e      	b.n	8009580 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009562:	4b0a      	ldr	r3, [pc, #40]	; (800958c <lwip_netconn_do_connect+0x168>)
 8009564:	f240 527d 	movw	r2, #1405	; 0x57d
 8009568:	490c      	ldr	r1, [pc, #48]	; (800959c <lwip_netconn_do_connect+0x178>)
 800956a:	480a      	ldr	r0, [pc, #40]	; (8009594 <lwip_netconn_do_connect+0x170>)
 800956c:	f00c fedc 	bl	8016328 <iprintf>
 8009570:	23fa      	movs	r3, #250	; 0xfa
 8009572:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009574:	e000      	b.n	8009578 <lwip_netconn_do_connect+0x154>
        break;
 8009576:	bf00      	nop
    }
  }
  msg->err = err;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	7dfa      	ldrb	r2, [r7, #23]
 800957c:	711a      	strb	r2, [r3, #4]
 800957e:	e000      	b.n	8009582 <lwip_netconn_do_connect+0x15e>
              return;
 8009580:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	08009305 	.word	0x08009305
 800958c:	08017bdc 	.word	0x08017bdc
 8009590:	08017f9c 	.word	0x08017f9c
 8009594:	08017c20 	.word	0x08017c20
 8009598:	200090a0 	.word	0x200090a0
 800959c:	08018024 	.word	0x08018024

080095a0 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d109      	bne.n	80095ce <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f009 ff01 	bl	80133c8 <udp_disconnect>
    msg->err = ERR_OK;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80095cc:	e002      	b.n	80095d4 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	22fa      	movs	r2, #250	; 0xfa
 80095d2:	711a      	strb	r2, [r3, #4]
}
 80095d4:	bf00      	nop
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe ff3f 	bl	8008470 <netconn_err>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80095f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d134      	bne.n	8009668 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d02d      	beq.n	8009664 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009612:	2b20      	cmp	r3, #32
 8009614:	d123      	bne.n	800965e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10c      	bne.n	800963a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f009 fbea 	bl	8012e08 <udp_send>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009638:	e016      	b.n	8009668 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6858      	ldr	r0, [r3, #4]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f103 0208 	add.w	r2, r3, #8
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	899b      	ldrh	r3, [r3, #12]
 8009654:	f009 fc0c 	bl	8012e70 <udp_sendto>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]
          break;
 800965c:	e004      	b.n	8009668 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800965e:	23f5      	movs	r3, #245	; 0xf5
 8009660:	73fb      	strb	r3, [r7, #15]
          break;
 8009662:	e001      	b.n	8009668 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009664:	23f5      	movs	r3, #245	; 0xf5
 8009666:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	7bfa      	ldrb	r2, [r7, #15]
 800966c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <lwip_netconn_do_writemore+0x24>
 800968e:	4b96      	ldr	r3, [pc, #600]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 8009690:	f240 6273 	movw	r2, #1651	; 0x673
 8009694:	4995      	ldr	r1, [pc, #596]	; (80098ec <lwip_netconn_do_writemore+0x274>)
 8009696:	4896      	ldr	r0, [pc, #600]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 8009698:	f00c fe46 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	785b      	ldrb	r3, [r3, #1]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d006      	beq.n	80096b2 <lwip_netconn_do_writemore+0x3a>
 80096a4:	4b90      	ldr	r3, [pc, #576]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 80096a6:	f240 6274 	movw	r2, #1652	; 0x674
 80096aa:	4992      	ldr	r1, [pc, #584]	; (80098f4 <lwip_netconn_do_writemore+0x27c>)
 80096ac:	4890      	ldr	r0, [pc, #576]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 80096ae:	f00c fe3b 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <lwip_netconn_do_writemore+0x50>
 80096ba:	4b8b      	ldr	r3, [pc, #556]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 80096bc:	f240 6275 	movw	r2, #1653	; 0x675
 80096c0:	498d      	ldr	r1, [pc, #564]	; (80098f8 <lwip_netconn_do_writemore+0x280>)
 80096c2:	488b      	ldr	r0, [pc, #556]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 80096c4:	f00c fe30 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <lwip_netconn_do_writemore+0x66>
 80096d0:	4b85      	ldr	r3, [pc, #532]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 80096d2:	f240 6276 	movw	r2, #1654	; 0x676
 80096d6:	4989      	ldr	r1, [pc, #548]	; (80098fc <lwip_netconn_do_writemore+0x284>)
 80096d8:	4885      	ldr	r0, [pc, #532]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 80096da:	f00c fe25 	bl	8016328 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d306      	bcc.n	80096fc <lwip_netconn_do_writemore+0x84>
 80096ee:	4b7e      	ldr	r3, [pc, #504]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 80096f0:	f240 6277 	movw	r2, #1655	; 0x677
 80096f4:	4982      	ldr	r1, [pc, #520]	; (8009900 <lwip_netconn_do_writemore+0x288>)
 80096f6:	487e      	ldr	r0, [pc, #504]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 80096f8:	f00c fe16 	bl	8016328 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	899b      	ldrh	r3, [r3, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <lwip_netconn_do_writemore+0x9c>
 8009706:	4b78      	ldr	r3, [pc, #480]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 8009708:	f240 6279 	movw	r2, #1657	; 0x679
 800970c:	497d      	ldr	r1, [pc, #500]	; (8009904 <lwip_netconn_do_writemore+0x28c>)
 800970e:	4878      	ldr	r0, [pc, #480]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 8009710:	f00c fe0a 	bl	8016328 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	7f1b      	ldrb	r3, [r3, #28]
 800971a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7f1b      	ldrb	r3, [r3, #28]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d104      	bne.n	8009732 <lwip_netconn_do_writemore+0xba>
 8009728:	7ebb      	ldrb	r3, [r7, #26]
 800972a:	f003 0304 	and.w	r3, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <lwip_netconn_do_writemore+0xbe>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <lwip_netconn_do_writemore+0xc0>
 8009736:	2300      	movs	r3, #0
 8009738:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	4413      	add	r3, r2
 800974a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009764:	d307      	bcc.n	8009776 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800976a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800976c:	7ebb      	ldrb	r3, [r7, #26]
 800976e:	f043 0302 	orr.w	r3, r3, #2
 8009772:	76bb      	strb	r3, [r7, #26]
 8009774:	e001      	b.n	800977a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009782:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009784:	89fa      	ldrh	r2, [r7, #14]
 8009786:	8bbb      	ldrh	r3, [r7, #28]
 8009788:	429a      	cmp	r2, r3
 800978a:	d216      	bcs.n	80097ba <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800978c:	89fb      	ldrh	r3, [r7, #14]
 800978e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009790:	7e3b      	ldrb	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00d      	beq.n	80097b2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009796:	8bbb      	ldrh	r3, [r7, #28]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10e      	bne.n	80097ba <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <lwip_netconn_do_writemore+0x134>
 80097a6:	f06f 0306 	mvn.w	r3, #6
 80097aa:	e000      	b.n	80097ae <lwip_netconn_do_writemore+0x136>
 80097ac:	2300      	movs	r3, #0
 80097ae:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80097b0:	e07d      	b.n	80098ae <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80097b2:	7ebb      	ldrb	r3, [r7, #26]
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	8bbb      	ldrh	r3, [r7, #28]
 80097c2:	441a      	add	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d906      	bls.n	80097de <lwip_netconn_do_writemore+0x166>
 80097d0:	4b45      	ldr	r3, [pc, #276]	; (80098e8 <lwip_netconn_do_writemore+0x270>)
 80097d2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80097d6:	494c      	ldr	r1, [pc, #304]	; (8009908 <lwip_netconn_do_writemore+0x290>)
 80097d8:	4845      	ldr	r0, [pc, #276]	; (80098f0 <lwip_netconn_do_writemore+0x278>)
 80097da:	f00c fda5 	bl	8016328 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80097de:	8bbb      	ldrh	r3, [r7, #28]
 80097e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d103      	bne.n	80097f0 <lwip_netconn_do_writemore+0x178>
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ee:	d209      	bcs.n	8009804 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80097f4:	8bba      	ldrh	r2, [r7, #28]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d10b      	bne.n	8009812 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	899b      	ldrh	r3, [r3, #12]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d906      	bls.n	8009812 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009804:	2301      	movs	r3, #1
 8009806:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009808:	7ebb      	ldrb	r3, [r7, #26]
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	76bb      	strb	r3, [r7, #26]
 8009810:	e001      	b.n	8009816 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6858      	ldr	r0, [r3, #4]
 800981a:	7ebb      	ldrb	r3, [r7, #26]
 800981c:	8bba      	ldrh	r2, [r7, #28]
 800981e:	6979      	ldr	r1, [r7, #20]
 8009820:	f007 fa56 	bl	8010cd0 <tcp_write>
 8009824:	4603      	mov	r3, r0
 8009826:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d12c      	bne.n	800988a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	6999      	ldr	r1, [r3, #24]
 8009836:	8bba      	ldrh	r2, [r7, #28]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	440a      	add	r2, r1
 800983e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	6919      	ldr	r1, [r3, #16]
 8009846:	8bba      	ldrh	r2, [r7, #28]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	440a      	add	r2, r1
 800984e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d113      	bne.n	800988a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	899a      	ldrh	r2, [r3, #12]
 8009868:	3a01      	subs	r2, #1
 800986a:	b292      	uxth	r2, r2
 800986c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	899b      	ldrh	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	3208      	adds	r2, #8
 8009880:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	2200      	movs	r2, #0
 8009888:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800988a:	7e7b      	ldrb	r3, [r7, #25]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d004      	beq.n	800989a <lwip_netconn_do_writemore+0x222>
 8009890:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f43f af50 	beq.w	800973a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800989a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <lwip_netconn_do_writemore+0x234>
 80098a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d146      	bne.n	800993a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80098ac:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80098ae:	7e3b      	ldrb	r3, [r7, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d02b      	beq.n	800990c <lwip_netconn_do_writemore+0x294>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d223      	bcs.n	800990c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <lwip_netconn_do_writemore+0x260>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2200      	movs	r2, #0
 80098d2:	2103      	movs	r1, #3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7f1b      	ldrb	r3, [r3, #28]
 80098dc:	f043 0310 	orr.w	r3, r3, #16
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	771a      	strb	r2, [r3, #28]
 80098e6:	e028      	b.n	800993a <lwip_netconn_do_writemore+0x2c2>
 80098e8:	08017bdc 	.word	0x08017bdc
 80098ec:	08017d34 	.word	0x08017d34
 80098f0:	08017c20 	.word	0x08017c20
 80098f4:	0801803c 	.word	0x0801803c
 80098f8:	08017d44 	.word	0x08017d44
 80098fc:	0801805c 	.word	0x0801805c
 8009900:	08018074 	.word	0x08018074
 8009904:	080180b4 	.word	0x080180b4
 8009908:	080180dc 	.word	0x080180dc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009914:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009918:	d305      	bcc.n	8009926 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009922:	2b04      	cmp	r3, #4
 8009924:	d909      	bls.n	800993a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <lwip_netconn_do_writemore+0x2c2>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	2200      	movs	r2, #0
 8009934:	2103      	movs	r1, #3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800993a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11d      	bne.n	800997e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	429a      	cmp	r2, r3
 8009950:	d002      	beq.n	8009958 <lwip_netconn_do_writemore+0x2e0>
 8009952:	7e3b      	ldrb	r3, [r7, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009958:	2301      	movs	r3, #1
 800995a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	f007 ff9f 	bl	80118a4 <tcp_output>
 8009966:	4603      	mov	r3, r0
 8009968:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800996a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800996e:	f113 0f04 	cmn.w	r3, #4
 8009972:	d12c      	bne.n	80099ce <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009974:	7b3b      	ldrb	r3, [r7, #12]
 8009976:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009978:	2301      	movs	r3, #1
 800997a:	76fb      	strb	r3, [r7, #27]
 800997c:	e027      	b.n	80099ce <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800997e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009986:	d120      	bne.n	80099ca <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4618      	mov	r0, r3
 800998e:	f007 ff89 	bl	80118a4 <tcp_output>
 8009992:	4603      	mov	r3, r0
 8009994:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009996:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800999a:	f113 0f04 	cmn.w	r3, #4
 800999e:	d104      	bne.n	80099aa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80099a0:	7b7b      	ldrb	r3, [r7, #13]
 80099a2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	76fb      	strb	r3, [r7, #27]
 80099a8:	e011      	b.n	80099ce <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80099aa:	7e3b      	ldrb	r3, [r7, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00e      	beq.n	80099ce <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <lwip_netconn_do_writemore+0x348>
 80099ba:	f06f 0306 	mvn.w	r3, #6
 80099be:	e000      	b.n	80099c2 <lwip_netconn_do_writemore+0x34a>
 80099c0:	2300      	movs	r3, #0
 80099c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80099c4:	2301      	movs	r3, #1
 80099c6:	76fb      	strb	r3, [r7, #27]
 80099c8:	e001      	b.n	80099ce <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80099ce:	7efb      	ldrb	r3, [r7, #27]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d015      	beq.n	8009a00 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	7ffa      	ldrb	r2, [r7, #31]
 80099e4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d006      	beq.n	8009a06 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80099f8:	68b8      	ldr	r0, [r7, #8]
 80099fa:	f00c fad3 	bl	8015fa4 <sys_sem_signal>
 80099fe:	e002      	b.n	8009a06 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295
 8009a04:	e000      	b.n	8009a08 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fd25 	bl	8008470 <netconn_err>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d166      	bne.n	8009b00 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d15d      	bne.n	8009afc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009a4a:	23fb      	movs	r3, #251	; 0xfb
 8009a4c:	73fb      	strb	r3, [r7, #15]
 8009a4e:	e057      	b.n	8009b00 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d04d      	beq.n	8009af6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <lwip_netconn_do_write+0x6a>
 8009a6c:	4b28      	ldr	r3, [pc, #160]	; (8009b10 <lwip_netconn_do_write+0x100>)
 8009a6e:	f240 7223 	movw	r2, #1827	; 0x723
 8009a72:	4928      	ldr	r1, [pc, #160]	; (8009b14 <lwip_netconn_do_write+0x104>)
 8009a74:	4828      	ldr	r0, [pc, #160]	; (8009b18 <lwip_netconn_do_write+0x108>)
 8009a76:	f00c fc57 	bl	8016328 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <lwip_netconn_do_write+0x80>
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <lwip_netconn_do_write+0x100>)
 8009a84:	f240 7224 	movw	r2, #1828	; 0x724
 8009a88:	4924      	ldr	r1, [pc, #144]	; (8009b1c <lwip_netconn_do_write+0x10c>)
 8009a8a:	4823      	ldr	r0, [pc, #140]	; (8009b18 <lwip_netconn_do_write+0x108>)
 8009a8c:	f00c fc4c 	bl	8016328 <iprintf>
        msg->conn->current_msg = msg;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fdea 	bl	8009678 <lwip_netconn_do_writemore>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d02e      	beq.n	8009b08 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	785b      	ldrb	r3, [r3, #1]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d006      	beq.n	8009ac2 <lwip_netconn_do_write+0xb2>
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <lwip_netconn_do_write+0x100>)
 8009ab6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009aba:	4919      	ldr	r1, [pc, #100]	; (8009b20 <lwip_netconn_do_write+0x110>)
 8009abc:	4816      	ldr	r0, [pc, #88]	; (8009b18 <lwip_netconn_do_write+0x108>)
 8009abe:	f00c fc33 	bl	8016328 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009ac2:	4818      	ldr	r0, [pc, #96]	; (8009b24 <lwip_netconn_do_write+0x114>)
 8009ac4:	f00c fadf 	bl	8016086 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f00c fa36 	bl	8015f42 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009ad6:	4813      	ldr	r0, [pc, #76]	; (8009b24 <lwip_netconn_do_write+0x114>)
 8009ad8:	f00c fac6 	bl	8016068 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d110      	bne.n	8009b08 <lwip_netconn_do_write+0xf8>
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <lwip_netconn_do_write+0x100>)
 8009ae8:	f240 722c 	movw	r2, #1836	; 0x72c
 8009aec:	490c      	ldr	r1, [pc, #48]	; (8009b20 <lwip_netconn_do_write+0x110>)
 8009aee:	480a      	ldr	r0, [pc, #40]	; (8009b18 <lwip_netconn_do_write+0x108>)
 8009af0:	f00c fc1a 	bl	8016328 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009af4:	e008      	b.n	8009b08 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009af6:	23f5      	movs	r3, #245	; 0xf5
 8009af8:	73fb      	strb	r3, [r7, #15]
 8009afa:	e001      	b.n	8009b00 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009afc:	23fa      	movs	r3, #250	; 0xfa
 8009afe:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	7bfa      	ldrb	r2, [r7, #15]
 8009b04:	711a      	strb	r2, [r3, #4]
 8009b06:	e000      	b.n	8009b0a <lwip_netconn_do_write+0xfa>
        return;
 8009b08:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	08017bdc 	.word	0x08017bdc
 8009b14:	08017f80 	.word	0x08017f80
 8009b18:	08017c20 	.word	0x08017c20
 8009b1c:	08018108 	.word	0x08018108
 8009b20:	08017f9c 	.word	0x08017f9c
 8009b24:	200090a0 	.word	0x200090a0

08009b28 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dc04      	bgt.n	8009b44 <err_to_errno+0x1c>
 8009b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b3e:	f113 0f10 	cmn.w	r3, #16
 8009b42:	da01      	bge.n	8009b48 <err_to_errno+0x20>
    return EIO;
 8009b44:	2305      	movs	r3, #5
 8009b46:	e005      	b.n	8009b54 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <err_to_errno+0x38>)
 8009b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	0801b1bc 	.word	0x0801b1bc

08009b64 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d013      	beq.n	8009b9a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 fb20 	bl	800c1c4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	605a      	str	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	2006      	movs	r0, #6
 8009b96:	f001 fc71 	bl	800b47c <memp_free>
  }
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <netbuf_free+0x1c>
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <netbuf_free+0x44>)
 8009bb4:	2281      	movs	r2, #129	; 0x81
 8009bb6:	490d      	ldr	r1, [pc, #52]	; (8009bec <netbuf_free+0x48>)
 8009bb8:	480d      	ldr	r0, [pc, #52]	; (8009bf0 <netbuf_free+0x4c>)
 8009bba:	f00c fbb5 	bl	8016328 <iprintf>
 8009bbe:	e00f      	b.n	8009be0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f002 faf9 	bl	800c1c4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	605a      	str	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	08018134 	.word	0x08018134
 8009bec:	080181d0 	.word	0x080181d0
 8009bf0:	08018184 	.word	0x08018184

08009bf4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d108      	bne.n	8009c1a <netbuf_ref+0x26>
 8009c08:	4b1c      	ldr	r3, [pc, #112]	; (8009c7c <netbuf_ref+0x88>)
 8009c0a:	2299      	movs	r2, #153	; 0x99
 8009c0c:	491c      	ldr	r1, [pc, #112]	; (8009c80 <netbuf_ref+0x8c>)
 8009c0e:	481d      	ldr	r0, [pc, #116]	; (8009c84 <netbuf_ref+0x90>)
 8009c10:	f00c fb8a 	bl	8016328 <iprintf>
 8009c14:	f06f 030f 	mvn.w	r3, #15
 8009c18:	e02b      	b.n	8009c72 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f002 facc 	bl	800c1c4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8009c2c:	2241      	movs	r2, #65	; 0x41
 8009c2e:	2100      	movs	r1, #0
 8009c30:	2036      	movs	r0, #54	; 0x36
 8009c32:	f001 ffe3 	bl	800bbfc <pbuf_alloc>
 8009c36:	4602      	mov	r2, r0
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	e010      	b.n	8009c72 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	88fa      	ldrh	r2, [r7, #6]
 8009c5e:	811a      	strh	r2, [r3, #8]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	891b      	ldrh	r3, [r3, #8]
 8009c66:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	08018134 	.word	0x08018134
 8009c80:	080181ec 	.word	0x080181ec
 8009c84:	08018184 	.word	0x08018184

08009c88 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	db02      	blt.n	8009ca0 <tryget_socket_unconn_nouse+0x18>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	dd01      	ble.n	8009ca4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e003      	b.n	8009cac <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	4a03      	ldr	r2, [pc, #12]	; (8009cb8 <tryget_socket_unconn_nouse+0x30>)
 8009caa:	4413      	add	r3, r2
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	20009050 	.word	0x20009050

08009cbc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff ffdf 	bl	8009c88 <tryget_socket_unconn_nouse>
 8009cca:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff ffec 	bl	8009cbc <tryget_socket_unconn>
 8009ce4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <tryget_socket+0x22>
    if (sock->conn) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <tryget_socket+0x22>
      return sock;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	e000      	b.n	8009cfa <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ffe2 	bl	8009cd6 <tryget_socket>
 8009d12:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <get_socket+0x2c>)
 8009d1c:	2209      	movs	r2, #9
 8009d1e:	601a      	str	r2, [r3, #0]
    return NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e000      	b.n	8009d26 <get_socket+0x22>
  }
  return sock;
 8009d24:	68fb      	ldr	r3, [r7, #12]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	2000ca94 	.word	0x2000ca94

08009d34 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e052      	b.n	8009dea <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009d44:	f00c f9d2 	bl	80160ec <sys_arch_protect>
 8009d48:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8009d4a:	4a2c      	ldr	r2, [pc, #176]	; (8009dfc <alloc_socket+0xc8>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	4413      	add	r3, r2
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d142      	bne.n	8009dde <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8009d58:	4a28      	ldr	r2, [pc, #160]	; (8009dfc <alloc_socket+0xc8>)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	4413      	add	r3, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f00c f9cf 	bl	8016108 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8009d6a:	4a24      	ldr	r2, [pc, #144]	; (8009dfc <alloc_socket+0xc8>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	4413      	add	r3, r2
 8009d72:	3304      	adds	r3, #4
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009d78:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <alloc_socket+0xc8>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	4413      	add	r3, r2
 8009d80:	330e      	adds	r3, #14
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <alloc_socket+0x62>
 8009d88:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <alloc_socket+0xcc>)
 8009d8a:	f240 220e 	movw	r2, #526	; 0x20e
 8009d8e:	491d      	ldr	r1, [pc, #116]	; (8009e04 <alloc_socket+0xd0>)
 8009d90:	481d      	ldr	r0, [pc, #116]	; (8009e08 <alloc_socket+0xd4>)
 8009d92:	f00c fac9 	bl	8016328 <iprintf>
      sockets[i].rcvevent   = 0;
 8009d96:	4a19      	ldr	r2, [pc, #100]	; (8009dfc <alloc_socket+0xc8>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3308      	adds	r3, #8
 8009da0:	2200      	movs	r2, #0
 8009da2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d102      	bne.n	8009db6 <alloc_socket+0x82>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <alloc_socket+0x86>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <alloc_socket+0x88>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	b299      	uxth	r1, r3
 8009dbe:	4a0f      	ldr	r2, [pc, #60]	; (8009dfc <alloc_socket+0xc8>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	330a      	adds	r3, #10
 8009dc8:	460a      	mov	r2, r1
 8009dca:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8009dcc:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <alloc_socket+0xc8>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	4413      	add	r3, r2
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	e00a      	b.n	8009df4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f00c f992 	bl	8016108 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	dda9      	ble.n	8009d44 <alloc_socket+0x10>
  }
  return -1;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20009050 	.word	0x20009050
 8009e00:	080182cc 	.word	0x080182cc
 8009e04:	08018300 	.word	0x08018300
 8009e08:	08018320 	.word	0x08018320

08009e0c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	6852      	ldr	r2, [r2, #4]
 8009e20:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
  return 1;
 8009e36:	2301      	movs	r3, #1
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00d      	beq.n	8009e74 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 f9ae 	bl	800c1c4 <pbuf_free>
 8009e68:	e004      	b.n	8009e74 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fe78 	bl	8009b64 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8009e7a:	68b8      	ldr	r0, [r7, #8]
 8009e7c:	f7fe f97a 	bl	8008174 <netconn_delete>
  }
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8009e92:	f00c f92b 	bl	80160ec <sys_arch_protect>
 8009e96:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	f107 020c 	add.w	r2, r7, #12
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff ffb2 	bl	8009e0c <free_socket_locked>
 8009ea8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f00c f92c 	bl	8016108 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f107 0208 	add.w	r2, r7, #8
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6838      	ldr	r0, [r7, #0]
 8009ec0:	f7ff ffc0 	bl	8009e44 <free_socket_free_elements>
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff ff13 	bl	8009d04 <get_socket>
 8009ede:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d102      	bne.n	8009eec <lwip_close+0x20>
    return -1;
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	e039      	b.n	8009f60 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	bf0c      	ite	eq
 8009f02:	2301      	moveq	r3, #1
 8009f04:	2300      	movne	r3, #0
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e00a      	b.n	8009f22 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d006      	beq.n	8009f22 <lwip_close+0x56>
 8009f14:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <lwip_close+0x9c>)
 8009f16:	f44f 7245 	mov.w	r2, #788	; 0x314
 8009f1a:	4914      	ldr	r1, [pc, #80]	; (8009f6c <lwip_close+0xa0>)
 8009f1c:	4814      	ldr	r0, [pc, #80]	; (8009f70 <lwip_close+0xa4>)
 8009f1e:	f00c fa03 	bl	8016328 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe f900 	bl	800812c <netconn_prepare_delete>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00e      	beq.n	8009f56 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8009f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff fdf3 	bl	8009b28 <err_to_errno>
 8009f42:	60b8      	str	r0, [r7, #8]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <lwip_close+0x84>
 8009f4a:	4a0a      	ldr	r2, [pc, #40]	; (8009f74 <lwip_close+0xa8>)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	e004      	b.n	8009f60 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8009f56:	6979      	ldr	r1, [r7, #20]
 8009f58:	6938      	ldr	r0, [r7, #16]
 8009f5a:	f7ff ff95 	bl	8009e88 <free_socket>
  set_errno(0);
  return 0;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	080182cc 	.word	0x080182cc
 8009f6c:	0801838c 	.word	0x0801838c
 8009f70:	08018320 	.word	0x08018320
 8009f74:	2000ca94 	.word	0x2000ca94

08009f78 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08c      	sub	sp, #48	; 0x30
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff febd 	bl	8009d04 <get_socket>
 8009f8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <lwip_connect+0x20>
    return -1;
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	e062      	b.n	800a05e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d108      	bne.n	8009fb2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe f939 	bl	800821c <netconn_disconnect>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fb0:	e039      	b.n	800a026 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b10      	cmp	r3, #16
 8009fb6:	d10c      	bne.n	8009fd2 <lwip_connect+0x5a>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <lwip_connect+0x50>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d104      	bne.n	8009fd2 <lwip_connect+0x5a>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d014      	beq.n	8009ffc <lwip_connect+0x84>
 8009fd2:	4b25      	ldr	r3, [pc, #148]	; (800a068 <lwip_connect+0xf0>)
 8009fd4:	f240 3247 	movw	r2, #839	; 0x347
 8009fd8:	4924      	ldr	r1, [pc, #144]	; (800a06c <lwip_connect+0xf4>)
 8009fda:	4825      	ldr	r0, [pc, #148]	; (800a070 <lwip_connect+0xf8>)
 8009fdc:	f00c f9a4 	bl	8016328 <iprintf>
 8009fe0:	f06f 000f 	mvn.w	r0, #15
 8009fe4:	f7ff fda0 	bl	8009b28 <err_to_errno>
 8009fe8:	6238      	str	r0, [r7, #32]
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <lwip_connect+0x7e>
 8009ff0:	4a20      	ldr	r2, [pc, #128]	; (800a074 <lwip_connect+0xfc>)
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffa:	e030      	b.n	800a05e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	885b      	ldrh	r3, [r3, #2]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fcea 	bl	800a9e0 <lwip_htons>
 800a00c:	4603      	mov	r3, r0
 800a00e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a016:	f107 0114 	add.w	r1, r7, #20
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe f8c6 	bl	80081ac <netconn_connect>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800a026:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a02e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff fd78 	bl	8009b28 <err_to_errno>
 800a038:	61b8      	str	r0, [r7, #24]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <lwip_connect+0xce>
 800a040:	4a0c      	ldr	r2, [pc, #48]	; (800a074 <lwip_connect+0xfc>)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a046:	f04f 33ff 	mov.w	r3, #4294967295
 800a04a:	e008      	b.n	800a05e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a04c:	2300      	movs	r3, #0
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <lwip_connect+0xe4>
 800a056:	4a07      	ldr	r2, [pc, #28]	; (800a074 <lwip_connect+0xfc>)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3730      	adds	r7, #48	; 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	080182cc 	.word	0x080182cc
 800a06c:	080183a4 	.word	0x080183a4
 800a070:	08018320 	.word	0x08018320
 800a074:	2000ca94 	.word	0x2000ca94

0800a078 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f7ff fe3c 	bl	8009d04 <get_socket>
 800a08c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <lwip_send+0x22>
    return -1;
 800a094:	f04f 33ff 	mov.w	r3, #4294967295
 800a098:	e046      	b.n	800a128 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0a4:	2b10      	cmp	r3, #16
 800a0a6:	d00b      	beq.n	800a0c0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	68b9      	ldr	r1, [r7, #8]
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 f83c 	bl	800a134 <lwip_sendto>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	e033      	b.n	800a128 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <lwip_send+0x56>
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	e000      	b.n	800a0d0 <lwip_send+0x58>
 800a0ce:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	105b      	asrs	r3, r3, #1
 800a0d4:	b25b      	sxtb	r3, r3
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	b25b      	sxtb	r3, r3
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800a0e0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	7efa      	ldrb	r2, [r7, #27]
 800a0ec:	f107 0310 	add.w	r3, r7, #16
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	f7fe f8e8 	bl	80082cc <netconn_write_partly>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800a100:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fd0f 	bl	8009b28 <err_to_errno>
 800a10a:	6178      	str	r0, [r7, #20]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <lwip_send+0xa0>
 800a112:	4a07      	ldr	r2, [pc, #28]	; (800a130 <lwip_send+0xb8>)
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800a118:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <lwip_send+0xac>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	e001      	b.n	800a128 <lwip_send+0xb0>
 800a124:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3720      	adds	r7, #32
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	2000ca94 	.word	0x2000ca94

0800a134 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08e      	sub	sp, #56	; 0x38
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff fdde 	bl	8009d04 <get_socket>
 800a148:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <lwip_sendto+0x22>
    return -1;
 800a150:	f04f 33ff 	mov.w	r3, #4294967295
 800a154:	e093      	b.n	800a27e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a160:	2b10      	cmp	r3, #16
 800a162:	d107      	bne.n	800a174 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7ff ff84 	bl	800a078 <lwip_send>
 800a170:	4603      	mov	r3, r0
 800a172:	e084      	b.n	800a27e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17a:	d30a      	bcc.n	800a192 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800a17c:	235a      	movs	r3, #90	; 0x5a
 800a17e:	623b      	str	r3, [r7, #32]
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <lwip_sendto+0x58>
 800a186:	4a40      	ldr	r2, [pc, #256]	; (800a288 <lwip_sendto+0x154>)
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295
 800a190:	e075      	b.n	800a27e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800a196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <lwip_sendto+0x6e>
 800a19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d023      	beq.n	800a1ea <lwip_sendto+0xb6>
 800a1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	d10b      	bne.n	800a1c0 <lwip_sendto+0x8c>
 800a1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d008      	beq.n	800a1c0 <lwip_sendto+0x8c>
 800a1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d104      	bne.n	800a1c0 <lwip_sendto+0x8c>
 800a1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d014      	beq.n	800a1ea <lwip_sendto+0xb6>
 800a1c0:	4b32      	ldr	r3, [pc, #200]	; (800a28c <lwip_sendto+0x158>)
 800a1c2:	f240 6252 	movw	r2, #1618	; 0x652
 800a1c6:	4932      	ldr	r1, [pc, #200]	; (800a290 <lwip_sendto+0x15c>)
 800a1c8:	4832      	ldr	r0, [pc, #200]	; (800a294 <lwip_sendto+0x160>)
 800a1ca:	f00c f8ad 	bl	8016328 <iprintf>
 800a1ce:	f06f 000f 	mvn.w	r0, #15
 800a1d2:	f7ff fca9 	bl	8009b28 <err_to_errno>
 800a1d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <lwip_sendto+0xb0>
 800a1de:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <lwip_sendto+0x154>)
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	e049      	b.n	800a27e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800a1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800a1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fbec 	bl	800a9e0 <lwip_htons>
 800a208:	4603      	mov	r3, r0
 800a20a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a20c:	e003      	b.n	800a216 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800a212:	2300      	movs	r3, #0
 800a214:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800a216:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a218:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800a21a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a21c:	f107 0310 	add.w	r3, r7, #16
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fce6 	bl	8009bf4 <netbuf_ref>
 800a228:	4603      	mov	r3, r0
 800a22a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800a22e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f107 0210 	add.w	r2, r7, #16
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe f815 	bl	8008270 <netconn_send>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800a24c:	f107 0310 	add.w	r3, r7, #16
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fca7 	bl	8009ba4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800a256:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff fc64 	bl	8009b28 <err_to_errno>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <lwip_sendto+0x13a>
 800a268:	4a07      	ldr	r2, [pc, #28]	; (800a288 <lwip_sendto+0x154>)
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800a26e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <lwip_sendto+0x146>
 800a276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a278:	e001      	b.n	800a27e <lwip_sendto+0x14a>
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3738      	adds	r7, #56	; 0x38
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	2000ca94 	.word	0x2000ca94
 800a28c:	080182cc 	.word	0x080182cc
 800a290:	080185ac 	.word	0x080185ac
 800a294:	08018320 	.word	0x08018320

0800a298 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d009      	beq.n	800a2be <lwip_socket+0x26>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	dc23      	bgt.n	800a2f8 <lwip_socket+0x60>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d019      	beq.n	800a2ea <lwip_socket+0x52>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d009      	beq.n	800a2d0 <lwip_socket+0x38>
 800a2bc:	e01c      	b.n	800a2f8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	4a22      	ldr	r2, [pc, #136]	; (800a34c <lwip_socket+0xb4>)
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	2040      	movs	r0, #64	; 0x40
 800a2c8:	f7fd feb6 	bl	8008038 <netconn_new_with_proto_and_callback>
 800a2cc:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a2ce:	e019      	b.n	800a304 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b88      	cmp	r3, #136	; 0x88
 800a2d4:	d101      	bne.n	800a2da <lwip_socket+0x42>
 800a2d6:	2321      	movs	r3, #33	; 0x21
 800a2d8:	e000      	b.n	800a2dc <lwip_socket+0x44>
 800a2da:	2320      	movs	r3, #32
 800a2dc:	4a1b      	ldr	r2, [pc, #108]	; (800a34c <lwip_socket+0xb4>)
 800a2de:	2100      	movs	r1, #0
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fd fea9 	bl	8008038 <netconn_new_with_proto_and_callback>
 800a2e6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a2e8:	e00c      	b.n	800a304 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800a2ea:	4a18      	ldr	r2, [pc, #96]	; (800a34c <lwip_socket+0xb4>)
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f7fd fea2 	bl	8008038 <netconn_new_with_proto_and_callback>
 800a2f4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800a2f6:	e005      	b.n	800a304 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800a2f8:	4b15      	ldr	r3, [pc, #84]	; (800a350 <lwip_socket+0xb8>)
 800a2fa:	2216      	movs	r2, #22
 800a2fc:	601a      	str	r2, [r3, #0]
      return -1;
 800a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a302:	e01e      	b.n	800a342 <lwip_socket+0xaa>
  }

  if (!conn) {
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d105      	bne.n	800a316 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <lwip_socket+0xb8>)
 800a30c:	2269      	movs	r2, #105	; 0x69
 800a30e:	601a      	str	r2, [r3, #0]
    return -1;
 800a310:	f04f 33ff 	mov.w	r3, #4294967295
 800a314:	e015      	b.n	800a342 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800a316:	2100      	movs	r1, #0
 800a318:	6978      	ldr	r0, [r7, #20]
 800a31a:	f7ff fd0b 	bl	8009d34 <alloc_socket>
 800a31e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d108      	bne.n	800a33a <lwip_socket+0xa2>
    netconn_delete(conn);
 800a328:	6978      	ldr	r0, [r7, #20]
 800a32a:	f7fd ff23 	bl	8008174 <netconn_delete>
    set_errno(ENFILE);
 800a32e:	4b08      	ldr	r3, [pc, #32]	; (800a350 <lwip_socket+0xb8>)
 800a330:	2217      	movs	r2, #23
 800a332:	601a      	str	r2, [r3, #0]
    return -1;
 800a334:	f04f 33ff 	mov.w	r3, #4294967295
 800a338:	e003      	b.n	800a342 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800a340:	693b      	ldr	r3, [r7, #16]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	0800a3dd 	.word	0x0800a3dd
 800a350:	2000ca94 	.word	0x2000ca94

0800a354 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e02c      	b.n	800a3c2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	695a      	ldr	r2, [r3, #20]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d11e      	bne.n	800a3bc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d009      	beq.n	800a398 <lwip_poll_should_wake+0x44>
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <lwip_poll_should_wake+0x44>
        return 1;
 800a394:	2301      	movs	r3, #1
 800a396:	e01a      	b.n	800a3ce <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d009      	beq.n	800a3b2 <lwip_poll_should_wake+0x5e>
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <lwip_poll_should_wake+0x5e>
        return 1;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e00d      	b.n	800a3ce <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e008      	b.n	800a3ce <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d3cd      	bcc.n	800a368 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	371c      	adds	r7, #28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
	...

0800a3dc <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	; 0x28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80a4 	beq.w	800a53c <event_callback+0x160>
    s = conn->socket;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da18      	bge.n	800a432 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800a400:	f00b fe74 	bl	80160ec <sys_arch_protect>
 800a404:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da0b      	bge.n	800a426 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800a41e:	69f8      	ldr	r0, [r7, #28]
 800a420:	f00b fe72 	bl	8016108 <sys_arch_unprotect>
        return;
 800a424:	e08d      	b.n	800a542 <event_callback+0x166>
      }
      s = conn->socket;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800a42c:	69f8      	ldr	r0, [r7, #28]
 800a42e:	f00b fe6b 	bl	8016108 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800a432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a434:	f7ff fc66 	bl	8009d04 <get_socket>
 800a438:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d07f      	beq.n	800a540 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800a440:	2301      	movs	r3, #1
 800a442:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800a444:	f00b fe52 	bl	80160ec <sys_arch_protect>
 800a448:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d83e      	bhi.n	800a4ce <event_callback+0xf2>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <event_callback+0x7c>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a46d 	.word	0x0800a46d
 800a45c:	0800a48f 	.word	0x0800a48f
 800a460:	0800a4a7 	.word	0x0800a4a7
 800a464:	0800a4bb 	.word	0x0800a4bb
 800a468:	0800a4c7 	.word	0x0800a4c7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a472:	b29b      	uxth	r3, r3
 800a474:	3301      	adds	r3, #1
 800a476:	b29b      	uxth	r3, r3
 800a478:	b21a      	sxth	r2, r3
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a484:	2b01      	cmp	r3, #1
 800a486:	dd2a      	ble.n	800a4de <event_callback+0x102>
        check_waiters = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	623b      	str	r3, [r7, #32]
      }
      break;
 800a48c:	e027      	b.n	800a4de <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a494:	b29b      	uxth	r3, r3
 800a496:	3b01      	subs	r3, #1
 800a498:	b29b      	uxth	r3, r3
 800a49a:	b21a      	sxth	r2, r3
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	623b      	str	r3, [r7, #32]
      break;
 800a4a4:	e01c      	b.n	800a4e0 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	895b      	ldrh	r3, [r3, #10]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <event_callback+0xd6>
        check_waiters = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	815a      	strh	r2, [r3, #10]
      break;
 800a4b8:	e012      	b.n	800a4e0 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	623b      	str	r3, [r7, #32]
      break;
 800a4c4:	e00c      	b.n	800a4e0 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	819a      	strh	r2, [r3, #12]
      break;
 800a4cc:	e008      	b.n	800a4e0 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800a4ce:	4b1e      	ldr	r3, [pc, #120]	; (800a548 <event_callback+0x16c>)
 800a4d0:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800a4d4:	491d      	ldr	r1, [pc, #116]	; (800a54c <event_callback+0x170>)
 800a4d6:	481e      	ldr	r0, [pc, #120]	; (800a550 <event_callback+0x174>)
 800a4d8:	f00b ff26 	bl	8016328 <iprintf>
      break;
 800a4dc:	e000      	b.n	800a4e0 <event_callback+0x104>
      break;
 800a4de:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	7b9b      	ldrb	r3, [r3, #14]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d025      	beq.n	800a534 <event_callback+0x158>
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d022      	beq.n	800a534 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bfcc      	ite	gt
 800a4f8:	2301      	movgt	r3, #1
 800a4fa:	2300      	movle	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	895b      	ldrh	r3, [r3, #10]
 800a504:	2b00      	cmp	r3, #0
 800a506:	bf14      	ite	ne
 800a508:	2301      	movne	r3, #1
 800a50a:	2300      	moveq	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	899b      	ldrh	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	bf14      	ite	ne
 800a518:	2301      	movne	r3, #1
 800a51a:	2300      	moveq	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800a520:	69f8      	ldr	r0, [r7, #28]
 800a522:	f00b fdf1 	bl	8016108 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	6979      	ldr	r1, [r7, #20]
 800a52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a52e:	f000 f811 	bl	800a554 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800a532:	e006      	b.n	800a542 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800a534:	69f8      	ldr	r0, [r7, #28]
 800a536:	f00b fde7 	bl	8016108 <sys_arch_unprotect>
 800a53a:	e002      	b.n	800a542 <event_callback+0x166>
    return;
 800a53c:	bf00      	nop
 800a53e:	e000      	b.n	800a542 <event_callback+0x166>
      return;
 800a540:	bf00      	nop
  }
  done_socket(sock);
}
 800a542:	3728      	adds	r7, #40	; 0x28
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	080182cc 	.word	0x080182cc
 800a54c:	08018648 	.word	0x08018648
 800a550:	08018320 	.word	0x08018320

0800a554 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af02      	add	r7, sp, #8
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a562:	4b42      	ldr	r3, [pc, #264]	; (800a66c <select_check_waiters+0x118>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	e078      	b.n	800a65c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d171      	bne.n	800a656 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	68f9      	ldr	r1, [r7, #12]
 800a588:	6978      	ldr	r0, [r7, #20]
 800a58a:	f7ff fee3 	bl	800a354 <lwip_poll_should_wake>
 800a58e:	6138      	str	r0, [r7, #16]
 800a590:	e056      	b.n	800a640 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d017      	beq.n	800a5c8 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d013      	beq.n	800a5c8 <select_check_waiters+0x74>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da00      	bge.n	800a5ac <select_check_waiters+0x58>
 800a5aa:	331f      	adds	r3, #31
 800a5ac:	115b      	asrs	r3, r3, #5
 800a5ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <select_check_waiters+0x74>
            do_signal = 1;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01a      	beq.n	800a604 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d117      	bne.n	800a604 <select_check_waiters+0xb0>
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d013      	beq.n	800a604 <select_check_waiters+0xb0>
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	da00      	bge.n	800a5e8 <select_check_waiters+0x94>
 800a5e6:	331f      	adds	r3, #31
 800a5e8:	115b      	asrs	r3, r3, #5
 800a5ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f003 031f 	and.w	r3, r3, #31
 800a5f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <select_check_waiters+0xb0>
            do_signal = 1;
 800a600:	2301      	movs	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01a      	beq.n	800a640 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d117      	bne.n	800a640 <select_check_waiters+0xec>
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d013      	beq.n	800a640 <select_check_waiters+0xec>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da00      	bge.n	800a624 <select_check_waiters+0xd0>
 800a622:	331f      	adds	r3, #31
 800a624:	115b      	asrs	r3, r3, #5
 800a626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f003 031f 	and.w	r3, r3, #31
 800a630:	fa22 f303 	lsr.w	r3, r2, r3
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <select_check_waiters+0xec>
            do_signal = 1;
 800a63c:	2301      	movs	r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d007      	beq.n	800a656 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2201      	movs	r2, #1
 800a64a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	3320      	adds	r3, #32
 800a650:	4618      	mov	r0, r3
 800a652:	f00b fca7 	bl	8015fa4 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d183      	bne.n	800a56a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20009090 	.word	0x20009090

0800a670 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a67a:	f008 f9cb 	bl	8012a14 <sys_timeouts_sleeptime>
 800a67e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a686:	d10b      	bne.n	800a6a0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a688:	4813      	ldr	r0, [pc, #76]	; (800a6d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a68a:	f00b fcfc 	bl	8016086 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a68e:	2200      	movs	r2, #0
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f00b fbb4 	bl	8015e00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a698:	480f      	ldr	r0, [pc, #60]	; (800a6d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a69a:	f00b fce5 	bl	8016068 <sys_mutex_lock>
    return;
 800a69e:	e018      	b.n	800a6d2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a6a6:	f008 f97b 	bl	80129a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a6aa:	e7e6      	b.n	800a67a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a6ac:	480a      	ldr	r0, [pc, #40]	; (800a6d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a6ae:	f00b fcea 	bl	8016086 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f00b fba2 	bl	8015e00 <sys_arch_mbox_fetch>
 800a6bc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a6be:	4806      	ldr	r0, [pc, #24]	; (800a6d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800a6c0:	f00b fcd2 	bl	8016068 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d102      	bne.n	800a6d2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a6cc:	f008 f968 	bl	80129a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a6d0:	e7d3      	b.n	800a67a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200090a0 	.word	0x200090a0

0800a6dc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a6e4:	4810      	ldr	r0, [pc, #64]	; (800a728 <tcpip_thread+0x4c>)
 800a6e6:	f00b fcbf 	bl	8016068 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a6ea:	4b10      	ldr	r3, [pc, #64]	; (800a72c <tcpip_thread+0x50>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d005      	beq.n	800a6fe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a6f2:	4b0e      	ldr	r3, [pc, #56]	; (800a72c <tcpip_thread+0x50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a0e      	ldr	r2, [pc, #56]	; (800a730 <tcpip_thread+0x54>)
 800a6f8:	6812      	ldr	r2, [r2, #0]
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a6fe:	f107 030c 	add.w	r3, r7, #12
 800a702:	4619      	mov	r1, r3
 800a704:	480b      	ldr	r0, [pc, #44]	; (800a734 <tcpip_thread+0x58>)
 800a706:	f7ff ffb3 	bl	800a670 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d106      	bne.n	800a71e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a710:	4b09      	ldr	r3, [pc, #36]	; (800a738 <tcpip_thread+0x5c>)
 800a712:	2291      	movs	r2, #145	; 0x91
 800a714:	4909      	ldr	r1, [pc, #36]	; (800a73c <tcpip_thread+0x60>)
 800a716:	480a      	ldr	r0, [pc, #40]	; (800a740 <tcpip_thread+0x64>)
 800a718:	f00b fe06 	bl	8016328 <iprintf>
      continue;
 800a71c:	e003      	b.n	800a726 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f80f 	bl	800a744 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a726:	e7ea      	b.n	800a6fe <tcpip_thread+0x22>
 800a728:	200090a0 	.word	0x200090a0
 800a72c:	20009094 	.word	0x20009094
 800a730:	20009098 	.word	0x20009098
 800a734:	2000909c 	.word	0x2000909c
 800a738:	0801869c 	.word	0x0801869c
 800a73c:	080186cc 	.word	0x080186cc
 800a740:	080186ec 	.word	0x080186ec

0800a744 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d026      	beq.n	800a7a2 <tcpip_thread_handle_msg+0x5e>
 800a754:	2b02      	cmp	r3, #2
 800a756:	dc2b      	bgt.n	800a7b0 <tcpip_thread_handle_msg+0x6c>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <tcpip_thread_handle_msg+0x1e>
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d015      	beq.n	800a78c <tcpip_thread_handle_msg+0x48>
 800a760:	e026      	b.n	800a7b0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6850      	ldr	r0, [r2, #4]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6892      	ldr	r2, [r2, #8]
 800a76e:	4611      	mov	r1, r2
 800a770:	4798      	blx	r3
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fd21 	bl	800c1c4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	2009      	movs	r0, #9
 800a786:	f000 fe79 	bl	800b47c <memp_free>
      break;
 800a78a:	e018      	b.n	800a7be <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6892      	ldr	r2, [r2, #8]
 800a794:	4610      	mov	r0, r2
 800a796:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	2008      	movs	r0, #8
 800a79c:	f000 fe6e 	bl	800b47c <memp_free>
      break;
 800a7a0:	e00d      	b.n	800a7be <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6892      	ldr	r2, [r2, #8]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
      break;
 800a7ae:	e006      	b.n	800a7be <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a7b0:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <tcpip_thread_handle_msg+0x84>)
 800a7b2:	22cf      	movs	r2, #207	; 0xcf
 800a7b4:	4905      	ldr	r1, [pc, #20]	; (800a7cc <tcpip_thread_handle_msg+0x88>)
 800a7b6:	4806      	ldr	r0, [pc, #24]	; (800a7d0 <tcpip_thread_handle_msg+0x8c>)
 800a7b8:	f00b fdb6 	bl	8016328 <iprintf>
      break;
 800a7bc:	bf00      	nop
  }
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0801869c 	.word	0x0801869c
 800a7cc:	080186cc 	.word	0x080186cc
 800a7d0:	080186ec 	.word	0x080186ec

0800a7d4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a7e0:	481a      	ldr	r0, [pc, #104]	; (800a84c <tcpip_inpkt+0x78>)
 800a7e2:	f00b fb68 	bl	8015eb6 <sys_mbox_valid>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <tcpip_inpkt+0x24>
 800a7ec:	4b18      	ldr	r3, [pc, #96]	; (800a850 <tcpip_inpkt+0x7c>)
 800a7ee:	22fc      	movs	r2, #252	; 0xfc
 800a7f0:	4918      	ldr	r1, [pc, #96]	; (800a854 <tcpip_inpkt+0x80>)
 800a7f2:	4819      	ldr	r0, [pc, #100]	; (800a858 <tcpip_inpkt+0x84>)
 800a7f4:	f00b fd98 	bl	8016328 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a7f8:	2009      	movs	r0, #9
 800a7fa:	f000 fdc9 	bl	800b390 <memp_malloc>
 800a7fe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
 800a80a:	e01a      	b.n	800a842 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a824:	6979      	ldr	r1, [r7, #20]
 800a826:	4809      	ldr	r0, [pc, #36]	; (800a84c <tcpip_inpkt+0x78>)
 800a828:	f00b fad0 	bl	8015dcc <sys_mbox_trypost>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d006      	beq.n	800a840 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	2009      	movs	r0, #9
 800a836:	f000 fe21 	bl	800b47c <memp_free>
    return ERR_MEM;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
 800a83e:	e000      	b.n	800a842 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a840:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	2000909c 	.word	0x2000909c
 800a850:	0801869c 	.word	0x0801869c
 800a854:	08018714 	.word	0x08018714
 800a858:	080186ec 	.word	0x080186ec

0800a85c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a86c:	f003 0318 	and.w	r3, r3, #24
 800a870:	2b00      	cmp	r3, #0
 800a872:	d006      	beq.n	800a882 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a874:	4a08      	ldr	r2, [pc, #32]	; (800a898 <tcpip_input+0x3c>)
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff ffab 	bl	800a7d4 <tcpip_inpkt>
 800a87e:	4603      	mov	r3, r0
 800a880:	e005      	b.n	800a88e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a882:	4a06      	ldr	r2, [pc, #24]	; (800a89c <tcpip_input+0x40>)
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff ffa4 	bl	800a7d4 <tcpip_inpkt>
 800a88c:	4603      	mov	r3, r0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	08015bb9 	.word	0x08015bb9
 800a89c:	0801486d 	.word	0x0801486d

0800a8a0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a8aa:	4819      	ldr	r0, [pc, #100]	; (800a910 <tcpip_try_callback+0x70>)
 800a8ac:	f00b fb03 	bl	8015eb6 <sys_mbox_valid>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <tcpip_try_callback+0x24>
 800a8b6:	4b17      	ldr	r3, [pc, #92]	; (800a914 <tcpip_try_callback+0x74>)
 800a8b8:	f240 125d 	movw	r2, #349	; 0x15d
 800a8bc:	4916      	ldr	r1, [pc, #88]	; (800a918 <tcpip_try_callback+0x78>)
 800a8be:	4817      	ldr	r0, [pc, #92]	; (800a91c <tcpip_try_callback+0x7c>)
 800a8c0:	f00b fd32 	bl	8016328 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a8c4:	2008      	movs	r0, #8
 800a8c6:	f000 fd63 	bl	800b390 <memp_malloc>
 800a8ca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d6:	e017      	b.n	800a908 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	4808      	ldr	r0, [pc, #32]	; (800a910 <tcpip_try_callback+0x70>)
 800a8ee:	f00b fa6d 	bl	8015dcc <sys_mbox_trypost>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a8f8:	68f9      	ldr	r1, [r7, #12]
 800a8fa:	2008      	movs	r0, #8
 800a8fc:	f000 fdbe 	bl	800b47c <memp_free>
    return ERR_MEM;
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	e000      	b.n	800a908 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	2000909c 	.word	0x2000909c
 800a914:	0801869c 	.word	0x0801869c
 800a918:	08018714 	.word	0x08018714
 800a91c:	080186ec 	.word	0x080186ec

0800a920 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a92c:	4806      	ldr	r0, [pc, #24]	; (800a948 <tcpip_send_msg_wait_sem+0x28>)
 800a92e:	f00b fb9b 	bl	8016068 <sys_mutex_lock>
  fn(apimsg);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68b8      	ldr	r0, [r7, #8]
 800a936:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a938:	4803      	ldr	r0, [pc, #12]	; (800a948 <tcpip_send_msg_wait_sem+0x28>)
 800a93a:	f00b fba4 	bl	8016086 <sys_mutex_unlock>
  return ERR_OK;
 800a93e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	200090a0 	.word	0x200090a0

0800a94c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af02      	add	r7, sp, #8
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a956:	f000 f871 	bl	800aa3c <lwip_init>

  tcpip_init_done = initfunc;
 800a95a:	4a17      	ldr	r2, [pc, #92]	; (800a9b8 <tcpip_init+0x6c>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a960:	4a16      	ldr	r2, [pc, #88]	; (800a9bc <tcpip_init+0x70>)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a966:	2106      	movs	r1, #6
 800a968:	4815      	ldr	r0, [pc, #84]	; (800a9c0 <tcpip_init+0x74>)
 800a96a:	f00b f9fb 	bl	8015d64 <sys_mbox_new>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a974:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <tcpip_init+0x78>)
 800a976:	f240 2261 	movw	r2, #609	; 0x261
 800a97a:	4913      	ldr	r1, [pc, #76]	; (800a9c8 <tcpip_init+0x7c>)
 800a97c:	4813      	ldr	r0, [pc, #76]	; (800a9cc <tcpip_init+0x80>)
 800a97e:	f00b fcd3 	bl	8016328 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a982:	4813      	ldr	r0, [pc, #76]	; (800a9d0 <tcpip_init+0x84>)
 800a984:	f00b fb54 	bl	8016030 <sys_mutex_new>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d006      	beq.n	800a99c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <tcpip_init+0x78>)
 800a990:	f240 2265 	movw	r2, #613	; 0x265
 800a994:	490f      	ldr	r1, [pc, #60]	; (800a9d4 <tcpip_init+0x88>)
 800a996:	480d      	ldr	r0, [pc, #52]	; (800a9cc <tcpip_init+0x80>)
 800a998:	f00b fcc6 	bl	8016328 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a99c:	2300      	movs	r3, #0
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	490c      	ldr	r1, [pc, #48]	; (800a9d8 <tcpip_init+0x8c>)
 800a9a8:	480c      	ldr	r0, [pc, #48]	; (800a9dc <tcpip_init+0x90>)
 800a9aa:	f00b fb79 	bl	80160a0 <sys_thread_new>
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20009094 	.word	0x20009094
 800a9bc:	20009098 	.word	0x20009098
 800a9c0:	2000909c 	.word	0x2000909c
 800a9c4:	0801869c 	.word	0x0801869c
 800a9c8:	08018724 	.word	0x08018724
 800a9cc:	080186ec 	.word	0x080186ec
 800a9d0:	200090a0 	.word	0x200090a0
 800a9d4:	08018748 	.word	0x08018748
 800a9d8:	0800a6dd 	.word	0x0800a6dd
 800a9dc:	0801876c 	.word	0x0801876c

0800a9e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	021b      	lsls	r3, r3, #8
 800a9ee:	b21a      	sxth	r2, r3
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	0a1b      	lsrs	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	b21b      	sxth	r3, r3
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	b21b      	sxth	r3, r3
 800a9fc:	b29b      	uxth	r3, r3
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	061a      	lsls	r2, r3, #24
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	021b      	lsls	r3, r3, #8
 800aa1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	0e1b      	lsrs	r3, r3, #24
 800aa2e:	4313      	orrs	r3, r2
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aa46:	f00b fae5 	bl	8016014 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aa4a:	f000 f8d5 	bl	800abf8 <mem_init>
  memp_init();
 800aa4e:	f000 fc31 	bl	800b2b4 <memp_init>
  pbuf_init();
  netif_init();
 800aa52:	f000 fd3d 	bl	800b4d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aa56:	f008 f815 	bl	8012a84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aa5a:	f001 fe5d 	bl	800c718 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aa5e:	f007 ff57 	bl	8012910 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <ptr_to_mem+0x20>)
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	4413      	add	r3, r2
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20009710 	.word	0x20009710

0800aa90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <mem_to_ptr+0x20>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	b29b      	uxth	r3, r3
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20009710 	.word	0x20009710

0800aab4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aabc:	4b45      	ldr	r3, [pc, #276]	; (800abd4 <plug_holes+0x120>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d206      	bcs.n	800aad4 <plug_holes+0x20>
 800aac6:	4b44      	ldr	r3, [pc, #272]	; (800abd8 <plug_holes+0x124>)
 800aac8:	f240 12df 	movw	r2, #479	; 0x1df
 800aacc:	4943      	ldr	r1, [pc, #268]	; (800abdc <plug_holes+0x128>)
 800aace:	4844      	ldr	r0, [pc, #272]	; (800abe0 <plug_holes+0x12c>)
 800aad0:	f00b fc2a 	bl	8016328 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aad4:	4b43      	ldr	r3, [pc, #268]	; (800abe4 <plug_holes+0x130>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d306      	bcc.n	800aaec <plug_holes+0x38>
 800aade:	4b3e      	ldr	r3, [pc, #248]	; (800abd8 <plug_holes+0x124>)
 800aae0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aae4:	4940      	ldr	r1, [pc, #256]	; (800abe8 <plug_holes+0x134>)
 800aae6:	483e      	ldr	r0, [pc, #248]	; (800abe0 <plug_holes+0x12c>)
 800aae8:	f00b fc1e 	bl	8016328 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	791b      	ldrb	r3, [r3, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <plug_holes+0x4e>
 800aaf4:	4b38      	ldr	r3, [pc, #224]	; (800abd8 <plug_holes+0x124>)
 800aaf6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800aafa:	493c      	ldr	r1, [pc, #240]	; (800abec <plug_holes+0x138>)
 800aafc:	4838      	ldr	r0, [pc, #224]	; (800abe0 <plug_holes+0x12c>)
 800aafe:	f00b fc13 	bl	8016328 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab0a:	d906      	bls.n	800ab1a <plug_holes+0x66>
 800ab0c:	4b32      	ldr	r3, [pc, #200]	; (800abd8 <plug_holes+0x124>)
 800ab0e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ab12:	4937      	ldr	r1, [pc, #220]	; (800abf0 <plug_holes+0x13c>)
 800ab14:	4832      	ldr	r0, [pc, #200]	; (800abe0 <plug_holes+0x12c>)
 800ab16:	f00b fc07 	bl	8016328 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff ffa4 	bl	800aa6c <ptr_to_mem>
 800ab24:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d024      	beq.n	800ab78 <plug_holes+0xc4>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	791b      	ldrb	r3, [r3, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d120      	bne.n	800ab78 <plug_holes+0xc4>
 800ab36:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <plug_holes+0x130>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d01b      	beq.n	800ab78 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ab40:	4b2c      	ldr	r3, [pc, #176]	; (800abf4 <plug_holes+0x140>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d102      	bne.n	800ab50 <plug_holes+0x9c>
      lfree = mem;
 800ab4a:	4a2a      	ldr	r2, [pc, #168]	; (800abf4 <plug_holes+0x140>)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	881a      	ldrh	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab60:	d00a      	beq.n	800ab78 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff ff80 	bl	800aa6c <ptr_to_mem>
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ff8e 	bl	800aa90 <mem_to_ptr>
 800ab74:	4603      	mov	r3, r0
 800ab76:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	885b      	ldrh	r3, [r3, #2]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff ff75 	bl	800aa6c <ptr_to_mem>
 800ab82:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d01f      	beq.n	800abcc <plug_holes+0x118>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	791b      	ldrb	r3, [r3, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d11b      	bne.n	800abcc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ab94:	4b17      	ldr	r3, [pc, #92]	; (800abf4 <plug_holes+0x140>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d102      	bne.n	800aba4 <plug_holes+0xf0>
      lfree = pmem;
 800ab9e:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <plug_holes+0x140>)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	881a      	ldrh	r2, [r3, #0]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abb4:	d00a      	beq.n	800abcc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff ff56 	bl	800aa6c <ptr_to_mem>
 800abc0:	4604      	mov	r4, r0
 800abc2:	68b8      	ldr	r0, [r7, #8]
 800abc4:	f7ff ff64 	bl	800aa90 <mem_to_ptr>
 800abc8:	4603      	mov	r3, r0
 800abca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800abcc:	bf00      	nop
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd90      	pop	{r4, r7, pc}
 800abd4:	20009710 	.word	0x20009710
 800abd8:	0801877c 	.word	0x0801877c
 800abdc:	080187ac 	.word	0x080187ac
 800abe0:	080187c4 	.word	0x080187c4
 800abe4:	20009714 	.word	0x20009714
 800abe8:	080187ec 	.word	0x080187ec
 800abec:	08018808 	.word	0x08018808
 800abf0:	08018824 	.word	0x08018824
 800abf4:	2000971c 	.word	0x2000971c

0800abf8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800abfe:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <mem_init+0x84>)
 800ac00:	3303      	adds	r3, #3
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	461a      	mov	r2, r3
 800ac08:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <mem_init+0x88>)
 800ac0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ac0c:	4b1c      	ldr	r3, [pc, #112]	; (800ac80 <mem_init+0x88>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ac26:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ac2a:	f7ff ff1f 	bl	800aa6c <ptr_to_mem>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	4a14      	ldr	r2, [pc, #80]	; (800ac84 <mem_init+0x8c>)
 800ac32:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <mem_init+0x8c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ac3c:	4b11      	ldr	r3, [pc, #68]	; (800ac84 <mem_init+0x8c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ac46:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <mem_init+0x8c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac50:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <mem_init+0x88>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a0c      	ldr	r2, [pc, #48]	; (800ac88 <mem_init+0x90>)
 800ac56:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac58:	480c      	ldr	r0, [pc, #48]	; (800ac8c <mem_init+0x94>)
 800ac5a:	f00b f9e9 	bl	8016030 <sys_mutex_new>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d006      	beq.n	800ac72 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ac64:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <mem_init+0x98>)
 800ac66:	f240 221f 	movw	r2, #543	; 0x21f
 800ac6a:	490a      	ldr	r1, [pc, #40]	; (800ac94 <mem_init+0x9c>)
 800ac6c:	480a      	ldr	r0, [pc, #40]	; (800ac98 <mem_init+0xa0>)
 800ac6e:	f00b fb5b 	bl	8016328 <iprintf>
  }
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200090bc 	.word	0x200090bc
 800ac80:	20009710 	.word	0x20009710
 800ac84:	20009714 	.word	0x20009714
 800ac88:	2000971c 	.word	0x2000971c
 800ac8c:	20009718 	.word	0x20009718
 800ac90:	0801877c 	.word	0x0801877c
 800ac94:	08018850 	.word	0x08018850
 800ac98:	080187c4 	.word	0x080187c4

0800ac9c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7ff fef3 	bl	800aa90 <mem_to_ptr>
 800acaa:	4603      	mov	r3, r0
 800acac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff feda 	bl	800aa6c <ptr_to_mem>
 800acb8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	885b      	ldrh	r3, [r3, #2]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fed4 	bl	800aa6c <ptr_to_mem>
 800acc4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acce:	d818      	bhi.n	800ad02 <mem_link_valid+0x66>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	885b      	ldrh	r3, [r3, #2]
 800acd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acd8:	d813      	bhi.n	800ad02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800acde:	8afa      	ldrh	r2, [r7, #22]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d004      	beq.n	800acee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	8afa      	ldrh	r2, [r7, #22]
 800acea:	429a      	cmp	r2, r3
 800acec:	d109      	bne.n	800ad02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800acee:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <mem_link_valid+0x74>)
 800acf0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d006      	beq.n	800ad06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	885b      	ldrh	r3, [r3, #2]
 800acfc:	8afa      	ldrh	r2, [r7, #22]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d001      	beq.n	800ad06 <mem_link_valid+0x6a>
    return 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e000      	b.n	800ad08 <mem_link_valid+0x6c>
  }
  return 1;
 800ad06:	2301      	movs	r3, #1
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20009714 	.word	0x20009714

0800ad14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d070      	beq.n	800ae04 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00d      	beq.n	800ad48 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ad2c:	4b37      	ldr	r3, [pc, #220]	; (800ae0c <mem_free+0xf8>)
 800ad2e:	f240 2273 	movw	r2, #627	; 0x273
 800ad32:	4937      	ldr	r1, [pc, #220]	; (800ae10 <mem_free+0xfc>)
 800ad34:	4837      	ldr	r0, [pc, #220]	; (800ae14 <mem_free+0x100>)
 800ad36:	f00b faf7 	bl	8016328 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad3a:	f00b f9d7 	bl	80160ec <sys_arch_protect>
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f00b f9e1 	bl	8016108 <sys_arch_unprotect>
    return;
 800ad46:	e05e      	b.n	800ae06 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3b08      	subs	r3, #8
 800ad4c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ad4e:	4b32      	ldr	r3, [pc, #200]	; (800ae18 <mem_free+0x104>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	69fa      	ldr	r2, [r7, #28]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d306      	bcc.n	800ad66 <mem_free+0x52>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f103 020c 	add.w	r2, r3, #12
 800ad5e:	4b2f      	ldr	r3, [pc, #188]	; (800ae1c <mem_free+0x108>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d90d      	bls.n	800ad82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ad66:	4b29      	ldr	r3, [pc, #164]	; (800ae0c <mem_free+0xf8>)
 800ad68:	f240 227f 	movw	r2, #639	; 0x27f
 800ad6c:	492c      	ldr	r1, [pc, #176]	; (800ae20 <mem_free+0x10c>)
 800ad6e:	4829      	ldr	r0, [pc, #164]	; (800ae14 <mem_free+0x100>)
 800ad70:	f00b fada 	bl	8016328 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad74:	f00b f9ba 	bl	80160ec <sys_arch_protect>
 800ad78:	6138      	str	r0, [r7, #16]
 800ad7a:	6938      	ldr	r0, [r7, #16]
 800ad7c:	f00b f9c4 	bl	8016108 <sys_arch_unprotect>
    return;
 800ad80:	e041      	b.n	800ae06 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad82:	4828      	ldr	r0, [pc, #160]	; (800ae24 <mem_free+0x110>)
 800ad84:	f00b f970 	bl	8016068 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	791b      	ldrb	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d110      	bne.n	800adb2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ad90:	4b1e      	ldr	r3, [pc, #120]	; (800ae0c <mem_free+0xf8>)
 800ad92:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ad96:	4924      	ldr	r1, [pc, #144]	; (800ae28 <mem_free+0x114>)
 800ad98:	481e      	ldr	r0, [pc, #120]	; (800ae14 <mem_free+0x100>)
 800ad9a:	f00b fac5 	bl	8016328 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ad9e:	4821      	ldr	r0, [pc, #132]	; (800ae24 <mem_free+0x110>)
 800ada0:	f00b f971 	bl	8016086 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ada4:	f00b f9a2 	bl	80160ec <sys_arch_protect>
 800ada8:	6178      	str	r0, [r7, #20]
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	f00b f9ac 	bl	8016108 <sys_arch_unprotect>
    return;
 800adb0:	e029      	b.n	800ae06 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800adb2:	69f8      	ldr	r0, [r7, #28]
 800adb4:	f7ff ff72 	bl	800ac9c <mem_link_valid>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d110      	bne.n	800ade0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800adbe:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <mem_free+0xf8>)
 800adc0:	f240 2295 	movw	r2, #661	; 0x295
 800adc4:	4919      	ldr	r1, [pc, #100]	; (800ae2c <mem_free+0x118>)
 800adc6:	4813      	ldr	r0, [pc, #76]	; (800ae14 <mem_free+0x100>)
 800adc8:	f00b faae 	bl	8016328 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800adcc:	4815      	ldr	r0, [pc, #84]	; (800ae24 <mem_free+0x110>)
 800adce:	f00b f95a 	bl	8016086 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800add2:	f00b f98b 	bl	80160ec <sys_arch_protect>
 800add6:	61b8      	str	r0, [r7, #24]
 800add8:	69b8      	ldr	r0, [r7, #24]
 800adda:	f00b f995 	bl	8016108 <sys_arch_unprotect>
    return;
 800adde:	e012      	b.n	800ae06 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	2200      	movs	r2, #0
 800ade4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ade6:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <mem_free+0x11c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	429a      	cmp	r2, r3
 800adee:	d202      	bcs.n	800adf6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800adf0:	4a0f      	ldr	r2, [pc, #60]	; (800ae30 <mem_free+0x11c>)
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800adf6:	69f8      	ldr	r0, [r7, #28]
 800adf8:	f7ff fe5c 	bl	800aab4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800adfc:	4809      	ldr	r0, [pc, #36]	; (800ae24 <mem_free+0x110>)
 800adfe:	f00b f942 	bl	8016086 <sys_mutex_unlock>
 800ae02:	e000      	b.n	800ae06 <mem_free+0xf2>
    return;
 800ae04:	bf00      	nop
}
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0801877c 	.word	0x0801877c
 800ae10:	0801886c 	.word	0x0801886c
 800ae14:	080187c4 	.word	0x080187c4
 800ae18:	20009710 	.word	0x20009710
 800ae1c:	20009714 	.word	0x20009714
 800ae20:	08018890 	.word	0x08018890
 800ae24:	20009718 	.word	0x20009718
 800ae28:	080188ac 	.word	0x080188ac
 800ae2c:	080188d4 	.word	0x080188d4
 800ae30:	2000971c 	.word	0x2000971c

0800ae34 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ae40:	887b      	ldrh	r3, [r7, #2]
 800ae42:	3303      	adds	r3, #3
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ae4c:	8bfb      	ldrh	r3, [r7, #30]
 800ae4e:	2b0b      	cmp	r3, #11
 800ae50:	d801      	bhi.n	800ae56 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ae52:	230c      	movs	r3, #12
 800ae54:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ae56:	8bfb      	ldrh	r3, [r7, #30]
 800ae58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae5c:	d803      	bhi.n	800ae66 <mem_trim+0x32>
 800ae5e:	8bfa      	ldrh	r2, [r7, #30]
 800ae60:	887b      	ldrh	r3, [r7, #2]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d201      	bcs.n	800ae6a <mem_trim+0x36>
    return NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e0d8      	b.n	800b01c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ae6a:	4b6e      	ldr	r3, [pc, #440]	; (800b024 <mem_trim+0x1f0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d304      	bcc.n	800ae7e <mem_trim+0x4a>
 800ae74:	4b6c      	ldr	r3, [pc, #432]	; (800b028 <mem_trim+0x1f4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d306      	bcc.n	800ae8c <mem_trim+0x58>
 800ae7e:	4b6b      	ldr	r3, [pc, #428]	; (800b02c <mem_trim+0x1f8>)
 800ae80:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ae84:	496a      	ldr	r1, [pc, #424]	; (800b030 <mem_trim+0x1fc>)
 800ae86:	486b      	ldr	r0, [pc, #428]	; (800b034 <mem_trim+0x200>)
 800ae88:	f00b fa4e 	bl	8016328 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ae8c:	4b65      	ldr	r3, [pc, #404]	; (800b024 <mem_trim+0x1f0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d304      	bcc.n	800aea0 <mem_trim+0x6c>
 800ae96:	4b64      	ldr	r3, [pc, #400]	; (800b028 <mem_trim+0x1f4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d307      	bcc.n	800aeb0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aea0:	f00b f924 	bl	80160ec <sys_arch_protect>
 800aea4:	60b8      	str	r0, [r7, #8]
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f00b f92e 	bl	8016108 <sys_arch_unprotect>
    return rmem;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	e0b5      	b.n	800b01c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3b08      	subs	r3, #8
 800aeb4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aeb6:	69b8      	ldr	r0, [r7, #24]
 800aeb8:	f7ff fdea 	bl	800aa90 <mem_to_ptr>
 800aebc:	4603      	mov	r3, r0
 800aebe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	881a      	ldrh	r2, [r3, #0]
 800aec4:	8afb      	ldrh	r3, [r7, #22]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	3b08      	subs	r3, #8
 800aecc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aece:	8bfa      	ldrh	r2, [r7, #30]
 800aed0:	8abb      	ldrh	r3, [r7, #20]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d906      	bls.n	800aee4 <mem_trim+0xb0>
 800aed6:	4b55      	ldr	r3, [pc, #340]	; (800b02c <mem_trim+0x1f8>)
 800aed8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aedc:	4956      	ldr	r1, [pc, #344]	; (800b038 <mem_trim+0x204>)
 800aede:	4855      	ldr	r0, [pc, #340]	; (800b034 <mem_trim+0x200>)
 800aee0:	f00b fa22 	bl	8016328 <iprintf>
  if (newsize > size) {
 800aee4:	8bfa      	ldrh	r2, [r7, #30]
 800aee6:	8abb      	ldrh	r3, [r7, #20]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d901      	bls.n	800aef0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	e095      	b.n	800b01c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800aef0:	8bfa      	ldrh	r2, [r7, #30]
 800aef2:	8abb      	ldrh	r3, [r7, #20]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d101      	bne.n	800aefc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	e08f      	b.n	800b01c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aefc:	484f      	ldr	r0, [pc, #316]	; (800b03c <mem_trim+0x208>)
 800aefe:	f00b f8b3 	bl	8016068 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fdb0 	bl	800aa6c <ptr_to_mem>
 800af0c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	791b      	ldrb	r3, [r3, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d13f      	bne.n	800af96 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af1e:	d106      	bne.n	800af2e <mem_trim+0xfa>
 800af20:	4b42      	ldr	r3, [pc, #264]	; (800b02c <mem_trim+0x1f8>)
 800af22:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af26:	4946      	ldr	r1, [pc, #280]	; (800b040 <mem_trim+0x20c>)
 800af28:	4842      	ldr	r0, [pc, #264]	; (800b034 <mem_trim+0x200>)
 800af2a:	f00b f9fd 	bl	8016328 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af34:	8afa      	ldrh	r2, [r7, #22]
 800af36:	8bfb      	ldrh	r3, [r7, #30]
 800af38:	4413      	add	r3, r2
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	3308      	adds	r3, #8
 800af3e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800af40:	4b40      	ldr	r3, [pc, #256]	; (800b044 <mem_trim+0x210>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	d106      	bne.n	800af58 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800af4a:	89fb      	ldrh	r3, [r7, #14]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7ff fd8d 	bl	800aa6c <ptr_to_mem>
 800af52:	4603      	mov	r3, r0
 800af54:	4a3b      	ldr	r2, [pc, #236]	; (800b044 <mem_trim+0x210>)
 800af56:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800af58:	89fb      	ldrh	r3, [r7, #14]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fd86 	bl	800aa6c <ptr_to_mem>
 800af60:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2200      	movs	r2, #0
 800af66:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	89ba      	ldrh	r2, [r7, #12]
 800af6c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	8afa      	ldrh	r2, [r7, #22]
 800af72:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	89fa      	ldrh	r2, [r7, #14]
 800af78:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af82:	d047      	beq.n	800b014 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fd6f 	bl	800aa6c <ptr_to_mem>
 800af8e:	4602      	mov	r2, r0
 800af90:	89fb      	ldrh	r3, [r7, #14]
 800af92:	8053      	strh	r3, [r2, #2]
 800af94:	e03e      	b.n	800b014 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800af96:	8bfb      	ldrh	r3, [r7, #30]
 800af98:	f103 0214 	add.w	r2, r3, #20
 800af9c:	8abb      	ldrh	r3, [r7, #20]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d838      	bhi.n	800b014 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afa2:	8afa      	ldrh	r2, [r7, #22]
 800afa4:	8bfb      	ldrh	r3, [r7, #30]
 800afa6:	4413      	add	r3, r2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3308      	adds	r3, #8
 800afac:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afb6:	d106      	bne.n	800afc6 <mem_trim+0x192>
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <mem_trim+0x1f8>)
 800afba:	f240 3216 	movw	r2, #790	; 0x316
 800afbe:	4920      	ldr	r1, [pc, #128]	; (800b040 <mem_trim+0x20c>)
 800afc0:	481c      	ldr	r0, [pc, #112]	; (800b034 <mem_trim+0x200>)
 800afc2:	f00b f9b1 	bl	8016328 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800afc6:	89fb      	ldrh	r3, [r7, #14]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fd4f 	bl	800aa6c <ptr_to_mem>
 800afce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800afd0:	4b1c      	ldr	r3, [pc, #112]	; (800b044 <mem_trim+0x210>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d202      	bcs.n	800afe0 <mem_trim+0x1ac>
      lfree = mem2;
 800afda:	4a1a      	ldr	r2, [pc, #104]	; (800b044 <mem_trim+0x210>)
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	2200      	movs	r2, #0
 800afe4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	881a      	ldrh	r2, [r3, #0]
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	8afa      	ldrh	r2, [r7, #22]
 800aff2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	89fa      	ldrh	r2, [r7, #14]
 800aff8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b002:	d007      	beq.n	800b014 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fd2f 	bl	800aa6c <ptr_to_mem>
 800b00e:	4602      	mov	r2, r0
 800b010:	89fb      	ldrh	r3, [r7, #14]
 800b012:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <mem_trim+0x208>)
 800b016:	f00b f836 	bl	8016086 <sys_mutex_unlock>
  return rmem;
 800b01a:	687b      	ldr	r3, [r7, #4]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3720      	adds	r7, #32
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20009710 	.word	0x20009710
 800b028:	20009714 	.word	0x20009714
 800b02c:	0801877c 	.word	0x0801877c
 800b030:	08018908 	.word	0x08018908
 800b034:	080187c4 	.word	0x080187c4
 800b038:	08018920 	.word	0x08018920
 800b03c:	20009718 	.word	0x20009718
 800b040:	08018940 	.word	0x08018940
 800b044:	2000971c 	.word	0x2000971c

0800b048 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <mem_malloc+0x14>
    return NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	e0e2      	b.n	800b222 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b05c:	88fb      	ldrh	r3, [r7, #6]
 800b05e:	3303      	adds	r3, #3
 800b060:	b29b      	uxth	r3, r3
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b068:	8bbb      	ldrh	r3, [r7, #28]
 800b06a:	2b0b      	cmp	r3, #11
 800b06c:	d801      	bhi.n	800b072 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b06e:	230c      	movs	r3, #12
 800b070:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b072:	8bbb      	ldrh	r3, [r7, #28]
 800b074:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b078:	d803      	bhi.n	800b082 <mem_malloc+0x3a>
 800b07a:	8bba      	ldrh	r2, [r7, #28]
 800b07c:	88fb      	ldrh	r3, [r7, #6]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d201      	bcs.n	800b086 <mem_malloc+0x3e>
    return NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	e0cd      	b.n	800b222 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b086:	4869      	ldr	r0, [pc, #420]	; (800b22c <mem_malloc+0x1e4>)
 800b088:	f00a ffee 	bl	8016068 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b08c:	4b68      	ldr	r3, [pc, #416]	; (800b230 <mem_malloc+0x1e8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fcfd 	bl	800aa90 <mem_to_ptr>
 800b096:	4603      	mov	r3, r0
 800b098:	83fb      	strh	r3, [r7, #30]
 800b09a:	e0b7      	b.n	800b20c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b09c:	8bfb      	ldrh	r3, [r7, #30]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff fce4 	bl	800aa6c <ptr_to_mem>
 800b0a4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	791b      	ldrb	r3, [r3, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 80a7 	bne.w	800b1fe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	8bfb      	ldrh	r3, [r7, #30]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	f1a3 0208 	sub.w	r2, r3, #8
 800b0be:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	f0c0 809c 	bcc.w	800b1fe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	8bfb      	ldrh	r3, [r7, #30]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	f1a3 0208 	sub.w	r2, r3, #8
 800b0d4:	8bbb      	ldrh	r3, [r7, #28]
 800b0d6:	3314      	adds	r3, #20
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d333      	bcc.n	800b144 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b0dc:	8bfa      	ldrh	r2, [r7, #30]
 800b0de:	8bbb      	ldrh	r3, [r7, #28]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b0e8:	8a7b      	ldrh	r3, [r7, #18]
 800b0ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0ee:	d106      	bne.n	800b0fe <mem_malloc+0xb6>
 800b0f0:	4b50      	ldr	r3, [pc, #320]	; (800b234 <mem_malloc+0x1ec>)
 800b0f2:	f240 3287 	movw	r2, #903	; 0x387
 800b0f6:	4950      	ldr	r1, [pc, #320]	; (800b238 <mem_malloc+0x1f0>)
 800b0f8:	4850      	ldr	r0, [pc, #320]	; (800b23c <mem_malloc+0x1f4>)
 800b0fa:	f00b f915 	bl	8016328 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b0fe:	8a7b      	ldrh	r3, [r7, #18]
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff fcb3 	bl	800aa6c <ptr_to_mem>
 800b106:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	881a      	ldrh	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	8bfa      	ldrh	r2, [r7, #30]
 800b11a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	8a7a      	ldrh	r2, [r7, #18]
 800b120:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2201      	movs	r2, #1
 800b126:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b130:	d00b      	beq.n	800b14a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff fc98 	bl	800aa6c <ptr_to_mem>
 800b13c:	4602      	mov	r2, r0
 800b13e:	8a7b      	ldrh	r3, [r7, #18]
 800b140:	8053      	strh	r3, [r2, #2]
 800b142:	e002      	b.n	800b14a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2201      	movs	r2, #1
 800b148:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b14a:	4b39      	ldr	r3, [pc, #228]	; (800b230 <mem_malloc+0x1e8>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d127      	bne.n	800b1a4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b154:	4b36      	ldr	r3, [pc, #216]	; (800b230 <mem_malloc+0x1e8>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b15a:	e005      	b.n	800b168 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fc83 	bl	800aa6c <ptr_to_mem>
 800b166:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	791b      	ldrb	r3, [r3, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <mem_malloc+0x132>
 800b170:	4b33      	ldr	r3, [pc, #204]	; (800b240 <mem_malloc+0x1f8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	429a      	cmp	r2, r3
 800b178:	d1f0      	bne.n	800b15c <mem_malloc+0x114>
          }
          lfree = cur;
 800b17a:	4a2d      	ldr	r2, [pc, #180]	; (800b230 <mem_malloc+0x1e8>)
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b180:	4b2b      	ldr	r3, [pc, #172]	; (800b230 <mem_malloc+0x1e8>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b2e      	ldr	r3, [pc, #184]	; (800b240 <mem_malloc+0x1f8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d00b      	beq.n	800b1a4 <mem_malloc+0x15c>
 800b18c:	4b28      	ldr	r3, [pc, #160]	; (800b230 <mem_malloc+0x1e8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	791b      	ldrb	r3, [r3, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d006      	beq.n	800b1a4 <mem_malloc+0x15c>
 800b196:	4b27      	ldr	r3, [pc, #156]	; (800b234 <mem_malloc+0x1ec>)
 800b198:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b19c:	4929      	ldr	r1, [pc, #164]	; (800b244 <mem_malloc+0x1fc>)
 800b19e:	4827      	ldr	r0, [pc, #156]	; (800b23c <mem_malloc+0x1f4>)
 800b1a0:	f00b f8c2 	bl	8016328 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b1a4:	4821      	ldr	r0, [pc, #132]	; (800b22c <mem_malloc+0x1e4>)
 800b1a6:	f00a ff6e 	bl	8016086 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b1aa:	8bba      	ldrh	r2, [r7, #28]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	4a23      	ldr	r2, [pc, #140]	; (800b240 <mem_malloc+0x1f8>)
 800b1b4:	6812      	ldr	r2, [r2, #0]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d906      	bls.n	800b1c8 <mem_malloc+0x180>
 800b1ba:	4b1e      	ldr	r3, [pc, #120]	; (800b234 <mem_malloc+0x1ec>)
 800b1bc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b1c0:	4921      	ldr	r1, [pc, #132]	; (800b248 <mem_malloc+0x200>)
 800b1c2:	481e      	ldr	r0, [pc, #120]	; (800b23c <mem_malloc+0x1f4>)
 800b1c4:	f00b f8b0 	bl	8016328 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f003 0303 	and.w	r3, r3, #3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d006      	beq.n	800b1e0 <mem_malloc+0x198>
 800b1d2:	4b18      	ldr	r3, [pc, #96]	; (800b234 <mem_malloc+0x1ec>)
 800b1d4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b1d8:	491c      	ldr	r1, [pc, #112]	; (800b24c <mem_malloc+0x204>)
 800b1da:	4818      	ldr	r0, [pc, #96]	; (800b23c <mem_malloc+0x1f4>)
 800b1dc:	f00b f8a4 	bl	8016328 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d006      	beq.n	800b1f8 <mem_malloc+0x1b0>
 800b1ea:	4b12      	ldr	r3, [pc, #72]	; (800b234 <mem_malloc+0x1ec>)
 800b1ec:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b1f0:	4917      	ldr	r1, [pc, #92]	; (800b250 <mem_malloc+0x208>)
 800b1f2:	4812      	ldr	r0, [pc, #72]	; (800b23c <mem_malloc+0x1f4>)
 800b1f4:	f00b f898 	bl	8016328 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	e011      	b.n	800b222 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b1fe:	8bfb      	ldrh	r3, [r7, #30]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fc33 	bl	800aa6c <ptr_to_mem>
 800b206:	4603      	mov	r3, r0
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b20c:	8bfa      	ldrh	r2, [r7, #30]
 800b20e:	8bbb      	ldrh	r3, [r7, #28]
 800b210:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b214:	429a      	cmp	r2, r3
 800b216:	f4ff af41 	bcc.w	800b09c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b21a:	4804      	ldr	r0, [pc, #16]	; (800b22c <mem_malloc+0x1e4>)
 800b21c:	f00a ff33 	bl	8016086 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3720      	adds	r7, #32
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20009718 	.word	0x20009718
 800b230:	2000971c 	.word	0x2000971c
 800b234:	0801877c 	.word	0x0801877c
 800b238:	08018940 	.word	0x08018940
 800b23c:	080187c4 	.word	0x080187c4
 800b240:	20009714 	.word	0x20009714
 800b244:	08018954 	.word	0x08018954
 800b248:	08018970 	.word	0x08018970
 800b24c:	080189a0 	.word	0x080189a0
 800b250:	080189d0 	.word	0x080189d0

0800b254 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	3303      	adds	r3, #3
 800b26a:	f023 0303 	bic.w	r3, r3, #3
 800b26e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e011      	b.n	800b29a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	4413      	add	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	dbe7      	blt.n	800b276 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b2a6:	bf00      	nop
 800b2a8:	bf00      	nop
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	80fb      	strh	r3, [r7, #6]
 800b2be:	e009      	b.n	800b2d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <memp_init+0x30>)
 800b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff ffc3 	bl	800b254 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	80fb      	strh	r3, [r7, #6]
 800b2d4:	88fb      	ldrh	r3, [r7, #6]
 800b2d6:	2b0c      	cmp	r3, #12
 800b2d8:	d9f2      	bls.n	800b2c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	0801b29c 	.word	0x0801b29c

0800b2e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b2f0:	f00a fefc 	bl	80160ec <sys_arch_protect>
 800b2f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d015      	beq.n	800b330 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f003 0303 	and.w	r3, r3, #3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <do_memp_malloc_pool+0x3e>
 800b318:	4b09      	ldr	r3, [pc, #36]	; (800b340 <do_memp_malloc_pool+0x58>)
 800b31a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b31e:	4909      	ldr	r1, [pc, #36]	; (800b344 <do_memp_malloc_pool+0x5c>)
 800b320:	4809      	ldr	r0, [pc, #36]	; (800b348 <do_memp_malloc_pool+0x60>)
 800b322:	f00b f801 	bl	8016328 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f00a feee 	bl	8016108 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	e003      	b.n	800b338 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f00a fee9 	bl	8016108 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	080189f4 	.word	0x080189f4
 800b344:	08018a24 	.word	0x08018a24
 800b348:	08018a48 	.word	0x08018a48

0800b34c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <memp_malloc_pool+0x1c>
 800b35a:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <memp_malloc_pool+0x38>)
 800b35c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b360:	4909      	ldr	r1, [pc, #36]	; (800b388 <memp_malloc_pool+0x3c>)
 800b362:	480a      	ldr	r0, [pc, #40]	; (800b38c <memp_malloc_pool+0x40>)
 800b364:	f00a ffe0 	bl	8016328 <iprintf>
  if (desc == NULL) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <memp_malloc_pool+0x26>
    return NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	e003      	b.n	800b37a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff ffb8 	bl	800b2e8 <do_memp_malloc_pool>
 800b378:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	080189f4 	.word	0x080189f4
 800b388:	08018a70 	.word	0x08018a70
 800b38c:	08018a48 	.word	0x08018a48

0800b390 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b39a:	79fb      	ldrb	r3, [r7, #7]
 800b39c:	2b0c      	cmp	r3, #12
 800b39e:	d908      	bls.n	800b3b2 <memp_malloc+0x22>
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <memp_malloc+0x3c>)
 800b3a2:	f240 1257 	movw	r2, #343	; 0x157
 800b3a6:	490a      	ldr	r1, [pc, #40]	; (800b3d0 <memp_malloc+0x40>)
 800b3a8:	480a      	ldr	r0, [pc, #40]	; (800b3d4 <memp_malloc+0x44>)
 800b3aa:	f00a ffbd 	bl	8016328 <iprintf>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e008      	b.n	800b3c4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	4a08      	ldr	r2, [pc, #32]	; (800b3d8 <memp_malloc+0x48>)
 800b3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff ff94 	bl	800b2e8 <do_memp_malloc_pool>
 800b3c0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	080189f4 	.word	0x080189f4
 800b3d0:	08018a84 	.word	0x08018a84
 800b3d4:	08018a48 	.word	0x08018a48
 800b3d8:	0801b29c 	.word	0x0801b29c

0800b3dc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	f003 0303 	and.w	r3, r3, #3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <do_memp_free_pool+0x22>
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <do_memp_free_pool+0x4c>)
 800b3f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b3f6:	490d      	ldr	r1, [pc, #52]	; (800b42c <do_memp_free_pool+0x50>)
 800b3f8:	480d      	ldr	r0, [pc, #52]	; (800b430 <do_memp_free_pool+0x54>)
 800b3fa:	f00a ff95 	bl	8016328 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b402:	f00a fe73 	bl	80160ec <sys_arch_protect>
 800b406:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b41a:	68b8      	ldr	r0, [r7, #8]
 800b41c:	f00a fe74 	bl	8016108 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	080189f4 	.word	0x080189f4
 800b42c:	08018aa4 	.word	0x08018aa4
 800b430:	08018a48 	.word	0x08018a48

0800b434 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d106      	bne.n	800b452 <memp_free_pool+0x1e>
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <memp_free_pool+0x3c>)
 800b446:	f240 1295 	movw	r2, #405	; 0x195
 800b44a:	490a      	ldr	r1, [pc, #40]	; (800b474 <memp_free_pool+0x40>)
 800b44c:	480a      	ldr	r0, [pc, #40]	; (800b478 <memp_free_pool+0x44>)
 800b44e:	f00a ff6b 	bl	8016328 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d007      	beq.n	800b468 <memp_free_pool+0x34>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff ffbb 	bl	800b3dc <do_memp_free_pool>
 800b466:	e000      	b.n	800b46a <memp_free_pool+0x36>
    return;
 800b468:	bf00      	nop
}
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	080189f4 	.word	0x080189f4
 800b474:	08018a70 	.word	0x08018a70
 800b478:	08018a48 	.word	0x08018a48

0800b47c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	2b0c      	cmp	r3, #12
 800b48c:	d907      	bls.n	800b49e <memp_free+0x22>
 800b48e:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <memp_free+0x44>)
 800b490:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b494:	490b      	ldr	r1, [pc, #44]	; (800b4c4 <memp_free+0x48>)
 800b496:	480c      	ldr	r0, [pc, #48]	; (800b4c8 <memp_free+0x4c>)
 800b498:	f00a ff46 	bl	8016328 <iprintf>
 800b49c:	e00c      	b.n	800b4b8 <memp_free+0x3c>

  if (mem == NULL) {
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d008      	beq.n	800b4b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	4a09      	ldr	r2, [pc, #36]	; (800b4cc <memp_free+0x50>)
 800b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ff94 	bl	800b3dc <do_memp_free_pool>
 800b4b4:	e000      	b.n	800b4b8 <memp_free+0x3c>
    return;
 800b4b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	080189f4 	.word	0x080189f4
 800b4c4:	08018ac4 	.word	0x08018ac4
 800b4c8:	08018a48 	.word	0x08018a48
 800b4cc:	0801b29c 	.word	0x0801b29c

0800b4d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b4d4:	bf00      	nop
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
	...

0800b4e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d108      	bne.n	800b506 <netif_add+0x26>
 800b4f4:	4b57      	ldr	r3, [pc, #348]	; (800b654 <netif_add+0x174>)
 800b4f6:	f240 1227 	movw	r2, #295	; 0x127
 800b4fa:	4957      	ldr	r1, [pc, #348]	; (800b658 <netif_add+0x178>)
 800b4fc:	4857      	ldr	r0, [pc, #348]	; (800b65c <netif_add+0x17c>)
 800b4fe:	f00a ff13 	bl	8016328 <iprintf>
 800b502:	2300      	movs	r3, #0
 800b504:	e0a2      	b.n	800b64c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d108      	bne.n	800b51e <netif_add+0x3e>
 800b50c:	4b51      	ldr	r3, [pc, #324]	; (800b654 <netif_add+0x174>)
 800b50e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b512:	4953      	ldr	r1, [pc, #332]	; (800b660 <netif_add+0x180>)
 800b514:	4851      	ldr	r0, [pc, #324]	; (800b65c <netif_add+0x17c>)
 800b516:	f00a ff07 	bl	8016328 <iprintf>
 800b51a:	2300      	movs	r3, #0
 800b51c:	e096      	b.n	800b64c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b524:	4b4f      	ldr	r3, [pc, #316]	; (800b664 <netif_add+0x184>)
 800b526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b52e:	4b4d      	ldr	r3, [pc, #308]	; (800b664 <netif_add+0x184>)
 800b530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b538:	4b4a      	ldr	r3, [pc, #296]	; (800b664 <netif_add+0x184>)
 800b53a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4a45      	ldr	r2, [pc, #276]	; (800b668 <netif_add+0x188>)
 800b552:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b56e:	4b3f      	ldr	r3, [pc, #252]	; (800b66c <netif_add+0x18c>)
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	68b9      	ldr	r1, [r7, #8]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 f913 	bl	800b7b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	4798      	blx	r3
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <netif_add+0xba>
    return NULL;
 800b596:	2300      	movs	r3, #0
 800b598:	e058      	b.n	800b64c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5a0:	2bff      	cmp	r3, #255	; 0xff
 800b5a2:	d103      	bne.n	800b5ac <netif_add+0xcc>
        netif->num = 0;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b5b0:	4b2f      	ldr	r3, [pc, #188]	; (800b670 <netif_add+0x190>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	e02b      	b.n	800b610 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d106      	bne.n	800b5ce <netif_add+0xee>
 800b5c0:	4b24      	ldr	r3, [pc, #144]	; (800b654 <netif_add+0x174>)
 800b5c2:	f240 128b 	movw	r2, #395	; 0x18b
 800b5c6:	492b      	ldr	r1, [pc, #172]	; (800b674 <netif_add+0x194>)
 800b5c8:	4824      	ldr	r0, [pc, #144]	; (800b65c <netif_add+0x17c>)
 800b5ca:	f00a fead 	bl	8016328 <iprintf>
        num_netifs++;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2bff      	cmp	r3, #255	; 0xff
 800b5d8:	dd06      	ble.n	800b5e8 <netif_add+0x108>
 800b5da:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <netif_add+0x174>)
 800b5dc:	f240 128d 	movw	r2, #397	; 0x18d
 800b5e0:	4925      	ldr	r1, [pc, #148]	; (800b678 <netif_add+0x198>)
 800b5e2:	481e      	ldr	r0, [pc, #120]	; (800b65c <netif_add+0x17c>)
 800b5e4:	f00a fea0 	bl	8016328 <iprintf>
        if (netif2->num == netif->num) {
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d108      	bne.n	800b60a <netif_add+0x12a>
          netif->num++;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5fe:	3301      	adds	r3, #1
 800b600:	b2da      	uxtb	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b608:	e005      	b.n	800b616 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1d0      	bne.n	800b5b8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1be      	bne.n	800b59a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b622:	2bfe      	cmp	r3, #254	; 0xfe
 800b624:	d103      	bne.n	800b62e <netif_add+0x14e>
    netif_num = 0;
 800b626:	4b11      	ldr	r3, [pc, #68]	; (800b66c <netif_add+0x18c>)
 800b628:	2200      	movs	r2, #0
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e006      	b.n	800b63c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b634:	3301      	adds	r3, #1
 800b636:	b2da      	uxtb	r2, r3
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <netif_add+0x18c>)
 800b63a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b63c:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <netif_add+0x190>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b644:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <netif_add+0x190>)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b64a:	68fb      	ldr	r3, [r7, #12]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	08018ae0 	.word	0x08018ae0
 800b658:	08018b74 	.word	0x08018b74
 800b65c:	08018b30 	.word	0x08018b30
 800b660:	08018b90 	.word	0x08018b90
 800b664:	0801b310 	.word	0x0801b310
 800b668:	0800ba8b 	.word	0x0800ba8b
 800b66c:	2000c7f4 	.word	0x2000c7f4
 800b670:	2000c7ec 	.word	0x2000c7ec
 800b674:	08018bb4 	.word	0x08018bb4
 800b678:	08018bc8 	.word	0x08018bc8

0800b67c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f002 fe15 	bl	800e2b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f007 ff47 	bl	8013524 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b696:	bf00      	nop
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <netif_do_set_ipaddr+0x20>
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <netif_do_set_ipaddr+0x88>)
 800b6b4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b6b8:	491c      	ldr	r1, [pc, #112]	; (800b72c <netif_do_set_ipaddr+0x8c>)
 800b6ba:	481d      	ldr	r0, [pc, #116]	; (800b730 <netif_do_set_ipaddr+0x90>)
 800b6bc:	f00a fe34 	bl	8016328 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <netif_do_set_ipaddr+0x34>
 800b6c6:	4b18      	ldr	r3, [pc, #96]	; (800b728 <netif_do_set_ipaddr+0x88>)
 800b6c8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b6cc:	4917      	ldr	r1, [pc, #92]	; (800b72c <netif_do_set_ipaddr+0x8c>)
 800b6ce:	4818      	ldr	r0, [pc, #96]	; (800b730 <netif_do_set_ipaddr+0x90>)
 800b6d0:	f00a fe2a 	bl	8016328 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d01c      	beq.n	800b71c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b6f2:	f107 0314 	add.w	r3, r7, #20
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff ffbf 	bl	800b67c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <netif_do_set_ipaddr+0x6a>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	e000      	b.n	800b70c <netif_do_set_ipaddr+0x6c>
 800b70a:	2300      	movs	r3, #0
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b710:	2101      	movs	r1, #1
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 f8d2 	bl	800b8bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b718:	2301      	movs	r3, #1
 800b71a:	e000      	b.n	800b71e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	08018ae0 	.word	0x08018ae0
 800b72c:	08018bf8 	.word	0x08018bf8
 800b730:	08018b30 	.word	0x08018b30

0800b734 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3308      	adds	r3, #8
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d00a      	beq.n	800b764 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <netif_do_set_netmask+0x26>
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	e000      	b.n	800b75c <netif_do_set_netmask+0x28>
 800b75a:	2300      	movs	r3, #0
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b760:	2301      	movs	r3, #1
 800b762:	e000      	b.n	800b766 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b772:	b480      	push	{r7}
 800b774:	b085      	sub	sp, #20
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	330c      	adds	r3, #12
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d00a      	beq.n	800b7a2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <netif_do_set_gw+0x26>
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	e000      	b.n	800b79a <netif_do_set_gw+0x28>
 800b798:	2300      	movs	r3, #0
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d101      	bne.n	800b7d0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b7cc:	4b1c      	ldr	r3, [pc, #112]	; (800b840 <netif_set_addr+0x90>)
 800b7ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b7d6:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <netif_set_addr+0x90>)
 800b7d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <netif_set_addr+0x90>)
 800b7e2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <netif_set_addr+0x42>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <netif_set_addr+0x46>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <netif_set_addr+0x48>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b800:	f107 0310 	add.w	r3, r7, #16
 800b804:	461a      	mov	r2, r3
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7ff ff49 	bl	800b6a0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff ff8e 	bl	800b734 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7ff ffa8 	bl	800b772 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d106      	bne.n	800b836 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b828:	f107 0310 	add.w	r3, r7, #16
 800b82c:	461a      	mov	r2, r3
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff ff35 	bl	800b6a0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b836:	bf00      	nop
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	0801b310 	.word	0x0801b310

0800b844 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b84c:	4a04      	ldr	r2, [pc, #16]	; (800b860 <netif_set_default+0x1c>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b852:	bf00      	nop
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	2000c7f0 	.word	0x2000c7f0

0800b864 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d107      	bne.n	800b882 <netif_set_up+0x1e>
 800b872:	4b0f      	ldr	r3, [pc, #60]	; (800b8b0 <netif_set_up+0x4c>)
 800b874:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b878:	490e      	ldr	r1, [pc, #56]	; (800b8b4 <netif_set_up+0x50>)
 800b87a:	480f      	ldr	r0, [pc, #60]	; (800b8b8 <netif_set_up+0x54>)
 800b87c:	f00a fd54 	bl	8016328 <iprintf>
 800b880:	e013      	b.n	800b8aa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10c      	bne.n	800b8aa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8a2:	2103      	movs	r1, #3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f809 	bl	800b8bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	08018ae0 	.word	0x08018ae0
 800b8b4:	08018c68 	.word	0x08018c68
 800b8b8:	08018b30 	.word	0x08018b30

0800b8bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <netif_issue_reports+0x20>
 800b8ce:	4b18      	ldr	r3, [pc, #96]	; (800b930 <netif_issue_reports+0x74>)
 800b8d0:	f240 326d 	movw	r2, #877	; 0x36d
 800b8d4:	4917      	ldr	r1, [pc, #92]	; (800b934 <netif_issue_reports+0x78>)
 800b8d6:	4818      	ldr	r0, [pc, #96]	; (800b938 <netif_issue_reports+0x7c>)
 800b8d8:	f00a fd26 	bl	8016328 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8e2:	f003 0304 	and.w	r3, r3, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d01e      	beq.n	800b928 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d017      	beq.n	800b928 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d013      	beq.n	800b92a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00e      	beq.n	800b92a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b912:	f003 0308 	and.w	r3, r3, #8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f008 fd69 	bl	80143f8 <etharp_request>
 800b926:	e000      	b.n	800b92a <netif_issue_reports+0x6e>
    return;
 800b928:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	08018ae0 	.word	0x08018ae0
 800b934:	08018c84 	.word	0x08018c84
 800b938:	08018b30 	.word	0x08018b30

0800b93c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d107      	bne.n	800b95a <netif_set_down+0x1e>
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <netif_set_down+0x58>)
 800b94c:	f240 329b 	movw	r2, #923	; 0x39b
 800b950:	4911      	ldr	r1, [pc, #68]	; (800b998 <netif_set_down+0x5c>)
 800b952:	4812      	ldr	r0, [pc, #72]	; (800b99c <netif_set_down+0x60>)
 800b954:	f00a fce8 	bl	8016328 <iprintf>
 800b958:	e019      	b.n	800b98e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b960:	f003 0301 	and.w	r3, r3, #1
 800b964:	2b00      	cmp	r3, #0
 800b966:	d012      	beq.n	800b98e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b96e:	f023 0301 	bic.w	r3, r3, #1
 800b972:	b2da      	uxtb	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f008 f8f3 	bl	8013b74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	08018ae0 	.word	0x08018ae0
 800b998:	08018ca8 	.word	0x08018ca8
 800b99c:	08018b30 	.word	0x08018b30

0800b9a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d107      	bne.n	800b9be <netif_set_link_up+0x1e>
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <netif_set_link_up+0x5c>)
 800b9b0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b9b4:	4912      	ldr	r1, [pc, #72]	; (800ba00 <netif_set_link_up+0x60>)
 800b9b6:	4813      	ldr	r0, [pc, #76]	; (800ba04 <netif_set_link_up+0x64>)
 800b9b8:	f00a fcb6 	bl	8016328 <iprintf>
 800b9bc:	e01b      	b.n	800b9f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d114      	bne.n	800b9f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9d2:	f043 0304 	orr.w	r3, r3, #4
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9de:	2103      	movs	r1, #3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff6b 	bl	800b8bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <netif_set_link_up+0x56>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	08018ae0 	.word	0x08018ae0
 800ba00:	08018cc8 	.word	0x08018cc8
 800ba04:	08018b30 	.word	0x08018b30

0800ba08 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d107      	bne.n	800ba26 <netif_set_link_down+0x1e>
 800ba16:	4b11      	ldr	r3, [pc, #68]	; (800ba5c <netif_set_link_down+0x54>)
 800ba18:	f240 4206 	movw	r2, #1030	; 0x406
 800ba1c:	4910      	ldr	r1, [pc, #64]	; (800ba60 <netif_set_link_down+0x58>)
 800ba1e:	4811      	ldr	r0, [pc, #68]	; (800ba64 <netif_set_link_down+0x5c>)
 800ba20:	f00a fc82 	bl	8016328 <iprintf>
 800ba24:	e017      	b.n	800ba56 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d010      	beq.n	800ba56 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba3a:	f023 0304 	bic.w	r3, r3, #4
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <netif_set_link_down+0x4e>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08018ae0 	.word	0x08018ae0
 800ba60:	08018cec 	.word	0x08018cec
 800ba64:	08018b30 	.word	0x08018b30

0800ba68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	61da      	str	r2, [r3, #28]
  }
}
 800ba7e:	bf00      	nop
 800ba80:	370c      	adds	r7, #12
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ba96:	f06f 030b 	mvn.w	r3, #11
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
	...

0800baa8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d013      	beq.n	800bae0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bab8:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <netif_get_by_index+0x48>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	e00c      	b.n	800bada <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bac6:	3301      	adds	r3, #1
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	79fa      	ldrb	r2, [r7, #7]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d101      	bne.n	800bad4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	e006      	b.n	800bae2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1ef      	bne.n	800bac0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	2000c7ec 	.word	0x2000c7ec

0800baf4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bafa:	f00a faf7 	bl	80160ec <sys_arch_protect>
 800bafe:	6038      	str	r0, [r7, #0]
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <pbuf_free_ooseq+0x44>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	701a      	strb	r2, [r3, #0]
 800bb06:	6838      	ldr	r0, [r7, #0]
 800bb08:	f00a fafe 	bl	8016108 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb0c:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <pbuf_free_ooseq+0x48>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	607b      	str	r3, [r7, #4]
 800bb12:	e00a      	b.n	800bb2a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f002 fc09 	bl	800e334 <tcp_free_ooseq>
      return;
 800bb22:	e005      	b.n	800bb30 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	607b      	str	r3, [r7, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f1      	bne.n	800bb14 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000c7f5 	.word	0x2000c7f5
 800bb3c:	2000c804 	.word	0x2000c804

0800bb40 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bb48:	f7ff ffd4 	bl	800baf4 <pbuf_free_ooseq>
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bb5a:	f00a fac7 	bl	80160ec <sys_arch_protect>
 800bb5e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bb60:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <pbuf_pool_is_empty+0x4c>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <pbuf_pool_is_empty+0x4c>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f00a facb 	bl	8016108 <sys_arch_unprotect>

  if (!queued) {
 800bb72:	78fb      	ldrb	r3, [r7, #3]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10f      	bne.n	800bb98 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bb78:	2100      	movs	r1, #0
 800bb7a:	480a      	ldr	r0, [pc, #40]	; (800bba4 <pbuf_pool_is_empty+0x50>)
 800bb7c:	f7fe fe90 	bl	800a8a0 <tcpip_try_callback>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <pbuf_pool_is_empty+0x44>
 800bb86:	f00a fab1 	bl	80160ec <sys_arch_protect>
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <pbuf_pool_is_empty+0x4c>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f00a fab8 	bl	8016108 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000c7f5 	.word	0x2000c7f5
 800bba4:	0800bb41 	.word	0x0800bb41

0800bba8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	80fb      	strh	r3, [r7, #6]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	88fa      	ldrh	r2, [r7, #6]
 800bbce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	88ba      	ldrh	r2, [r7, #4]
 800bbd4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bbd6:	8b3b      	ldrh	r3, [r7, #24]
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	7f3a      	ldrb	r2, [r7, #28]
 800bbe2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	73da      	strb	r2, [r3, #15]
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08c      	sub	sp, #48	; 0x30
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	4603      	mov	r3, r0
 800bc04:	71fb      	strb	r3, [r7, #7]
 800bc06:	460b      	mov	r3, r1
 800bc08:	80bb      	strh	r3, [r7, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc12:	887b      	ldrh	r3, [r7, #2]
 800bc14:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc18:	d07f      	beq.n	800bd1a <pbuf_alloc+0x11e>
 800bc1a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc1e:	f300 80c8 	bgt.w	800bdb2 <pbuf_alloc+0x1b6>
 800bc22:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc26:	d010      	beq.n	800bc4a <pbuf_alloc+0x4e>
 800bc28:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc2c:	f300 80c1 	bgt.w	800bdb2 <pbuf_alloc+0x1b6>
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d002      	beq.n	800bc3a <pbuf_alloc+0x3e>
 800bc34:	2b41      	cmp	r3, #65	; 0x41
 800bc36:	f040 80bc 	bne.w	800bdb2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc3a:	887a      	ldrh	r2, [r7, #2]
 800bc3c:	88bb      	ldrh	r3, [r7, #4]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	2000      	movs	r0, #0
 800bc42:	f000 f8d1 	bl	800bde8 <pbuf_alloc_reference>
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc48:	e0bd      	b.n	800bdc6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc52:	88bb      	ldrh	r3, [r7, #4]
 800bc54:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc56:	200c      	movs	r0, #12
 800bc58:	f7ff fb9a 	bl	800b390 <memp_malloc>
 800bc5c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bc64:	f7ff ff76 	bl	800bb54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc70:	f000 faa8 	bl	800c1c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	e0a7      	b.n	800bdc8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bc78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc7a:	3303      	adds	r3, #3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	8b7a      	ldrh	r2, [r7, #26]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	bf28      	it	cs
 800bc90:	4613      	movcs	r3, r2
 800bc92:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bc94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc96:	3310      	adds	r3, #16
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	3303      	adds	r3, #3
 800bc9e:	f023 0303 	bic.w	r3, r3, #3
 800bca2:	4618      	mov	r0, r3
 800bca4:	89f9      	ldrh	r1, [r7, #14]
 800bca6:	8b7a      	ldrh	r2, [r7, #26]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	887b      	ldrh	r3, [r7, #2]
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	6938      	ldr	r0, [r7, #16]
 800bcb6:	f7ff ff77 	bl	800bba8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d006      	beq.n	800bcd4 <pbuf_alloc+0xd8>
 800bcc6:	4b42      	ldr	r3, [pc, #264]	; (800bdd0 <pbuf_alloc+0x1d4>)
 800bcc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bccc:	4941      	ldr	r1, [pc, #260]	; (800bdd4 <pbuf_alloc+0x1d8>)
 800bcce:	4842      	ldr	r0, [pc, #264]	; (800bdd8 <pbuf_alloc+0x1dc>)
 800bcd0:	f00a fb2a 	bl	8016328 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bcd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcd6:	3303      	adds	r3, #3
 800bcd8:	f023 0303 	bic.w	r3, r3, #3
 800bcdc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bce0:	d106      	bne.n	800bcf0 <pbuf_alloc+0xf4>
 800bce2:	4b3b      	ldr	r3, [pc, #236]	; (800bdd0 <pbuf_alloc+0x1d4>)
 800bce4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bce8:	493c      	ldr	r1, [pc, #240]	; (800bddc <pbuf_alloc+0x1e0>)
 800bcea:	483b      	ldr	r0, [pc, #236]	; (800bdd8 <pbuf_alloc+0x1dc>)
 800bcec:	f00a fb1c 	bl	8016328 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfa:	e002      	b.n	800bd02 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd06:	8b7a      	ldrh	r2, [r7, #26]
 800bd08:	89fb      	ldrh	r3, [r7, #14]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd12:	8b7b      	ldrh	r3, [r7, #26]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d19e      	bne.n	800bc56 <pbuf_alloc+0x5a>
      break;
 800bd18:	e055      	b.n	800bdc6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd1c:	3303      	adds	r3, #3
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	88bb      	ldrh	r3, [r7, #4]
 800bd28:	3303      	adds	r3, #3
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	4413      	add	r3, r2
 800bd34:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd36:	8b3b      	ldrh	r3, [r7, #24]
 800bd38:	3310      	adds	r3, #16
 800bd3a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd3c:	8b3a      	ldrh	r2, [r7, #24]
 800bd3e:	88bb      	ldrh	r3, [r7, #4]
 800bd40:	3303      	adds	r3, #3
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d306      	bcc.n	800bd58 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd4a:	8afa      	ldrh	r2, [r7, #22]
 800bd4c:	88bb      	ldrh	r3, [r7, #4]
 800bd4e:	3303      	adds	r3, #3
 800bd50:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d201      	bcs.n	800bd5c <pbuf_alloc+0x160>
        return NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e035      	b.n	800bdc8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bd5c:	8afb      	ldrh	r3, [r7, #22]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff f972 	bl	800b048 <mem_malloc>
 800bd64:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <pbuf_alloc+0x174>
        return NULL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e02b      	b.n	800bdc8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd72:	3310      	adds	r3, #16
 800bd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd76:	4413      	add	r3, r2
 800bd78:	3303      	adds	r3, #3
 800bd7a:	f023 0303 	bic.w	r3, r3, #3
 800bd7e:	4618      	mov	r0, r3
 800bd80:	88b9      	ldrh	r1, [r7, #4]
 800bd82:	88ba      	ldrh	r2, [r7, #4]
 800bd84:	2300      	movs	r3, #0
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	887b      	ldrh	r3, [r7, #2]
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4601      	mov	r1, r0
 800bd90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd92:	f7ff ff09 	bl	800bba8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f003 0303 	and.w	r3, r3, #3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d010      	beq.n	800bdc4 <pbuf_alloc+0x1c8>
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <pbuf_alloc+0x1d4>)
 800bda4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bda8:	490d      	ldr	r1, [pc, #52]	; (800bde0 <pbuf_alloc+0x1e4>)
 800bdaa:	480b      	ldr	r0, [pc, #44]	; (800bdd8 <pbuf_alloc+0x1dc>)
 800bdac:	f00a fabc 	bl	8016328 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bdb0:	e008      	b.n	800bdc4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bdb2:	4b07      	ldr	r3, [pc, #28]	; (800bdd0 <pbuf_alloc+0x1d4>)
 800bdb4:	f240 1227 	movw	r2, #295	; 0x127
 800bdb8:	490a      	ldr	r1, [pc, #40]	; (800bde4 <pbuf_alloc+0x1e8>)
 800bdba:	4807      	ldr	r0, [pc, #28]	; (800bdd8 <pbuf_alloc+0x1dc>)
 800bdbc:	f00a fab4 	bl	8016328 <iprintf>
      return NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e001      	b.n	800bdc8 <pbuf_alloc+0x1cc>
      break;
 800bdc4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3728      	adds	r7, #40	; 0x28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	08018d10 	.word	0x08018d10
 800bdd4:	08018d40 	.word	0x08018d40
 800bdd8:	08018d70 	.word	0x08018d70
 800bddc:	08018d98 	.word	0x08018d98
 800bde0:	08018dcc 	.word	0x08018dcc
 800bde4:	08018df8 	.word	0x08018df8

0800bde8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af02      	add	r7, sp, #8
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	807b      	strh	r3, [r7, #2]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bdf8:	883b      	ldrh	r3, [r7, #0]
 800bdfa:	2b41      	cmp	r3, #65	; 0x41
 800bdfc:	d009      	beq.n	800be12 <pbuf_alloc_reference+0x2a>
 800bdfe:	883b      	ldrh	r3, [r7, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d006      	beq.n	800be12 <pbuf_alloc_reference+0x2a>
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <pbuf_alloc_reference+0x5c>)
 800be06:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be0a:	490f      	ldr	r1, [pc, #60]	; (800be48 <pbuf_alloc_reference+0x60>)
 800be0c:	480f      	ldr	r0, [pc, #60]	; (800be4c <pbuf_alloc_reference+0x64>)
 800be0e:	f00a fa8b 	bl	8016328 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be12:	200b      	movs	r0, #11
 800be14:	f7ff fabc 	bl	800b390 <memp_malloc>
 800be18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800be20:	2300      	movs	r3, #0
 800be22:	e00b      	b.n	800be3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be24:	8879      	ldrh	r1, [r7, #2]
 800be26:	887a      	ldrh	r2, [r7, #2]
 800be28:	2300      	movs	r3, #0
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	883b      	ldrh	r3, [r7, #0]
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	460b      	mov	r3, r1
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff feb7 	bl	800bba8 <pbuf_init_alloced_pbuf>
  return p;
 800be3a:	68fb      	ldr	r3, [r7, #12]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	08018d10 	.word	0x08018d10
 800be48:	08018e14 	.word	0x08018e14
 800be4c:	08018d70 	.word	0x08018d70

0800be50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af02      	add	r7, sp, #8
 800be56:	607b      	str	r3, [r7, #4]
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
 800be5c:	460b      	mov	r3, r1
 800be5e:	81bb      	strh	r3, [r7, #12]
 800be60:	4613      	mov	r3, r2
 800be62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800be68:	8a7b      	ldrh	r3, [r7, #18]
 800be6a:	3303      	adds	r3, #3
 800be6c:	f023 0203 	bic.w	r2, r3, #3
 800be70:	89bb      	ldrh	r3, [r7, #12]
 800be72:	441a      	add	r2, r3
 800be74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be76:	429a      	cmp	r2, r3
 800be78:	d901      	bls.n	800be7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e018      	b.n	800beb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d007      	beq.n	800be94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be84:	8a7b      	ldrh	r3, [r7, #18]
 800be86:	3303      	adds	r3, #3
 800be88:	f023 0303 	bic.w	r3, r3, #3
 800be8c:	6a3a      	ldr	r2, [r7, #32]
 800be8e:	4413      	add	r3, r2
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e001      	b.n	800be98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	89b9      	ldrh	r1, [r7, #12]
 800be9c:	89ba      	ldrh	r2, [r7, #12]
 800be9e:	2302      	movs	r3, #2
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	897b      	ldrh	r3, [r7, #10]
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	460b      	mov	r3, r1
 800bea8:	6979      	ldr	r1, [r7, #20]
 800beaa:	f7ff fe7d 	bl	800bba8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800beae:	687b      	ldr	r3, [r7, #4]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <pbuf_realloc+0x20>
 800beca:	4b3a      	ldr	r3, [pc, #232]	; (800bfb4 <pbuf_realloc+0xfc>)
 800becc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bed0:	4939      	ldr	r1, [pc, #228]	; (800bfb8 <pbuf_realloc+0x100>)
 800bed2:	483a      	ldr	r0, [pc, #232]	; (800bfbc <pbuf_realloc+0x104>)
 800bed4:	f00a fa28 	bl	8016328 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	891b      	ldrh	r3, [r3, #8]
 800bedc:	887a      	ldrh	r2, [r7, #2]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d263      	bcs.n	800bfaa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	891a      	ldrh	r2, [r3, #8]
 800bee6:	887b      	ldrh	r3, [r7, #2]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800beec:	887b      	ldrh	r3, [r7, #2]
 800beee:	817b      	strh	r3, [r7, #10]
  q = p;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bef4:	e018      	b.n	800bf28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	895b      	ldrh	r3, [r3, #10]
 800befa:	897a      	ldrh	r2, [r7, #10]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	891a      	ldrh	r2, [r3, #8]
 800bf04:	893b      	ldrh	r3, [r7, #8]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <pbuf_realloc+0x70>
 800bf1a:	4b26      	ldr	r3, [pc, #152]	; (800bfb4 <pbuf_realloc+0xfc>)
 800bf1c:	f240 12af 	movw	r2, #431	; 0x1af
 800bf20:	4927      	ldr	r1, [pc, #156]	; (800bfc0 <pbuf_realloc+0x108>)
 800bf22:	4826      	ldr	r0, [pc, #152]	; (800bfbc <pbuf_realloc+0x104>)
 800bf24:	f00a fa00 	bl	8016328 <iprintf>
  while (rem_len > q->len) {
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	895b      	ldrh	r3, [r3, #10]
 800bf2c:	897a      	ldrh	r2, [r7, #10]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d8e1      	bhi.n	800bef6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	7b1b      	ldrb	r3, [r3, #12]
 800bf36:	f003 030f 	and.w	r3, r3, #15
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d121      	bne.n	800bf82 <pbuf_realloc+0xca>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	895b      	ldrh	r3, [r3, #10]
 800bf42:	897a      	ldrh	r2, [r7, #10]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d01c      	beq.n	800bf82 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	7b5b      	ldrb	r3, [r3, #13]
 800bf4c:	f003 0302 	and.w	r3, r3, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d116      	bne.n	800bf82 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	897b      	ldrh	r3, [r7, #10]
 800bf60:	4413      	add	r3, r2
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4619      	mov	r1, r3
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f7fe ff64 	bl	800ae34 <mem_trim>
 800bf6c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <pbuf_realloc+0xca>
 800bf74:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <pbuf_realloc+0xfc>)
 800bf76:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bf7a:	4912      	ldr	r1, [pc, #72]	; (800bfc4 <pbuf_realloc+0x10c>)
 800bf7c:	480f      	ldr	r0, [pc, #60]	; (800bfbc <pbuf_realloc+0x104>)
 800bf7e:	f00a f9d3 	bl	8016328 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	897a      	ldrh	r2, [r7, #10]
 800bf86:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	895a      	ldrh	r2, [r3, #10]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f911 	bl	800c1c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	e000      	b.n	800bfac <pbuf_realloc+0xf4>
    return;
 800bfaa:	bf00      	nop

}
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	08018d10 	.word	0x08018d10
 800bfb8:	08018e28 	.word	0x08018e28
 800bfbc:	08018d70 	.word	0x08018d70
 800bfc0:	08018e40 	.word	0x08018e40
 800bfc4:	08018e58 	.word	0x08018e58

0800bfc8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <pbuf_add_header_impl+0x22>
 800bfdc:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <pbuf_add_header_impl+0xc4>)
 800bfde:	f240 12df 	movw	r2, #479	; 0x1df
 800bfe2:	492b      	ldr	r1, [pc, #172]	; (800c090 <pbuf_add_header_impl+0xc8>)
 800bfe4:	482b      	ldr	r0, [pc, #172]	; (800c094 <pbuf_add_header_impl+0xcc>)
 800bfe6:	f00a f99f 	bl	8016328 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <pbuf_add_header_impl+0x30>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff6:	d301      	bcc.n	800bffc <pbuf_add_header_impl+0x34>
    return 1;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e043      	b.n	800c084 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <pbuf_add_header_impl+0x3e>
    return 0;
 800c002:	2300      	movs	r3, #0
 800c004:	e03e      	b.n	800c084 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	891a      	ldrh	r2, [r3, #8]
 800c00e:	8a7b      	ldrh	r3, [r7, #18]
 800c010:	4413      	add	r3, r2
 800c012:	b29b      	uxth	r3, r3
 800c014:	8a7a      	ldrh	r2, [r7, #18]
 800c016:	429a      	cmp	r2, r3
 800c018:	d901      	bls.n	800c01e <pbuf_add_header_impl+0x56>
    return 1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e032      	b.n	800c084 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	7b1b      	ldrb	r3, [r3, #12]
 800c022:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c024:	8a3b      	ldrh	r3, [r7, #16]
 800c026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00c      	beq.n	800c048 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	425b      	negs	r3, r3
 800c036:	4413      	add	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3310      	adds	r3, #16
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	429a      	cmp	r2, r3
 800c042:	d20d      	bcs.n	800c060 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c044:	2301      	movs	r3, #1
 800c046:	e01d      	b.n	800c084 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d006      	beq.n	800c05c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	425b      	negs	r3, r3
 800c056:	4413      	add	r3, r2
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	e001      	b.n	800c060 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e011      	b.n	800c084 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	895a      	ldrh	r2, [r3, #10]
 800c06a:	8a7b      	ldrh	r3, [r7, #18]
 800c06c:	4413      	add	r3, r2
 800c06e:	b29a      	uxth	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	891a      	ldrh	r2, [r3, #8]
 800c078:	8a7b      	ldrh	r3, [r7, #18]
 800c07a:	4413      	add	r3, r2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	811a      	strh	r2, [r3, #8]


  return 0;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	08018d10 	.word	0x08018d10
 800c090:	08018e74 	.word	0x08018e74
 800c094:	08018d70 	.word	0x08018d70

0800c098 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff8e 	bl	800bfc8 <pbuf_add_header_impl>
 800c0ac:	4603      	mov	r3, r0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <pbuf_remove_header+0x1e>
 800c0c8:	4b20      	ldr	r3, [pc, #128]	; (800c14c <pbuf_remove_header+0x94>)
 800c0ca:	f240 224b 	movw	r2, #587	; 0x24b
 800c0ce:	4920      	ldr	r1, [pc, #128]	; (800c150 <pbuf_remove_header+0x98>)
 800c0d0:	4820      	ldr	r0, [pc, #128]	; (800c154 <pbuf_remove_header+0x9c>)
 800c0d2:	f00a f929 	bl	8016328 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <pbuf_remove_header+0x2c>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0e2:	d301      	bcc.n	800c0e8 <pbuf_remove_header+0x30>
    return 1;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e02c      	b.n	800c142 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <pbuf_remove_header+0x3a>
    return 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e027      	b.n	800c142 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	89fa      	ldrh	r2, [r7, #14]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d908      	bls.n	800c112 <pbuf_remove_header+0x5a>
 800c100:	4b12      	ldr	r3, [pc, #72]	; (800c14c <pbuf_remove_header+0x94>)
 800c102:	f240 2255 	movw	r2, #597	; 0x255
 800c106:	4914      	ldr	r1, [pc, #80]	; (800c158 <pbuf_remove_header+0xa0>)
 800c108:	4812      	ldr	r0, [pc, #72]	; (800c154 <pbuf_remove_header+0x9c>)
 800c10a:	f00a f90d 	bl	8016328 <iprintf>
 800c10e:	2301      	movs	r3, #1
 800c110:	e017      	b.n	800c142 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	441a      	add	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	895a      	ldrh	r2, [r3, #10]
 800c128:	89fb      	ldrh	r3, [r7, #14]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	891a      	ldrh	r2, [r3, #8]
 800c136:	89fb      	ldrh	r3, [r7, #14]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	08018d10 	.word	0x08018d10
 800c150:	08018e74 	.word	0x08018e74
 800c154:	08018d70 	.word	0x08018d70
 800c158:	08018e80 	.word	0x08018e80

0800c15c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	807b      	strh	r3, [r7, #2]
 800c168:	4613      	mov	r3, r2
 800c16a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c16c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c170:	2b00      	cmp	r3, #0
 800c172:	da08      	bge.n	800c186 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c178:	425b      	negs	r3, r3
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ff9b 	bl	800c0b8 <pbuf_remove_header>
 800c182:	4603      	mov	r3, r0
 800c184:	e007      	b.n	800c196 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c18a:	787a      	ldrb	r2, [r7, #1]
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff ff1a 	bl	800bfc8 <pbuf_add_header_impl>
 800c194:	4603      	mov	r3, r0
  }
}
 800c196:	4618      	mov	r0, r3
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b082      	sub	sp, #8
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c1aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7ff ffd2 	bl	800c15c <pbuf_header_impl>
 800c1b8:	4603      	mov	r3, r0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10b      	bne.n	800c1ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <pbuf_free+0x22>
 800c1d8:	4b3b      	ldr	r3, [pc, #236]	; (800c2c8 <pbuf_free+0x104>)
 800c1da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c1de:	493b      	ldr	r1, [pc, #236]	; (800c2cc <pbuf_free+0x108>)
 800c1e0:	483b      	ldr	r0, [pc, #236]	; (800c2d0 <pbuf_free+0x10c>)
 800c1e2:	f00a f8a1 	bl	8016328 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e069      	b.n	800c2be <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c1ee:	e062      	b.n	800c2b6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c1f0:	f009 ff7c 	bl	80160ec <sys_arch_protect>
 800c1f4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7b9b      	ldrb	r3, [r3, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <pbuf_free+0x48>
 800c1fe:	4b32      	ldr	r3, [pc, #200]	; (800c2c8 <pbuf_free+0x104>)
 800c200:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c204:	4933      	ldr	r1, [pc, #204]	; (800c2d4 <pbuf_free+0x110>)
 800c206:	4832      	ldr	r0, [pc, #200]	; (800c2d0 <pbuf_free+0x10c>)
 800c208:	f00a f88e 	bl	8016328 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7b9b      	ldrb	r3, [r3, #14]
 800c210:	3b01      	subs	r3, #1
 800c212:	b2da      	uxtb	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	739a      	strb	r2, [r3, #14]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7b9b      	ldrb	r3, [r3, #14]
 800c21c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c21e:	69b8      	ldr	r0, [r7, #24]
 800c220:	f009 ff72 	bl	8016108 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d143      	bne.n	800c2b2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7b1b      	ldrb	r3, [r3, #12]
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7b5b      	ldrb	r3, [r3, #13]
 800c23e:	f003 0302 	and.w	r3, r3, #2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d011      	beq.n	800c26a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d106      	bne.n	800c260 <pbuf_free+0x9c>
 800c252:	4b1d      	ldr	r3, [pc, #116]	; (800c2c8 <pbuf_free+0x104>)
 800c254:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c258:	491f      	ldr	r1, [pc, #124]	; (800c2d8 <pbuf_free+0x114>)
 800c25a:	481d      	ldr	r0, [pc, #116]	; (800c2d0 <pbuf_free+0x10c>)
 800c25c:	f00a f864 	bl	8016328 <iprintf>
        pc->custom_free_function(p);
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	4798      	blx	r3
 800c268:	e01d      	b.n	800c2a6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d104      	bne.n	800c27a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c270:	6879      	ldr	r1, [r7, #4]
 800c272:	200c      	movs	r0, #12
 800c274:	f7ff f902 	bl	800b47c <memp_free>
 800c278:	e015      	b.n	800c2a6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d104      	bne.n	800c28a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	200b      	movs	r0, #11
 800c284:	f7ff f8fa 	bl	800b47c <memp_free>
 800c288:	e00d      	b.n	800c2a6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <pbuf_free+0xd4>
          mem_free(p);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7fe fd3f 	bl	800ad14 <mem_free>
 800c296:	e006      	b.n	800c2a6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c298:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <pbuf_free+0x104>)
 800c29a:	f240 320f 	movw	r2, #783	; 0x30f
 800c29e:	490f      	ldr	r1, [pc, #60]	; (800c2dc <pbuf_free+0x118>)
 800c2a0:	480b      	ldr	r0, [pc, #44]	; (800c2d0 <pbuf_free+0x10c>)
 800c2a2:	f00a f841 	bl	8016328 <iprintf>
        }
      }
      count++;
 800c2a6:	7ffb      	ldrb	r3, [r7, #31]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	607b      	str	r3, [r7, #4]
 800c2b0:	e001      	b.n	800c2b6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d199      	bne.n	800c1f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c2bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3720      	adds	r7, #32
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	08018d10 	.word	0x08018d10
 800c2cc:	08018e74 	.word	0x08018e74
 800c2d0:	08018d70 	.word	0x08018d70
 800c2d4:	08018ea0 	.word	0x08018ea0
 800c2d8:	08018eb8 	.word	0x08018eb8
 800c2dc:	08018edc 	.word	0x08018edc

0800c2e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c2ec:	e005      	b.n	800c2fa <pbuf_clen+0x1a>
    ++len;
 800c2ee:	89fb      	ldrh	r3, [r7, #14]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1f6      	bne.n	800c2ee <pbuf_clen+0xe>
  }
  return len;
 800c300:	89fb      	ldrh	r3, [r7, #14]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
	...

0800c310 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d016      	beq.n	800c34c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c31e:	f009 fee5 	bl	80160ec <sys_arch_protect>
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7b9b      	ldrb	r3, [r3, #14]
 800c328:	3301      	adds	r3, #1
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	739a      	strb	r2, [r3, #14]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f009 fee9 	bl	8016108 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	7b9b      	ldrb	r3, [r3, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <pbuf_ref+0x3c>
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <pbuf_ref+0x44>)
 800c340:	f240 3242 	movw	r2, #834	; 0x342
 800c344:	4904      	ldr	r1, [pc, #16]	; (800c358 <pbuf_ref+0x48>)
 800c346:	4805      	ldr	r0, [pc, #20]	; (800c35c <pbuf_ref+0x4c>)
 800c348:	f009 ffee 	bl	8016328 <iprintf>
  }
}
 800c34c:	bf00      	nop
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	08018d10 	.word	0x08018d10
 800c358:	08018ef0 	.word	0x08018ef0
 800c35c:	08018d70 	.word	0x08018d70

0800c360 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <pbuf_cat+0x16>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d107      	bne.n	800c386 <pbuf_cat+0x26>
 800c376:	4b20      	ldr	r3, [pc, #128]	; (800c3f8 <pbuf_cat+0x98>)
 800c378:	f240 3259 	movw	r2, #857	; 0x359
 800c37c:	491f      	ldr	r1, [pc, #124]	; (800c3fc <pbuf_cat+0x9c>)
 800c37e:	4820      	ldr	r0, [pc, #128]	; (800c400 <pbuf_cat+0xa0>)
 800c380:	f009 ffd2 	bl	8016328 <iprintf>
 800c384:	e034      	b.n	800c3f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	e00a      	b.n	800c3a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	891a      	ldrh	r2, [r3, #8]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	891b      	ldrh	r3, [r3, #8]
 800c394:	4413      	add	r3, r2
 800c396:	b29a      	uxth	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	60fb      	str	r3, [r7, #12]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1f0      	bne.n	800c38c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	891a      	ldrh	r2, [r3, #8]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	895b      	ldrh	r3, [r3, #10]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d006      	beq.n	800c3c4 <pbuf_cat+0x64>
 800c3b6:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <pbuf_cat+0x98>)
 800c3b8:	f240 3262 	movw	r2, #866	; 0x362
 800c3bc:	4911      	ldr	r1, [pc, #68]	; (800c404 <pbuf_cat+0xa4>)
 800c3be:	4810      	ldr	r0, [pc, #64]	; (800c400 <pbuf_cat+0xa0>)
 800c3c0:	f009 ffb2 	bl	8016328 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <pbuf_cat+0x7a>
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <pbuf_cat+0x98>)
 800c3ce:	f240 3263 	movw	r2, #867	; 0x363
 800c3d2:	490d      	ldr	r1, [pc, #52]	; (800c408 <pbuf_cat+0xa8>)
 800c3d4:	480a      	ldr	r0, [pc, #40]	; (800c400 <pbuf_cat+0xa0>)
 800c3d6:	f009 ffa7 	bl	8016328 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	891a      	ldrh	r2, [r3, #8]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	891b      	ldrh	r3, [r3, #8]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	08018d10 	.word	0x08018d10
 800c3fc:	08018f04 	.word	0x08018f04
 800c400:	08018d70 	.word	0x08018d70
 800c404:	08018f3c 	.word	0x08018f3c
 800c408:	08018f6c 	.word	0x08018f6c

0800c40c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ffa1 	bl	800c360 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c41e:	6838      	ldr	r0, [r7, #0]
 800c420:	f7ff ff76 	bl	800c310 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	2300      	movs	r3, #0
 800c43c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d008      	beq.n	800c456 <pbuf_copy+0x2a>
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d005      	beq.n	800c456 <pbuf_copy+0x2a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	891a      	ldrh	r2, [r3, #8]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	891b      	ldrh	r3, [r3, #8]
 800c452:	429a      	cmp	r2, r3
 800c454:	d209      	bcs.n	800c46a <pbuf_copy+0x3e>
 800c456:	4b57      	ldr	r3, [pc, #348]	; (800c5b4 <pbuf_copy+0x188>)
 800c458:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c45c:	4956      	ldr	r1, [pc, #344]	; (800c5b8 <pbuf_copy+0x18c>)
 800c45e:	4857      	ldr	r0, [pc, #348]	; (800c5bc <pbuf_copy+0x190>)
 800c460:	f009 ff62 	bl	8016328 <iprintf>
 800c464:	f06f 030f 	mvn.w	r3, #15
 800c468:	e09f      	b.n	800c5aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	895b      	ldrh	r3, [r3, #10]
 800c46e:	461a      	mov	r2, r3
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	1ad2      	subs	r2, r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	895b      	ldrh	r3, [r3, #10]
 800c478:	4619      	mov	r1, r3
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1acb      	subs	r3, r1, r3
 800c47e:	429a      	cmp	r2, r3
 800c480:	d306      	bcc.n	800c490 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	895b      	ldrh	r3, [r3, #10]
 800c486:	461a      	mov	r2, r3
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	e005      	b.n	800c49c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	895b      	ldrh	r3, [r3, #10]
 800c494:	461a      	mov	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	18d0      	adds	r0, r2, r3
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f00a f9a5 	bl	80167fe <memcpy>
    offset_to += len;
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	895b      	ldrh	r3, [r3, #10]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d906      	bls.n	800c4de <pbuf_copy+0xb2>
 800c4d0:	4b38      	ldr	r3, [pc, #224]	; (800c5b4 <pbuf_copy+0x188>)
 800c4d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c4d6:	493a      	ldr	r1, [pc, #232]	; (800c5c0 <pbuf_copy+0x194>)
 800c4d8:	4838      	ldr	r0, [pc, #224]	; (800c5bc <pbuf_copy+0x190>)
 800c4da:	f009 ff25 	bl	8016328 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	895b      	ldrh	r3, [r3, #10]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d906      	bls.n	800c4f8 <pbuf_copy+0xcc>
 800c4ea:	4b32      	ldr	r3, [pc, #200]	; (800c5b4 <pbuf_copy+0x188>)
 800c4ec:	f240 32da 	movw	r2, #986	; 0x3da
 800c4f0:	4934      	ldr	r1, [pc, #208]	; (800c5c4 <pbuf_copy+0x198>)
 800c4f2:	4832      	ldr	r0, [pc, #200]	; (800c5bc <pbuf_copy+0x190>)
 800c4f4:	f009 ff18 	bl	8016328 <iprintf>
    if (offset_from >= p_from->len) {
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	895b      	ldrh	r3, [r3, #10]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	4293      	cmp	r3, r2
 800c502:	d304      	bcc.n	800c50e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	895b      	ldrh	r3, [r3, #10]
 800c512:	461a      	mov	r2, r3
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	4293      	cmp	r3, r2
 800c518:	d114      	bne.n	800c544 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10c      	bne.n	800c544 <pbuf_copy+0x118>
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d009      	beq.n	800c544 <pbuf_copy+0x118>
 800c530:	4b20      	ldr	r3, [pc, #128]	; (800c5b4 <pbuf_copy+0x188>)
 800c532:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c536:	4924      	ldr	r1, [pc, #144]	; (800c5c8 <pbuf_copy+0x19c>)
 800c538:	4820      	ldr	r0, [pc, #128]	; (800c5bc <pbuf_copy+0x190>)
 800c53a:	f009 fef5 	bl	8016328 <iprintf>
 800c53e:	f06f 030f 	mvn.w	r3, #15
 800c542:	e032      	b.n	800c5aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d013      	beq.n	800c572 <pbuf_copy+0x146>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	895a      	ldrh	r2, [r3, #10]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	891b      	ldrh	r3, [r3, #8]
 800c552:	429a      	cmp	r2, r3
 800c554:	d10d      	bne.n	800c572 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <pbuf_copy+0x146>
 800c55e:	4b15      	ldr	r3, [pc, #84]	; (800c5b4 <pbuf_copy+0x188>)
 800c560:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c564:	4919      	ldr	r1, [pc, #100]	; (800c5cc <pbuf_copy+0x1a0>)
 800c566:	4815      	ldr	r0, [pc, #84]	; (800c5bc <pbuf_copy+0x190>)
 800c568:	f009 fede 	bl	8016328 <iprintf>
 800c56c:	f06f 0305 	mvn.w	r3, #5
 800c570:	e01b      	b.n	800c5aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d013      	beq.n	800c5a0 <pbuf_copy+0x174>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	895a      	ldrh	r2, [r3, #10]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	891b      	ldrh	r3, [r3, #8]
 800c580:	429a      	cmp	r2, r3
 800c582:	d10d      	bne.n	800c5a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <pbuf_copy+0x174>
 800c58c:	4b09      	ldr	r3, [pc, #36]	; (800c5b4 <pbuf_copy+0x188>)
 800c58e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c592:	490e      	ldr	r1, [pc, #56]	; (800c5cc <pbuf_copy+0x1a0>)
 800c594:	4809      	ldr	r0, [pc, #36]	; (800c5bc <pbuf_copy+0x190>)
 800c596:	f009 fec7 	bl	8016328 <iprintf>
 800c59a:	f06f 0305 	mvn.w	r3, #5
 800c59e:	e004      	b.n	800c5aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f47f af61 	bne.w	800c46a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	08018d10 	.word	0x08018d10
 800c5b8:	08018fb8 	.word	0x08018fb8
 800c5bc:	08018d70 	.word	0x08018d70
 800c5c0:	08018fe8 	.word	0x08018fe8
 800c5c4:	08019000 	.word	0x08019000
 800c5c8:	0801901c 	.word	0x0801901c
 800c5cc:	0801902c 	.word	0x0801902c

0800c5d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	460b      	mov	r3, r1
 800c5e0:	80fb      	strh	r3, [r7, #6]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d108      	bne.n	800c606 <pbuf_copy_partial+0x36>
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	; (800c6a4 <pbuf_copy_partial+0xd4>)
 800c5f6:	f240 420a 	movw	r2, #1034	; 0x40a
 800c5fa:	492b      	ldr	r1, [pc, #172]	; (800c6a8 <pbuf_copy_partial+0xd8>)
 800c5fc:	482b      	ldr	r0, [pc, #172]	; (800c6ac <pbuf_copy_partial+0xdc>)
 800c5fe:	f009 fe93 	bl	8016328 <iprintf>
 800c602:	2300      	movs	r3, #0
 800c604:	e04a      	b.n	800c69c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d108      	bne.n	800c61e <pbuf_copy_partial+0x4e>
 800c60c:	4b25      	ldr	r3, [pc, #148]	; (800c6a4 <pbuf_copy_partial+0xd4>)
 800c60e:	f240 420b 	movw	r2, #1035	; 0x40b
 800c612:	4927      	ldr	r1, [pc, #156]	; (800c6b0 <pbuf_copy_partial+0xe0>)
 800c614:	4825      	ldr	r0, [pc, #148]	; (800c6ac <pbuf_copy_partial+0xdc>)
 800c616:	f009 fe87 	bl	8016328 <iprintf>
 800c61a:	2300      	movs	r3, #0
 800c61c:	e03e      	b.n	800c69c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	e034      	b.n	800c68e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c624:	88bb      	ldrh	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <pbuf_copy_partial+0x70>
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	895b      	ldrh	r3, [r3, #10]
 800c62e:	88ba      	ldrh	r2, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d305      	bcc.n	800c640 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	895b      	ldrh	r3, [r3, #10]
 800c638:	88ba      	ldrh	r2, [r7, #4]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	80bb      	strh	r3, [r7, #4]
 800c63e:	e023      	b.n	800c688 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	895a      	ldrh	r2, [r3, #10]
 800c644:	88bb      	ldrh	r3, [r7, #4]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c64a:	8b3a      	ldrh	r2, [r7, #24]
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d901      	bls.n	800c656 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c652:	88fb      	ldrh	r3, [r7, #6]
 800c654:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c656:	8b7b      	ldrh	r3, [r7, #26]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	18d0      	adds	r0, r2, r3
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	88bb      	ldrh	r3, [r7, #4]
 800c662:	4413      	add	r3, r2
 800c664:	8b3a      	ldrh	r2, [r7, #24]
 800c666:	4619      	mov	r1, r3
 800c668:	f00a f8c9 	bl	80167fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c66c:	8afa      	ldrh	r2, [r7, #22]
 800c66e:	8b3b      	ldrh	r3, [r7, #24]
 800c670:	4413      	add	r3, r2
 800c672:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c674:	8b7a      	ldrh	r2, [r7, #26]
 800c676:	8b3b      	ldrh	r3, [r7, #24]
 800c678:	4413      	add	r3, r2
 800c67a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	8b3b      	ldrh	r3, [r7, #24]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	88fb      	ldrh	r3, [r7, #6]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <pbuf_copy_partial+0xca>
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1c4      	bne.n	800c624 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c69a:	8afb      	ldrh	r3, [r7, #22]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	08018d10 	.word	0x08018d10
 800c6a8:	08019058 	.word	0x08019058
 800c6ac:	08018d70 	.word	0x08018d70
 800c6b0:	08019078 	.word	0x08019078

0800c6b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	603a      	str	r2, [r7, #0]
 800c6be:	71fb      	strb	r3, [r7, #7]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	8919      	ldrh	r1, [r3, #8]
 800c6c8:	88ba      	ldrh	r2, [r7, #4]
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff fa95 	bl	800bbfc <pbuf_alloc>
 800c6d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <pbuf_clone+0x2a>
    return NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e011      	b.n	800c702 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff fea3 	bl	800c42c <pbuf_copy>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c6ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <pbuf_clone+0x4c>
 800c6f2:	4b06      	ldr	r3, [pc, #24]	; (800c70c <pbuf_clone+0x58>)
 800c6f4:	f240 5224 	movw	r2, #1316	; 0x524
 800c6f8:	4905      	ldr	r1, [pc, #20]	; (800c710 <pbuf_clone+0x5c>)
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <pbuf_clone+0x60>)
 800c6fc:	f009 fe14 	bl	8016328 <iprintf>
  return q;
 800c700:	68fb      	ldr	r3, [r7, #12]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	08018d10 	.word	0x08018d10
 800c710:	08019184 	.word	0x08019184
 800c714:	08018d70 	.word	0x08018d70

0800c718 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c71c:	f009 fd04 	bl	8016128 <rand>
 800c720:	4603      	mov	r3, r0
 800c722:	b29b      	uxth	r3, r3
 800c724:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c72e:	b29a      	uxth	r2, r3
 800c730:	4b01      	ldr	r3, [pc, #4]	; (800c738 <tcp_init+0x20>)
 800c732:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c734:	bf00      	nop
 800c736:	bd80      	pop	{r7, pc}
 800c738:	20000024 	.word	0x20000024

0800c73c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7d1b      	ldrb	r3, [r3, #20]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d105      	bne.n	800c758 <tcp_free+0x1c>
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <tcp_free+0x2c>)
 800c74e:	22d4      	movs	r2, #212	; 0xd4
 800c750:	4906      	ldr	r1, [pc, #24]	; (800c76c <tcp_free+0x30>)
 800c752:	4807      	ldr	r0, [pc, #28]	; (800c770 <tcp_free+0x34>)
 800c754:	f009 fde8 	bl	8016328 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	2001      	movs	r0, #1
 800c75c:	f7fe fe8e 	bl	800b47c <memp_free>
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	08019210 	.word	0x08019210
 800c76c:	08019240 	.word	0x08019240
 800c770:	08019254 	.word	0x08019254

0800c774 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7d1b      	ldrb	r3, [r3, #20]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d105      	bne.n	800c790 <tcp_free_listen+0x1c>
 800c784:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <tcp_free_listen+0x2c>)
 800c786:	22df      	movs	r2, #223	; 0xdf
 800c788:	4906      	ldr	r1, [pc, #24]	; (800c7a4 <tcp_free_listen+0x30>)
 800c78a:	4807      	ldr	r0, [pc, #28]	; (800c7a8 <tcp_free_listen+0x34>)
 800c78c:	f009 fdcc 	bl	8016328 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c790:	6879      	ldr	r1, [r7, #4]
 800c792:	2002      	movs	r0, #2
 800c794:	f7fe fe72 	bl	800b47c <memp_free>
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	08019210 	.word	0x08019210
 800c7a4:	0801927c 	.word	0x0801927c
 800c7a8:	08019254 	.word	0x08019254

0800c7ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7b0:	f001 f85c 	bl	800d86c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c7b4:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <tcp_tmr+0x28>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <tcp_tmr+0x28>)
 800c7be:	701a      	strb	r2, [r3, #0]
 800c7c0:	4b04      	ldr	r3, [pc, #16]	; (800c7d4 <tcp_tmr+0x28>)
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c7cc:	f000 fd0e 	bl	800d1ec <tcp_slowtmr>
  }
}
 800c7d0:	bf00      	nop
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	2000c80d 	.word	0x2000c80d

0800c7d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d105      	bne.n	800c7f4 <tcp_remove_listener+0x1c>
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <tcp_remove_listener+0x48>)
 800c7ea:	22ff      	movs	r2, #255	; 0xff
 800c7ec:	490d      	ldr	r1, [pc, #52]	; (800c824 <tcp_remove_listener+0x4c>)
 800c7ee:	480e      	ldr	r0, [pc, #56]	; (800c828 <tcp_remove_listener+0x50>)
 800c7f0:	f009 fd9a 	bl	8016328 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	e00a      	b.n	800c810 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d102      	bne.n	800c80a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1f1      	bne.n	800c7fa <tcp_remove_listener+0x22>
    }
  }
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	08019210 	.word	0x08019210
 800c824:	08019298 	.word	0x08019298
 800c828:	08019254 	.word	0x08019254

0800c82c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <tcp_listen_closed+0x1c>
 800c83a:	4b14      	ldr	r3, [pc, #80]	; (800c88c <tcp_listen_closed+0x60>)
 800c83c:	f240 1211 	movw	r2, #273	; 0x111
 800c840:	4913      	ldr	r1, [pc, #76]	; (800c890 <tcp_listen_closed+0x64>)
 800c842:	4814      	ldr	r0, [pc, #80]	; (800c894 <tcp_listen_closed+0x68>)
 800c844:	f009 fd70 	bl	8016328 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d006      	beq.n	800c85e <tcp_listen_closed+0x32>
 800c850:	4b0e      	ldr	r3, [pc, #56]	; (800c88c <tcp_listen_closed+0x60>)
 800c852:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c856:	4910      	ldr	r1, [pc, #64]	; (800c898 <tcp_listen_closed+0x6c>)
 800c858:	480e      	ldr	r0, [pc, #56]	; (800c894 <tcp_listen_closed+0x68>)
 800c85a:	f009 fd65 	bl	8016328 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c85e:	2301      	movs	r3, #1
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	e00b      	b.n	800c87c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c864:	4a0d      	ldr	r2, [pc, #52]	; (800c89c <tcp_listen_closed+0x70>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff ffb1 	bl	800c7d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3301      	adds	r3, #1
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d9f0      	bls.n	800c864 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	08019210 	.word	0x08019210
 800c890:	080192c0 	.word	0x080192c0
 800c894:	08019254 	.word	0x08019254
 800c898:	080192cc 	.word	0x080192cc
 800c89c:	0801b2e8 	.word	0x0801b2e8

0800c8a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c8a0:	b5b0      	push	{r4, r5, r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af04      	add	r7, sp, #16
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <tcp_close_shutdown+0x20>
 800c8b2:	4b63      	ldr	r3, [pc, #396]	; (800ca40 <tcp_close_shutdown+0x1a0>)
 800c8b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c8b8:	4962      	ldr	r1, [pc, #392]	; (800ca44 <tcp_close_shutdown+0x1a4>)
 800c8ba:	4863      	ldr	r0, [pc, #396]	; (800ca48 <tcp_close_shutdown+0x1a8>)
 800c8bc:	f009 fd34 	bl	8016328 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d066      	beq.n	800c994 <tcp_close_shutdown+0xf4>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d003      	beq.n	800c8d6 <tcp_close_shutdown+0x36>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7d1b      	ldrb	r3, [r3, #20]
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d15e      	bne.n	800c994 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d104      	bne.n	800c8e8 <tcp_close_shutdown+0x48>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8e6:	d055      	beq.n	800c994 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	8b5b      	ldrh	r3, [r3, #26]
 800c8ec:	f003 0310 	and.w	r3, r3, #16
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d106      	bne.n	800c902 <tcp_close_shutdown+0x62>
 800c8f4:	4b52      	ldr	r3, [pc, #328]	; (800ca40 <tcp_close_shutdown+0x1a0>)
 800c8f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c8fa:	4954      	ldr	r1, [pc, #336]	; (800ca4c <tcp_close_shutdown+0x1ac>)
 800c8fc:	4852      	ldr	r0, [pc, #328]	; (800ca48 <tcp_close_shutdown+0x1a8>)
 800c8fe:	f009 fd13 	bl	8016328 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c90a:	687d      	ldr	r5, [r7, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3304      	adds	r3, #4
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	8ad2      	ldrh	r2, [r2, #22]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	8b09      	ldrh	r1, [r1, #24]
 800c918:	9102      	str	r1, [sp, #8]
 800c91a:	9201      	str	r2, [sp, #4]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	462b      	mov	r3, r5
 800c920:	4622      	mov	r2, r4
 800c922:	4601      	mov	r1, r0
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f005 fd71 	bl	801240c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 fb4e 	bl	800dfcc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c930:	4b47      	ldr	r3, [pc, #284]	; (800ca50 <tcp_close_shutdown+0x1b0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d105      	bne.n	800c946 <tcp_close_shutdown+0xa6>
 800c93a:	4b45      	ldr	r3, [pc, #276]	; (800ca50 <tcp_close_shutdown+0x1b0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	4a43      	ldr	r2, [pc, #268]	; (800ca50 <tcp_close_shutdown+0x1b0>)
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	e013      	b.n	800c96e <tcp_close_shutdown+0xce>
 800c946:	4b42      	ldr	r3, [pc, #264]	; (800ca50 <tcp_close_shutdown+0x1b0>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	e00c      	b.n	800c968 <tcp_close_shutdown+0xc8>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	429a      	cmp	r2, r3
 800c956:	d104      	bne.n	800c962 <tcp_close_shutdown+0xc2>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	60da      	str	r2, [r3, #12]
 800c960:	e005      	b.n	800c96e <tcp_close_shutdown+0xce>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1ef      	bne.n	800c94e <tcp_close_shutdown+0xae>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	60da      	str	r2, [r3, #12]
 800c974:	4b37      	ldr	r3, [pc, #220]	; (800ca54 <tcp_close_shutdown+0x1b4>)
 800c976:	2201      	movs	r2, #1
 800c978:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c97a:	4b37      	ldr	r3, [pc, #220]	; (800ca58 <tcp_close_shutdown+0x1b8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d102      	bne.n	800c98a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c984:	f003 ffe6 	bl	8010954 <tcp_trigger_input_pcb_close>
 800c988:	e002      	b.n	800c990 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff fed6 	bl	800c73c <tcp_free>
      }
      return ERR_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	e050      	b.n	800ca36 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	7d1b      	ldrb	r3, [r3, #20]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d03b      	beq.n	800ca14 <tcp_close_shutdown+0x174>
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	dc44      	bgt.n	800ca2a <tcp_close_shutdown+0x18a>
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <tcp_close_shutdown+0x10a>
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d02a      	beq.n	800c9fe <tcp_close_shutdown+0x15e>
 800c9a8:	e03f      	b.n	800ca2a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8adb      	ldrh	r3, [r3, #22]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d021      	beq.n	800c9f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9b2:	4b2a      	ldr	r3, [pc, #168]	; (800ca5c <tcp_close_shutdown+0x1bc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d105      	bne.n	800c9c8 <tcp_close_shutdown+0x128>
 800c9bc:	4b27      	ldr	r3, [pc, #156]	; (800ca5c <tcp_close_shutdown+0x1bc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	4a26      	ldr	r2, [pc, #152]	; (800ca5c <tcp_close_shutdown+0x1bc>)
 800c9c4:	6013      	str	r3, [r2, #0]
 800c9c6:	e013      	b.n	800c9f0 <tcp_close_shutdown+0x150>
 800c9c8:	4b24      	ldr	r3, [pc, #144]	; (800ca5c <tcp_close_shutdown+0x1bc>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	e00c      	b.n	800c9ea <tcp_close_shutdown+0x14a>
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d104      	bne.n	800c9e4 <tcp_close_shutdown+0x144>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68da      	ldr	r2, [r3, #12]
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	60da      	str	r2, [r3, #12]
 800c9e2:	e005      	b.n	800c9f0 <tcp_close_shutdown+0x150>
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	60bb      	str	r3, [r7, #8]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1ef      	bne.n	800c9d0 <tcp_close_shutdown+0x130>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff fea0 	bl	800c73c <tcp_free>
      break;
 800c9fc:	e01a      	b.n	800ca34 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff ff14 	bl	800c82c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	4816      	ldr	r0, [pc, #88]	; (800ca60 <tcp_close_shutdown+0x1c0>)
 800ca08:	f001 fb30 	bl	800e06c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff feb1 	bl	800c774 <tcp_free_listen>
      break;
 800ca12:	e00f      	b.n	800ca34 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	480e      	ldr	r0, [pc, #56]	; (800ca50 <tcp_close_shutdown+0x1b0>)
 800ca18:	f001 fb28 	bl	800e06c <tcp_pcb_remove>
 800ca1c:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <tcp_close_shutdown+0x1b4>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff fe8a 	bl	800c73c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca28:	e004      	b.n	800ca34 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f81a 	bl	800ca64 <tcp_close_shutdown_fin>
 800ca30:	4603      	mov	r3, r0
 800ca32:	e000      	b.n	800ca36 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bdb0      	pop	{r4, r5, r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	08019210 	.word	0x08019210
 800ca44:	080192e4 	.word	0x080192e4
 800ca48:	08019254 	.word	0x08019254
 800ca4c:	08019304 	.word	0x08019304
 800ca50:	2000c804 	.word	0x2000c804
 800ca54:	2000c80c 	.word	0x2000c80c
 800ca58:	2000c844 	.word	0x2000c844
 800ca5c:	2000c7fc 	.word	0x2000c7fc
 800ca60:	2000c800 	.word	0x2000c800

0800ca64 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <tcp_close_shutdown_fin+0x1c>
 800ca72:	4b2e      	ldr	r3, [pc, #184]	; (800cb2c <tcp_close_shutdown_fin+0xc8>)
 800ca74:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca78:	492d      	ldr	r1, [pc, #180]	; (800cb30 <tcp_close_shutdown_fin+0xcc>)
 800ca7a:	482e      	ldr	r0, [pc, #184]	; (800cb34 <tcp_close_shutdown_fin+0xd0>)
 800ca7c:	f009 fc54 	bl	8016328 <iprintf>

  switch (pcb->state) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7d1b      	ldrb	r3, [r3, #20]
 800ca84:	2b07      	cmp	r3, #7
 800ca86:	d020      	beq.n	800caca <tcp_close_shutdown_fin+0x66>
 800ca88:	2b07      	cmp	r3, #7
 800ca8a:	dc2b      	bgt.n	800cae4 <tcp_close_shutdown_fin+0x80>
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d002      	beq.n	800ca96 <tcp_close_shutdown_fin+0x32>
 800ca90:	2b04      	cmp	r3, #4
 800ca92:	d00d      	beq.n	800cab0 <tcp_close_shutdown_fin+0x4c>
 800ca94:	e026      	b.n	800cae4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f004 fdc6 	bl	8011628 <tcp_send_fin>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d11f      	bne.n	800cae8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2205      	movs	r2, #5
 800caac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caae:	e01b      	b.n	800cae8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f004 fdb9 	bl	8011628 <tcp_send_fin>
 800cab6:	4603      	mov	r3, r0
 800cab8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d114      	bne.n	800caec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2205      	movs	r2, #5
 800cac6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cac8:	e010      	b.n	800caec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f004 fdac 	bl	8011628 <tcp_send_fin>
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d109      	bne.n	800caf0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2209      	movs	r2, #9
 800cae0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cae2:	e005      	b.n	800caf0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	e01c      	b.n	800cb22 <tcp_close_shutdown_fin+0xbe>
      break;
 800cae8:	bf00      	nop
 800caea:	e002      	b.n	800caf2 <tcp_close_shutdown_fin+0x8e>
      break;
 800caec:	bf00      	nop
 800caee:	e000      	b.n	800caf2 <tcp_close_shutdown_fin+0x8e>
      break;
 800caf0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800caf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d103      	bne.n	800cb02 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f004 fed2 	bl	80118a4 <tcp_output>
 800cb00:	e00d      	b.n	800cb1e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0a:	d108      	bne.n	800cb1e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	8b5b      	ldrh	r3, [r3, #26]
 800cb10:	f043 0308 	orr.w	r3, r3, #8
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e001      	b.n	800cb22 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	08019210 	.word	0x08019210
 800cb30:	080192c0 	.word	0x080192c0
 800cb34:	08019254 	.word	0x08019254

0800cb38 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d109      	bne.n	800cb5a <tcp_close+0x22>
 800cb46:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <tcp_close+0x4c>)
 800cb48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb4c:	490e      	ldr	r1, [pc, #56]	; (800cb88 <tcp_close+0x50>)
 800cb4e:	480f      	ldr	r0, [pc, #60]	; (800cb8c <tcp_close+0x54>)
 800cb50:	f009 fbea 	bl	8016328 <iprintf>
 800cb54:	f06f 030f 	mvn.w	r3, #15
 800cb58:	e00f      	b.n	800cb7a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7d1b      	ldrb	r3, [r3, #20]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d006      	beq.n	800cb70 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	8b5b      	ldrh	r3, [r3, #26]
 800cb66:	f043 0310 	orr.w	r3, r3, #16
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb70:	2101      	movs	r1, #1
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff fe94 	bl	800c8a0 <tcp_close_shutdown>
 800cb78:	4603      	mov	r3, r0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	08019210 	.word	0x08019210
 800cb88:	08019320 	.word	0x08019320
 800cb8c:	08019254 	.word	0x08019254

0800cb90 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d109      	bne.n	800cbb6 <tcp_shutdown+0x26>
 800cba2:	4b26      	ldr	r3, [pc, #152]	; (800cc3c <tcp_shutdown+0xac>)
 800cba4:	f240 2207 	movw	r2, #519	; 0x207
 800cba8:	4925      	ldr	r1, [pc, #148]	; (800cc40 <tcp_shutdown+0xb0>)
 800cbaa:	4826      	ldr	r0, [pc, #152]	; (800cc44 <tcp_shutdown+0xb4>)
 800cbac:	f009 fbbc 	bl	8016328 <iprintf>
 800cbb0:	f06f 030f 	mvn.w	r3, #15
 800cbb4:	e03d      	b.n	800cc32 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	7d1b      	ldrb	r3, [r3, #20]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d102      	bne.n	800cbc4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cbbe:	f06f 030a 	mvn.w	r3, #10
 800cbc2:	e036      	b.n	800cc32 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d01b      	beq.n	800cc02 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8b5b      	ldrh	r3, [r3, #26]
 800cbce:	f043 0310 	orr.w	r3, r3, #16
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d005      	beq.n	800cbea <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cbde:	2101      	movs	r1, #1
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7ff fe5d 	bl	800c8a0 <tcp_close_shutdown>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	e023      	b.n	800cc32 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d007      	beq.n	800cc02 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fae4 	bl	800c1c4 <pbuf_free>
      pcb->refused_data = NULL;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d013      	beq.n	800cc30 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	dc02      	bgt.n	800cc16 <tcp_shutdown+0x86>
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	da02      	bge.n	800cc1a <tcp_shutdown+0x8a>
 800cc14:	e009      	b.n	800cc2a <tcp_shutdown+0x9a>
 800cc16:	2b07      	cmp	r3, #7
 800cc18:	d107      	bne.n	800cc2a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	4619      	mov	r1, r3
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fe3d 	bl	800c8a0 <tcp_close_shutdown>
 800cc26:	4603      	mov	r3, r0
 800cc28:	e003      	b.n	800cc32 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cc2a:	f06f 030a 	mvn.w	r3, #10
 800cc2e:	e000      	b.n	800cc32 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	08019210 	.word	0x08019210
 800cc40:	08019338 	.word	0x08019338
 800cc44:	08019254 	.word	0x08019254

0800cc48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08e      	sub	sp, #56	; 0x38
 800cc4c:	af04      	add	r7, sp, #16
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d107      	bne.n	800cc68 <tcp_abandon+0x20>
 800cc58:	4b52      	ldr	r3, [pc, #328]	; (800cda4 <tcp_abandon+0x15c>)
 800cc5a:	f240 223d 	movw	r2, #573	; 0x23d
 800cc5e:	4952      	ldr	r1, [pc, #328]	; (800cda8 <tcp_abandon+0x160>)
 800cc60:	4852      	ldr	r0, [pc, #328]	; (800cdac <tcp_abandon+0x164>)
 800cc62:	f009 fb61 	bl	8016328 <iprintf>
 800cc66:	e099      	b.n	800cd9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	7d1b      	ldrb	r3, [r3, #20]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d106      	bne.n	800cc7e <tcp_abandon+0x36>
 800cc70:	4b4c      	ldr	r3, [pc, #304]	; (800cda4 <tcp_abandon+0x15c>)
 800cc72:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cc76:	494e      	ldr	r1, [pc, #312]	; (800cdb0 <tcp_abandon+0x168>)
 800cc78:	484c      	ldr	r0, [pc, #304]	; (800cdac <tcp_abandon+0x164>)
 800cc7a:	f009 fb55 	bl	8016328 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7d1b      	ldrb	r3, [r3, #20]
 800cc82:	2b0a      	cmp	r3, #10
 800cc84:	d107      	bne.n	800cc96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	484a      	ldr	r0, [pc, #296]	; (800cdb4 <tcp_abandon+0x16c>)
 800cc8a:	f001 f9ef 	bl	800e06c <tcp_pcb_remove>
    tcp_free(pcb);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fd54 	bl	800c73c <tcp_free>
 800cc94:	e082      	b.n	800cd9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	7d1b      	ldrb	r3, [r3, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d126      	bne.n	800cd0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	8adb      	ldrh	r3, [r3, #22]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02e      	beq.n	800cd26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ccc8:	4b3b      	ldr	r3, [pc, #236]	; (800cdb8 <tcp_abandon+0x170>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d105      	bne.n	800ccde <tcp_abandon+0x96>
 800ccd2:	4b39      	ldr	r3, [pc, #228]	; (800cdb8 <tcp_abandon+0x170>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	4a37      	ldr	r2, [pc, #220]	; (800cdb8 <tcp_abandon+0x170>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	e013      	b.n	800cd06 <tcp_abandon+0xbe>
 800ccde:	4b36      	ldr	r3, [pc, #216]	; (800cdb8 <tcp_abandon+0x170>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e00c      	b.n	800cd00 <tcp_abandon+0xb8>
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d104      	bne.n	800ccfa <tcp_abandon+0xb2>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	60da      	str	r2, [r3, #12]
 800ccf8:	e005      	b.n	800cd06 <tcp_abandon+0xbe>
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	61fb      	str	r3, [r7, #28]
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1ef      	bne.n	800cce6 <tcp_abandon+0x9e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	60da      	str	r2, [r3, #12]
 800cd0c:	e00b      	b.n	800cd26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8adb      	ldrh	r3, [r3, #22]
 800cd16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cd18:	6879      	ldr	r1, [r7, #4]
 800cd1a:	4828      	ldr	r0, [pc, #160]	; (800cdbc <tcp_abandon+0x174>)
 800cd1c:	f001 f9a6 	bl	800e06c <tcp_pcb_remove>
 800cd20:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <tcp_abandon+0x178>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d004      	beq.n	800cd38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 fe7a 	bl	800da2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd44:	4618      	mov	r0, r3
 800cd46:	f000 fe71 	bl	800da2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d004      	beq.n	800cd5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 fe68 	bl	800da2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00e      	beq.n	800cd80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3304      	adds	r3, #4
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	8b12      	ldrh	r2, [r2, #24]
 800cd6c:	9202      	str	r2, [sp, #8]
 800cd6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd70:	9201      	str	r2, [sp, #4]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	460b      	mov	r3, r1
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	69b9      	ldr	r1, [r7, #24]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f005 fb46 	bl	801240c <tcp_rst>
    }
    last_state = pcb->state;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	7d1b      	ldrb	r3, [r3, #20]
 800cd84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fcd8 	bl	800c73c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <tcp_abandon+0x154>
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f06f 010c 	mvn.w	r1, #12
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	4798      	blx	r3
  }
}
 800cd9c:	3728      	adds	r7, #40	; 0x28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	08019210 	.word	0x08019210
 800cda8:	08019354 	.word	0x08019354
 800cdac:	08019254 	.word	0x08019254
 800cdb0:	08019370 	.word	0x08019370
 800cdb4:	2000c808 	.word	0x2000c808
 800cdb8:	2000c7fc 	.word	0x2000c7fc
 800cdbc:	2000c804 	.word	0x2000c804
 800cdc0:	2000c80c 	.word	0x2000c80c

0800cdc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cdcc:	2101      	movs	r1, #1
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff ff3a 	bl	800cc48 <tcp_abandon>
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <tcp_update_rcv_ann_wnd+0x1c>
 800cdea:	4b25      	ldr	r3, [pc, #148]	; (800ce80 <tcp_update_rcv_ann_wnd+0xa4>)
 800cdec:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cdf0:	4924      	ldr	r1, [pc, #144]	; (800ce84 <tcp_update_rcv_ann_wnd+0xa8>)
 800cdf2:	4825      	ldr	r0, [pc, #148]	; (800ce88 <tcp_update_rcv_ann_wnd+0xac>)
 800cdf4:	f009 fa98 	bl	8016328 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ce00:	4413      	add	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ce0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ce10:	bf28      	it	cs
 800ce12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ce16:	b292      	uxth	r2, r2
 800ce18:	4413      	add	r3, r2
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	db08      	blt.n	800ce34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	e020      	b.n	800ce76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	dd03      	ble.n	800ce4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce48:	e014      	b.n	800ce74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce5c:	d306      	bcc.n	800ce6c <tcp_update_rcv_ann_wnd+0x90>
 800ce5e:	4b08      	ldr	r3, [pc, #32]	; (800ce80 <tcp_update_rcv_ann_wnd+0xa4>)
 800ce60:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ce64:	4909      	ldr	r1, [pc, #36]	; (800ce8c <tcp_update_rcv_ann_wnd+0xb0>)
 800ce66:	4808      	ldr	r0, [pc, #32]	; (800ce88 <tcp_update_rcv_ann_wnd+0xac>)
 800ce68:	f009 fa5e 	bl	8016328 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ce74:	2300      	movs	r3, #0
  }
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08019210 	.word	0x08019210
 800ce84:	0801946c 	.word	0x0801946c
 800ce88:	08019254 	.word	0x08019254
 800ce8c:	08019490 	.word	0x08019490

0800ce90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d107      	bne.n	800ceb2 <tcp_recved+0x22>
 800cea2:	4b1f      	ldr	r3, [pc, #124]	; (800cf20 <tcp_recved+0x90>)
 800cea4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cea8:	491e      	ldr	r1, [pc, #120]	; (800cf24 <tcp_recved+0x94>)
 800ceaa:	481f      	ldr	r0, [pc, #124]	; (800cf28 <tcp_recved+0x98>)
 800ceac:	f009 fa3c 	bl	8016328 <iprintf>
 800ceb0:	e032      	b.n	800cf18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	7d1b      	ldrb	r3, [r3, #20]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d106      	bne.n	800cec8 <tcp_recved+0x38>
 800ceba:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <tcp_recved+0x90>)
 800cebc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cec0:	491a      	ldr	r1, [pc, #104]	; (800cf2c <tcp_recved+0x9c>)
 800cec2:	4819      	ldr	r0, [pc, #100]	; (800cf28 <tcp_recved+0x98>)
 800cec4:	f009 fa30 	bl	8016328 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cecc:	887b      	ldrh	r3, [r7, #2]
 800cece:	4413      	add	r3, r2
 800ced0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ced2:	89fb      	ldrh	r3, [r7, #14]
 800ced4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ced8:	d804      	bhi.n	800cee4 <tcp_recved+0x54>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cede:	89fa      	ldrh	r2, [r7, #14]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d204      	bcs.n	800ceee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ceea:	851a      	strh	r2, [r3, #40]	; 0x28
 800ceec:	e002      	b.n	800cef4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	89fa      	ldrh	r2, [r7, #14]
 800cef2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ff71 	bl	800cddc <tcp_update_rcv_ann_wnd>
 800cefa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cf02:	d309      	bcc.n	800cf18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8b5b      	ldrh	r3, [r3, #26]
 800cf08:	f043 0302 	orr.w	r3, r3, #2
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f004 fcc6 	bl	80118a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	08019210 	.word	0x08019210
 800cf24:	080194ac 	.word	0x080194ac
 800cf28:	08019254 	.word	0x08019254
 800cf2c:	080194c4 	.word	0x080194c4

0800cf30 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cf3a:	4b1e      	ldr	r3, [pc, #120]	; (800cfb4 <tcp_new_port+0x84>)
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <tcp_new_port+0x84>)
 800cf44:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cf46:	4b1b      	ldr	r3, [pc, #108]	; (800cfb4 <tcp_new_port+0x84>)
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d103      	bne.n	800cf5a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cf52:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <tcp_new_port+0x84>)
 800cf54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cf58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	71fb      	strb	r3, [r7, #7]
 800cf5e:	e01e      	b.n	800cf9e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	4a15      	ldr	r2, [pc, #84]	; (800cfb8 <tcp_new_port+0x88>)
 800cf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	e011      	b.n	800cf92 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	8ada      	ldrh	r2, [r3, #22]
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <tcp_new_port+0x84>)
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d108      	bne.n	800cf8c <tcp_new_port+0x5c>
        n++;
 800cf7a:	88bb      	ldrh	r3, [r7, #4]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cf80:	88bb      	ldrh	r3, [r7, #4]
 800cf82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf86:	d3d8      	bcc.n	800cf3a <tcp_new_port+0xa>
          return 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e00d      	b.n	800cfa8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	603b      	str	r3, [r7, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1ea      	bne.n	800cf6e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	71fb      	strb	r3, [r7, #7]
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d9dd      	bls.n	800cf60 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cfa4:	4b03      	ldr	r3, [pc, #12]	; (800cfb4 <tcp_new_port+0x84>)
 800cfa6:	881b      	ldrh	r3, [r3, #0]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	20000024 	.word	0x20000024
 800cfb8:	0801b2e8 	.word	0x0801b2e8

0800cfbc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d109      	bne.n	800cfea <tcp_connect+0x2e>
 800cfd6:	4b7d      	ldr	r3, [pc, #500]	; (800d1cc <tcp_connect+0x210>)
 800cfd8:	f240 4235 	movw	r2, #1077	; 0x435
 800cfdc:	497c      	ldr	r1, [pc, #496]	; (800d1d0 <tcp_connect+0x214>)
 800cfde:	487d      	ldr	r0, [pc, #500]	; (800d1d4 <tcp_connect+0x218>)
 800cfe0:	f009 f9a2 	bl	8016328 <iprintf>
 800cfe4:	f06f 030f 	mvn.w	r3, #15
 800cfe8:	e0ec      	b.n	800d1c4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <tcp_connect+0x48>
 800cff0:	4b76      	ldr	r3, [pc, #472]	; (800d1cc <tcp_connect+0x210>)
 800cff2:	f240 4236 	movw	r2, #1078	; 0x436
 800cff6:	4978      	ldr	r1, [pc, #480]	; (800d1d8 <tcp_connect+0x21c>)
 800cff8:	4876      	ldr	r0, [pc, #472]	; (800d1d4 <tcp_connect+0x218>)
 800cffa:	f009 f995 	bl	8016328 <iprintf>
 800cffe:	f06f 030f 	mvn.w	r3, #15
 800d002:	e0df      	b.n	800d1c4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	7d1b      	ldrb	r3, [r3, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d009      	beq.n	800d020 <tcp_connect+0x64>
 800d00c:	4b6f      	ldr	r3, [pc, #444]	; (800d1cc <tcp_connect+0x210>)
 800d00e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d012:	4972      	ldr	r1, [pc, #456]	; (800d1dc <tcp_connect+0x220>)
 800d014:	486f      	ldr	r0, [pc, #444]	; (800d1d4 <tcp_connect+0x218>)
 800d016:	f009 f987 	bl	8016328 <iprintf>
 800d01a:	f06f 0309 	mvn.w	r3, #9
 800d01e:	e0d1      	b.n	800d1c4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <tcp_connect+0x70>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	e000      	b.n	800d02e <tcp_connect+0x72>
 800d02c:	2300      	movs	r3, #0
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	88fa      	ldrh	r2, [r7, #6]
 800d036:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	7a1b      	ldrb	r3, [r3, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	7a1b      	ldrb	r3, [r3, #8]
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe fd2f 	bl	800baa8 <netif_get_by_index>
 800d04a:	6278      	str	r0, [r7, #36]	; 0x24
 800d04c:	e005      	b.n	800d05a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3304      	adds	r3, #4
 800d052:	4618      	mov	r0, r3
 800d054:	f007 fb70 	bl	8014738 <ip4_route>
 800d058:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d060:	f06f 0303 	mvn.w	r3, #3
 800d064:	e0ae      	b.n	800d1c4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <tcp_connect+0xb8>
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d111      	bne.n	800d098 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	2b00      	cmp	r3, #0
 800d078:	d002      	beq.n	800d080 <tcp_connect+0xc4>
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	3304      	adds	r3, #4
 800d07e:	e000      	b.n	800d082 <tcp_connect+0xc6>
 800d080:	2300      	movs	r3, #0
 800d082:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d102      	bne.n	800d090 <tcp_connect+0xd4>
      return ERR_RTE;
 800d08a:	f06f 0303 	mvn.w	r3, #3
 800d08e:	e099      	b.n	800d1c4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8adb      	ldrh	r3, [r3, #22]
 800d09c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	8adb      	ldrh	r3, [r3, #22]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10c      	bne.n	800d0c0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d0a6:	f7ff ff43 	bl	800cf30 <tcp_new_port>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8adb      	ldrh	r3, [r3, #22]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <tcp_connect+0x104>
      return ERR_BUF;
 800d0ba:	f06f 0301 	mvn.w	r3, #1
 800d0be:	e081      	b.n	800d1c4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f001 f867 	bl	800e194 <tcp_next_iss>
 800d0c6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	1e5a      	subs	r2, r3, #1
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	1e5a      	subs	r2, r3, #1
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	1e5a      	subs	r2, r3, #1
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d0f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d10a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d114:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3304      	adds	r3, #4
 800d11e:	461a      	mov	r2, r3
 800d120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d122:	f001 f85d 	bl	800e1e0 <tcp_eff_send_mss_netif>
 800d126:	4603      	mov	r3, r0
 800d128:	461a      	mov	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d13e:	2102      	movs	r1, #2
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f004 fac1 	bl	80116c8 <tcp_enqueue_flags>
 800d146:	4603      	mov	r3, r0
 800d148:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d14a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d136      	bne.n	800d1c0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2202      	movs	r2, #2
 800d156:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d158:	8b7b      	ldrh	r3, [r7, #26]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d021      	beq.n	800d1a2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d15e:	4b20      	ldr	r3, [pc, #128]	; (800d1e0 <tcp_connect+0x224>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	429a      	cmp	r2, r3
 800d166:	d105      	bne.n	800d174 <tcp_connect+0x1b8>
 800d168:	4b1d      	ldr	r3, [pc, #116]	; (800d1e0 <tcp_connect+0x224>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <tcp_connect+0x224>)
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	e013      	b.n	800d19c <tcp_connect+0x1e0>
 800d174:	4b1a      	ldr	r3, [pc, #104]	; (800d1e0 <tcp_connect+0x224>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	623b      	str	r3, [r7, #32]
 800d17a:	e00c      	b.n	800d196 <tcp_connect+0x1da>
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d104      	bne.n	800d190 <tcp_connect+0x1d4>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68da      	ldr	r2, [r3, #12]
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	60da      	str	r2, [r3, #12]
 800d18e:	e005      	b.n	800d19c <tcp_connect+0x1e0>
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	623b      	str	r3, [r7, #32]
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1ef      	bne.n	800d17c <tcp_connect+0x1c0>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d1a2:	4b10      	ldr	r3, [pc, #64]	; (800d1e4 <tcp_connect+0x228>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	60da      	str	r2, [r3, #12]
 800d1aa:	4a0e      	ldr	r2, [pc, #56]	; (800d1e4 <tcp_connect+0x228>)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	f005 faee 	bl	8012790 <tcp_timer_needed>
 800d1b4:	4b0c      	ldr	r3, [pc, #48]	; (800d1e8 <tcp_connect+0x22c>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f004 fb72 	bl	80118a4 <tcp_output>
  }
  return ret;
 800d1c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3728      	adds	r7, #40	; 0x28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	08019210 	.word	0x08019210
 800d1d0:	080194ec 	.word	0x080194ec
 800d1d4:	08019254 	.word	0x08019254
 800d1d8:	08019508 	.word	0x08019508
 800d1dc:	08019524 	.word	0x08019524
 800d1e0:	2000c7fc 	.word	0x2000c7fc
 800d1e4:	2000c804 	.word	0x2000c804
 800d1e8:	2000c80c 	.word	0x2000c80c

0800d1ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d1ec:	b5b0      	push	{r4, r5, r7, lr}
 800d1ee:	b090      	sub	sp, #64	; 0x40
 800d1f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d1f8:	4b94      	ldr	r3, [pc, #592]	; (800d44c <tcp_slowtmr+0x260>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	4a93      	ldr	r2, [pc, #588]	; (800d44c <tcp_slowtmr+0x260>)
 800d200:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d202:	4b93      	ldr	r3, [pc, #588]	; (800d450 <tcp_slowtmr+0x264>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	3301      	adds	r3, #1
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4b91      	ldr	r3, [pc, #580]	; (800d450 <tcp_slowtmr+0x264>)
 800d20c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d212:	4b90      	ldr	r3, [pc, #576]	; (800d454 <tcp_slowtmr+0x268>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d218:	e29f      	b.n	800d75a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21c:	7d1b      	ldrb	r3, [r3, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <tcp_slowtmr+0x44>
 800d222:	4b8d      	ldr	r3, [pc, #564]	; (800d458 <tcp_slowtmr+0x26c>)
 800d224:	f240 42be 	movw	r2, #1214	; 0x4be
 800d228:	498c      	ldr	r1, [pc, #560]	; (800d45c <tcp_slowtmr+0x270>)
 800d22a:	488d      	ldr	r0, [pc, #564]	; (800d460 <tcp_slowtmr+0x274>)
 800d22c:	f009 f87c 	bl	8016328 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	7d1b      	ldrb	r3, [r3, #20]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d106      	bne.n	800d246 <tcp_slowtmr+0x5a>
 800d238:	4b87      	ldr	r3, [pc, #540]	; (800d458 <tcp_slowtmr+0x26c>)
 800d23a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d23e:	4989      	ldr	r1, [pc, #548]	; (800d464 <tcp_slowtmr+0x278>)
 800d240:	4887      	ldr	r0, [pc, #540]	; (800d460 <tcp_slowtmr+0x274>)
 800d242:	f009 f871 	bl	8016328 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	7d1b      	ldrb	r3, [r3, #20]
 800d24a:	2b0a      	cmp	r3, #10
 800d24c:	d106      	bne.n	800d25c <tcp_slowtmr+0x70>
 800d24e:	4b82      	ldr	r3, [pc, #520]	; (800d458 <tcp_slowtmr+0x26c>)
 800d250:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d254:	4984      	ldr	r1, [pc, #528]	; (800d468 <tcp_slowtmr+0x27c>)
 800d256:	4882      	ldr	r0, [pc, #520]	; (800d460 <tcp_slowtmr+0x274>)
 800d258:	f009 f866 	bl	8016328 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	7f9a      	ldrb	r2, [r3, #30]
 800d260:	4b7b      	ldr	r3, [pc, #492]	; (800d450 <tcp_slowtmr+0x264>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d105      	bne.n	800d274 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d272:	e272      	b.n	800d75a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d274:	4b76      	ldr	r3, [pc, #472]	; (800d450 <tcp_slowtmr+0x264>)
 800d276:	781a      	ldrb	r2, [r3, #0]
 800d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28a:	7d1b      	ldrb	r3, [r3, #20]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d10a      	bne.n	800d2a6 <tcp_slowtmr+0xba>
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d296:	2b05      	cmp	r3, #5
 800d298:	d905      	bls.n	800d2a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d29e:	3301      	adds	r3, #1
 800d2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2a4:	e11e      	b.n	800d4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2ac:	2b0b      	cmp	r3, #11
 800d2ae:	d905      	bls.n	800d2bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2ba:	e113      	b.n	800d4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d075      	beq.n	800d3b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d006      	beq.n	800d2dc <tcp_slowtmr+0xf0>
 800d2ce:	4b62      	ldr	r3, [pc, #392]	; (800d458 <tcp_slowtmr+0x26c>)
 800d2d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d2d4:	4965      	ldr	r1, [pc, #404]	; (800d46c <tcp_slowtmr+0x280>)
 800d2d6:	4862      	ldr	r0, [pc, #392]	; (800d460 <tcp_slowtmr+0x274>)
 800d2d8:	f009 f826 	bl	8016328 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d106      	bne.n	800d2f2 <tcp_slowtmr+0x106>
 800d2e4:	4b5c      	ldr	r3, [pc, #368]	; (800d458 <tcp_slowtmr+0x26c>)
 800d2e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d2ea:	4961      	ldr	r1, [pc, #388]	; (800d470 <tcp_slowtmr+0x284>)
 800d2ec:	485c      	ldr	r0, [pc, #368]	; (800d460 <tcp_slowtmr+0x274>)
 800d2ee:	f009 f81b 	bl	8016328 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d2f8:	2b0b      	cmp	r3, #11
 800d2fa:	d905      	bls.n	800d308 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d300:	3301      	adds	r3, #1
 800d302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d306:	e0ed      	b.n	800d4e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d30e:	3b01      	subs	r3, #1
 800d310:	4a58      	ldr	r2, [pc, #352]	; (800d474 <tcp_slowtmr+0x288>)
 800d312:	5cd3      	ldrb	r3, [r2, r3]
 800d314:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d31c:	7c7a      	ldrb	r2, [r7, #17]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d907      	bls.n	800d332 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d328:	3301      	adds	r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d338:	7c7a      	ldrb	r2, [r7, #17]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	f200 80d2 	bhi.w	800d4e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d340:	2301      	movs	r3, #1
 800d342:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d350:	f005 f950 	bl	80125f4 <tcp_zero_window_probe>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d014      	beq.n	800d384 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d35a:	2300      	movs	r3, #0
 800d35c:	623b      	str	r3, [r7, #32]
 800d35e:	e011      	b.n	800d384 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d366:	4619      	mov	r1, r3
 800d368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d36a:	f004 f815 	bl	8011398 <tcp_split_unsent_seg>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d107      	bne.n	800d384 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d376:	f004 fa95 	bl	80118a4 <tcp_output>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 80ac 	beq.w	800d4e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d39a:	2b06      	cmp	r3, #6
 800d39c:	f200 80a2 	bhi.w	800d4e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d3b0:	e098      	b.n	800d4e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	db0f      	blt.n	800d3dc <tcp_slowtmr+0x1f0>
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d008      	beq.n	800d3dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	b21a      	sxth	r2, r3
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	db7b      	blt.n	800d4e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ee:	f004 fd4d 	bl	8011e8c <tcp_rexmit_rto_prepare>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d007      	beq.n	800d408 <tcp_slowtmr+0x21c>
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d171      	bne.n	800d4e4 <tcp_slowtmr+0x2f8>
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d404:	2b00      	cmp	r3, #0
 800d406:	d06d      	beq.n	800d4e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	7d1b      	ldrb	r3, [r3, #20]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d03a      	beq.n	800d486 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d416:	2b0c      	cmp	r3, #12
 800d418:	bf28      	it	cs
 800d41a:	230c      	movcs	r3, #12
 800d41c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d424:	10db      	asrs	r3, r3, #3
 800d426:	b21b      	sxth	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d430:	4413      	add	r3, r2
 800d432:	7efa      	ldrb	r2, [r7, #27]
 800d434:	4910      	ldr	r1, [pc, #64]	; (800d478 <tcp_slowtmr+0x28c>)
 800d436:	5c8a      	ldrb	r2, [r1, r2]
 800d438:	4093      	lsls	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d442:	4293      	cmp	r3, r2
 800d444:	dc1a      	bgt.n	800d47c <tcp_slowtmr+0x290>
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	b21a      	sxth	r2, r3
 800d44a:	e019      	b.n	800d480 <tcp_slowtmr+0x294>
 800d44c:	2000c7f8 	.word	0x2000c7f8
 800d450:	2000c80e 	.word	0x2000c80e
 800d454:	2000c804 	.word	0x2000c804
 800d458:	08019210 	.word	0x08019210
 800d45c:	08019554 	.word	0x08019554
 800d460:	08019254 	.word	0x08019254
 800d464:	08019580 	.word	0x08019580
 800d468:	080195ac 	.word	0x080195ac
 800d46c:	080195dc 	.word	0x080195dc
 800d470:	08019610 	.word	0x08019610
 800d474:	0801b2e0 	.word	0x0801b2e0
 800d478:	0801b2d0 	.word	0x0801b2d0
 800d47c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	2200      	movs	r2, #0
 800d48a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d498:	4293      	cmp	r3, r2
 800d49a:	bf28      	it	cs
 800d49c:	4613      	movcs	r3, r2
 800d49e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d4a0:	8a7b      	ldrh	r3, [r7, #18]
 800d4a2:	085b      	lsrs	r3, r3, #1
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d206      	bcs.n	800d4cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e0:	f004 fd44 	bl	8011f6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	2b06      	cmp	r3, #6
 800d4ea:	d111      	bne.n	800d510 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ee:	8b5b      	ldrh	r3, [r3, #26]
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4f8:	4b9d      	ldr	r3, [pc, #628]	; (800d770 <tcp_slowtmr+0x584>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	6a1b      	ldr	r3, [r3, #32]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	2b28      	cmp	r3, #40	; 0x28
 800d504:	d904      	bls.n	800d510 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d50a:	3301      	adds	r3, #1
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	7a5b      	ldrb	r3, [r3, #9]
 800d514:	f003 0308 	and.w	r3, r3, #8
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d04c      	beq.n	800d5b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d520:	2b04      	cmp	r3, #4
 800d522:	d003      	beq.n	800d52c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d528:	2b07      	cmp	r3, #7
 800d52a:	d144      	bne.n	800d5b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d52c:	4b90      	ldr	r3, [pc, #576]	; (800d770 <tcp_slowtmr+0x584>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	6a1b      	ldr	r3, [r3, #32]
 800d534:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d53c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d540:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d544:	498b      	ldr	r1, [pc, #556]	; (800d774 <tcp_slowtmr+0x588>)
 800d546:	fba1 1303 	umull	r1, r3, r1, r3
 800d54a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d90a      	bls.n	800d566 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d554:	3301      	adds	r3, #1
 800d556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d55a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d55e:	3301      	adds	r3, #1
 800d560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d564:	e027      	b.n	800d5b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d566:	4b82      	ldr	r3, [pc, #520]	; (800d770 <tcp_slowtmr+0x584>)
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	6a1b      	ldr	r3, [r3, #32]
 800d56e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d578:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d57c:	4618      	mov	r0, r3
 800d57e:	4b7e      	ldr	r3, [pc, #504]	; (800d778 <tcp_slowtmr+0x58c>)
 800d580:	fb00 f303 	mul.w	r3, r0, r3
 800d584:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d586:	497b      	ldr	r1, [pc, #492]	; (800d774 <tcp_slowtmr+0x588>)
 800d588:	fba1 1303 	umull	r1, r3, r1, r3
 800d58c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d58e:	429a      	cmp	r2, r3
 800d590:	d911      	bls.n	800d5b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d594:	f004 ffee 	bl	8012574 <tcp_keepalive>
 800d598:	4603      	mov	r3, r0
 800d59a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d59e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d107      	bne.n	800d5b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d011      	beq.n	800d5e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d5be:	4b6c      	ldr	r3, [pc, #432]	; (800d770 <tcp_slowtmr+0x584>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	1ad2      	subs	r2, r2, r3
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	440b      	add	r3, r1
 800d5d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d302      	bcc.n	800d5e2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5de:	f000 fea9 	bl	800e334 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	7d1b      	ldrb	r3, [r3, #20]
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d10b      	bne.n	800d602 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5ea:	4b61      	ldr	r3, [pc, #388]	; (800d770 <tcp_slowtmr+0x584>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	2b28      	cmp	r3, #40	; 0x28
 800d5f6:	d904      	bls.n	800d602 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	7d1b      	ldrb	r3, [r3, #20]
 800d606:	2b09      	cmp	r3, #9
 800d608:	d10b      	bne.n	800d622 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d60a:	4b59      	ldr	r3, [pc, #356]	; (800d770 <tcp_slowtmr+0x584>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	2bf0      	cmp	r3, #240	; 0xf0
 800d616:	d904      	bls.n	800d622 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d61c:	3301      	adds	r3, #1
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d626:	2b00      	cmp	r3, #0
 800d628:	d060      	beq.n	800d6ec <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d630:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d634:	f000 fcca 	bl	800dfcc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d010      	beq.n	800d660 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d63e:	4b4f      	ldr	r3, [pc, #316]	; (800d77c <tcp_slowtmr+0x590>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d644:	429a      	cmp	r2, r3
 800d646:	d106      	bne.n	800d656 <tcp_slowtmr+0x46a>
 800d648:	4b4d      	ldr	r3, [pc, #308]	; (800d780 <tcp_slowtmr+0x594>)
 800d64a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d64e:	494d      	ldr	r1, [pc, #308]	; (800d784 <tcp_slowtmr+0x598>)
 800d650:	484d      	ldr	r0, [pc, #308]	; (800d788 <tcp_slowtmr+0x59c>)
 800d652:	f008 fe69 	bl	8016328 <iprintf>
        prev->next = pcb->next;
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	60da      	str	r2, [r3, #12]
 800d65e:	e00f      	b.n	800d680 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d660:	4b46      	ldr	r3, [pc, #280]	; (800d77c <tcp_slowtmr+0x590>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d666:	429a      	cmp	r2, r3
 800d668:	d006      	beq.n	800d678 <tcp_slowtmr+0x48c>
 800d66a:	4b45      	ldr	r3, [pc, #276]	; (800d780 <tcp_slowtmr+0x594>)
 800d66c:	f240 5271 	movw	r2, #1393	; 0x571
 800d670:	4946      	ldr	r1, [pc, #280]	; (800d78c <tcp_slowtmr+0x5a0>)
 800d672:	4845      	ldr	r0, [pc, #276]	; (800d788 <tcp_slowtmr+0x59c>)
 800d674:	f008 fe58 	bl	8016328 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	4a3f      	ldr	r2, [pc, #252]	; (800d77c <tcp_slowtmr+0x590>)
 800d67e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d684:	2b00      	cmp	r3, #0
 800d686:	d013      	beq.n	800d6b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d690:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	3304      	adds	r3, #4
 800d696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d698:	8ad2      	ldrh	r2, [r2, #22]
 800d69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d69c:	8b09      	ldrh	r1, [r1, #24]
 800d69e:	9102      	str	r1, [sp, #8]
 800d6a0:	9201      	str	r2, [sp, #4]
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	4622      	mov	r2, r4
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6ac:	f004 feae 	bl	801240c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d6c6:	6838      	ldr	r0, [r7, #0]
 800d6c8:	f7ff f838 	bl	800c73c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d6cc:	4b30      	ldr	r3, [pc, #192]	; (800d790 <tcp_slowtmr+0x5a4>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <tcp_slowtmr+0x4f6>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f06f 010c 	mvn.w	r1, #12
 800d6de:	68b8      	ldr	r0, [r7, #8]
 800d6e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d6e2:	4b2b      	ldr	r3, [pc, #172]	; (800d790 <tcp_slowtmr+0x5a4>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d037      	beq.n	800d75a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d6ea:	e590      	b.n	800d20e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	7f1b      	ldrb	r3, [r3, #28]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d704:	7f1a      	ldrb	r2, [r3, #28]
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	7f5b      	ldrb	r3, [r3, #29]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d325      	bcc.n	800d75a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	2200      	movs	r2, #0
 800d712:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d714:	4b1e      	ldr	r3, [pc, #120]	; (800d790 <tcp_slowtmr+0x5a4>)
 800d716:	2200      	movs	r2, #0
 800d718:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00b      	beq.n	800d73c <tcp_slowtmr+0x550>
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d72c:	6912      	ldr	r2, [r2, #16]
 800d72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	4603      	mov	r3, r0
 800d736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d73a:	e002      	b.n	800d742 <tcp_slowtmr+0x556>
 800d73c:	2300      	movs	r3, #0
 800d73e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d742:	4b13      	ldr	r3, [pc, #76]	; (800d790 <tcp_slowtmr+0x5a4>)
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d000      	beq.n	800d74c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d74a:	e560      	b.n	800d20e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d74c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d756:	f004 f8a5 	bl	80118a4 <tcp_output>
  while (pcb != NULL) {
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f47f ad5c 	bne.w	800d21a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <tcp_slowtmr+0x5a8>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d76c:	e067      	b.n	800d83e <tcp_slowtmr+0x652>
 800d76e:	bf00      	nop
 800d770:	2000c7f8 	.word	0x2000c7f8
 800d774:	10624dd3 	.word	0x10624dd3
 800d778:	000124f8 	.word	0x000124f8
 800d77c:	2000c804 	.word	0x2000c804
 800d780:	08019210 	.word	0x08019210
 800d784:	08019648 	.word	0x08019648
 800d788:	08019254 	.word	0x08019254
 800d78c:	08019674 	.word	0x08019674
 800d790:	2000c80c 	.word	0x2000c80c
 800d794:	2000c808 	.word	0x2000c808
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	7d1b      	ldrb	r3, [r3, #20]
 800d79c:	2b0a      	cmp	r3, #10
 800d79e:	d006      	beq.n	800d7ae <tcp_slowtmr+0x5c2>
 800d7a0:	4b2b      	ldr	r3, [pc, #172]	; (800d850 <tcp_slowtmr+0x664>)
 800d7a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d7a6:	492b      	ldr	r1, [pc, #172]	; (800d854 <tcp_slowtmr+0x668>)
 800d7a8:	482b      	ldr	r0, [pc, #172]	; (800d858 <tcp_slowtmr+0x66c>)
 800d7aa:	f008 fdbd 	bl	8016328 <iprintf>
    pcb_remove = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d7b4:	4b29      	ldr	r3, [pc, #164]	; (800d85c <tcp_slowtmr+0x670>)
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	6a1b      	ldr	r3, [r3, #32]
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	2bf0      	cmp	r3, #240	; 0xf0
 800d7c0:	d904      	bls.n	800d7cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d02f      	beq.n	800d834 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d6:	f000 fbf9 	bl	800dfcc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d010      	beq.n	800d802 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d7e0:	4b1f      	ldr	r3, [pc, #124]	; (800d860 <tcp_slowtmr+0x674>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d106      	bne.n	800d7f8 <tcp_slowtmr+0x60c>
 800d7ea:	4b19      	ldr	r3, [pc, #100]	; (800d850 <tcp_slowtmr+0x664>)
 800d7ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800d7f0:	491c      	ldr	r1, [pc, #112]	; (800d864 <tcp_slowtmr+0x678>)
 800d7f2:	4819      	ldr	r0, [pc, #100]	; (800d858 <tcp_slowtmr+0x66c>)
 800d7f4:	f008 fd98 	bl	8016328 <iprintf>
        prev->next = pcb->next;
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	68da      	ldr	r2, [r3, #12]
 800d7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fe:	60da      	str	r2, [r3, #12]
 800d800:	e00f      	b.n	800d822 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d802:	4b17      	ldr	r3, [pc, #92]	; (800d860 <tcp_slowtmr+0x674>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d808:	429a      	cmp	r2, r3
 800d80a:	d006      	beq.n	800d81a <tcp_slowtmr+0x62e>
 800d80c:	4b10      	ldr	r3, [pc, #64]	; (800d850 <tcp_slowtmr+0x664>)
 800d80e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d812:	4915      	ldr	r1, [pc, #84]	; (800d868 <tcp_slowtmr+0x67c>)
 800d814:	4810      	ldr	r0, [pc, #64]	; (800d858 <tcp_slowtmr+0x66c>)
 800d816:	f008 fd87 	bl	8016328 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	4a10      	ldr	r2, [pc, #64]	; (800d860 <tcp_slowtmr+0x674>)
 800d820:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d82c:	69f8      	ldr	r0, [r7, #28]
 800d82e:	f7fe ff85 	bl	800c73c <tcp_free>
 800d832:	e004      	b.n	800d83e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1a9      	bne.n	800d798 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d844:	bf00      	nop
 800d846:	bf00      	nop
 800d848:	3730      	adds	r7, #48	; 0x30
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bdb0      	pop	{r4, r5, r7, pc}
 800d84e:	bf00      	nop
 800d850:	08019210 	.word	0x08019210
 800d854:	080196a0 	.word	0x080196a0
 800d858:	08019254 	.word	0x08019254
 800d85c:	2000c7f8 	.word	0x2000c7f8
 800d860:	2000c808 	.word	0x2000c808
 800d864:	080196d0 	.word	0x080196d0
 800d868:	080196f8 	.word	0x080196f8

0800d86c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d872:	4b2d      	ldr	r3, [pc, #180]	; (800d928 <tcp_fasttmr+0xbc>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	3301      	adds	r3, #1
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <tcp_fasttmr+0xbc>)
 800d87c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d87e:	4b2b      	ldr	r3, [pc, #172]	; (800d92c <tcp_fasttmr+0xc0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d884:	e048      	b.n	800d918 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7f9a      	ldrb	r2, [r3, #30]
 800d88a:	4b27      	ldr	r3, [pc, #156]	; (800d928 <tcp_fasttmr+0xbc>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d03f      	beq.n	800d912 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d892:	4b25      	ldr	r3, [pc, #148]	; (800d928 <tcp_fasttmr+0xbc>)
 800d894:	781a      	ldrb	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	8b5b      	ldrh	r3, [r3, #26]
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d010      	beq.n	800d8c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8b5b      	ldrh	r3, [r3, #26]
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f003 fff5 	bl	80118a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	8b5b      	ldrh	r3, [r3, #26]
 800d8be:	f023 0303 	bic.w	r3, r3, #3
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	8b5b      	ldrh	r3, [r3, #26]
 800d8cc:	f003 0308 	and.w	r3, r3, #8
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d009      	beq.n	800d8e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f023 0308 	bic.w	r3, r3, #8
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff f8be 	bl	800ca64 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00a      	beq.n	800d90c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d8f6:	4b0e      	ldr	r3, [pc, #56]	; (800d930 <tcp_fasttmr+0xc4>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f819 	bl	800d934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d902:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <tcp_fasttmr+0xc4>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d000      	beq.n	800d90c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d90a:	e7b8      	b.n	800d87e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	607b      	str	r3, [r7, #4]
 800d910:	e002      	b.n	800d918 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1b3      	bne.n	800d886 <tcp_fasttmr+0x1a>
    }
  }
}
 800d91e:	bf00      	nop
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	2000c80e 	.word	0x2000c80e
 800d92c:	2000c804 	.word	0x2000c804
 800d930:	2000c80c 	.word	0x2000c80c

0800d934 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <tcp_process_refused_data+0x22>
 800d942:	4b37      	ldr	r3, [pc, #220]	; (800da20 <tcp_process_refused_data+0xec>)
 800d944:	f240 6209 	movw	r2, #1545	; 0x609
 800d948:	4936      	ldr	r1, [pc, #216]	; (800da24 <tcp_process_refused_data+0xf0>)
 800d94a:	4837      	ldr	r0, [pc, #220]	; (800da28 <tcp_process_refused_data+0xf4>)
 800d94c:	f008 fcec 	bl	8016328 <iprintf>
 800d950:	f06f 030f 	mvn.w	r3, #15
 800d954:	e060      	b.n	800da18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95a:	7b5b      	ldrb	r3, [r3, #13]
 800d95c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d962:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00b      	beq.n	800d98c <tcp_process_refused_data+0x58>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6918      	ldr	r0, [r3, #16]
 800d97e:	2300      	movs	r3, #0
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	6879      	ldr	r1, [r7, #4]
 800d984:	47a0      	blx	r4
 800d986:	4603      	mov	r3, r0
 800d988:	73fb      	strb	r3, [r7, #15]
 800d98a:	e007      	b.n	800d99c <tcp_process_refused_data+0x68>
 800d98c:	2300      	movs	r3, #0
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	2000      	movs	r0, #0
 800d994:	f000 f8a4 	bl	800dae0 <tcp_recv_null>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d12a      	bne.n	800d9fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d9a4:	7bbb      	ldrb	r3, [r7, #14]
 800d9a6:	f003 0320 	and.w	r3, r3, #32
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d033      	beq.n	800da16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d9b6:	d005      	beq.n	800d9c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9bc:	3301      	adds	r3, #1
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <tcp_process_refused_data+0xb2>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6918      	ldr	r0, [r3, #16]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	2200      	movs	r2, #0
 800d9dc:	6879      	ldr	r1, [r7, #4]
 800d9de:	47a0      	blx	r4
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	73fb      	strb	r3, [r7, #15]
 800d9e4:	e001      	b.n	800d9ea <tcp_process_refused_data+0xb6>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ee:	f113 0f0d 	cmn.w	r3, #13
 800d9f2:	d110      	bne.n	800da16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d9f4:	f06f 030c 	mvn.w	r3, #12
 800d9f8:	e00e      	b.n	800da18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9fe:	f113 0f0d 	cmn.w	r3, #13
 800da02:	d102      	bne.n	800da0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da04:	f06f 030c 	mvn.w	r3, #12
 800da08:	e006      	b.n	800da18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800da10:	f06f 0304 	mvn.w	r3, #4
 800da14:	e000      	b.n	800da18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd90      	pop	{r4, r7, pc}
 800da20:	08019210 	.word	0x08019210
 800da24:	08019720 	.word	0x08019720
 800da28:	08019254 	.word	0x08019254

0800da2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800da34:	e007      	b.n	800da46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f80a 	bl	800da56 <tcp_seg_free>
    seg = next;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1f4      	bne.n	800da36 <tcp_segs_free+0xa>
  }
}
 800da4c:	bf00      	nop
 800da4e:	bf00      	nop
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00c      	beq.n	800da7e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d004      	beq.n	800da76 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fba7 	bl	800c1c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	2003      	movs	r0, #3
 800da7a:	f7fd fcff 	bl	800b47c <memp_free>
  }
}
 800da7e:	bf00      	nop
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d106      	bne.n	800daa4 <tcp_seg_copy+0x1c>
 800da96:	4b0f      	ldr	r3, [pc, #60]	; (800dad4 <tcp_seg_copy+0x4c>)
 800da98:	f240 6282 	movw	r2, #1666	; 0x682
 800da9c:	490e      	ldr	r1, [pc, #56]	; (800dad8 <tcp_seg_copy+0x50>)
 800da9e:	480f      	ldr	r0, [pc, #60]	; (800dadc <tcp_seg_copy+0x54>)
 800daa0:	f008 fc42 	bl	8016328 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800daa4:	2003      	movs	r0, #3
 800daa6:	f7fd fc73 	bl	800b390 <memp_malloc>
 800daaa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <tcp_seg_copy+0x2e>
    return NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e00a      	b.n	800dacc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dab6:	2210      	movs	r2, #16
 800dab8:	6879      	ldr	r1, [r7, #4]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f008 fe9f 	bl	80167fe <memcpy>
  pbuf_ref(cseg->p);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fc23 	bl	800c310 <pbuf_ref>
  return cseg;
 800daca:	68fb      	ldr	r3, [r7, #12]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	08019210 	.word	0x08019210
 800dad8:	08019764 	.word	0x08019764
 800dadc:	08019254 	.word	0x08019254

0800dae0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d109      	bne.n	800db08 <tcp_recv_null+0x28>
 800daf4:	4b12      	ldr	r3, [pc, #72]	; (800db40 <tcp_recv_null+0x60>)
 800daf6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dafa:	4912      	ldr	r1, [pc, #72]	; (800db44 <tcp_recv_null+0x64>)
 800dafc:	4812      	ldr	r0, [pc, #72]	; (800db48 <tcp_recv_null+0x68>)
 800dafe:	f008 fc13 	bl	8016328 <iprintf>
 800db02:	f06f 030f 	mvn.w	r3, #15
 800db06:	e016      	b.n	800db36 <tcp_recv_null+0x56>

  if (p != NULL) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d009      	beq.n	800db22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	891b      	ldrh	r3, [r3, #8]
 800db12:	4619      	mov	r1, r3
 800db14:	68b8      	ldr	r0, [r7, #8]
 800db16:	f7ff f9bb 	bl	800ce90 <tcp_recved>
    pbuf_free(p);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7fe fb52 	bl	800c1c4 <pbuf_free>
 800db20:	e008      	b.n	800db34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800db22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d104      	bne.n	800db34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800db2a:	68b8      	ldr	r0, [r7, #8]
 800db2c:	f7ff f804 	bl	800cb38 <tcp_close>
 800db30:	4603      	mov	r3, r0
 800db32:	e000      	b.n	800db36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08019210 	.word	0x08019210
 800db44:	08019780 	.word	0x08019780
 800db48:	08019254 	.word	0x08019254

0800db4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800db56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db01      	blt.n	800db62 <tcp_kill_prio+0x16>
 800db5e:	79fb      	ldrb	r3, [r7, #7]
 800db60:	e000      	b.n	800db64 <tcp_kill_prio+0x18>
 800db62:	237f      	movs	r3, #127	; 0x7f
 800db64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800db66:	7afb      	ldrb	r3, [r7, #11]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d034      	beq.n	800dbd6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800db6c:	7afb      	ldrb	r3, [r7, #11]
 800db6e:	3b01      	subs	r3, #1
 800db70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db7a:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <tcp_kill_prio+0x94>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	617b      	str	r3, [r7, #20]
 800db80:	e01f      	b.n	800dbc2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	7d5b      	ldrb	r3, [r3, #21]
 800db86:	7afa      	ldrb	r2, [r7, #11]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d80c      	bhi.n	800dba6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800db90:	7afa      	ldrb	r2, [r7, #11]
 800db92:	429a      	cmp	r2, r3
 800db94:	d112      	bne.n	800dbbc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800db96:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <tcp_kill_prio+0x98>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d80a      	bhi.n	800dbbc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dba6:	4b0f      	ldr	r3, [pc, #60]	; (800dbe4 <tcp_kill_prio+0x98>)
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	7d5b      	ldrb	r3, [r3, #21]
 800dbba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1dc      	bne.n	800db82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d004      	beq.n	800dbd8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbce:	6938      	ldr	r0, [r7, #16]
 800dbd0:	f7ff f8f8 	bl	800cdc4 <tcp_abort>
 800dbd4:	e000      	b.n	800dbd8 <tcp_kill_prio+0x8c>
    return;
 800dbd6:	bf00      	nop
  }
}
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	2000c804 	.word	0x2000c804
 800dbe4:	2000c7f8 	.word	0x2000c7f8

0800dbe8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	2b08      	cmp	r3, #8
 800dbf6:	d009      	beq.n	800dc0c <tcp_kill_state+0x24>
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	2b09      	cmp	r3, #9
 800dbfc:	d006      	beq.n	800dc0c <tcp_kill_state+0x24>
 800dbfe:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <tcp_kill_state+0x80>)
 800dc00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dc04:	4919      	ldr	r1, [pc, #100]	; (800dc6c <tcp_kill_state+0x84>)
 800dc06:	481a      	ldr	r0, [pc, #104]	; (800dc70 <tcp_kill_state+0x88>)
 800dc08:	f008 fb8e 	bl	8016328 <iprintf>

  inactivity = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc14:	4b17      	ldr	r3, [pc, #92]	; (800dc74 <tcp_kill_state+0x8c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	617b      	str	r3, [r7, #20]
 800dc1a:	e017      	b.n	800dc4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	79fa      	ldrb	r2, [r7, #7]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d10f      	bne.n	800dc46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <tcp_kill_state+0x90>)
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d807      	bhi.n	800dc46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dc36:	4b10      	ldr	r3, [pc, #64]	; (800dc78 <tcp_kill_state+0x90>)
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e4      	bne.n	800dc1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d003      	beq.n	800dc60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dc58:	2100      	movs	r1, #0
 800dc5a:	6938      	ldr	r0, [r7, #16]
 800dc5c:	f7fe fff4 	bl	800cc48 <tcp_abandon>
  }
}
 800dc60:	bf00      	nop
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	08019210 	.word	0x08019210
 800dc6c:	0801979c 	.word	0x0801979c
 800dc70:	08019254 	.word	0x08019254
 800dc74:	2000c804 	.word	0x2000c804
 800dc78:	2000c7f8 	.word	0x2000c7f8

0800dc7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dc86:	2300      	movs	r3, #0
 800dc88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc8a:	4b12      	ldr	r3, [pc, #72]	; (800dcd4 <tcp_kill_timewait+0x58>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	e012      	b.n	800dcb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dc92:	4b11      	ldr	r3, [pc, #68]	; (800dcd8 <tcp_kill_timewait+0x5c>)
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6a1b      	ldr	r3, [r3, #32]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d807      	bhi.n	800dcb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dca2:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <tcp_kill_timewait+0x5c>)
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e9      	bne.n	800dc92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f7ff f87d 	bl	800cdc4 <tcp_abort>
  }
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	2000c808 	.word	0x2000c808
 800dcd8:	2000c7f8 	.word	0x2000c7f8

0800dcdc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dce2:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <tcp_handle_closepend+0x48>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dce8:	e014      	b.n	800dd14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8b5b      	ldrh	r3, [r3, #26]
 800dcf4:	f003 0308 	and.w	r3, r3, #8
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d009      	beq.n	800dd10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	8b5b      	ldrh	r3, [r3, #26]
 800dd00:	f023 0308 	bic.w	r3, r3, #8
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7fe feaa 	bl	800ca64 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1e7      	bne.n	800dcea <tcp_handle_closepend+0xe>
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	2000c804 	.word	0x2000c804

0800dd28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd32:	2001      	movs	r0, #1
 800dd34:	f7fd fb2c 	bl	800b390 <memp_malloc>
 800dd38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d126      	bne.n	800dd8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dd40:	f7ff ffcc 	bl	800dcdc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dd44:	f7ff ff9a 	bl	800dc7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f7fd fb21 	bl	800b390 <memp_malloc>
 800dd4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d11b      	bne.n	800dd8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dd56:	2009      	movs	r0, #9
 800dd58:	f7ff ff46 	bl	800dbe8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd5c:	2001      	movs	r0, #1
 800dd5e:	f7fd fb17 	bl	800b390 <memp_malloc>
 800dd62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d111      	bne.n	800dd8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dd6a:	2008      	movs	r0, #8
 800dd6c:	f7ff ff3c 	bl	800dbe8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd70:	2001      	movs	r0, #1
 800dd72:	f7fd fb0d 	bl	800b390 <memp_malloc>
 800dd76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d107      	bne.n	800dd8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dd7e:	79fb      	ldrb	r3, [r7, #7]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff fee3 	bl	800db4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd86:	2001      	movs	r0, #1
 800dd88:	f7fd fb02 	bl	800b390 <memp_malloc>
 800dd8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d03f      	beq.n	800de14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dd94:	229c      	movs	r2, #156	; 0x9c
 800dd96:	2100      	movs	r1, #0
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f008 fc55 	bl	8016648 <memset>
    pcb->prio = prio;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	79fa      	ldrb	r2, [r7, #7]
 800dda2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ddaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ddb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	22ff      	movs	r2, #255	; 0xff
 800ddc2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ddca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2206      	movs	r2, #6
 800ddd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2206      	movs	r2, #6
 800ddd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dde0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2201      	movs	r2, #1
 800dde6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ddea:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <tcp_alloc+0xf8>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ddf2:	4b0c      	ldr	r3, [pc, #48]	; (800de24 <tcp_alloc+0xfc>)
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4a08      	ldr	r2, [pc, #32]	; (800de28 <tcp_alloc+0x100>)
 800de08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	4a07      	ldr	r2, [pc, #28]	; (800de2c <tcp_alloc+0x104>)
 800de10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800de14:	68fb      	ldr	r3, [r7, #12]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	2000c7f8 	.word	0x2000c7f8
 800de24:	2000c80e 	.word	0x2000c80e
 800de28:	0800dae1 	.word	0x0800dae1
 800de2c:	006ddd00 	.word	0x006ddd00

0800de30 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800de3a:	2040      	movs	r0, #64	; 0x40
 800de3c:	f7ff ff74 	bl	800dd28 <tcp_alloc>
 800de40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800de42:	68fb      	ldr	r3, [r7, #12]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	611a      	str	r2, [r3, #16]
  }
}
 800de62:	bf00      	nop
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00e      	beq.n	800de9e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	7d1b      	ldrb	r3, [r3, #20]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d106      	bne.n	800de96 <tcp_recv+0x26>
 800de88:	4b07      	ldr	r3, [pc, #28]	; (800dea8 <tcp_recv+0x38>)
 800de8a:	f240 72df 	movw	r2, #2015	; 0x7df
 800de8e:	4907      	ldr	r1, [pc, #28]	; (800deac <tcp_recv+0x3c>)
 800de90:	4807      	ldr	r0, [pc, #28]	; (800deb0 <tcp_recv+0x40>)
 800de92:	f008 fa49 	bl	8016328 <iprintf>
    pcb->recv = recv;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	683a      	ldr	r2, [r7, #0]
 800de9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800de9e:	bf00      	nop
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	08019210 	.word	0x08019210
 800deac:	080197ac 	.word	0x080197ac
 800deb0:	08019254 	.word	0x08019254

0800deb4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00e      	beq.n	800dee2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7d1b      	ldrb	r3, [r3, #20]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d106      	bne.n	800deda <tcp_sent+0x26>
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <tcp_sent+0x38>)
 800dece:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ded2:	4907      	ldr	r1, [pc, #28]	; (800def0 <tcp_sent+0x3c>)
 800ded4:	4807      	ldr	r0, [pc, #28]	; (800def4 <tcp_sent+0x40>)
 800ded6:	f008 fa27 	bl	8016328 <iprintf>
    pcb->sent = sent;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800dee2:	bf00      	nop
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	08019210 	.word	0x08019210
 800def0:	080197d4 	.word	0x080197d4
 800def4:	08019254 	.word	0x08019254

0800def8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00e      	beq.n	800df26 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d106      	bne.n	800df1e <tcp_err+0x26>
 800df10:	4b07      	ldr	r3, [pc, #28]	; (800df30 <tcp_err+0x38>)
 800df12:	f640 020d 	movw	r2, #2061	; 0x80d
 800df16:	4907      	ldr	r1, [pc, #28]	; (800df34 <tcp_err+0x3c>)
 800df18:	4807      	ldr	r0, [pc, #28]	; (800df38 <tcp_err+0x40>)
 800df1a:	f008 fa05 	bl	8016328 <iprintf>
    pcb->errf = err;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	08019210 	.word	0x08019210
 800df34:	080197fc 	.word	0x080197fc
 800df38:	08019254 	.word	0x08019254

0800df3c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d008      	beq.n	800df5e <tcp_accept+0x22>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7d1b      	ldrb	r3, [r3, #20]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d104      	bne.n	800df5e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	619a      	str	r2, [r3, #24]
  }
}
 800df5e:	bf00      	nop
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
	...

0800df6c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	4613      	mov	r3, r2
 800df78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d107      	bne.n	800df90 <tcp_poll+0x24>
 800df80:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <tcp_poll+0x50>)
 800df82:	f640 023d 	movw	r2, #2109	; 0x83d
 800df86:	490e      	ldr	r1, [pc, #56]	; (800dfc0 <tcp_poll+0x54>)
 800df88:	480e      	ldr	r0, [pc, #56]	; (800dfc4 <tcp_poll+0x58>)
 800df8a:	f008 f9cd 	bl	8016328 <iprintf>
 800df8e:	e011      	b.n	800dfb4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d106      	bne.n	800dfa6 <tcp_poll+0x3a>
 800df98:	4b08      	ldr	r3, [pc, #32]	; (800dfbc <tcp_poll+0x50>)
 800df9a:	f640 023e 	movw	r2, #2110	; 0x83e
 800df9e:	490a      	ldr	r1, [pc, #40]	; (800dfc8 <tcp_poll+0x5c>)
 800dfa0:	4808      	ldr	r0, [pc, #32]	; (800dfc4 <tcp_poll+0x58>)
 800dfa2:	f008 f9c1 	bl	8016328 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	79fa      	ldrb	r2, [r7, #7]
 800dfb2:	775a      	strb	r2, [r3, #29]
}
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	08019210 	.word	0x08019210
 800dfc0:	08019824 	.word	0x08019824
 800dfc4:	08019254 	.word	0x08019254
 800dfc8:	0801983c 	.word	0x0801983c

0800dfcc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d107      	bne.n	800dfea <tcp_pcb_purge+0x1e>
 800dfda:	4b21      	ldr	r3, [pc, #132]	; (800e060 <tcp_pcb_purge+0x94>)
 800dfdc:	f640 0251 	movw	r2, #2129	; 0x851
 800dfe0:	4920      	ldr	r1, [pc, #128]	; (800e064 <tcp_pcb_purge+0x98>)
 800dfe2:	4821      	ldr	r0, [pc, #132]	; (800e068 <tcp_pcb_purge+0x9c>)
 800dfe4:	f008 f9a0 	bl	8016328 <iprintf>
 800dfe8:	e037      	b.n	800e05a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	7d1b      	ldrb	r3, [r3, #20]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d033      	beq.n	800e05a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dff6:	2b0a      	cmp	r3, #10
 800dff8:	d02f      	beq.n	800e05a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d02b      	beq.n	800e05a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e006:	2b00      	cmp	r3, #0
 800e008:	d007      	beq.n	800e01a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fe f8d8 	bl	800c1c4 <pbuf_free>
      pcb->refused_data = NULL;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f986 	bl	800e334 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e02e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff fcf9 	bl	800da2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff fcf4 	bl	800da2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	66da      	str	r2, [r3, #108]	; 0x6c
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	08019210 	.word	0x08019210
 800e064:	0801985c 	.word	0x0801985c
 800e068:	08019254 	.word	0x08019254

0800e06c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d106      	bne.n	800e08a <tcp_pcb_remove+0x1e>
 800e07c:	4b3e      	ldr	r3, [pc, #248]	; (800e178 <tcp_pcb_remove+0x10c>)
 800e07e:	f640 0283 	movw	r2, #2179	; 0x883
 800e082:	493e      	ldr	r1, [pc, #248]	; (800e17c <tcp_pcb_remove+0x110>)
 800e084:	483e      	ldr	r0, [pc, #248]	; (800e180 <tcp_pcb_remove+0x114>)
 800e086:	f008 f94f 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d106      	bne.n	800e09e <tcp_pcb_remove+0x32>
 800e090:	4b39      	ldr	r3, [pc, #228]	; (800e178 <tcp_pcb_remove+0x10c>)
 800e092:	f640 0284 	movw	r2, #2180	; 0x884
 800e096:	493b      	ldr	r1, [pc, #236]	; (800e184 <tcp_pcb_remove+0x118>)
 800e098:	4839      	ldr	r0, [pc, #228]	; (800e180 <tcp_pcb_remove+0x114>)
 800e09a:	f008 f945 	bl	8016328 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d105      	bne.n	800e0b4 <tcp_pcb_remove+0x48>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	68da      	ldr	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	e013      	b.n	800e0dc <tcp_pcb_remove+0x70>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	e00c      	b.n	800e0d6 <tcp_pcb_remove+0x6a>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d104      	bne.n	800e0d0 <tcp_pcb_remove+0x64>
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	60da      	str	r2, [r3, #12]
 800e0ce:	e005      	b.n	800e0dc <tcp_pcb_remove+0x70>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1ef      	bne.n	800e0bc <tcp_pcb_remove+0x50>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e0e2:	6838      	ldr	r0, [r7, #0]
 800e0e4:	f7ff ff72 	bl	800dfcc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	7d1b      	ldrb	r3, [r3, #20]
 800e0ec:	2b0a      	cmp	r3, #10
 800e0ee:	d013      	beq.n	800e118 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d00f      	beq.n	800e118 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	8b5b      	ldrh	r3, [r3, #26]
 800e0fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e100:	2b00      	cmp	r3, #0
 800e102:	d009      	beq.n	800e118 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	8b5b      	ldrh	r3, [r3, #26]
 800e108:	f043 0302 	orr.w	r3, r3, #2
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e112:	6838      	ldr	r0, [r7, #0]
 800e114:	f003 fbc6 	bl	80118a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	7d1b      	ldrb	r3, [r3, #20]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d020      	beq.n	800e162 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <tcp_pcb_remove+0xca>
 800e128:	4b13      	ldr	r3, [pc, #76]	; (800e178 <tcp_pcb_remove+0x10c>)
 800e12a:	f640 0293 	movw	r2, #2195	; 0x893
 800e12e:	4916      	ldr	r1, [pc, #88]	; (800e188 <tcp_pcb_remove+0x11c>)
 800e130:	4813      	ldr	r0, [pc, #76]	; (800e180 <tcp_pcb_remove+0x114>)
 800e132:	f008 f8f9 	bl	8016328 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d006      	beq.n	800e14c <tcp_pcb_remove+0xe0>
 800e13e:	4b0e      	ldr	r3, [pc, #56]	; (800e178 <tcp_pcb_remove+0x10c>)
 800e140:	f640 0294 	movw	r2, #2196	; 0x894
 800e144:	4911      	ldr	r1, [pc, #68]	; (800e18c <tcp_pcb_remove+0x120>)
 800e146:	480e      	ldr	r0, [pc, #56]	; (800e180 <tcp_pcb_remove+0x114>)
 800e148:	f008 f8ee 	bl	8016328 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <tcp_pcb_remove+0xf6>
 800e154:	4b08      	ldr	r3, [pc, #32]	; (800e178 <tcp_pcb_remove+0x10c>)
 800e156:	f640 0296 	movw	r2, #2198	; 0x896
 800e15a:	490d      	ldr	r1, [pc, #52]	; (800e190 <tcp_pcb_remove+0x124>)
 800e15c:	4808      	ldr	r0, [pc, #32]	; (800e180 <tcp_pcb_remove+0x114>)
 800e15e:	f008 f8e3 	bl	8016328 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	2200      	movs	r2, #0
 800e166:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	08019210 	.word	0x08019210
 800e17c:	08019878 	.word	0x08019878
 800e180:	08019254 	.word	0x08019254
 800e184:	08019894 	.word	0x08019894
 800e188:	080198b4 	.word	0x080198b4
 800e18c:	080198cc 	.word	0x080198cc
 800e190:	080198e8 	.word	0x080198e8

0800e194 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <tcp_next_iss+0x1c>
 800e1a2:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <tcp_next_iss+0x38>)
 800e1a4:	f640 02af 	movw	r2, #2223	; 0x8af
 800e1a8:	4909      	ldr	r1, [pc, #36]	; (800e1d0 <tcp_next_iss+0x3c>)
 800e1aa:	480a      	ldr	r0, [pc, #40]	; (800e1d4 <tcp_next_iss+0x40>)
 800e1ac:	f008 f8bc 	bl	8016328 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e1b0:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <tcp_next_iss+0x44>)
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <tcp_next_iss+0x48>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	4a07      	ldr	r2, [pc, #28]	; (800e1d8 <tcp_next_iss+0x44>)
 800e1bc:	6013      	str	r3, [r2, #0]
  return iss;
 800e1be:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <tcp_next_iss+0x44>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08019210 	.word	0x08019210
 800e1d0:	08019900 	.word	0x08019900
 800e1d4:	08019254 	.word	0x08019254
 800e1d8:	20000028 	.word	0x20000028
 800e1dc:	2000c7f8 	.word	0x2000c7f8

0800e1e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
 800e1ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d106      	bne.n	800e202 <tcp_eff_send_mss_netif+0x22>
 800e1f4:	4b14      	ldr	r3, [pc, #80]	; (800e248 <tcp_eff_send_mss_netif+0x68>)
 800e1f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e1fa:	4914      	ldr	r1, [pc, #80]	; (800e24c <tcp_eff_send_mss_netif+0x6c>)
 800e1fc:	4814      	ldr	r0, [pc, #80]	; (800e250 <tcp_eff_send_mss_netif+0x70>)
 800e1fe:	f008 f893 	bl	8016328 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e208:	89fb      	ldrh	r3, [r7, #14]
 800e20a:	e019      	b.n	800e240 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e210:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e212:	8afb      	ldrh	r3, [r7, #22]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d012      	beq.n	800e23e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e218:	2328      	movs	r3, #40	; 0x28
 800e21a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e21c:	8afa      	ldrh	r2, [r7, #22]
 800e21e:	8abb      	ldrh	r3, [r7, #20]
 800e220:	429a      	cmp	r2, r3
 800e222:	d904      	bls.n	800e22e <tcp_eff_send_mss_netif+0x4e>
 800e224:	8afa      	ldrh	r2, [r7, #22]
 800e226:	8abb      	ldrh	r3, [r7, #20]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	e000      	b.n	800e230 <tcp_eff_send_mss_netif+0x50>
 800e22e:	2300      	movs	r3, #0
 800e230:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e232:	8a7a      	ldrh	r2, [r7, #18]
 800e234:	89fb      	ldrh	r3, [r7, #14]
 800e236:	4293      	cmp	r3, r2
 800e238:	bf28      	it	cs
 800e23a:	4613      	movcs	r3, r2
 800e23c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e23e:	89fb      	ldrh	r3, [r7, #14]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	08019210 	.word	0x08019210
 800e24c:	0801991c 	.word	0x0801991c
 800e250:	08019254 	.word	0x08019254

0800e254 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d119      	bne.n	800e29c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e268:	4b10      	ldr	r3, [pc, #64]	; (800e2ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e26a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e26e:	4910      	ldr	r1, [pc, #64]	; (800e2b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e270:	4810      	ldr	r0, [pc, #64]	; (800e2b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e272:	f008 f859 	bl	8016328 <iprintf>

  while (pcb != NULL) {
 800e276:	e011      	b.n	800e29c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	429a      	cmp	r2, r3
 800e282:	d108      	bne.n	800e296 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7fe fd9a 	bl	800cdc4 <tcp_abort>
      pcb = next;
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	e002      	b.n	800e29c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1ea      	bne.n	800e278 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	08019210 	.word	0x08019210
 800e2b0:	08019944 	.word	0x08019944
 800e2b4:	08019254 	.word	0x08019254

0800e2b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d02a      	beq.n	800e31e <tcp_netif_ip_addr_changed+0x66>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d026      	beq.n	800e31e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e2d0:	4b15      	ldr	r3, [pc, #84]	; (800e328 <tcp_netif_ip_addr_changed+0x70>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff ffbc 	bl	800e254 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e2dc:	4b13      	ldr	r3, [pc, #76]	; (800e32c <tcp_netif_ip_addr_changed+0x74>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7ff ffb6 	bl	800e254 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d017      	beq.n	800e31e <tcp_netif_ip_addr_changed+0x66>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d013      	beq.n	800e31e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2f6:	4b0e      	ldr	r3, [pc, #56]	; (800e330 <tcp_netif_ip_addr_changed+0x78>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	e00c      	b.n	800e318 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d103      	bne.n	800e312 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1ef      	bne.n	800e2fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e31e:	bf00      	nop
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2000c804 	.word	0x2000c804
 800e32c:	2000c7fc 	.word	0x2000c7fc
 800e330:	2000c800 	.word	0x2000c800

0800e334 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e340:	2b00      	cmp	r3, #0
 800e342:	d007      	beq.n	800e354 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff fb6f 	bl	800da2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e354:	bf00      	nop
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e35c:	b590      	push	{r4, r7, lr}
 800e35e:	b08d      	sub	sp, #52	; 0x34
 800e360:	af04      	add	r7, sp, #16
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d105      	bne.n	800e378 <tcp_input+0x1c>
 800e36c:	4b9b      	ldr	r3, [pc, #620]	; (800e5dc <tcp_input+0x280>)
 800e36e:	2283      	movs	r2, #131	; 0x83
 800e370:	499b      	ldr	r1, [pc, #620]	; (800e5e0 <tcp_input+0x284>)
 800e372:	489c      	ldr	r0, [pc, #624]	; (800e5e4 <tcp_input+0x288>)
 800e374:	f007 ffd8 	bl	8016328 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	4a9a      	ldr	r2, [pc, #616]	; (800e5e8 <tcp_input+0x28c>)
 800e37e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	895b      	ldrh	r3, [r3, #10]
 800e384:	2b13      	cmp	r3, #19
 800e386:	f240 83d1 	bls.w	800eb2c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e38a:	4b98      	ldr	r3, [pc, #608]	; (800e5ec <tcp_input+0x290>)
 800e38c:	695b      	ldr	r3, [r3, #20]
 800e38e:	4a97      	ldr	r2, [pc, #604]	; (800e5ec <tcp_input+0x290>)
 800e390:	6812      	ldr	r2, [r2, #0]
 800e392:	4611      	mov	r1, r2
 800e394:	4618      	mov	r0, r3
 800e396:	f006 fc65 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f040 83c7 	bne.w	800eb30 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e3a2:	4b92      	ldr	r3, [pc, #584]	; (800e5ec <tcp_input+0x290>)
 800e3a4:	695b      	ldr	r3, [r3, #20]
 800e3a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e3aa:	2be0      	cmp	r3, #224	; 0xe0
 800e3ac:	f000 83c0 	beq.w	800eb30 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e3b0:	4b8d      	ldr	r3, [pc, #564]	; (800e5e8 <tcp_input+0x28c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	899b      	ldrh	r3, [r3, #12]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fc fb11 	bl	800a9e0 <lwip_htons>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	0b1b      	lsrs	r3, r3, #12
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e3ca:	7cbb      	ldrb	r3, [r7, #18]
 800e3cc:	2b13      	cmp	r3, #19
 800e3ce:	f240 83b1 	bls.w	800eb34 <tcp_input+0x7d8>
 800e3d2:	7cbb      	ldrb	r3, [r7, #18]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	891b      	ldrh	r3, [r3, #8]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	f200 83aa 	bhi.w	800eb34 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e3e0:	7cbb      	ldrb	r3, [r7, #18]
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3b14      	subs	r3, #20
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	4b81      	ldr	r3, [pc, #516]	; (800e5f0 <tcp_input+0x294>)
 800e3ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e3ec:	4b81      	ldr	r3, [pc, #516]	; (800e5f4 <tcp_input+0x298>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	895a      	ldrh	r2, [r3, #10]
 800e3f6:	7cbb      	ldrb	r3, [r7, #18]
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d309      	bcc.n	800e412 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e3fe:	4b7c      	ldr	r3, [pc, #496]	; (800e5f0 <tcp_input+0x294>)
 800e400:	881a      	ldrh	r2, [r3, #0]
 800e402:	4b7d      	ldr	r3, [pc, #500]	; (800e5f8 <tcp_input+0x29c>)
 800e404:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e406:	7cbb      	ldrb	r3, [r7, #18]
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7fd fe54 	bl	800c0b8 <pbuf_remove_header>
 800e410:	e04e      	b.n	800e4b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d105      	bne.n	800e426 <tcp_input+0xca>
 800e41a:	4b70      	ldr	r3, [pc, #448]	; (800e5dc <tcp_input+0x280>)
 800e41c:	22c2      	movs	r2, #194	; 0xc2
 800e41e:	4977      	ldr	r1, [pc, #476]	; (800e5fc <tcp_input+0x2a0>)
 800e420:	4870      	ldr	r0, [pc, #448]	; (800e5e4 <tcp_input+0x288>)
 800e422:	f007 ff81 	bl	8016328 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e426:	2114      	movs	r1, #20
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7fd fe45 	bl	800c0b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	895a      	ldrh	r2, [r3, #10]
 800e432:	4b71      	ldr	r3, [pc, #452]	; (800e5f8 <tcp_input+0x29c>)
 800e434:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e436:	4b6e      	ldr	r3, [pc, #440]	; (800e5f0 <tcp_input+0x294>)
 800e438:	881a      	ldrh	r2, [r3, #0]
 800e43a:	4b6f      	ldr	r3, [pc, #444]	; (800e5f8 <tcp_input+0x29c>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e442:	4b6d      	ldr	r3, [pc, #436]	; (800e5f8 <tcp_input+0x29c>)
 800e444:	881b      	ldrh	r3, [r3, #0]
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7fd fe35 	bl	800c0b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	895b      	ldrh	r3, [r3, #10]
 800e454:	8a3a      	ldrh	r2, [r7, #16]
 800e456:	429a      	cmp	r2, r3
 800e458:	f200 836e 	bhi.w	800eb38 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	4a64      	ldr	r2, [pc, #400]	; (800e5f4 <tcp_input+0x298>)
 800e464:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	8a3a      	ldrh	r2, [r7, #16]
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fd fe22 	bl	800c0b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	891a      	ldrh	r2, [r3, #8]
 800e478:	8a3b      	ldrh	r3, [r7, #16]
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	895b      	ldrh	r3, [r3, #10]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d005      	beq.n	800e496 <tcp_input+0x13a>
 800e48a:	4b54      	ldr	r3, [pc, #336]	; (800e5dc <tcp_input+0x280>)
 800e48c:	22df      	movs	r2, #223	; 0xdf
 800e48e:	495c      	ldr	r1, [pc, #368]	; (800e600 <tcp_input+0x2a4>)
 800e490:	4854      	ldr	r0, [pc, #336]	; (800e5e4 <tcp_input+0x288>)
 800e492:	f007 ff49 	bl	8016328 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	891a      	ldrh	r2, [r3, #8]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	891b      	ldrh	r3, [r3, #8]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d005      	beq.n	800e4b0 <tcp_input+0x154>
 800e4a4:	4b4d      	ldr	r3, [pc, #308]	; (800e5dc <tcp_input+0x280>)
 800e4a6:	22e0      	movs	r2, #224	; 0xe0
 800e4a8:	4956      	ldr	r1, [pc, #344]	; (800e604 <tcp_input+0x2a8>)
 800e4aa:	484e      	ldr	r0, [pc, #312]	; (800e5e4 <tcp_input+0x288>)
 800e4ac:	f007 ff3c 	bl	8016328 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e4b0:	4b4d      	ldr	r3, [pc, #308]	; (800e5e8 <tcp_input+0x28c>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	881b      	ldrh	r3, [r3, #0]
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	4a4b      	ldr	r2, [pc, #300]	; (800e5e8 <tcp_input+0x28c>)
 800e4ba:	6814      	ldr	r4, [r2, #0]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fc fa8f 	bl	800a9e0 <lwip_htons>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e4c6:	4b48      	ldr	r3, [pc, #288]	; (800e5e8 <tcp_input+0x28c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	885b      	ldrh	r3, [r3, #2]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	4a46      	ldr	r2, [pc, #280]	; (800e5e8 <tcp_input+0x28c>)
 800e4d0:	6814      	ldr	r4, [r2, #0]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fc fa84 	bl	800a9e0 <lwip_htons>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e4dc:	4b42      	ldr	r3, [pc, #264]	; (800e5e8 <tcp_input+0x28c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	4a41      	ldr	r2, [pc, #260]	; (800e5e8 <tcp_input+0x28c>)
 800e4e4:	6814      	ldr	r4, [r2, #0]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc fa8f 	bl	800aa0a <lwip_htonl>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	6863      	ldr	r3, [r4, #4]
 800e4f2:	4a45      	ldr	r2, [pc, #276]	; (800e608 <tcp_input+0x2ac>)
 800e4f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e4f6:	4b3c      	ldr	r3, [pc, #240]	; (800e5e8 <tcp_input+0x28c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	4a3a      	ldr	r2, [pc, #232]	; (800e5e8 <tcp_input+0x28c>)
 800e4fe:	6814      	ldr	r4, [r2, #0]
 800e500:	4618      	mov	r0, r3
 800e502:	f7fc fa82 	bl	800aa0a <lwip_htonl>
 800e506:	4603      	mov	r3, r0
 800e508:	60a3      	str	r3, [r4, #8]
 800e50a:	68a3      	ldr	r3, [r4, #8]
 800e50c:	4a3f      	ldr	r2, [pc, #252]	; (800e60c <tcp_input+0x2b0>)
 800e50e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e510:	4b35      	ldr	r3, [pc, #212]	; (800e5e8 <tcp_input+0x28c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	89db      	ldrh	r3, [r3, #14]
 800e516:	b29b      	uxth	r3, r3
 800e518:	4a33      	ldr	r2, [pc, #204]	; (800e5e8 <tcp_input+0x28c>)
 800e51a:	6814      	ldr	r4, [r2, #0]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fc fa5f 	bl	800a9e0 <lwip_htons>
 800e522:	4603      	mov	r3, r0
 800e524:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e526:	4b30      	ldr	r3, [pc, #192]	; (800e5e8 <tcp_input+0x28c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	899b      	ldrh	r3, [r3, #12]
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fc fa56 	bl	800a9e0 <lwip_htons>
 800e534:	4603      	mov	r3, r0
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	4b34      	ldr	r3, [pc, #208]	; (800e610 <tcp_input+0x2b4>)
 800e540:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	891a      	ldrh	r2, [r3, #8]
 800e546:	4b33      	ldr	r3, [pc, #204]	; (800e614 <tcp_input+0x2b8>)
 800e548:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e54a:	4b31      	ldr	r3, [pc, #196]	; (800e610 <tcp_input+0x2b4>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	f003 0303 	and.w	r3, r3, #3
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00c      	beq.n	800e570 <tcp_input+0x214>
    tcplen++;
 800e556:	4b2f      	ldr	r3, [pc, #188]	; (800e614 <tcp_input+0x2b8>)
 800e558:	881b      	ldrh	r3, [r3, #0]
 800e55a:	3301      	adds	r3, #1
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	4b2d      	ldr	r3, [pc, #180]	; (800e614 <tcp_input+0x2b8>)
 800e560:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	891a      	ldrh	r2, [r3, #8]
 800e566:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <tcp_input+0x2b8>)
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	f200 82e6 	bhi.w	800eb3c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e574:	4b28      	ldr	r3, [pc, #160]	; (800e618 <tcp_input+0x2bc>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	e09d      	b.n	800e6b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	7d1b      	ldrb	r3, [r3, #20]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d105      	bne.n	800e590 <tcp_input+0x234>
 800e584:	4b15      	ldr	r3, [pc, #84]	; (800e5dc <tcp_input+0x280>)
 800e586:	22fb      	movs	r2, #251	; 0xfb
 800e588:	4924      	ldr	r1, [pc, #144]	; (800e61c <tcp_input+0x2c0>)
 800e58a:	4816      	ldr	r0, [pc, #88]	; (800e5e4 <tcp_input+0x288>)
 800e58c:	f007 fecc 	bl	8016328 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	7d1b      	ldrb	r3, [r3, #20]
 800e594:	2b0a      	cmp	r3, #10
 800e596:	d105      	bne.n	800e5a4 <tcp_input+0x248>
 800e598:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <tcp_input+0x280>)
 800e59a:	22fc      	movs	r2, #252	; 0xfc
 800e59c:	4920      	ldr	r1, [pc, #128]	; (800e620 <tcp_input+0x2c4>)
 800e59e:	4811      	ldr	r0, [pc, #68]	; (800e5e4 <tcp_input+0x288>)
 800e5a0:	f007 fec2 	bl	8016328 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	7d1b      	ldrb	r3, [r3, #20]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d105      	bne.n	800e5b8 <tcp_input+0x25c>
 800e5ac:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <tcp_input+0x280>)
 800e5ae:	22fd      	movs	r2, #253	; 0xfd
 800e5b0:	491c      	ldr	r1, [pc, #112]	; (800e624 <tcp_input+0x2c8>)
 800e5b2:	480c      	ldr	r0, [pc, #48]	; (800e5e4 <tcp_input+0x288>)
 800e5b4:	f007 feb8 	bl	8016328 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	7a1b      	ldrb	r3, [r3, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d033      	beq.n	800e628 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	7a1a      	ldrb	r2, [r3, #8]
 800e5c4:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <tcp_input+0x290>)
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d029      	beq.n	800e628 <tcp_input+0x2cc>
      prev = pcb;
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	61bb      	str	r3, [r7, #24]
      continue;
 800e5d8:	e06b      	b.n	800e6b2 <tcp_input+0x356>
 800e5da:	bf00      	nop
 800e5dc:	08019978 	.word	0x08019978
 800e5e0:	080199ac 	.word	0x080199ac
 800e5e4:	080199c4 	.word	0x080199c4
 800e5e8:	2000c820 	.word	0x2000c820
 800e5ec:	200090a4 	.word	0x200090a4
 800e5f0:	2000c824 	.word	0x2000c824
 800e5f4:	2000c828 	.word	0x2000c828
 800e5f8:	2000c826 	.word	0x2000c826
 800e5fc:	080199ec 	.word	0x080199ec
 800e600:	080199fc 	.word	0x080199fc
 800e604:	08019a08 	.word	0x08019a08
 800e608:	2000c830 	.word	0x2000c830
 800e60c:	2000c834 	.word	0x2000c834
 800e610:	2000c83c 	.word	0x2000c83c
 800e614:	2000c83a 	.word	0x2000c83a
 800e618:	2000c804 	.word	0x2000c804
 800e61c:	08019a28 	.word	0x08019a28
 800e620:	08019a50 	.word	0x08019a50
 800e624:	08019a7c 	.word	0x08019a7c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	8b1a      	ldrh	r2, [r3, #24]
 800e62c:	4b72      	ldr	r3, [pc, #456]	; (800e7f8 <tcp_input+0x49c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	b29b      	uxth	r3, r3
 800e634:	429a      	cmp	r2, r3
 800e636:	d13a      	bne.n	800e6ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	8ada      	ldrh	r2, [r3, #22]
 800e63c:	4b6e      	ldr	r3, [pc, #440]	; (800e7f8 <tcp_input+0x49c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	885b      	ldrh	r3, [r3, #2]
 800e642:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e644:	429a      	cmp	r2, r3
 800e646:	d132      	bne.n	800e6ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	4b6b      	ldr	r3, [pc, #428]	; (800e7fc <tcp_input+0x4a0>)
 800e64e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e650:	429a      	cmp	r2, r3
 800e652:	d12c      	bne.n	800e6ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	4b68      	ldr	r3, [pc, #416]	; (800e7fc <tcp_input+0x4a0>)
 800e65a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d126      	bne.n	800e6ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	69fa      	ldr	r2, [r7, #28]
 800e666:	429a      	cmp	r2, r3
 800e668:	d106      	bne.n	800e678 <tcp_input+0x31c>
 800e66a:	4b65      	ldr	r3, [pc, #404]	; (800e800 <tcp_input+0x4a4>)
 800e66c:	f240 120d 	movw	r2, #269	; 0x10d
 800e670:	4964      	ldr	r1, [pc, #400]	; (800e804 <tcp_input+0x4a8>)
 800e672:	4865      	ldr	r0, [pc, #404]	; (800e808 <tcp_input+0x4ac>)
 800e674:	f007 fe58 	bl	8016328 <iprintf>
      if (prev != NULL) {
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00a      	beq.n	800e694 <tcp_input+0x338>
        prev->next = pcb->next;
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	68da      	ldr	r2, [r3, #12]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e686:	4b61      	ldr	r3, [pc, #388]	; (800e80c <tcp_input+0x4b0>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e68e:	4a5f      	ldr	r2, [pc, #380]	; (800e80c <tcp_input+0x4b0>)
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	69fa      	ldr	r2, [r7, #28]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d111      	bne.n	800e6c2 <tcp_input+0x366>
 800e69e:	4b58      	ldr	r3, [pc, #352]	; (800e800 <tcp_input+0x4a4>)
 800e6a0:	f240 1215 	movw	r2, #277	; 0x115
 800e6a4:	495a      	ldr	r1, [pc, #360]	; (800e810 <tcp_input+0x4b4>)
 800e6a6:	4858      	ldr	r0, [pc, #352]	; (800e808 <tcp_input+0x4ac>)
 800e6a8:	f007 fe3e 	bl	8016328 <iprintf>
      break;
 800e6ac:	e009      	b.n	800e6c2 <tcp_input+0x366>
    }
    prev = pcb;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	61fb      	str	r3, [r7, #28]
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f47f af5e 	bne.w	800e57c <tcp_input+0x220>
 800e6c0:	e000      	b.n	800e6c4 <tcp_input+0x368>
      break;
 800e6c2:	bf00      	nop
  }

  if (pcb == NULL) {
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f040 80aa 	bne.w	800e820 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6cc:	4b51      	ldr	r3, [pc, #324]	; (800e814 <tcp_input+0x4b8>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	61fb      	str	r3, [r7, #28]
 800e6d2:	e03f      	b.n	800e754 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	7d1b      	ldrb	r3, [r3, #20]
 800e6d8:	2b0a      	cmp	r3, #10
 800e6da:	d006      	beq.n	800e6ea <tcp_input+0x38e>
 800e6dc:	4b48      	ldr	r3, [pc, #288]	; (800e800 <tcp_input+0x4a4>)
 800e6de:	f240 121f 	movw	r2, #287	; 0x11f
 800e6e2:	494d      	ldr	r1, [pc, #308]	; (800e818 <tcp_input+0x4bc>)
 800e6e4:	4848      	ldr	r0, [pc, #288]	; (800e808 <tcp_input+0x4ac>)
 800e6e6:	f007 fe1f 	bl	8016328 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	7a1b      	ldrb	r3, [r3, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d009      	beq.n	800e706 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	7a1a      	ldrb	r2, [r3, #8]
 800e6f6:	4b41      	ldr	r3, [pc, #260]	; (800e7fc <tcp_input+0x4a0>)
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6fe:	3301      	adds	r3, #1
 800e700:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e702:	429a      	cmp	r2, r3
 800e704:	d122      	bne.n	800e74c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	8b1a      	ldrh	r2, [r3, #24]
 800e70a:	4b3b      	ldr	r3, [pc, #236]	; (800e7f8 <tcp_input+0x49c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	b29b      	uxth	r3, r3
 800e712:	429a      	cmp	r2, r3
 800e714:	d11b      	bne.n	800e74e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	8ada      	ldrh	r2, [r3, #22]
 800e71a:	4b37      	ldr	r3, [pc, #220]	; (800e7f8 <tcp_input+0x49c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	885b      	ldrh	r3, [r3, #2]
 800e720:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e722:	429a      	cmp	r2, r3
 800e724:	d113      	bne.n	800e74e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	4b34      	ldr	r3, [pc, #208]	; (800e7fc <tcp_input+0x4a0>)
 800e72c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e72e:	429a      	cmp	r2, r3
 800e730:	d10d      	bne.n	800e74e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	4b31      	ldr	r3, [pc, #196]	; (800e7fc <tcp_input+0x4a0>)
 800e738:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d107      	bne.n	800e74e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e73e:	69f8      	ldr	r0, [r7, #28]
 800e740:	f000 fb56 	bl	800edf0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7fd fd3d 	bl	800c1c4 <pbuf_free>
        return;
 800e74a:	e1fd      	b.n	800eb48 <tcp_input+0x7ec>
        continue;
 800e74c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	61fb      	str	r3, [r7, #28]
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1bc      	bne.n	800e6d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e75e:	4b2f      	ldr	r3, [pc, #188]	; (800e81c <tcp_input+0x4c0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	617b      	str	r3, [r7, #20]
 800e764:	e02a      	b.n	800e7bc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	7a1b      	ldrb	r3, [r3, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00c      	beq.n	800e788 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	7a1a      	ldrb	r2, [r3, #8]
 800e772:	4b22      	ldr	r3, [pc, #136]	; (800e7fc <tcp_input+0x4a0>)
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e77a:	3301      	adds	r3, #1
 800e77c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e77e:	429a      	cmp	r2, r3
 800e780:	d002      	beq.n	800e788 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	61bb      	str	r3, [r7, #24]
        continue;
 800e786:	e016      	b.n	800e7b6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	8ada      	ldrh	r2, [r3, #22]
 800e78c:	4b1a      	ldr	r3, [pc, #104]	; (800e7f8 <tcp_input+0x49c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	885b      	ldrh	r3, [r3, #2]
 800e792:	b29b      	uxth	r3, r3
 800e794:	429a      	cmp	r2, r3
 800e796:	d10c      	bne.n	800e7b2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <tcp_input+0x4a0>)
 800e79e:	695b      	ldr	r3, [r3, #20]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d00f      	beq.n	800e7c4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00d      	beq.n	800e7c6 <tcp_input+0x46a>
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d009      	beq.n	800e7c6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	617b      	str	r3, [r7, #20]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1d1      	bne.n	800e766 <tcp_input+0x40a>
 800e7c2:	e000      	b.n	800e7c6 <tcp_input+0x46a>
            break;
 800e7c4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d029      	beq.n	800e820 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00a      	beq.n	800e7e8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	68da      	ldr	r2, [r3, #12]
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e7da:	4b10      	ldr	r3, [pc, #64]	; (800e81c <tcp_input+0x4c0>)
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e7e2:	4a0e      	ldr	r2, [pc, #56]	; (800e81c <tcp_input+0x4c0>)
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e7e8:	6978      	ldr	r0, [r7, #20]
 800e7ea:	f000 fa03 	bl	800ebf4 <tcp_listen_input>
      }
      pbuf_free(p);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7fd fce8 	bl	800c1c4 <pbuf_free>
      return;
 800e7f4:	e1a8      	b.n	800eb48 <tcp_input+0x7ec>
 800e7f6:	bf00      	nop
 800e7f8:	2000c820 	.word	0x2000c820
 800e7fc:	200090a4 	.word	0x200090a4
 800e800:	08019978 	.word	0x08019978
 800e804:	08019aa4 	.word	0x08019aa4
 800e808:	080199c4 	.word	0x080199c4
 800e80c:	2000c804 	.word	0x2000c804
 800e810:	08019ad0 	.word	0x08019ad0
 800e814:	2000c808 	.word	0x2000c808
 800e818:	08019afc 	.word	0x08019afc
 800e81c:	2000c800 	.word	0x2000c800
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 8158 	beq.w	800ead8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e828:	4b95      	ldr	r3, [pc, #596]	; (800ea80 <tcp_input+0x724>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	891a      	ldrh	r2, [r3, #8]
 800e832:	4b93      	ldr	r3, [pc, #588]	; (800ea80 <tcp_input+0x724>)
 800e834:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e836:	4a92      	ldr	r2, [pc, #584]	; (800ea80 <tcp_input+0x724>)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e83c:	4b91      	ldr	r3, [pc, #580]	; (800ea84 <tcp_input+0x728>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a8f      	ldr	r2, [pc, #572]	; (800ea80 <tcp_input+0x724>)
 800e842:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e844:	4b90      	ldr	r3, [pc, #576]	; (800ea88 <tcp_input+0x72c>)
 800e846:	2200      	movs	r2, #0
 800e848:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e84a:	4b90      	ldr	r3, [pc, #576]	; (800ea8c <tcp_input+0x730>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e850:	4b8f      	ldr	r3, [pc, #572]	; (800ea90 <tcp_input+0x734>)
 800e852:	2200      	movs	r2, #0
 800e854:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e856:	4b8f      	ldr	r3, [pc, #572]	; (800ea94 <tcp_input+0x738>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f003 0308 	and.w	r3, r3, #8
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d006      	beq.n	800e870 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	7b5b      	ldrb	r3, [r3, #13]
 800e866:	f043 0301 	orr.w	r3, r3, #1
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e874:	2b00      	cmp	r3, #0
 800e876:	d017      	beq.n	800e8a8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e878:	69f8      	ldr	r0, [r7, #28]
 800e87a:	f7ff f85b 	bl	800d934 <tcp_process_refused_data>
 800e87e:	4603      	mov	r3, r0
 800e880:	f113 0f0d 	cmn.w	r3, #13
 800e884:	d007      	beq.n	800e896 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00c      	beq.n	800e8a8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e88e:	4b82      	ldr	r3, [pc, #520]	; (800ea98 <tcp_input+0x73c>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d008      	beq.n	800e8a8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f040 80e3 	bne.w	800ea66 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e8a0:	69f8      	ldr	r0, [r7, #28]
 800e8a2:	f003 fe05 	bl	80124b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e8a6:	e0de      	b.n	800ea66 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e8a8:	4a7c      	ldr	r2, [pc, #496]	; (800ea9c <tcp_input+0x740>)
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e8ae:	69f8      	ldr	r0, [r7, #28]
 800e8b0:	f000 fb18 	bl	800eee4 <tcp_process>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e8b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8bc:	f113 0f0d 	cmn.w	r3, #13
 800e8c0:	f000 80d3 	beq.w	800ea6a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e8c4:	4b71      	ldr	r3, [pc, #452]	; (800ea8c <tcp_input+0x730>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	f003 0308 	and.w	r3, r3, #8
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d015      	beq.n	800e8fc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d008      	beq.n	800e8ec <tcp_input+0x590>
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	6912      	ldr	r2, [r2, #16]
 800e8e4:	f06f 010d 	mvn.w	r1, #13
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8ec:	69f9      	ldr	r1, [r7, #28]
 800e8ee:	486c      	ldr	r0, [pc, #432]	; (800eaa0 <tcp_input+0x744>)
 800e8f0:	f7ff fbbc 	bl	800e06c <tcp_pcb_remove>
        tcp_free(pcb);
 800e8f4:	69f8      	ldr	r0, [r7, #28]
 800e8f6:	f7fd ff21 	bl	800c73c <tcp_free>
 800e8fa:	e0da      	b.n	800eab2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e900:	4b63      	ldr	r3, [pc, #396]	; (800ea90 <tcp_input+0x734>)
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d01d      	beq.n	800e944 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e908:	4b61      	ldr	r3, [pc, #388]	; (800ea90 <tcp_input+0x734>)
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00a      	beq.n	800e92e <tcp_input+0x5d2>
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e91e:	69fa      	ldr	r2, [r7, #28]
 800e920:	6910      	ldr	r0, [r2, #16]
 800e922:	89fa      	ldrh	r2, [r7, #14]
 800e924:	69f9      	ldr	r1, [r7, #28]
 800e926:	4798      	blx	r3
 800e928:	4603      	mov	r3, r0
 800e92a:	74fb      	strb	r3, [r7, #19]
 800e92c:	e001      	b.n	800e932 <tcp_input+0x5d6>
 800e92e:	2300      	movs	r3, #0
 800e930:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e932:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e936:	f113 0f0d 	cmn.w	r3, #13
 800e93a:	f000 8098 	beq.w	800ea6e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e93e:	4b54      	ldr	r3, [pc, #336]	; (800ea90 <tcp_input+0x734>)
 800e940:	2200      	movs	r2, #0
 800e942:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e944:	69f8      	ldr	r0, [r7, #28]
 800e946:	f000 f915 	bl	800eb74 <tcp_input_delayed_close>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f040 8090 	bne.w	800ea72 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e952:	4b4d      	ldr	r3, [pc, #308]	; (800ea88 <tcp_input+0x72c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d041      	beq.n	800e9de <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <tcp_input+0x614>
 800e962:	4b50      	ldr	r3, [pc, #320]	; (800eaa4 <tcp_input+0x748>)
 800e964:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e968:	494f      	ldr	r1, [pc, #316]	; (800eaa8 <tcp_input+0x74c>)
 800e96a:	4850      	ldr	r0, [pc, #320]	; (800eaac <tcp_input+0x750>)
 800e96c:	f007 fcdc 	bl	8016328 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	8b5b      	ldrh	r3, [r3, #26]
 800e974:	f003 0310 	and.w	r3, r3, #16
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d008      	beq.n	800e98e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e97c:	4b42      	ldr	r3, [pc, #264]	; (800ea88 <tcp_input+0x72c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4618      	mov	r0, r3
 800e982:	f7fd fc1f 	bl	800c1c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e986:	69f8      	ldr	r0, [r7, #28]
 800e988:	f7fe fa1c 	bl	800cdc4 <tcp_abort>
            goto aborted;
 800e98c:	e091      	b.n	800eab2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00c      	beq.n	800e9b2 <tcp_input+0x656>
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	6918      	ldr	r0, [r3, #16]
 800e9a2:	4b39      	ldr	r3, [pc, #228]	; (800ea88 <tcp_input+0x72c>)
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	69f9      	ldr	r1, [r7, #28]
 800e9aa:	47a0      	blx	r4
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	74fb      	strb	r3, [r7, #19]
 800e9b0:	e008      	b.n	800e9c4 <tcp_input+0x668>
 800e9b2:	4b35      	ldr	r3, [pc, #212]	; (800ea88 <tcp_input+0x72c>)
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	69f9      	ldr	r1, [r7, #28]
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	f7ff f890 	bl	800dae0 <tcp_recv_null>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e9c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9c8:	f113 0f0d 	cmn.w	r3, #13
 800e9cc:	d053      	beq.n	800ea76 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e9ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ea88 <tcp_input+0x72c>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e9de:	4b2b      	ldr	r3, [pc, #172]	; (800ea8c <tcp_input+0x730>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 0320 	and.w	r3, r3, #32
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d030      	beq.n	800ea4c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d009      	beq.n	800ea06 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9f6:	7b5a      	ldrb	r2, [r3, #13]
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9fc:	f042 0220 	orr.w	r2, r2, #32
 800ea00:	b2d2      	uxtb	r2, r2
 800ea02:	735a      	strb	r2, [r3, #13]
 800ea04:	e022      	b.n	800ea4c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea0e:	d005      	beq.n	800ea1c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea14:	3301      	adds	r3, #1
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00b      	beq.n	800ea3e <tcp_input+0x6e2>
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	6918      	ldr	r0, [r3, #16]
 800ea30:	2300      	movs	r3, #0
 800ea32:	2200      	movs	r2, #0
 800ea34:	69f9      	ldr	r1, [r7, #28]
 800ea36:	47a0      	blx	r4
 800ea38:	4603      	mov	r3, r0
 800ea3a:	74fb      	strb	r3, [r7, #19]
 800ea3c:	e001      	b.n	800ea42 <tcp_input+0x6e6>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ea42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea46:	f113 0f0d 	cmn.w	r3, #13
 800ea4a:	d016      	beq.n	800ea7a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ea4c:	4b13      	ldr	r3, [pc, #76]	; (800ea9c <tcp_input+0x740>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ea52:	69f8      	ldr	r0, [r7, #28]
 800ea54:	f000 f88e 	bl	800eb74 <tcp_input_delayed_close>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d128      	bne.n	800eab0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ea5e:	69f8      	ldr	r0, [r7, #28]
 800ea60:	f002 ff20 	bl	80118a4 <tcp_output>
 800ea64:	e025      	b.n	800eab2 <tcp_input+0x756>
        goto aborted;
 800ea66:	bf00      	nop
 800ea68:	e023      	b.n	800eab2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ea6a:	bf00      	nop
 800ea6c:	e021      	b.n	800eab2 <tcp_input+0x756>
              goto aborted;
 800ea6e:	bf00      	nop
 800ea70:	e01f      	b.n	800eab2 <tcp_input+0x756>
          goto aborted;
 800ea72:	bf00      	nop
 800ea74:	e01d      	b.n	800eab2 <tcp_input+0x756>
            goto aborted;
 800ea76:	bf00      	nop
 800ea78:	e01b      	b.n	800eab2 <tcp_input+0x756>
              goto aborted;
 800ea7a:	bf00      	nop
 800ea7c:	e019      	b.n	800eab2 <tcp_input+0x756>
 800ea7e:	bf00      	nop
 800ea80:	2000c810 	.word	0x2000c810
 800ea84:	2000c820 	.word	0x2000c820
 800ea88:	2000c840 	.word	0x2000c840
 800ea8c:	2000c83d 	.word	0x2000c83d
 800ea90:	2000c838 	.word	0x2000c838
 800ea94:	2000c83c 	.word	0x2000c83c
 800ea98:	2000c83a 	.word	0x2000c83a
 800ea9c:	2000c844 	.word	0x2000c844
 800eaa0:	2000c804 	.word	0x2000c804
 800eaa4:	08019978 	.word	0x08019978
 800eaa8:	08019b2c 	.word	0x08019b2c
 800eaac:	080199c4 	.word	0x080199c4
          goto aborted;
 800eab0:	bf00      	nop
    tcp_input_pcb = NULL;
 800eab2:	4b27      	ldr	r3, [pc, #156]	; (800eb50 <tcp_input+0x7f4>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eab8:	4b26      	ldr	r3, [pc, #152]	; (800eb54 <tcp_input+0x7f8>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eabe:	4b26      	ldr	r3, [pc, #152]	; (800eb58 <tcp_input+0x7fc>)
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d03f      	beq.n	800eb46 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800eac6:	4b24      	ldr	r3, [pc, #144]	; (800eb58 <tcp_input+0x7fc>)
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd fb7a 	bl	800c1c4 <pbuf_free>
      inseg.p = NULL;
 800ead0:	4b21      	ldr	r3, [pc, #132]	; (800eb58 <tcp_input+0x7fc>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ead6:	e036      	b.n	800eb46 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ead8:	4b20      	ldr	r3, [pc, #128]	; (800eb5c <tcp_input+0x800>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	899b      	ldrh	r3, [r3, #12]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb ff7d 	bl	800a9e0 <lwip_htons>
 800eae6:	4603      	mov	r3, r0
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0304 	and.w	r3, r3, #4
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d118      	bne.n	800eb24 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaf2:	4b1b      	ldr	r3, [pc, #108]	; (800eb60 <tcp_input+0x804>)
 800eaf4:	6819      	ldr	r1, [r3, #0]
 800eaf6:	4b1b      	ldr	r3, [pc, #108]	; (800eb64 <tcp_input+0x808>)
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	4b1a      	ldr	r3, [pc, #104]	; (800eb68 <tcp_input+0x80c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb02:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <tcp_input+0x800>)
 800eb04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb06:	885b      	ldrh	r3, [r3, #2]
 800eb08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb0a:	4a14      	ldr	r2, [pc, #80]	; (800eb5c <tcp_input+0x800>)
 800eb0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb0e:	8812      	ldrh	r2, [r2, #0]
 800eb10:	b292      	uxth	r2, r2
 800eb12:	9202      	str	r2, [sp, #8]
 800eb14:	9301      	str	r3, [sp, #4]
 800eb16:	4b15      	ldr	r3, [pc, #84]	; (800eb6c <tcp_input+0x810>)
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	4b15      	ldr	r3, [pc, #84]	; (800eb70 <tcp_input+0x814>)
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	2000      	movs	r0, #0
 800eb20:	f003 fc74 	bl	801240c <tcp_rst>
    pbuf_free(p);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7fd fb4d 	bl	800c1c4 <pbuf_free>
  return;
 800eb2a:	e00c      	b.n	800eb46 <tcp_input+0x7ea>
    goto dropped;
 800eb2c:	bf00      	nop
 800eb2e:	e006      	b.n	800eb3e <tcp_input+0x7e2>
    goto dropped;
 800eb30:	bf00      	nop
 800eb32:	e004      	b.n	800eb3e <tcp_input+0x7e2>
    goto dropped;
 800eb34:	bf00      	nop
 800eb36:	e002      	b.n	800eb3e <tcp_input+0x7e2>
      goto dropped;
 800eb38:	bf00      	nop
 800eb3a:	e000      	b.n	800eb3e <tcp_input+0x7e2>
      goto dropped;
 800eb3c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fd fb40 	bl	800c1c4 <pbuf_free>
 800eb44:	e000      	b.n	800eb48 <tcp_input+0x7ec>
  return;
 800eb46:	bf00      	nop
}
 800eb48:	3724      	adds	r7, #36	; 0x24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd90      	pop	{r4, r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	2000c844 	.word	0x2000c844
 800eb54:	2000c840 	.word	0x2000c840
 800eb58:	2000c810 	.word	0x2000c810
 800eb5c:	2000c820 	.word	0x2000c820
 800eb60:	2000c834 	.word	0x2000c834
 800eb64:	2000c83a 	.word	0x2000c83a
 800eb68:	2000c830 	.word	0x2000c830
 800eb6c:	200090b4 	.word	0x200090b4
 800eb70:	200090b8 	.word	0x200090b8

0800eb74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <tcp_input_delayed_close+0x1c>
 800eb82:	4b17      	ldr	r3, [pc, #92]	; (800ebe0 <tcp_input_delayed_close+0x6c>)
 800eb84:	f240 225a 	movw	r2, #602	; 0x25a
 800eb88:	4916      	ldr	r1, [pc, #88]	; (800ebe4 <tcp_input_delayed_close+0x70>)
 800eb8a:	4817      	ldr	r0, [pc, #92]	; (800ebe8 <tcp_input_delayed_close+0x74>)
 800eb8c:	f007 fbcc 	bl	8016328 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eb90:	4b16      	ldr	r3, [pc, #88]	; (800ebec <tcp_input_delayed_close+0x78>)
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01c      	beq.n	800ebd6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	8b5b      	ldrh	r3, [r3, #26]
 800eba0:	f003 0310 	and.w	r3, r3, #16
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10d      	bne.n	800ebc4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d008      	beq.n	800ebc4 <tcp_input_delayed_close+0x50>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	6912      	ldr	r2, [r2, #16]
 800ebbc:	f06f 010e 	mvn.w	r1, #14
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	480a      	ldr	r0, [pc, #40]	; (800ebf0 <tcp_input_delayed_close+0x7c>)
 800ebc8:	f7ff fa50 	bl	800e06c <tcp_pcb_remove>
    tcp_free(pcb);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7fd fdb5 	bl	800c73c <tcp_free>
    return 1;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e000      	b.n	800ebd8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	08019978 	.word	0x08019978
 800ebe4:	08019b48 	.word	0x08019b48
 800ebe8:	080199c4 	.word	0x080199c4
 800ebec:	2000c83d 	.word	0x2000c83d
 800ebf0:	2000c804 	.word	0x2000c804

0800ebf4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b08b      	sub	sp, #44	; 0x2c
 800ebf8:	af04      	add	r7, sp, #16
 800ebfa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ebfc:	4b6f      	ldr	r3, [pc, #444]	; (800edbc <tcp_listen_input+0x1c8>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	f003 0304 	and.w	r3, r3, #4
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f040 80d2 	bne.w	800edae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d106      	bne.n	800ec1e <tcp_listen_input+0x2a>
 800ec10:	4b6b      	ldr	r3, [pc, #428]	; (800edc0 <tcp_listen_input+0x1cc>)
 800ec12:	f240 2281 	movw	r2, #641	; 0x281
 800ec16:	496b      	ldr	r1, [pc, #428]	; (800edc4 <tcp_listen_input+0x1d0>)
 800ec18:	486b      	ldr	r0, [pc, #428]	; (800edc8 <tcp_listen_input+0x1d4>)
 800ec1a:	f007 fb85 	bl	8016328 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ec1e:	4b67      	ldr	r3, [pc, #412]	; (800edbc <tcp_listen_input+0x1c8>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	f003 0310 	and.w	r3, r3, #16
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d019      	beq.n	800ec5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec2a:	4b68      	ldr	r3, [pc, #416]	; (800edcc <tcp_listen_input+0x1d8>)
 800ec2c:	6819      	ldr	r1, [r3, #0]
 800ec2e:	4b68      	ldr	r3, [pc, #416]	; (800edd0 <tcp_listen_input+0x1dc>)
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	461a      	mov	r2, r3
 800ec34:	4b67      	ldr	r3, [pc, #412]	; (800edd4 <tcp_listen_input+0x1e0>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec3a:	4b67      	ldr	r3, [pc, #412]	; (800edd8 <tcp_listen_input+0x1e4>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec3e:	885b      	ldrh	r3, [r3, #2]
 800ec40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec42:	4a65      	ldr	r2, [pc, #404]	; (800edd8 <tcp_listen_input+0x1e4>)
 800ec44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec46:	8812      	ldrh	r2, [r2, #0]
 800ec48:	b292      	uxth	r2, r2
 800ec4a:	9202      	str	r2, [sp, #8]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	4b63      	ldr	r3, [pc, #396]	; (800eddc <tcp_listen_input+0x1e8>)
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4b63      	ldr	r3, [pc, #396]	; (800ede0 <tcp_listen_input+0x1ec>)
 800ec54:	4602      	mov	r2, r0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f003 fbd8 	bl	801240c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ec5c:	e0a9      	b.n	800edb2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ec5e:	4b57      	ldr	r3, [pc, #348]	; (800edbc <tcp_listen_input+0x1c8>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	f003 0302 	and.w	r3, r3, #2
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80a3 	beq.w	800edb2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7d5b      	ldrb	r3, [r3, #21]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7ff f859 	bl	800dd28 <tcp_alloc>
 800ec76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d111      	bne.n	800eca2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00a      	beq.n	800ec9c <tcp_listen_input+0xa8>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	699b      	ldr	r3, [r3, #24]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	6910      	ldr	r0, [r2, #16]
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	2100      	movs	r1, #0
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	73bb      	strb	r3, [r7, #14]
      return;
 800ec9a:	e08b      	b.n	800edb4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec9c:	23f0      	movs	r3, #240	; 0xf0
 800ec9e:	73bb      	strb	r3, [r7, #14]
      return;
 800eca0:	e088      	b.n	800edb4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eca2:	4b50      	ldr	r3, [pc, #320]	; (800ede4 <tcp_listen_input+0x1f0>)
 800eca4:	695a      	ldr	r2, [r3, #20]
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ecaa:	4b4e      	ldr	r3, [pc, #312]	; (800ede4 <tcp_listen_input+0x1f0>)
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	8ada      	ldrh	r2, [r3, #22]
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ecba:	4b47      	ldr	r3, [pc, #284]	; (800edd8 <tcp_listen_input+0x1e4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2203      	movs	r2, #3
 800ecca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eccc:	4b41      	ldr	r3, [pc, #260]	; (800edd4 <tcp_listen_input+0x1e0>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ecde:	6978      	ldr	r0, [r7, #20]
 800ece0:	f7ff fa58 	bl	800e194 <tcp_next_iss>
 800ece4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ecfe:	4b35      	ldr	r3, [pc, #212]	; (800edd4 <tcp_listen_input+0x1e0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	1e5a      	subs	r2, r3, #1
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	691a      	ldr	r2, [r3, #16]
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7a5b      	ldrb	r3, [r3, #9]
 800ed1a:	f003 030c 	and.w	r3, r3, #12
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	7a1a      	ldrb	r2, [r3, #8]
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ed2c:	4b2e      	ldr	r3, [pc, #184]	; (800ede8 <tcp_listen_input+0x1f4>)
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	60da      	str	r2, [r3, #12]
 800ed34:	4a2c      	ldr	r2, [pc, #176]	; (800ede8 <tcp_listen_input+0x1f4>)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	f003 fd29 	bl	8012790 <tcp_timer_needed>
 800ed3e:	4b2b      	ldr	r3, [pc, #172]	; (800edec <tcp_listen_input+0x1f8>)
 800ed40:	2201      	movs	r2, #1
 800ed42:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ed44:	6978      	ldr	r0, [r7, #20]
 800ed46:	f001 fd8f 	bl	8010868 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ed4a:	4b23      	ldr	r3, [pc, #140]	; (800edd8 <tcp_listen_input+0x1e4>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	89db      	ldrh	r3, [r3, #14]
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f005 fce3 	bl	8014738 <ip4_route>
 800ed72:	4601      	mov	r1, r0
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	3304      	adds	r3, #4
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7ff fa30 	bl	800e1e0 <tcp_eff_send_mss_netif>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461a      	mov	r2, r3
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ed88:	2112      	movs	r1, #18
 800ed8a:	6978      	ldr	r0, [r7, #20]
 800ed8c:	f002 fc9c 	bl	80116c8 <tcp_enqueue_flags>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ed94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d004      	beq.n	800eda6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	6978      	ldr	r0, [r7, #20]
 800eda0:	f7fd ff52 	bl	800cc48 <tcp_abandon>
      return;
 800eda4:	e006      	b.n	800edb4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eda6:	6978      	ldr	r0, [r7, #20]
 800eda8:	f002 fd7c 	bl	80118a4 <tcp_output>
  return;
 800edac:	e001      	b.n	800edb2 <tcp_listen_input+0x1be>
    return;
 800edae:	bf00      	nop
 800edb0:	e000      	b.n	800edb4 <tcp_listen_input+0x1c0>
  return;
 800edb2:	bf00      	nop
}
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd90      	pop	{r4, r7, pc}
 800edba:	bf00      	nop
 800edbc:	2000c83c 	.word	0x2000c83c
 800edc0:	08019978 	.word	0x08019978
 800edc4:	08019b70 	.word	0x08019b70
 800edc8:	080199c4 	.word	0x080199c4
 800edcc:	2000c834 	.word	0x2000c834
 800edd0:	2000c83a 	.word	0x2000c83a
 800edd4:	2000c830 	.word	0x2000c830
 800edd8:	2000c820 	.word	0x2000c820
 800eddc:	200090b4 	.word	0x200090b4
 800ede0:	200090b8 	.word	0x200090b8
 800ede4:	200090a4 	.word	0x200090a4
 800ede8:	2000c804 	.word	0x2000c804
 800edec:	2000c80c 	.word	0x2000c80c

0800edf0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af04      	add	r7, sp, #16
 800edf6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800edf8:	4b2f      	ldr	r3, [pc, #188]	; (800eeb8 <tcp_timewait_input+0xc8>)
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	f003 0304 	and.w	r3, r3, #4
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d153      	bne.n	800eeac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <tcp_timewait_input+0x28>
 800ee0a:	4b2c      	ldr	r3, [pc, #176]	; (800eebc <tcp_timewait_input+0xcc>)
 800ee0c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee10:	492b      	ldr	r1, [pc, #172]	; (800eec0 <tcp_timewait_input+0xd0>)
 800ee12:	482c      	ldr	r0, [pc, #176]	; (800eec4 <tcp_timewait_input+0xd4>)
 800ee14:	f007 fa88 	bl	8016328 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee18:	4b27      	ldr	r3, [pc, #156]	; (800eeb8 <tcp_timewait_input+0xc8>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d02a      	beq.n	800ee7a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ee24:	4b28      	ldr	r3, [pc, #160]	; (800eec8 <tcp_timewait_input+0xd8>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	db2d      	blt.n	800ee8e <tcp_timewait_input+0x9e>
 800ee32:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <tcp_timewait_input+0xd8>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3a:	6879      	ldr	r1, [r7, #4]
 800ee3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee3e:	440b      	add	r3, r1
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	dc23      	bgt.n	800ee8e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee46:	4b21      	ldr	r3, [pc, #132]	; (800eecc <tcp_timewait_input+0xdc>)
 800ee48:	6819      	ldr	r1, [r3, #0]
 800ee4a:	4b21      	ldr	r3, [pc, #132]	; (800eed0 <tcp_timewait_input+0xe0>)
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <tcp_timewait_input+0xd8>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee56:	4b1f      	ldr	r3, [pc, #124]	; (800eed4 <tcp_timewait_input+0xe4>)
 800ee58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee5a:	885b      	ldrh	r3, [r3, #2]
 800ee5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee5e:	4a1d      	ldr	r2, [pc, #116]	; (800eed4 <tcp_timewait_input+0xe4>)
 800ee60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee62:	8812      	ldrh	r2, [r2, #0]
 800ee64:	b292      	uxth	r2, r2
 800ee66:	9202      	str	r2, [sp, #8]
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	4b1b      	ldr	r3, [pc, #108]	; (800eed8 <tcp_timewait_input+0xe8>)
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	4b1b      	ldr	r3, [pc, #108]	; (800eedc <tcp_timewait_input+0xec>)
 800ee70:	4602      	mov	r2, r0
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f003 faca 	bl	801240c <tcp_rst>
      return;
 800ee78:	e01b      	b.n	800eeb2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ee7a:	4b0f      	ldr	r3, [pc, #60]	; (800eeb8 <tcp_timewait_input+0xc8>)
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f003 0301 	and.w	r3, r3, #1
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d003      	beq.n	800ee8e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ee86:	4b16      	ldr	r3, [pc, #88]	; (800eee0 <tcp_timewait_input+0xf0>)
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ee8e:	4b10      	ldr	r3, [pc, #64]	; (800eed0 <tcp_timewait_input+0xe0>)
 800ee90:	881b      	ldrh	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00c      	beq.n	800eeb0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8b5b      	ldrh	r3, [r3, #26]
 800ee9a:	f043 0302 	orr.w	r3, r3, #2
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f002 fcfd 	bl	80118a4 <tcp_output>
  }
  return;
 800eeaa:	e001      	b.n	800eeb0 <tcp_timewait_input+0xc0>
    return;
 800eeac:	bf00      	nop
 800eeae:	e000      	b.n	800eeb2 <tcp_timewait_input+0xc2>
  return;
 800eeb0:	bf00      	nop
}
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	2000c83c 	.word	0x2000c83c
 800eebc:	08019978 	.word	0x08019978
 800eec0:	08019b90 	.word	0x08019b90
 800eec4:	080199c4 	.word	0x080199c4
 800eec8:	2000c830 	.word	0x2000c830
 800eecc:	2000c834 	.word	0x2000c834
 800eed0:	2000c83a 	.word	0x2000c83a
 800eed4:	2000c820 	.word	0x2000c820
 800eed8:	200090b4 	.word	0x200090b4
 800eedc:	200090b8 	.word	0x200090b8
 800eee0:	2000c7f8 	.word	0x2000c7f8

0800eee4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b08d      	sub	sp, #52	; 0x34
 800eee8:	af04      	add	r7, sp, #16
 800eeea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d106      	bne.n	800ef08 <tcp_process+0x24>
 800eefa:	4b9d      	ldr	r3, [pc, #628]	; (800f170 <tcp_process+0x28c>)
 800eefc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef00:	499c      	ldr	r1, [pc, #624]	; (800f174 <tcp_process+0x290>)
 800ef02:	489d      	ldr	r0, [pc, #628]	; (800f178 <tcp_process+0x294>)
 800ef04:	f007 fa10 	bl	8016328 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef08:	4b9c      	ldr	r3, [pc, #624]	; (800f17c <tcp_process+0x298>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 0304 	and.w	r3, r3, #4
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d04e      	beq.n	800efb2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	7d1b      	ldrb	r3, [r3, #20]
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d108      	bne.n	800ef2e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef20:	4b97      	ldr	r3, [pc, #604]	; (800f180 <tcp_process+0x29c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d123      	bne.n	800ef70 <tcp_process+0x8c>
        acceptable = 1;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	76fb      	strb	r3, [r7, #27]
 800ef2c:	e020      	b.n	800ef70 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef32:	4b94      	ldr	r3, [pc, #592]	; (800f184 <tcp_process+0x2a0>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d102      	bne.n	800ef40 <tcp_process+0x5c>
        acceptable = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	76fb      	strb	r3, [r7, #27]
 800ef3e:	e017      	b.n	800ef70 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef40:	4b90      	ldr	r3, [pc, #576]	; (800f184 <tcp_process+0x2a0>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	db10      	blt.n	800ef70 <tcp_process+0x8c>
 800ef4e:	4b8d      	ldr	r3, [pc, #564]	; (800f184 <tcp_process+0x2a0>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef5a:	440b      	add	r3, r1
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	dc06      	bgt.n	800ef70 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	8b5b      	ldrh	r3, [r3, #26]
 800ef66:	f043 0302 	orr.w	r3, r3, #2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ef70:	7efb      	ldrb	r3, [r7, #27]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01b      	beq.n	800efae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	7d1b      	ldrb	r3, [r3, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_process+0xa8>
 800ef7e:	4b7c      	ldr	r3, [pc, #496]	; (800f170 <tcp_process+0x28c>)
 800ef80:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ef84:	4980      	ldr	r1, [pc, #512]	; (800f188 <tcp_process+0x2a4>)
 800ef86:	487c      	ldr	r0, [pc, #496]	; (800f178 <tcp_process+0x294>)
 800ef88:	f007 f9ce 	bl	8016328 <iprintf>
      recv_flags |= TF_RESET;
 800ef8c:	4b7f      	ldr	r3, [pc, #508]	; (800f18c <tcp_process+0x2a8>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f043 0308 	orr.w	r3, r3, #8
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4b7d      	ldr	r3, [pc, #500]	; (800f18c <tcp_process+0x2a8>)
 800ef98:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	8b5b      	ldrh	r3, [r3, #26]
 800ef9e:	f023 0301 	bic.w	r3, r3, #1
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800efa8:	f06f 030d 	mvn.w	r3, #13
 800efac:	e37a      	b.n	800f6a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	e378      	b.n	800f6a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800efb2:	4b72      	ldr	r3, [pc, #456]	; (800f17c <tcp_process+0x298>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	f003 0302 	and.w	r3, r3, #2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d010      	beq.n	800efe0 <tcp_process+0xfc>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	7d1b      	ldrb	r3, [r3, #20]
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	d00c      	beq.n	800efe0 <tcp_process+0xfc>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	7d1b      	ldrb	r3, [r3, #20]
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d008      	beq.n	800efe0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	8b5b      	ldrh	r3, [r3, #26]
 800efd2:	f043 0302 	orr.w	r3, r3, #2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	e361      	b.n	800f6a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	8b5b      	ldrh	r3, [r3, #26]
 800efe4:	f003 0310 	and.w	r3, r3, #16
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d103      	bne.n	800eff4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800efec:	4b68      	ldr	r3, [pc, #416]	; (800f190 <tcp_process+0x2ac>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f001 fc2f 	bl	8010868 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	7d1b      	ldrb	r3, [r3, #20]
 800f00e:	3b02      	subs	r3, #2
 800f010:	2b07      	cmp	r3, #7
 800f012:	f200 8337 	bhi.w	800f684 <tcp_process+0x7a0>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <tcp_process+0x138>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f03d 	.word	0x0800f03d
 800f020:	0800f26d 	.word	0x0800f26d
 800f024:	0800f3e5 	.word	0x0800f3e5
 800f028:	0800f40f 	.word	0x0800f40f
 800f02c:	0800f533 	.word	0x0800f533
 800f030:	0800f3e5 	.word	0x0800f3e5
 800f034:	0800f5bf 	.word	0x0800f5bf
 800f038:	0800f64f 	.word	0x0800f64f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f03c:	4b4f      	ldr	r3, [pc, #316]	; (800f17c <tcp_process+0x298>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 0310 	and.w	r3, r3, #16
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 80e4 	beq.w	800f212 <tcp_process+0x32e>
 800f04a:	4b4c      	ldr	r3, [pc, #304]	; (800f17c <tcp_process+0x298>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	f003 0302 	and.w	r3, r3, #2
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 80dd 	beq.w	800f212 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f05c:	1c5a      	adds	r2, r3, #1
 800f05e:	4b48      	ldr	r3, [pc, #288]	; (800f180 <tcp_process+0x29c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	f040 80d5 	bne.w	800f212 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f068:	4b46      	ldr	r3, [pc, #280]	; (800f184 <tcp_process+0x2a0>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f07a:	4b41      	ldr	r3, [pc, #260]	; (800f180 <tcp_process+0x29c>)
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f082:	4b44      	ldr	r3, [pc, #272]	; (800f194 <tcp_process+0x2b0>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	89db      	ldrh	r3, [r3, #14]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f09c:	4b39      	ldr	r3, [pc, #228]	; (800f184 <tcp_process+0x2a0>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	1e5a      	subs	r2, r3, #1
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2204      	movs	r2, #4
 800f0aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	3304      	adds	r3, #4
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f005 fb3f 	bl	8014738 <ip4_route>
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f7ff f88c 	bl	800e1e0 <tcp_eff_send_mss_netif>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0d4:	009a      	lsls	r2, r3, #2
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800f0e0:	428b      	cmp	r3, r1
 800f0e2:	bf38      	it	cc
 800f0e4:	460b      	movcc	r3, r1
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d204      	bcs.n	800f0f4 <tcp_process+0x210>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	e00d      	b.n	800f110 <tcp_process+0x22c>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0f8:	005b      	lsls	r3, r3, #1
 800f0fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d904      	bls.n	800f10c <tcp_process+0x228>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	b29b      	uxth	r3, r3
 800f10a:	e001      	b.n	800f110 <tcp_process+0x22c>
 800f10c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d106      	bne.n	800f12e <tcp_process+0x24a>
 800f120:	4b13      	ldr	r3, [pc, #76]	; (800f170 <tcp_process+0x28c>)
 800f122:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f126:	491c      	ldr	r1, [pc, #112]	; (800f198 <tcp_process+0x2b4>)
 800f128:	4813      	ldr	r0, [pc, #76]	; (800f178 <tcp_process+0x294>)
 800f12a:	f007 f8fd 	bl	8016328 <iprintf>
        --pcb->snd_queuelen;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f134:	3b01      	subs	r3, #1
 800f136:	b29a      	uxth	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f142:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d12a      	bne.n	800f1a0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f14e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <tcp_process+0x280>
 800f156:	4b06      	ldr	r3, [pc, #24]	; (800f170 <tcp_process+0x28c>)
 800f158:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f15c:	490f      	ldr	r1, [pc, #60]	; (800f19c <tcp_process+0x2b8>)
 800f15e:	4806      	ldr	r0, [pc, #24]	; (800f178 <tcp_process+0x294>)
 800f160:	f007 f8e2 	bl	8016328 <iprintf>
          pcb->unsent = rseg->next;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f16c:	e01c      	b.n	800f1a8 <tcp_process+0x2c4>
 800f16e:	bf00      	nop
 800f170:	08019978 	.word	0x08019978
 800f174:	08019bb0 	.word	0x08019bb0
 800f178:	080199c4 	.word	0x080199c4
 800f17c:	2000c83c 	.word	0x2000c83c
 800f180:	2000c834 	.word	0x2000c834
 800f184:	2000c830 	.word	0x2000c830
 800f188:	08019bcc 	.word	0x08019bcc
 800f18c:	2000c83d 	.word	0x2000c83d
 800f190:	2000c7f8 	.word	0x2000c7f8
 800f194:	2000c820 	.word	0x2000c820
 800f198:	08019bec 	.word	0x08019bec
 800f19c:	08019c04 	.word	0x08019c04
        } else {
          pcb->unacked = rseg->next;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f1a8:	69f8      	ldr	r0, [r7, #28]
 800f1aa:	f7fe fc54 	bl	800da56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d104      	bne.n	800f1c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1bc:	861a      	strh	r2, [r3, #48]	; 0x30
 800f1be:	e006      	b.n	800f1ce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00a      	beq.n	800f1ee <tcp_process+0x30a>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	6910      	ldr	r0, [r2, #16]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	6879      	ldr	r1, [r7, #4]
 800f1e6:	4798      	blx	r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	76bb      	strb	r3, [r7, #26]
 800f1ec:	e001      	b.n	800f1f2 <tcp_process+0x30e>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f1f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1f6:	f113 0f0d 	cmn.w	r3, #13
 800f1fa:	d102      	bne.n	800f202 <tcp_process+0x31e>
          return ERR_ABRT;
 800f1fc:	f06f 030c 	mvn.w	r3, #12
 800f200:	e250      	b.n	800f6a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	8b5b      	ldrh	r3, [r3, #26]
 800f206:	f043 0302 	orr.w	r3, r3, #2
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f210:	e23a      	b.n	800f688 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f212:	4b98      	ldr	r3, [pc, #608]	; (800f474 <tcp_process+0x590>)
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	f003 0310 	and.w	r3, r3, #16
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f000 8234 	beq.w	800f688 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f220:	4b95      	ldr	r3, [pc, #596]	; (800f478 <tcp_process+0x594>)
 800f222:	6819      	ldr	r1, [r3, #0]
 800f224:	4b95      	ldr	r3, [pc, #596]	; (800f47c <tcp_process+0x598>)
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	461a      	mov	r2, r3
 800f22a:	4b95      	ldr	r3, [pc, #596]	; (800f480 <tcp_process+0x59c>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f230:	4b94      	ldr	r3, [pc, #592]	; (800f484 <tcp_process+0x5a0>)
 800f232:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f234:	885b      	ldrh	r3, [r3, #2]
 800f236:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f238:	4a92      	ldr	r2, [pc, #584]	; (800f484 <tcp_process+0x5a0>)
 800f23a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f23c:	8812      	ldrh	r2, [r2, #0]
 800f23e:	b292      	uxth	r2, r2
 800f240:	9202      	str	r2, [sp, #8]
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	4b90      	ldr	r3, [pc, #576]	; (800f488 <tcp_process+0x5a4>)
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4b90      	ldr	r3, [pc, #576]	; (800f48c <tcp_process+0x5a8>)
 800f24a:	4602      	mov	r2, r0
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f003 f8dd 	bl	801240c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f258:	2b05      	cmp	r3, #5
 800f25a:	f200 8215 	bhi.w	800f688 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f002 fea9 	bl	8011fbc <tcp_rexmit_rto>
      break;
 800f26a:	e20d      	b.n	800f688 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f26c:	4b81      	ldr	r3, [pc, #516]	; (800f474 <tcp_process+0x590>)
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	f003 0310 	and.w	r3, r3, #16
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 80a1 	beq.w	800f3bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f27a:	4b7f      	ldr	r3, [pc, #508]	; (800f478 <tcp_process+0x594>)
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	3b01      	subs	r3, #1
 800f286:	2b00      	cmp	r3, #0
 800f288:	db7e      	blt.n	800f388 <tcp_process+0x4a4>
 800f28a:	4b7b      	ldr	r3, [pc, #492]	; (800f478 <tcp_process+0x594>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc77      	bgt.n	800f388 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2204      	movs	r2, #4
 800f29c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d102      	bne.n	800f2ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f2a6:	23fa      	movs	r3, #250	; 0xfa
 800f2a8:	76bb      	strb	r3, [r7, #26]
 800f2aa:	e01d      	b.n	800f2e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <tcp_process+0x3e0>
 800f2b6:	4b76      	ldr	r3, [pc, #472]	; (800f490 <tcp_process+0x5ac>)
 800f2b8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f2bc:	4975      	ldr	r1, [pc, #468]	; (800f494 <tcp_process+0x5b0>)
 800f2be:	4876      	ldr	r0, [pc, #472]	; (800f498 <tcp_process+0x5b4>)
 800f2c0:	f007 f832 	bl	8016328 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c8:	699b      	ldr	r3, [r3, #24]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00a      	beq.n	800f2e4 <tcp_process+0x400>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	6910      	ldr	r0, [r2, #16]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	76bb      	strb	r3, [r7, #26]
 800f2e2:	e001      	b.n	800f2e8 <tcp_process+0x404>
 800f2e4:	23f0      	movs	r3, #240	; 0xf0
 800f2e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f2e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00a      	beq.n	800f306 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f2f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f2f4:	f113 0f0d 	cmn.w	r3, #13
 800f2f8:	d002      	beq.n	800f300 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7fd fd62 	bl	800cdc4 <tcp_abort>
            }
            return ERR_ABRT;
 800f300:	f06f 030c 	mvn.w	r3, #12
 800f304:	e1ce      	b.n	800f6a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fae0 	bl	800f8cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f30c:	4b63      	ldr	r3, [pc, #396]	; (800f49c <tcp_process+0x5b8>)
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d005      	beq.n	800f320 <tcp_process+0x43c>
            recv_acked--;
 800f314:	4b61      	ldr	r3, [pc, #388]	; (800f49c <tcp_process+0x5b8>)
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	3b01      	subs	r3, #1
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	4b5f      	ldr	r3, [pc, #380]	; (800f49c <tcp_process+0x5b8>)
 800f31e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f324:	009a      	lsls	r2, r3, #2
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f330:	428b      	cmp	r3, r1
 800f332:	bf38      	it	cc
 800f334:	460b      	movcc	r3, r1
 800f336:	429a      	cmp	r2, r3
 800f338:	d204      	bcs.n	800f344 <tcp_process+0x460>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	b29b      	uxth	r3, r3
 800f342:	e00d      	b.n	800f360 <tcp_process+0x47c>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f34e:	4293      	cmp	r3, r2
 800f350:	d904      	bls.n	800f35c <tcp_process+0x478>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	b29b      	uxth	r3, r3
 800f35a:	e001      	b.n	800f360 <tcp_process+0x47c>
 800f35c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f366:	4b4e      	ldr	r3, [pc, #312]	; (800f4a0 <tcp_process+0x5bc>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 0320 	and.w	r3, r3, #32
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d037      	beq.n	800f3e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8b5b      	ldrh	r3, [r3, #26]
 800f376:	f043 0302 	orr.w	r3, r3, #2
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2207      	movs	r2, #7
 800f384:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f386:	e02c      	b.n	800f3e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f388:	4b3b      	ldr	r3, [pc, #236]	; (800f478 <tcp_process+0x594>)
 800f38a:	6819      	ldr	r1, [r3, #0]
 800f38c:	4b3b      	ldr	r3, [pc, #236]	; (800f47c <tcp_process+0x598>)
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	461a      	mov	r2, r3
 800f392:	4b3b      	ldr	r3, [pc, #236]	; (800f480 <tcp_process+0x59c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f398:	4b3a      	ldr	r3, [pc, #232]	; (800f484 <tcp_process+0x5a0>)
 800f39a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f39c:	885b      	ldrh	r3, [r3, #2]
 800f39e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3a0:	4a38      	ldr	r2, [pc, #224]	; (800f484 <tcp_process+0x5a0>)
 800f3a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3a4:	8812      	ldrh	r2, [r2, #0]
 800f3a6:	b292      	uxth	r2, r2
 800f3a8:	9202      	str	r2, [sp, #8]
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	4b36      	ldr	r3, [pc, #216]	; (800f488 <tcp_process+0x5a4>)
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	4b36      	ldr	r3, [pc, #216]	; (800f48c <tcp_process+0x5a8>)
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f003 f829 	bl	801240c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f3ba:	e167      	b.n	800f68c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f3bc:	4b2d      	ldr	r3, [pc, #180]	; (800f474 <tcp_process+0x590>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	f003 0302 	and.w	r3, r3, #2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 8161 	beq.w	800f68c <tcp_process+0x7a8>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ce:	1e5a      	subs	r2, r3, #1
 800f3d0:	4b2b      	ldr	r3, [pc, #172]	; (800f480 <tcp_process+0x59c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	f040 8159 	bne.w	800f68c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f002 fe10 	bl	8012000 <tcp_rexmit>
      break;
 800f3e0:	e154      	b.n	800f68c <tcp_process+0x7a8>
 800f3e2:	e153      	b.n	800f68c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fa71 	bl	800f8cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f3ea:	4b2d      	ldr	r3, [pc, #180]	; (800f4a0 <tcp_process+0x5bc>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f003 0320 	and.w	r3, r3, #32
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 814c 	beq.w	800f690 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	8b5b      	ldrh	r3, [r3, #26]
 800f3fc:	f043 0302 	orr.w	r3, r3, #2
 800f400:	b29a      	uxth	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2207      	movs	r2, #7
 800f40a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f40c:	e140      	b.n	800f690 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fa5c 	bl	800f8cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f414:	4b22      	ldr	r3, [pc, #136]	; (800f4a0 <tcp_process+0x5bc>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	f003 0320 	and.w	r3, r3, #32
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d071      	beq.n	800f504 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f420:	4b14      	ldr	r3, [pc, #80]	; (800f474 <tcp_process+0x590>)
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d060      	beq.n	800f4ee <tcp_process+0x60a>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f430:	4b11      	ldr	r3, [pc, #68]	; (800f478 <tcp_process+0x594>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d15a      	bne.n	800f4ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d156      	bne.n	800f4ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	8b5b      	ldrh	r3, [r3, #26]
 800f444:	f043 0302 	orr.w	r3, r3, #2
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7fe fdbc 	bl	800dfcc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f454:	4b13      	ldr	r3, [pc, #76]	; (800f4a4 <tcp_process+0x5c0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d105      	bne.n	800f46a <tcp_process+0x586>
 800f45e:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <tcp_process+0x5c0>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	4a0f      	ldr	r2, [pc, #60]	; (800f4a4 <tcp_process+0x5c0>)
 800f466:	6013      	str	r3, [r2, #0]
 800f468:	e02e      	b.n	800f4c8 <tcp_process+0x5e4>
 800f46a:	4b0e      	ldr	r3, [pc, #56]	; (800f4a4 <tcp_process+0x5c0>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	617b      	str	r3, [r7, #20]
 800f470:	e027      	b.n	800f4c2 <tcp_process+0x5de>
 800f472:	bf00      	nop
 800f474:	2000c83c 	.word	0x2000c83c
 800f478:	2000c834 	.word	0x2000c834
 800f47c:	2000c83a 	.word	0x2000c83a
 800f480:	2000c830 	.word	0x2000c830
 800f484:	2000c820 	.word	0x2000c820
 800f488:	200090b4 	.word	0x200090b4
 800f48c:	200090b8 	.word	0x200090b8
 800f490:	08019978 	.word	0x08019978
 800f494:	08019c18 	.word	0x08019c18
 800f498:	080199c4 	.word	0x080199c4
 800f49c:	2000c838 	.word	0x2000c838
 800f4a0:	2000c83d 	.word	0x2000c83d
 800f4a4:	2000c804 	.word	0x2000c804
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d104      	bne.n	800f4bc <tcp_process+0x5d8>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	68da      	ldr	r2, [r3, #12]
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	60da      	str	r2, [r3, #12]
 800f4ba:	e005      	b.n	800f4c8 <tcp_process+0x5e4>
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	617b      	str	r3, [r7, #20]
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1ef      	bne.n	800f4a8 <tcp_process+0x5c4>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	60da      	str	r2, [r3, #12]
 800f4ce:	4b77      	ldr	r3, [pc, #476]	; (800f6ac <tcp_process+0x7c8>)
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	220a      	movs	r2, #10
 800f4d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f4da:	4b75      	ldr	r3, [pc, #468]	; (800f6b0 <tcp_process+0x7cc>)
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	60da      	str	r2, [r3, #12]
 800f4e2:	4a73      	ldr	r2, [pc, #460]	; (800f6b0 <tcp_process+0x7cc>)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	f003 f952 	bl	8012790 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f4ec:	e0d2      	b.n	800f694 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	8b5b      	ldrh	r3, [r3, #26]
 800f4f2:	f043 0302 	orr.w	r3, r3, #2
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2208      	movs	r2, #8
 800f500:	751a      	strb	r2, [r3, #20]
      break;
 800f502:	e0c7      	b.n	800f694 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f504:	4b6b      	ldr	r3, [pc, #428]	; (800f6b4 <tcp_process+0x7d0>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 0310 	and.w	r3, r3, #16
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 80c1 	beq.w	800f694 <tcp_process+0x7b0>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f516:	4b68      	ldr	r3, [pc, #416]	; (800f6b8 <tcp_process+0x7d4>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	f040 80ba 	bne.w	800f694 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f524:	2b00      	cmp	r3, #0
 800f526:	f040 80b5 	bne.w	800f694 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2206      	movs	r2, #6
 800f52e:	751a      	strb	r2, [r3, #20]
      break;
 800f530:	e0b0      	b.n	800f694 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f9ca 	bl	800f8cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f538:	4b60      	ldr	r3, [pc, #384]	; (800f6bc <tcp_process+0x7d8>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0320 	and.w	r3, r3, #32
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 80a9 	beq.w	800f698 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	8b5b      	ldrh	r3, [r3, #26]
 800f54a:	f043 0302 	orr.w	r3, r3, #2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7fe fd39 	bl	800dfcc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f55a:	4b59      	ldr	r3, [pc, #356]	; (800f6c0 <tcp_process+0x7dc>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d105      	bne.n	800f570 <tcp_process+0x68c>
 800f564:	4b56      	ldr	r3, [pc, #344]	; (800f6c0 <tcp_process+0x7dc>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	4a55      	ldr	r2, [pc, #340]	; (800f6c0 <tcp_process+0x7dc>)
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	e013      	b.n	800f598 <tcp_process+0x6b4>
 800f570:	4b53      	ldr	r3, [pc, #332]	; (800f6c0 <tcp_process+0x7dc>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	613b      	str	r3, [r7, #16]
 800f576:	e00c      	b.n	800f592 <tcp_process+0x6ae>
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d104      	bne.n	800f58c <tcp_process+0x6a8>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	68da      	ldr	r2, [r3, #12]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	60da      	str	r2, [r3, #12]
 800f58a:	e005      	b.n	800f598 <tcp_process+0x6b4>
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	613b      	str	r3, [r7, #16]
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1ef      	bne.n	800f578 <tcp_process+0x694>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	60da      	str	r2, [r3, #12]
 800f59e:	4b43      	ldr	r3, [pc, #268]	; (800f6ac <tcp_process+0x7c8>)
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	220a      	movs	r2, #10
 800f5a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f5aa:	4b41      	ldr	r3, [pc, #260]	; (800f6b0 <tcp_process+0x7cc>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	60da      	str	r2, [r3, #12]
 800f5b2:	4a3f      	ldr	r2, [pc, #252]	; (800f6b0 <tcp_process+0x7cc>)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	f003 f8ea 	bl	8012790 <tcp_timer_needed>
      }
      break;
 800f5bc:	e06c      	b.n	800f698 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f984 	bl	800f8cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f5c4:	4b3b      	ldr	r3, [pc, #236]	; (800f6b4 <tcp_process+0x7d0>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f003 0310 	and.w	r3, r3, #16
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d065      	beq.n	800f69c <tcp_process+0x7b8>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5d4:	4b38      	ldr	r3, [pc, #224]	; (800f6b8 <tcp_process+0x7d4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d15f      	bne.n	800f69c <tcp_process+0x7b8>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d15b      	bne.n	800f69c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7fe fcf1 	bl	800dfcc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5ea:	4b35      	ldr	r3, [pc, #212]	; (800f6c0 <tcp_process+0x7dc>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d105      	bne.n	800f600 <tcp_process+0x71c>
 800f5f4:	4b32      	ldr	r3, [pc, #200]	; (800f6c0 <tcp_process+0x7dc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	4a31      	ldr	r2, [pc, #196]	; (800f6c0 <tcp_process+0x7dc>)
 800f5fc:	6013      	str	r3, [r2, #0]
 800f5fe:	e013      	b.n	800f628 <tcp_process+0x744>
 800f600:	4b2f      	ldr	r3, [pc, #188]	; (800f6c0 <tcp_process+0x7dc>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	e00c      	b.n	800f622 <tcp_process+0x73e>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d104      	bne.n	800f61c <tcp_process+0x738>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68da      	ldr	r2, [r3, #12]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	60da      	str	r2, [r3, #12]
 800f61a:	e005      	b.n	800f628 <tcp_process+0x744>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	60fb      	str	r3, [r7, #12]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1ef      	bne.n	800f608 <tcp_process+0x724>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	60da      	str	r2, [r3, #12]
 800f62e:	4b1f      	ldr	r3, [pc, #124]	; (800f6ac <tcp_process+0x7c8>)
 800f630:	2201      	movs	r2, #1
 800f632:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	220a      	movs	r2, #10
 800f638:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f63a:	4b1d      	ldr	r3, [pc, #116]	; (800f6b0 <tcp_process+0x7cc>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	60da      	str	r2, [r3, #12]
 800f642:	4a1b      	ldr	r2, [pc, #108]	; (800f6b0 <tcp_process+0x7cc>)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6013      	str	r3, [r2, #0]
 800f648:	f003 f8a2 	bl	8012790 <tcp_timer_needed>
      }
      break;
 800f64c:	e026      	b.n	800f69c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 f93c 	bl	800f8cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f654:	4b17      	ldr	r3, [pc, #92]	; (800f6b4 <tcp_process+0x7d0>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 0310 	and.w	r3, r3, #16
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d01f      	beq.n	800f6a0 <tcp_process+0x7bc>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f664:	4b14      	ldr	r3, [pc, #80]	; (800f6b8 <tcp_process+0x7d4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d119      	bne.n	800f6a0 <tcp_process+0x7bc>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f670:	2b00      	cmp	r3, #0
 800f672:	d115      	bne.n	800f6a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f674:	4b11      	ldr	r3, [pc, #68]	; (800f6bc <tcp_process+0x7d8>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f043 0310 	orr.w	r3, r3, #16
 800f67c:	b2da      	uxtb	r2, r3
 800f67e:	4b0f      	ldr	r3, [pc, #60]	; (800f6bc <tcp_process+0x7d8>)
 800f680:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f682:	e00d      	b.n	800f6a0 <tcp_process+0x7bc>
    default:
      break;
 800f684:	bf00      	nop
 800f686:	e00c      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f688:	bf00      	nop
 800f68a:	e00a      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f68c:	bf00      	nop
 800f68e:	e008      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f690:	bf00      	nop
 800f692:	e006      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f694:	bf00      	nop
 800f696:	e004      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f698:	bf00      	nop
 800f69a:	e002      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f69c:	bf00      	nop
 800f69e:	e000      	b.n	800f6a2 <tcp_process+0x7be>
      break;
 800f6a0:	bf00      	nop
  }
  return ERR_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3724      	adds	r7, #36	; 0x24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd90      	pop	{r4, r7, pc}
 800f6ac:	2000c80c 	.word	0x2000c80c
 800f6b0:	2000c808 	.word	0x2000c808
 800f6b4:	2000c83c 	.word	0x2000c83c
 800f6b8:	2000c834 	.word	0x2000c834
 800f6bc:	2000c83d 	.word	0x2000c83d
 800f6c0:	2000c804 	.word	0x2000c804

0800f6c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f6c4:	b590      	push	{r4, r7, lr}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d106      	bne.n	800f6e2 <tcp_oos_insert_segment+0x1e>
 800f6d4:	4b3b      	ldr	r3, [pc, #236]	; (800f7c4 <tcp_oos_insert_segment+0x100>)
 800f6d6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f6da:	493b      	ldr	r1, [pc, #236]	; (800f7c8 <tcp_oos_insert_segment+0x104>)
 800f6dc:	483b      	ldr	r0, [pc, #236]	; (800f7cc <tcp_oos_insert_segment+0x108>)
 800f6de:	f006 fe23 	bl	8016328 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	899b      	ldrh	r3, [r3, #12]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fb f978 	bl	800a9e0 <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d028      	beq.n	800f74e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f6fc:	6838      	ldr	r0, [r7, #0]
 800f6fe:	f7fe f995 	bl	800da2c <tcp_segs_free>
    next = NULL;
 800f702:	2300      	movs	r3, #0
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	e056      	b.n	800f7b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	899b      	ldrh	r3, [r3, #12]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4618      	mov	r0, r3
 800f712:	f7fb f965 	bl	800a9e0 <lwip_htons>
 800f716:	4603      	mov	r3, r0
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00d      	beq.n	800f73e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	899b      	ldrh	r3, [r3, #12]
 800f728:	b29c      	uxth	r4, r3
 800f72a:	2001      	movs	r0, #1
 800f72c:	f7fb f958 	bl	800a9e0 <lwip_htons>
 800f730:	4603      	mov	r3, r0
 800f732:	461a      	mov	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	4322      	orrs	r2, r4
 800f73a:	b292      	uxth	r2, r2
 800f73c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f7fe f984 	bl	800da56 <tcp_seg_free>
    while (next &&
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00e      	beq.n	800f772 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	891b      	ldrh	r3, [r3, #8]
 800f758:	461a      	mov	r2, r3
 800f75a:	4b1d      	ldr	r3, [pc, #116]	; (800f7d0 <tcp_oos_insert_segment+0x10c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	441a      	add	r2, r3
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	6839      	ldr	r1, [r7, #0]
 800f768:	8909      	ldrh	r1, [r1, #8]
 800f76a:	440b      	add	r3, r1
 800f76c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f76e:	2b00      	cmp	r3, #0
 800f770:	daca      	bge.n	800f708 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d01e      	beq.n	800f7b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	891b      	ldrh	r3, [r3, #8]
 800f77c:	461a      	mov	r2, r3
 800f77e:	4b14      	ldr	r3, [pc, #80]	; (800f7d0 <tcp_oos_insert_segment+0x10c>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	441a      	add	r2, r3
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	dd12      	ble.n	800f7b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	b29a      	uxth	r2, r3
 800f798:	4b0d      	ldr	r3, [pc, #52]	; (800f7d0 <tcp_oos_insert_segment+0x10c>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	891b      	ldrh	r3, [r3, #8]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	f7fc fb81 	bl	800beb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	601a      	str	r2, [r3, #0]
}
 800f7bc:	bf00      	nop
 800f7be:	3714      	adds	r7, #20
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd90      	pop	{r4, r7, pc}
 800f7c4:	08019978 	.word	0x08019978
 800f7c8:	08019c38 	.word	0x08019c38
 800f7cc:	080199c4 	.word	0x080199c4
 800f7d0:	2000c830 	.word	0x2000c830

0800f7d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f7d4:	b5b0      	push	{r4, r5, r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f7e2:	e03e      	b.n	800f862 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fc fd74 	bl	800c2e0 <pbuf_clen>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f802:	8a7a      	ldrh	r2, [r7, #18]
 800f804:	429a      	cmp	r2, r3
 800f806:	d906      	bls.n	800f816 <tcp_free_acked_segments+0x42>
 800f808:	4b2a      	ldr	r3, [pc, #168]	; (800f8b4 <tcp_free_acked_segments+0xe0>)
 800f80a:	f240 4257 	movw	r2, #1111	; 0x457
 800f80e:	492a      	ldr	r1, [pc, #168]	; (800f8b8 <tcp_free_acked_segments+0xe4>)
 800f810:	482a      	ldr	r0, [pc, #168]	; (800f8bc <tcp_free_acked_segments+0xe8>)
 800f812:	f006 fd89 	bl	8016328 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f81c:	8a7b      	ldrh	r3, [r7, #18]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	b29a      	uxth	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	891a      	ldrh	r2, [r3, #8]
 800f82c:	4b24      	ldr	r3, [pc, #144]	; (800f8c0 <tcp_free_acked_segments+0xec>)
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	4413      	add	r3, r2
 800f832:	b29a      	uxth	r2, r3
 800f834:	4b22      	ldr	r3, [pc, #136]	; (800f8c0 <tcp_free_acked_segments+0xec>)
 800f836:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f838:	6978      	ldr	r0, [r7, #20]
 800f83a:	f7fe f90c 	bl	800da56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00c      	beq.n	800f862 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d109      	bne.n	800f862 <tcp_free_acked_segments+0x8e>
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <tcp_free_acked_segments+0x8e>
 800f854:	4b17      	ldr	r3, [pc, #92]	; (800f8b4 <tcp_free_acked_segments+0xe0>)
 800f856:	f240 4261 	movw	r2, #1121	; 0x461
 800f85a:	491a      	ldr	r1, [pc, #104]	; (800f8c4 <tcp_free_acked_segments+0xf0>)
 800f85c:	4817      	ldr	r0, [pc, #92]	; (800f8bc <tcp_free_acked_segments+0xe8>)
 800f85e:	f006 fd63 	bl	8016328 <iprintf>
  while (seg_list != NULL &&
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d020      	beq.n	800f8aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fb f8cb 	bl	800aa0a <lwip_htonl>
 800f874:	4604      	mov	r4, r0
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	891b      	ldrh	r3, [r3, #8]
 800f87a:	461d      	mov	r5, r3
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	b29b      	uxth	r3, r3
 800f884:	4618      	mov	r0, r3
 800f886:	f7fb f8ab 	bl	800a9e0 <lwip_htons>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f003 0303 	and.w	r3, r3, #3
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <tcp_free_acked_segments+0xc6>
 800f896:	2301      	movs	r3, #1
 800f898:	e000      	b.n	800f89c <tcp_free_acked_segments+0xc8>
 800f89a:	2300      	movs	r3, #0
 800f89c:	442b      	add	r3, r5
 800f89e:	18e2      	adds	r2, r4, r3
 800f8a0:	4b09      	ldr	r3, [pc, #36]	; (800f8c8 <tcp_free_acked_segments+0xf4>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	dd9c      	ble.n	800f7e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f8aa:	68bb      	ldr	r3, [r7, #8]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bdb0      	pop	{r4, r5, r7, pc}
 800f8b4:	08019978 	.word	0x08019978
 800f8b8:	08019c60 	.word	0x08019c60
 800f8bc:	080199c4 	.word	0x080199c4
 800f8c0:	2000c838 	.word	0x2000c838
 800f8c4:	08019c88 	.word	0x08019c88
 800f8c8:	2000c834 	.word	0x2000c834

0800f8cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f8cc:	b5b0      	push	{r4, r5, r7, lr}
 800f8ce:	b094      	sub	sp, #80	; 0x50
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <tcp_receive+0x20>
 800f8de:	4b91      	ldr	r3, [pc, #580]	; (800fb24 <tcp_receive+0x258>)
 800f8e0:	f240 427b 	movw	r2, #1147	; 0x47b
 800f8e4:	4990      	ldr	r1, [pc, #576]	; (800fb28 <tcp_receive+0x25c>)
 800f8e6:	4891      	ldr	r0, [pc, #580]	; (800fb2c <tcp_receive+0x260>)
 800f8e8:	f006 fd1e 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d806      	bhi.n	800f902 <tcp_receive+0x36>
 800f8f4:	4b8b      	ldr	r3, [pc, #556]	; (800fb24 <tcp_receive+0x258>)
 800f8f6:	f240 427c 	movw	r2, #1148	; 0x47c
 800f8fa:	498d      	ldr	r1, [pc, #564]	; (800fb30 <tcp_receive+0x264>)
 800f8fc:	488b      	ldr	r0, [pc, #556]	; (800fb2c <tcp_receive+0x260>)
 800f8fe:	f006 fd13 	bl	8016328 <iprintf>

  if (flags & TCP_ACK) {
 800f902:	4b8c      	ldr	r3, [pc, #560]	; (800fb34 <tcp_receive+0x268>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 0310 	and.w	r3, r3, #16
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f000 8264 	beq.w	800fdd8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f916:	461a      	mov	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f91c:	4413      	add	r3, r2
 800f91e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f924:	4b84      	ldr	r3, [pc, #528]	; (800fb38 <tcp_receive+0x26c>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	db1b      	blt.n	800f966 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f932:	4b81      	ldr	r3, [pc, #516]	; (800fb38 <tcp_receive+0x26c>)
 800f934:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f936:	429a      	cmp	r2, r3
 800f938:	d106      	bne.n	800f948 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f93e:	4b7f      	ldr	r3, [pc, #508]	; (800fb3c <tcp_receive+0x270>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	db0e      	blt.n	800f966 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f94c:	4b7b      	ldr	r3, [pc, #492]	; (800fb3c <tcp_receive+0x270>)
 800f94e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f950:	429a      	cmp	r2, r3
 800f952:	d125      	bne.n	800f9a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f954:	4b7a      	ldr	r3, [pc, #488]	; (800fb40 <tcp_receive+0x274>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	89db      	ldrh	r3, [r3, #14]
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f962:	429a      	cmp	r2, r3
 800f964:	d91c      	bls.n	800f9a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f966:	4b76      	ldr	r3, [pc, #472]	; (800fb40 <tcp_receive+0x274>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	89db      	ldrh	r3, [r3, #14]
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f980:	429a      	cmp	r2, r3
 800f982:	d205      	bcs.n	800f990 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f990:	4b69      	ldr	r3, [pc, #420]	; (800fb38 <tcp_receive+0x26c>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f998:	4b68      	ldr	r3, [pc, #416]	; (800fb3c <tcp_receive+0x270>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f9a0:	4b66      	ldr	r3, [pc, #408]	; (800fb3c <tcp_receive+0x270>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dc58      	bgt.n	800fa60 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f9ae:	4b65      	ldr	r3, [pc, #404]	; (800fb44 <tcp_receive+0x278>)
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d14b      	bne.n	800fa4e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f9c0:	4413      	add	r3, r2
 800f9c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d142      	bne.n	800fa4e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	db3d      	blt.n	800fa4e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9d6:	4b59      	ldr	r3, [pc, #356]	; (800fb3c <tcp_receive+0x270>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d137      	bne.n	800fa4e <tcp_receive+0x182>
              found_dupack = 1;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9e8:	2bff      	cmp	r3, #255	; 0xff
 800f9ea:	d007      	beq.n	800f9fc <tcp_receive+0x130>
                ++pcb->dupacks;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d91b      	bls.n	800fa3e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa10:	4413      	add	r3, r2
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d30a      	bcc.n	800fa34 <tcp_receive+0x168>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa28:	4413      	add	r3, r2
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa32:	e004      	b.n	800fa3e <tcp_receive+0x172>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d902      	bls.n	800fa4e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f002 fb45 	bl	80120d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fa4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f040 8161 	bne.w	800fd18 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa5e:	e15b      	b.n	800fd18 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa60:	4b36      	ldr	r3, [pc, #216]	; (800fb3c <tcp_receive+0x270>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa68:	1ad3      	subs	r3, r2, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f2c0 814e 	blt.w	800fd0e <tcp_receive+0x442>
 800fa72:	4b32      	ldr	r3, [pc, #200]	; (800fb3c <tcp_receive+0x270>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa7a:	1ad3      	subs	r3, r2, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f300 8146 	bgt.w	800fd0e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8b5b      	ldrh	r3, [r3, #26]
 800fa86:	f003 0304 	and.w	r3, r3, #4
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d010      	beq.n	800fab0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8b5b      	ldrh	r3, [r3, #26]
 800fa92:	f023 0304 	bic.w	r3, r3, #4
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fabe:	10db      	asrs	r3, r3, #3
 800fac0:	b21b      	sxth	r3, r3
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800faca:	b29b      	uxth	r3, r3
 800facc:	4413      	add	r3, r2
 800face:	b29b      	uxth	r3, r3
 800fad0:	b21a      	sxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fad8:	4b18      	ldr	r3, [pc, #96]	; (800fb3c <tcp_receive+0x270>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	b29a      	uxth	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800faf0:	4b12      	ldr	r3, [pc, #72]	; (800fb3c <tcp_receive+0x270>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	7d1b      	ldrb	r3, [r3, #20]
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	f240 8097 	bls.w	800fc30 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d245      	bcs.n	800fb9e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d014      	beq.n	800fb48 <tcp_receive+0x27c>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e013      	b.n	800fb4a <tcp_receive+0x27e>
 800fb22:	bf00      	nop
 800fb24:	08019978 	.word	0x08019978
 800fb28:	08019ca8 	.word	0x08019ca8
 800fb2c:	080199c4 	.word	0x080199c4
 800fb30:	08019cc4 	.word	0x08019cc4
 800fb34:	2000c83c 	.word	0x2000c83c
 800fb38:	2000c830 	.word	0x2000c830
 800fb3c:	2000c834 	.word	0x2000c834
 800fb40:	2000c820 	.word	0x2000c820
 800fb44:	2000c83a 	.word	0x2000c83a
 800fb48:	2302      	movs	r3, #2
 800fb4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fb4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb58:	fb12 f303 	smulbb	r3, r2, r3
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb60:	4293      	cmp	r3, r2
 800fb62:	bf28      	it	cs
 800fb64:	4613      	movcs	r3, r2
 800fb66:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb70:	4413      	add	r3, r2
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d309      	bcc.n	800fb92 <tcp_receive+0x2c6>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb86:	4413      	add	r3, r2
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb90:	e04e      	b.n	800fc30 <tcp_receive+0x364>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb9c:	e048      	b.n	800fc30 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fba6:	4413      	add	r3, r2
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d309      	bcc.n	800fbc8 <tcp_receive+0x2fc>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbbc:	4413      	add	r3, r2
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fbc6:	e004      	b.n	800fbd2 <tcp_receive+0x306>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d326      	bcc.n	800fc30 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc02:	4413      	add	r3, r2
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d30a      	bcc.n	800fc26 <tcp_receive+0x35a>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc1a:	4413      	add	r3, r2
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc24:	e004      	b.n	800fc30 <tcp_receive+0x364>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc38:	4a98      	ldr	r2, [pc, #608]	; (800fe9c <tcp_receive+0x5d0>)
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff fdca 	bl	800f7d4 <tcp_free_acked_segments>
 800fc40:	4602      	mov	r2, r0
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc4e:	4a94      	ldr	r2, [pc, #592]	; (800fea0 <tcp_receive+0x5d4>)
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff fdbf 	bl	800f7d4 <tcp_free_acked_segments>
 800fc56:	4602      	mov	r2, r0
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d104      	bne.n	800fc6e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc6a:	861a      	strh	r2, [r3, #48]	; 0x30
 800fc6c:	e002      	b.n	800fc74 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d103      	bne.n	800fc8a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fc90:	4b84      	ldr	r3, [pc, #528]	; (800fea4 <tcp_receive+0x5d8>)
 800fc92:	881b      	ldrh	r3, [r3, #0]
 800fc94:	4413      	add	r3, r2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	8b5b      	ldrh	r3, [r3, #26]
 800fca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d035      	beq.n	800fd16 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d118      	bne.n	800fce4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00c      	beq.n	800fcd4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fa fe9f 	bl	800aa0a <lwip_htonl>
 800fccc:	4603      	mov	r3, r0
 800fcce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dc20      	bgt.n	800fd16 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	8b5b      	ldrh	r3, [r3, #26]
 800fcd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fce2:	e018      	b.n	800fd16 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fa fe8a 	bl	800aa0a <lwip_htonl>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	1ae3      	subs	r3, r4, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	dc0b      	bgt.n	800fd16 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	8b5b      	ldrh	r3, [r3, #26]
 800fd02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd0c:	e003      	b.n	800fd16 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f002 fbce 	bl	80124b0 <tcp_send_empty_ack>
 800fd14:	e000      	b.n	800fd18 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd16:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d05b      	beq.n	800fdd8 <tcp_receive+0x50c>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd24:	4b60      	ldr	r3, [pc, #384]	; (800fea8 <tcp_receive+0x5dc>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	1ad3      	subs	r3, r2, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	da54      	bge.n	800fdd8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fd2e:	4b5f      	ldr	r3, [pc, #380]	; (800feac <tcp_receive+0x5e0>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fd42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd4c:	10db      	asrs	r3, r3, #3
 800fd4e:	b21b      	sxth	r3, r3
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd66:	4413      	add	r3, r2
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	b21a      	sxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fd70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da05      	bge.n	800fd84 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fd78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd7c:	425b      	negs	r3, r3
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fd84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd8e:	109b      	asrs	r3, r3, #2
 800fd90:	b21b      	sxth	r3, r3
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fda8:	4413      	add	r3, r2
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	b21a      	sxth	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdb8:	10db      	asrs	r3, r3, #3
 800fdba:	b21b      	sxth	r3, r3
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	4413      	add	r3, r2
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	b21a      	sxth	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fdd8:	4b35      	ldr	r3, [pc, #212]	; (800feb0 <tcp_receive+0x5e4>)
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 84e2 	beq.w	80107a6 <tcp_receive+0xeda>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	7d1b      	ldrb	r3, [r3, #20]
 800fde6:	2b06      	cmp	r3, #6
 800fde8:	f200 84dd 	bhi.w	80107a6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf0:	4b30      	ldr	r3, [pc, #192]	; (800feb4 <tcp_receive+0x5e8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f2c0 808f 	blt.w	800ff1c <tcp_receive+0x650>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe02:	4b2b      	ldr	r3, [pc, #172]	; (800feb0 <tcp_receive+0x5e4>)
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	4619      	mov	r1, r3
 800fe08:	4b2a      	ldr	r3, [pc, #168]	; (800feb4 <tcp_receive+0x5e8>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	440b      	add	r3, r1
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	3301      	adds	r3, #1
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	f300 8082 	bgt.w	800ff1c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe18:	4b27      	ldr	r3, [pc, #156]	; (800feb8 <tcp_receive+0x5ec>)
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe22:	4b24      	ldr	r3, [pc, #144]	; (800feb4 <tcp_receive+0x5e8>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	1ad3      	subs	r3, r2, r3
 800fe28:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe2a:	4b23      	ldr	r3, [pc, #140]	; (800feb8 <tcp_receive+0x5ec>)
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d106      	bne.n	800fe40 <tcp_receive+0x574>
 800fe32:	4b22      	ldr	r3, [pc, #136]	; (800febc <tcp_receive+0x5f0>)
 800fe34:	f240 5294 	movw	r2, #1428	; 0x594
 800fe38:	4921      	ldr	r1, [pc, #132]	; (800fec0 <tcp_receive+0x5f4>)
 800fe3a:	4822      	ldr	r0, [pc, #136]	; (800fec4 <tcp_receive+0x5f8>)
 800fe3c:	f006 fa74 	bl	8016328 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d906      	bls.n	800fe58 <tcp_receive+0x58c>
 800fe4a:	4b1c      	ldr	r3, [pc, #112]	; (800febc <tcp_receive+0x5f0>)
 800fe4c:	f240 5295 	movw	r2, #1429	; 0x595
 800fe50:	491d      	ldr	r1, [pc, #116]	; (800fec8 <tcp_receive+0x5fc>)
 800fe52:	481c      	ldr	r0, [pc, #112]	; (800fec4 <tcp_receive+0x5f8>)
 800fe54:	f006 fa68 	bl	8016328 <iprintf>
      off = (u16_t)off32;
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fe5e:	4b16      	ldr	r3, [pc, #88]	; (800feb8 <tcp_receive+0x5ec>)
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d906      	bls.n	800fe7a <tcp_receive+0x5ae>
 800fe6c:	4b13      	ldr	r3, [pc, #76]	; (800febc <tcp_receive+0x5f0>)
 800fe6e:	f240 5297 	movw	r2, #1431	; 0x597
 800fe72:	4916      	ldr	r1, [pc, #88]	; (800fecc <tcp_receive+0x600>)
 800fe74:	4813      	ldr	r0, [pc, #76]	; (800fec4 <tcp_receive+0x5f8>)
 800fe76:	f006 fa57 	bl	8016328 <iprintf>
      inseg.len -= off;
 800fe7a:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <tcp_receive+0x5ec>)
 800fe7c:	891a      	ldrh	r2, [r3, #8]
 800fe7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	4b0c      	ldr	r3, [pc, #48]	; (800feb8 <tcp_receive+0x5ec>)
 800fe88:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fe8a:	4b0b      	ldr	r3, [pc, #44]	; (800feb8 <tcp_receive+0x5ec>)
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	891a      	ldrh	r2, [r3, #8]
 800fe90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe94:	1ad3      	subs	r3, r2, r3
 800fe96:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fe98:	e02a      	b.n	800fef0 <tcp_receive+0x624>
 800fe9a:	bf00      	nop
 800fe9c:	08019ce0 	.word	0x08019ce0
 800fea0:	08019ce8 	.word	0x08019ce8
 800fea4:	2000c838 	.word	0x2000c838
 800fea8:	2000c834 	.word	0x2000c834
 800feac:	2000c7f8 	.word	0x2000c7f8
 800feb0:	2000c83a 	.word	0x2000c83a
 800feb4:	2000c830 	.word	0x2000c830
 800feb8:	2000c810 	.word	0x2000c810
 800febc:	08019978 	.word	0x08019978
 800fec0:	08019cf0 	.word	0x08019cf0
 800fec4:	080199c4 	.word	0x080199c4
 800fec8:	08019d00 	.word	0x08019d00
 800fecc:	08019d10 	.word	0x08019d10
        off -= p->len;
 800fed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fed2:	895b      	ldrh	r3, [r3, #10]
 800fed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fee0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fee2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fee6:	2200      	movs	r2, #0
 800fee8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800feea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fef2:	895b      	ldrh	r3, [r3, #10]
 800fef4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d8e9      	bhi.n	800fed0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fefc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff00:	4619      	mov	r1, r3
 800ff02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff04:	f7fc f8d8 	bl	800c0b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0c:	4a91      	ldr	r2, [pc, #580]	; (8010154 <tcp_receive+0x888>)
 800ff0e:	6013      	str	r3, [r2, #0]
 800ff10:	4b91      	ldr	r3, [pc, #580]	; (8010158 <tcp_receive+0x88c>)
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	4a8f      	ldr	r2, [pc, #572]	; (8010154 <tcp_receive+0x888>)
 800ff16:	6812      	ldr	r2, [r2, #0]
 800ff18:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff1a:	e00d      	b.n	800ff38 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff1c:	4b8d      	ldr	r3, [pc, #564]	; (8010154 <tcp_receive+0x888>)
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da06      	bge.n	800ff38 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	8b5b      	ldrh	r3, [r3, #26]
 800ff2e:	f043 0302 	orr.w	r3, r3, #2
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff38:	4b86      	ldr	r3, [pc, #536]	; (8010154 <tcp_receive+0x888>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f2c0 842a 	blt.w	801079c <tcp_receive+0xed0>
 800ff48:	4b82      	ldr	r3, [pc, #520]	; (8010154 <tcp_receive+0x888>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	6879      	ldr	r1, [r7, #4]
 800ff52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff54:	440b      	add	r3, r1
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	3301      	adds	r3, #1
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f300 841e 	bgt.w	801079c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff64:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <tcp_receive+0x888>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	f040 829a 	bne.w	80104a2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ff6e:	4b7a      	ldr	r3, [pc, #488]	; (8010158 <tcp_receive+0x88c>)
 800ff70:	891c      	ldrh	r4, [r3, #8]
 800ff72:	4b79      	ldr	r3, [pc, #484]	; (8010158 <tcp_receive+0x88c>)
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	899b      	ldrh	r3, [r3, #12]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fa fd30 	bl	800a9e0 <lwip_htons>
 800ff80:	4603      	mov	r3, r0
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 0303 	and.w	r3, r3, #3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d001      	beq.n	800ff90 <tcp_receive+0x6c4>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <tcp_receive+0x6c6>
 800ff90:	2300      	movs	r3, #0
 800ff92:	4423      	add	r3, r4
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	4b71      	ldr	r3, [pc, #452]	; (801015c <tcp_receive+0x890>)
 800ff98:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff9e:	4b6f      	ldr	r3, [pc, #444]	; (801015c <tcp_receive+0x890>)
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d275      	bcs.n	8010092 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffa6:	4b6c      	ldr	r3, [pc, #432]	; (8010158 <tcp_receive+0x88c>)
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	899b      	ldrh	r3, [r3, #12]
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fa fd16 	bl	800a9e0 <lwip_htons>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d01f      	beq.n	8010000 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ffc0:	4b65      	ldr	r3, [pc, #404]	; (8010158 <tcp_receive+0x88c>)
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	899b      	ldrh	r3, [r3, #12]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	b21b      	sxth	r3, r3
 800ffca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ffce:	b21c      	sxth	r4, r3
 800ffd0:	4b61      	ldr	r3, [pc, #388]	; (8010158 <tcp_receive+0x88c>)
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	899b      	ldrh	r3, [r3, #12]
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fa fd01 	bl	800a9e0 <lwip_htons>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fa fcf8 	bl	800a9e0 <lwip_htons>
 800fff0:	4603      	mov	r3, r0
 800fff2:	b21b      	sxth	r3, r3
 800fff4:	4323      	orrs	r3, r4
 800fff6:	b21a      	sxth	r2, r3
 800fff8:	4b57      	ldr	r3, [pc, #348]	; (8010158 <tcp_receive+0x88c>)
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	b292      	uxth	r2, r2
 800fffe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010004:	4b54      	ldr	r3, [pc, #336]	; (8010158 <tcp_receive+0x88c>)
 8010006:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010008:	4b53      	ldr	r3, [pc, #332]	; (8010158 <tcp_receive+0x88c>)
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	899b      	ldrh	r3, [r3, #12]
 801000e:	b29b      	uxth	r3, r3
 8010010:	4618      	mov	r0, r3
 8010012:	f7fa fce5 	bl	800a9e0 <lwip_htons>
 8010016:	4603      	mov	r3, r0
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f003 0302 	and.w	r3, r3, #2
 801001e:	2b00      	cmp	r3, #0
 8010020:	d005      	beq.n	801002e <tcp_receive+0x762>
            inseg.len -= 1;
 8010022:	4b4d      	ldr	r3, [pc, #308]	; (8010158 <tcp_receive+0x88c>)
 8010024:	891b      	ldrh	r3, [r3, #8]
 8010026:	3b01      	subs	r3, #1
 8010028:	b29a      	uxth	r2, r3
 801002a:	4b4b      	ldr	r3, [pc, #300]	; (8010158 <tcp_receive+0x88c>)
 801002c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801002e:	4b4a      	ldr	r3, [pc, #296]	; (8010158 <tcp_receive+0x88c>)
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	4a49      	ldr	r2, [pc, #292]	; (8010158 <tcp_receive+0x88c>)
 8010034:	8912      	ldrh	r2, [r2, #8]
 8010036:	4611      	mov	r1, r2
 8010038:	4618      	mov	r0, r3
 801003a:	f7fb ff3d 	bl	800beb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801003e:	4b46      	ldr	r3, [pc, #280]	; (8010158 <tcp_receive+0x88c>)
 8010040:	891c      	ldrh	r4, [r3, #8]
 8010042:	4b45      	ldr	r3, [pc, #276]	; (8010158 <tcp_receive+0x88c>)
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	899b      	ldrh	r3, [r3, #12]
 8010048:	b29b      	uxth	r3, r3
 801004a:	4618      	mov	r0, r3
 801004c:	f7fa fcc8 	bl	800a9e0 <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	b2db      	uxtb	r3, r3
 8010054:	f003 0303 	and.w	r3, r3, #3
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <tcp_receive+0x794>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <tcp_receive+0x796>
 8010060:	2300      	movs	r3, #0
 8010062:	4423      	add	r3, r4
 8010064:	b29a      	uxth	r2, r3
 8010066:	4b3d      	ldr	r3, [pc, #244]	; (801015c <tcp_receive+0x890>)
 8010068:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801006a:	4b3c      	ldr	r3, [pc, #240]	; (801015c <tcp_receive+0x890>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	4b38      	ldr	r3, [pc, #224]	; (8010154 <tcp_receive+0x888>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	441a      	add	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007a:	6879      	ldr	r1, [r7, #4]
 801007c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801007e:	440b      	add	r3, r1
 8010080:	429a      	cmp	r2, r3
 8010082:	d006      	beq.n	8010092 <tcp_receive+0x7c6>
 8010084:	4b36      	ldr	r3, [pc, #216]	; (8010160 <tcp_receive+0x894>)
 8010086:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801008a:	4936      	ldr	r1, [pc, #216]	; (8010164 <tcp_receive+0x898>)
 801008c:	4836      	ldr	r0, [pc, #216]	; (8010168 <tcp_receive+0x89c>)
 801008e:	f006 f94b 	bl	8016328 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010096:	2b00      	cmp	r3, #0
 8010098:	f000 80e7 	beq.w	801026a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801009c:	4b2e      	ldr	r3, [pc, #184]	; (8010158 <tcp_receive+0x88c>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	899b      	ldrh	r3, [r3, #12]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fa fc9b 	bl	800a9e0 <lwip_htons>
 80100aa:	4603      	mov	r3, r0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	f003 0301 	and.w	r3, r3, #1
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d010      	beq.n	80100d8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80100b6:	e00a      	b.n	80100ce <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f7fd fcc4 	bl	800da56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1f0      	bne.n	80100b8 <tcp_receive+0x7ec>
 80100d6:	e0c8      	b.n	801026a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100dc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80100de:	e052      	b.n	8010186 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80100e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	899b      	ldrh	r3, [r3, #12]
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fa fc79 	bl	800a9e0 <lwip_htons>
 80100ee:	4603      	mov	r3, r0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	f003 0301 	and.w	r3, r3, #1
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d03d      	beq.n	8010176 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80100fa:	4b17      	ldr	r3, [pc, #92]	; (8010158 <tcp_receive+0x88c>)
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	899b      	ldrh	r3, [r3, #12]
 8010100:	b29b      	uxth	r3, r3
 8010102:	4618      	mov	r0, r3
 8010104:	f7fa fc6c 	bl	800a9e0 <lwip_htons>
 8010108:	4603      	mov	r3, r0
 801010a:	b2db      	uxtb	r3, r3
 801010c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010110:	2b00      	cmp	r3, #0
 8010112:	d130      	bne.n	8010176 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010114:	4b10      	ldr	r3, [pc, #64]	; (8010158 <tcp_receive+0x88c>)
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	899b      	ldrh	r3, [r3, #12]
 801011a:	b29c      	uxth	r4, r3
 801011c:	2001      	movs	r0, #1
 801011e:	f7fa fc5f 	bl	800a9e0 <lwip_htons>
 8010122:	4603      	mov	r3, r0
 8010124:	461a      	mov	r2, r3
 8010126:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <tcp_receive+0x88c>)
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	4322      	orrs	r2, r4
 801012c:	b292      	uxth	r2, r2
 801012e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010130:	4b09      	ldr	r3, [pc, #36]	; (8010158 <tcp_receive+0x88c>)
 8010132:	891c      	ldrh	r4, [r3, #8]
 8010134:	4b08      	ldr	r3, [pc, #32]	; (8010158 <tcp_receive+0x88c>)
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	899b      	ldrh	r3, [r3, #12]
 801013a:	b29b      	uxth	r3, r3
 801013c:	4618      	mov	r0, r3
 801013e:	f7fa fc4f 	bl	800a9e0 <lwip_htons>
 8010142:	4603      	mov	r3, r0
 8010144:	b2db      	uxtb	r3, r3
 8010146:	f003 0303 	and.w	r3, r3, #3
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00e      	beq.n	801016c <tcp_receive+0x8a0>
 801014e:	2301      	movs	r3, #1
 8010150:	e00d      	b.n	801016e <tcp_receive+0x8a2>
 8010152:	bf00      	nop
 8010154:	2000c830 	.word	0x2000c830
 8010158:	2000c810 	.word	0x2000c810
 801015c:	2000c83a 	.word	0x2000c83a
 8010160:	08019978 	.word	0x08019978
 8010164:	08019d20 	.word	0x08019d20
 8010168:	080199c4 	.word	0x080199c4
 801016c:	2300      	movs	r3, #0
 801016e:	4423      	add	r3, r4
 8010170:	b29a      	uxth	r2, r3
 8010172:	4b98      	ldr	r3, [pc, #608]	; (80103d4 <tcp_receive+0xb08>)
 8010174:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010178:	613b      	str	r3, [r7, #16]
              next = next->next;
 801017a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010180:	6938      	ldr	r0, [r7, #16]
 8010182:	f7fd fc68 	bl	800da56 <tcp_seg_free>
            while (next &&
 8010186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00e      	beq.n	80101aa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801018c:	4b91      	ldr	r3, [pc, #580]	; (80103d4 <tcp_receive+0xb08>)
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	4b91      	ldr	r3, [pc, #580]	; (80103d8 <tcp_receive+0xb0c>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	441a      	add	r2, r3
 8010198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101a0:	8909      	ldrh	r1, [r1, #8]
 80101a2:	440b      	add	r3, r1
 80101a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	da9a      	bge.n	80100e0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80101aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d059      	beq.n	8010264 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80101b0:	4b88      	ldr	r3, [pc, #544]	; (80103d4 <tcp_receive+0xb08>)
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	461a      	mov	r2, r3
 80101b6:	4b88      	ldr	r3, [pc, #544]	; (80103d8 <tcp_receive+0xb0c>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	441a      	add	r2, r3
 80101bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	dd4d      	ble.n	8010264 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80101c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	4b81      	ldr	r3, [pc, #516]	; (80103d8 <tcp_receive+0xb0c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	b29a      	uxth	r2, r3
 80101da:	4b80      	ldr	r3, [pc, #512]	; (80103dc <tcp_receive+0xb10>)
 80101dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80101de:	4b7f      	ldr	r3, [pc, #508]	; (80103dc <tcp_receive+0xb10>)
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fa fbfa 	bl	800a9e0 <lwip_htons>
 80101ec:	4603      	mov	r3, r0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	f003 0302 	and.w	r3, r3, #2
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d005      	beq.n	8010204 <tcp_receive+0x938>
                inseg.len -= 1;
 80101f8:	4b78      	ldr	r3, [pc, #480]	; (80103dc <tcp_receive+0xb10>)
 80101fa:	891b      	ldrh	r3, [r3, #8]
 80101fc:	3b01      	subs	r3, #1
 80101fe:	b29a      	uxth	r2, r3
 8010200:	4b76      	ldr	r3, [pc, #472]	; (80103dc <tcp_receive+0xb10>)
 8010202:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010204:	4b75      	ldr	r3, [pc, #468]	; (80103dc <tcp_receive+0xb10>)
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	4a74      	ldr	r2, [pc, #464]	; (80103dc <tcp_receive+0xb10>)
 801020a:	8912      	ldrh	r2, [r2, #8]
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7fb fe52 	bl	800beb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010214:	4b71      	ldr	r3, [pc, #452]	; (80103dc <tcp_receive+0xb10>)
 8010216:	891c      	ldrh	r4, [r3, #8]
 8010218:	4b70      	ldr	r3, [pc, #448]	; (80103dc <tcp_receive+0xb10>)
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	899b      	ldrh	r3, [r3, #12]
 801021e:	b29b      	uxth	r3, r3
 8010220:	4618      	mov	r0, r3
 8010222:	f7fa fbdd 	bl	800a9e0 <lwip_htons>
 8010226:	4603      	mov	r3, r0
 8010228:	b2db      	uxtb	r3, r3
 801022a:	f003 0303 	and.w	r3, r3, #3
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <tcp_receive+0x96a>
 8010232:	2301      	movs	r3, #1
 8010234:	e000      	b.n	8010238 <tcp_receive+0x96c>
 8010236:	2300      	movs	r3, #0
 8010238:	4423      	add	r3, r4
 801023a:	b29a      	uxth	r2, r3
 801023c:	4b65      	ldr	r3, [pc, #404]	; (80103d4 <tcp_receive+0xb08>)
 801023e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010240:	4b64      	ldr	r3, [pc, #400]	; (80103d4 <tcp_receive+0xb08>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	461a      	mov	r2, r3
 8010246:	4b64      	ldr	r3, [pc, #400]	; (80103d8 <tcp_receive+0xb0c>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	441a      	add	r2, r3
 801024c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	429a      	cmp	r2, r3
 8010254:	d006      	beq.n	8010264 <tcp_receive+0x998>
 8010256:	4b62      	ldr	r3, [pc, #392]	; (80103e0 <tcp_receive+0xb14>)
 8010258:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801025c:	4961      	ldr	r1, [pc, #388]	; (80103e4 <tcp_receive+0xb18>)
 801025e:	4862      	ldr	r0, [pc, #392]	; (80103e8 <tcp_receive+0xb1c>)
 8010260:	f006 f862 	bl	8016328 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010268:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801026a:	4b5a      	ldr	r3, [pc, #360]	; (80103d4 <tcp_receive+0xb08>)
 801026c:	881b      	ldrh	r3, [r3, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	4b59      	ldr	r3, [pc, #356]	; (80103d8 <tcp_receive+0xb0c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	441a      	add	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801027e:	4b55      	ldr	r3, [pc, #340]	; (80103d4 <tcp_receive+0xb08>)
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	d206      	bcs.n	8010294 <tcp_receive+0x9c8>
 8010286:	4b56      	ldr	r3, [pc, #344]	; (80103e0 <tcp_receive+0xb14>)
 8010288:	f240 6207 	movw	r2, #1543	; 0x607
 801028c:	4957      	ldr	r1, [pc, #348]	; (80103ec <tcp_receive+0xb20>)
 801028e:	4856      	ldr	r0, [pc, #344]	; (80103e8 <tcp_receive+0xb1c>)
 8010290:	f006 f84a 	bl	8016328 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010298:	4b4e      	ldr	r3, [pc, #312]	; (80103d4 <tcp_receive+0xb08>)
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	b29a      	uxth	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7fc fd99 	bl	800cddc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80102aa:	4b4c      	ldr	r3, [pc, #304]	; (80103dc <tcp_receive+0xb10>)
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	891b      	ldrh	r3, [r3, #8]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d006      	beq.n	80102c2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80102b4:	4b49      	ldr	r3, [pc, #292]	; (80103dc <tcp_receive+0xb10>)
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	4a4d      	ldr	r2, [pc, #308]	; (80103f0 <tcp_receive+0xb24>)
 80102ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80102bc:	4b47      	ldr	r3, [pc, #284]	; (80103dc <tcp_receive+0xb10>)
 80102be:	2200      	movs	r2, #0
 80102c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80102c2:	4b46      	ldr	r3, [pc, #280]	; (80103dc <tcp_receive+0xb10>)
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	899b      	ldrh	r3, [r3, #12]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fa fb88 	bl	800a9e0 <lwip_htons>
 80102d0:	4603      	mov	r3, r0
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	f003 0301 	and.w	r3, r3, #1
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 80b8 	beq.w	801044e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80102de:	4b45      	ldr	r3, [pc, #276]	; (80103f4 <tcp_receive+0xb28>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	f043 0320 	orr.w	r3, r3, #32
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	4b42      	ldr	r3, [pc, #264]	; (80103f4 <tcp_receive+0xb28>)
 80102ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80102ec:	e0af      	b.n	801044e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	4a36      	ldr	r2, [pc, #216]	; (80103d8 <tcp_receive+0xb0c>)
 80102fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	891b      	ldrh	r3, [r3, #8]
 8010304:	461c      	mov	r4, r3
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	899b      	ldrh	r3, [r3, #12]
 801030c:	b29b      	uxth	r3, r3
 801030e:	4618      	mov	r0, r3
 8010310:	f7fa fb66 	bl	800a9e0 <lwip_htons>
 8010314:	4603      	mov	r3, r0
 8010316:	b2db      	uxtb	r3, r3
 8010318:	f003 0303 	and.w	r3, r3, #3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d001      	beq.n	8010324 <tcp_receive+0xa58>
 8010320:	2301      	movs	r3, #1
 8010322:	e000      	b.n	8010326 <tcp_receive+0xa5a>
 8010324:	2300      	movs	r3, #0
 8010326:	191a      	adds	r2, r3, r4
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032c:	441a      	add	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010336:	461c      	mov	r4, r3
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	891b      	ldrh	r3, [r3, #8]
 801033c:	461d      	mov	r5, r3
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	899b      	ldrh	r3, [r3, #12]
 8010344:	b29b      	uxth	r3, r3
 8010346:	4618      	mov	r0, r3
 8010348:	f7fa fb4a 	bl	800a9e0 <lwip_htons>
 801034c:	4603      	mov	r3, r0
 801034e:	b2db      	uxtb	r3, r3
 8010350:	f003 0303 	and.w	r3, r3, #3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <tcp_receive+0xa90>
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <tcp_receive+0xa92>
 801035c:	2300      	movs	r3, #0
 801035e:	442b      	add	r3, r5
 8010360:	429c      	cmp	r4, r3
 8010362:	d206      	bcs.n	8010372 <tcp_receive+0xaa6>
 8010364:	4b1e      	ldr	r3, [pc, #120]	; (80103e0 <tcp_receive+0xb14>)
 8010366:	f240 622b 	movw	r2, #1579	; 0x62b
 801036a:	4923      	ldr	r1, [pc, #140]	; (80103f8 <tcp_receive+0xb2c>)
 801036c:	481e      	ldr	r0, [pc, #120]	; (80103e8 <tcp_receive+0xb1c>)
 801036e:	f005 ffdb 	bl	8016328 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	891b      	ldrh	r3, [r3, #8]
 8010376:	461c      	mov	r4, r3
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	899b      	ldrh	r3, [r3, #12]
 801037e:	b29b      	uxth	r3, r3
 8010380:	4618      	mov	r0, r3
 8010382:	f7fa fb2d 	bl	800a9e0 <lwip_htons>
 8010386:	4603      	mov	r3, r0
 8010388:	b2db      	uxtb	r3, r3
 801038a:	f003 0303 	and.w	r3, r3, #3
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <tcp_receive+0xaca>
 8010392:	2301      	movs	r3, #1
 8010394:	e000      	b.n	8010398 <tcp_receive+0xacc>
 8010396:	2300      	movs	r3, #0
 8010398:	1919      	adds	r1, r3, r4
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801039e:	b28b      	uxth	r3, r1
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7fc fd17 	bl	800cddc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	891b      	ldrh	r3, [r3, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d028      	beq.n	801040a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80103b8:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <tcp_receive+0xb24>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d01d      	beq.n	80103fc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <tcp_receive+0xb24>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	4619      	mov	r1, r3
 80103ca:	4610      	mov	r0, r2
 80103cc:	f7fb ffc8 	bl	800c360 <pbuf_cat>
 80103d0:	e018      	b.n	8010404 <tcp_receive+0xb38>
 80103d2:	bf00      	nop
 80103d4:	2000c83a 	.word	0x2000c83a
 80103d8:	2000c830 	.word	0x2000c830
 80103dc:	2000c810 	.word	0x2000c810
 80103e0:	08019978 	.word	0x08019978
 80103e4:	08019d58 	.word	0x08019d58
 80103e8:	080199c4 	.word	0x080199c4
 80103ec:	08019d94 	.word	0x08019d94
 80103f0:	2000c840 	.word	0x2000c840
 80103f4:	2000c83d 	.word	0x2000c83d
 80103f8:	08019db4 	.word	0x08019db4
            } else {
              recv_data = cseg->p;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	4a70      	ldr	r2, [pc, #448]	; (80105c4 <tcp_receive+0xcf8>)
 8010402:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	2200      	movs	r2, #0
 8010408:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	899b      	ldrh	r3, [r3, #12]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4618      	mov	r0, r3
 8010414:	f7fa fae4 	bl	800a9e0 <lwip_htons>
 8010418:	4603      	mov	r3, r0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00d      	beq.n	8010440 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010424:	4b68      	ldr	r3, [pc, #416]	; (80105c8 <tcp_receive+0xcfc>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f043 0320 	orr.w	r3, r3, #32
 801042c:	b2da      	uxtb	r2, r3
 801042e:	4b66      	ldr	r3, [pc, #408]	; (80105c8 <tcp_receive+0xcfc>)
 8010430:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7d1b      	ldrb	r3, [r3, #20]
 8010436:	2b04      	cmp	r3, #4
 8010438:	d102      	bne.n	8010440 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2207      	movs	r2, #7
 801043e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010448:	68b8      	ldr	r0, [r7, #8]
 801044a:	f7fd fb04 	bl	800da56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010452:	2b00      	cmp	r3, #0
 8010454:	d008      	beq.n	8010468 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	685a      	ldr	r2, [r3, #4]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010462:	429a      	cmp	r2, r3
 8010464:	f43f af43 	beq.w	80102ee <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00e      	beq.n	8010492 <tcp_receive+0xbc6>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	8b5b      	ldrh	r3, [r3, #26]
 8010478:	f023 0301 	bic.w	r3, r3, #1
 801047c:	b29a      	uxth	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	835a      	strh	r2, [r3, #26]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	8b5b      	ldrh	r3, [r3, #26]
 8010486:	f043 0302 	orr.w	r3, r3, #2
 801048a:	b29a      	uxth	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010490:	e188      	b.n	80107a4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	8b5b      	ldrh	r3, [r3, #26]
 8010496:	f043 0301 	orr.w	r3, r3, #1
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80104a0:	e180      	b.n	80107a4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d106      	bne.n	80104b8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80104aa:	4848      	ldr	r0, [pc, #288]	; (80105cc <tcp_receive+0xd00>)
 80104ac:	f7fd faec 	bl	800da88 <tcp_seg_copy>
 80104b0:	4602      	mov	r2, r0
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	675a      	str	r2, [r3, #116]	; 0x74
 80104b6:	e16d      	b.n	8010794 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80104b8:	2300      	movs	r3, #0
 80104ba:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80104c2:	e157      	b.n	8010774 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	685a      	ldr	r2, [r3, #4]
 80104ca:	4b41      	ldr	r3, [pc, #260]	; (80105d0 <tcp_receive+0xd04>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d11d      	bne.n	801050e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80104d2:	4b3e      	ldr	r3, [pc, #248]	; (80105cc <tcp_receive+0xd00>)
 80104d4:	891a      	ldrh	r2, [r3, #8]
 80104d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	429a      	cmp	r2, r3
 80104dc:	f240 814f 	bls.w	801077e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80104e0:	483a      	ldr	r0, [pc, #232]	; (80105cc <tcp_receive+0xd00>)
 80104e2:	f7fd fad1 	bl	800da88 <tcp_seg_copy>
 80104e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 8149 	beq.w	8010782 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80104f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d003      	beq.n	80104fe <tcp_receive+0xc32>
                    prev->next = cseg;
 80104f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	601a      	str	r2, [r3, #0]
 80104fc:	e002      	b.n	8010504 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010506:	6978      	ldr	r0, [r7, #20]
 8010508:	f7ff f8dc 	bl	800f6c4 <tcp_oos_insert_segment>
                }
                break;
 801050c:	e139      	b.n	8010782 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	2b00      	cmp	r3, #0
 8010512:	d117      	bne.n	8010544 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010514:	4b2e      	ldr	r3, [pc, #184]	; (80105d0 <tcp_receive+0xd04>)
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	2b00      	cmp	r3, #0
 8010522:	da57      	bge.n	80105d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010524:	4829      	ldr	r0, [pc, #164]	; (80105cc <tcp_receive+0xd00>)
 8010526:	f7fd faaf 	bl	800da88 <tcp_seg_copy>
 801052a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 8129 	beq.w	8010786 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801053a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801053c:	69b8      	ldr	r0, [r7, #24]
 801053e:	f7ff f8c1 	bl	800f6c4 <tcp_oos_insert_segment>
                  }
                  break;
 8010542:	e120      	b.n	8010786 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010544:	4b22      	ldr	r3, [pc, #136]	; (80105d0 <tcp_receive+0xd04>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	3b01      	subs	r3, #1
 8010552:	2b00      	cmp	r3, #0
 8010554:	db3e      	blt.n	80105d4 <tcp_receive+0xd08>
 8010556:	4b1e      	ldr	r3, [pc, #120]	; (80105d0 <tcp_receive+0xd04>)
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	3301      	adds	r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	dc35      	bgt.n	80105d4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010568:	4818      	ldr	r0, [pc, #96]	; (80105cc <tcp_receive+0xd00>)
 801056a:	f7fd fa8d 	bl	800da88 <tcp_seg_copy>
 801056e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 8109 	beq.w	801078a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010580:	8912      	ldrh	r2, [r2, #8]
 8010582:	441a      	add	r2, r3
 8010584:	4b12      	ldr	r3, [pc, #72]	; (80105d0 <tcp_receive+0xd04>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	dd12      	ble.n	80105b4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801058e:	4b10      	ldr	r3, [pc, #64]	; (80105d0 <tcp_receive+0xd04>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	b29a      	uxth	r2, r3
 8010594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	b29b      	uxth	r3, r3
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	b29a      	uxth	r2, r3
 80105a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80105a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	891b      	ldrh	r3, [r3, #8]
 80105ac:	4619      	mov	r1, r3
 80105ae:	4610      	mov	r0, r2
 80105b0:	f7fb fc82 	bl	800beb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80105b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b6:	69fa      	ldr	r2, [r7, #28]
 80105b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80105ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105bc:	69f8      	ldr	r0, [r7, #28]
 80105be:	f7ff f881 	bl	800f6c4 <tcp_oos_insert_segment>
                  }
                  break;
 80105c2:	e0e2      	b.n	801078a <tcp_receive+0xebe>
 80105c4:	2000c840 	.word	0x2000c840
 80105c8:	2000c83d 	.word	0x2000c83d
 80105cc:	2000c810 	.word	0x2000c810
 80105d0:	2000c830 	.word	0x2000c830
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f040 80c6 	bne.w	801076e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80105e2:	4b80      	ldr	r3, [pc, #512]	; (80107e4 <tcp_receive+0xf18>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f340 80bd 	ble.w	801076e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80105f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	899b      	ldrh	r3, [r3, #12]
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fa f9ef 	bl	800a9e0 <lwip_htons>
 8010602:	4603      	mov	r3, r0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	f003 0301 	and.w	r3, r3, #1
 801060a:	2b00      	cmp	r3, #0
 801060c:	f040 80bf 	bne.w	801078e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010610:	4875      	ldr	r0, [pc, #468]	; (80107e8 <tcp_receive+0xf1c>)
 8010612:	f7fd fa39 	bl	800da88 <tcp_seg_copy>
 8010616:	4602      	mov	r2, r0
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801061c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	f000 80b6 	beq.w	8010792 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801062e:	8912      	ldrh	r2, [r2, #8]
 8010630:	441a      	add	r2, r3
 8010632:	4b6c      	ldr	r3, [pc, #432]	; (80107e4 <tcp_receive+0xf18>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	dd12      	ble.n	8010662 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801063c:	4b69      	ldr	r3, [pc, #420]	; (80107e4 <tcp_receive+0xf18>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	b29a      	uxth	r2, r3
 8010642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	b29b      	uxth	r3, r3
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	b29a      	uxth	r2, r3
 801064e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010650:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010654:	685a      	ldr	r2, [r3, #4]
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	891b      	ldrh	r3, [r3, #8]
 801065a:	4619      	mov	r1, r3
 801065c:	4610      	mov	r0, r2
 801065e:	f7fb fc2b 	bl	800beb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010662:	4b62      	ldr	r3, [pc, #392]	; (80107ec <tcp_receive+0xf20>)
 8010664:	881b      	ldrh	r3, [r3, #0]
 8010666:	461a      	mov	r2, r3
 8010668:	4b5e      	ldr	r3, [pc, #376]	; (80107e4 <tcp_receive+0xf18>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	441a      	add	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010672:	6879      	ldr	r1, [r7, #4]
 8010674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010676:	440b      	add	r3, r1
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	f340 8089 	ble.w	8010792 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	899b      	ldrh	r3, [r3, #12]
 8010688:	b29b      	uxth	r3, r3
 801068a:	4618      	mov	r0, r3
 801068c:	f7fa f9a8 	bl	800a9e0 <lwip_htons>
 8010690:	4603      	mov	r3, r0
 8010692:	b2db      	uxtb	r3, r3
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	2b00      	cmp	r3, #0
 801069a:	d022      	beq.n	80106e2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	899b      	ldrh	r3, [r3, #12]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	b21b      	sxth	r3, r3
 80106a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80106ac:	b21c      	sxth	r4, r3
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	899b      	ldrh	r3, [r3, #12]
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fa f991 	bl	800a9e0 <lwip_htons>
 80106be:	4603      	mov	r3, r0
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fa f988 	bl	800a9e0 <lwip_htons>
 80106d0:	4603      	mov	r3, r0
 80106d2:	b21b      	sxth	r3, r3
 80106d4:	4323      	orrs	r3, r4
 80106d6:	b21a      	sxth	r2, r3
 80106d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	b292      	uxth	r2, r2
 80106e0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106ec:	4413      	add	r3, r2
 80106ee:	b299      	uxth	r1, r3
 80106f0:	4b3c      	ldr	r3, [pc, #240]	; (80107e4 <tcp_receive+0xf18>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	1a8a      	subs	r2, r1, r2
 80106fc:	b292      	uxth	r2, r2
 80106fe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	891b      	ldrh	r3, [r3, #8]
 801070c:	4619      	mov	r1, r3
 801070e:	4610      	mov	r0, r2
 8010710:	f7fb fbd2 	bl	800beb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	891c      	ldrh	r4, [r3, #8]
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	899b      	ldrh	r3, [r3, #12]
 8010722:	b29b      	uxth	r3, r3
 8010724:	4618      	mov	r0, r3
 8010726:	f7fa f95b 	bl	800a9e0 <lwip_htons>
 801072a:	4603      	mov	r3, r0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	f003 0303 	and.w	r3, r3, #3
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <tcp_receive+0xe6e>
 8010736:	2301      	movs	r3, #1
 8010738:	e000      	b.n	801073c <tcp_receive+0xe70>
 801073a:	2300      	movs	r3, #0
 801073c:	4423      	add	r3, r4
 801073e:	b29a      	uxth	r2, r3
 8010740:	4b2a      	ldr	r3, [pc, #168]	; (80107ec <tcp_receive+0xf20>)
 8010742:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010744:	4b29      	ldr	r3, [pc, #164]	; (80107ec <tcp_receive+0xf20>)
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	461a      	mov	r2, r3
 801074a:	4b26      	ldr	r3, [pc, #152]	; (80107e4 <tcp_receive+0xf18>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	441a      	add	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010754:	6879      	ldr	r1, [r7, #4]
 8010756:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010758:	440b      	add	r3, r1
 801075a:	429a      	cmp	r2, r3
 801075c:	d019      	beq.n	8010792 <tcp_receive+0xec6>
 801075e:	4b24      	ldr	r3, [pc, #144]	; (80107f0 <tcp_receive+0xf24>)
 8010760:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010764:	4923      	ldr	r1, [pc, #140]	; (80107f4 <tcp_receive+0xf28>)
 8010766:	4824      	ldr	r0, [pc, #144]	; (80107f8 <tcp_receive+0xf2c>)
 8010768:	f005 fdde 	bl	8016328 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801076c:	e011      	b.n	8010792 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	63bb      	str	r3, [r7, #56]	; 0x38
 8010774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010776:	2b00      	cmp	r3, #0
 8010778:	f47f aea4 	bne.w	80104c4 <tcp_receive+0xbf8>
 801077c:	e00a      	b.n	8010794 <tcp_receive+0xec8>
                break;
 801077e:	bf00      	nop
 8010780:	e008      	b.n	8010794 <tcp_receive+0xec8>
                break;
 8010782:	bf00      	nop
 8010784:	e006      	b.n	8010794 <tcp_receive+0xec8>
                  break;
 8010786:	bf00      	nop
 8010788:	e004      	b.n	8010794 <tcp_receive+0xec8>
                  break;
 801078a:	bf00      	nop
 801078c:	e002      	b.n	8010794 <tcp_receive+0xec8>
                  break;
 801078e:	bf00      	nop
 8010790:	e000      	b.n	8010794 <tcp_receive+0xec8>
                break;
 8010792:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f001 fe8b 	bl	80124b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801079a:	e003      	b.n	80107a4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f001 fe87 	bl	80124b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107a2:	e01a      	b.n	80107da <tcp_receive+0xf0e>
 80107a4:	e019      	b.n	80107da <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80107a6:	4b0f      	ldr	r3, [pc, #60]	; (80107e4 <tcp_receive+0xf18>)
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	db0a      	blt.n	80107ca <tcp_receive+0xefe>
 80107b4:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <tcp_receive+0xf18>)
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107c0:	440b      	add	r3, r1
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	3301      	adds	r3, #1
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	dd07      	ble.n	80107da <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	8b5b      	ldrh	r3, [r3, #26]
 80107ce:	f043 0302 	orr.w	r3, r3, #2
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80107d8:	e7ff      	b.n	80107da <tcp_receive+0xf0e>
 80107da:	bf00      	nop
 80107dc:	3750      	adds	r7, #80	; 0x50
 80107de:	46bd      	mov	sp, r7
 80107e0:	bdb0      	pop	{r4, r5, r7, pc}
 80107e2:	bf00      	nop
 80107e4:	2000c830 	.word	0x2000c830
 80107e8:	2000c810 	.word	0x2000c810
 80107ec:	2000c83a 	.word	0x2000c83a
 80107f0:	08019978 	.word	0x08019978
 80107f4:	08019d20 	.word	0x08019d20
 80107f8:	080199c4 	.word	0x080199c4

080107fc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010802:	4b15      	ldr	r3, [pc, #84]	; (8010858 <tcp_get_next_optbyte+0x5c>)
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	b291      	uxth	r1, r2
 801080a:	4a13      	ldr	r2, [pc, #76]	; (8010858 <tcp_get_next_optbyte+0x5c>)
 801080c:	8011      	strh	r1, [r2, #0]
 801080e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010810:	4b12      	ldr	r3, [pc, #72]	; (801085c <tcp_get_next_optbyte+0x60>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d004      	beq.n	8010822 <tcp_get_next_optbyte+0x26>
 8010818:	4b11      	ldr	r3, [pc, #68]	; (8010860 <tcp_get_next_optbyte+0x64>)
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	88fa      	ldrh	r2, [r7, #6]
 801081e:	429a      	cmp	r2, r3
 8010820:	d208      	bcs.n	8010834 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010822:	4b10      	ldr	r3, [pc, #64]	; (8010864 <tcp_get_next_optbyte+0x68>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3314      	adds	r3, #20
 8010828:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801082a:	88fb      	ldrh	r3, [r7, #6]
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	4413      	add	r3, r2
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	e00b      	b.n	801084c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	b2da      	uxtb	r2, r3
 8010838:	4b09      	ldr	r3, [pc, #36]	; (8010860 <tcp_get_next_optbyte+0x64>)
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	b2db      	uxtb	r3, r3
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010842:	4b06      	ldr	r3, [pc, #24]	; (801085c <tcp_get_next_optbyte+0x60>)
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	797b      	ldrb	r3, [r7, #5]
 8010848:	4413      	add	r3, r2
 801084a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801084c:	4618      	mov	r0, r3
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	2000c82c 	.word	0x2000c82c
 801085c:	2000c828 	.word	0x2000c828
 8010860:	2000c826 	.word	0x2000c826
 8010864:	2000c820 	.word	0x2000c820

08010868 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d106      	bne.n	8010884 <tcp_parseopt+0x1c>
 8010876:	4b32      	ldr	r3, [pc, #200]	; (8010940 <tcp_parseopt+0xd8>)
 8010878:	f240 727d 	movw	r2, #1917	; 0x77d
 801087c:	4931      	ldr	r1, [pc, #196]	; (8010944 <tcp_parseopt+0xdc>)
 801087e:	4832      	ldr	r0, [pc, #200]	; (8010948 <tcp_parseopt+0xe0>)
 8010880:	f005 fd52 	bl	8016328 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010884:	4b31      	ldr	r3, [pc, #196]	; (801094c <tcp_parseopt+0xe4>)
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d055      	beq.n	8010938 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801088c:	4b30      	ldr	r3, [pc, #192]	; (8010950 <tcp_parseopt+0xe8>)
 801088e:	2200      	movs	r2, #0
 8010890:	801a      	strh	r2, [r3, #0]
 8010892:	e045      	b.n	8010920 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010894:	f7ff ffb2 	bl	80107fc <tcp_get_next_optbyte>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	2b02      	cmp	r3, #2
 80108a0:	d006      	beq.n	80108b0 <tcp_parseopt+0x48>
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	dc2b      	bgt.n	80108fe <tcp_parseopt+0x96>
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d041      	beq.n	801092e <tcp_parseopt+0xc6>
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d127      	bne.n	80108fe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80108ae:	e037      	b.n	8010920 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80108b0:	f7ff ffa4 	bl	80107fc <tcp_get_next_optbyte>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b04      	cmp	r3, #4
 80108b8:	d13b      	bne.n	8010932 <tcp_parseopt+0xca>
 80108ba:	4b25      	ldr	r3, [pc, #148]	; (8010950 <tcp_parseopt+0xe8>)
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	3301      	adds	r3, #1
 80108c0:	4a22      	ldr	r2, [pc, #136]	; (801094c <tcp_parseopt+0xe4>)
 80108c2:	8812      	ldrh	r2, [r2, #0]
 80108c4:	4293      	cmp	r3, r2
 80108c6:	da34      	bge.n	8010932 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80108c8:	f7ff ff98 	bl	80107fc <tcp_get_next_optbyte>
 80108cc:	4603      	mov	r3, r0
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	021b      	lsls	r3, r3, #8
 80108d2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80108d4:	f7ff ff92 	bl	80107fc <tcp_get_next_optbyte>
 80108d8:	4603      	mov	r3, r0
 80108da:	b29a      	uxth	r2, r3
 80108dc:	89bb      	ldrh	r3, [r7, #12]
 80108de:	4313      	orrs	r3, r2
 80108e0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80108e2:	89bb      	ldrh	r3, [r7, #12]
 80108e4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80108e8:	d804      	bhi.n	80108f4 <tcp_parseopt+0x8c>
 80108ea:	89bb      	ldrh	r3, [r7, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <tcp_parseopt+0x8c>
 80108f0:	89ba      	ldrh	r2, [r7, #12]
 80108f2:	e001      	b.n	80108f8 <tcp_parseopt+0x90>
 80108f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80108fc:	e010      	b.n	8010920 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80108fe:	f7ff ff7d 	bl	80107fc <tcp_get_next_optbyte>
 8010902:	4603      	mov	r3, r0
 8010904:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010906:	7afb      	ldrb	r3, [r7, #11]
 8010908:	2b01      	cmp	r3, #1
 801090a:	d914      	bls.n	8010936 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801090c:	7afb      	ldrb	r3, [r7, #11]
 801090e:	b29a      	uxth	r2, r3
 8010910:	4b0f      	ldr	r3, [pc, #60]	; (8010950 <tcp_parseopt+0xe8>)
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	4413      	add	r3, r2
 8010916:	b29b      	uxth	r3, r3
 8010918:	3b02      	subs	r3, #2
 801091a:	b29a      	uxth	r2, r3
 801091c:	4b0c      	ldr	r3, [pc, #48]	; (8010950 <tcp_parseopt+0xe8>)
 801091e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010920:	4b0b      	ldr	r3, [pc, #44]	; (8010950 <tcp_parseopt+0xe8>)
 8010922:	881a      	ldrh	r2, [r3, #0]
 8010924:	4b09      	ldr	r3, [pc, #36]	; (801094c <tcp_parseopt+0xe4>)
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	429a      	cmp	r2, r3
 801092a:	d3b3      	bcc.n	8010894 <tcp_parseopt+0x2c>
 801092c:	e004      	b.n	8010938 <tcp_parseopt+0xd0>
          return;
 801092e:	bf00      	nop
 8010930:	e002      	b.n	8010938 <tcp_parseopt+0xd0>
            return;
 8010932:	bf00      	nop
 8010934:	e000      	b.n	8010938 <tcp_parseopt+0xd0>
            return;
 8010936:	bf00      	nop
      }
    }
  }
}
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	08019978 	.word	0x08019978
 8010944:	08019ddc 	.word	0x08019ddc
 8010948:	080199c4 	.word	0x080199c4
 801094c:	2000c824 	.word	0x2000c824
 8010950:	2000c82c 	.word	0x2000c82c

08010954 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010954:	b480      	push	{r7}
 8010956:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010958:	4b05      	ldr	r3, [pc, #20]	; (8010970 <tcp_trigger_input_pcb_close+0x1c>)
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	f043 0310 	orr.w	r3, r3, #16
 8010960:	b2da      	uxtb	r2, r3
 8010962:	4b03      	ldr	r3, [pc, #12]	; (8010970 <tcp_trigger_input_pcb_close+0x1c>)
 8010964:	701a      	strb	r2, [r3, #0]
}
 8010966:	bf00      	nop
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	2000c83d 	.word	0x2000c83d

08010974 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00a      	beq.n	801099c <tcp_route+0x28>
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	7a1b      	ldrb	r3, [r3, #8]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d006      	beq.n	801099c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	7a1b      	ldrb	r3, [r3, #8]
 8010992:	4618      	mov	r0, r3
 8010994:	f7fb f888 	bl	800baa8 <netif_get_by_index>
 8010998:	4603      	mov	r3, r0
 801099a:	e003      	b.n	80109a4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f003 fecb 	bl	8014738 <ip4_route>
 80109a2:	4603      	mov	r3, r0
  }
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80109ac:	b590      	push	{r4, r7, lr}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	4613      	mov	r3, r2
 80109ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d105      	bne.n	80109ce <tcp_create_segment+0x22>
 80109c2:	4b44      	ldr	r3, [pc, #272]	; (8010ad4 <tcp_create_segment+0x128>)
 80109c4:	22a3      	movs	r2, #163	; 0xa3
 80109c6:	4944      	ldr	r1, [pc, #272]	; (8010ad8 <tcp_create_segment+0x12c>)
 80109c8:	4844      	ldr	r0, [pc, #272]	; (8010adc <tcp_create_segment+0x130>)
 80109ca:	f005 fcad 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d105      	bne.n	80109e0 <tcp_create_segment+0x34>
 80109d4:	4b3f      	ldr	r3, [pc, #252]	; (8010ad4 <tcp_create_segment+0x128>)
 80109d6:	22a4      	movs	r2, #164	; 0xa4
 80109d8:	4941      	ldr	r1, [pc, #260]	; (8010ae0 <tcp_create_segment+0x134>)
 80109da:	4840      	ldr	r0, [pc, #256]	; (8010adc <tcp_create_segment+0x130>)
 80109dc:	f005 fca4 	bl	8016328 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0304 	and.w	r3, r3, #4
 80109ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80109ee:	2003      	movs	r0, #3
 80109f0:	f7fa fcce 	bl	800b390 <memp_malloc>
 80109f4:	6138      	str	r0, [r7, #16]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d104      	bne.n	8010a06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f7fb fbe1 	bl	800c1c4 <pbuf_free>
    return NULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	e061      	b.n	8010aca <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	891a      	ldrh	r2, [r3, #8]
 8010a1e:	7dfb      	ldrb	r3, [r7, #23]
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d205      	bcs.n	8010a32 <tcp_create_segment+0x86>
 8010a26:	4b2b      	ldr	r3, [pc, #172]	; (8010ad4 <tcp_create_segment+0x128>)
 8010a28:	22b0      	movs	r2, #176	; 0xb0
 8010a2a:	492e      	ldr	r1, [pc, #184]	; (8010ae4 <tcp_create_segment+0x138>)
 8010a2c:	482b      	ldr	r0, [pc, #172]	; (8010adc <tcp_create_segment+0x130>)
 8010a2e:	f005 fc7b 	bl	8016328 <iprintf>
  seg->len = p->tot_len - optlen;
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	891a      	ldrh	r2, [r3, #8]
 8010a36:	7dfb      	ldrb	r3, [r7, #23]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010a42:	2114      	movs	r1, #20
 8010a44:	68b8      	ldr	r0, [r7, #8]
 8010a46:	f7fb fb27 	bl	800c098 <pbuf_add_header>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d004      	beq.n	8010a5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010a50:	6938      	ldr	r0, [r7, #16]
 8010a52:	f7fd f800 	bl	800da56 <tcp_seg_free>
    return NULL;
 8010a56:	2300      	movs	r3, #0
 8010a58:	e037      	b.n	8010aca <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8ada      	ldrh	r2, [r3, #22]
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	68dc      	ldr	r4, [r3, #12]
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	f7f9 ffb7 	bl	800a9e0 <lwip_htons>
 8010a72:	4603      	mov	r3, r0
 8010a74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	8b1a      	ldrh	r2, [r3, #24]
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	68dc      	ldr	r4, [r3, #12]
 8010a7e:	4610      	mov	r0, r2
 8010a80:	f7f9 ffae 	bl	800a9e0 <lwip_htons>
 8010a84:	4603      	mov	r3, r0
 8010a86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	68dc      	ldr	r4, [r3, #12]
 8010a8c:	6838      	ldr	r0, [r7, #0]
 8010a8e:	f7f9 ffbc 	bl	800aa0a <lwip_htonl>
 8010a92:	4603      	mov	r3, r0
 8010a94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010a96:	7dfb      	ldrb	r3, [r7, #23]
 8010a98:	089b      	lsrs	r3, r3, #2
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	3305      	adds	r3, #5
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	031b      	lsls	r3, r3, #12
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	68dc      	ldr	r4, [r3, #12]
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7f9 ff94 	bl	800a9e0 <lwip_htons>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	749a      	strb	r2, [r3, #18]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	74da      	strb	r2, [r3, #19]
  return seg;
 8010ac8:	693b      	ldr	r3, [r7, #16]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd90      	pop	{r4, r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	08019df8 	.word	0x08019df8
 8010ad8:	08019e2c 	.word	0x08019e2c
 8010adc:	08019e4c 	.word	0x08019e4c
 8010ae0:	08019e74 	.word	0x08019e74
 8010ae4:	08019e98 	.word	0x08019e98

08010ae8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	607b      	str	r3, [r7, #4]
 8010af0:	4603      	mov	r3, r0
 8010af2:	73fb      	strb	r3, [r7, #15]
 8010af4:	460b      	mov	r3, r1
 8010af6:	81bb      	strh	r3, [r7, #12]
 8010af8:	4613      	mov	r3, r2
 8010afa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010afc:	89bb      	ldrh	r3, [r7, #12]
 8010afe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d105      	bne.n	8010b12 <tcp_pbuf_prealloc+0x2a>
 8010b06:	4b30      	ldr	r3, [pc, #192]	; (8010bc8 <tcp_pbuf_prealloc+0xe0>)
 8010b08:	22e8      	movs	r2, #232	; 0xe8
 8010b0a:	4930      	ldr	r1, [pc, #192]	; (8010bcc <tcp_pbuf_prealloc+0xe4>)
 8010b0c:	4830      	ldr	r0, [pc, #192]	; (8010bd0 <tcp_pbuf_prealloc+0xe8>)
 8010b0e:	f005 fc0b 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d105      	bne.n	8010b24 <tcp_pbuf_prealloc+0x3c>
 8010b18:	4b2b      	ldr	r3, [pc, #172]	; (8010bc8 <tcp_pbuf_prealloc+0xe0>)
 8010b1a:	22e9      	movs	r2, #233	; 0xe9
 8010b1c:	492d      	ldr	r1, [pc, #180]	; (8010bd4 <tcp_pbuf_prealloc+0xec>)
 8010b1e:	482c      	ldr	r0, [pc, #176]	; (8010bd0 <tcp_pbuf_prealloc+0xe8>)
 8010b20:	f005 fc02 	bl	8016328 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010b24:	89ba      	ldrh	r2, [r7, #12]
 8010b26:	897b      	ldrh	r3, [r7, #10]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d221      	bcs.n	8010b70 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010b2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010b30:	f003 0302 	and.w	r3, r3, #2
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d111      	bne.n	8010b5c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010b38:	6a3b      	ldr	r3, [r7, #32]
 8010b3a:	8b5b      	ldrh	r3, [r3, #26]
 8010b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d115      	bne.n	8010b70 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d007      	beq.n	8010b5c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010b4c:	6a3b      	ldr	r3, [r7, #32]
 8010b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d103      	bne.n	8010b5c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d009      	beq.n	8010b70 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010b5c:	89bb      	ldrh	r3, [r7, #12]
 8010b5e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010b62:	f023 0203 	bic.w	r2, r3, #3
 8010b66:	897b      	ldrh	r3, [r7, #10]
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	bf28      	it	cs
 8010b6c:	4613      	movcs	r3, r2
 8010b6e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010b70:	8af9      	ldrh	r1, [r7, #22]
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fb f83f 	bl	800bbfc <pbuf_alloc>
 8010b7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	e019      	b.n	8010bbe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d006      	beq.n	8010ba0 <tcp_pbuf_prealloc+0xb8>
 8010b92:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <tcp_pbuf_prealloc+0xe0>)
 8010b94:	f240 120b 	movw	r2, #267	; 0x10b
 8010b98:	490f      	ldr	r1, [pc, #60]	; (8010bd8 <tcp_pbuf_prealloc+0xf0>)
 8010b9a:	480d      	ldr	r0, [pc, #52]	; (8010bd0 <tcp_pbuf_prealloc+0xe8>)
 8010b9c:	f005 fbc4 	bl	8016328 <iprintf>
  *oversize = p->len - length;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	895a      	ldrh	r2, [r3, #10]
 8010ba4:	89bb      	ldrh	r3, [r7, #12]
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	89ba      	ldrh	r2, [r7, #12]
 8010bb2:	811a      	strh	r2, [r3, #8]
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	891a      	ldrh	r2, [r3, #8]
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	815a      	strh	r2, [r3, #10]
  return p;
 8010bbc:	693b      	ldr	r3, [r7, #16]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3718      	adds	r7, #24
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	08019df8 	.word	0x08019df8
 8010bcc:	08019eb0 	.word	0x08019eb0
 8010bd0:	08019e4c 	.word	0x08019e4c
 8010bd4:	08019ed4 	.word	0x08019ed4
 8010bd8:	08019ef4 	.word	0x08019ef4

08010bdc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	460b      	mov	r3, r1
 8010be6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d106      	bne.n	8010bfc <tcp_write_checks+0x20>
 8010bee:	4b33      	ldr	r3, [pc, #204]	; (8010cbc <tcp_write_checks+0xe0>)
 8010bf0:	f240 1233 	movw	r2, #307	; 0x133
 8010bf4:	4932      	ldr	r1, [pc, #200]	; (8010cc0 <tcp_write_checks+0xe4>)
 8010bf6:	4833      	ldr	r0, [pc, #204]	; (8010cc4 <tcp_write_checks+0xe8>)
 8010bf8:	f005 fb96 	bl	8016328 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	7d1b      	ldrb	r3, [r3, #20]
 8010c00:	2b04      	cmp	r3, #4
 8010c02:	d00e      	beq.n	8010c22 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010c08:	2b07      	cmp	r3, #7
 8010c0a:	d00a      	beq.n	8010c22 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d006      	beq.n	8010c22 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010c18:	2b03      	cmp	r3, #3
 8010c1a:	d002      	beq.n	8010c22 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010c1c:	f06f 030a 	mvn.w	r3, #10
 8010c20:	e048      	b.n	8010cb4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010c22:	887b      	ldrh	r3, [r7, #2]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d101      	bne.n	8010c2c <tcp_write_checks+0x50>
    return ERR_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	e043      	b.n	8010cb4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c32:	887a      	ldrh	r2, [r7, #2]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d909      	bls.n	8010c4c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010c46:	f04f 33ff 	mov.w	r3, #4294967295
 8010c4a:	e033      	b.n	8010cb4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c52:	2b08      	cmp	r3, #8
 8010c54:	d909      	bls.n	8010c6a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	8b5b      	ldrh	r3, [r3, #26]
 8010c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010c64:	f04f 33ff 	mov.w	r3, #4294967295
 8010c68:	e024      	b.n	8010cb4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00f      	beq.n	8010c94 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d11a      	bne.n	8010cb2 <tcp_write_checks+0xd6>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d116      	bne.n	8010cb2 <tcp_write_checks+0xd6>
 8010c84:	4b0d      	ldr	r3, [pc, #52]	; (8010cbc <tcp_write_checks+0xe0>)
 8010c86:	f240 1255 	movw	r2, #341	; 0x155
 8010c8a:	490f      	ldr	r1, [pc, #60]	; (8010cc8 <tcp_write_checks+0xec>)
 8010c8c:	480d      	ldr	r0, [pc, #52]	; (8010cc4 <tcp_write_checks+0xe8>)
 8010c8e:	f005 fb4b 	bl	8016328 <iprintf>
 8010c92:	e00e      	b.n	8010cb2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d103      	bne.n	8010ca4 <tcp_write_checks+0xc8>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d006      	beq.n	8010cb2 <tcp_write_checks+0xd6>
 8010ca4:	4b05      	ldr	r3, [pc, #20]	; (8010cbc <tcp_write_checks+0xe0>)
 8010ca6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010caa:	4908      	ldr	r1, [pc, #32]	; (8010ccc <tcp_write_checks+0xf0>)
 8010cac:	4805      	ldr	r0, [pc, #20]	; (8010cc4 <tcp_write_checks+0xe8>)
 8010cae:	f005 fb3b 	bl	8016328 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08019df8 	.word	0x08019df8
 8010cc0:	08019f08 	.word	0x08019f08
 8010cc4:	08019e4c 	.word	0x08019e4c
 8010cc8:	08019f28 	.word	0x08019f28
 8010ccc:	08019f64 	.word	0x08019f64

08010cd0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010cd0:	b590      	push	{r4, r7, lr}
 8010cd2:	b09b      	sub	sp, #108	; 0x6c
 8010cd4:	af04      	add	r7, sp, #16
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	4611      	mov	r1, r2
 8010cdc:	461a      	mov	r2, r3
 8010cde:	460b      	mov	r3, r1
 8010ce0:	80fb      	strh	r3, [r7, #6]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	653b      	str	r3, [r7, #80]	; 0x50
 8010cee:	2300      	movs	r3, #0
 8010cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010d00:	2300      	movs	r3, #0
 8010d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d109      	bne.n	8010d2c <tcp_write+0x5c>
 8010d18:	4ba4      	ldr	r3, [pc, #656]	; (8010fac <tcp_write+0x2dc>)
 8010d1a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010d1e:	49a4      	ldr	r1, [pc, #656]	; (8010fb0 <tcp_write+0x2e0>)
 8010d20:	48a4      	ldr	r0, [pc, #656]	; (8010fb4 <tcp_write+0x2e4>)
 8010d22:	f005 fb01 	bl	8016328 <iprintf>
 8010d26:	f06f 030f 	mvn.w	r3, #15
 8010d2a:	e32a      	b.n	8011382 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d32:	085b      	lsrs	r3, r3, #1
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	bf28      	it	cs
 8010d3e:	4613      	movcs	r3, r2
 8010d40:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d102      	bne.n	8010d4e <tcp_write+0x7e>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d4c:	e000      	b.n	8010d50 <tcp_write+0x80>
 8010d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d50:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d109      	bne.n	8010d6c <tcp_write+0x9c>
 8010d58:	4b94      	ldr	r3, [pc, #592]	; (8010fac <tcp_write+0x2dc>)
 8010d5a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010d5e:	4996      	ldr	r1, [pc, #600]	; (8010fb8 <tcp_write+0x2e8>)
 8010d60:	4894      	ldr	r0, [pc, #592]	; (8010fb4 <tcp_write+0x2e4>)
 8010d62:	f005 fae1 	bl	8016328 <iprintf>
 8010d66:	f06f 030f 	mvn.w	r3, #15
 8010d6a:	e30a      	b.n	8011382 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010d6c:	88fb      	ldrh	r3, [r7, #6]
 8010d6e:	4619      	mov	r1, r3
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f7ff ff33 	bl	8010bdc <tcp_write_checks>
 8010d76:	4603      	mov	r3, r0
 8010d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010d7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <tcp_write+0xba>
    return err;
 8010d84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010d88:	e2fb      	b.n	8011382 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010d94:	2300      	movs	r3, #0
 8010d96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80f6 	beq.w	8010f90 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010da8:	653b      	str	r3, [r7, #80]	; 0x50
 8010daa:	e002      	b.n	8010db2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1f8      	bne.n	8010dac <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dbc:	7a9b      	ldrb	r3, [r3, #10]
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	f003 0304 	and.w	r3, r3, #4
 8010dc6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dcc:	891b      	ldrh	r3, [r3, #8]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	8c3b      	ldrh	r3, [r7, #32]
 8010dd2:	440b      	add	r3, r1
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	da06      	bge.n	8010de6 <tcp_write+0x116>
 8010dd8:	4b74      	ldr	r3, [pc, #464]	; (8010fac <tcp_write+0x2dc>)
 8010dda:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010dde:	4977      	ldr	r1, [pc, #476]	; (8010fbc <tcp_write+0x2ec>)
 8010de0:	4874      	ldr	r0, [pc, #464]	; (8010fb4 <tcp_write+0x2e4>)
 8010de2:	f005 faa1 	bl	8016328 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de8:	891a      	ldrh	r2, [r3, #8]
 8010dea:	8c3b      	ldrh	r3, [r7, #32]
 8010dec:	4413      	add	r3, r2
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dfc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010dfe:	8a7b      	ldrh	r3, [r7, #18]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d026      	beq.n	8010e52 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010e04:	8a7b      	ldrh	r3, [r7, #18]
 8010e06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d206      	bcs.n	8010e1a <tcp_write+0x14a>
 8010e0c:	4b67      	ldr	r3, [pc, #412]	; (8010fac <tcp_write+0x2dc>)
 8010e0e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010e12:	496b      	ldr	r1, [pc, #428]	; (8010fc0 <tcp_write+0x2f0>)
 8010e14:	4867      	ldr	r0, [pc, #412]	; (8010fb4 <tcp_write+0x2e4>)
 8010e16:	f005 fa87 	bl	8016328 <iprintf>
      seg = last_unsent;
 8010e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010e1e:	8a7b      	ldrh	r3, [r7, #18]
 8010e20:	88fa      	ldrh	r2, [r7, #6]
 8010e22:	4293      	cmp	r3, r2
 8010e24:	bf28      	it	cs
 8010e26:	4613      	movcs	r3, r2
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	bf28      	it	cs
 8010e30:	4613      	movcs	r3, r2
 8010e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010e34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e3a:	4413      	add	r3, r2
 8010e3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010e40:	8a7a      	ldrh	r2, [r7, #18]
 8010e42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e44:	1ad3      	subs	r3, r2, r3
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010e4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010e52:	8a7b      	ldrh	r3, [r7, #18]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00b      	beq.n	8010e70 <tcp_write+0x1a0>
 8010e58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e5c:	88fb      	ldrh	r3, [r7, #6]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d006      	beq.n	8010e70 <tcp_write+0x1a0>
 8010e62:	4b52      	ldr	r3, [pc, #328]	; (8010fac <tcp_write+0x2dc>)
 8010e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e68:	4956      	ldr	r1, [pc, #344]	; (8010fc4 <tcp_write+0x2f4>)
 8010e6a:	4852      	ldr	r0, [pc, #328]	; (8010fb4 <tcp_write+0x2e4>)
 8010e6c:	f005 fa5c 	bl	8016328 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010e70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e74:	88fb      	ldrh	r3, [r7, #6]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	f080 8167 	bcs.w	801114a <tcp_write+0x47a>
 8010e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f000 8163 	beq.w	801114a <tcp_write+0x47a>
 8010e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e86:	891b      	ldrh	r3, [r3, #8]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f000 815e 	beq.w	801114a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010e8e:	88fa      	ldrh	r2, [r7, #6]
 8010e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e94:	1ad2      	subs	r2, r2, r3
 8010e96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	bfa8      	it	ge
 8010e9c:	4613      	movge	r3, r2
 8010e9e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ea2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ea4:	797b      	ldrb	r3, [r7, #5]
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d027      	beq.n	8010efe <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010eae:	f107 0012 	add.w	r0, r7, #18
 8010eb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010eb4:	8bf9      	ldrh	r1, [r7, #30]
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	9302      	str	r3, [sp, #8]
 8010eba:	797b      	ldrb	r3, [r7, #5]
 8010ebc:	9301      	str	r3, [sp, #4]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	f7ff fe0f 	bl	8010ae8 <tcp_pbuf_prealloc>
 8010eca:	6578      	str	r0, [r7, #84]	; 0x54
 8010ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f000 8225 	beq.w	801131e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ed6:	6858      	ldr	r0, [r3, #4]
 8010ed8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	4413      	add	r3, r2
 8010ee0:	8bfa      	ldrh	r2, [r7, #30]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	f005 fc8b 	bl	80167fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010ee8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010eea:	f7fb f9f9 	bl	800c2e0 <pbuf_clen>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ef6:	4413      	add	r3, r2
 8010ef8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010efc:	e041      	b.n	8010f82 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	637b      	str	r3, [r7, #52]	; 0x34
 8010f04:	e002      	b.n	8010f0c <tcp_write+0x23c>
 8010f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1f8      	bne.n	8010f06 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f16:	7b1b      	ldrb	r3, [r3, #12]
 8010f18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d115      	bne.n	8010f4c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f26:	8952      	ldrh	r2, [r2, #10]
 8010f28:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d10d      	bne.n	8010f4c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010f30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d006      	beq.n	8010f46 <tcp_write+0x276>
 8010f38:	4b1c      	ldr	r3, [pc, #112]	; (8010fac <tcp_write+0x2dc>)
 8010f3a:	f240 2231 	movw	r2, #561	; 0x231
 8010f3e:	4922      	ldr	r1, [pc, #136]	; (8010fc8 <tcp_write+0x2f8>)
 8010f40:	481c      	ldr	r0, [pc, #112]	; (8010fb4 <tcp_write+0x2e4>)
 8010f42:	f005 f9f1 	bl	8016328 <iprintf>
          extendlen = seglen;
 8010f46:	8bfb      	ldrh	r3, [r7, #30]
 8010f48:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010f4a:	e01a      	b.n	8010f82 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010f4c:	8bfb      	ldrh	r3, [r7, #30]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	4619      	mov	r1, r3
 8010f52:	2000      	movs	r0, #0
 8010f54:	f7fa fe52 	bl	800bbfc <pbuf_alloc>
 8010f58:	6578      	str	r0, [r7, #84]	; 0x54
 8010f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 81e0 	beq.w	8011322 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	441a      	add	r2, r3
 8010f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f6c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010f6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f70:	f7fb f9b6 	bl	800c2e0 <pbuf_clen>
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f7c:	4413      	add	r3, r2
 8010f7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010f82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f86:	8bfb      	ldrh	r3, [r7, #30]
 8010f88:	4413      	add	r3, r2
 8010f8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010f8e:	e0dc      	b.n	801114a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 80d7 	beq.w	801114a <tcp_write+0x47a>
 8010f9c:	4b03      	ldr	r3, [pc, #12]	; (8010fac <tcp_write+0x2dc>)
 8010f9e:	f240 224a 	movw	r2, #586	; 0x24a
 8010fa2:	490a      	ldr	r1, [pc, #40]	; (8010fcc <tcp_write+0x2fc>)
 8010fa4:	4803      	ldr	r0, [pc, #12]	; (8010fb4 <tcp_write+0x2e4>)
 8010fa6:	f005 f9bf 	bl	8016328 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010faa:	e0ce      	b.n	801114a <tcp_write+0x47a>
 8010fac:	08019df8 	.word	0x08019df8
 8010fb0:	08019f98 	.word	0x08019f98
 8010fb4:	08019e4c 	.word	0x08019e4c
 8010fb8:	08019fb0 	.word	0x08019fb0
 8010fbc:	08019fe4 	.word	0x08019fe4
 8010fc0:	08019ffc 	.word	0x08019ffc
 8010fc4:	0801a01c 	.word	0x0801a01c
 8010fc8:	0801a03c 	.word	0x0801a03c
 8010fcc:	0801a068 	.word	0x0801a068
    struct pbuf *p;
    u16_t left = len - pos;
 8010fd0:	88fa      	ldrh	r2, [r7, #6]
 8010fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010fda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010fe6:	8b7a      	ldrh	r2, [r7, #26]
 8010fe8:	8bbb      	ldrh	r3, [r7, #28]
 8010fea:	4293      	cmp	r3, r2
 8010fec:	bf28      	it	cs
 8010fee:	4613      	movcs	r3, r2
 8010ff0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ff2:	797b      	ldrb	r3, [r7, #5]
 8010ff4:	f003 0301 	and.w	r3, r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d036      	beq.n	801106a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011000:	b29a      	uxth	r2, r3
 8011002:	8b3b      	ldrh	r3, [r7, #24]
 8011004:	4413      	add	r3, r2
 8011006:	b299      	uxth	r1, r3
 8011008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801100a:	2b00      	cmp	r3, #0
 801100c:	bf0c      	ite	eq
 801100e:	2301      	moveq	r3, #1
 8011010:	2300      	movne	r3, #0
 8011012:	b2db      	uxtb	r3, r3
 8011014:	f107 0012 	add.w	r0, r7, #18
 8011018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801101a:	9302      	str	r3, [sp, #8]
 801101c:	797b      	ldrb	r3, [r7, #5]
 801101e:	9301      	str	r3, [sp, #4]
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	4603      	mov	r3, r0
 8011026:	2036      	movs	r0, #54	; 0x36
 8011028:	f7ff fd5e 	bl	8010ae8 <tcp_pbuf_prealloc>
 801102c:	6338      	str	r0, [r7, #48]	; 0x30
 801102e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 8178 	beq.w	8011326 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	895b      	ldrh	r3, [r3, #10]
 801103a:	8b3a      	ldrh	r2, [r7, #24]
 801103c:	429a      	cmp	r2, r3
 801103e:	d906      	bls.n	801104e <tcp_write+0x37e>
 8011040:	4b8c      	ldr	r3, [pc, #560]	; (8011274 <tcp_write+0x5a4>)
 8011042:	f240 2266 	movw	r2, #614	; 0x266
 8011046:	498c      	ldr	r1, [pc, #560]	; (8011278 <tcp_write+0x5a8>)
 8011048:	488c      	ldr	r0, [pc, #560]	; (801127c <tcp_write+0x5ac>)
 801104a:	f005 f96d 	bl	8016328 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011056:	18d0      	adds	r0, r2, r3
 8011058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801105c:	68ba      	ldr	r2, [r7, #8]
 801105e:	4413      	add	r3, r2
 8011060:	8b3a      	ldrh	r2, [r7, #24]
 8011062:	4619      	mov	r1, r3
 8011064:	f005 fbcb 	bl	80167fe <memcpy>
 8011068:	e02f      	b.n	80110ca <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801106a:	8a7b      	ldrh	r3, [r7, #18]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d006      	beq.n	801107e <tcp_write+0x3ae>
 8011070:	4b80      	ldr	r3, [pc, #512]	; (8011274 <tcp_write+0x5a4>)
 8011072:	f240 2271 	movw	r2, #625	; 0x271
 8011076:	4982      	ldr	r1, [pc, #520]	; (8011280 <tcp_write+0x5b0>)
 8011078:	4880      	ldr	r0, [pc, #512]	; (801127c <tcp_write+0x5ac>)
 801107a:	f005 f955 	bl	8016328 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801107e:	8b3b      	ldrh	r3, [r7, #24]
 8011080:	2201      	movs	r2, #1
 8011082:	4619      	mov	r1, r3
 8011084:	2036      	movs	r0, #54	; 0x36
 8011086:	f7fa fdb9 	bl	800bbfc <pbuf_alloc>
 801108a:	6178      	str	r0, [r7, #20]
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 814b 	beq.w	801132a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	441a      	add	r2, r3
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110aa:	4619      	mov	r1, r3
 80110ac:	2036      	movs	r0, #54	; 0x36
 80110ae:	f7fa fda5 	bl	800bbfc <pbuf_alloc>
 80110b2:	6338      	str	r0, [r7, #48]	; 0x30
 80110b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d103      	bne.n	80110c2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80110ba:	6978      	ldr	r0, [r7, #20]
 80110bc:	f7fb f882 	bl	800c1c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80110c0:	e136      	b.n	8011330 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80110c2:	6979      	ldr	r1, [r7, #20]
 80110c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110c6:	f7fb f94b 	bl	800c360 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80110ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110cc:	f7fb f908 	bl	800c2e0 <pbuf_clen>
 80110d0:	4603      	mov	r3, r0
 80110d2:	461a      	mov	r2, r3
 80110d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80110d8:	4413      	add	r3, r2
 80110da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80110de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80110e2:	2b09      	cmp	r3, #9
 80110e4:	d903      	bls.n	80110ee <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80110e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110e8:	f7fb f86c 	bl	800c1c4 <pbuf_free>
      goto memerr;
 80110ec:	e120      	b.n	8011330 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80110f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110f6:	441a      	add	r2, r3
 80110f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	4613      	mov	r3, r2
 8011100:	2200      	movs	r2, #0
 8011102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7ff fc51 	bl	80109ac <tcp_create_segment>
 801110a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801110c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 810d 	beq.w	801132e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011116:	2b00      	cmp	r3, #0
 8011118:	d102      	bne.n	8011120 <tcp_write+0x450>
      queue = seg;
 801111a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801111c:	647b      	str	r3, [r7, #68]	; 0x44
 801111e:	e00c      	b.n	801113a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <tcp_write+0x464>
 8011126:	4b53      	ldr	r3, [pc, #332]	; (8011274 <tcp_write+0x5a4>)
 8011128:	f240 22ab 	movw	r2, #683	; 0x2ab
 801112c:	4955      	ldr	r1, [pc, #340]	; (8011284 <tcp_write+0x5b4>)
 801112e:	4853      	ldr	r0, [pc, #332]	; (801127c <tcp_write+0x5ac>)
 8011130:	f005 f8fa 	bl	8016328 <iprintf>
      prev_seg->next = seg;
 8011134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011138:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801113a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801113c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801113e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011142:	8b3b      	ldrh	r3, [r7, #24]
 8011144:	4413      	add	r3, r2
 8011146:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801114a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801114e:	88fb      	ldrh	r3, [r7, #6]
 8011150:	429a      	cmp	r2, r3
 8011152:	f4ff af3d 	bcc.w	8010fd0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011156:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011158:	2b00      	cmp	r3, #0
 801115a:	d02c      	beq.n	80111b6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801115c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011162:	e01e      	b.n	80111a2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	891a      	ldrh	r2, [r3, #8]
 8011168:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801116a:	4413      	add	r3, r2
 801116c:	b29a      	uxth	r2, r3
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d110      	bne.n	801119c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011180:	8952      	ldrh	r2, [r2, #10]
 8011182:	4413      	add	r3, r2
 8011184:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	4618      	mov	r0, r3
 801118a:	f005 fb38 	bl	80167fe <memcpy>
        p->len += oversize_used;
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	895a      	ldrh	r2, [r3, #10]
 8011192:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011194:	4413      	add	r3, r2
 8011196:	b29a      	uxth	r2, r3
 8011198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1dd      	bne.n	8011164 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80111a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111aa:	891a      	ldrh	r2, [r3, #8]
 80111ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111ae:	4413      	add	r3, r2
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80111b6:	8a7a      	ldrh	r2, [r7, #18]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80111be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d018      	beq.n	80111f6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80111c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <tcp_write+0x508>
 80111ca:	4b2a      	ldr	r3, [pc, #168]	; (8011274 <tcp_write+0x5a4>)
 80111cc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80111d0:	492d      	ldr	r1, [pc, #180]	; (8011288 <tcp_write+0x5b8>)
 80111d2:	482a      	ldr	r0, [pc, #168]	; (801127c <tcp_write+0x5ac>)
 80111d4:	f005 f8a8 	bl	8016328 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80111d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fb f8be 	bl	800c360 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80111e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e6:	891a      	ldrh	r2, [r3, #8]
 80111e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111ea:	891b      	ldrh	r3, [r3, #8]
 80111ec:	4413      	add	r3, r2
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f2:	811a      	strh	r2, [r3, #8]
 80111f4:	e037      	b.n	8011266 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80111f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d034      	beq.n	8011266 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80111fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d003      	beq.n	801120a <tcp_write+0x53a>
 8011202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d106      	bne.n	8011218 <tcp_write+0x548>
 801120a:	4b1a      	ldr	r3, [pc, #104]	; (8011274 <tcp_write+0x5a4>)
 801120c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011210:	491e      	ldr	r1, [pc, #120]	; (801128c <tcp_write+0x5bc>)
 8011212:	481a      	ldr	r0, [pc, #104]	; (801127c <tcp_write+0x5ac>)
 8011214:	f005 f888 	bl	8016328 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	62bb      	str	r3, [r7, #40]	; 0x28
 801121e:	e009      	b.n	8011234 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	891a      	ldrh	r2, [r3, #8]
 8011224:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011226:	4413      	add	r3, r2
 8011228:	b29a      	uxth	r2, r3
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
 8011234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1f1      	bne.n	8011220 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123e:	891a      	ldrh	r2, [r3, #8]
 8011240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011242:	4413      	add	r3, r2
 8011244:	b29a      	uxth	r2, r3
 8011246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011248:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	895a      	ldrh	r2, [r3, #10]
 801124e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011250:	4413      	add	r3, r2
 8011252:	b29a      	uxth	r2, r3
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	891a      	ldrh	r2, [r3, #8]
 801125c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801125e:	4413      	add	r3, r2
 8011260:	b29a      	uxth	r2, r3
 8011262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011264:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011268:	2b00      	cmp	r3, #0
 801126a:	d111      	bne.n	8011290 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011270:	66da      	str	r2, [r3, #108]	; 0x6c
 8011272:	e010      	b.n	8011296 <tcp_write+0x5c6>
 8011274:	08019df8 	.word	0x08019df8
 8011278:	0801a098 	.word	0x0801a098
 801127c:	08019e4c 	.word	0x08019e4c
 8011280:	0801a0d8 	.word	0x0801a0d8
 8011284:	0801a0e8 	.word	0x0801a0e8
 8011288:	0801a0fc 	.word	0x0801a0fc
 801128c:	0801a134 	.word	0x0801a134
  } else {
    last_unsent->next = queue;
 8011290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011294:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801129a:	88fb      	ldrh	r3, [r7, #6]
 801129c:	441a      	add	r2, r3
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80112a8:	88fb      	ldrh	r3, [r7, #6]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80112ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00e      	beq.n	80112e6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d10a      	bne.n	80112e6 <tcp_write+0x616>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d106      	bne.n	80112e6 <tcp_write+0x616>
 80112d8:	4b2c      	ldr	r3, [pc, #176]	; (801138c <tcp_write+0x6bc>)
 80112da:	f240 3212 	movw	r2, #786	; 0x312
 80112de:	492c      	ldr	r1, [pc, #176]	; (8011390 <tcp_write+0x6c0>)
 80112e0:	482c      	ldr	r0, [pc, #176]	; (8011394 <tcp_write+0x6c4>)
 80112e2:	f005 f821 	bl	8016328 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80112e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d016      	beq.n	801131a <tcp_write+0x64a>
 80112ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d012      	beq.n	801131a <tcp_write+0x64a>
 80112f4:	797b      	ldrb	r3, [r7, #5]
 80112f6:	f003 0302 	and.w	r3, r3, #2
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d10d      	bne.n	801131a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80112fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	899b      	ldrh	r3, [r3, #12]
 8011304:	b29c      	uxth	r4, r3
 8011306:	2008      	movs	r0, #8
 8011308:	f7f9 fb6a 	bl	800a9e0 <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	461a      	mov	r2, r3
 8011310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	4322      	orrs	r2, r4
 8011316:	b292      	uxth	r2, r2
 8011318:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	e031      	b.n	8011382 <tcp_write+0x6b2>
          goto memerr;
 801131e:	bf00      	nop
 8011320:	e006      	b.n	8011330 <tcp_write+0x660>
            goto memerr;
 8011322:	bf00      	nop
 8011324:	e004      	b.n	8011330 <tcp_write+0x660>
        goto memerr;
 8011326:	bf00      	nop
 8011328:	e002      	b.n	8011330 <tcp_write+0x660>
        goto memerr;
 801132a:	bf00      	nop
 801132c:	e000      	b.n	8011330 <tcp_write+0x660>
      goto memerr;
 801132e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	8b5b      	ldrh	r3, [r3, #26]
 8011334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011338:	b29a      	uxth	r2, r3
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011340:	2b00      	cmp	r3, #0
 8011342:	d002      	beq.n	801134a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011344:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011346:	f7fa ff3d 	bl	800c1c4 <pbuf_free>
  }
  if (queue != NULL) {
 801134a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011350:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011352:	f7fc fb6b 	bl	800da2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00e      	beq.n	801137e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011364:	2b00      	cmp	r3, #0
 8011366:	d10a      	bne.n	801137e <tcp_write+0x6ae>
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d106      	bne.n	801137e <tcp_write+0x6ae>
 8011370:	4b06      	ldr	r3, [pc, #24]	; (801138c <tcp_write+0x6bc>)
 8011372:	f240 3227 	movw	r2, #807	; 0x327
 8011376:	4906      	ldr	r1, [pc, #24]	; (8011390 <tcp_write+0x6c0>)
 8011378:	4806      	ldr	r0, [pc, #24]	; (8011394 <tcp_write+0x6c4>)
 801137a:	f004 ffd5 	bl	8016328 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011382:	4618      	mov	r0, r3
 8011384:	375c      	adds	r7, #92	; 0x5c
 8011386:	46bd      	mov	sp, r7
 8011388:	bd90      	pop	{r4, r7, pc}
 801138a:	bf00      	nop
 801138c:	08019df8 	.word	0x08019df8
 8011390:	0801a16c 	.word	0x0801a16c
 8011394:	08019e4c 	.word	0x08019e4c

08011398 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011398:	b590      	push	{r4, r7, lr}
 801139a:	b08b      	sub	sp, #44	; 0x2c
 801139c:	af02      	add	r7, sp, #8
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	460b      	mov	r3, r1
 80113a2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80113a4:	2300      	movs	r3, #0
 80113a6:	61fb      	str	r3, [r7, #28]
 80113a8:	2300      	movs	r3, #0
 80113aa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80113ac:	2300      	movs	r3, #0
 80113ae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d106      	bne.n	80113c4 <tcp_split_unsent_seg+0x2c>
 80113b6:	4b95      	ldr	r3, [pc, #596]	; (801160c <tcp_split_unsent_seg+0x274>)
 80113b8:	f240 324b 	movw	r2, #843	; 0x34b
 80113bc:	4994      	ldr	r1, [pc, #592]	; (8011610 <tcp_split_unsent_seg+0x278>)
 80113be:	4895      	ldr	r0, [pc, #596]	; (8011614 <tcp_split_unsent_seg+0x27c>)
 80113c0:	f004 ffb2 	bl	8016328 <iprintf>

  useg = pcb->unsent;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d102      	bne.n	80113d6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80113d0:	f04f 33ff 	mov.w	r3, #4294967295
 80113d4:	e116      	b.n	8011604 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80113d6:	887b      	ldrh	r3, [r7, #2]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d109      	bne.n	80113f0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80113dc:	4b8b      	ldr	r3, [pc, #556]	; (801160c <tcp_split_unsent_seg+0x274>)
 80113de:	f240 3253 	movw	r2, #851	; 0x353
 80113e2:	498d      	ldr	r1, [pc, #564]	; (8011618 <tcp_split_unsent_seg+0x280>)
 80113e4:	488b      	ldr	r0, [pc, #556]	; (8011614 <tcp_split_unsent_seg+0x27c>)
 80113e6:	f004 ff9f 	bl	8016328 <iprintf>
    return ERR_VAL;
 80113ea:	f06f 0305 	mvn.w	r3, #5
 80113ee:	e109      	b.n	8011604 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	891b      	ldrh	r3, [r3, #8]
 80113f4:	887a      	ldrh	r2, [r7, #2]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d301      	bcc.n	80113fe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	e102      	b.n	8011604 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011402:	887a      	ldrh	r2, [r7, #2]
 8011404:	429a      	cmp	r2, r3
 8011406:	d906      	bls.n	8011416 <tcp_split_unsent_seg+0x7e>
 8011408:	4b80      	ldr	r3, [pc, #512]	; (801160c <tcp_split_unsent_seg+0x274>)
 801140a:	f240 325b 	movw	r2, #859	; 0x35b
 801140e:	4983      	ldr	r1, [pc, #524]	; (801161c <tcp_split_unsent_seg+0x284>)
 8011410:	4880      	ldr	r0, [pc, #512]	; (8011614 <tcp_split_unsent_seg+0x27c>)
 8011412:	f004 ff89 	bl	8016328 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	891b      	ldrh	r3, [r3, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d106      	bne.n	801142c <tcp_split_unsent_seg+0x94>
 801141e:	4b7b      	ldr	r3, [pc, #492]	; (801160c <tcp_split_unsent_seg+0x274>)
 8011420:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011424:	497e      	ldr	r1, [pc, #504]	; (8011620 <tcp_split_unsent_seg+0x288>)
 8011426:	487b      	ldr	r0, [pc, #492]	; (8011614 <tcp_split_unsent_seg+0x27c>)
 8011428:	f004 ff7e 	bl	8016328 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	7a9b      	ldrb	r3, [r3, #10]
 8011430:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011432:	7bfb      	ldrb	r3, [r7, #15]
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	b2db      	uxtb	r3, r3
 8011438:	f003 0304 	and.w	r3, r3, #4
 801143c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	891a      	ldrh	r2, [r3, #8]
 8011442:	887b      	ldrh	r3, [r7, #2]
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011448:	7bbb      	ldrb	r3, [r7, #14]
 801144a:	b29a      	uxth	r2, r3
 801144c:	89bb      	ldrh	r3, [r7, #12]
 801144e:	4413      	add	r3, r2
 8011450:	b29b      	uxth	r3, r3
 8011452:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011456:	4619      	mov	r1, r3
 8011458:	2036      	movs	r0, #54	; 0x36
 801145a:	f7fa fbcf 	bl	800bbfc <pbuf_alloc>
 801145e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 80b7 	beq.w	80115d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	891a      	ldrh	r2, [r3, #8]
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	891b      	ldrh	r3, [r3, #8]
 8011472:	1ad3      	subs	r3, r2, r3
 8011474:	b29a      	uxth	r2, r3
 8011476:	887b      	ldrh	r3, [r7, #2]
 8011478:	4413      	add	r3, r2
 801147a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	6858      	ldr	r0, [r3, #4]
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	685a      	ldr	r2, [r3, #4]
 8011484:	7bbb      	ldrb	r3, [r7, #14]
 8011486:	18d1      	adds	r1, r2, r3
 8011488:	897b      	ldrh	r3, [r7, #10]
 801148a:	89ba      	ldrh	r2, [r7, #12]
 801148c:	f7fb f8a0 	bl	800c5d0 <pbuf_copy_partial>
 8011490:	4603      	mov	r3, r0
 8011492:	461a      	mov	r2, r3
 8011494:	89bb      	ldrh	r3, [r7, #12]
 8011496:	4293      	cmp	r3, r2
 8011498:	f040 809f 	bne.w	80115da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	68db      	ldr	r3, [r3, #12]
 80114a0:	899b      	ldrh	r3, [r3, #12]
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7f9 fa9b 	bl	800a9e0 <lwip_htons>
 80114aa:	4603      	mov	r3, r0
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80114b4:	2300      	movs	r3, #0
 80114b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80114b8:	7efb      	ldrb	r3, [r7, #27]
 80114ba:	f003 0308 	and.w	r3, r3, #8
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d007      	beq.n	80114d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80114c2:	7efb      	ldrb	r3, [r7, #27]
 80114c4:	f023 0308 	bic.w	r3, r3, #8
 80114c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80114ca:	7ebb      	ldrb	r3, [r7, #26]
 80114cc:	f043 0308 	orr.w	r3, r3, #8
 80114d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80114d2:	7efb      	ldrb	r3, [r7, #27]
 80114d4:	f003 0301 	and.w	r3, r3, #1
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d007      	beq.n	80114ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80114dc:	7efb      	ldrb	r3, [r7, #27]
 80114de:	f023 0301 	bic.w	r3, r3, #1
 80114e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80114e4:	7ebb      	ldrb	r3, [r7, #26]
 80114e6:	f043 0301 	orr.w	r3, r3, #1
 80114ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7f9 fa89 	bl	800aa0a <lwip_htonl>
 80114f8:	4602      	mov	r2, r0
 80114fa:	887b      	ldrh	r3, [r7, #2]
 80114fc:	18d1      	adds	r1, r2, r3
 80114fe:	7eba      	ldrb	r2, [r7, #26]
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	460b      	mov	r3, r1
 8011506:	6939      	ldr	r1, [r7, #16]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7ff fa4f 	bl	80109ac <tcp_create_segment>
 801150e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d063      	beq.n	80115de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	4618      	mov	r0, r3
 801151c:	f7fa fee0 	bl	800c2e0 <pbuf_clen>
 8011520:	4603      	mov	r3, r0
 8011522:	461a      	mov	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	b29a      	uxth	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	6858      	ldr	r0, [r3, #4]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	891a      	ldrh	r2, [r3, #8]
 801153e:	89bb      	ldrh	r3, [r7, #12]
 8011540:	1ad3      	subs	r3, r2, r3
 8011542:	b29b      	uxth	r3, r3
 8011544:	4619      	mov	r1, r3
 8011546:	f7fa fcb7 	bl	800beb8 <pbuf_realloc>
  useg->len -= remainder;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	891a      	ldrh	r2, [r3, #8]
 801154e:	89bb      	ldrh	r3, [r7, #12]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	b29a      	uxth	r2, r3
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	899b      	ldrh	r3, [r3, #12]
 801155e:	b29c      	uxth	r4, r3
 8011560:	7efb      	ldrb	r3, [r7, #27]
 8011562:	b29b      	uxth	r3, r3
 8011564:	4618      	mov	r0, r3
 8011566:	f7f9 fa3b 	bl	800a9e0 <lwip_htons>
 801156a:	4603      	mov	r3, r0
 801156c:	461a      	mov	r2, r3
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	4322      	orrs	r2, r4
 8011574:	b292      	uxth	r2, r2
 8011576:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	f7fa feaf 	bl	800c2e0 <pbuf_clen>
 8011582:	4603      	mov	r3, r0
 8011584:	461a      	mov	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801158c:	4413      	add	r3, r2
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f7fa fea0 	bl	800c2e0 <pbuf_clen>
 80115a0:	4603      	mov	r3, r0
 80115a2:	461a      	mov	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115aa:	4413      	add	r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	69fa      	ldr	r2, [r7, #28]
 80115c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d103      	bne.n	80115d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2200      	movs	r2, #0
 80115ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	e016      	b.n	8011604 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80115d6:	bf00      	nop
 80115d8:	e002      	b.n	80115e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115da:	bf00      	nop
 80115dc:	e000      	b.n	80115e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d006      	beq.n	80115f4 <tcp_split_unsent_seg+0x25c>
 80115e6:	4b09      	ldr	r3, [pc, #36]	; (801160c <tcp_split_unsent_seg+0x274>)
 80115e8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80115ec:	490d      	ldr	r1, [pc, #52]	; (8011624 <tcp_split_unsent_seg+0x28c>)
 80115ee:	4809      	ldr	r0, [pc, #36]	; (8011614 <tcp_split_unsent_seg+0x27c>)
 80115f0:	f004 fe9a 	bl	8016328 <iprintf>
  if (p != NULL) {
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d002      	beq.n	8011600 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80115fa:	6938      	ldr	r0, [r7, #16]
 80115fc:	f7fa fde2 	bl	800c1c4 <pbuf_free>
  }

  return ERR_MEM;
 8011600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011604:	4618      	mov	r0, r3
 8011606:	3724      	adds	r7, #36	; 0x24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd90      	pop	{r4, r7, pc}
 801160c:	08019df8 	.word	0x08019df8
 8011610:	0801a18c 	.word	0x0801a18c
 8011614:	08019e4c 	.word	0x08019e4c
 8011618:	0801a1b0 	.word	0x0801a1b0
 801161c:	0801a1d4 	.word	0x0801a1d4
 8011620:	0801a1e4 	.word	0x0801a1e4
 8011624:	0801a1f4 	.word	0x0801a1f4

08011628 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011628:	b590      	push	{r4, r7, lr}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d106      	bne.n	8011644 <tcp_send_fin+0x1c>
 8011636:	4b21      	ldr	r3, [pc, #132]	; (80116bc <tcp_send_fin+0x94>)
 8011638:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801163c:	4920      	ldr	r1, [pc, #128]	; (80116c0 <tcp_send_fin+0x98>)
 801163e:	4821      	ldr	r0, [pc, #132]	; (80116c4 <tcp_send_fin+0x9c>)
 8011640:	f004 fe72 	bl	8016328 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011648:	2b00      	cmp	r3, #0
 801164a:	d02e      	beq.n	80116aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e002      	b.n	801165a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1f8      	bne.n	8011654 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	899b      	ldrh	r3, [r3, #12]
 8011668:	b29b      	uxth	r3, r3
 801166a:	4618      	mov	r0, r3
 801166c:	f7f9 f9b8 	bl	800a9e0 <lwip_htons>
 8011670:	4603      	mov	r3, r0
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f003 0307 	and.w	r3, r3, #7
 8011678:	2b00      	cmp	r3, #0
 801167a:	d116      	bne.n	80116aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	899b      	ldrh	r3, [r3, #12]
 8011682:	b29c      	uxth	r4, r3
 8011684:	2001      	movs	r0, #1
 8011686:	f7f9 f9ab 	bl	800a9e0 <lwip_htons>
 801168a:	4603      	mov	r3, r0
 801168c:	461a      	mov	r2, r3
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	4322      	orrs	r2, r4
 8011694:	b292      	uxth	r2, r2
 8011696:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	8b5b      	ldrh	r3, [r3, #26]
 801169c:	f043 0320 	orr.w	r3, r3, #32
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80116a6:	2300      	movs	r3, #0
 80116a8:	e004      	b.n	80116b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80116aa:	2101      	movs	r1, #1
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f80b 	bl	80116c8 <tcp_enqueue_flags>
 80116b2:	4603      	mov	r3, r0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3714      	adds	r7, #20
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd90      	pop	{r4, r7, pc}
 80116bc:	08019df8 	.word	0x08019df8
 80116c0:	0801a200 	.word	0x0801a200
 80116c4:	08019e4c 	.word	0x08019e4c

080116c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af02      	add	r7, sp, #8
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80116dc:	78fb      	ldrb	r3, [r7, #3]
 80116de:	f003 0303 	and.w	r3, r3, #3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <tcp_enqueue_flags+0x2c>
 80116e6:	4b67      	ldr	r3, [pc, #412]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 80116e8:	f240 4211 	movw	r2, #1041	; 0x411
 80116ec:	4966      	ldr	r1, [pc, #408]	; (8011888 <tcp_enqueue_flags+0x1c0>)
 80116ee:	4867      	ldr	r0, [pc, #412]	; (801188c <tcp_enqueue_flags+0x1c4>)
 80116f0:	f004 fe1a 	bl	8016328 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d106      	bne.n	8011708 <tcp_enqueue_flags+0x40>
 80116fa:	4b62      	ldr	r3, [pc, #392]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 80116fc:	f240 4213 	movw	r2, #1043	; 0x413
 8011700:	4963      	ldr	r1, [pc, #396]	; (8011890 <tcp_enqueue_flags+0x1c8>)
 8011702:	4862      	ldr	r0, [pc, #392]	; (801188c <tcp_enqueue_flags+0x1c4>)
 8011704:	f004 fe10 	bl	8016328 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011708:	78fb      	ldrb	r3, [r7, #3]
 801170a:	f003 0302 	and.w	r3, r3, #2
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011712:	2301      	movs	r3, #1
 8011714:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011716:	7ffb      	ldrb	r3, [r7, #31]
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	b2db      	uxtb	r3, r3
 801171c:	f003 0304 	and.w	r3, r3, #4
 8011720:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011722:	7dfb      	ldrb	r3, [r7, #23]
 8011724:	b29b      	uxth	r3, r3
 8011726:	f44f 7220 	mov.w	r2, #640	; 0x280
 801172a:	4619      	mov	r1, r3
 801172c:	2036      	movs	r0, #54	; 0x36
 801172e:	f7fa fa65 	bl	800bbfc <pbuf_alloc>
 8011732:	6138      	str	r0, [r7, #16]
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d109      	bne.n	801174e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	8b5b      	ldrh	r3, [r3, #26]
 801173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011742:	b29a      	uxth	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011748:	f04f 33ff 	mov.w	r3, #4294967295
 801174c:	e095      	b.n	801187a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	895a      	ldrh	r2, [r3, #10]
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	b29b      	uxth	r3, r3
 8011756:	429a      	cmp	r2, r3
 8011758:	d206      	bcs.n	8011768 <tcp_enqueue_flags+0xa0>
 801175a:	4b4a      	ldr	r3, [pc, #296]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 801175c:	f240 4239 	movw	r2, #1081	; 0x439
 8011760:	494c      	ldr	r1, [pc, #304]	; (8011894 <tcp_enqueue_flags+0x1cc>)
 8011762:	484a      	ldr	r0, [pc, #296]	; (801188c <tcp_enqueue_flags+0x1c4>)
 8011764:	f004 fde0 	bl	8016328 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801176c:	78fa      	ldrb	r2, [r7, #3]
 801176e:	7ffb      	ldrb	r3, [r7, #31]
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	460b      	mov	r3, r1
 8011774:	6939      	ldr	r1, [r7, #16]
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f7ff f918 	bl	80109ac <tcp_create_segment>
 801177c:	60f8      	str	r0, [r7, #12]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d109      	bne.n	8011798 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	8b5b      	ldrh	r3, [r3, #26]
 8011788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801178c:	b29a      	uxth	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011792:	f04f 33ff 	mov.w	r3, #4294967295
 8011796:	e070      	b.n	801187a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	f003 0303 	and.w	r3, r3, #3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d006      	beq.n	80117b2 <tcp_enqueue_flags+0xea>
 80117a4:	4b37      	ldr	r3, [pc, #220]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 80117a6:	f240 4242 	movw	r2, #1090	; 0x442
 80117aa:	493b      	ldr	r1, [pc, #236]	; (8011898 <tcp_enqueue_flags+0x1d0>)
 80117ac:	4837      	ldr	r0, [pc, #220]	; (801188c <tcp_enqueue_flags+0x1c4>)
 80117ae:	f004 fdbb 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	891b      	ldrh	r3, [r3, #8]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d006      	beq.n	80117c8 <tcp_enqueue_flags+0x100>
 80117ba:	4b32      	ldr	r3, [pc, #200]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 80117bc:	f240 4243 	movw	r2, #1091	; 0x443
 80117c0:	4936      	ldr	r1, [pc, #216]	; (801189c <tcp_enqueue_flags+0x1d4>)
 80117c2:	4832      	ldr	r0, [pc, #200]	; (801188c <tcp_enqueue_flags+0x1c4>)
 80117c4:	f004 fdb0 	bl	8016328 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d103      	bne.n	80117d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80117d6:	e00d      	b.n	80117f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117dc:	61bb      	str	r3, [r7, #24]
 80117de:	e002      	b.n	80117e6 <tcp_enqueue_flags+0x11e>
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	61bb      	str	r3, [r7, #24]
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1f8      	bne.n	80117e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80117fc:	78fb      	ldrb	r3, [r7, #3]
 80117fe:	f003 0302 	and.w	r3, r3, #2
 8011802:	2b00      	cmp	r3, #0
 8011804:	d104      	bne.n	8011810 <tcp_enqueue_flags+0x148>
 8011806:	78fb      	ldrb	r3, [r7, #3]
 8011808:	f003 0301 	and.w	r3, r3, #1
 801180c:	2b00      	cmp	r3, #0
 801180e:	d004      	beq.n	801181a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011814:	1c5a      	adds	r2, r3, #1
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d006      	beq.n	8011832 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8b5b      	ldrh	r3, [r3, #26]
 8011828:	f043 0320 	orr.w	r3, r3, #32
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	4618      	mov	r0, r3
 8011838:	f7fa fd52 	bl	800c2e0 <pbuf_clen>
 801183c:	4603      	mov	r3, r0
 801183e:	461a      	mov	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011846:	4413      	add	r3, r2
 8011848:	b29a      	uxth	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00e      	beq.n	8011878 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801185e:	2b00      	cmp	r3, #0
 8011860:	d10a      	bne.n	8011878 <tcp_enqueue_flags+0x1b0>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011866:	2b00      	cmp	r3, #0
 8011868:	d106      	bne.n	8011878 <tcp_enqueue_flags+0x1b0>
 801186a:	4b06      	ldr	r3, [pc, #24]	; (8011884 <tcp_enqueue_flags+0x1bc>)
 801186c:	f240 4265 	movw	r2, #1125	; 0x465
 8011870:	490b      	ldr	r1, [pc, #44]	; (80118a0 <tcp_enqueue_flags+0x1d8>)
 8011872:	4806      	ldr	r0, [pc, #24]	; (801188c <tcp_enqueue_flags+0x1c4>)
 8011874:	f004 fd58 	bl	8016328 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3720      	adds	r7, #32
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	08019df8 	.word	0x08019df8
 8011888:	0801a21c 	.word	0x0801a21c
 801188c:	08019e4c 	.word	0x08019e4c
 8011890:	0801a274 	.word	0x0801a274
 8011894:	0801a294 	.word	0x0801a294
 8011898:	0801a2d0 	.word	0x0801a2d0
 801189c:	0801a2e8 	.word	0x0801a2e8
 80118a0:	0801a314 	.word	0x0801a314

080118a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80118a4:	b5b0      	push	{r4, r5, r7, lr}
 80118a6:	b08a      	sub	sp, #40	; 0x28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d106      	bne.n	80118c0 <tcp_output+0x1c>
 80118b2:	4b8a      	ldr	r3, [pc, #552]	; (8011adc <tcp_output+0x238>)
 80118b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80118b8:	4989      	ldr	r1, [pc, #548]	; (8011ae0 <tcp_output+0x23c>)
 80118ba:	488a      	ldr	r0, [pc, #552]	; (8011ae4 <tcp_output+0x240>)
 80118bc:	f004 fd34 	bl	8016328 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d106      	bne.n	80118d6 <tcp_output+0x32>
 80118c8:	4b84      	ldr	r3, [pc, #528]	; (8011adc <tcp_output+0x238>)
 80118ca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80118ce:	4986      	ldr	r1, [pc, #536]	; (8011ae8 <tcp_output+0x244>)
 80118d0:	4884      	ldr	r0, [pc, #528]	; (8011ae4 <tcp_output+0x240>)
 80118d2:	f004 fd29 	bl	8016328 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80118d6:	4b85      	ldr	r3, [pc, #532]	; (8011aec <tcp_output+0x248>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d101      	bne.n	80118e4 <tcp_output+0x40>
    return ERR_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e1ce      	b.n	8011c82 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118f0:	4293      	cmp	r3, r2
 80118f2:	bf28      	it	cs
 80118f4:	4613      	movcs	r3, r2
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10b      	bne.n	801191e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8b5b      	ldrh	r3, [r3, #26]
 801190a:	f003 0302 	and.w	r3, r3, #2
 801190e:	2b00      	cmp	r3, #0
 8011910:	f000 81aa 	beq.w	8011c68 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f000 fdcb 	bl	80124b0 <tcp_send_empty_ack>
 801191a:	4603      	mov	r3, r0
 801191c:	e1b1      	b.n	8011c82 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801191e:	6879      	ldr	r1, [r7, #4]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3304      	adds	r3, #4
 8011924:	461a      	mov	r2, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7ff f824 	bl	8010974 <tcp_route>
 801192c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <tcp_output+0x96>
    return ERR_RTE;
 8011934:	f06f 0303 	mvn.w	r3, #3
 8011938:	e1a3      	b.n	8011c82 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d003      	beq.n	8011948 <tcp_output+0xa4>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d111      	bne.n	801196c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d002      	beq.n	8011954 <tcp_output+0xb0>
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	3304      	adds	r3, #4
 8011952:	e000      	b.n	8011956 <tcp_output+0xb2>
 8011954:	2300      	movs	r3, #0
 8011956:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d102      	bne.n	8011964 <tcp_output+0xc0>
      return ERR_RTE;
 801195e:	f06f 0303 	mvn.w	r3, #3
 8011962:	e18e      	b.n	8011c82 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f9 f849 	bl	800aa0a <lwip_htonl>
 8011978:	4602      	mov	r2, r0
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011982:	8912      	ldrh	r2, [r2, #8]
 8011984:	4413      	add	r3, r2
 8011986:	69ba      	ldr	r2, [r7, #24]
 8011988:	429a      	cmp	r2, r3
 801198a:	d227      	bcs.n	80119dc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011992:	461a      	mov	r2, r3
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	4293      	cmp	r3, r2
 8011998:	d114      	bne.n	80119c4 <tcp_output+0x120>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d110      	bne.n	80119c4 <tcp_output+0x120>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10b      	bne.n	80119c4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2201      	movs	r2, #1
 80119b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	8b5b      	ldrh	r3, [r3, #26]
 80119c8:	f003 0302 	and.w	r3, r3, #2
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 814d 	beq.w	8011c6c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 fd6c 	bl	80124b0 <tcp_send_empty_ack>
 80119d8:	4603      	mov	r3, r0
 80119da:	e152      	b.n	8011c82 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80119ea:	6a3b      	ldr	r3, [r7, #32]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 811c 	beq.w	8011c2a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80119f2:	e002      	b.n	80119fa <tcp_output+0x156>
 80119f4:	6a3b      	ldr	r3, [r7, #32]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	623b      	str	r3, [r7, #32]
 80119fa:	6a3b      	ldr	r3, [r7, #32]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1f8      	bne.n	80119f4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011a02:	e112      	b.n	8011c2a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7f8 ffe7 	bl	800a9e0 <lwip_htons>
 8011a12:	4603      	mov	r3, r0
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	f003 0304 	and.w	r3, r3, #4
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d006      	beq.n	8011a2c <tcp_output+0x188>
 8011a1e:	4b2f      	ldr	r3, [pc, #188]	; (8011adc <tcp_output+0x238>)
 8011a20:	f240 5236 	movw	r2, #1334	; 0x536
 8011a24:	4932      	ldr	r1, [pc, #200]	; (8011af0 <tcp_output+0x24c>)
 8011a26:	482f      	ldr	r0, [pc, #188]	; (8011ae4 <tcp_output+0x240>)
 8011a28:	f004 fc7e 	bl	8016328 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d01f      	beq.n	8011a74 <tcp_output+0x1d0>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8b5b      	ldrh	r3, [r3, #26]
 8011a38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d119      	bne.n	8011a74 <tcp_output+0x1d0>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00b      	beq.n	8011a60 <tcp_output+0x1bc>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d110      	bne.n	8011a74 <tcp_output+0x1d0>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a56:	891a      	ldrh	r2, [r3, #8]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d209      	bcs.n	8011a74 <tcp_output+0x1d0>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <tcp_output+0x1d0>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a70:	2b08      	cmp	r3, #8
 8011a72:	d901      	bls.n	8011a78 <tcp_output+0x1d4>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e000      	b.n	8011a7a <tcp_output+0x1d6>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d106      	bne.n	8011a8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	8b5b      	ldrh	r3, [r3, #26]
 8011a82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	f000 80e4 	beq.w	8011c54 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	7d1b      	ldrb	r3, [r3, #20]
 8011a90:	2b02      	cmp	r3, #2
 8011a92:	d00d      	beq.n	8011ab0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	899b      	ldrh	r3, [r3, #12]
 8011a9a:	b29c      	uxth	r4, r3
 8011a9c:	2010      	movs	r0, #16
 8011a9e:	f7f8 ff9f 	bl	800a9e0 <lwip_htons>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	4322      	orrs	r2, r4
 8011aac:	b292      	uxth	r2, r2
 8011aae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011ab0:	697a      	ldr	r2, [r7, #20]
 8011ab2:	6879      	ldr	r1, [r7, #4]
 8011ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ab6:	f000 f909 	bl	8011ccc <tcp_output_segment>
 8011aba:	4603      	mov	r3, r0
 8011abc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d016      	beq.n	8011af4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	8b5b      	ldrh	r3, [r3, #26]
 8011aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	835a      	strh	r2, [r3, #26]
      return err;
 8011ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ad8:	e0d3      	b.n	8011c82 <tcp_output+0x3de>
 8011ada:	bf00      	nop
 8011adc:	08019df8 	.word	0x08019df8
 8011ae0:	0801a33c 	.word	0x0801a33c
 8011ae4:	08019e4c 	.word	0x08019e4c
 8011ae8:	0801a354 	.word	0x0801a354
 8011aec:	2000c844 	.word	0x2000c844
 8011af0:	0801a37c 	.word	0x0801a37c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7d1b      	ldrb	r3, [r3, #20]
 8011b00:	2b02      	cmp	r3, #2
 8011b02:	d006      	beq.n	8011b12 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8b5b      	ldrh	r3, [r3, #26]
 8011b08:	f023 0303 	bic.w	r3, r3, #3
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7f8 ff76 	bl	800aa0a <lwip_htonl>
 8011b1e:	4604      	mov	r4, r0
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	891b      	ldrh	r3, [r3, #8]
 8011b24:	461d      	mov	r5, r3
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	899b      	ldrh	r3, [r3, #12]
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7f8 ff56 	bl	800a9e0 <lwip_htons>
 8011b34:	4603      	mov	r3, r0
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	f003 0303 	and.w	r3, r3, #3
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d001      	beq.n	8011b44 <tcp_output+0x2a0>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e000      	b.n	8011b46 <tcp_output+0x2a2>
 8011b44:	2300      	movs	r3, #0
 8011b46:	442b      	add	r3, r5
 8011b48:	4423      	add	r3, r4
 8011b4a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	da02      	bge.n	8011b5e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b60:	891b      	ldrh	r3, [r3, #8]
 8011b62:	461c      	mov	r4, r3
 8011b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	899b      	ldrh	r3, [r3, #12]
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7f8 ff37 	bl	800a9e0 <lwip_htons>
 8011b72:	4603      	mov	r3, r0
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	f003 0303 	and.w	r3, r3, #3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d001      	beq.n	8011b82 <tcp_output+0x2de>
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e000      	b.n	8011b84 <tcp_output+0x2e0>
 8011b82:	2300      	movs	r3, #0
 8011b84:	4423      	add	r3, r4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d049      	beq.n	8011c1e <tcp_output+0x37a>
      seg->next = NULL;
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d105      	bne.n	8011ba4 <tcp_output+0x300>
        pcb->unacked = seg;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b9c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba0:	623b      	str	r3, [r7, #32]
 8011ba2:	e03f      	b.n	8011c24 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7f8 ff2d 	bl	800aa0a <lwip_htonl>
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	6a3b      	ldr	r3, [r7, #32]
 8011bb4:	68db      	ldr	r3, [r3, #12]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7f8 ff26 	bl	800aa0a <lwip_htonl>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	1ae3      	subs	r3, r4, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da24      	bge.n	8011c10 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3370      	adds	r3, #112	; 0x70
 8011bca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011bcc:	e002      	b.n	8011bd4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d011      	beq.n	8011c00 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7f8 ff10 	bl	800aa0a <lwip_htonl>
 8011bea:	4604      	mov	r4, r0
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f8 ff09 	bl	800aa0a <lwip_htonl>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	dbe6      	blt.n	8011bce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	e009      	b.n	8011c24 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c14:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	623b      	str	r3, [r7, #32]
 8011c1c:	e002      	b.n	8011c24 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c20:	f7fb ff19 	bl	800da56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c28:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d012      	beq.n	8011c56 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7f8 fee7 	bl	800aa0a <lwip_htonl>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c46:	8912      	ldrh	r2, [r2, #8]
 8011c48:	4413      	add	r3, r2
  while (seg != NULL &&
 8011c4a:	69ba      	ldr	r2, [r7, #24]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	f4bf aed9 	bcs.w	8011a04 <tcp_output+0x160>
 8011c52:	e000      	b.n	8011c56 <tcp_output+0x3b2>
      break;
 8011c54:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d108      	bne.n	8011c70 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011c66:	e004      	b.n	8011c72 <tcp_output+0x3ce>
    goto output_done;
 8011c68:	bf00      	nop
 8011c6a:	e002      	b.n	8011c72 <tcp_output+0x3ce>
    goto output_done;
 8011c6c:	bf00      	nop
 8011c6e:	e000      	b.n	8011c72 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011c70:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	8b5b      	ldrh	r3, [r3, #26]
 8011c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3728      	adds	r7, #40	; 0x28
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bdb0      	pop	{r4, r5, r7, pc}
 8011c8a:	bf00      	nop

08011c8c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <tcp_output_segment_busy+0x1c>
 8011c9a:	4b09      	ldr	r3, [pc, #36]	; (8011cc0 <tcp_output_segment_busy+0x34>)
 8011c9c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011ca0:	4908      	ldr	r1, [pc, #32]	; (8011cc4 <tcp_output_segment_busy+0x38>)
 8011ca2:	4809      	ldr	r0, [pc, #36]	; (8011cc8 <tcp_output_segment_busy+0x3c>)
 8011ca4:	f004 fb40 	bl	8016328 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	7b9b      	ldrb	r3, [r3, #14]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d001      	beq.n	8011cb6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e000      	b.n	8011cb8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	08019df8 	.word	0x08019df8
 8011cc4:	0801a394 	.word	0x0801a394
 8011cc8:	08019e4c 	.word	0x08019e4c

08011ccc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011ccc:	b5b0      	push	{r4, r5, r7, lr}
 8011cce:	b08c      	sub	sp, #48	; 0x30
 8011cd0:	af04      	add	r7, sp, #16
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_output_segment+0x20>
 8011cde:	4b64      	ldr	r3, [pc, #400]	; (8011e70 <tcp_output_segment+0x1a4>)
 8011ce0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011ce4:	4963      	ldr	r1, [pc, #396]	; (8011e74 <tcp_output_segment+0x1a8>)
 8011ce6:	4864      	ldr	r0, [pc, #400]	; (8011e78 <tcp_output_segment+0x1ac>)
 8011ce8:	f004 fb1e 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <tcp_output_segment+0x34>
 8011cf2:	4b5f      	ldr	r3, [pc, #380]	; (8011e70 <tcp_output_segment+0x1a4>)
 8011cf4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011cf8:	4960      	ldr	r1, [pc, #384]	; (8011e7c <tcp_output_segment+0x1b0>)
 8011cfa:	485f      	ldr	r0, [pc, #380]	; (8011e78 <tcp_output_segment+0x1ac>)
 8011cfc:	f004 fb14 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d106      	bne.n	8011d14 <tcp_output_segment+0x48>
 8011d06:	4b5a      	ldr	r3, [pc, #360]	; (8011e70 <tcp_output_segment+0x1a4>)
 8011d08:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011d0c:	495c      	ldr	r1, [pc, #368]	; (8011e80 <tcp_output_segment+0x1b4>)
 8011d0e:	485a      	ldr	r0, [pc, #360]	; (8011e78 <tcp_output_segment+0x1ac>)
 8011d10:	f004 fb0a 	bl	8016328 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7ff ffb9 	bl	8011c8c <tcp_output_segment_busy>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d001      	beq.n	8011d24 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	e0a1      	b.n	8011e68 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	68dc      	ldr	r4, [r3, #12]
 8011d2c:	4610      	mov	r0, r2
 8011d2e:	f7f8 fe6c 	bl	800aa0a <lwip_htonl>
 8011d32:	4603      	mov	r3, r0
 8011d34:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	68dc      	ldr	r4, [r3, #12]
 8011d3e:	4610      	mov	r0, r2
 8011d40:	f7f8 fe4e 	bl	800a9e0 <lwip_htons>
 8011d44:	4603      	mov	r3, r0
 8011d46:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011d50:	441a      	add	r2, r3
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	3314      	adds	r3, #20
 8011d5c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	7a9b      	ldrb	r3, [r3, #10]
 8011d62:	f003 0301 	and.w	r3, r3, #1
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d015      	beq.n	8011d96 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	461a      	mov	r2, r3
 8011d70:	6879      	ldr	r1, [r7, #4]
 8011d72:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011d76:	f7fc fa33 	bl	800e1e0 <tcp_eff_send_mss_netif>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011d7e:	8b7b      	ldrh	r3, [r7, #26]
 8011d80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7f8 fe40 	bl	800aa0a <lwip_htonl>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	3304      	adds	r3, #4
 8011d94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	da02      	bge.n	8011da6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2200      	movs	r2, #0
 8011da4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d10c      	bne.n	8011dc8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011dae:	4b35      	ldr	r3, [pc, #212]	; (8011e84 <tcp_output_segment+0x1b8>)
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7f8 fe24 	bl	800aa0a <lwip_htonl>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	68da      	ldr	r2, [r3, #12]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	8959      	ldrh	r1, [r3, #10]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	8b3a      	ldrh	r2, [r7, #24]
 8011de2:	1a8a      	subs	r2, r1, r2
 8011de4:	b292      	uxth	r2, r2
 8011de6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	8919      	ldrh	r1, [r3, #8]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	8b3a      	ldrh	r2, [r7, #24]
 8011df4:	1a8a      	subs	r2, r1, r2
 8011df6:	b292      	uxth	r2, r2
 8011df8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	68fa      	ldr	r2, [r7, #12]
 8011e00:	68d2      	ldr	r2, [r2, #12]
 8011e02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	741a      	strb	r2, [r3, #16]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	68da      	ldr	r2, [r3, #12]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	7a9b      	ldrb	r3, [r3, #10]
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <tcp_output_segment+0x158>
 8011e20:	2318      	movs	r3, #24
 8011e22:	e000      	b.n	8011e26 <tcp_output_segment+0x15a>
 8011e24:	2314      	movs	r3, #20
 8011e26:	4413      	add	r3, r2
 8011e28:	69fa      	ldr	r2, [r7, #28]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d006      	beq.n	8011e3c <tcp_output_segment+0x170>
 8011e2e:	4b10      	ldr	r3, [pc, #64]	; (8011e70 <tcp_output_segment+0x1a4>)
 8011e30:	f240 621c 	movw	r2, #1564	; 0x61c
 8011e34:	4914      	ldr	r1, [pc, #80]	; (8011e88 <tcp_output_segment+0x1bc>)
 8011e36:	4810      	ldr	r0, [pc, #64]	; (8011e78 <tcp_output_segment+0x1ac>)
 8011e38:	f004 fa76 	bl	8016328 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	6858      	ldr	r0, [r3, #4]
 8011e40:	68b9      	ldr	r1, [r7, #8]
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	1d1c      	adds	r4, r3, #4
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	7add      	ldrb	r5, [r3, #11]
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	7a9b      	ldrb	r3, [r3, #10]
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	9202      	str	r2, [sp, #8]
 8011e52:	2206      	movs	r2, #6
 8011e54:	9201      	str	r2, [sp, #4]
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	462b      	mov	r3, r5
 8011e5a:	4622      	mov	r2, r4
 8011e5c:	f002 fe2a 	bl	8014ab4 <ip4_output_if>
 8011e60:	4603      	mov	r3, r0
 8011e62:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3720      	adds	r7, #32
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8011e70:	08019df8 	.word	0x08019df8
 8011e74:	0801a3bc 	.word	0x0801a3bc
 8011e78:	08019e4c 	.word	0x08019e4c
 8011e7c:	0801a3dc 	.word	0x0801a3dc
 8011e80:	0801a3fc 	.word	0x0801a3fc
 8011e84:	2000c7f8 	.word	0x2000c7f8
 8011e88:	0801a420 	.word	0x0801a420

08011e8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011e8c:	b5b0      	push	{r4, r5, r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <tcp_rexmit_rto_prepare+0x1c>
 8011e9a:	4b31      	ldr	r3, [pc, #196]	; (8011f60 <tcp_rexmit_rto_prepare+0xd4>)
 8011e9c:	f240 6263 	movw	r2, #1635	; 0x663
 8011ea0:	4930      	ldr	r1, [pc, #192]	; (8011f64 <tcp_rexmit_rto_prepare+0xd8>)
 8011ea2:	4831      	ldr	r0, [pc, #196]	; (8011f68 <tcp_rexmit_rto_prepare+0xdc>)
 8011ea4:	f004 fa40 	bl	8016328 <iprintf>

  if (pcb->unacked == NULL) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d102      	bne.n	8011eb6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011eb0:	f06f 0305 	mvn.w	r3, #5
 8011eb4:	e050      	b.n	8011f58 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eba:	60fb      	str	r3, [r7, #12]
 8011ebc:	e00b      	b.n	8011ed6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f7ff fee4 	bl	8011c8c <tcp_output_segment_busy>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d002      	beq.n	8011ed0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011eca:	f06f 0305 	mvn.w	r3, #5
 8011ece:	e043      	b.n	8011f58 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	60fb      	str	r3, [r7, #12]
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d1ef      	bne.n	8011ebe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011ede:	68f8      	ldr	r0, [r7, #12]
 8011ee0:	f7ff fed4 	bl	8011c8c <tcp_output_segment_busy>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d002      	beq.n	8011ef0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011eea:	f06f 0305 	mvn.w	r3, #5
 8011eee:	e033      	b.n	8011f58 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7f8 fd75 	bl	800aa0a <lwip_htonl>
 8011f20:	4604      	mov	r4, r0
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	891b      	ldrh	r3, [r3, #8]
 8011f26:	461d      	mov	r5, r3
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f8 fd55 	bl	800a9e0 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	f003 0303 	and.w	r3, r3, #3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <tcp_rexmit_rto_prepare+0xba>
 8011f42:	2301      	movs	r3, #1
 8011f44:	e000      	b.n	8011f48 <tcp_rexmit_rto_prepare+0xbc>
 8011f46:	2300      	movs	r3, #0
 8011f48:	442b      	add	r3, r5
 8011f4a:	18e2      	adds	r2, r4, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3710      	adds	r7, #16
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8011f60:	08019df8 	.word	0x08019df8
 8011f64:	0801a434 	.word	0x0801a434
 8011f68:	08019e4c 	.word	0x08019e4c

08011f6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <tcp_rexmit_rto_commit+0x1c>
 8011f7a:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <tcp_rexmit_rto_commit+0x44>)
 8011f7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011f80:	490c      	ldr	r1, [pc, #48]	; (8011fb4 <tcp_rexmit_rto_commit+0x48>)
 8011f82:	480d      	ldr	r0, [pc, #52]	; (8011fb8 <tcp_rexmit_rto_commit+0x4c>)
 8011f84:	f004 f9d0 	bl	8016328 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f8e:	2bff      	cmp	r3, #255	; 0xff
 8011f90:	d007      	beq.n	8011fa2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f98:	3301      	adds	r3, #1
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff fc7e 	bl	80118a4 <tcp_output>
}
 8011fa8:	bf00      	nop
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	08019df8 	.word	0x08019df8
 8011fb4:	0801a458 	.word	0x0801a458
 8011fb8:	08019e4c 	.word	0x08019e4c

08011fbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d106      	bne.n	8011fd8 <tcp_rexmit_rto+0x1c>
 8011fca:	4b0a      	ldr	r3, [pc, #40]	; (8011ff4 <tcp_rexmit_rto+0x38>)
 8011fcc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011fd0:	4909      	ldr	r1, [pc, #36]	; (8011ff8 <tcp_rexmit_rto+0x3c>)
 8011fd2:	480a      	ldr	r0, [pc, #40]	; (8011ffc <tcp_rexmit_rto+0x40>)
 8011fd4:	f004 f9a8 	bl	8016328 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff ff57 	bl	8011e8c <tcp_rexmit_rto_prepare>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d102      	bne.n	8011fea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff ffc1 	bl	8011f6c <tcp_rexmit_rto_commit>
  }
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	08019df8 	.word	0x08019df8
 8011ff8:	0801a47c 	.word	0x0801a47c
 8011ffc:	08019e4c 	.word	0x08019e4c

08012000 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012000:	b590      	push	{r4, r7, lr}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <tcp_rexmit+0x1c>
 801200e:	4b2f      	ldr	r3, [pc, #188]	; (80120cc <tcp_rexmit+0xcc>)
 8012010:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012014:	492e      	ldr	r1, [pc, #184]	; (80120d0 <tcp_rexmit+0xd0>)
 8012016:	482f      	ldr	r0, [pc, #188]	; (80120d4 <tcp_rexmit+0xd4>)
 8012018:	f004 f986 	bl	8016328 <iprintf>

  if (pcb->unacked == NULL) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012024:	f06f 0305 	mvn.w	r3, #5
 8012028:	e04c      	b.n	80120c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012030:	68b8      	ldr	r0, [r7, #8]
 8012032:	f7ff fe2b 	bl	8011c8c <tcp_output_segment_busy>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801203c:	f06f 0305 	mvn.w	r3, #5
 8012040:	e040      	b.n	80120c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	336c      	adds	r3, #108	; 0x6c
 801204e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012050:	e002      	b.n	8012058 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d011      	beq.n	8012084 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	4618      	mov	r0, r3
 801206a:	f7f8 fcce 	bl	800aa0a <lwip_htonl>
 801206e:	4604      	mov	r4, r0
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	f7f8 fcc7 	bl	800aa0a <lwip_htonl>
 801207c:	4603      	mov	r3, r0
 801207e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012080:	2b00      	cmp	r3, #0
 8012082:	dbe6      	blt.n	8012052 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681a      	ldr	r2, [r3, #0]
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	68ba      	ldr	r2, [r7, #8]
 8012090:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d103      	bne.n	80120a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80120a8:	2bff      	cmp	r3, #255	; 0xff
 80120aa:	d007      	beq.n	80120bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80120b2:	3301      	adds	r3, #1
 80120b4:	b2da      	uxtb	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3714      	adds	r7, #20
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd90      	pop	{r4, r7, pc}
 80120cc:	08019df8 	.word	0x08019df8
 80120d0:	0801a498 	.word	0x0801a498
 80120d4:	08019e4c 	.word	0x08019e4c

080120d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d106      	bne.n	80120f4 <tcp_rexmit_fast+0x1c>
 80120e6:	4b2a      	ldr	r3, [pc, #168]	; (8012190 <tcp_rexmit_fast+0xb8>)
 80120e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80120ec:	4929      	ldr	r1, [pc, #164]	; (8012194 <tcp_rexmit_fast+0xbc>)
 80120ee:	482a      	ldr	r0, [pc, #168]	; (8012198 <tcp_rexmit_fast+0xc0>)
 80120f0:	f004 f91a 	bl	8016328 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d044      	beq.n	8012186 <tcp_rexmit_fast+0xae>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	8b5b      	ldrh	r3, [r3, #26]
 8012100:	f003 0304 	and.w	r3, r3, #4
 8012104:	2b00      	cmp	r3, #0
 8012106:	d13e      	bne.n	8012186 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ff ff79 	bl	8012000 <tcp_rexmit>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d138      	bne.n	8012186 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012120:	4293      	cmp	r3, r2
 8012122:	bf28      	it	cs
 8012124:	4613      	movcs	r3, r2
 8012126:	b29b      	uxth	r3, r3
 8012128:	0fda      	lsrs	r2, r3, #31
 801212a:	4413      	add	r3, r2
 801212c:	105b      	asrs	r3, r3, #1
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801213c:	461a      	mov	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	429a      	cmp	r2, r3
 8012146:	d206      	bcs.n	8012156 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801214c:	005b      	lsls	r3, r3, #1
 801214e:	b29a      	uxth	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012160:	4619      	mov	r1, r3
 8012162:	0049      	lsls	r1, r1, #1
 8012164:	440b      	add	r3, r1
 8012166:	b29b      	uxth	r3, r3
 8012168:	4413      	add	r3, r2
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	8b5b      	ldrh	r3, [r3, #26]
 8012176:	f043 0304 	orr.w	r3, r3, #4
 801217a:	b29a      	uxth	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012186:	bf00      	nop
 8012188:	3708      	adds	r7, #8
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	08019df8 	.word	0x08019df8
 8012194:	0801a4b0 	.word	0x0801a4b0
 8012198:	08019e4c 	.word	0x08019e4c

0801219c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b086      	sub	sp, #24
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	607b      	str	r3, [r7, #4]
 80121a6:	460b      	mov	r3, r1
 80121a8:	817b      	strh	r3, [r7, #10]
 80121aa:	4613      	mov	r3, r2
 80121ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80121ae:	897a      	ldrh	r2, [r7, #10]
 80121b0:	893b      	ldrh	r3, [r7, #8]
 80121b2:	4413      	add	r3, r2
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	3314      	adds	r3, #20
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121be:	4619      	mov	r1, r3
 80121c0:	2022      	movs	r0, #34	; 0x22
 80121c2:	f7f9 fd1b 	bl	800bbfc <pbuf_alloc>
 80121c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d04d      	beq.n	801226a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80121ce:	897b      	ldrh	r3, [r7, #10]
 80121d0:	3313      	adds	r3, #19
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	8952      	ldrh	r2, [r2, #10]
 80121d6:	4293      	cmp	r3, r2
 80121d8:	db06      	blt.n	80121e8 <tcp_output_alloc_header_common+0x4c>
 80121da:	4b26      	ldr	r3, [pc, #152]	; (8012274 <tcp_output_alloc_header_common+0xd8>)
 80121dc:	f240 7223 	movw	r2, #1827	; 0x723
 80121e0:	4925      	ldr	r1, [pc, #148]	; (8012278 <tcp_output_alloc_header_common+0xdc>)
 80121e2:	4826      	ldr	r0, [pc, #152]	; (801227c <tcp_output_alloc_header_common+0xe0>)
 80121e4:	f004 f8a0 	bl	8016328 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80121ee:	8c3b      	ldrh	r3, [r7, #32]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7f8 fbf5 	bl	800a9e0 <lwip_htons>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80121fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012200:	4618      	mov	r0, r3
 8012202:	f7f8 fbed 	bl	800a9e0 <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	461a      	mov	r2, r3
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f7f8 fbf8 	bl	800aa0a <lwip_htonl>
 801221a:	4602      	mov	r2, r0
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012220:	897b      	ldrh	r3, [r7, #10]
 8012222:	089b      	lsrs	r3, r3, #2
 8012224:	b29b      	uxth	r3, r3
 8012226:	3305      	adds	r3, #5
 8012228:	b29b      	uxth	r3, r3
 801222a:	031b      	lsls	r3, r3, #12
 801222c:	b29a      	uxth	r2, r3
 801222e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012232:	b29b      	uxth	r3, r3
 8012234:	4313      	orrs	r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	4618      	mov	r0, r3
 801223a:	f7f8 fbd1 	bl	800a9e0 <lwip_htons>
 801223e:	4603      	mov	r3, r0
 8012240:	461a      	mov	r2, r3
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012248:	4618      	mov	r0, r3
 801224a:	f7f8 fbc9 	bl	800a9e0 <lwip_htons>
 801224e:	4603      	mov	r3, r0
 8012250:	461a      	mov	r2, r3
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	2200      	movs	r2, #0
 801225a:	741a      	strb	r2, [r3, #16]
 801225c:	2200      	movs	r2, #0
 801225e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	2200      	movs	r2, #0
 8012264:	749a      	strb	r2, [r3, #18]
 8012266:	2200      	movs	r2, #0
 8012268:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801226a:	697b      	ldr	r3, [r7, #20]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	08019df8 	.word	0x08019df8
 8012278:	0801a4d0 	.word	0x0801a4d0
 801227c:	08019e4c 	.word	0x08019e4c

08012280 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012280:	b5b0      	push	{r4, r5, r7, lr}
 8012282:	b08a      	sub	sp, #40	; 0x28
 8012284:	af04      	add	r7, sp, #16
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	607b      	str	r3, [r7, #4]
 801228a:	460b      	mov	r3, r1
 801228c:	817b      	strh	r3, [r7, #10]
 801228e:	4613      	mov	r3, r2
 8012290:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d106      	bne.n	80122a6 <tcp_output_alloc_header+0x26>
 8012298:	4b15      	ldr	r3, [pc, #84]	; (80122f0 <tcp_output_alloc_header+0x70>)
 801229a:	f240 7242 	movw	r2, #1858	; 0x742
 801229e:	4915      	ldr	r1, [pc, #84]	; (80122f4 <tcp_output_alloc_header+0x74>)
 80122a0:	4815      	ldr	r0, [pc, #84]	; (80122f8 <tcp_output_alloc_header+0x78>)
 80122a2:	f004 f841 	bl	8016328 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	8adb      	ldrh	r3, [r3, #22]
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	8b12      	ldrh	r2, [r2, #24]
 80122b2:	68f9      	ldr	r1, [r7, #12]
 80122b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80122b6:	893d      	ldrh	r5, [r7, #8]
 80122b8:	897c      	ldrh	r4, [r7, #10]
 80122ba:	9103      	str	r1, [sp, #12]
 80122bc:	2110      	movs	r1, #16
 80122be:	9102      	str	r1, [sp, #8]
 80122c0:	9201      	str	r2, [sp, #4]
 80122c2:	9300      	str	r3, [sp, #0]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	462a      	mov	r2, r5
 80122c8:	4621      	mov	r1, r4
 80122ca:	f7ff ff67 	bl	801219c <tcp_output_alloc_header_common>
 80122ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d006      	beq.n	80122e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80122de:	441a      	add	r2, r3
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80122e4:	697b      	ldr	r3, [r7, #20]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3718      	adds	r7, #24
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bdb0      	pop	{r4, r5, r7, pc}
 80122ee:	bf00      	nop
 80122f0:	08019df8 	.word	0x08019df8
 80122f4:	0801a500 	.word	0x0801a500
 80122f8:	08019e4c 	.word	0x08019e4c

080122fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	4611      	mov	r1, r2
 8012308:	461a      	mov	r2, r3
 801230a:	460b      	mov	r3, r1
 801230c:	71fb      	strb	r3, [r7, #7]
 801230e:	4613      	mov	r3, r2
 8012310:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d106      	bne.n	801232a <tcp_output_fill_options+0x2e>
 801231c:	4b12      	ldr	r3, [pc, #72]	; (8012368 <tcp_output_fill_options+0x6c>)
 801231e:	f240 7256 	movw	r2, #1878	; 0x756
 8012322:	4912      	ldr	r1, [pc, #72]	; (801236c <tcp_output_fill_options+0x70>)
 8012324:	4812      	ldr	r0, [pc, #72]	; (8012370 <tcp_output_fill_options+0x74>)
 8012326:	f003 ffff 	bl	8016328 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	3314      	adds	r3, #20
 8012334:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012336:	8bfb      	ldrh	r3, [r7, #30]
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	461a      	mov	r2, r3
 801233c:	79fb      	ldrb	r3, [r7, #7]
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	f003 0304 	and.w	r3, r3, #4
 8012344:	4413      	add	r3, r2
 8012346:	3314      	adds	r3, #20
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	4413      	add	r3, r2
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	429a      	cmp	r2, r3
 8012350:	d006      	beq.n	8012360 <tcp_output_fill_options+0x64>
 8012352:	4b05      	ldr	r3, [pc, #20]	; (8012368 <tcp_output_fill_options+0x6c>)
 8012354:	f240 7275 	movw	r2, #1909	; 0x775
 8012358:	4906      	ldr	r1, [pc, #24]	; (8012374 <tcp_output_fill_options+0x78>)
 801235a:	4805      	ldr	r0, [pc, #20]	; (8012370 <tcp_output_fill_options+0x74>)
 801235c:	f003 ffe4 	bl	8016328 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012360:	bf00      	nop
 8012362:	3720      	adds	r7, #32
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	08019df8 	.word	0x08019df8
 801236c:	0801a528 	.word	0x0801a528
 8012370:	08019e4c 	.word	0x08019e4c
 8012374:	0801a420 	.word	0x0801a420

08012378 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b08a      	sub	sp, #40	; 0x28
 801237c:	af04      	add	r7, sp, #16
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <tcp_output_control_segment+0x22>
 801238c:	4b1c      	ldr	r3, [pc, #112]	; (8012400 <tcp_output_control_segment+0x88>)
 801238e:	f240 7287 	movw	r2, #1927	; 0x787
 8012392:	491c      	ldr	r1, [pc, #112]	; (8012404 <tcp_output_control_segment+0x8c>)
 8012394:	481c      	ldr	r0, [pc, #112]	; (8012408 <tcp_output_control_segment+0x90>)
 8012396:	f003 ffc7 	bl	8016328 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	6879      	ldr	r1, [r7, #4]
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f7fe fae8 	bl	8010974 <tcp_route>
 80123a4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d102      	bne.n	80123b2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80123ac:	23fc      	movs	r3, #252	; 0xfc
 80123ae:	75fb      	strb	r3, [r7, #23]
 80123b0:	e01c      	b.n	80123ec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d006      	beq.n	80123c6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	7adb      	ldrb	r3, [r3, #11]
 80123bc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	7a9b      	ldrb	r3, [r3, #10]
 80123c2:	757b      	strb	r3, [r7, #21]
 80123c4:	e003      	b.n	80123ce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80123c6:	23ff      	movs	r3, #255	; 0xff
 80123c8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80123ce:	7dba      	ldrb	r2, [r7, #22]
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	9302      	str	r3, [sp, #8]
 80123d4:	2306      	movs	r3, #6
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	7d7b      	ldrb	r3, [r7, #21]
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	4613      	mov	r3, r2
 80123de:	683a      	ldr	r2, [r7, #0]
 80123e0:	6879      	ldr	r1, [r7, #4]
 80123e2:	68b8      	ldr	r0, [r7, #8]
 80123e4:	f002 fb66 	bl	8014ab4 <ip4_output_if>
 80123e8:	4603      	mov	r3, r0
 80123ea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80123ec:	68b8      	ldr	r0, [r7, #8]
 80123ee:	f7f9 fee9 	bl	800c1c4 <pbuf_free>
  return err;
 80123f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3718      	adds	r7, #24
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	08019df8 	.word	0x08019df8
 8012404:	0801a550 	.word	0x0801a550
 8012408:	08019e4c 	.word	0x08019e4c

0801240c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801240c:	b590      	push	{r4, r7, lr}
 801240e:	b08b      	sub	sp, #44	; 0x2c
 8012410:	af04      	add	r7, sp, #16
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
 8012418:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d106      	bne.n	801242e <tcp_rst+0x22>
 8012420:	4b1f      	ldr	r3, [pc, #124]	; (80124a0 <tcp_rst+0x94>)
 8012422:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012426:	491f      	ldr	r1, [pc, #124]	; (80124a4 <tcp_rst+0x98>)
 8012428:	481f      	ldr	r0, [pc, #124]	; (80124a8 <tcp_rst+0x9c>)
 801242a:	f003 ff7d 	bl	8016328 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	2b00      	cmp	r3, #0
 8012432:	d106      	bne.n	8012442 <tcp_rst+0x36>
 8012434:	4b1a      	ldr	r3, [pc, #104]	; (80124a0 <tcp_rst+0x94>)
 8012436:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801243a:	491c      	ldr	r1, [pc, #112]	; (80124ac <tcp_rst+0xa0>)
 801243c:	481a      	ldr	r0, [pc, #104]	; (80124a8 <tcp_rst+0x9c>)
 801243e:	f003 ff73 	bl	8016328 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012442:	2300      	movs	r3, #0
 8012444:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012446:	f246 0308 	movw	r3, #24584	; 0x6008
 801244a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801244c:	7dfb      	ldrb	r3, [r7, #23]
 801244e:	b29c      	uxth	r4, r3
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	f7f8 fada 	bl	800aa0a <lwip_htonl>
 8012456:	4602      	mov	r2, r0
 8012458:	8abb      	ldrh	r3, [r7, #20]
 801245a:	9303      	str	r3, [sp, #12]
 801245c:	2314      	movs	r3, #20
 801245e:	9302      	str	r3, [sp, #8]
 8012460:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012462:	9301      	str	r3, [sp, #4]
 8012464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	4613      	mov	r3, r2
 801246a:	2200      	movs	r2, #0
 801246c:	4621      	mov	r1, r4
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7ff fe94 	bl	801219c <tcp_output_alloc_header_common>
 8012474:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00c      	beq.n	8012496 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	2200      	movs	r2, #0
 8012480:	6939      	ldr	r1, [r7, #16]
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7ff ff3a 	bl	80122fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	6939      	ldr	r1, [r7, #16]
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7ff ff72 	bl	8012378 <tcp_output_control_segment>
 8012494:	e000      	b.n	8012498 <tcp_rst+0x8c>
    return;
 8012496:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012498:	371c      	adds	r7, #28
 801249a:	46bd      	mov	sp, r7
 801249c:	bd90      	pop	{r4, r7, pc}
 801249e:	bf00      	nop
 80124a0:	08019df8 	.word	0x08019df8
 80124a4:	0801a57c 	.word	0x0801a57c
 80124a8:	08019e4c 	.word	0x08019e4c
 80124ac:	0801a598 	.word	0x0801a598

080124b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80124b0:	b590      	push	{r4, r7, lr}
 80124b2:	b087      	sub	sp, #28
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80124bc:	2300      	movs	r3, #0
 80124be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d106      	bne.n	80124d4 <tcp_send_empty_ack+0x24>
 80124c6:	4b28      	ldr	r3, [pc, #160]	; (8012568 <tcp_send_empty_ack+0xb8>)
 80124c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80124cc:	4927      	ldr	r1, [pc, #156]	; (801256c <tcp_send_empty_ack+0xbc>)
 80124ce:	4828      	ldr	r0, [pc, #160]	; (8012570 <tcp_send_empty_ack+0xc0>)
 80124d0:	f003 ff2a 	bl	8016328 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	f003 0304 	and.w	r3, r3, #4
 80124de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80124e0:	7d7b      	ldrb	r3, [r7, #21]
 80124e2:	b29c      	uxth	r4, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7f8 fa8e 	bl	800aa0a <lwip_htonl>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2200      	movs	r2, #0
 80124f2:	4621      	mov	r1, r4
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff fec3 	bl	8012280 <tcp_output_alloc_header>
 80124fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d109      	bne.n	8012516 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8b5b      	ldrh	r3, [r3, #26]
 8012506:	f043 0303 	orr.w	r3, r3, #3
 801250a:	b29a      	uxth	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012510:	f06f 0301 	mvn.w	r3, #1
 8012514:	e023      	b.n	801255e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012516:	7dbb      	ldrb	r3, [r7, #22]
 8012518:	7dfa      	ldrb	r2, [r7, #23]
 801251a:	6939      	ldr	r1, [r7, #16]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff feed 	bl	80122fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3304      	adds	r3, #4
 8012528:	6939      	ldr	r1, [r7, #16]
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff ff24 	bl	8012378 <tcp_output_control_segment>
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d007      	beq.n	801254c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	8b5b      	ldrh	r3, [r3, #26]
 8012540:	f043 0303 	orr.w	r3, r3, #3
 8012544:	b29a      	uxth	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	835a      	strh	r2, [r3, #26]
 801254a:	e006      	b.n	801255a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	8b5b      	ldrh	r3, [r3, #26]
 8012550:	f023 0303 	bic.w	r3, r3, #3
 8012554:	b29a      	uxth	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801255e:	4618      	mov	r0, r3
 8012560:	371c      	adds	r7, #28
 8012562:	46bd      	mov	sp, r7
 8012564:	bd90      	pop	{r4, r7, pc}
 8012566:	bf00      	nop
 8012568:	08019df8 	.word	0x08019df8
 801256c:	0801a5b4 	.word	0x0801a5b4
 8012570:	08019e4c 	.word	0x08019e4c

08012574 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012574:	b590      	push	{r4, r7, lr}
 8012576:	b087      	sub	sp, #28
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801257c:	2300      	movs	r3, #0
 801257e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d106      	bne.n	8012594 <tcp_keepalive+0x20>
 8012586:	4b18      	ldr	r3, [pc, #96]	; (80125e8 <tcp_keepalive+0x74>)
 8012588:	f640 0224 	movw	r2, #2084	; 0x824
 801258c:	4917      	ldr	r1, [pc, #92]	; (80125ec <tcp_keepalive+0x78>)
 801258e:	4818      	ldr	r0, [pc, #96]	; (80125f0 <tcp_keepalive+0x7c>)
 8012590:	f003 feca 	bl	8016328 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012594:	7dfb      	ldrb	r3, [r7, #23]
 8012596:	b29c      	uxth	r4, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801259c:	3b01      	subs	r3, #1
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f8 fa33 	bl	800aa0a <lwip_htonl>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2200      	movs	r2, #0
 80125a8:	4621      	mov	r1, r4
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7ff fe68 	bl	8012280 <tcp_output_alloc_header>
 80125b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80125b8:	f04f 33ff 	mov.w	r3, #4294967295
 80125bc:	e010      	b.n	80125e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80125be:	7dfb      	ldrb	r3, [r7, #23]
 80125c0:	2200      	movs	r2, #0
 80125c2:	6939      	ldr	r1, [r7, #16]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff fe99 	bl	80122fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	3304      	adds	r3, #4
 80125d0:	6939      	ldr	r1, [r7, #16]
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff fed0 	bl	8012378 <tcp_output_control_segment>
 80125d8:	4603      	mov	r3, r0
 80125da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80125dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	371c      	adds	r7, #28
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd90      	pop	{r4, r7, pc}
 80125e8:	08019df8 	.word	0x08019df8
 80125ec:	0801a5d4 	.word	0x0801a5d4
 80125f0:	08019e4c 	.word	0x08019e4c

080125f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b08b      	sub	sp, #44	; 0x2c
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125fc:	2300      	movs	r3, #0
 80125fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d106      	bne.n	8012616 <tcp_zero_window_probe+0x22>
 8012608:	4b4c      	ldr	r3, [pc, #304]	; (801273c <tcp_zero_window_probe+0x148>)
 801260a:	f640 024f 	movw	r2, #2127	; 0x84f
 801260e:	494c      	ldr	r1, [pc, #304]	; (8012740 <tcp_zero_window_probe+0x14c>)
 8012610:	484c      	ldr	r0, [pc, #304]	; (8012744 <tcp_zero_window_probe+0x150>)
 8012612:	f003 fe89 	bl	8016328 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801261a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d101      	bne.n	8012626 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012622:	2300      	movs	r3, #0
 8012624:	e086      	b.n	8012734 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801262c:	2bff      	cmp	r3, #255	; 0xff
 801262e:	d007      	beq.n	8012640 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012636:	3301      	adds	r3, #1
 8012638:	b2da      	uxtb	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012640:	6a3b      	ldr	r3, [r7, #32]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	899b      	ldrh	r3, [r3, #12]
 8012646:	b29b      	uxth	r3, r3
 8012648:	4618      	mov	r0, r3
 801264a:	f7f8 f9c9 	bl	800a9e0 <lwip_htons>
 801264e:	4603      	mov	r3, r0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	f003 0301 	and.w	r3, r3, #1
 8012656:	2b00      	cmp	r3, #0
 8012658:	d005      	beq.n	8012666 <tcp_zero_window_probe+0x72>
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	891b      	ldrh	r3, [r3, #8]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <tcp_zero_window_probe+0x72>
 8012662:	2301      	movs	r3, #1
 8012664:	e000      	b.n	8012668 <tcp_zero_window_probe+0x74>
 8012666:	2300      	movs	r3, #0
 8012668:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801266a:	7ffb      	ldrb	r3, [r7, #31]
 801266c:	2b00      	cmp	r3, #0
 801266e:	bf0c      	ite	eq
 8012670:	2301      	moveq	r3, #1
 8012672:	2300      	movne	r3, #0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801267c:	b299      	uxth	r1, r3
 801267e:	6a3b      	ldr	r3, [r7, #32]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	8bba      	ldrh	r2, [r7, #28]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ff fdfa 	bl	8012280 <tcp_output_alloc_header>
 801268c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d102      	bne.n	801269a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012694:	f04f 33ff 	mov.w	r3, #4294967295
 8012698:	e04c      	b.n	8012734 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80126a0:	7ffb      	ldrb	r3, [r7, #31]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d011      	beq.n	80126ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	899b      	ldrh	r3, [r3, #12]
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	b21b      	sxth	r3, r3
 80126ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80126b2:	b21c      	sxth	r4, r3
 80126b4:	2011      	movs	r0, #17
 80126b6:	f7f8 f993 	bl	800a9e0 <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	b21b      	sxth	r3, r3
 80126be:	4323      	orrs	r3, r4
 80126c0:	b21b      	sxth	r3, r3
 80126c2:	b29a      	uxth	r2, r3
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	819a      	strh	r2, [r3, #12]
 80126c8:	e010      	b.n	80126ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80126ca:	69bb      	ldr	r3, [r7, #24]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	3314      	adds	r3, #20
 80126d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80126d2:	6a3b      	ldr	r3, [r7, #32]
 80126d4:	6858      	ldr	r0, [r3, #4]
 80126d6:	6a3b      	ldr	r3, [r7, #32]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	891a      	ldrh	r2, [r3, #8]
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	891b      	ldrh	r3, [r3, #8]
 80126e0:	1ad3      	subs	r3, r2, r3
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	2201      	movs	r2, #1
 80126e6:	6939      	ldr	r1, [r7, #16]
 80126e8:	f7f9 ff72 	bl	800c5d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7f8 f989 	bl	800aa0a <lwip_htonl>
 80126f8:	4603      	mov	r3, r0
 80126fa:	3301      	adds	r3, #1
 80126fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	da02      	bge.n	8012710 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012714:	2200      	movs	r2, #0
 8012716:	69b9      	ldr	r1, [r7, #24]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff fdef 	bl	80122fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	3304      	adds	r3, #4
 8012724:	69b9      	ldr	r1, [r7, #24]
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7ff fe26 	bl	8012378 <tcp_output_control_segment>
 801272c:	4603      	mov	r3, r0
 801272e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012730:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012734:	4618      	mov	r0, r3
 8012736:	372c      	adds	r7, #44	; 0x2c
 8012738:	46bd      	mov	sp, r7
 801273a:	bd90      	pop	{r4, r7, pc}
 801273c:	08019df8 	.word	0x08019df8
 8012740:	0801a5f0 	.word	0x0801a5f0
 8012744:	08019e4c 	.word	0x08019e4c

08012748 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012750:	f7fa f82c 	bl	800c7ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012754:	4b0a      	ldr	r3, [pc, #40]	; (8012780 <tcpip_tcp_timer+0x38>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d103      	bne.n	8012764 <tcpip_tcp_timer+0x1c>
 801275c:	4b09      	ldr	r3, [pc, #36]	; (8012784 <tcpip_tcp_timer+0x3c>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d005      	beq.n	8012770 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012764:	2200      	movs	r2, #0
 8012766:	4908      	ldr	r1, [pc, #32]	; (8012788 <tcpip_tcp_timer+0x40>)
 8012768:	20fa      	movs	r0, #250	; 0xfa
 801276a:	f000 f8f3 	bl	8012954 <sys_timeout>
 801276e:	e003      	b.n	8012778 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012770:	4b06      	ldr	r3, [pc, #24]	; (801278c <tcpip_tcp_timer+0x44>)
 8012772:	2200      	movs	r2, #0
 8012774:	601a      	str	r2, [r3, #0]
  }
}
 8012776:	bf00      	nop
 8012778:	bf00      	nop
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	2000c804 	.word	0x2000c804
 8012784:	2000c808 	.word	0x2000c808
 8012788:	08012749 	.word	0x08012749
 801278c:	2000c850 	.word	0x2000c850

08012790 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012794:	4b0a      	ldr	r3, [pc, #40]	; (80127c0 <tcp_timer_needed+0x30>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d10f      	bne.n	80127bc <tcp_timer_needed+0x2c>
 801279c:	4b09      	ldr	r3, [pc, #36]	; (80127c4 <tcp_timer_needed+0x34>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d103      	bne.n	80127ac <tcp_timer_needed+0x1c>
 80127a4:	4b08      	ldr	r3, [pc, #32]	; (80127c8 <tcp_timer_needed+0x38>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d007      	beq.n	80127bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80127ac:	4b04      	ldr	r3, [pc, #16]	; (80127c0 <tcp_timer_needed+0x30>)
 80127ae:	2201      	movs	r2, #1
 80127b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80127b2:	2200      	movs	r2, #0
 80127b4:	4905      	ldr	r1, [pc, #20]	; (80127cc <tcp_timer_needed+0x3c>)
 80127b6:	20fa      	movs	r0, #250	; 0xfa
 80127b8:	f000 f8cc 	bl	8012954 <sys_timeout>
  }
}
 80127bc:	bf00      	nop
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	2000c850 	.word	0x2000c850
 80127c4:	2000c804 	.word	0x2000c804
 80127c8:	2000c808 	.word	0x2000c808
 80127cc:	08012749 	.word	0x08012749

080127d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80127dc:	200a      	movs	r0, #10
 80127de:	f7f8 fdd7 	bl	800b390 <memp_malloc>
 80127e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d109      	bne.n	80127fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d151      	bne.n	8012894 <sys_timeout_abs+0xc4>
 80127f0:	4b2a      	ldr	r3, [pc, #168]	; (801289c <sys_timeout_abs+0xcc>)
 80127f2:	22be      	movs	r2, #190	; 0xbe
 80127f4:	492a      	ldr	r1, [pc, #168]	; (80128a0 <sys_timeout_abs+0xd0>)
 80127f6:	482b      	ldr	r0, [pc, #172]	; (80128a4 <sys_timeout_abs+0xd4>)
 80127f8:	f003 fd96 	bl	8016328 <iprintf>
    return;
 80127fc:	e04a      	b.n	8012894 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	2200      	movs	r2, #0
 8012802:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	68ba      	ldr	r2, [r7, #8]
 8012808:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	68fa      	ldr	r2, [r7, #12]
 8012814:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012816:	4b24      	ldr	r3, [pc, #144]	; (80128a8 <sys_timeout_abs+0xd8>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d103      	bne.n	8012826 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801281e:	4a22      	ldr	r2, [pc, #136]	; (80128a8 <sys_timeout_abs+0xd8>)
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	6013      	str	r3, [r2, #0]
    return;
 8012824:	e037      	b.n	8012896 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	685a      	ldr	r2, [r3, #4]
 801282a:	4b1f      	ldr	r3, [pc, #124]	; (80128a8 <sys_timeout_abs+0xd8>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	1ad3      	subs	r3, r2, r3
 8012832:	0fdb      	lsrs	r3, r3, #31
 8012834:	f003 0301 	and.w	r3, r3, #1
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d007      	beq.n	801284e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801283e:	4b1a      	ldr	r3, [pc, #104]	; (80128a8 <sys_timeout_abs+0xd8>)
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012846:	4a18      	ldr	r2, [pc, #96]	; (80128a8 <sys_timeout_abs+0xd8>)
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	e023      	b.n	8012896 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801284e:	4b16      	ldr	r3, [pc, #88]	; (80128a8 <sys_timeout_abs+0xd8>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	617b      	str	r3, [r7, #20]
 8012854:	e01a      	b.n	801288c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00b      	beq.n	8012876 <sys_timeout_abs+0xa6>
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	685a      	ldr	r2, [r3, #4]
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	0fdb      	lsrs	r3, r3, #31
 801286c:	f003 0301 	and.w	r3, r3, #1
 8012870:	b2db      	uxtb	r3, r3
 8012872:	2b00      	cmp	r3, #0
 8012874:	d007      	beq.n	8012886 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	693a      	ldr	r2, [r7, #16]
 8012882:	601a      	str	r2, [r3, #0]
        break;
 8012884:	e007      	b.n	8012896 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	617b      	str	r3, [r7, #20]
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d1e1      	bne.n	8012856 <sys_timeout_abs+0x86>
 8012892:	e000      	b.n	8012896 <sys_timeout_abs+0xc6>
    return;
 8012894:	bf00      	nop
      }
    }
  }
}
 8012896:	3718      	adds	r7, #24
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	0801a614 	.word	0x0801a614
 80128a0:	0801a648 	.word	0x0801a648
 80128a4:	0801a688 	.word	0x0801a688
 80128a8:	2000c848 	.word	0x2000c848

080128ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b086      	sub	sp, #24
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	4798      	blx	r3

  now = sys_now();
 80128be:	f7f2 f975 	bl	8004bac <sys_now>
 80128c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	4b0f      	ldr	r3, [pc, #60]	; (8012908 <lwip_cyclic_timer+0x5c>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4413      	add	r3, r2
 80128ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	1ad3      	subs	r3, r2, r3
 80128d6:	0fdb      	lsrs	r3, r3, #31
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d009      	beq.n	80128f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	4413      	add	r3, r2
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	4907      	ldr	r1, [pc, #28]	; (801290c <lwip_cyclic_timer+0x60>)
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7ff ff6e 	bl	80127d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80128f4:	e004      	b.n	8012900 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	4904      	ldr	r1, [pc, #16]	; (801290c <lwip_cyclic_timer+0x60>)
 80128fa:	68f8      	ldr	r0, [r7, #12]
 80128fc:	f7ff ff68 	bl	80127d0 <sys_timeout_abs>
}
 8012900:	bf00      	nop
 8012902:	3718      	adds	r7, #24
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	2000c84c 	.word	0x2000c84c
 801290c:	080128ad 	.word	0x080128ad

08012910 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012916:	2301      	movs	r3, #1
 8012918:	607b      	str	r3, [r7, #4]
 801291a:	e00e      	b.n	801293a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801291c:	4a0b      	ldr	r2, [pc, #44]	; (801294c <sys_timeouts_init+0x3c>)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	00db      	lsls	r3, r3, #3
 8012928:	4a08      	ldr	r2, [pc, #32]	; (801294c <sys_timeouts_init+0x3c>)
 801292a:	4413      	add	r3, r2
 801292c:	461a      	mov	r2, r3
 801292e:	4908      	ldr	r1, [pc, #32]	; (8012950 <sys_timeouts_init+0x40>)
 8012930:	f000 f810 	bl	8012954 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3301      	adds	r3, #1
 8012938:	607b      	str	r3, [r7, #4]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b02      	cmp	r3, #2
 801293e:	d9ed      	bls.n	801291c <sys_timeouts_init+0xc>
  }
}
 8012940:	bf00      	nop
 8012942:	bf00      	nop
 8012944:	3708      	adds	r7, #8
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	0801b2f8 	.word	0x0801b2f8
 8012950:	080128ad 	.word	0x080128ad

08012954 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012966:	d306      	bcc.n	8012976 <sys_timeout+0x22>
 8012968:	4b0a      	ldr	r3, [pc, #40]	; (8012994 <sys_timeout+0x40>)
 801296a:	f240 1229 	movw	r2, #297	; 0x129
 801296e:	490a      	ldr	r1, [pc, #40]	; (8012998 <sys_timeout+0x44>)
 8012970:	480a      	ldr	r0, [pc, #40]	; (801299c <sys_timeout+0x48>)
 8012972:	f003 fcd9 	bl	8016328 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012976:	f7f2 f919 	bl	8004bac <sys_now>
 801297a:	4602      	mov	r2, r0
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	4413      	add	r3, r2
 8012980:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	68b9      	ldr	r1, [r7, #8]
 8012986:	6978      	ldr	r0, [r7, #20]
 8012988:	f7ff ff22 	bl	80127d0 <sys_timeout_abs>
#endif
}
 801298c:	bf00      	nop
 801298e:	3718      	adds	r7, #24
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	0801a614 	.word	0x0801a614
 8012998:	0801a6b0 	.word	0x0801a6b0
 801299c:	0801a688 	.word	0x0801a688

080129a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80129a6:	f7f2 f901 	bl	8004bac <sys_now>
 80129aa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80129ac:	4b17      	ldr	r3, [pc, #92]	; (8012a0c <sys_check_timeouts+0x6c>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d022      	beq.n	80129fe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	0fdb      	lsrs	r3, r3, #31
 80129c2:	f003 0301 	and.w	r3, r3, #1
 80129c6:	b2db      	uxtb	r3, r3
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d11a      	bne.n	8012a02 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a0e      	ldr	r2, [pc, #56]	; (8012a0c <sys_check_timeouts+0x6c>)
 80129d2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	4a0a      	ldr	r2, [pc, #40]	; (8012a10 <sys_check_timeouts+0x70>)
 80129e6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80129e8:	68b9      	ldr	r1, [r7, #8]
 80129ea:	200a      	movs	r0, #10
 80129ec:	f7f8 fd46 	bl	800b47c <memp_free>
    if (handler != NULL) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0da      	beq.n	80129ac <sys_check_timeouts+0xc>
      handler(arg);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6838      	ldr	r0, [r7, #0]
 80129fa:	4798      	blx	r3
  do {
 80129fc:	e7d6      	b.n	80129ac <sys_check_timeouts+0xc>
      return;
 80129fe:	bf00      	nop
 8012a00:	e000      	b.n	8012a04 <sys_check_timeouts+0x64>
      return;
 8012a02:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012a04:	3710      	adds	r7, #16
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	2000c848 	.word	0x2000c848
 8012a10:	2000c84c 	.word	0x2000c84c

08012a14 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012a1a:	4b16      	ldr	r3, [pc, #88]	; (8012a74 <sys_timeouts_sleeptime+0x60>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012a22:	f04f 33ff 	mov.w	r3, #4294967295
 8012a26:	e020      	b.n	8012a6a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012a28:	f7f2 f8c0 	bl	8004bac <sys_now>
 8012a2c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012a2e:	4b11      	ldr	r3, [pc, #68]	; (8012a74 <sys_timeouts_sleeptime+0x60>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	685a      	ldr	r2, [r3, #4]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	1ad3      	subs	r3, r2, r3
 8012a38:	0fdb      	lsrs	r3, r3, #31
 8012a3a:	f003 0301 	and.w	r3, r3, #1
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d001      	beq.n	8012a48 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012a44:	2300      	movs	r3, #0
 8012a46:	e010      	b.n	8012a6a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012a48:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <sys_timeouts_sleeptime+0x60>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	685a      	ldr	r2, [r3, #4]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	da06      	bge.n	8012a68 <sys_timeouts_sleeptime+0x54>
 8012a5a:	4b07      	ldr	r3, [pc, #28]	; (8012a78 <sys_timeouts_sleeptime+0x64>)
 8012a5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012a60:	4906      	ldr	r1, [pc, #24]	; (8012a7c <sys_timeouts_sleeptime+0x68>)
 8012a62:	4807      	ldr	r0, [pc, #28]	; (8012a80 <sys_timeouts_sleeptime+0x6c>)
 8012a64:	f003 fc60 	bl	8016328 <iprintf>
    return ret;
 8012a68:	683b      	ldr	r3, [r7, #0]
  }
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	2000c848 	.word	0x2000c848
 8012a78:	0801a614 	.word	0x0801a614
 8012a7c:	0801a6e8 	.word	0x0801a6e8
 8012a80:	0801a688 	.word	0x0801a688

08012a84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012a88:	f003 fb4e 	bl	8016128 <rand>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	4b01      	ldr	r3, [pc, #4]	; (8012aa4 <udp_init+0x20>)
 8012a9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012aa0:	bf00      	nop
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	2000002c 	.word	0x2000002c

08012aa8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012ab2:	4b17      	ldr	r3, [pc, #92]	; (8012b10 <udp_new_port+0x68>)
 8012ab4:	881b      	ldrh	r3, [r3, #0]
 8012ab6:	1c5a      	adds	r2, r3, #1
 8012ab8:	b291      	uxth	r1, r2
 8012aba:	4a15      	ldr	r2, [pc, #84]	; (8012b10 <udp_new_port+0x68>)
 8012abc:	8011      	strh	r1, [r2, #0]
 8012abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d103      	bne.n	8012ace <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012ac6:	4b12      	ldr	r3, [pc, #72]	; (8012b10 <udp_new_port+0x68>)
 8012ac8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012acc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ace:	4b11      	ldr	r3, [pc, #68]	; (8012b14 <udp_new_port+0x6c>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	603b      	str	r3, [r7, #0]
 8012ad4:	e011      	b.n	8012afa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	8a5a      	ldrh	r2, [r3, #18]
 8012ada:	4b0d      	ldr	r3, [pc, #52]	; (8012b10 <udp_new_port+0x68>)
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d108      	bne.n	8012af4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012ae2:	88fb      	ldrh	r3, [r7, #6]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	80fb      	strh	r3, [r7, #6]
 8012ae8:	88fb      	ldrh	r3, [r7, #6]
 8012aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012aee:	d3e0      	bcc.n	8012ab2 <udp_new_port+0xa>
        return 0;
 8012af0:	2300      	movs	r3, #0
 8012af2:	e007      	b.n	8012b04 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	603b      	str	r3, [r7, #0]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1ea      	bne.n	8012ad6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012b00:	4b03      	ldr	r3, [pc, #12]	; (8012b10 <udp_new_port+0x68>)
 8012b02:	881b      	ldrh	r3, [r3, #0]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	2000002c 	.word	0x2000002c
 8012b14:	2000c854 	.word	0x2000c854

08012b18 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	4613      	mov	r3, r2
 8012b24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d105      	bne.n	8012b38 <udp_input_local_match+0x20>
 8012b2c:	4b27      	ldr	r3, [pc, #156]	; (8012bcc <udp_input_local_match+0xb4>)
 8012b2e:	2287      	movs	r2, #135	; 0x87
 8012b30:	4927      	ldr	r1, [pc, #156]	; (8012bd0 <udp_input_local_match+0xb8>)
 8012b32:	4828      	ldr	r0, [pc, #160]	; (8012bd4 <udp_input_local_match+0xbc>)
 8012b34:	f003 fbf8 	bl	8016328 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d105      	bne.n	8012b4a <udp_input_local_match+0x32>
 8012b3e:	4b23      	ldr	r3, [pc, #140]	; (8012bcc <udp_input_local_match+0xb4>)
 8012b40:	2288      	movs	r2, #136	; 0x88
 8012b42:	4925      	ldr	r1, [pc, #148]	; (8012bd8 <udp_input_local_match+0xc0>)
 8012b44:	4823      	ldr	r0, [pc, #140]	; (8012bd4 <udp_input_local_match+0xbc>)
 8012b46:	f003 fbef 	bl	8016328 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	7a1b      	ldrb	r3, [r3, #8]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d00b      	beq.n	8012b6a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	7a1a      	ldrb	r2, [r3, #8]
 8012b56:	4b21      	ldr	r3, [pc, #132]	; (8012bdc <udp_input_local_match+0xc4>)
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b5e:	3301      	adds	r3, #1
 8012b60:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d001      	beq.n	8012b6a <udp_input_local_match+0x52>
    return 0;
 8012b66:	2300      	movs	r3, #0
 8012b68:	e02b      	b.n	8012bc2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012b6a:	79fb      	ldrb	r3, [r7, #7]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d018      	beq.n	8012ba2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d013      	beq.n	8012b9e <udp_input_local_match+0x86>
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00f      	beq.n	8012b9e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b7e:	4b17      	ldr	r3, [pc, #92]	; (8012bdc <udp_input_local_match+0xc4>)
 8012b80:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b86:	d00a      	beq.n	8012b9e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	4b13      	ldr	r3, [pc, #76]	; (8012bdc <udp_input_local_match+0xc4>)
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	405a      	eors	r2, r3
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	3308      	adds	r3, #8
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d110      	bne.n	8012bc0 <udp_input_local_match+0xa8>
          return 1;
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	e00f      	b.n	8012bc2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d009      	beq.n	8012bbc <udp_input_local_match+0xa4>
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d005      	beq.n	8012bbc <udp_input_local_match+0xa4>
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	4b09      	ldr	r3, [pc, #36]	; (8012bdc <udp_input_local_match+0xc4>)
 8012bb6:	695b      	ldr	r3, [r3, #20]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d101      	bne.n	8012bc0 <udp_input_local_match+0xa8>
        return 1;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	e000      	b.n	8012bc2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012bc0:	2300      	movs	r3, #0
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	0801a6fc 	.word	0x0801a6fc
 8012bd0:	0801a72c 	.word	0x0801a72c
 8012bd4:	0801a750 	.word	0x0801a750
 8012bd8:	0801a778 	.word	0x0801a778
 8012bdc:	200090a4 	.word	0x200090a4

08012be0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012be0:	b590      	push	{r4, r7, lr}
 8012be2:	b08d      	sub	sp, #52	; 0x34
 8012be4:	af02      	add	r7, sp, #8
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d105      	bne.n	8012c00 <udp_input+0x20>
 8012bf4:	4b7c      	ldr	r3, [pc, #496]	; (8012de8 <udp_input+0x208>)
 8012bf6:	22cf      	movs	r2, #207	; 0xcf
 8012bf8:	497c      	ldr	r1, [pc, #496]	; (8012dec <udp_input+0x20c>)
 8012bfa:	487d      	ldr	r0, [pc, #500]	; (8012df0 <udp_input+0x210>)
 8012bfc:	f003 fb94 	bl	8016328 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d105      	bne.n	8012c12 <udp_input+0x32>
 8012c06:	4b78      	ldr	r3, [pc, #480]	; (8012de8 <udp_input+0x208>)
 8012c08:	22d0      	movs	r2, #208	; 0xd0
 8012c0a:	497a      	ldr	r1, [pc, #488]	; (8012df4 <udp_input+0x214>)
 8012c0c:	4878      	ldr	r0, [pc, #480]	; (8012df0 <udp_input+0x210>)
 8012c0e:	f003 fb8b 	bl	8016328 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	895b      	ldrh	r3, [r3, #10]
 8012c16:	2b07      	cmp	r3, #7
 8012c18:	d803      	bhi.n	8012c22 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f7f9 fad2 	bl	800c1c4 <pbuf_free>
    goto end;
 8012c20:	e0de      	b.n	8012de0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012c28:	4b73      	ldr	r3, [pc, #460]	; (8012df8 <udp_input+0x218>)
 8012c2a:	695b      	ldr	r3, [r3, #20]
 8012c2c:	4a72      	ldr	r2, [pc, #456]	; (8012df8 <udp_input+0x218>)
 8012c2e:	6812      	ldr	r2, [r2, #0]
 8012c30:	4611      	mov	r1, r2
 8012c32:	4618      	mov	r0, r3
 8012c34:	f002 f816 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	881b      	ldrh	r3, [r3, #0]
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7f7 fecc 	bl	800a9e0 <lwip_htons>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	885b      	ldrh	r3, [r3, #2]
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7f7 fec4 	bl	800a9e0 <lwip_htons>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012c60:	2300      	movs	r3, #0
 8012c62:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012c64:	2300      	movs	r3, #0
 8012c66:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c68:	4b64      	ldr	r3, [pc, #400]	; (8012dfc <udp_input+0x21c>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6e:	e054      	b.n	8012d1a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	8a5b      	ldrh	r3, [r3, #18]
 8012c74:	89fa      	ldrh	r2, [r7, #14]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d14a      	bne.n	8012d10 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012c7a:	7cfb      	ldrb	r3, [r7, #19]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	6839      	ldr	r1, [r7, #0]
 8012c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c82:	f7ff ff49 	bl	8012b18 <udp_input_local_match>
 8012c86:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d041      	beq.n	8012d10 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	7c1b      	ldrb	r3, [r3, #16]
 8012c90:	f003 0304 	and.w	r3, r3, #4
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d11d      	bne.n	8012cd4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	61fb      	str	r3, [r7, #28]
 8012ca2:	e017      	b.n	8012cd4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012ca4:	7cfb      	ldrb	r3, [r7, #19]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d014      	beq.n	8012cd4 <udp_input+0xf4>
 8012caa:	4b53      	ldr	r3, [pc, #332]	; (8012df8 <udp_input+0x218>)
 8012cac:	695b      	ldr	r3, [r3, #20]
 8012cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cb2:	d10f      	bne.n	8012cd4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	3304      	adds	r3, #4
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d008      	beq.n	8012cd4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	3304      	adds	r3, #4
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d101      	bne.n	8012cd4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd6:	8a9b      	ldrh	r3, [r3, #20]
 8012cd8:	8a3a      	ldrh	r2, [r7, #16]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d118      	bne.n	8012d10 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d005      	beq.n	8012cf2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce8:	685a      	ldr	r2, [r3, #4]
 8012cea:	4b43      	ldr	r3, [pc, #268]	; (8012df8 <udp_input+0x218>)
 8012cec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d10e      	bne.n	8012d10 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d014      	beq.n	8012d22 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfa:	68da      	ldr	r2, [r3, #12]
 8012cfc:	6a3b      	ldr	r3, [r7, #32]
 8012cfe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012d00:	4b3e      	ldr	r3, [pc, #248]	; (8012dfc <udp_input+0x21c>)
 8012d02:	681a      	ldr	r2, [r3, #0]
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012d08:	4a3c      	ldr	r2, [pc, #240]	; (8012dfc <udp_input+0x21c>)
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012d0e:	e008      	b.n	8012d22 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	627b      	str	r3, [r7, #36]	; 0x24
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d1a7      	bne.n	8012c70 <udp_input+0x90>
 8012d20:	e000      	b.n	8012d24 <udp_input+0x144>
        break;
 8012d22:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d101      	bne.n	8012d2e <udp_input+0x14e>
    pcb = uncon_pcb;
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <udp_input+0x15a>
    for_us = 1;
 8012d34:	2301      	movs	r3, #1
 8012d36:	76fb      	strb	r3, [r7, #27]
 8012d38:	e00a      	b.n	8012d50 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	3304      	adds	r3, #4
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	4b2d      	ldr	r3, [pc, #180]	; (8012df8 <udp_input+0x218>)
 8012d42:	695b      	ldr	r3, [r3, #20]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	bf0c      	ite	eq
 8012d48:	2301      	moveq	r3, #1
 8012d4a:	2300      	movne	r3, #0
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012d50:	7efb      	ldrb	r3, [r7, #27]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d041      	beq.n	8012dda <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012d56:	2108      	movs	r1, #8
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7f9 f9ad 	bl	800c0b8 <pbuf_remove_header>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00a      	beq.n	8012d7a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012d64:	4b20      	ldr	r3, [pc, #128]	; (8012de8 <udp_input+0x208>)
 8012d66:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012d6a:	4925      	ldr	r1, [pc, #148]	; (8012e00 <udp_input+0x220>)
 8012d6c:	4820      	ldr	r0, [pc, #128]	; (8012df0 <udp_input+0x210>)
 8012d6e:	f003 fadb 	bl	8016328 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7f9 fa26 	bl	800c1c4 <pbuf_free>
      goto end;
 8012d78:	e032      	b.n	8012de0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d012      	beq.n	8012da6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d82:	699b      	ldr	r3, [r3, #24]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d00a      	beq.n	8012d9e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8a:	699c      	ldr	r4, [r3, #24]
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8e:	69d8      	ldr	r0, [r3, #28]
 8012d90:	8a3b      	ldrh	r3, [r7, #16]
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	4b1b      	ldr	r3, [pc, #108]	; (8012e04 <udp_input+0x224>)
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d9a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d9c:	e021      	b.n	8012de2 <udp_input+0x202>
        pbuf_free(p);
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7f9 fa10 	bl	800c1c4 <pbuf_free>
        goto end;
 8012da4:	e01c      	b.n	8012de0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012da6:	7cfb      	ldrb	r3, [r7, #19]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d112      	bne.n	8012dd2 <udp_input+0x1f2>
 8012dac:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <udp_input+0x218>)
 8012dae:	695b      	ldr	r3, [r3, #20]
 8012db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012db4:	2be0      	cmp	r3, #224	; 0xe0
 8012db6:	d00c      	beq.n	8012dd2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012db8:	4b0f      	ldr	r3, [pc, #60]	; (8012df8 <udp_input+0x218>)
 8012dba:	899b      	ldrh	r3, [r3, #12]
 8012dbc:	3308      	adds	r3, #8
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	b21b      	sxth	r3, r3
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7f9 f9ea 	bl	800c19e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012dca:	2103      	movs	r1, #3
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f001 fc29 	bl	8014624 <icmp_dest_unreach>
      pbuf_free(p);
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7f9 f9f6 	bl	800c1c4 <pbuf_free>
  return;
 8012dd8:	e003      	b.n	8012de2 <udp_input+0x202>
    pbuf_free(p);
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f7f9 f9f2 	bl	800c1c4 <pbuf_free>
  return;
 8012de0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012de2:	372c      	adds	r7, #44	; 0x2c
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd90      	pop	{r4, r7, pc}
 8012de8:	0801a6fc 	.word	0x0801a6fc
 8012dec:	0801a7a0 	.word	0x0801a7a0
 8012df0:	0801a750 	.word	0x0801a750
 8012df4:	0801a7b8 	.word	0x0801a7b8
 8012df8:	200090a4 	.word	0x200090a4
 8012dfc:	2000c854 	.word	0x2000c854
 8012e00:	0801a7d4 	.word	0x0801a7d4
 8012e04:	200090b4 	.word	0x200090b4

08012e08 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d109      	bne.n	8012e2c <udp_send+0x24>
 8012e18:	4b11      	ldr	r3, [pc, #68]	; (8012e60 <udp_send+0x58>)
 8012e1a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012e1e:	4911      	ldr	r1, [pc, #68]	; (8012e64 <udp_send+0x5c>)
 8012e20:	4811      	ldr	r0, [pc, #68]	; (8012e68 <udp_send+0x60>)
 8012e22:	f003 fa81 	bl	8016328 <iprintf>
 8012e26:	f06f 030f 	mvn.w	r3, #15
 8012e2a:	e015      	b.n	8012e58 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d109      	bne.n	8012e46 <udp_send+0x3e>
 8012e32:	4b0b      	ldr	r3, [pc, #44]	; (8012e60 <udp_send+0x58>)
 8012e34:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012e38:	490c      	ldr	r1, [pc, #48]	; (8012e6c <udp_send+0x64>)
 8012e3a:	480b      	ldr	r0, [pc, #44]	; (8012e68 <udp_send+0x60>)
 8012e3c:	f003 fa74 	bl	8016328 <iprintf>
 8012e40:	f06f 030f 	mvn.w	r3, #15
 8012e44:	e008      	b.n	8012e58 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	1d1a      	adds	r2, r3, #4
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	8a9b      	ldrh	r3, [r3, #20]
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 f80d 	bl	8012e70 <udp_sendto>
 8012e56:	4603      	mov	r3, r0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	0801a6fc 	.word	0x0801a6fc
 8012e64:	0801a7f0 	.word	0x0801a7f0
 8012e68:	0801a750 	.word	0x0801a750
 8012e6c:	0801a808 	.word	0x0801a808

08012e70 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b088      	sub	sp, #32
 8012e74:	af02      	add	r7, sp, #8
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d109      	bne.n	8012e98 <udp_sendto+0x28>
 8012e84:	4b23      	ldr	r3, [pc, #140]	; (8012f14 <udp_sendto+0xa4>)
 8012e86:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e8a:	4923      	ldr	r1, [pc, #140]	; (8012f18 <udp_sendto+0xa8>)
 8012e8c:	4823      	ldr	r0, [pc, #140]	; (8012f1c <udp_sendto+0xac>)
 8012e8e:	f003 fa4b 	bl	8016328 <iprintf>
 8012e92:	f06f 030f 	mvn.w	r3, #15
 8012e96:	e038      	b.n	8012f0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d109      	bne.n	8012eb2 <udp_sendto+0x42>
 8012e9e:	4b1d      	ldr	r3, [pc, #116]	; (8012f14 <udp_sendto+0xa4>)
 8012ea0:	f240 2219 	movw	r2, #537	; 0x219
 8012ea4:	491e      	ldr	r1, [pc, #120]	; (8012f20 <udp_sendto+0xb0>)
 8012ea6:	481d      	ldr	r0, [pc, #116]	; (8012f1c <udp_sendto+0xac>)
 8012ea8:	f003 fa3e 	bl	8016328 <iprintf>
 8012eac:	f06f 030f 	mvn.w	r3, #15
 8012eb0:	e02b      	b.n	8012f0a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d109      	bne.n	8012ecc <udp_sendto+0x5c>
 8012eb8:	4b16      	ldr	r3, [pc, #88]	; (8012f14 <udp_sendto+0xa4>)
 8012eba:	f240 221a 	movw	r2, #538	; 0x21a
 8012ebe:	4919      	ldr	r1, [pc, #100]	; (8012f24 <udp_sendto+0xb4>)
 8012ec0:	4816      	ldr	r0, [pc, #88]	; (8012f1c <udp_sendto+0xac>)
 8012ec2:	f003 fa31 	bl	8016328 <iprintf>
 8012ec6:	f06f 030f 	mvn.w	r3, #15
 8012eca:	e01e      	b.n	8012f0a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	7a1b      	ldrb	r3, [r3, #8]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d006      	beq.n	8012ee2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	7a1b      	ldrb	r3, [r3, #8]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7f8 fde5 	bl	800baa8 <netif_get_by_index>
 8012ede:	6178      	str	r0, [r7, #20]
 8012ee0:	e003      	b.n	8012eea <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f001 fc28 	bl	8014738 <ip4_route>
 8012ee8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d102      	bne.n	8012ef6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012ef0:	f06f 0303 	mvn.w	r3, #3
 8012ef4:	e009      	b.n	8012f0a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012ef6:	887a      	ldrh	r2, [r7, #2]
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	4613      	mov	r3, r2
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	68b9      	ldr	r1, [r7, #8]
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f000 f810 	bl	8012f28 <udp_sendto_if>
 8012f08:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3718      	adds	r7, #24
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	0801a6fc 	.word	0x0801a6fc
 8012f18:	0801a820 	.word	0x0801a820
 8012f1c:	0801a750 	.word	0x0801a750
 8012f20:	0801a838 	.word	0x0801a838
 8012f24:	0801a854 	.word	0x0801a854

08012f28 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b088      	sub	sp, #32
 8012f2c:	af02      	add	r7, sp, #8
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
 8012f34:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d109      	bne.n	8012f50 <udp_sendto_if+0x28>
 8012f3c:	4b2e      	ldr	r3, [pc, #184]	; (8012ff8 <udp_sendto_if+0xd0>)
 8012f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f42:	492e      	ldr	r1, [pc, #184]	; (8012ffc <udp_sendto_if+0xd4>)
 8012f44:	482e      	ldr	r0, [pc, #184]	; (8013000 <udp_sendto_if+0xd8>)
 8012f46:	f003 f9ef 	bl	8016328 <iprintf>
 8012f4a:	f06f 030f 	mvn.w	r3, #15
 8012f4e:	e04f      	b.n	8012ff0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d109      	bne.n	8012f6a <udp_sendto_if+0x42>
 8012f56:	4b28      	ldr	r3, [pc, #160]	; (8012ff8 <udp_sendto_if+0xd0>)
 8012f58:	f240 2281 	movw	r2, #641	; 0x281
 8012f5c:	4929      	ldr	r1, [pc, #164]	; (8013004 <udp_sendto_if+0xdc>)
 8012f5e:	4828      	ldr	r0, [pc, #160]	; (8013000 <udp_sendto_if+0xd8>)
 8012f60:	f003 f9e2 	bl	8016328 <iprintf>
 8012f64:	f06f 030f 	mvn.w	r3, #15
 8012f68:	e042      	b.n	8012ff0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d109      	bne.n	8012f84 <udp_sendto_if+0x5c>
 8012f70:	4b21      	ldr	r3, [pc, #132]	; (8012ff8 <udp_sendto_if+0xd0>)
 8012f72:	f240 2282 	movw	r2, #642	; 0x282
 8012f76:	4924      	ldr	r1, [pc, #144]	; (8013008 <udp_sendto_if+0xe0>)
 8012f78:	4821      	ldr	r0, [pc, #132]	; (8013000 <udp_sendto_if+0xd8>)
 8012f7a:	f003 f9d5 	bl	8016328 <iprintf>
 8012f7e:	f06f 030f 	mvn.w	r3, #15
 8012f82:	e035      	b.n	8012ff0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012f84:	6a3b      	ldr	r3, [r7, #32]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d109      	bne.n	8012f9e <udp_sendto_if+0x76>
 8012f8a:	4b1b      	ldr	r3, [pc, #108]	; (8012ff8 <udp_sendto_if+0xd0>)
 8012f8c:	f240 2283 	movw	r2, #643	; 0x283
 8012f90:	491e      	ldr	r1, [pc, #120]	; (801300c <udp_sendto_if+0xe4>)
 8012f92:	481b      	ldr	r0, [pc, #108]	; (8013000 <udp_sendto_if+0xd8>)
 8012f94:	f003 f9c8 	bl	8016328 <iprintf>
 8012f98:	f06f 030f 	mvn.w	r3, #15
 8012f9c:	e028      	b.n	8012ff0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d009      	beq.n	8012fb8 <udp_sendto_if+0x90>
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d005      	beq.n	8012fb8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fb4:	2be0      	cmp	r3, #224	; 0xe0
 8012fb6:	d103      	bne.n	8012fc0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012fb8:	6a3b      	ldr	r3, [r7, #32]
 8012fba:	3304      	adds	r3, #4
 8012fbc:	617b      	str	r3, [r7, #20]
 8012fbe:	e00b      	b.n	8012fd8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	6a3b      	ldr	r3, [r7, #32]
 8012fc6:	3304      	adds	r3, #4
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d002      	beq.n	8012fd4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012fce:	f06f 0303 	mvn.w	r3, #3
 8012fd2:	e00d      	b.n	8012ff0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012fd8:	887a      	ldrh	r2, [r7, #2]
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	9301      	str	r3, [sp, #4]
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	68b9      	ldr	r1, [r7, #8]
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f000 f811 	bl	8013010 <udp_sendto_if_src>
 8012fee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	0801a6fc 	.word	0x0801a6fc
 8012ffc:	0801a870 	.word	0x0801a870
 8013000:	0801a750 	.word	0x0801a750
 8013004:	0801a88c 	.word	0x0801a88c
 8013008:	0801a8a8 	.word	0x0801a8a8
 801300c:	0801a8c8 	.word	0x0801a8c8

08013010 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b08c      	sub	sp, #48	; 0x30
 8013014:	af04      	add	r7, sp, #16
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	60b9      	str	r1, [r7, #8]
 801301a:	607a      	str	r2, [r7, #4]
 801301c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d109      	bne.n	8013038 <udp_sendto_if_src+0x28>
 8013024:	4b65      	ldr	r3, [pc, #404]	; (80131bc <udp_sendto_if_src+0x1ac>)
 8013026:	f240 22d1 	movw	r2, #721	; 0x2d1
 801302a:	4965      	ldr	r1, [pc, #404]	; (80131c0 <udp_sendto_if_src+0x1b0>)
 801302c:	4865      	ldr	r0, [pc, #404]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 801302e:	f003 f97b 	bl	8016328 <iprintf>
 8013032:	f06f 030f 	mvn.w	r3, #15
 8013036:	e0bc      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d109      	bne.n	8013052 <udp_sendto_if_src+0x42>
 801303e:	4b5f      	ldr	r3, [pc, #380]	; (80131bc <udp_sendto_if_src+0x1ac>)
 8013040:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013044:	4960      	ldr	r1, [pc, #384]	; (80131c8 <udp_sendto_if_src+0x1b8>)
 8013046:	485f      	ldr	r0, [pc, #380]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 8013048:	f003 f96e 	bl	8016328 <iprintf>
 801304c:	f06f 030f 	mvn.w	r3, #15
 8013050:	e0af      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d109      	bne.n	801306c <udp_sendto_if_src+0x5c>
 8013058:	4b58      	ldr	r3, [pc, #352]	; (80131bc <udp_sendto_if_src+0x1ac>)
 801305a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801305e:	495b      	ldr	r1, [pc, #364]	; (80131cc <udp_sendto_if_src+0x1bc>)
 8013060:	4858      	ldr	r0, [pc, #352]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 8013062:	f003 f961 	bl	8016328 <iprintf>
 8013066:	f06f 030f 	mvn.w	r3, #15
 801306a:	e0a2      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	2b00      	cmp	r3, #0
 8013070:	d109      	bne.n	8013086 <udp_sendto_if_src+0x76>
 8013072:	4b52      	ldr	r3, [pc, #328]	; (80131bc <udp_sendto_if_src+0x1ac>)
 8013074:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013078:	4955      	ldr	r1, [pc, #340]	; (80131d0 <udp_sendto_if_src+0x1c0>)
 801307a:	4852      	ldr	r0, [pc, #328]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 801307c:	f003 f954 	bl	8016328 <iprintf>
 8013080:	f06f 030f 	mvn.w	r3, #15
 8013084:	e095      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013088:	2b00      	cmp	r3, #0
 801308a:	d109      	bne.n	80130a0 <udp_sendto_if_src+0x90>
 801308c:	4b4b      	ldr	r3, [pc, #300]	; (80131bc <udp_sendto_if_src+0x1ac>)
 801308e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013092:	4950      	ldr	r1, [pc, #320]	; (80131d4 <udp_sendto_if_src+0x1c4>)
 8013094:	484b      	ldr	r0, [pc, #300]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 8013096:	f003 f947 	bl	8016328 <iprintf>
 801309a:	f06f 030f 	mvn.w	r3, #15
 801309e:	e088      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	8a5b      	ldrh	r3, [r3, #18]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10f      	bne.n	80130c8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80130a8:	68f9      	ldr	r1, [r7, #12]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	8a5b      	ldrh	r3, [r3, #18]
 80130ae:	461a      	mov	r2, r3
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f000 f893 	bl	80131dc <udp_bind>
 80130b6:	4603      	mov	r3, r0
 80130b8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80130ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d002      	beq.n	80130c8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80130c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80130c6:	e074      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	891b      	ldrh	r3, [r3, #8]
 80130cc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d902      	bls.n	80130da <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80130d4:	f04f 33ff 	mov.w	r3, #4294967295
 80130d8:	e06b      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80130da:	2108      	movs	r1, #8
 80130dc:	68b8      	ldr	r0, [r7, #8]
 80130de:	f7f8 ffdb 	bl	800c098 <pbuf_add_header>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d015      	beq.n	8013114 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80130e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130ec:	2108      	movs	r1, #8
 80130ee:	2022      	movs	r0, #34	; 0x22
 80130f0:	f7f8 fd84 	bl	800bbfc <pbuf_alloc>
 80130f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80130fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013100:	e057      	b.n	80131b2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	891b      	ldrh	r3, [r3, #8]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801310a:	68b9      	ldr	r1, [r7, #8]
 801310c:	69f8      	ldr	r0, [r7, #28]
 801310e:	f7f9 f97d 	bl	800c40c <pbuf_chain>
 8013112:	e001      	b.n	8013118 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	895b      	ldrh	r3, [r3, #10]
 801311c:	2b07      	cmp	r3, #7
 801311e:	d806      	bhi.n	801312e <udp_sendto_if_src+0x11e>
 8013120:	4b26      	ldr	r3, [pc, #152]	; (80131bc <udp_sendto_if_src+0x1ac>)
 8013122:	f240 320d 	movw	r2, #781	; 0x30d
 8013126:	492c      	ldr	r1, [pc, #176]	; (80131d8 <udp_sendto_if_src+0x1c8>)
 8013128:	4826      	ldr	r0, [pc, #152]	; (80131c4 <udp_sendto_if_src+0x1b4>)
 801312a:	f003 f8fd 	bl	8016328 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	8a5b      	ldrh	r3, [r3, #18]
 8013138:	4618      	mov	r0, r3
 801313a:	f7f7 fc51 	bl	800a9e0 <lwip_htons>
 801313e:	4603      	mov	r3, r0
 8013140:	461a      	mov	r2, r3
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013146:	887b      	ldrh	r3, [r7, #2]
 8013148:	4618      	mov	r0, r3
 801314a:	f7f7 fc49 	bl	800a9e0 <lwip_htons>
 801314e:	4603      	mov	r3, r0
 8013150:	461a      	mov	r2, r3
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2200      	movs	r2, #0
 801315a:	719a      	strb	r2, [r3, #6]
 801315c:	2200      	movs	r2, #0
 801315e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	891b      	ldrh	r3, [r3, #8]
 8013164:	4618      	mov	r0, r3
 8013166:	f7f7 fc3b 	bl	800a9e0 <lwip_htons>
 801316a:	4603      	mov	r3, r0
 801316c:	461a      	mov	r2, r3
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013172:	2311      	movs	r3, #17
 8013174:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	7adb      	ldrb	r3, [r3, #11]
 801317a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	7a9b      	ldrb	r3, [r3, #10]
 8013180:	7cb9      	ldrb	r1, [r7, #18]
 8013182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013184:	9202      	str	r2, [sp, #8]
 8013186:	7cfa      	ldrb	r2, [r7, #19]
 8013188:	9201      	str	r2, [sp, #4]
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	460b      	mov	r3, r1
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013192:	69f8      	ldr	r0, [r7, #28]
 8013194:	f001 fcb8 	bl	8014b08 <ip4_output_if_src>
 8013198:	4603      	mov	r3, r0
 801319a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801319c:	69fa      	ldr	r2, [r7, #28]
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d004      	beq.n	80131ae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80131a4:	69f8      	ldr	r0, [r7, #28]
 80131a6:	f7f9 f80d 	bl	800c1c4 <pbuf_free>
    q = NULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80131ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3720      	adds	r7, #32
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	0801a6fc 	.word	0x0801a6fc
 80131c0:	0801a8e8 	.word	0x0801a8e8
 80131c4:	0801a750 	.word	0x0801a750
 80131c8:	0801a908 	.word	0x0801a908
 80131cc:	0801a928 	.word	0x0801a928
 80131d0:	0801a94c 	.word	0x0801a94c
 80131d4:	0801a970 	.word	0x0801a970
 80131d8:	0801a994 	.word	0x0801a994

080131dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	4613      	mov	r3, r2
 80131e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d101      	bne.n	80131f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80131f0:	4b39      	ldr	r3, [pc, #228]	; (80132d8 <udp_bind+0xfc>)
 80131f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d109      	bne.n	801320e <udp_bind+0x32>
 80131fa:	4b38      	ldr	r3, [pc, #224]	; (80132dc <udp_bind+0x100>)
 80131fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013200:	4937      	ldr	r1, [pc, #220]	; (80132e0 <udp_bind+0x104>)
 8013202:	4838      	ldr	r0, [pc, #224]	; (80132e4 <udp_bind+0x108>)
 8013204:	f003 f890 	bl	8016328 <iprintf>
 8013208:	f06f 030f 	mvn.w	r3, #15
 801320c:	e060      	b.n	80132d0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013212:	4b35      	ldr	r3, [pc, #212]	; (80132e8 <udp_bind+0x10c>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	e009      	b.n	801322e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	429a      	cmp	r2, r3
 8013220:	d102      	bne.n	8013228 <udp_bind+0x4c>
      rebind = 1;
 8013222:	2301      	movs	r3, #1
 8013224:	74fb      	strb	r3, [r7, #19]
      break;
 8013226:	e005      	b.n	8013234 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	617b      	str	r3, [r7, #20]
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1f2      	bne.n	801321a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013234:	88fb      	ldrh	r3, [r7, #6]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <udp_bind+0x72>
    port = udp_new_port();
 801323a:	f7ff fc35 	bl	8012aa8 <udp_new_port>
 801323e:	4603      	mov	r3, r0
 8013240:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013242:	88fb      	ldrh	r3, [r7, #6]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d12c      	bne.n	80132a2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013248:	f06f 0307 	mvn.w	r3, #7
 801324c:	e040      	b.n	80132d0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801324e:	4b26      	ldr	r3, [pc, #152]	; (80132e8 <udp_bind+0x10c>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	617b      	str	r3, [r7, #20]
 8013254:	e022      	b.n	801329c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	429a      	cmp	r2, r3
 801325c:	d01b      	beq.n	8013296 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	8a5b      	ldrh	r3, [r3, #18]
 8013262:	88fa      	ldrh	r2, [r7, #6]
 8013264:	429a      	cmp	r2, r3
 8013266:	d116      	bne.n	8013296 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013270:	429a      	cmp	r2, r3
 8013272:	d00d      	beq.n	8013290 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00a      	beq.n	8013290 <udp_bind+0xb4>
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d006      	beq.n	8013290 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013282:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013290:	f06f 0307 	mvn.w	r3, #7
 8013294:	e01c      	b.n	80132d0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	617b      	str	r3, [r7, #20]
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d1d9      	bne.n	8013256 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <udp_bind+0xd2>
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	e000      	b.n	80132b0 <udp_bind+0xd4>
 80132ae:	2300      	movs	r3, #0
 80132b0:	68fa      	ldr	r2, [r7, #12]
 80132b2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	88fa      	ldrh	r2, [r7, #6]
 80132b8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80132ba:	7cfb      	ldrb	r3, [r7, #19]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80132c0:	4b09      	ldr	r3, [pc, #36]	; (80132e8 <udp_bind+0x10c>)
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80132c8:	4a07      	ldr	r2, [pc, #28]	; (80132e8 <udp_bind+0x10c>)
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3718      	adds	r7, #24
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	0801b310 	.word	0x0801b310
 80132dc:	0801a6fc 	.word	0x0801a6fc
 80132e0:	0801a9c4 	.word	0x0801a9c4
 80132e4:	0801a750 	.word	0x0801a750
 80132e8:	2000c854 	.word	0x2000c854

080132ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	4613      	mov	r3, r2
 80132f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d109      	bne.n	8013314 <udp_connect+0x28>
 8013300:	4b2c      	ldr	r3, [pc, #176]	; (80133b4 <udp_connect+0xc8>)
 8013302:	f240 4235 	movw	r2, #1077	; 0x435
 8013306:	492c      	ldr	r1, [pc, #176]	; (80133b8 <udp_connect+0xcc>)
 8013308:	482c      	ldr	r0, [pc, #176]	; (80133bc <udp_connect+0xd0>)
 801330a:	f003 f80d 	bl	8016328 <iprintf>
 801330e:	f06f 030f 	mvn.w	r3, #15
 8013312:	e04b      	b.n	80133ac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d109      	bne.n	801332e <udp_connect+0x42>
 801331a:	4b26      	ldr	r3, [pc, #152]	; (80133b4 <udp_connect+0xc8>)
 801331c:	f240 4236 	movw	r2, #1078	; 0x436
 8013320:	4927      	ldr	r1, [pc, #156]	; (80133c0 <udp_connect+0xd4>)
 8013322:	4826      	ldr	r0, [pc, #152]	; (80133bc <udp_connect+0xd0>)
 8013324:	f003 f800 	bl	8016328 <iprintf>
 8013328:	f06f 030f 	mvn.w	r3, #15
 801332c:	e03e      	b.n	80133ac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	8a5b      	ldrh	r3, [r3, #18]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10f      	bne.n	8013356 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013336:	68f9      	ldr	r1, [r7, #12]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	8a5b      	ldrh	r3, [r3, #18]
 801333c:	461a      	mov	r2, r3
 801333e:	68f8      	ldr	r0, [r7, #12]
 8013340:	f7ff ff4c 	bl	80131dc <udp_bind>
 8013344:	4603      	mov	r3, r0
 8013346:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013348:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d002      	beq.n	8013356 <udp_connect+0x6a>
      return err;
 8013350:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013354:	e02a      	b.n	80133ac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <udp_connect+0x76>
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	e000      	b.n	8013364 <udp_connect+0x78>
 8013362:	2300      	movs	r3, #0
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	88fa      	ldrh	r2, [r7, #6]
 801336c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	7c1b      	ldrb	r3, [r3, #16]
 8013372:	f043 0304 	orr.w	r3, r3, #4
 8013376:	b2da      	uxtb	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801337c:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <udp_connect+0xd8>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	e008      	b.n	8013396 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	429a      	cmp	r2, r3
 801338a:	d101      	bne.n	8013390 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801338c:	2300      	movs	r3, #0
 801338e:	e00d      	b.n	80133ac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	617b      	str	r3, [r7, #20]
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d1f3      	bne.n	8013384 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801339c:	4b09      	ldr	r3, [pc, #36]	; (80133c4 <udp_connect+0xd8>)
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80133a4:	4a07      	ldr	r2, [pc, #28]	; (80133c4 <udp_connect+0xd8>)
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80133aa:	2300      	movs	r3, #0
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3718      	adds	r7, #24
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	0801a6fc 	.word	0x0801a6fc
 80133b8:	0801a9dc 	.word	0x0801a9dc
 80133bc:	0801a750 	.word	0x0801a750
 80133c0:	0801a9f8 	.word	0x0801a9f8
 80133c4:	2000c854 	.word	0x2000c854

080133c8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d107      	bne.n	80133e6 <udp_disconnect+0x1e>
 80133d6:	4b0d      	ldr	r3, [pc, #52]	; (801340c <udp_disconnect+0x44>)
 80133d8:	f240 426a 	movw	r2, #1130	; 0x46a
 80133dc:	490c      	ldr	r1, [pc, #48]	; (8013410 <udp_disconnect+0x48>)
 80133de:	480d      	ldr	r0, [pc, #52]	; (8013414 <udp_disconnect+0x4c>)
 80133e0:	f002 ffa2 	bl	8016328 <iprintf>
 80133e4:	e00f      	b.n	8013406 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7c1b      	ldrb	r3, [r3, #16]
 80133fc:	f023 0304 	bic.w	r3, r3, #4
 8013400:	b2da      	uxtb	r2, r3
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	741a      	strb	r2, [r3, #16]
}
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	0801a6fc 	.word	0x0801a6fc
 8013410:	0801aa14 	.word	0x0801aa14
 8013414:	0801a750 	.word	0x0801a750

08013418 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d107      	bne.n	801343a <udp_recv+0x22>
 801342a:	4b08      	ldr	r3, [pc, #32]	; (801344c <udp_recv+0x34>)
 801342c:	f240 428a 	movw	r2, #1162	; 0x48a
 8013430:	4907      	ldr	r1, [pc, #28]	; (8013450 <udp_recv+0x38>)
 8013432:	4808      	ldr	r0, [pc, #32]	; (8013454 <udp_recv+0x3c>)
 8013434:	f002 ff78 	bl	8016328 <iprintf>
 8013438:	e005      	b.n	8013446 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	68ba      	ldr	r2, [r7, #8]
 801343e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	61da      	str	r2, [r3, #28]
}
 8013446:	3710      	adds	r7, #16
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	0801a6fc 	.word	0x0801a6fc
 8013450:	0801aa30 	.word	0x0801aa30
 8013454:	0801a750 	.word	0x0801a750

08013458 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d107      	bne.n	8013476 <udp_remove+0x1e>
 8013466:	4b19      	ldr	r3, [pc, #100]	; (80134cc <udp_remove+0x74>)
 8013468:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801346c:	4918      	ldr	r1, [pc, #96]	; (80134d0 <udp_remove+0x78>)
 801346e:	4819      	ldr	r0, [pc, #100]	; (80134d4 <udp_remove+0x7c>)
 8013470:	f002 ff5a 	bl	8016328 <iprintf>
 8013474:	e026      	b.n	80134c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013476:	4b18      	ldr	r3, [pc, #96]	; (80134d8 <udp_remove+0x80>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	429a      	cmp	r2, r3
 801347e:	d105      	bne.n	801348c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013480:	4b15      	ldr	r3, [pc, #84]	; (80134d8 <udp_remove+0x80>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	4a14      	ldr	r2, [pc, #80]	; (80134d8 <udp_remove+0x80>)
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	e017      	b.n	80134bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801348c:	4b12      	ldr	r3, [pc, #72]	; (80134d8 <udp_remove+0x80>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	60fb      	str	r3, [r7, #12]
 8013492:	e010      	b.n	80134b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d009      	beq.n	80134b0 <udp_remove+0x58>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d104      	bne.n	80134b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	68da      	ldr	r2, [r3, #12]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	60da      	str	r2, [r3, #12]
        break;
 80134ae:	e005      	b.n	80134bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	60fb      	str	r3, [r7, #12]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d1eb      	bne.n	8013494 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	2000      	movs	r0, #0
 80134c0:	f7f7 ffdc 	bl	800b47c <memp_free>
}
 80134c4:	3710      	adds	r7, #16
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	0801a6fc 	.word	0x0801a6fc
 80134d0:	0801aa48 	.word	0x0801aa48
 80134d4:	0801a750 	.word	0x0801a750
 80134d8:	2000c854 	.word	0x2000c854

080134dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80134e2:	2000      	movs	r0, #0
 80134e4:	f7f7 ff54 	bl	800b390 <memp_malloc>
 80134e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d007      	beq.n	8013500 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80134f0:	2220      	movs	r2, #32
 80134f2:	2100      	movs	r1, #0
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f003 f8a7 	bl	8016648 <memset>
    pcb->ttl = UDP_TTL;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	22ff      	movs	r2, #255	; 0xff
 80134fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013500:	687b      	ldr	r3, [r7, #4]
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b084      	sub	sp, #16
 801350e:	af00      	add	r7, sp, #0
 8013510:	4603      	mov	r3, r0
 8013512:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013514:	f7ff ffe2 	bl	80134dc <udp_new>
 8013518:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801351a:	68fb      	ldr	r3, [r7, #12]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013524:	b480      	push	{r7}
 8013526:	b085      	sub	sp, #20
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d01e      	beq.n	8013572 <udp_netif_ip_addr_changed+0x4e>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d01a      	beq.n	8013572 <udp_netif_ip_addr_changed+0x4e>
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d017      	beq.n	8013572 <udp_netif_ip_addr_changed+0x4e>
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d013      	beq.n	8013572 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801354a:	4b0d      	ldr	r3, [pc, #52]	; (8013580 <udp_netif_ip_addr_changed+0x5c>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	60fb      	str	r3, [r7, #12]
 8013550:	e00c      	b.n	801356c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	429a      	cmp	r2, r3
 801355c:	d103      	bne.n	8013566 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	68db      	ldr	r3, [r3, #12]
 801356a:	60fb      	str	r3, [r7, #12]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1ef      	bne.n	8013552 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013572:	bf00      	nop
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	2000c854 	.word	0x2000c854

08013584 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801358c:	4915      	ldr	r1, [pc, #84]	; (80135e4 <etharp_free_entry+0x60>)
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	4613      	mov	r3, r2
 8013592:	005b      	lsls	r3, r3, #1
 8013594:	4413      	add	r3, r2
 8013596:	00db      	lsls	r3, r3, #3
 8013598:	440b      	add	r3, r1
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d013      	beq.n	80135c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80135a0:	4910      	ldr	r1, [pc, #64]	; (80135e4 <etharp_free_entry+0x60>)
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	4613      	mov	r3, r2
 80135a6:	005b      	lsls	r3, r3, #1
 80135a8:	4413      	add	r3, r2
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	440b      	add	r3, r1
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7f8 fe07 	bl	800c1c4 <pbuf_free>
    arp_table[i].q = NULL;
 80135b6:	490b      	ldr	r1, [pc, #44]	; (80135e4 <etharp_free_entry+0x60>)
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	4613      	mov	r3, r2
 80135bc:	005b      	lsls	r3, r3, #1
 80135be:	4413      	add	r3, r2
 80135c0:	00db      	lsls	r3, r3, #3
 80135c2:	440b      	add	r3, r1
 80135c4:	2200      	movs	r2, #0
 80135c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80135c8:	4906      	ldr	r1, [pc, #24]	; (80135e4 <etharp_free_entry+0x60>)
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	4613      	mov	r3, r2
 80135ce:	005b      	lsls	r3, r3, #1
 80135d0:	4413      	add	r3, r2
 80135d2:	00db      	lsls	r3, r3, #3
 80135d4:	440b      	add	r3, r1
 80135d6:	3314      	adds	r3, #20
 80135d8:	2200      	movs	r2, #0
 80135da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80135dc:	bf00      	nop
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	2000c858 	.word	0x2000c858

080135e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80135ee:	2300      	movs	r3, #0
 80135f0:	607b      	str	r3, [r7, #4]
 80135f2:	e096      	b.n	8013722 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80135f4:	494f      	ldr	r1, [pc, #316]	; (8013734 <etharp_tmr+0x14c>)
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	4613      	mov	r3, r2
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	4413      	add	r3, r2
 80135fe:	00db      	lsls	r3, r3, #3
 8013600:	440b      	add	r3, r1
 8013602:	3314      	adds	r3, #20
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013608:	78fb      	ldrb	r3, [r7, #3]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f000 8086 	beq.w	801371c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013610:	4948      	ldr	r1, [pc, #288]	; (8013734 <etharp_tmr+0x14c>)
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	4613      	mov	r3, r2
 8013616:	005b      	lsls	r3, r3, #1
 8013618:	4413      	add	r3, r2
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	440b      	add	r3, r1
 801361e:	3312      	adds	r3, #18
 8013620:	881b      	ldrh	r3, [r3, #0]
 8013622:	3301      	adds	r3, #1
 8013624:	b298      	uxth	r0, r3
 8013626:	4943      	ldr	r1, [pc, #268]	; (8013734 <etharp_tmr+0x14c>)
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	4613      	mov	r3, r2
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	4413      	add	r3, r2
 8013630:	00db      	lsls	r3, r3, #3
 8013632:	440b      	add	r3, r1
 8013634:	3312      	adds	r3, #18
 8013636:	4602      	mov	r2, r0
 8013638:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801363a:	493e      	ldr	r1, [pc, #248]	; (8013734 <etharp_tmr+0x14c>)
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	4613      	mov	r3, r2
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	4413      	add	r3, r2
 8013644:	00db      	lsls	r3, r3, #3
 8013646:	440b      	add	r3, r1
 8013648:	3312      	adds	r3, #18
 801364a:	881b      	ldrh	r3, [r3, #0]
 801364c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013650:	d215      	bcs.n	801367e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013652:	4938      	ldr	r1, [pc, #224]	; (8013734 <etharp_tmr+0x14c>)
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	4613      	mov	r3, r2
 8013658:	005b      	lsls	r3, r3, #1
 801365a:	4413      	add	r3, r2
 801365c:	00db      	lsls	r3, r3, #3
 801365e:	440b      	add	r3, r1
 8013660:	3314      	adds	r3, #20
 8013662:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013664:	2b01      	cmp	r3, #1
 8013666:	d10e      	bne.n	8013686 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013668:	4932      	ldr	r1, [pc, #200]	; (8013734 <etharp_tmr+0x14c>)
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	4613      	mov	r3, r2
 801366e:	005b      	lsls	r3, r3, #1
 8013670:	4413      	add	r3, r2
 8013672:	00db      	lsls	r3, r3, #3
 8013674:	440b      	add	r3, r1
 8013676:	3312      	adds	r3, #18
 8013678:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801367a:	2b04      	cmp	r3, #4
 801367c:	d903      	bls.n	8013686 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ff ff80 	bl	8013584 <etharp_free_entry>
 8013684:	e04a      	b.n	801371c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013686:	492b      	ldr	r1, [pc, #172]	; (8013734 <etharp_tmr+0x14c>)
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	4613      	mov	r3, r2
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	4413      	add	r3, r2
 8013690:	00db      	lsls	r3, r3, #3
 8013692:	440b      	add	r3, r1
 8013694:	3314      	adds	r3, #20
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	2b03      	cmp	r3, #3
 801369a:	d10a      	bne.n	80136b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801369c:	4925      	ldr	r1, [pc, #148]	; (8013734 <etharp_tmr+0x14c>)
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	4613      	mov	r3, r2
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	4413      	add	r3, r2
 80136a6:	00db      	lsls	r3, r3, #3
 80136a8:	440b      	add	r3, r1
 80136aa:	3314      	adds	r3, #20
 80136ac:	2204      	movs	r2, #4
 80136ae:	701a      	strb	r2, [r3, #0]
 80136b0:	e034      	b.n	801371c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80136b2:	4920      	ldr	r1, [pc, #128]	; (8013734 <etharp_tmr+0x14c>)
 80136b4:	687a      	ldr	r2, [r7, #4]
 80136b6:	4613      	mov	r3, r2
 80136b8:	005b      	lsls	r3, r3, #1
 80136ba:	4413      	add	r3, r2
 80136bc:	00db      	lsls	r3, r3, #3
 80136be:	440b      	add	r3, r1
 80136c0:	3314      	adds	r3, #20
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	2b04      	cmp	r3, #4
 80136c6:	d10a      	bne.n	80136de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80136c8:	491a      	ldr	r1, [pc, #104]	; (8013734 <etharp_tmr+0x14c>)
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	4613      	mov	r3, r2
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	4413      	add	r3, r2
 80136d2:	00db      	lsls	r3, r3, #3
 80136d4:	440b      	add	r3, r1
 80136d6:	3314      	adds	r3, #20
 80136d8:	2202      	movs	r2, #2
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	e01e      	b.n	801371c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80136de:	4915      	ldr	r1, [pc, #84]	; (8013734 <etharp_tmr+0x14c>)
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	4613      	mov	r3, r2
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	4413      	add	r3, r2
 80136e8:	00db      	lsls	r3, r3, #3
 80136ea:	440b      	add	r3, r1
 80136ec:	3314      	adds	r3, #20
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d113      	bne.n	801371c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80136f4:	490f      	ldr	r1, [pc, #60]	; (8013734 <etharp_tmr+0x14c>)
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	4613      	mov	r3, r2
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	4413      	add	r3, r2
 80136fe:	00db      	lsls	r3, r3, #3
 8013700:	440b      	add	r3, r1
 8013702:	3308      	adds	r3, #8
 8013704:	6818      	ldr	r0, [r3, #0]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	4613      	mov	r3, r2
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	4413      	add	r3, r2
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	4a08      	ldr	r2, [pc, #32]	; (8013734 <etharp_tmr+0x14c>)
 8013712:	4413      	add	r3, r2
 8013714:	3304      	adds	r3, #4
 8013716:	4619      	mov	r1, r3
 8013718:	f000 fe6e 	bl	80143f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	3301      	adds	r3, #1
 8013720:	607b      	str	r3, [r7, #4]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2b09      	cmp	r3, #9
 8013726:	f77f af65 	ble.w	80135f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801372a:	bf00      	nop
 801372c:	bf00      	nop
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	2000c858 	.word	0x2000c858

08013738 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b08a      	sub	sp, #40	; 0x28
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	460b      	mov	r3, r1
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013746:	230a      	movs	r3, #10
 8013748:	84fb      	strh	r3, [r7, #38]	; 0x26
 801374a:	230a      	movs	r3, #10
 801374c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801374e:	230a      	movs	r3, #10
 8013750:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013752:	2300      	movs	r3, #0
 8013754:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013756:	230a      	movs	r3, #10
 8013758:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801375a:	2300      	movs	r3, #0
 801375c:	83bb      	strh	r3, [r7, #28]
 801375e:	2300      	movs	r3, #0
 8013760:	837b      	strh	r3, [r7, #26]
 8013762:	2300      	movs	r3, #0
 8013764:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013766:	2300      	movs	r3, #0
 8013768:	843b      	strh	r3, [r7, #32]
 801376a:	e0ae      	b.n	80138ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801376c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013770:	49a6      	ldr	r1, [pc, #664]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013772:	4613      	mov	r3, r2
 8013774:	005b      	lsls	r3, r3, #1
 8013776:	4413      	add	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	440b      	add	r3, r1
 801377c:	3314      	adds	r3, #20
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013782:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013786:	2b0a      	cmp	r3, #10
 8013788:	d105      	bne.n	8013796 <etharp_find_entry+0x5e>
 801378a:	7dfb      	ldrb	r3, [r7, #23]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d102      	bne.n	8013796 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013790:	8c3b      	ldrh	r3, [r7, #32]
 8013792:	847b      	strh	r3, [r7, #34]	; 0x22
 8013794:	e095      	b.n	80138c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013796:	7dfb      	ldrb	r3, [r7, #23]
 8013798:	2b00      	cmp	r3, #0
 801379a:	f000 8092 	beq.w	80138c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801379e:	7dfb      	ldrb	r3, [r7, #23]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d009      	beq.n	80137b8 <etharp_find_entry+0x80>
 80137a4:	7dfb      	ldrb	r3, [r7, #23]
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d806      	bhi.n	80137b8 <etharp_find_entry+0x80>
 80137aa:	4b99      	ldr	r3, [pc, #612]	; (8013a10 <etharp_find_entry+0x2d8>)
 80137ac:	f240 1223 	movw	r2, #291	; 0x123
 80137b0:	4998      	ldr	r1, [pc, #608]	; (8013a14 <etharp_find_entry+0x2dc>)
 80137b2:	4899      	ldr	r0, [pc, #612]	; (8013a18 <etharp_find_entry+0x2e0>)
 80137b4:	f002 fdb8 	bl	8016328 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d020      	beq.n	8013800 <etharp_find_entry+0xc8>
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6819      	ldr	r1, [r3, #0]
 80137c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137c6:	4891      	ldr	r0, [pc, #580]	; (8013a0c <etharp_find_entry+0x2d4>)
 80137c8:	4613      	mov	r3, r2
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	4413      	add	r3, r2
 80137ce:	00db      	lsls	r3, r3, #3
 80137d0:	4403      	add	r3, r0
 80137d2:	3304      	adds	r3, #4
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	4299      	cmp	r1, r3
 80137d8:	d112      	bne.n	8013800 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00c      	beq.n	80137fa <etharp_find_entry+0xc2>
 80137e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137e4:	4989      	ldr	r1, [pc, #548]	; (8013a0c <etharp_find_entry+0x2d4>)
 80137e6:	4613      	mov	r3, r2
 80137e8:	005b      	lsls	r3, r3, #1
 80137ea:	4413      	add	r3, r2
 80137ec:	00db      	lsls	r3, r3, #3
 80137ee:	440b      	add	r3, r1
 80137f0:	3308      	adds	r3, #8
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d102      	bne.n	8013800 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80137fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137fe:	e100      	b.n	8013a02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013800:	7dfb      	ldrb	r3, [r7, #23]
 8013802:	2b01      	cmp	r3, #1
 8013804:	d140      	bne.n	8013888 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013806:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801380a:	4980      	ldr	r1, [pc, #512]	; (8013a0c <etharp_find_entry+0x2d4>)
 801380c:	4613      	mov	r3, r2
 801380e:	005b      	lsls	r3, r3, #1
 8013810:	4413      	add	r3, r2
 8013812:	00db      	lsls	r3, r3, #3
 8013814:	440b      	add	r3, r1
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d01a      	beq.n	8013852 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801381c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013820:	497a      	ldr	r1, [pc, #488]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013822:	4613      	mov	r3, r2
 8013824:	005b      	lsls	r3, r3, #1
 8013826:	4413      	add	r3, r2
 8013828:	00db      	lsls	r3, r3, #3
 801382a:	440b      	add	r3, r1
 801382c:	3312      	adds	r3, #18
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	8bba      	ldrh	r2, [r7, #28]
 8013832:	429a      	cmp	r2, r3
 8013834:	d845      	bhi.n	80138c2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013836:	8c3b      	ldrh	r3, [r7, #32]
 8013838:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801383a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801383e:	4973      	ldr	r1, [pc, #460]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013840:	4613      	mov	r3, r2
 8013842:	005b      	lsls	r3, r3, #1
 8013844:	4413      	add	r3, r2
 8013846:	00db      	lsls	r3, r3, #3
 8013848:	440b      	add	r3, r1
 801384a:	3312      	adds	r3, #18
 801384c:	881b      	ldrh	r3, [r3, #0]
 801384e:	83bb      	strh	r3, [r7, #28]
 8013850:	e037      	b.n	80138c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013852:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013856:	496d      	ldr	r1, [pc, #436]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013858:	4613      	mov	r3, r2
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	4413      	add	r3, r2
 801385e:	00db      	lsls	r3, r3, #3
 8013860:	440b      	add	r3, r1
 8013862:	3312      	adds	r3, #18
 8013864:	881b      	ldrh	r3, [r3, #0]
 8013866:	8b7a      	ldrh	r2, [r7, #26]
 8013868:	429a      	cmp	r2, r3
 801386a:	d82a      	bhi.n	80138c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801386c:	8c3b      	ldrh	r3, [r7, #32]
 801386e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013870:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013874:	4965      	ldr	r1, [pc, #404]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013876:	4613      	mov	r3, r2
 8013878:	005b      	lsls	r3, r3, #1
 801387a:	4413      	add	r3, r2
 801387c:	00db      	lsls	r3, r3, #3
 801387e:	440b      	add	r3, r1
 8013880:	3312      	adds	r3, #18
 8013882:	881b      	ldrh	r3, [r3, #0]
 8013884:	837b      	strh	r3, [r7, #26]
 8013886:	e01c      	b.n	80138c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013888:	7dfb      	ldrb	r3, [r7, #23]
 801388a:	2b01      	cmp	r3, #1
 801388c:	d919      	bls.n	80138c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801388e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013892:	495e      	ldr	r1, [pc, #376]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013894:	4613      	mov	r3, r2
 8013896:	005b      	lsls	r3, r3, #1
 8013898:	4413      	add	r3, r2
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	440b      	add	r3, r1
 801389e:	3312      	adds	r3, #18
 80138a0:	881b      	ldrh	r3, [r3, #0]
 80138a2:	8b3a      	ldrh	r2, [r7, #24]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d80c      	bhi.n	80138c2 <etharp_find_entry+0x18a>
            old_stable = i;
 80138a8:	8c3b      	ldrh	r3, [r7, #32]
 80138aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80138ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138b0:	4956      	ldr	r1, [pc, #344]	; (8013a0c <etharp_find_entry+0x2d4>)
 80138b2:	4613      	mov	r3, r2
 80138b4:	005b      	lsls	r3, r3, #1
 80138b6:	4413      	add	r3, r2
 80138b8:	00db      	lsls	r3, r3, #3
 80138ba:	440b      	add	r3, r1
 80138bc:	3312      	adds	r3, #18
 80138be:	881b      	ldrh	r3, [r3, #0]
 80138c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138c2:	8c3b      	ldrh	r3, [r7, #32]
 80138c4:	3301      	adds	r3, #1
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	843b      	strh	r3, [r7, #32]
 80138ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80138ce:	2b09      	cmp	r3, #9
 80138d0:	f77f af4c 	ble.w	801376c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80138d4:	7afb      	ldrb	r3, [r7, #11]
 80138d6:	f003 0302 	and.w	r3, r3, #2
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d108      	bne.n	80138f0 <etharp_find_entry+0x1b8>
 80138de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80138e2:	2b0a      	cmp	r3, #10
 80138e4:	d107      	bne.n	80138f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80138e6:	7afb      	ldrb	r3, [r7, #11]
 80138e8:	f003 0301 	and.w	r3, r3, #1
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d102      	bne.n	80138f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80138f0:	f04f 33ff 	mov.w	r3, #4294967295
 80138f4:	e085      	b.n	8013a02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80138f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80138fa:	2b09      	cmp	r3, #9
 80138fc:	dc02      	bgt.n	8013904 <etharp_find_entry+0x1cc>
    i = empty;
 80138fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013900:	843b      	strh	r3, [r7, #32]
 8013902:	e039      	b.n	8013978 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013904:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013908:	2b09      	cmp	r3, #9
 801390a:	dc14      	bgt.n	8013936 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801390c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801390e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013914:	493d      	ldr	r1, [pc, #244]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013916:	4613      	mov	r3, r2
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	4413      	add	r3, r2
 801391c:	00db      	lsls	r3, r3, #3
 801391e:	440b      	add	r3, r1
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d018      	beq.n	8013958 <etharp_find_entry+0x220>
 8013926:	4b3a      	ldr	r3, [pc, #232]	; (8013a10 <etharp_find_entry+0x2d8>)
 8013928:	f240 126d 	movw	r2, #365	; 0x16d
 801392c:	493b      	ldr	r1, [pc, #236]	; (8013a1c <etharp_find_entry+0x2e4>)
 801392e:	483a      	ldr	r0, [pc, #232]	; (8013a18 <etharp_find_entry+0x2e0>)
 8013930:	f002 fcfa 	bl	8016328 <iprintf>
 8013934:	e010      	b.n	8013958 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013936:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801393a:	2b09      	cmp	r3, #9
 801393c:	dc02      	bgt.n	8013944 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801393e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013940:	843b      	strh	r3, [r7, #32]
 8013942:	e009      	b.n	8013958 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013944:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013948:	2b09      	cmp	r3, #9
 801394a:	dc02      	bgt.n	8013952 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801394c:	8bfb      	ldrh	r3, [r7, #30]
 801394e:	843b      	strh	r3, [r7, #32]
 8013950:	e002      	b.n	8013958 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013952:	f04f 33ff 	mov.w	r3, #4294967295
 8013956:	e054      	b.n	8013a02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013958:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801395c:	2b09      	cmp	r3, #9
 801395e:	dd06      	ble.n	801396e <etharp_find_entry+0x236>
 8013960:	4b2b      	ldr	r3, [pc, #172]	; (8013a10 <etharp_find_entry+0x2d8>)
 8013962:	f240 127f 	movw	r2, #383	; 0x17f
 8013966:	492e      	ldr	r1, [pc, #184]	; (8013a20 <etharp_find_entry+0x2e8>)
 8013968:	482b      	ldr	r0, [pc, #172]	; (8013a18 <etharp_find_entry+0x2e0>)
 801396a:	f002 fcdd 	bl	8016328 <iprintf>
    etharp_free_entry(i);
 801396e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013972:	4618      	mov	r0, r3
 8013974:	f7ff fe06 	bl	8013584 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013978:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801397c:	2b09      	cmp	r3, #9
 801397e:	dd06      	ble.n	801398e <etharp_find_entry+0x256>
 8013980:	4b23      	ldr	r3, [pc, #140]	; (8013a10 <etharp_find_entry+0x2d8>)
 8013982:	f240 1283 	movw	r2, #387	; 0x183
 8013986:	4926      	ldr	r1, [pc, #152]	; (8013a20 <etharp_find_entry+0x2e8>)
 8013988:	4823      	ldr	r0, [pc, #140]	; (8013a18 <etharp_find_entry+0x2e0>)
 801398a:	f002 fccd 	bl	8016328 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801398e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013992:	491e      	ldr	r1, [pc, #120]	; (8013a0c <etharp_find_entry+0x2d4>)
 8013994:	4613      	mov	r3, r2
 8013996:	005b      	lsls	r3, r3, #1
 8013998:	4413      	add	r3, r2
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	440b      	add	r3, r1
 801399e:	3314      	adds	r3, #20
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d006      	beq.n	80139b4 <etharp_find_entry+0x27c>
 80139a6:	4b1a      	ldr	r3, [pc, #104]	; (8013a10 <etharp_find_entry+0x2d8>)
 80139a8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80139ac:	491d      	ldr	r1, [pc, #116]	; (8013a24 <etharp_find_entry+0x2ec>)
 80139ae:	481a      	ldr	r0, [pc, #104]	; (8013a18 <etharp_find_entry+0x2e0>)
 80139b0:	f002 fcba 	bl	8016328 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00b      	beq.n	80139d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80139ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6819      	ldr	r1, [r3, #0]
 80139c2:	4812      	ldr	r0, [pc, #72]	; (8013a0c <etharp_find_entry+0x2d4>)
 80139c4:	4613      	mov	r3, r2
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	4413      	add	r3, r2
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	4403      	add	r3, r0
 80139ce:	3304      	adds	r3, #4
 80139d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80139d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139d6:	490d      	ldr	r1, [pc, #52]	; (8013a0c <etharp_find_entry+0x2d4>)
 80139d8:	4613      	mov	r3, r2
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	4413      	add	r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	440b      	add	r3, r1
 80139e2:	3312      	adds	r3, #18
 80139e4:	2200      	movs	r2, #0
 80139e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80139e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ec:	4907      	ldr	r1, [pc, #28]	; (8013a0c <etharp_find_entry+0x2d4>)
 80139ee:	4613      	mov	r3, r2
 80139f0:	005b      	lsls	r3, r3, #1
 80139f2:	4413      	add	r3, r2
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	440b      	add	r3, r1
 80139f8:	3308      	adds	r3, #8
 80139fa:	687a      	ldr	r2, [r7, #4]
 80139fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80139fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3728      	adds	r7, #40	; 0x28
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	2000c858 	.word	0x2000c858
 8013a10:	0801aa60 	.word	0x0801aa60
 8013a14:	0801aa98 	.word	0x0801aa98
 8013a18:	0801aad8 	.word	0x0801aad8
 8013a1c:	0801ab00 	.word	0x0801ab00
 8013a20:	0801ab18 	.word	0x0801ab18
 8013a24:	0801ab2c 	.word	0x0801ab2c

08013a28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b088      	sub	sp, #32
 8013a2c:	af02      	add	r7, sp, #8
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a3c:	2b06      	cmp	r3, #6
 8013a3e:	d006      	beq.n	8013a4e <etharp_update_arp_entry+0x26>
 8013a40:	4b48      	ldr	r3, [pc, #288]	; (8013b64 <etharp_update_arp_entry+0x13c>)
 8013a42:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013a46:	4948      	ldr	r1, [pc, #288]	; (8013b68 <etharp_update_arp_entry+0x140>)
 8013a48:	4848      	ldr	r0, [pc, #288]	; (8013b6c <etharp_update_arp_entry+0x144>)
 8013a4a:	f002 fc6d 	bl	8016328 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d012      	beq.n	8013a7a <etharp_update_arp_entry+0x52>
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00e      	beq.n	8013a7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	68f9      	ldr	r1, [r7, #12]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f001 f8fe 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8013a68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d105      	bne.n	8013a7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a76:	2be0      	cmp	r3, #224	; 0xe0
 8013a78:	d102      	bne.n	8013a80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013a7a:	f06f 030f 	mvn.w	r3, #15
 8013a7e:	e06c      	b.n	8013b5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013a80:	78fb      	ldrb	r3, [r7, #3]
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	4619      	mov	r1, r3
 8013a86:	68b8      	ldr	r0, [r7, #8]
 8013a88:	f7ff fe56 	bl	8013738 <etharp_find_entry>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013a90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	da02      	bge.n	8013a9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013a98:	8afb      	ldrh	r3, [r7, #22]
 8013a9a:	b25b      	sxtb	r3, r3
 8013a9c:	e05d      	b.n	8013b5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013a9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013aa2:	4933      	ldr	r1, [pc, #204]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	005b      	lsls	r3, r3, #1
 8013aa8:	4413      	add	r3, r2
 8013aaa:	00db      	lsls	r3, r3, #3
 8013aac:	440b      	add	r3, r1
 8013aae:	3314      	adds	r3, #20
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013ab4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ab8:	492d      	ldr	r1, [pc, #180]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013aba:	4613      	mov	r3, r2
 8013abc:	005b      	lsls	r3, r3, #1
 8013abe:	4413      	add	r3, r2
 8013ac0:	00db      	lsls	r3, r3, #3
 8013ac2:	440b      	add	r3, r1
 8013ac4:	3308      	adds	r3, #8
 8013ac6:	68fa      	ldr	r2, [r7, #12]
 8013ac8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013aca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ace:	4613      	mov	r3, r2
 8013ad0:	005b      	lsls	r3, r3, #1
 8013ad2:	4413      	add	r3, r2
 8013ad4:	00db      	lsls	r3, r3, #3
 8013ad6:	3308      	adds	r3, #8
 8013ad8:	4a25      	ldr	r2, [pc, #148]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013ada:	4413      	add	r3, r2
 8013adc:	3304      	adds	r3, #4
 8013ade:	2206      	movs	r2, #6
 8013ae0:	6879      	ldr	r1, [r7, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f002 fe8b 	bl	80167fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013ae8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013aec:	4920      	ldr	r1, [pc, #128]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013aee:	4613      	mov	r3, r2
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	4413      	add	r3, r2
 8013af4:	00db      	lsls	r3, r3, #3
 8013af6:	440b      	add	r3, r1
 8013af8:	3312      	adds	r3, #18
 8013afa:	2200      	movs	r2, #0
 8013afc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013afe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b02:	491b      	ldr	r1, [pc, #108]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013b04:	4613      	mov	r3, r2
 8013b06:	005b      	lsls	r3, r3, #1
 8013b08:	4413      	add	r3, r2
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	440b      	add	r3, r1
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d021      	beq.n	8013b58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013b14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b18:	4915      	ldr	r1, [pc, #84]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	005b      	lsls	r3, r3, #1
 8013b1e:	4413      	add	r3, r2
 8013b20:	00db      	lsls	r3, r3, #3
 8013b22:	440b      	add	r3, r1
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013b28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b2c:	4910      	ldr	r1, [pc, #64]	; (8013b70 <etharp_update_arp_entry+0x148>)
 8013b2e:	4613      	mov	r3, r2
 8013b30:	005b      	lsls	r3, r3, #1
 8013b32:	4413      	add	r3, r2
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	440b      	add	r3, r1
 8013b38:	2200      	movs	r2, #0
 8013b3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6939      	ldr	r1, [r7, #16]
 8013b4c:	68f8      	ldr	r0, [r7, #12]
 8013b4e:	f002 f8c1 	bl	8015cd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013b52:	6938      	ldr	r0, [r7, #16]
 8013b54:	f7f8 fb36 	bl	800c1c4 <pbuf_free>
  }
  return ERR_OK;
 8013b58:	2300      	movs	r3, #0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3718      	adds	r7, #24
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	0801aa60 	.word	0x0801aa60
 8013b68:	0801ab58 	.word	0x0801ab58
 8013b6c:	0801aad8 	.word	0x0801aad8
 8013b70:	2000c858 	.word	0x2000c858

08013b74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	60fb      	str	r3, [r7, #12]
 8013b80:	e01e      	b.n	8013bc0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013b82:	4913      	ldr	r1, [pc, #76]	; (8013bd0 <etharp_cleanup_netif+0x5c>)
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	4613      	mov	r3, r2
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	4413      	add	r3, r2
 8013b8c:	00db      	lsls	r3, r3, #3
 8013b8e:	440b      	add	r3, r1
 8013b90:	3314      	adds	r3, #20
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013b96:	7afb      	ldrb	r3, [r7, #11]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00e      	beq.n	8013bba <etharp_cleanup_netif+0x46>
 8013b9c:	490c      	ldr	r1, [pc, #48]	; (8013bd0 <etharp_cleanup_netif+0x5c>)
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3308      	adds	r3, #8
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d102      	bne.n	8013bba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013bb4:	68f8      	ldr	r0, [r7, #12]
 8013bb6:	f7ff fce5 	bl	8013584 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	60fb      	str	r3, [r7, #12]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b09      	cmp	r3, #9
 8013bc4:	dddd      	ble.n	8013b82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013bc6:	bf00      	nop
 8013bc8:	bf00      	nop
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	2000c858 	.word	0x2000c858

08013bd4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013bd4:	b5b0      	push	{r4, r5, r7, lr}
 8013bd6:	b08a      	sub	sp, #40	; 0x28
 8013bd8:	af04      	add	r7, sp, #16
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d107      	bne.n	8013bf4 <etharp_input+0x20>
 8013be4:	4b3d      	ldr	r3, [pc, #244]	; (8013cdc <etharp_input+0x108>)
 8013be6:	f240 228a 	movw	r2, #650	; 0x28a
 8013bea:	493d      	ldr	r1, [pc, #244]	; (8013ce0 <etharp_input+0x10c>)
 8013bec:	483d      	ldr	r0, [pc, #244]	; (8013ce4 <etharp_input+0x110>)
 8013bee:	f002 fb9b 	bl	8016328 <iprintf>
 8013bf2:	e06f      	b.n	8013cd4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	881b      	ldrh	r3, [r3, #0]
 8013bfe:	b29b      	uxth	r3, r3
 8013c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c04:	d10c      	bne.n	8013c20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013c0a:	2b06      	cmp	r3, #6
 8013c0c:	d108      	bne.n	8013c20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013c12:	2b04      	cmp	r3, #4
 8013c14:	d104      	bne.n	8013c20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	885b      	ldrh	r3, [r3, #2]
 8013c1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013c1c:	2b08      	cmp	r3, #8
 8013c1e:	d003      	beq.n	8013c28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7f8 facf 	bl	800c1c4 <pbuf_free>
    return;
 8013c26:	e055      	b.n	8013cd4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	330e      	adds	r3, #14
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	3318      	adds	r3, #24
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d102      	bne.n	8013c48 <etharp_input+0x74>
    for_us = 0;
 8013c42:	2300      	movs	r3, #0
 8013c44:	75fb      	strb	r3, [r7, #23]
 8013c46:	e009      	b.n	8013c5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	bf0c      	ite	eq
 8013c54:	2301      	moveq	r3, #1
 8013c56:	2300      	movne	r3, #0
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	f103 0208 	add.w	r2, r3, #8
 8013c62:	7dfb      	ldrb	r3, [r7, #23]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d001      	beq.n	8013c6c <etharp_input+0x98>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e000      	b.n	8013c6e <etharp_input+0x9a>
 8013c6c:	2302      	movs	r3, #2
 8013c6e:	f107 010c 	add.w	r1, r7, #12
 8013c72:	6838      	ldr	r0, [r7, #0]
 8013c74:	f7ff fed8 	bl	8013a28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	88db      	ldrh	r3, [r3, #6]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c82:	d003      	beq.n	8013c8c <etharp_input+0xb8>
 8013c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c88:	d01e      	beq.n	8013cc8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013c8a:	e020      	b.n	8013cce <etharp_input+0xfa>
      if (for_us) {
 8013c8c:	7dfb      	ldrb	r3, [r7, #23]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d01c      	beq.n	8013ccc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013ca8:	693a      	ldr	r2, [r7, #16]
 8013caa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013cac:	2102      	movs	r1, #2
 8013cae:	9103      	str	r1, [sp, #12]
 8013cb0:	f107 010c 	add.w	r1, r7, #12
 8013cb4:	9102      	str	r1, [sp, #8]
 8013cb6:	9201      	str	r2, [sp, #4]
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	462b      	mov	r3, r5
 8013cbc:	4622      	mov	r2, r4
 8013cbe:	4601      	mov	r1, r0
 8013cc0:	6838      	ldr	r0, [r7, #0]
 8013cc2:	f000 faeb 	bl	801429c <etharp_raw>
      break;
 8013cc6:	e001      	b.n	8013ccc <etharp_input+0xf8>
      break;
 8013cc8:	bf00      	nop
 8013cca:	e000      	b.n	8013cce <etharp_input+0xfa>
      break;
 8013ccc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f8 fa78 	bl	800c1c4 <pbuf_free>
}
 8013cd4:	3718      	adds	r7, #24
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	0801aa60 	.word	0x0801aa60
 8013ce0:	0801abb0 	.word	0x0801abb0
 8013ce4:	0801aad8 	.word	0x0801aad8

08013ce8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af02      	add	r7, sp, #8
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013cf6:	79fa      	ldrb	r2, [r7, #7]
 8013cf8:	4944      	ldr	r1, [pc, #272]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	005b      	lsls	r3, r3, #1
 8013cfe:	4413      	add	r3, r2
 8013d00:	00db      	lsls	r3, r3, #3
 8013d02:	440b      	add	r3, r1
 8013d04:	3314      	adds	r3, #20
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d806      	bhi.n	8013d1a <etharp_output_to_arp_index+0x32>
 8013d0c:	4b40      	ldr	r3, [pc, #256]	; (8013e10 <etharp_output_to_arp_index+0x128>)
 8013d0e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013d12:	4940      	ldr	r1, [pc, #256]	; (8013e14 <etharp_output_to_arp_index+0x12c>)
 8013d14:	4840      	ldr	r0, [pc, #256]	; (8013e18 <etharp_output_to_arp_index+0x130>)
 8013d16:	f002 fb07 	bl	8016328 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013d1a:	79fa      	ldrb	r2, [r7, #7]
 8013d1c:	493b      	ldr	r1, [pc, #236]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013d1e:	4613      	mov	r3, r2
 8013d20:	005b      	lsls	r3, r3, #1
 8013d22:	4413      	add	r3, r2
 8013d24:	00db      	lsls	r3, r3, #3
 8013d26:	440b      	add	r3, r1
 8013d28:	3314      	adds	r3, #20
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d153      	bne.n	8013dd8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013d30:	79fa      	ldrb	r2, [r7, #7]
 8013d32:	4936      	ldr	r1, [pc, #216]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013d34:	4613      	mov	r3, r2
 8013d36:	005b      	lsls	r3, r3, #1
 8013d38:	4413      	add	r3, r2
 8013d3a:	00db      	lsls	r3, r3, #3
 8013d3c:	440b      	add	r3, r1
 8013d3e:	3312      	adds	r3, #18
 8013d40:	881b      	ldrh	r3, [r3, #0]
 8013d42:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013d46:	d919      	bls.n	8013d7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013d48:	79fa      	ldrb	r2, [r7, #7]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	005b      	lsls	r3, r3, #1
 8013d4e:	4413      	add	r3, r2
 8013d50:	00db      	lsls	r3, r3, #3
 8013d52:	4a2e      	ldr	r2, [pc, #184]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013d54:	4413      	add	r3, r2
 8013d56:	3304      	adds	r3, #4
 8013d58:	4619      	mov	r1, r3
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f000 fb4c 	bl	80143f8 <etharp_request>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d138      	bne.n	8013dd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013d66:	79fa      	ldrb	r2, [r7, #7]
 8013d68:	4928      	ldr	r1, [pc, #160]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	005b      	lsls	r3, r3, #1
 8013d6e:	4413      	add	r3, r2
 8013d70:	00db      	lsls	r3, r3, #3
 8013d72:	440b      	add	r3, r1
 8013d74:	3314      	adds	r3, #20
 8013d76:	2203      	movs	r2, #3
 8013d78:	701a      	strb	r2, [r3, #0]
 8013d7a:	e02d      	b.n	8013dd8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013d7c:	79fa      	ldrb	r2, [r7, #7]
 8013d7e:	4923      	ldr	r1, [pc, #140]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013d80:	4613      	mov	r3, r2
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	4413      	add	r3, r2
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	440b      	add	r3, r1
 8013d8a:	3312      	adds	r3, #18
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013d92:	d321      	bcc.n	8013dd8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013d94:	79fa      	ldrb	r2, [r7, #7]
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	4a1b      	ldr	r2, [pc, #108]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013da0:	4413      	add	r3, r2
 8013da2:	1d19      	adds	r1, r3, #4
 8013da4:	79fa      	ldrb	r2, [r7, #7]
 8013da6:	4613      	mov	r3, r2
 8013da8:	005b      	lsls	r3, r3, #1
 8013daa:	4413      	add	r3, r2
 8013dac:	00db      	lsls	r3, r3, #3
 8013dae:	3308      	adds	r3, #8
 8013db0:	4a16      	ldr	r2, [pc, #88]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013db2:	4413      	add	r3, r2
 8013db4:	3304      	adds	r3, #4
 8013db6:	461a      	mov	r2, r3
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f000 fafb 	bl	80143b4 <etharp_request_dst>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d109      	bne.n	8013dd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013dc4:	79fa      	ldrb	r2, [r7, #7]
 8013dc6:	4911      	ldr	r1, [pc, #68]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013dc8:	4613      	mov	r3, r2
 8013dca:	005b      	lsls	r3, r3, #1
 8013dcc:	4413      	add	r3, r2
 8013dce:	00db      	lsls	r3, r3, #3
 8013dd0:	440b      	add	r3, r1
 8013dd2:	3314      	adds	r3, #20
 8013dd4:	2203      	movs	r2, #3
 8013dd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013dde:	79fa      	ldrb	r2, [r7, #7]
 8013de0:	4613      	mov	r3, r2
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	4413      	add	r3, r2
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	3308      	adds	r3, #8
 8013dea:	4a08      	ldr	r2, [pc, #32]	; (8013e0c <etharp_output_to_arp_index+0x124>)
 8013dec:	4413      	add	r3, r2
 8013dee:	3304      	adds	r3, #4
 8013df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013df4:	9200      	str	r2, [sp, #0]
 8013df6:	460a      	mov	r2, r1
 8013df8:	68b9      	ldr	r1, [r7, #8]
 8013dfa:	68f8      	ldr	r0, [r7, #12]
 8013dfc:	f001 ff6a 	bl	8015cd4 <ethernet_output>
 8013e00:	4603      	mov	r3, r0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	2000c858 	.word	0x2000c858
 8013e10:	0801aa60 	.word	0x0801aa60
 8013e14:	0801abd0 	.word	0x0801abd0
 8013e18:	0801aad8 	.word	0x0801aad8

08013e1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	; 0x28
 8013e20:	af02      	add	r7, sp, #8
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <etharp_output+0x24>
 8013e32:	4b73      	ldr	r3, [pc, #460]	; (8014000 <etharp_output+0x1e4>)
 8013e34:	f240 321e 	movw	r2, #798	; 0x31e
 8013e38:	4972      	ldr	r1, [pc, #456]	; (8014004 <etharp_output+0x1e8>)
 8013e3a:	4873      	ldr	r0, [pc, #460]	; (8014008 <etharp_output+0x1ec>)
 8013e3c:	f002 fa74 	bl	8016328 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <etharp_output+0x38>
 8013e46:	4b6e      	ldr	r3, [pc, #440]	; (8014000 <etharp_output+0x1e4>)
 8013e48:	f240 321f 	movw	r2, #799	; 0x31f
 8013e4c:	496f      	ldr	r1, [pc, #444]	; (801400c <etharp_output+0x1f0>)
 8013e4e:	486e      	ldr	r0, [pc, #440]	; (8014008 <etharp_output+0x1ec>)
 8013e50:	f002 fa6a 	bl	8016328 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d106      	bne.n	8013e68 <etharp_output+0x4c>
 8013e5a:	4b69      	ldr	r3, [pc, #420]	; (8014000 <etharp_output+0x1e4>)
 8013e5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013e60:	496b      	ldr	r1, [pc, #428]	; (8014010 <etharp_output+0x1f4>)
 8013e62:	4869      	ldr	r0, [pc, #420]	; (8014008 <etharp_output+0x1ec>)
 8013e64:	f002 fa60 	bl	8016328 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	68f9      	ldr	r1, [r7, #12]
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f000 fef8 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d002      	beq.n	8013e80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013e7a:	4b66      	ldr	r3, [pc, #408]	; (8014014 <etharp_output+0x1f8>)
 8013e7c:	61fb      	str	r3, [r7, #28]
 8013e7e:	e0af      	b.n	8013fe0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e88:	2be0      	cmp	r3, #224	; 0xe0
 8013e8a:	d118      	bne.n	8013ebe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013e90:	2300      	movs	r3, #0
 8013e92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013e94:	235e      	movs	r3, #94	; 0x5e
 8013e96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	3302      	adds	r3, #2
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	3303      	adds	r3, #3
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013eb6:	f107 0310 	add.w	r3, r7, #16
 8013eba:	61fb      	str	r3, [r7, #28]
 8013ebc:	e090      	b.n	8013fe0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	405a      	eors	r2, r3
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	3308      	adds	r3, #8
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d012      	beq.n	8013efc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013edc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013ee0:	4293      	cmp	r3, r2
 8013ee2:	d00b      	beq.n	8013efc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	330c      	adds	r3, #12
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d003      	beq.n	8013ef6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	330c      	adds	r3, #12
 8013ef2:	61bb      	str	r3, [r7, #24]
 8013ef4:	e002      	b.n	8013efc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013ef6:	f06f 0303 	mvn.w	r3, #3
 8013efa:	e07d      	b.n	8013ff8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013efc:	4b46      	ldr	r3, [pc, #280]	; (8014018 <etharp_output+0x1fc>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	4619      	mov	r1, r3
 8013f02:	4a46      	ldr	r2, [pc, #280]	; (801401c <etharp_output+0x200>)
 8013f04:	460b      	mov	r3, r1
 8013f06:	005b      	lsls	r3, r3, #1
 8013f08:	440b      	add	r3, r1
 8013f0a:	00db      	lsls	r3, r3, #3
 8013f0c:	4413      	add	r3, r2
 8013f0e:	3314      	adds	r3, #20
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	d925      	bls.n	8013f62 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013f16:	4b40      	ldr	r3, [pc, #256]	; (8014018 <etharp_output+0x1fc>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	4a3f      	ldr	r2, [pc, #252]	; (801401c <etharp_output+0x200>)
 8013f1e:	460b      	mov	r3, r1
 8013f20:	005b      	lsls	r3, r3, #1
 8013f22:	440b      	add	r3, r1
 8013f24:	00db      	lsls	r3, r3, #3
 8013f26:	4413      	add	r3, r2
 8013f28:	3308      	adds	r3, #8
 8013f2a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d117      	bne.n	8013f62 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	4b38      	ldr	r3, [pc, #224]	; (8014018 <etharp_output+0x1fc>)
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	4937      	ldr	r1, [pc, #220]	; (801401c <etharp_output+0x200>)
 8013f3e:	4603      	mov	r3, r0
 8013f40:	005b      	lsls	r3, r3, #1
 8013f42:	4403      	add	r3, r0
 8013f44:	00db      	lsls	r3, r3, #3
 8013f46:	440b      	add	r3, r1
 8013f48:	3304      	adds	r3, #4
 8013f4a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d108      	bne.n	8013f62 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013f50:	4b31      	ldr	r3, [pc, #196]	; (8014018 <etharp_output+0x1fc>)
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	461a      	mov	r2, r3
 8013f56:	68b9      	ldr	r1, [r7, #8]
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f7ff fec5 	bl	8013ce8 <etharp_output_to_arp_index>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	e04a      	b.n	8013ff8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013f62:	2300      	movs	r3, #0
 8013f64:	75fb      	strb	r3, [r7, #23]
 8013f66:	e031      	b.n	8013fcc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013f68:	7dfa      	ldrb	r2, [r7, #23]
 8013f6a:	492c      	ldr	r1, [pc, #176]	; (801401c <etharp_output+0x200>)
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	005b      	lsls	r3, r3, #1
 8013f70:	4413      	add	r3, r2
 8013f72:	00db      	lsls	r3, r3, #3
 8013f74:	440b      	add	r3, r1
 8013f76:	3314      	adds	r3, #20
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d923      	bls.n	8013fc6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013f7e:	7dfa      	ldrb	r2, [r7, #23]
 8013f80:	4926      	ldr	r1, [pc, #152]	; (801401c <etharp_output+0x200>)
 8013f82:	4613      	mov	r3, r2
 8013f84:	005b      	lsls	r3, r3, #1
 8013f86:	4413      	add	r3, r2
 8013f88:	00db      	lsls	r3, r3, #3
 8013f8a:	440b      	add	r3, r1
 8013f8c:	3308      	adds	r3, #8
 8013f8e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d117      	bne.n	8013fc6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	6819      	ldr	r1, [r3, #0]
 8013f9a:	7dfa      	ldrb	r2, [r7, #23]
 8013f9c:	481f      	ldr	r0, [pc, #124]	; (801401c <etharp_output+0x200>)
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4413      	add	r3, r2
 8013fa4:	00db      	lsls	r3, r3, #3
 8013fa6:	4403      	add	r3, r0
 8013fa8:	3304      	adds	r3, #4
 8013faa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013fac:	4299      	cmp	r1, r3
 8013fae:	d10a      	bne.n	8013fc6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013fb0:	4a19      	ldr	r2, [pc, #100]	; (8014018 <etharp_output+0x1fc>)
 8013fb2:	7dfb      	ldrb	r3, [r7, #23]
 8013fb4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013fb6:	7dfb      	ldrb	r3, [r7, #23]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	68b9      	ldr	r1, [r7, #8]
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	f7ff fe93 	bl	8013ce8 <etharp_output_to_arp_index>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	e018      	b.n	8013ff8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013fc6:	7dfb      	ldrb	r3, [r7, #23]
 8013fc8:	3301      	adds	r3, #1
 8013fca:	75fb      	strb	r3, [r7, #23]
 8013fcc:	7dfb      	ldrb	r3, [r7, #23]
 8013fce:	2b09      	cmp	r3, #9
 8013fd0:	d9ca      	bls.n	8013f68 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013fd2:	68ba      	ldr	r2, [r7, #8]
 8013fd4:	69b9      	ldr	r1, [r7, #24]
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	f000 f822 	bl	8014020 <etharp_query>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	e00b      	b.n	8013ff8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	68b9      	ldr	r1, [r7, #8]
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f001 fe6f 	bl	8015cd4 <ethernet_output>
 8013ff6:	4603      	mov	r3, r0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	0801aa60 	.word	0x0801aa60
 8014004:	0801abb0 	.word	0x0801abb0
 8014008:	0801aad8 	.word	0x0801aad8
 801400c:	0801ac00 	.word	0x0801ac00
 8014010:	0801aba0 	.word	0x0801aba0
 8014014:	0801b314 	.word	0x0801b314
 8014018:	2000c948 	.word	0x2000c948
 801401c:	2000c858 	.word	0x2000c858

08014020 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b08c      	sub	sp, #48	; 0x30
 8014024:	af02      	add	r7, sp, #8
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	60b9      	str	r1, [r7, #8]
 801402a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	3326      	adds	r3, #38	; 0x26
 8014030:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014032:	23ff      	movs	r3, #255	; 0xff
 8014034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014038:	2300      	movs	r3, #0
 801403a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68f9      	ldr	r1, [r7, #12]
 8014042:	4618      	mov	r0, r3
 8014044:	f000 fe0e 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d10c      	bne.n	8014068 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014056:	2be0      	cmp	r3, #224	; 0xe0
 8014058:	d006      	beq.n	8014068 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d003      	beq.n	8014068 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014068:	f06f 030f 	mvn.w	r3, #15
 801406c:	e101      	b.n	8014272 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	2101      	movs	r1, #1
 8014072:	68b8      	ldr	r0, [r7, #8]
 8014074:	f7ff fb60 	bl	8013738 <etharp_find_entry>
 8014078:	4603      	mov	r3, r0
 801407a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801407c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014080:	2b00      	cmp	r3, #0
 8014082:	da02      	bge.n	801408a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014084:	8a7b      	ldrh	r3, [r7, #18]
 8014086:	b25b      	sxtb	r3, r3
 8014088:	e0f3      	b.n	8014272 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801408a:	8a7b      	ldrh	r3, [r7, #18]
 801408c:	2b7e      	cmp	r3, #126	; 0x7e
 801408e:	d906      	bls.n	801409e <etharp_query+0x7e>
 8014090:	4b7a      	ldr	r3, [pc, #488]	; (801427c <etharp_query+0x25c>)
 8014092:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014096:	497a      	ldr	r1, [pc, #488]	; (8014280 <etharp_query+0x260>)
 8014098:	487a      	ldr	r0, [pc, #488]	; (8014284 <etharp_query+0x264>)
 801409a:	f002 f945 	bl	8016328 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801409e:	8a7b      	ldrh	r3, [r7, #18]
 80140a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80140a2:	7c7a      	ldrb	r2, [r7, #17]
 80140a4:	4978      	ldr	r1, [pc, #480]	; (8014288 <etharp_query+0x268>)
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	3314      	adds	r3, #20
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d115      	bne.n	80140e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80140b8:	2301      	movs	r3, #1
 80140ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80140bc:	7c7a      	ldrb	r2, [r7, #17]
 80140be:	4972      	ldr	r1, [pc, #456]	; (8014288 <etharp_query+0x268>)
 80140c0:	4613      	mov	r3, r2
 80140c2:	005b      	lsls	r3, r3, #1
 80140c4:	4413      	add	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	440b      	add	r3, r1
 80140ca:	3314      	adds	r3, #20
 80140cc:	2201      	movs	r2, #1
 80140ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80140d0:	7c7a      	ldrb	r2, [r7, #17]
 80140d2:	496d      	ldr	r1, [pc, #436]	; (8014288 <etharp_query+0x268>)
 80140d4:	4613      	mov	r3, r2
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	4413      	add	r3, r2
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	440b      	add	r3, r1
 80140de:	3308      	adds	r3, #8
 80140e0:	68fa      	ldr	r2, [r7, #12]
 80140e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80140e4:	7c7a      	ldrb	r2, [r7, #17]
 80140e6:	4968      	ldr	r1, [pc, #416]	; (8014288 <etharp_query+0x268>)
 80140e8:	4613      	mov	r3, r2
 80140ea:	005b      	lsls	r3, r3, #1
 80140ec:	4413      	add	r3, r2
 80140ee:	00db      	lsls	r3, r3, #3
 80140f0:	440b      	add	r3, r1
 80140f2:	3314      	adds	r3, #20
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d011      	beq.n	801411e <etharp_query+0xfe>
 80140fa:	7c7a      	ldrb	r2, [r7, #17]
 80140fc:	4962      	ldr	r1, [pc, #392]	; (8014288 <etharp_query+0x268>)
 80140fe:	4613      	mov	r3, r2
 8014100:	005b      	lsls	r3, r3, #1
 8014102:	4413      	add	r3, r2
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	440b      	add	r3, r1
 8014108:	3314      	adds	r3, #20
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b01      	cmp	r3, #1
 801410e:	d806      	bhi.n	801411e <etharp_query+0xfe>
 8014110:	4b5a      	ldr	r3, [pc, #360]	; (801427c <etharp_query+0x25c>)
 8014112:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014116:	495d      	ldr	r1, [pc, #372]	; (801428c <etharp_query+0x26c>)
 8014118:	485a      	ldr	r0, [pc, #360]	; (8014284 <etharp_query+0x264>)
 801411a:	f002 f905 	bl	8016328 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801411e:	6a3b      	ldr	r3, [r7, #32]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d102      	bne.n	801412a <etharp_query+0x10a>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10c      	bne.n	8014144 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801412a:	68b9      	ldr	r1, [r7, #8]
 801412c:	68f8      	ldr	r0, [r7, #12]
 801412e:	f000 f963 	bl	80143f8 <etharp_request>
 8014132:	4603      	mov	r3, r0
 8014134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d102      	bne.n	8014144 <etharp_query+0x124>
      return result;
 801413e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014142:	e096      	b.n	8014272 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d106      	bne.n	8014158 <etharp_query+0x138>
 801414a:	4b4c      	ldr	r3, [pc, #304]	; (801427c <etharp_query+0x25c>)
 801414c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014150:	494f      	ldr	r1, [pc, #316]	; (8014290 <etharp_query+0x270>)
 8014152:	484c      	ldr	r0, [pc, #304]	; (8014284 <etharp_query+0x264>)
 8014154:	f002 f8e8 	bl	8016328 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014158:	7c7a      	ldrb	r2, [r7, #17]
 801415a:	494b      	ldr	r1, [pc, #300]	; (8014288 <etharp_query+0x268>)
 801415c:	4613      	mov	r3, r2
 801415e:	005b      	lsls	r3, r3, #1
 8014160:	4413      	add	r3, r2
 8014162:	00db      	lsls	r3, r3, #3
 8014164:	440b      	add	r3, r1
 8014166:	3314      	adds	r3, #20
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d917      	bls.n	801419e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801416e:	4a49      	ldr	r2, [pc, #292]	; (8014294 <etharp_query+0x274>)
 8014170:	7c7b      	ldrb	r3, [r7, #17]
 8014172:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014174:	7c7a      	ldrb	r2, [r7, #17]
 8014176:	4613      	mov	r3, r2
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	4413      	add	r3, r2
 801417c:	00db      	lsls	r3, r3, #3
 801417e:	3308      	adds	r3, #8
 8014180:	4a41      	ldr	r2, [pc, #260]	; (8014288 <etharp_query+0x268>)
 8014182:	4413      	add	r3, r2
 8014184:	3304      	adds	r3, #4
 8014186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801418a:	9200      	str	r2, [sp, #0]
 801418c:	697a      	ldr	r2, [r7, #20]
 801418e:	6879      	ldr	r1, [r7, #4]
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f001 fd9f 	bl	8015cd4 <ethernet_output>
 8014196:	4603      	mov	r3, r0
 8014198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801419c:	e067      	b.n	801426e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801419e:	7c7a      	ldrb	r2, [r7, #17]
 80141a0:	4939      	ldr	r1, [pc, #228]	; (8014288 <etharp_query+0x268>)
 80141a2:	4613      	mov	r3, r2
 80141a4:	005b      	lsls	r3, r3, #1
 80141a6:	4413      	add	r3, r2
 80141a8:	00db      	lsls	r3, r3, #3
 80141aa:	440b      	add	r3, r1
 80141ac:	3314      	adds	r3, #20
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d15c      	bne.n	801426e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80141b4:	2300      	movs	r3, #0
 80141b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80141bc:	e01c      	b.n	80141f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	895a      	ldrh	r2, [r3, #10]
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	891b      	ldrh	r3, [r3, #8]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d10a      	bne.n	80141e0 <etharp_query+0x1c0>
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d006      	beq.n	80141e0 <etharp_query+0x1c0>
 80141d2:	4b2a      	ldr	r3, [pc, #168]	; (801427c <etharp_query+0x25c>)
 80141d4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80141d8:	492f      	ldr	r1, [pc, #188]	; (8014298 <etharp_query+0x278>)
 80141da:	482a      	ldr	r0, [pc, #168]	; (8014284 <etharp_query+0x264>)
 80141dc:	f002 f8a4 	bl	8016328 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	7b1b      	ldrb	r3, [r3, #12]
 80141e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d002      	beq.n	80141f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80141ec:	2301      	movs	r3, #1
 80141ee:	61bb      	str	r3, [r7, #24]
        break;
 80141f0:	e005      	b.n	80141fe <etharp_query+0x1de>
      }
      p = p->next;
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1df      	bne.n	80141be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80141fe:	69bb      	ldr	r3, [r7, #24]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d007      	beq.n	8014214 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	f44f 7120 	mov.w	r1, #640	; 0x280
 801420a:	200e      	movs	r0, #14
 801420c:	f7f8 fa52 	bl	800c6b4 <pbuf_clone>
 8014210:	61f8      	str	r0, [r7, #28]
 8014212:	e004      	b.n	801421e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014218:	69f8      	ldr	r0, [r7, #28]
 801421a:	f7f8 f879 	bl	800c310 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d021      	beq.n	8014268 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014224:	7c7a      	ldrb	r2, [r7, #17]
 8014226:	4918      	ldr	r1, [pc, #96]	; (8014288 <etharp_query+0x268>)
 8014228:	4613      	mov	r3, r2
 801422a:	005b      	lsls	r3, r3, #1
 801422c:	4413      	add	r3, r2
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	440b      	add	r3, r1
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00a      	beq.n	801424e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014238:	7c7a      	ldrb	r2, [r7, #17]
 801423a:	4913      	ldr	r1, [pc, #76]	; (8014288 <etharp_query+0x268>)
 801423c:	4613      	mov	r3, r2
 801423e:	005b      	lsls	r3, r3, #1
 8014240:	4413      	add	r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	440b      	add	r3, r1
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4618      	mov	r0, r3
 801424a:	f7f7 ffbb 	bl	800c1c4 <pbuf_free>
      }
      arp_table[i].q = p;
 801424e:	7c7a      	ldrb	r2, [r7, #17]
 8014250:	490d      	ldr	r1, [pc, #52]	; (8014288 <etharp_query+0x268>)
 8014252:	4613      	mov	r3, r2
 8014254:	005b      	lsls	r3, r3, #1
 8014256:	4413      	add	r3, r2
 8014258:	00db      	lsls	r3, r3, #3
 801425a:	440b      	add	r3, r1
 801425c:	69fa      	ldr	r2, [r7, #28]
 801425e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014260:	2300      	movs	r3, #0
 8014262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014266:	e002      	b.n	801426e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014268:	23ff      	movs	r3, #255	; 0xff
 801426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801426e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014272:	4618      	mov	r0, r3
 8014274:	3728      	adds	r7, #40	; 0x28
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	0801aa60 	.word	0x0801aa60
 8014280:	0801ac0c 	.word	0x0801ac0c
 8014284:	0801aad8 	.word	0x0801aad8
 8014288:	2000c858 	.word	0x2000c858
 801428c:	0801ac1c 	.word	0x0801ac1c
 8014290:	0801ac00 	.word	0x0801ac00
 8014294:	2000c948 	.word	0x2000c948
 8014298:	0801ac44 	.word	0x0801ac44

0801429c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b08a      	sub	sp, #40	; 0x28
 80142a0:	af02      	add	r7, sp, #8
 80142a2:	60f8      	str	r0, [r7, #12]
 80142a4:	60b9      	str	r1, [r7, #8]
 80142a6:	607a      	str	r2, [r7, #4]
 80142a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d106      	bne.n	80142c2 <etharp_raw+0x26>
 80142b4:	4b3a      	ldr	r3, [pc, #232]	; (80143a0 <etharp_raw+0x104>)
 80142b6:	f240 4257 	movw	r2, #1111	; 0x457
 80142ba:	493a      	ldr	r1, [pc, #232]	; (80143a4 <etharp_raw+0x108>)
 80142bc:	483a      	ldr	r0, [pc, #232]	; (80143a8 <etharp_raw+0x10c>)
 80142be:	f002 f833 	bl	8016328 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80142c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142c6:	211c      	movs	r1, #28
 80142c8:	200e      	movs	r0, #14
 80142ca:	f7f7 fc97 	bl	800bbfc <pbuf_alloc>
 80142ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80142d6:	f04f 33ff 	mov.w	r3, #4294967295
 80142da:	e05d      	b.n	8014398 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	895b      	ldrh	r3, [r3, #10]
 80142e0:	2b1b      	cmp	r3, #27
 80142e2:	d806      	bhi.n	80142f2 <etharp_raw+0x56>
 80142e4:	4b2e      	ldr	r3, [pc, #184]	; (80143a0 <etharp_raw+0x104>)
 80142e6:	f240 4262 	movw	r2, #1122	; 0x462
 80142ea:	4930      	ldr	r1, [pc, #192]	; (80143ac <etharp_raw+0x110>)
 80142ec:	482e      	ldr	r0, [pc, #184]	; (80143a8 <etharp_raw+0x10c>)
 80142ee:	f002 f81b 	bl	8016328 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80142f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7f6 fb70 	bl	800a9e0 <lwip_htons>
 8014300:	4603      	mov	r3, r0
 8014302:	461a      	mov	r2, r3
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801430e:	2b06      	cmp	r3, #6
 8014310:	d006      	beq.n	8014320 <etharp_raw+0x84>
 8014312:	4b23      	ldr	r3, [pc, #140]	; (80143a0 <etharp_raw+0x104>)
 8014314:	f240 4269 	movw	r2, #1129	; 0x469
 8014318:	4925      	ldr	r1, [pc, #148]	; (80143b0 <etharp_raw+0x114>)
 801431a:	4823      	ldr	r0, [pc, #140]	; (80143a8 <etharp_raw+0x10c>)
 801431c:	f002 f804 	bl	8016328 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014320:	697b      	ldr	r3, [r7, #20]
 8014322:	3308      	adds	r3, #8
 8014324:	2206      	movs	r2, #6
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	4618      	mov	r0, r3
 801432a:	f002 fa68 	bl	80167fe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	3312      	adds	r3, #18
 8014332:	2206      	movs	r2, #6
 8014334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014336:	4618      	mov	r0, r3
 8014338:	f002 fa61 	bl	80167fe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	330e      	adds	r3, #14
 8014340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014342:	6812      	ldr	r2, [r2, #0]
 8014344:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	3318      	adds	r3, #24
 801434a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801434c:	6812      	ldr	r2, [r2, #0]
 801434e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	2200      	movs	r2, #0
 8014354:	701a      	strb	r2, [r3, #0]
 8014356:	2200      	movs	r2, #0
 8014358:	f042 0201 	orr.w	r2, r2, #1
 801435c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	2200      	movs	r2, #0
 8014362:	f042 0208 	orr.w	r2, r2, #8
 8014366:	709a      	strb	r2, [r3, #2]
 8014368:	2200      	movs	r2, #0
 801436a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	2206      	movs	r2, #6
 8014370:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	2204      	movs	r2, #4
 8014376:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014378:	f640 0306 	movw	r3, #2054	; 0x806
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	68ba      	ldr	r2, [r7, #8]
 8014382:	69b9      	ldr	r1, [r7, #24]
 8014384:	68f8      	ldr	r0, [r7, #12]
 8014386:	f001 fca5 	bl	8015cd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801438a:	69b8      	ldr	r0, [r7, #24]
 801438c:	f7f7 ff1a 	bl	800c1c4 <pbuf_free>
  p = NULL;
 8014390:	2300      	movs	r3, #0
 8014392:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014394:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014398:	4618      	mov	r0, r3
 801439a:	3720      	adds	r7, #32
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}
 80143a0:	0801aa60 	.word	0x0801aa60
 80143a4:	0801abb0 	.word	0x0801abb0
 80143a8:	0801aad8 	.word	0x0801aad8
 80143ac:	0801ac60 	.word	0x0801ac60
 80143b0:	0801ac94 	.word	0x0801ac94

080143b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b088      	sub	sp, #32
 80143b8:	af04      	add	r7, sp, #16
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80143d0:	2201      	movs	r2, #1
 80143d2:	9203      	str	r2, [sp, #12]
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	9202      	str	r2, [sp, #8]
 80143d8:	4a06      	ldr	r2, [pc, #24]	; (80143f4 <etharp_request_dst+0x40>)
 80143da:	9201      	str	r2, [sp, #4]
 80143dc:	9300      	str	r3, [sp, #0]
 80143de:	4603      	mov	r3, r0
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f7ff ff5a 	bl	801429c <etharp_raw>
 80143e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3710      	adds	r7, #16
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	0801b31c 	.word	0x0801b31c

080143f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b082      	sub	sp, #8
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014402:	4a05      	ldr	r2, [pc, #20]	; (8014418 <etharp_request+0x20>)
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ff ffd4 	bl	80143b4 <etharp_request_dst>
 801440c:	4603      	mov	r3, r0
}
 801440e:	4618      	mov	r0, r3
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	0801b314 	.word	0x0801b314

0801441c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b08e      	sub	sp, #56	; 0x38
 8014420:	af04      	add	r7, sp, #16
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014426:	4b79      	ldr	r3, [pc, #484]	; (801460c <icmp_input+0x1f0>)
 8014428:	689b      	ldr	r3, [r3, #8]
 801442a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	f003 030f 	and.w	r3, r3, #15
 8014434:	b2db      	uxtb	r3, r3
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	b2db      	uxtb	r3, r3
 801443a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801443c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801443e:	2b13      	cmp	r3, #19
 8014440:	f240 80cd 	bls.w	80145de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	895b      	ldrh	r3, [r3, #10]
 8014448:	2b03      	cmp	r3, #3
 801444a:	f240 80ca 	bls.w	80145e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014458:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801445c:	2b00      	cmp	r3, #0
 801445e:	f000 80b7 	beq.w	80145d0 <icmp_input+0x1b4>
 8014462:	2b08      	cmp	r3, #8
 8014464:	f040 80b7 	bne.w	80145d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014468:	4b69      	ldr	r3, [pc, #420]	; (8014610 <icmp_input+0x1f4>)
 801446a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801446c:	4b67      	ldr	r3, [pc, #412]	; (801460c <icmp_input+0x1f0>)
 801446e:	695b      	ldr	r3, [r3, #20]
 8014470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014474:	2be0      	cmp	r3, #224	; 0xe0
 8014476:	f000 80bb 	beq.w	80145f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801447a:	4b64      	ldr	r3, [pc, #400]	; (801460c <icmp_input+0x1f0>)
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	4a63      	ldr	r2, [pc, #396]	; (801460c <icmp_input+0x1f0>)
 8014480:	6812      	ldr	r2, [r2, #0]
 8014482:	4611      	mov	r1, r2
 8014484:	4618      	mov	r0, r3
 8014486:	f000 fbed 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	f040 80b1 	bne.w	80145f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	891b      	ldrh	r3, [r3, #8]
 8014496:	2b07      	cmp	r3, #7
 8014498:	f240 80a5 	bls.w	80145e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801449c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801449e:	330e      	adds	r3, #14
 80144a0:	4619      	mov	r1, r3
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7f7 fdf8 	bl	800c098 <pbuf_add_header>
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d04b      	beq.n	8014546 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	891a      	ldrh	r2, [r3, #8]
 80144b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144b4:	4413      	add	r3, r2
 80144b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	891b      	ldrh	r3, [r3, #8]
 80144bc:	8b7a      	ldrh	r2, [r7, #26]
 80144be:	429a      	cmp	r2, r3
 80144c0:	f0c0 809a 	bcc.w	80145f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80144c4:	8b7b      	ldrh	r3, [r7, #26]
 80144c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144ca:	4619      	mov	r1, r3
 80144cc:	200e      	movs	r0, #14
 80144ce:	f7f7 fb95 	bl	800bbfc <pbuf_alloc>
 80144d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f000 8090 	beq.w	80145fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	895b      	ldrh	r3, [r3, #10]
 80144e0:	461a      	mov	r2, r3
 80144e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144e4:	3308      	adds	r3, #8
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d203      	bcs.n	80144f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80144ea:	6978      	ldr	r0, [r7, #20]
 80144ec:	f7f7 fe6a 	bl	800c1c4 <pbuf_free>
          goto icmperr;
 80144f0:	e085      	b.n	80145fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80144f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144fa:	4618      	mov	r0, r3
 80144fc:	f002 f97f 	bl	80167fe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014502:	4619      	mov	r1, r3
 8014504:	6978      	ldr	r0, [r7, #20]
 8014506:	f7f7 fdd7 	bl	800c0b8 <pbuf_remove_header>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d009      	beq.n	8014524 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014510:	4b40      	ldr	r3, [pc, #256]	; (8014614 <icmp_input+0x1f8>)
 8014512:	22b6      	movs	r2, #182	; 0xb6
 8014514:	4940      	ldr	r1, [pc, #256]	; (8014618 <icmp_input+0x1fc>)
 8014516:	4841      	ldr	r0, [pc, #260]	; (801461c <icmp_input+0x200>)
 8014518:	f001 ff06 	bl	8016328 <iprintf>
          pbuf_free(r);
 801451c:	6978      	ldr	r0, [r7, #20]
 801451e:	f7f7 fe51 	bl	800c1c4 <pbuf_free>
          goto icmperr;
 8014522:	e06c      	b.n	80145fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014524:	6879      	ldr	r1, [r7, #4]
 8014526:	6978      	ldr	r0, [r7, #20]
 8014528:	f7f7 ff80 	bl	800c42c <pbuf_copy>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d003      	beq.n	801453a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014532:	6978      	ldr	r0, [r7, #20]
 8014534:	f7f7 fe46 	bl	800c1c4 <pbuf_free>
          goto icmperr;
 8014538:	e061      	b.n	80145fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7f7 fe42 	bl	800c1c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	607b      	str	r3, [r7, #4]
 8014544:	e00f      	b.n	8014566 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014548:	330e      	adds	r3, #14
 801454a:	4619      	mov	r1, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f7f7 fdb3 	bl	800c0b8 <pbuf_remove_header>
 8014552:	4603      	mov	r3, r0
 8014554:	2b00      	cmp	r3, #0
 8014556:	d006      	beq.n	8014566 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014558:	4b2e      	ldr	r3, [pc, #184]	; (8014614 <icmp_input+0x1f8>)
 801455a:	22c7      	movs	r2, #199	; 0xc7
 801455c:	4930      	ldr	r1, [pc, #192]	; (8014620 <icmp_input+0x204>)
 801455e:	482f      	ldr	r0, [pc, #188]	; (801461c <icmp_input+0x200>)
 8014560:	f001 fee2 	bl	8016328 <iprintf>
          goto icmperr;
 8014564:	e04b      	b.n	80145fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801456c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801456e:	4619      	mov	r1, r3
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f7f7 fd91 	bl	800c098 <pbuf_add_header>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d12b      	bne.n	80145d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	685b      	ldr	r3, [r3, #4]
 8014580:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801458a:	4b20      	ldr	r3, [pc, #128]	; (801460c <icmp_input+0x1f0>)
 801458c:	691a      	ldr	r2, [r3, #16]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	2200      	movs	r2, #0
 8014596:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	2200      	movs	r2, #0
 801459c:	709a      	strb	r2, [r3, #2]
 801459e:	2200      	movs	r2, #0
 80145a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	22ff      	movs	r2, #255	; 0xff
 80145a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	729a      	strb	r2, [r3, #10]
 80145ae:	2200      	movs	r2, #0
 80145b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	9302      	str	r3, [sp, #8]
 80145b6:	2301      	movs	r3, #1
 80145b8:	9301      	str	r3, [sp, #4]
 80145ba:	2300      	movs	r3, #0
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	23ff      	movs	r3, #255	; 0xff
 80145c0:	2200      	movs	r2, #0
 80145c2:	69f9      	ldr	r1, [r7, #28]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 fa75 	bl	8014ab4 <ip4_output_if>
 80145ca:	4603      	mov	r3, r0
 80145cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80145ce:	e001      	b.n	80145d4 <icmp_input+0x1b8>
      break;
 80145d0:	bf00      	nop
 80145d2:	e000      	b.n	80145d6 <icmp_input+0x1ba>
      break;
 80145d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	f7f7 fdf4 	bl	800c1c4 <pbuf_free>
  return;
 80145dc:	e013      	b.n	8014606 <icmp_input+0x1ea>
    goto lenerr;
 80145de:	bf00      	nop
 80145e0:	e002      	b.n	80145e8 <icmp_input+0x1cc>
    goto lenerr;
 80145e2:	bf00      	nop
 80145e4:	e000      	b.n	80145e8 <icmp_input+0x1cc>
        goto lenerr;
 80145e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f7f7 fdeb 	bl	800c1c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80145ee:	e00a      	b.n	8014606 <icmp_input+0x1ea>
        goto icmperr;
 80145f0:	bf00      	nop
 80145f2:	e004      	b.n	80145fe <icmp_input+0x1e2>
        goto icmperr;
 80145f4:	bf00      	nop
 80145f6:	e002      	b.n	80145fe <icmp_input+0x1e2>
          goto icmperr;
 80145f8:	bf00      	nop
 80145fa:	e000      	b.n	80145fe <icmp_input+0x1e2>
          goto icmperr;
 80145fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7f7 fde0 	bl	800c1c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014604:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014606:	3728      	adds	r7, #40	; 0x28
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	200090a4 	.word	0x200090a4
 8014610:	200090b8 	.word	0x200090b8
 8014614:	0801acd8 	.word	0x0801acd8
 8014618:	0801ad10 	.word	0x0801ad10
 801461c:	0801ad48 	.word	0x0801ad48
 8014620:	0801ad70 	.word	0x0801ad70

08014624 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	460b      	mov	r3, r1
 801462e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014630:	78fb      	ldrb	r3, [r7, #3]
 8014632:	461a      	mov	r2, r3
 8014634:	2103      	movs	r1, #3
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 f814 	bl	8014664 <icmp_send_response>
}
 801463c:	bf00      	nop
 801463e:	3708      	adds	r7, #8
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	460b      	mov	r3, r1
 801464e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014650:	78fb      	ldrb	r3, [r7, #3]
 8014652:	461a      	mov	r2, r3
 8014654:	210b      	movs	r1, #11
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 f804 	bl	8014664 <icmp_send_response>
}
 801465c:	bf00      	nop
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b08c      	sub	sp, #48	; 0x30
 8014668:	af04      	add	r7, sp, #16
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	460b      	mov	r3, r1
 801466e:	70fb      	strb	r3, [r7, #3]
 8014670:	4613      	mov	r3, r2
 8014672:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014674:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014678:	2124      	movs	r1, #36	; 0x24
 801467a:	2022      	movs	r0, #34	; 0x22
 801467c:	f7f7 fabe 	bl	800bbfc <pbuf_alloc>
 8014680:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d04c      	beq.n	8014722 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	895b      	ldrh	r3, [r3, #10]
 801468c:	2b23      	cmp	r3, #35	; 0x23
 801468e:	d806      	bhi.n	801469e <icmp_send_response+0x3a>
 8014690:	4b26      	ldr	r3, [pc, #152]	; (801472c <icmp_send_response+0xc8>)
 8014692:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014696:	4926      	ldr	r1, [pc, #152]	; (8014730 <icmp_send_response+0xcc>)
 8014698:	4826      	ldr	r0, [pc, #152]	; (8014734 <icmp_send_response+0xd0>)
 801469a:	f001 fe45 	bl	8016328 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80146a4:	69fb      	ldr	r3, [r7, #28]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	78fa      	ldrb	r2, [r7, #3]
 80146ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	78ba      	ldrb	r2, [r7, #2]
 80146b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	2200      	movs	r2, #0
 80146ba:	711a      	strb	r2, [r3, #4]
 80146bc:	2200      	movs	r2, #0
 80146be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2200      	movs	r2, #0
 80146c4:	719a      	strb	r2, [r3, #6]
 80146c6:	2200      	movs	r2, #0
 80146c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	f103 0008 	add.w	r0, r3, #8
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	221c      	movs	r2, #28
 80146d8:	4619      	mov	r1, r3
 80146da:	f002 f890 	bl	80167fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80146e4:	f107 030c 	add.w	r3, r7, #12
 80146e8:	4618      	mov	r0, r3
 80146ea:	f000 f825 	bl	8014738 <ip4_route>
 80146ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d011      	beq.n	801471a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2200      	movs	r2, #0
 80146fa:	709a      	strb	r2, [r3, #2]
 80146fc:	2200      	movs	r2, #0
 80146fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014700:	f107 020c 	add.w	r2, r7, #12
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	9302      	str	r3, [sp, #8]
 8014708:	2301      	movs	r3, #1
 801470a:	9301      	str	r3, [sp, #4]
 801470c:	2300      	movs	r3, #0
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	23ff      	movs	r3, #255	; 0xff
 8014712:	2100      	movs	r1, #0
 8014714:	69f8      	ldr	r0, [r7, #28]
 8014716:	f000 f9cd 	bl	8014ab4 <ip4_output_if>
  }
  pbuf_free(q);
 801471a:	69f8      	ldr	r0, [r7, #28]
 801471c:	f7f7 fd52 	bl	800c1c4 <pbuf_free>
 8014720:	e000      	b.n	8014724 <icmp_send_response+0xc0>
    return;
 8014722:	bf00      	nop
}
 8014724:	3720      	adds	r7, #32
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	0801acd8 	.word	0x0801acd8
 8014730:	0801ada4 	.word	0x0801ada4
 8014734:	0801ad48 	.word	0x0801ad48

08014738 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014738:	b480      	push	{r7}
 801473a:	b085      	sub	sp, #20
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014740:	4b33      	ldr	r3, [pc, #204]	; (8014810 <ip4_route+0xd8>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	60fb      	str	r3, [r7, #12]
 8014746:	e036      	b.n	80147b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801474e:	f003 0301 	and.w	r3, r3, #1
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	d02b      	beq.n	80147b0 <ip4_route+0x78>
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801475e:	089b      	lsrs	r3, r3, #2
 8014760:	f003 0301 	and.w	r3, r3, #1
 8014764:	b2db      	uxtb	r3, r3
 8014766:	2b00      	cmp	r3, #0
 8014768:	d022      	beq.n	80147b0 <ip4_route+0x78>
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	3304      	adds	r3, #4
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d01d      	beq.n	80147b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	3304      	adds	r3, #4
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	405a      	eors	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	3308      	adds	r3, #8
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4013      	ands	r3, r2
 8014788:	2b00      	cmp	r3, #0
 801478a:	d101      	bne.n	8014790 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	e038      	b.n	8014802 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014796:	f003 0302 	and.w	r3, r3, #2
 801479a:	2b00      	cmp	r3, #0
 801479c:	d108      	bne.n	80147b0 <ip4_route+0x78>
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	330c      	adds	r3, #12
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d101      	bne.n	80147b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	e028      	b.n	8014802 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	60fb      	str	r3, [r7, #12]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d1c5      	bne.n	8014748 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80147bc:	4b15      	ldr	r3, [pc, #84]	; (8014814 <ip4_route+0xdc>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d01a      	beq.n	80147fa <ip4_route+0xc2>
 80147c4:	4b13      	ldr	r3, [pc, #76]	; (8014814 <ip4_route+0xdc>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147cc:	f003 0301 	and.w	r3, r3, #1
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d012      	beq.n	80147fa <ip4_route+0xc2>
 80147d4:	4b0f      	ldr	r3, [pc, #60]	; (8014814 <ip4_route+0xdc>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147dc:	f003 0304 	and.w	r3, r3, #4
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d00a      	beq.n	80147fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80147e4:	4b0b      	ldr	r3, [pc, #44]	; (8014814 <ip4_route+0xdc>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	3304      	adds	r3, #4
 80147ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d004      	beq.n	80147fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	2b7f      	cmp	r3, #127	; 0x7f
 80147f8:	d101      	bne.n	80147fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e001      	b.n	8014802 <ip4_route+0xca>
  }

  return netif_default;
 80147fe:	4b05      	ldr	r3, [pc, #20]	; (8014814 <ip4_route+0xdc>)
 8014800:	681b      	ldr	r3, [r3, #0]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3714      	adds	r7, #20
 8014806:	46bd      	mov	sp, r7
 8014808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	2000c7ec 	.word	0x2000c7ec
 8014814:	2000c7f0 	.word	0x2000c7f0

08014818 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014826:	f003 0301 	and.w	r3, r3, #1
 801482a:	b2db      	uxtb	r3, r3
 801482c:	2b00      	cmp	r3, #0
 801482e:	d016      	beq.n	801485e <ip4_input_accept+0x46>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	3304      	adds	r3, #4
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d011      	beq.n	801485e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801483a:	4b0b      	ldr	r3, [pc, #44]	; (8014868 <ip4_input_accept+0x50>)
 801483c:	695a      	ldr	r2, [r3, #20]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	3304      	adds	r3, #4
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	429a      	cmp	r2, r3
 8014846:	d008      	beq.n	801485a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014848:	4b07      	ldr	r3, [pc, #28]	; (8014868 <ip4_input_accept+0x50>)
 801484a:	695b      	ldr	r3, [r3, #20]
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	f000 fa08 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8014854:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801485a:	2301      	movs	r3, #1
 801485c:	e000      	b.n	8014860 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801485e:	2300      	movs	r3, #0
}
 8014860:	4618      	mov	r0, r3
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	200090a4 	.word	0x200090a4

0801486c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	091b      	lsrs	r3, r3, #4
 8014882:	b2db      	uxtb	r3, r3
 8014884:	2b04      	cmp	r3, #4
 8014886:	d004      	beq.n	8014892 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7f7 fc9b 	bl	800c1c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801488e:	2300      	movs	r3, #0
 8014890:	e107      	b.n	8014aa2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	f003 030f 	and.w	r3, r3, #15
 801489a:	b2db      	uxtb	r3, r3
 801489c:	009b      	lsls	r3, r3, #2
 801489e:	b2db      	uxtb	r3, r3
 80148a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	885b      	ldrh	r3, [r3, #2]
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f6 f899 	bl	800a9e0 <lwip_htons>
 80148ae:	4603      	mov	r3, r0
 80148b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	891b      	ldrh	r3, [r3, #8]
 80148b6:	89ba      	ldrh	r2, [r7, #12]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d204      	bcs.n	80148c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80148bc:	89bb      	ldrh	r3, [r7, #12]
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7f7 faf9 	bl	800beb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	895b      	ldrh	r3, [r3, #10]
 80148ca:	89fa      	ldrh	r2, [r7, #14]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d807      	bhi.n	80148e0 <ip4_input+0x74>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	891b      	ldrh	r3, [r3, #8]
 80148d4:	89ba      	ldrh	r2, [r7, #12]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d802      	bhi.n	80148e0 <ip4_input+0x74>
 80148da:	89fb      	ldrh	r3, [r7, #14]
 80148dc:	2b13      	cmp	r3, #19
 80148de:	d804      	bhi.n	80148ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7f7 fc6f 	bl	800c1c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80148e6:	2300      	movs	r3, #0
 80148e8:	e0db      	b.n	8014aa2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	691b      	ldr	r3, [r3, #16]
 80148ee:	4a6f      	ldr	r2, [pc, #444]	; (8014aac <ip4_input+0x240>)
 80148f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	4a6d      	ldr	r2, [pc, #436]	; (8014aac <ip4_input+0x240>)
 80148f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80148fa:	4b6c      	ldr	r3, [pc, #432]	; (8014aac <ip4_input+0x240>)
 80148fc:	695b      	ldr	r3, [r3, #20]
 80148fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014902:	2be0      	cmp	r3, #224	; 0xe0
 8014904:	d112      	bne.n	801492c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801490c:	f003 0301 	and.w	r3, r3, #1
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d007      	beq.n	8014926 <ip4_input+0xba>
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	3304      	adds	r3, #4
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d002      	beq.n	8014926 <ip4_input+0xba>
      netif = inp;
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	613b      	str	r3, [r7, #16]
 8014924:	e02a      	b.n	801497c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014926:	2300      	movs	r3, #0
 8014928:	613b      	str	r3, [r7, #16]
 801492a:	e027      	b.n	801497c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801492c:	6838      	ldr	r0, [r7, #0]
 801492e:	f7ff ff73 	bl	8014818 <ip4_input_accept>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <ip4_input+0xd2>
      netif = inp;
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	613b      	str	r3, [r7, #16]
 801493c:	e01e      	b.n	801497c <ip4_input+0x110>
    } else {
      netif = NULL;
 801493e:	2300      	movs	r3, #0
 8014940:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014942:	4b5a      	ldr	r3, [pc, #360]	; (8014aac <ip4_input+0x240>)
 8014944:	695b      	ldr	r3, [r3, #20]
 8014946:	b2db      	uxtb	r3, r3
 8014948:	2b7f      	cmp	r3, #127	; 0x7f
 801494a:	d017      	beq.n	801497c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801494c:	4b58      	ldr	r3, [pc, #352]	; (8014ab0 <ip4_input+0x244>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	613b      	str	r3, [r7, #16]
 8014952:	e00e      	b.n	8014972 <ip4_input+0x106>
          if (netif == inp) {
 8014954:	693a      	ldr	r2, [r7, #16]
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	429a      	cmp	r2, r3
 801495a:	d006      	beq.n	801496a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801495c:	6938      	ldr	r0, [r7, #16]
 801495e:	f7ff ff5b 	bl	8014818 <ip4_input_accept>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d108      	bne.n	801497a <ip4_input+0x10e>
 8014968:	e000      	b.n	801496c <ip4_input+0x100>
            continue;
 801496a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	613b      	str	r3, [r7, #16]
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d1ed      	bne.n	8014954 <ip4_input+0xe8>
 8014978:	e000      	b.n	801497c <ip4_input+0x110>
            break;
 801497a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801497c:	4b4b      	ldr	r3, [pc, #300]	; (8014aac <ip4_input+0x240>)
 801497e:	691b      	ldr	r3, [r3, #16]
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	4618      	mov	r0, r3
 8014984:	f000 f96e 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d105      	bne.n	801499a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801498e:	4b47      	ldr	r3, [pc, #284]	; (8014aac <ip4_input+0x240>)
 8014990:	691b      	ldr	r3, [r3, #16]
 8014992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014996:	2be0      	cmp	r3, #224	; 0xe0
 8014998:	d104      	bne.n	80149a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f7f7 fc12 	bl	800c1c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80149a0:	2300      	movs	r3, #0
 80149a2:	e07e      	b.n	8014aa2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d104      	bne.n	80149b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f7f7 fc0a 	bl	800c1c4 <pbuf_free>
    return ERR_OK;
 80149b0:	2300      	movs	r3, #0
 80149b2:	e076      	b.n	8014aa2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	88db      	ldrh	r3, [r3, #6]
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	461a      	mov	r2, r3
 80149bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80149c0:	4013      	ands	r3, r2
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00b      	beq.n	80149de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 fdbc 	bl	8015544 <ip4_reass>
 80149cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d101      	bne.n	80149d8 <ip4_input+0x16c>
      return ERR_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	e064      	b.n	8014aa2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80149de:	4a33      	ldr	r2, [pc, #204]	; (8014aac <ip4_input+0x240>)
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80149e4:	4a31      	ldr	r2, [pc, #196]	; (8014aac <ip4_input+0x240>)
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80149ea:	4a30      	ldr	r2, [pc, #192]	; (8014aac <ip4_input+0x240>)
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f003 030f 	and.w	r3, r3, #15
 80149f8:	b2db      	uxtb	r3, r3
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	4b2a      	ldr	r3, [pc, #168]	; (8014aac <ip4_input+0x240>)
 8014a02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014a04:	89fb      	ldrh	r3, [r7, #14]
 8014a06:	4619      	mov	r1, r3
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7f7 fb55 	bl	800c0b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	7a5b      	ldrb	r3, [r3, #9]
 8014a12:	2b11      	cmp	r3, #17
 8014a14:	d006      	beq.n	8014a24 <ip4_input+0x1b8>
 8014a16:	2b11      	cmp	r3, #17
 8014a18:	dc13      	bgt.n	8014a42 <ip4_input+0x1d6>
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d00c      	beq.n	8014a38 <ip4_input+0x1cc>
 8014a1e:	2b06      	cmp	r3, #6
 8014a20:	d005      	beq.n	8014a2e <ip4_input+0x1c2>
 8014a22:	e00e      	b.n	8014a42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014a24:	6839      	ldr	r1, [r7, #0]
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7fe f8da 	bl	8012be0 <udp_input>
        break;
 8014a2c:	e026      	b.n	8014a7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014a2e:	6839      	ldr	r1, [r7, #0]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f7f9 fc93 	bl	800e35c <tcp_input>
        break;
 8014a36:	e021      	b.n	8014a7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014a38:	6839      	ldr	r1, [r7, #0]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7ff fcee 	bl	801441c <icmp_input>
        break;
 8014a40:	e01c      	b.n	8014a7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a42:	4b1a      	ldr	r3, [pc, #104]	; (8014aac <ip4_input+0x240>)
 8014a44:	695b      	ldr	r3, [r3, #20]
 8014a46:	6939      	ldr	r1, [r7, #16]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f000 f90b 	bl	8014c64 <ip4_addr_isbroadcast_u32>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d10f      	bne.n	8014a74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a54:	4b15      	ldr	r3, [pc, #84]	; (8014aac <ip4_input+0x240>)
 8014a56:	695b      	ldr	r3, [r3, #20]
 8014a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a5c:	2be0      	cmp	r3, #224	; 0xe0
 8014a5e:	d009      	beq.n	8014a74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a64:	4619      	mov	r1, r3
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7f7 fb99 	bl	800c19e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014a6c:	2102      	movs	r1, #2
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff fdd8 	bl	8014624 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7f7 fba5 	bl	800c1c4 <pbuf_free>
        break;
 8014a7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014a7c:	4b0b      	ldr	r3, [pc, #44]	; (8014aac <ip4_input+0x240>)
 8014a7e:	2200      	movs	r2, #0
 8014a80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014a82:	4b0a      	ldr	r3, [pc, #40]	; (8014aac <ip4_input+0x240>)
 8014a84:	2200      	movs	r2, #0
 8014a86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014a88:	4b08      	ldr	r3, [pc, #32]	; (8014aac <ip4_input+0x240>)
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014a8e:	4b07      	ldr	r3, [pc, #28]	; (8014aac <ip4_input+0x240>)
 8014a90:	2200      	movs	r2, #0
 8014a92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014a94:	4b05      	ldr	r3, [pc, #20]	; (8014aac <ip4_input+0x240>)
 8014a96:	2200      	movs	r2, #0
 8014a98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014a9a:	4b04      	ldr	r3, [pc, #16]	; (8014aac <ip4_input+0x240>)
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014aa0:	2300      	movs	r3, #0
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3718      	adds	r7, #24
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	200090a4 	.word	0x200090a4
 8014ab0:	2000c7ec 	.word	0x2000c7ec

08014ab4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b08a      	sub	sp, #40	; 0x28
 8014ab8:	af04      	add	r7, sp, #16
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d009      	beq.n	8014ae0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d003      	beq.n	8014ada <ip4_output_if+0x26>
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d102      	bne.n	8014ae0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014adc:	3304      	adds	r3, #4
 8014ade:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014ae0:	78fa      	ldrb	r2, [r7, #3]
 8014ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014aea:	9301      	str	r3, [sp, #4]
 8014aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4613      	mov	r3, r2
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	6979      	ldr	r1, [r7, #20]
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f000 f805 	bl	8014b08 <ip4_output_if_src>
 8014afe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b088      	sub	sp, #32
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
 8014b14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	7b9b      	ldrb	r3, [r3, #14]
 8014b1a:	2b01      	cmp	r3, #1
 8014b1c:	d006      	beq.n	8014b2c <ip4_output_if_src+0x24>
 8014b1e:	4b4b      	ldr	r3, [pc, #300]	; (8014c4c <ip4_output_if_src+0x144>)
 8014b20:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014b24:	494a      	ldr	r1, [pc, #296]	; (8014c50 <ip4_output_if_src+0x148>)
 8014b26:	484b      	ldr	r0, [pc, #300]	; (8014c54 <ip4_output_if_src+0x14c>)
 8014b28:	f001 fbfe 	bl	8016328 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d060      	beq.n	8014bf4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014b32:	2314      	movs	r3, #20
 8014b34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014b36:	2114      	movs	r1, #20
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f7f7 faad 	bl	800c098 <pbuf_add_header>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d002      	beq.n	8014b4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b44:	f06f 0301 	mvn.w	r3, #1
 8014b48:	e07c      	b.n	8014c44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	895b      	ldrh	r3, [r3, #10]
 8014b54:	2b13      	cmp	r3, #19
 8014b56:	d806      	bhi.n	8014b66 <ip4_output_if_src+0x5e>
 8014b58:	4b3c      	ldr	r3, [pc, #240]	; (8014c4c <ip4_output_if_src+0x144>)
 8014b5a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014b5e:	493e      	ldr	r1, [pc, #248]	; (8014c58 <ip4_output_if_src+0x150>)
 8014b60:	483c      	ldr	r0, [pc, #240]	; (8014c54 <ip4_output_if_src+0x14c>)
 8014b62:	f001 fbe1 	bl	8016328 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	78fa      	ldrb	r2, [r7, #3]
 8014b6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014b72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	69fb      	ldr	r3, [r7, #28]
 8014b7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014b7c:	8b7b      	ldrh	r3, [r7, #26]
 8014b7e:	089b      	lsrs	r3, r3, #2
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b88:	b2da      	uxtb	r2, r3
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014b94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	891b      	ldrh	r3, [r3, #8]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7f5 ff20 	bl	800a9e0 <lwip_htons>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	2200      	movs	r2, #0
 8014bac:	719a      	strb	r2, [r3, #6]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014bb2:	4b2a      	ldr	r3, [pc, #168]	; (8014c5c <ip4_output_if_src+0x154>)
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7f5 ff12 	bl	800a9e0 <lwip_htons>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014bc4:	4b25      	ldr	r3, [pc, #148]	; (8014c5c <ip4_output_if_src+0x154>)
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	b29a      	uxth	r2, r3
 8014bcc:	4b23      	ldr	r3, [pc, #140]	; (8014c5c <ip4_output_if_src+0x154>)
 8014bce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d104      	bne.n	8014be0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014bd6:	4b22      	ldr	r3, [pc, #136]	; (8014c60 <ip4_output_if_src+0x158>)
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	60da      	str	r2, [r3, #12]
 8014bde:	e003      	b.n	8014be8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	2200      	movs	r2, #0
 8014bec:	729a      	strb	r2, [r3, #10]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	72da      	strb	r2, [r3, #11]
 8014bf2:	e00f      	b.n	8014c14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	895b      	ldrh	r3, [r3, #10]
 8014bf8:	2b13      	cmp	r3, #19
 8014bfa:	d802      	bhi.n	8014c02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014bfc:	f06f 0301 	mvn.w	r3, #1
 8014c00:	e020      	b.n	8014c44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	691b      	ldr	r3, [r3, #16]
 8014c0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014c0e:	f107 0314 	add.w	r3, r7, #20
 8014c12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00c      	beq.n	8014c36 <ip4_output_if_src+0x12e>
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	891a      	ldrh	r2, [r3, #8]
 8014c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d906      	bls.n	8014c36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c2c:	68f8      	ldr	r0, [r7, #12]
 8014c2e:	f000 fe7d 	bl	801592c <ip4_frag>
 8014c32:	4603      	mov	r3, r0
 8014c34:	e006      	b.n	8014c44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	68f9      	ldr	r1, [r7, #12]
 8014c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c40:	4798      	blx	r3
 8014c42:	4603      	mov	r3, r0
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3720      	adds	r7, #32
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	0801add0 	.word	0x0801add0
 8014c50:	0801ae04 	.word	0x0801ae04
 8014c54:	0801ae10 	.word	0x0801ae10
 8014c58:	0801ae38 	.word	0x0801ae38
 8014c5c:	2000c94a 	.word	0x2000c94a
 8014c60:	0801b310 	.word	0x0801b310

08014c64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b085      	sub	sp, #20
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c78:	d002      	beq.n	8014c80 <ip4_addr_isbroadcast_u32+0x1c>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d101      	bne.n	8014c84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014c80:	2301      	movs	r3, #1
 8014c82:	e02a      	b.n	8014cda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c8a:	f003 0302 	and.w	r3, r3, #2
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d101      	bne.n	8014c96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014c92:	2300      	movs	r3, #0
 8014c94:	e021      	b.n	8014cda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	3304      	adds	r3, #4
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d101      	bne.n	8014ca6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	e019      	b.n	8014cda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014ca6:	68fa      	ldr	r2, [r7, #12]
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	3304      	adds	r3, #4
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	405a      	eors	r2, r3
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	3308      	adds	r3, #8
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4013      	ands	r3, r2
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d10d      	bne.n	8014cd8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	43da      	mvns	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	3308      	adds	r3, #8
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d101      	bne.n	8014cd8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	e000      	b.n	8014cda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014cd8:	2300      	movs	r3, #0
  }
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3714      	adds	r7, #20
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr
	...

08014ce8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b08a      	sub	sp, #40	; 0x28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8014cf2:	f107 030c 	add.w	r3, r7, #12
 8014cf6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8014d00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d04:	3301      	adds	r3, #1
 8014d06:	4a89      	ldr	r2, [pc, #548]	; (8014f2c <ip4addr_aton+0x244>)
 8014d08:	4413      	add	r3, r2
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	f003 0304 	and.w	r3, r3, #4
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d101      	bne.n	8014d18 <ip4addr_aton+0x30>
      return 0;
 8014d14:	2300      	movs	r3, #0
 8014d16:	e105      	b.n	8014f24 <ip4addr_aton+0x23c>
    }
    val = 0;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8014d1c:	230a      	movs	r3, #10
 8014d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8014d22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d26:	2b30      	cmp	r3, #48	; 0x30
 8014d28:	d11c      	bne.n	8014d64 <ip4addr_aton+0x7c>
      c = *++cp;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	607b      	str	r3, [r7, #4]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8014d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d3c:	2b78      	cmp	r3, #120	; 0x78
 8014d3e:	d003      	beq.n	8014d48 <ip4addr_aton+0x60>
 8014d40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d44:	2b58      	cmp	r3, #88	; 0x58
 8014d46:	d10a      	bne.n	8014d5e <ip4addr_aton+0x76>
        base = 16;
 8014d48:	2310      	movs	r3, #16
 8014d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	3301      	adds	r3, #1
 8014d52:	607b      	str	r3, [r7, #4]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014d5c:	e002      	b.n	8014d64 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8014d5e:	2308      	movs	r3, #8
 8014d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8014d64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d68:	3301      	adds	r3, #1
 8014d6a:	4a70      	ldr	r2, [pc, #448]	; (8014f2c <ip4addr_aton+0x244>)
 8014d6c:	4413      	add	r3, r2
 8014d6e:	781b      	ldrb	r3, [r3, #0]
 8014d70:	f003 0304 	and.w	r3, r3, #4
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d011      	beq.n	8014d9c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8014d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d7e:	fb03 f202 	mul.w	r2, r3, r2
 8014d82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d86:	4413      	add	r3, r2
 8014d88:	3b30      	subs	r3, #48	; 0x30
 8014d8a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	3301      	adds	r3, #1
 8014d90:	607b      	str	r3, [r7, #4]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014d9a:	e7e3      	b.n	8014d64 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8014d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014da0:	2b10      	cmp	r3, #16
 8014da2:	d127      	bne.n	8014df4 <ip4addr_aton+0x10c>
 8014da4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014da8:	3301      	adds	r3, #1
 8014daa:	4a60      	ldr	r2, [pc, #384]	; (8014f2c <ip4addr_aton+0x244>)
 8014dac:	4413      	add	r3, r2
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d01d      	beq.n	8014df4 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8014db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dba:	011b      	lsls	r3, r3, #4
 8014dbc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014dc0:	f102 010a 	add.w	r1, r2, #10
 8014dc4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014dc8:	3201      	adds	r2, #1
 8014dca:	4858      	ldr	r0, [pc, #352]	; (8014f2c <ip4addr_aton+0x244>)
 8014dcc:	4402      	add	r2, r0
 8014dce:	7812      	ldrb	r2, [r2, #0]
 8014dd0:	f002 0203 	and.w	r2, r2, #3
 8014dd4:	2a02      	cmp	r2, #2
 8014dd6:	d101      	bne.n	8014ddc <ip4addr_aton+0xf4>
 8014dd8:	2261      	movs	r2, #97	; 0x61
 8014dda:	e000      	b.n	8014dde <ip4addr_aton+0xf6>
 8014ddc:	2241      	movs	r2, #65	; 0x41
 8014dde:	1a8a      	subs	r2, r1, r2
 8014de0:	4313      	orrs	r3, r2
 8014de2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	3301      	adds	r3, #1
 8014de8:	607b      	str	r3, [r7, #4]
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8014df2:	e7b7      	b.n	8014d64 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8014df4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014df8:	2b2e      	cmp	r3, #46	; 0x2e
 8014dfa:	d114      	bne.n	8014e26 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8014dfc:	f107 030c 	add.w	r3, r7, #12
 8014e00:	330c      	adds	r3, #12
 8014e02:	69fa      	ldr	r2, [r7, #28]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d301      	bcc.n	8014e0c <ip4addr_aton+0x124>
        return 0;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	e08b      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	1d1a      	adds	r2, r3, #4
 8014e10:	61fa      	str	r2, [r7, #28]
 8014e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e14:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	607b      	str	r3, [r7, #4]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8014e24:	e76c      	b.n	8014d00 <ip4addr_aton+0x18>
    } else {
      break;
 8014e26:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8014e28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d00b      	beq.n	8014e48 <ip4addr_aton+0x160>
 8014e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014e34:	3301      	adds	r3, #1
 8014e36:	4a3d      	ldr	r2, [pc, #244]	; (8014f2c <ip4addr_aton+0x244>)
 8014e38:	4413      	add	r3, r2
 8014e3a:	781b      	ldrb	r3, [r3, #0]
 8014e3c:	f003 0308 	and.w	r3, r3, #8
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d101      	bne.n	8014e48 <ip4addr_aton+0x160>
    return 0;
 8014e44:	2300      	movs	r3, #0
 8014e46:	e06d      	b.n	8014f24 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8014e48:	f107 030c 	add.w	r3, r7, #12
 8014e4c:	69fa      	ldr	r2, [r7, #28]
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	109b      	asrs	r3, r3, #2
 8014e52:	3301      	adds	r3, #1
 8014e54:	2b04      	cmp	r3, #4
 8014e56:	d853      	bhi.n	8014f00 <ip4addr_aton+0x218>
 8014e58:	a201      	add	r2, pc, #4	; (adr r2, 8014e60 <ip4addr_aton+0x178>)
 8014e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e5e:	bf00      	nop
 8014e60:	08014e75 	.word	0x08014e75
 8014e64:	08014f0f 	.word	0x08014f0f
 8014e68:	08014e79 	.word	0x08014e79
 8014e6c:	08014e9b 	.word	0x08014e9b
 8014e70:	08014ec9 	.word	0x08014ec9

    case 0:
      return 0;       /* initial nondigit */
 8014e74:	2300      	movs	r3, #0
 8014e76:	e055      	b.n	8014f24 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8014e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014e7e:	d301      	bcc.n	8014e84 <ip4addr_aton+0x19c>
        return 0;
 8014e80:	2300      	movs	r3, #0
 8014e82:	e04f      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2bff      	cmp	r3, #255	; 0xff
 8014e88:	d901      	bls.n	8014e8e <ip4addr_aton+0x1a6>
        return 0;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	e04a      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	061b      	lsls	r3, r3, #24
 8014e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e94:	4313      	orrs	r3, r2
 8014e96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014e98:	e03a      	b.n	8014f10 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ea0:	d301      	bcc.n	8014ea6 <ip4addr_aton+0x1be>
        return 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e03e      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	2bff      	cmp	r3, #255	; 0xff
 8014eaa:	d802      	bhi.n	8014eb2 <ip4addr_aton+0x1ca>
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	2bff      	cmp	r3, #255	; 0xff
 8014eb0:	d901      	bls.n	8014eb6 <ip4addr_aton+0x1ce>
        return 0;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e036      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	061a      	lsls	r2, r3, #24
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	041b      	lsls	r3, r3, #16
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ec2:	4313      	orrs	r3, r2
 8014ec4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014ec6:	e023      	b.n	8014f10 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8014ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eca:	2bff      	cmp	r3, #255	; 0xff
 8014ecc:	d901      	bls.n	8014ed2 <ip4addr_aton+0x1ea>
        return 0;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e028      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2bff      	cmp	r3, #255	; 0xff
 8014ed6:	d805      	bhi.n	8014ee4 <ip4addr_aton+0x1fc>
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	2bff      	cmp	r3, #255	; 0xff
 8014edc:	d802      	bhi.n	8014ee4 <ip4addr_aton+0x1fc>
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	2bff      	cmp	r3, #255	; 0xff
 8014ee2:	d901      	bls.n	8014ee8 <ip4addr_aton+0x200>
        return 0;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	e01d      	b.n	8014f24 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	061a      	lsls	r2, r3, #24
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	041b      	lsls	r3, r3, #16
 8014ef0:	431a      	orrs	r2, r3
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	021b      	lsls	r3, r3, #8
 8014ef6:	4313      	orrs	r3, r2
 8014ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014efa:	4313      	orrs	r3, r2
 8014efc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014efe:	e007      	b.n	8014f10 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8014f00:	4b0b      	ldr	r3, [pc, #44]	; (8014f30 <ip4addr_aton+0x248>)
 8014f02:	22f9      	movs	r2, #249	; 0xf9
 8014f04:	490b      	ldr	r1, [pc, #44]	; (8014f34 <ip4addr_aton+0x24c>)
 8014f06:	480c      	ldr	r0, [pc, #48]	; (8014f38 <ip4addr_aton+0x250>)
 8014f08:	f001 fa0e 	bl	8016328 <iprintf>
      break;
 8014f0c:	e000      	b.n	8014f10 <ip4addr_aton+0x228>
      break;
 8014f0e:	bf00      	nop
  }
  if (addr) {
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d005      	beq.n	8014f22 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8014f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f18:	f7f5 fd77 	bl	800aa0a <lwip_htonl>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8014f22:	2301      	movs	r3, #1
}
 8014f24:	4618      	mov	r0, r3
 8014f26:	3728      	adds	r7, #40	; 0x28
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	0801b39b 	.word	0x0801b39b
 8014f30:	0801ae68 	.word	0x0801ae68
 8014f34:	0801aea4 	.word	0x0801aea4
 8014f38:	0801aeb0 	.word	0x0801aeb0

08014f3c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014f42:	2300      	movs	r3, #0
 8014f44:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014f46:	4b12      	ldr	r3, [pc, #72]	; (8014f90 <ip_reass_tmr+0x54>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014f4c:	e018      	b.n	8014f80 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	7fdb      	ldrb	r3, [r3, #31]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d00b      	beq.n	8014f6e <ip_reass_tmr+0x32>
      r->timer--;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	7fdb      	ldrb	r3, [r3, #31]
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	b2da      	uxtb	r2, r3
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	60fb      	str	r3, [r7, #12]
 8014f6c:	e008      	b.n	8014f80 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014f78:	68b9      	ldr	r1, [r7, #8]
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f000 f80a 	bl	8014f94 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1e3      	bne.n	8014f4e <ip_reass_tmr+0x12>
    }
  }
}
 8014f86:	bf00      	nop
 8014f88:	bf00      	nop
 8014f8a:	3710      	adds	r7, #16
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	2000c94c 	.word	0x2000c94c

08014f94 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b088      	sub	sp, #32
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014fa2:	683a      	ldr	r2, [r7, #0]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d105      	bne.n	8014fb6 <ip_reass_free_complete_datagram+0x22>
 8014faa:	4b45      	ldr	r3, [pc, #276]	; (80150c0 <ip_reass_free_complete_datagram+0x12c>)
 8014fac:	22ab      	movs	r2, #171	; 0xab
 8014fae:	4945      	ldr	r1, [pc, #276]	; (80150c4 <ip_reass_free_complete_datagram+0x130>)
 8014fb0:	4845      	ldr	r0, [pc, #276]	; (80150c8 <ip_reass_free_complete_datagram+0x134>)
 8014fb2:	f001 f9b9 	bl	8016328 <iprintf>
  if (prev != NULL) {
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00a      	beq.n	8014fd2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d005      	beq.n	8014fd2 <ip_reass_free_complete_datagram+0x3e>
 8014fc6:	4b3e      	ldr	r3, [pc, #248]	; (80150c0 <ip_reass_free_complete_datagram+0x12c>)
 8014fc8:	22ad      	movs	r2, #173	; 0xad
 8014fca:	4940      	ldr	r1, [pc, #256]	; (80150cc <ip_reass_free_complete_datagram+0x138>)
 8014fcc:	483e      	ldr	r0, [pc, #248]	; (80150c8 <ip_reass_free_complete_datagram+0x134>)
 8014fce:	f001 f9ab 	bl	8016328 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	889b      	ldrh	r3, [r3, #4]
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d12a      	bne.n	801503a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	6858      	ldr	r0, [r3, #4]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	3308      	adds	r3, #8
 8014ffa:	2214      	movs	r2, #20
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	f001 fbfe 	bl	80167fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015002:	2101      	movs	r1, #1
 8015004:	69b8      	ldr	r0, [r7, #24]
 8015006:	f7ff fb1d 	bl	8014644 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801500a:	69b8      	ldr	r0, [r7, #24]
 801500c:	f7f7 f968 	bl	800c2e0 <pbuf_clen>
 8015010:	4603      	mov	r3, r0
 8015012:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015014:	8bfa      	ldrh	r2, [r7, #30]
 8015016:	8a7b      	ldrh	r3, [r7, #18]
 8015018:	4413      	add	r3, r2
 801501a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801501e:	db05      	blt.n	801502c <ip_reass_free_complete_datagram+0x98>
 8015020:	4b27      	ldr	r3, [pc, #156]	; (80150c0 <ip_reass_free_complete_datagram+0x12c>)
 8015022:	22bc      	movs	r2, #188	; 0xbc
 8015024:	492a      	ldr	r1, [pc, #168]	; (80150d0 <ip_reass_free_complete_datagram+0x13c>)
 8015026:	4828      	ldr	r0, [pc, #160]	; (80150c8 <ip_reass_free_complete_datagram+0x134>)
 8015028:	f001 f97e 	bl	8016328 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801502c:	8bfa      	ldrh	r2, [r7, #30]
 801502e:	8a7b      	ldrh	r3, [r7, #18]
 8015030:	4413      	add	r3, r2
 8015032:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015034:	69b8      	ldr	r0, [r7, #24]
 8015036:	f7f7 f8c5 	bl	800c1c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015040:	e01f      	b.n	8015082 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f7f7 f944 	bl	800c2e0 <pbuf_clen>
 8015058:	4603      	mov	r3, r0
 801505a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801505c:	8bfa      	ldrh	r2, [r7, #30]
 801505e:	8a7b      	ldrh	r3, [r7, #18]
 8015060:	4413      	add	r3, r2
 8015062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015066:	db05      	blt.n	8015074 <ip_reass_free_complete_datagram+0xe0>
 8015068:	4b15      	ldr	r3, [pc, #84]	; (80150c0 <ip_reass_free_complete_datagram+0x12c>)
 801506a:	22cc      	movs	r2, #204	; 0xcc
 801506c:	4918      	ldr	r1, [pc, #96]	; (80150d0 <ip_reass_free_complete_datagram+0x13c>)
 801506e:	4816      	ldr	r0, [pc, #88]	; (80150c8 <ip_reass_free_complete_datagram+0x134>)
 8015070:	f001 f95a 	bl	8016328 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015074:	8bfa      	ldrh	r2, [r7, #30]
 8015076:	8a7b      	ldrh	r3, [r7, #18]
 8015078:	4413      	add	r3, r2
 801507a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f7f7 f8a1 	bl	800c1c4 <pbuf_free>
  while (p != NULL) {
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d1dc      	bne.n	8015042 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015088:	6839      	ldr	r1, [r7, #0]
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f000 f8c2 	bl	8015214 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015090:	4b10      	ldr	r3, [pc, #64]	; (80150d4 <ip_reass_free_complete_datagram+0x140>)
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	8bfa      	ldrh	r2, [r7, #30]
 8015096:	429a      	cmp	r2, r3
 8015098:	d905      	bls.n	80150a6 <ip_reass_free_complete_datagram+0x112>
 801509a:	4b09      	ldr	r3, [pc, #36]	; (80150c0 <ip_reass_free_complete_datagram+0x12c>)
 801509c:	22d2      	movs	r2, #210	; 0xd2
 801509e:	490e      	ldr	r1, [pc, #56]	; (80150d8 <ip_reass_free_complete_datagram+0x144>)
 80150a0:	4809      	ldr	r0, [pc, #36]	; (80150c8 <ip_reass_free_complete_datagram+0x134>)
 80150a2:	f001 f941 	bl	8016328 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80150a6:	4b0b      	ldr	r3, [pc, #44]	; (80150d4 <ip_reass_free_complete_datagram+0x140>)
 80150a8:	881a      	ldrh	r2, [r3, #0]
 80150aa:	8bfb      	ldrh	r3, [r7, #30]
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	4b08      	ldr	r3, [pc, #32]	; (80150d4 <ip_reass_free_complete_datagram+0x140>)
 80150b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80150b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3720      	adds	r7, #32
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	0801aed8 	.word	0x0801aed8
 80150c4:	0801af14 	.word	0x0801af14
 80150c8:	0801af20 	.word	0x0801af20
 80150cc:	0801af48 	.word	0x0801af48
 80150d0:	0801af5c 	.word	0x0801af5c
 80150d4:	2000c950 	.word	0x2000c950
 80150d8:	0801af7c 	.word	0x0801af7c

080150dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b08a      	sub	sp, #40	; 0x28
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80150e6:	2300      	movs	r3, #0
 80150e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80150ea:	2300      	movs	r3, #0
 80150ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80150ee:	2300      	movs	r3, #0
 80150f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80150f2:	2300      	movs	r3, #0
 80150f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80150f6:	2300      	movs	r3, #0
 80150f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80150fa:	4b28      	ldr	r3, [pc, #160]	; (801519c <ip_reass_remove_oldest_datagram+0xc0>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015100:	e030      	b.n	8015164 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015104:	695a      	ldr	r2, [r3, #20]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	68db      	ldr	r3, [r3, #12]
 801510a:	429a      	cmp	r2, r3
 801510c:	d10c      	bne.n	8015128 <ip_reass_remove_oldest_datagram+0x4c>
 801510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015110:	699a      	ldr	r2, [r3, #24]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	691b      	ldr	r3, [r3, #16]
 8015116:	429a      	cmp	r2, r3
 8015118:	d106      	bne.n	8015128 <ip_reass_remove_oldest_datagram+0x4c>
 801511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511c:	899a      	ldrh	r2, [r3, #12]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	889b      	ldrh	r3, [r3, #4]
 8015122:	b29b      	uxth	r3, r3
 8015124:	429a      	cmp	r2, r3
 8015126:	d014      	beq.n	8015152 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	3301      	adds	r3, #1
 801512c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801512e:	6a3b      	ldr	r3, [r7, #32]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d104      	bne.n	801513e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015136:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	61bb      	str	r3, [r7, #24]
 801513c:	e009      	b.n	8015152 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015140:	7fda      	ldrb	r2, [r3, #31]
 8015142:	6a3b      	ldr	r3, [r7, #32]
 8015144:	7fdb      	ldrb	r3, [r3, #31]
 8015146:	429a      	cmp	r2, r3
 8015148:	d803      	bhi.n	8015152 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801514e:	69fb      	ldr	r3, [r7, #28]
 8015150:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d001      	beq.n	801515e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1cb      	bne.n	8015102 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801516a:	6a3b      	ldr	r3, [r7, #32]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d008      	beq.n	8015182 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015170:	69b9      	ldr	r1, [r7, #24]
 8015172:	6a38      	ldr	r0, [r7, #32]
 8015174:	f7ff ff0e 	bl	8014f94 <ip_reass_free_complete_datagram>
 8015178:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801517a:	697a      	ldr	r2, [r7, #20]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	4413      	add	r3, r2
 8015180:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015182:	697a      	ldr	r2, [r7, #20]
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	429a      	cmp	r2, r3
 8015188:	da02      	bge.n	8015190 <ip_reass_remove_oldest_datagram+0xb4>
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	2b01      	cmp	r3, #1
 801518e:	dcac      	bgt.n	80150ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015190:	697b      	ldr	r3, [r7, #20]
}
 8015192:	4618      	mov	r0, r3
 8015194:	3728      	adds	r7, #40	; 0x28
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	2000c94c 	.word	0x2000c94c

080151a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b084      	sub	sp, #16
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80151aa:	2004      	movs	r0, #4
 80151ac:	f7f6 f8f0 	bl	800b390 <memp_malloc>
 80151b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d110      	bne.n	80151da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7ff ff8e 	bl	80150dc <ip_reass_remove_oldest_datagram>
 80151c0:	4602      	mov	r2, r0
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	4293      	cmp	r3, r2
 80151c6:	dc03      	bgt.n	80151d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80151c8:	2004      	movs	r0, #4
 80151ca:	f7f6 f8e1 	bl	800b390 <memp_malloc>
 80151ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d101      	bne.n	80151da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80151d6:	2300      	movs	r3, #0
 80151d8:	e016      	b.n	8015208 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80151da:	2220      	movs	r2, #32
 80151dc:	2100      	movs	r1, #0
 80151de:	68f8      	ldr	r0, [r7, #12]
 80151e0:	f001 fa32 	bl	8016648 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	220f      	movs	r2, #15
 80151e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80151ea:	4b09      	ldr	r3, [pc, #36]	; (8015210 <ip_reass_enqueue_new_datagram+0x70>)
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80151f2:	4a07      	ldr	r2, [pc, #28]	; (8015210 <ip_reass_enqueue_new_datagram+0x70>)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3308      	adds	r3, #8
 80151fc:	2214      	movs	r2, #20
 80151fe:	6879      	ldr	r1, [r7, #4]
 8015200:	4618      	mov	r0, r3
 8015202:	f001 fafc 	bl	80167fe <memcpy>
  return ipr;
 8015206:	68fb      	ldr	r3, [r7, #12]
}
 8015208:	4618      	mov	r0, r3
 801520a:	3710      	adds	r7, #16
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}
 8015210:	2000c94c 	.word	0x2000c94c

08015214 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801521e:	4b10      	ldr	r3, [pc, #64]	; (8015260 <ip_reass_dequeue_datagram+0x4c>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	429a      	cmp	r2, r3
 8015226:	d104      	bne.n	8015232 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	4a0c      	ldr	r2, [pc, #48]	; (8015260 <ip_reass_dequeue_datagram+0x4c>)
 801522e:	6013      	str	r3, [r2, #0]
 8015230:	e00d      	b.n	801524e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d106      	bne.n	8015246 <ip_reass_dequeue_datagram+0x32>
 8015238:	4b0a      	ldr	r3, [pc, #40]	; (8015264 <ip_reass_dequeue_datagram+0x50>)
 801523a:	f240 1245 	movw	r2, #325	; 0x145
 801523e:	490a      	ldr	r1, [pc, #40]	; (8015268 <ip_reass_dequeue_datagram+0x54>)
 8015240:	480a      	ldr	r0, [pc, #40]	; (801526c <ip_reass_dequeue_datagram+0x58>)
 8015242:	f001 f871 	bl	8016328 <iprintf>
    prev->next = ipr->next;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801524e:	6879      	ldr	r1, [r7, #4]
 8015250:	2004      	movs	r0, #4
 8015252:	f7f6 f913 	bl	800b47c <memp_free>
}
 8015256:	bf00      	nop
 8015258:	3708      	adds	r7, #8
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	2000c94c 	.word	0x2000c94c
 8015264:	0801aed8 	.word	0x0801aed8
 8015268:	0801afa0 	.word	0x0801afa0
 801526c:	0801af20 	.word	0x0801af20

08015270 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b08c      	sub	sp, #48	; 0x30
 8015274:	af00      	add	r7, sp, #0
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801527c:	2300      	movs	r3, #0
 801527e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015280:	2301      	movs	r3, #1
 8015282:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801528a:	69fb      	ldr	r3, [r7, #28]
 801528c:	885b      	ldrh	r3, [r3, #2]
 801528e:	b29b      	uxth	r3, r3
 8015290:	4618      	mov	r0, r3
 8015292:	f7f5 fba5 	bl	800a9e0 <lwip_htons>
 8015296:	4603      	mov	r3, r0
 8015298:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	781b      	ldrb	r3, [r3, #0]
 801529e:	f003 030f 	and.w	r3, r3, #15
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	009b      	lsls	r3, r3, #2
 80152a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80152a8:	7e7b      	ldrb	r3, [r7, #25]
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	8b7a      	ldrh	r2, [r7, #26]
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d202      	bcs.n	80152b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152b2:	f04f 33ff 	mov.w	r3, #4294967295
 80152b6:	e135      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80152b8:	7e7b      	ldrb	r3, [r7, #25]
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	8b7a      	ldrh	r2, [r7, #26]
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	88db      	ldrh	r3, [r3, #6]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7f5 fb89 	bl	800a9e0 <lwip_htons>
 80152ce:	4603      	mov	r3, r0
 80152d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80152e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e2:	2200      	movs	r2, #0
 80152e4:	701a      	strb	r2, [r3, #0]
 80152e6:	2200      	movs	r2, #0
 80152e8:	705a      	strb	r2, [r3, #1]
 80152ea:	2200      	movs	r2, #0
 80152ec:	709a      	strb	r2, [r3, #2]
 80152ee:	2200      	movs	r2, #0
 80152f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80152f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f4:	8afa      	ldrh	r2, [r7, #22]
 80152f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80152f8:	8afa      	ldrh	r2, [r7, #22]
 80152fa:	8b7b      	ldrh	r3, [r7, #26]
 80152fc:	4413      	add	r3, r2
 80152fe:	b29a      	uxth	r2, r3
 8015300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015302:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015306:	88db      	ldrh	r3, [r3, #6]
 8015308:	b29b      	uxth	r3, r3
 801530a:	8afa      	ldrh	r2, [r7, #22]
 801530c:	429a      	cmp	r2, r3
 801530e:	d902      	bls.n	8015316 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015310:	f04f 33ff 	mov.w	r3, #4294967295
 8015314:	e106      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	627b      	str	r3, [r7, #36]	; 0x24
 801531c:	e068      	b.n	80153f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015326:	889b      	ldrh	r3, [r3, #4]
 8015328:	b29a      	uxth	r2, r3
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	889b      	ldrh	r3, [r3, #4]
 801532e:	b29b      	uxth	r3, r3
 8015330:	429a      	cmp	r2, r3
 8015332:	d235      	bcs.n	80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015338:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533c:	2b00      	cmp	r3, #0
 801533e:	d020      	beq.n	8015382 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015342:	889b      	ldrh	r3, [r3, #4]
 8015344:	b29a      	uxth	r2, r3
 8015346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015348:	88db      	ldrh	r3, [r3, #6]
 801534a:	b29b      	uxth	r3, r3
 801534c:	429a      	cmp	r2, r3
 801534e:	d307      	bcc.n	8015360 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015352:	88db      	ldrh	r3, [r3, #6]
 8015354:	b29a      	uxth	r2, r3
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	889b      	ldrh	r3, [r3, #4]
 801535a:	b29b      	uxth	r3, r3
 801535c:	429a      	cmp	r2, r3
 801535e:	d902      	bls.n	8015366 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015360:	f04f 33ff 	mov.w	r3, #4294967295
 8015364:	e0de      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536e:	88db      	ldrh	r3, [r3, #6]
 8015370:	b29a      	uxth	r2, r3
 8015372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015374:	889b      	ldrh	r3, [r3, #4]
 8015376:	b29b      	uxth	r3, r3
 8015378:	429a      	cmp	r2, r3
 801537a:	d03d      	beq.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801537c:	2300      	movs	r3, #0
 801537e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015380:	e03a      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015384:	88db      	ldrh	r3, [r3, #6]
 8015386:	b29a      	uxth	r2, r3
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	889b      	ldrh	r3, [r3, #4]
 801538c:	b29b      	uxth	r3, r3
 801538e:	429a      	cmp	r2, r3
 8015390:	d902      	bls.n	8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015392:	f04f 33ff 	mov.w	r3, #4294967295
 8015396:	e0c5      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	605a      	str	r2, [r3, #4]
      break;
 801539e:	e02b      	b.n	80153f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80153a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a2:	889b      	ldrh	r3, [r3, #4]
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	889b      	ldrh	r3, [r3, #4]
 80153aa:	b29b      	uxth	r3, r3
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d102      	bne.n	80153b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80153b0:	f04f 33ff 	mov.w	r3, #4294967295
 80153b4:	e0b6      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80153b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b8:	889b      	ldrh	r3, [r3, #4]
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	88db      	ldrh	r3, [r3, #6]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d202      	bcs.n	80153cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80153c6:	f04f 33ff 	mov.w	r3, #4294967295
 80153ca:	e0ab      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80153cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d009      	beq.n	80153e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80153d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d4:	88db      	ldrh	r3, [r3, #6]
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	889b      	ldrh	r3, [r3, #4]
 80153dc:	b29b      	uxth	r3, r3
 80153de:	429a      	cmp	r2, r3
 80153e0:	d001      	beq.n	80153e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d193      	bne.n	801531e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80153f6:	e000      	b.n	80153fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80153f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80153fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d12d      	bne.n	801545c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015402:	2b00      	cmp	r3, #0
 8015404:	d01c      	beq.n	8015440 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015408:	88db      	ldrh	r3, [r3, #6]
 801540a:	b29a      	uxth	r2, r3
 801540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540e:	889b      	ldrh	r3, [r3, #4]
 8015410:	b29b      	uxth	r3, r3
 8015412:	429a      	cmp	r2, r3
 8015414:	d906      	bls.n	8015424 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015416:	4b45      	ldr	r3, [pc, #276]	; (801552c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015418:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801541c:	4944      	ldr	r1, [pc, #272]	; (8015530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801541e:	4845      	ldr	r0, [pc, #276]	; (8015534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015420:	f000 ff82 	bl	8016328 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015426:	68ba      	ldr	r2, [r7, #8]
 8015428:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801542c:	88db      	ldrh	r3, [r3, #6]
 801542e:	b29a      	uxth	r2, r3
 8015430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015432:	889b      	ldrh	r3, [r3, #4]
 8015434:	b29b      	uxth	r3, r3
 8015436:	429a      	cmp	r2, r3
 8015438:	d010      	beq.n	801545c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801543a:	2300      	movs	r3, #0
 801543c:	623b      	str	r3, [r7, #32]
 801543e:	e00d      	b.n	801545c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d006      	beq.n	8015456 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015448:	4b38      	ldr	r3, [pc, #224]	; (801552c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801544a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801544e:	493a      	ldr	r1, [pc, #232]	; (8015538 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015450:	4838      	ldr	r0, [pc, #224]	; (8015534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015452:	f000 ff69 	bl	8016328 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d105      	bne.n	801546e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	7f9b      	ldrb	r3, [r3, #30]
 8015466:	f003 0301 	and.w	r3, r3, #1
 801546a:	2b00      	cmp	r3, #0
 801546c:	d059      	beq.n	8015522 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801546e:	6a3b      	ldr	r3, [r7, #32]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d04f      	beq.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d006      	beq.n	801548a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	889b      	ldrh	r3, [r3, #4]
 8015484:	b29b      	uxth	r3, r3
 8015486:	2b00      	cmp	r3, #0
 8015488:	d002      	beq.n	8015490 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801548a:	2300      	movs	r3, #0
 801548c:	623b      	str	r3, [r7, #32]
 801548e:	e041      	b.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015492:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801549a:	e012      	b.n	80154c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80154a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a4:	88db      	ldrh	r3, [r3, #6]
 80154a6:	b29a      	uxth	r2, r3
 80154a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154aa:	889b      	ldrh	r3, [r3, #4]
 80154ac:	b29b      	uxth	r3, r3
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d002      	beq.n	80154b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80154b2:	2300      	movs	r3, #0
 80154b4:	623b      	str	r3, [r7, #32]
            break;
 80154b6:	e007      	b.n	80154c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80154b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80154bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d1e9      	bne.n	801549c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80154c8:	6a3b      	ldr	r3, [r7, #32]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d022      	beq.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d106      	bne.n	80154e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80154d6:	4b15      	ldr	r3, [pc, #84]	; (801552c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154d8:	f240 12df 	movw	r2, #479	; 0x1df
 80154dc:	4917      	ldr	r1, [pc, #92]	; (801553c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80154de:	4815      	ldr	r0, [pc, #84]	; (8015534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154e0:	f000 ff22 	bl	8016328 <iprintf>
          LWIP_ASSERT("sanity check",
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d106      	bne.n	80154fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80154f0:	4b0e      	ldr	r3, [pc, #56]	; (801552c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80154f6:	4911      	ldr	r1, [pc, #68]	; (801553c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80154f8:	480e      	ldr	r0, [pc, #56]	; (8015534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154fa:	f000 ff15 	bl	8016328 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80154fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d006      	beq.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015506:	4b09      	ldr	r3, [pc, #36]	; (801552c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015508:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801550c:	490c      	ldr	r1, [pc, #48]	; (8015540 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801550e:	4809      	ldr	r0, [pc, #36]	; (8015534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015510:	f000 ff0a 	bl	8016328 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015514:	6a3b      	ldr	r3, [r7, #32]
 8015516:	2b00      	cmp	r3, #0
 8015518:	bf14      	ite	ne
 801551a:	2301      	movne	r3, #1
 801551c:	2300      	moveq	r3, #0
 801551e:	b2db      	uxtb	r3, r3
 8015520:	e000      	b.n	8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3730      	adds	r7, #48	; 0x30
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	0801aed8 	.word	0x0801aed8
 8015530:	0801afbc 	.word	0x0801afbc
 8015534:	0801af20 	.word	0x0801af20
 8015538:	0801afdc 	.word	0x0801afdc
 801553c:	0801b014 	.word	0x0801b014
 8015540:	0801b024 	.word	0x0801b024

08015544 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b08e      	sub	sp, #56	; 0x38
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	f003 030f 	and.w	r3, r3, #15
 801555a:	b2db      	uxtb	r3, r3
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	b2db      	uxtb	r3, r3
 8015560:	2b14      	cmp	r3, #20
 8015562:	f040 8171 	bne.w	8015848 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015568:	88db      	ldrh	r3, [r3, #6]
 801556a:	b29b      	uxth	r3, r3
 801556c:	4618      	mov	r0, r3
 801556e:	f7f5 fa37 	bl	800a9e0 <lwip_htons>
 8015572:	4603      	mov	r3, r0
 8015574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015578:	b29b      	uxth	r3, r3
 801557a:	00db      	lsls	r3, r3, #3
 801557c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015580:	885b      	ldrh	r3, [r3, #2]
 8015582:	b29b      	uxth	r3, r3
 8015584:	4618      	mov	r0, r3
 8015586:	f7f5 fa2b 	bl	800a9e0 <lwip_htons>
 801558a:	4603      	mov	r3, r0
 801558c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	f003 030f 	and.w	r3, r3, #15
 8015596:	b2db      	uxtb	r3, r3
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801559e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80155a6:	429a      	cmp	r2, r3
 80155a8:	f0c0 8150 	bcc.w	801584c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80155ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7f6 fe91 	bl	800c2e0 <pbuf_clen>
 80155be:	4603      	mov	r3, r0
 80155c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80155c2:	4b8c      	ldr	r3, [pc, #560]	; (80157f4 <ip4_reass+0x2b0>)
 80155c4:	881b      	ldrh	r3, [r3, #0]
 80155c6:	461a      	mov	r2, r3
 80155c8:	8c3b      	ldrh	r3, [r7, #32]
 80155ca:	4413      	add	r3, r2
 80155cc:	2b0a      	cmp	r3, #10
 80155ce:	dd10      	ble.n	80155f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80155d0:	8c3b      	ldrh	r3, [r7, #32]
 80155d2:	4619      	mov	r1, r3
 80155d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155d6:	f7ff fd81 	bl	80150dc <ip_reass_remove_oldest_datagram>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f000 8137 	beq.w	8015850 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80155e2:	4b84      	ldr	r3, [pc, #528]	; (80157f4 <ip4_reass+0x2b0>)
 80155e4:	881b      	ldrh	r3, [r3, #0]
 80155e6:	461a      	mov	r2, r3
 80155e8:	8c3b      	ldrh	r3, [r7, #32]
 80155ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80155ec:	2b0a      	cmp	r3, #10
 80155ee:	f300 812f 	bgt.w	8015850 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80155f2:	4b81      	ldr	r3, [pc, #516]	; (80157f8 <ip4_reass+0x2b4>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	633b      	str	r3, [r7, #48]	; 0x30
 80155f8:	e015      	b.n	8015626 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80155fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fc:	695a      	ldr	r2, [r3, #20]
 80155fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	429a      	cmp	r2, r3
 8015604:	d10c      	bne.n	8015620 <ip4_reass+0xdc>
 8015606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015608:	699a      	ldr	r2, [r3, #24]
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560c:	691b      	ldr	r3, [r3, #16]
 801560e:	429a      	cmp	r2, r3
 8015610:	d106      	bne.n	8015620 <ip4_reass+0xdc>
 8015612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015614:	899a      	ldrh	r2, [r3, #12]
 8015616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015618:	889b      	ldrh	r3, [r3, #4]
 801561a:	b29b      	uxth	r3, r3
 801561c:	429a      	cmp	r2, r3
 801561e:	d006      	beq.n	801562e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	633b      	str	r3, [r7, #48]	; 0x30
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	2b00      	cmp	r3, #0
 801562a:	d1e6      	bne.n	80155fa <ip4_reass+0xb6>
 801562c:	e000      	b.n	8015630 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801562e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015632:	2b00      	cmp	r3, #0
 8015634:	d109      	bne.n	801564a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015636:	8c3b      	ldrh	r3, [r7, #32]
 8015638:	4619      	mov	r1, r3
 801563a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801563c:	f7ff fdb0 	bl	80151a0 <ip_reass_enqueue_new_datagram>
 8015640:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015644:	2b00      	cmp	r3, #0
 8015646:	d11c      	bne.n	8015682 <ip4_reass+0x13e>
      goto nullreturn;
 8015648:	e105      	b.n	8015856 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564c:	88db      	ldrh	r3, [r3, #6]
 801564e:	b29b      	uxth	r3, r3
 8015650:	4618      	mov	r0, r3
 8015652:	f7f5 f9c5 	bl	800a9e0 <lwip_htons>
 8015656:	4603      	mov	r3, r0
 8015658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801565c:	2b00      	cmp	r3, #0
 801565e:	d110      	bne.n	8015682 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015662:	89db      	ldrh	r3, [r3, #14]
 8015664:	4618      	mov	r0, r3
 8015666:	f7f5 f9bb 	bl	800a9e0 <lwip_htons>
 801566a:	4603      	mov	r3, r0
 801566c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015670:	2b00      	cmp	r3, #0
 8015672:	d006      	beq.n	8015682 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015676:	3308      	adds	r3, #8
 8015678:	2214      	movs	r2, #20
 801567a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801567c:	4618      	mov	r0, r3
 801567e:	f001 f8be 	bl	80167fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015684:	88db      	ldrh	r3, [r3, #6]
 8015686:	b29b      	uxth	r3, r3
 8015688:	f003 0320 	and.w	r3, r3, #32
 801568c:	2b00      	cmp	r3, #0
 801568e:	bf0c      	ite	eq
 8015690:	2301      	moveq	r3, #1
 8015692:	2300      	movne	r3, #0
 8015694:	b2db      	uxtb	r3, r3
 8015696:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00e      	beq.n	80156bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801569e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80156a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156a2:	4413      	add	r3, r2
 80156a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80156a6:	8b7a      	ldrh	r2, [r7, #26]
 80156a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80156aa:	429a      	cmp	r2, r3
 80156ac:	f0c0 80a0 	bcc.w	80157f0 <ip4_reass+0x2ac>
 80156b0:	8b7b      	ldrh	r3, [r7, #26]
 80156b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80156b6:	4293      	cmp	r3, r2
 80156b8:	f200 809a 	bhi.w	80157f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80156bc:	69fa      	ldr	r2, [r7, #28]
 80156be:	6879      	ldr	r1, [r7, #4]
 80156c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156c2:	f7ff fdd5 	bl	8015270 <ip_reass_chain_frag_into_datagram_and_validate>
 80156c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ce:	f000 809b 	beq.w	8015808 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80156d2:	4b48      	ldr	r3, [pc, #288]	; (80157f4 <ip4_reass+0x2b0>)
 80156d4:	881a      	ldrh	r2, [r3, #0]
 80156d6:	8c3b      	ldrh	r3, [r7, #32]
 80156d8:	4413      	add	r3, r2
 80156da:	b29a      	uxth	r2, r3
 80156dc:	4b45      	ldr	r3, [pc, #276]	; (80157f4 <ip4_reass+0x2b0>)
 80156de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00d      	beq.n	8015702 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80156e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80156e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156ea:	4413      	add	r3, r2
 80156ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80156ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f0:	8a7a      	ldrh	r2, [r7, #18]
 80156f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80156f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f6:	7f9b      	ldrb	r3, [r3, #30]
 80156f8:	f043 0301 	orr.w	r3, r3, #1
 80156fc:	b2da      	uxtb	r2, r3
 80156fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015700:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	2b01      	cmp	r3, #1
 8015706:	d171      	bne.n	80157ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570a:	8b9b      	ldrh	r3, [r3, #28]
 801570c:	3314      	adds	r3, #20
 801570e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015724:	3308      	adds	r3, #8
 8015726:	2214      	movs	r2, #20
 8015728:	4619      	mov	r1, r3
 801572a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801572c:	f001 f867 	bl	80167fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015730:	8a3b      	ldrh	r3, [r7, #16]
 8015732:	4618      	mov	r0, r3
 8015734:	f7f5 f954 	bl	800a9e0 <lwip_htons>
 8015738:	4603      	mov	r3, r0
 801573a:	461a      	mov	r2, r3
 801573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015742:	2200      	movs	r2, #0
 8015744:	719a      	strb	r2, [r3, #6]
 8015746:	2200      	movs	r2, #0
 8015748:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574c:	2200      	movs	r2, #0
 801574e:	729a      	strb	r2, [r3, #10]
 8015750:	2200      	movs	r2, #0
 8015752:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801575a:	e00d      	b.n	8015778 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015762:	2114      	movs	r1, #20
 8015764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015766:	f7f6 fca7 	bl	800c0b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801576a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7f6 fdf7 	bl	800c360 <pbuf_cat>
      r = iprh->next_pbuf;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801577a:	2b00      	cmp	r3, #0
 801577c:	d1ee      	bne.n	801575c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801577e:	4b1e      	ldr	r3, [pc, #120]	; (80157f8 <ip4_reass+0x2b4>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015784:	429a      	cmp	r2, r3
 8015786:	d102      	bne.n	801578e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015788:	2300      	movs	r3, #0
 801578a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801578c:	e010      	b.n	80157b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801578e:	4b1a      	ldr	r3, [pc, #104]	; (80157f8 <ip4_reass+0x2b4>)
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015794:	e007      	b.n	80157a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801579c:	429a      	cmp	r2, r3
 801579e:	d006      	beq.n	80157ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80157a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d1f4      	bne.n	8015796 <ip4_reass+0x252>
 80157ac:	e000      	b.n	80157b0 <ip4_reass+0x26c>
          break;
 80157ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80157b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157b4:	f7ff fd2e 	bl	8015214 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f7f6 fd91 	bl	800c2e0 <pbuf_clen>
 80157be:	4603      	mov	r3, r0
 80157c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80157c2:	4b0c      	ldr	r3, [pc, #48]	; (80157f4 <ip4_reass+0x2b0>)
 80157c4:	881b      	ldrh	r3, [r3, #0]
 80157c6:	8c3a      	ldrh	r2, [r7, #32]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d906      	bls.n	80157da <ip4_reass+0x296>
 80157cc:	4b0b      	ldr	r3, [pc, #44]	; (80157fc <ip4_reass+0x2b8>)
 80157ce:	f240 229b 	movw	r2, #667	; 0x29b
 80157d2:	490b      	ldr	r1, [pc, #44]	; (8015800 <ip4_reass+0x2bc>)
 80157d4:	480b      	ldr	r0, [pc, #44]	; (8015804 <ip4_reass+0x2c0>)
 80157d6:	f000 fda7 	bl	8016328 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80157da:	4b06      	ldr	r3, [pc, #24]	; (80157f4 <ip4_reass+0x2b0>)
 80157dc:	881a      	ldrh	r2, [r3, #0]
 80157de:	8c3b      	ldrh	r3, [r7, #32]
 80157e0:	1ad3      	subs	r3, r2, r3
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	4b03      	ldr	r3, [pc, #12]	; (80157f4 <ip4_reass+0x2b0>)
 80157e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	e038      	b.n	801585e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80157ec:	2300      	movs	r3, #0
 80157ee:	e036      	b.n	801585e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80157f0:	bf00      	nop
 80157f2:	e00a      	b.n	801580a <ip4_reass+0x2c6>
 80157f4:	2000c950 	.word	0x2000c950
 80157f8:	2000c94c 	.word	0x2000c94c
 80157fc:	0801aed8 	.word	0x0801aed8
 8015800:	0801b048 	.word	0x0801b048
 8015804:	0801af20 	.word	0x0801af20
    goto nullreturn_ipr;
 8015808:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	2b00      	cmp	r3, #0
 801580e:	d106      	bne.n	801581e <ip4_reass+0x2da>
 8015810:	4b15      	ldr	r3, [pc, #84]	; (8015868 <ip4_reass+0x324>)
 8015812:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015816:	4915      	ldr	r1, [pc, #84]	; (801586c <ip4_reass+0x328>)
 8015818:	4815      	ldr	r0, [pc, #84]	; (8015870 <ip4_reass+0x32c>)
 801581a:	f000 fd85 	bl	8016328 <iprintf>
  if (ipr->p == NULL) {
 801581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d116      	bne.n	8015854 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015826:	4b13      	ldr	r3, [pc, #76]	; (8015874 <ip4_reass+0x330>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801582c:	429a      	cmp	r2, r3
 801582e:	d006      	beq.n	801583e <ip4_reass+0x2fa>
 8015830:	4b0d      	ldr	r3, [pc, #52]	; (8015868 <ip4_reass+0x324>)
 8015832:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015836:	4910      	ldr	r1, [pc, #64]	; (8015878 <ip4_reass+0x334>)
 8015838:	480d      	ldr	r0, [pc, #52]	; (8015870 <ip4_reass+0x32c>)
 801583a:	f000 fd75 	bl	8016328 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801583e:	2100      	movs	r1, #0
 8015840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015842:	f7ff fce7 	bl	8015214 <ip_reass_dequeue_datagram>
 8015846:	e006      	b.n	8015856 <ip4_reass+0x312>
    goto nullreturn;
 8015848:	bf00      	nop
 801584a:	e004      	b.n	8015856 <ip4_reass+0x312>
    goto nullreturn;
 801584c:	bf00      	nop
 801584e:	e002      	b.n	8015856 <ip4_reass+0x312>
      goto nullreturn;
 8015850:	bf00      	nop
 8015852:	e000      	b.n	8015856 <ip4_reass+0x312>
  }

nullreturn:
 8015854:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7f6 fcb4 	bl	800c1c4 <pbuf_free>
  return NULL;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3738      	adds	r7, #56	; 0x38
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
 8015866:	bf00      	nop
 8015868:	0801aed8 	.word	0x0801aed8
 801586c:	0801b064 	.word	0x0801b064
 8015870:	0801af20 	.word	0x0801af20
 8015874:	2000c94c 	.word	0x2000c94c
 8015878:	0801b070 	.word	0x0801b070

0801587c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015880:	2005      	movs	r0, #5
 8015882:	f7f5 fd85 	bl	800b390 <memp_malloc>
 8015886:	4603      	mov	r3, r0
}
 8015888:	4618      	mov	r0, r3
 801588a:	bd80      	pop	{r7, pc}

0801588c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d106      	bne.n	80158a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801589a:	4b07      	ldr	r3, [pc, #28]	; (80158b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801589c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80158a0:	4906      	ldr	r1, [pc, #24]	; (80158bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80158a2:	4807      	ldr	r0, [pc, #28]	; (80158c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80158a4:	f000 fd40 	bl	8016328 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80158a8:	6879      	ldr	r1, [r7, #4]
 80158aa:	2005      	movs	r0, #5
 80158ac:	f7f5 fde6 	bl	800b47c <memp_free>
}
 80158b0:	bf00      	nop
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	0801aed8 	.word	0x0801aed8
 80158bc:	0801b090 	.word	0x0801b090
 80158c0:	0801af20 	.word	0x0801af20

080158c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d106      	bne.n	80158e4 <ipfrag_free_pbuf_custom+0x20>
 80158d6:	4b11      	ldr	r3, [pc, #68]	; (801591c <ipfrag_free_pbuf_custom+0x58>)
 80158d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80158dc:	4910      	ldr	r1, [pc, #64]	; (8015920 <ipfrag_free_pbuf_custom+0x5c>)
 80158de:	4811      	ldr	r0, [pc, #68]	; (8015924 <ipfrag_free_pbuf_custom+0x60>)
 80158e0:	f000 fd22 	bl	8016328 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80158e4:	68fa      	ldr	r2, [r7, #12]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d006      	beq.n	80158fa <ipfrag_free_pbuf_custom+0x36>
 80158ec:	4b0b      	ldr	r3, [pc, #44]	; (801591c <ipfrag_free_pbuf_custom+0x58>)
 80158ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80158f2:	490d      	ldr	r1, [pc, #52]	; (8015928 <ipfrag_free_pbuf_custom+0x64>)
 80158f4:	480b      	ldr	r0, [pc, #44]	; (8015924 <ipfrag_free_pbuf_custom+0x60>)
 80158f6:	f000 fd17 	bl	8016328 <iprintf>
  if (pcr->original != NULL) {
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	695b      	ldr	r3, [r3, #20]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d004      	beq.n	801590c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	695b      	ldr	r3, [r3, #20]
 8015906:	4618      	mov	r0, r3
 8015908:	f7f6 fc5c 	bl	800c1c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f7ff ffbd 	bl	801588c <ip_frag_free_pbuf_custom_ref>
}
 8015912:	bf00      	nop
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	0801aed8 	.word	0x0801aed8
 8015920:	0801b09c 	.word	0x0801b09c
 8015924:	0801af20 	.word	0x0801af20
 8015928:	0801b0a8 	.word	0x0801b0a8

0801592c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b094      	sub	sp, #80	; 0x50
 8015930:	af02      	add	r7, sp, #8
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015938:	2300      	movs	r3, #0
 801593a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015942:	3b14      	subs	r3, #20
 8015944:	2b00      	cmp	r3, #0
 8015946:	da00      	bge.n	801594a <ip4_frag+0x1e>
 8015948:	3307      	adds	r3, #7
 801594a:	10db      	asrs	r3, r3, #3
 801594c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801594e:	2314      	movs	r3, #20
 8015950:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801595a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	f003 030f 	and.w	r3, r3, #15
 8015964:	b2db      	uxtb	r3, r3
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b14      	cmp	r3, #20
 801596c:	d002      	beq.n	8015974 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801596e:	f06f 0305 	mvn.w	r3, #5
 8015972:	e110      	b.n	8015b96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	895b      	ldrh	r3, [r3, #10]
 8015978:	2b13      	cmp	r3, #19
 801597a:	d809      	bhi.n	8015990 <ip4_frag+0x64>
 801597c:	4b88      	ldr	r3, [pc, #544]	; (8015ba0 <ip4_frag+0x274>)
 801597e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015982:	4988      	ldr	r1, [pc, #544]	; (8015ba4 <ip4_frag+0x278>)
 8015984:	4888      	ldr	r0, [pc, #544]	; (8015ba8 <ip4_frag+0x27c>)
 8015986:	f000 fccf 	bl	8016328 <iprintf>
 801598a:	f06f 0305 	mvn.w	r3, #5
 801598e:	e102      	b.n	8015b96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015992:	88db      	ldrh	r3, [r3, #6]
 8015994:	b29b      	uxth	r3, r3
 8015996:	4618      	mov	r0, r3
 8015998:	f7f5 f822 	bl	800a9e0 <lwip_htons>
 801599c:	4603      	mov	r3, r0
 801599e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80159a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80159a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80159aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80159ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80159b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	891b      	ldrh	r3, [r3, #8]
 80159b6:	3b14      	subs	r3, #20
 80159b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80159bc:	e0e1      	b.n	8015b82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80159be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159c0:	00db      	lsls	r3, r3, #3
 80159c2:	b29b      	uxth	r3, r3
 80159c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159c8:	4293      	cmp	r3, r2
 80159ca:	bf28      	it	cs
 80159cc:	4613      	movcs	r3, r2
 80159ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80159d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159d4:	2114      	movs	r1, #20
 80159d6:	200e      	movs	r0, #14
 80159d8:	f7f6 f910 	bl	800bbfc <pbuf_alloc>
 80159dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80159de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	f000 80d5 	beq.w	8015b90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80159e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e8:	895b      	ldrh	r3, [r3, #10]
 80159ea:	2b13      	cmp	r3, #19
 80159ec:	d806      	bhi.n	80159fc <ip4_frag+0xd0>
 80159ee:	4b6c      	ldr	r3, [pc, #432]	; (8015ba0 <ip4_frag+0x274>)
 80159f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80159f4:	496d      	ldr	r1, [pc, #436]	; (8015bac <ip4_frag+0x280>)
 80159f6:	486c      	ldr	r0, [pc, #432]	; (8015ba8 <ip4_frag+0x27c>)
 80159f8:	f000 fc96 	bl	8016328 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80159fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	2214      	movs	r2, #20
 8015a02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015a04:	4618      	mov	r0, r3
 8015a06:	f000 fefa 	bl	80167fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015a10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015a16:	e064      	b.n	8015ae2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	895a      	ldrh	r2, [r3, #10]
 8015a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a1e:	1ad3      	subs	r3, r2, r3
 8015a20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	895b      	ldrh	r3, [r3, #10]
 8015a26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d906      	bls.n	8015a3a <ip4_frag+0x10e>
 8015a2c:	4b5c      	ldr	r3, [pc, #368]	; (8015ba0 <ip4_frag+0x274>)
 8015a2e:	f240 322d 	movw	r2, #813	; 0x32d
 8015a32:	495f      	ldr	r1, [pc, #380]	; (8015bb0 <ip4_frag+0x284>)
 8015a34:	485c      	ldr	r0, [pc, #368]	; (8015ba8 <ip4_frag+0x27c>)
 8015a36:	f000 fc77 	bl	8016328 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015a3a:	8bfa      	ldrh	r2, [r7, #30]
 8015a3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a40:	4293      	cmp	r3, r2
 8015a42:	bf28      	it	cs
 8015a44:	4613      	movcs	r3, r2
 8015a46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d105      	bne.n	8015a5e <ip4_frag+0x132>
        poff = 0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	60fb      	str	r3, [r7, #12]
        continue;
 8015a5c:	e041      	b.n	8015ae2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015a5e:	f7ff ff0d 	bl	801587c <ip_frag_alloc_pbuf_custom_ref>
 8015a62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d103      	bne.n	8015a72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a6c:	f7f6 fbaa 	bl	800c1c4 <pbuf_free>
        goto memerr;
 8015a70:	e08f      	b.n	8015b92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015a72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015a78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a7a:	4413      	add	r3, r2
 8015a7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015a80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015a84:	9201      	str	r2, [sp, #4]
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2241      	movs	r2, #65	; 0x41
 8015a8c:	2000      	movs	r0, #0
 8015a8e:	f7f6 f9df 	bl	800be50 <pbuf_alloced_custom>
 8015a92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d106      	bne.n	8015aa8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015a9a:	69b8      	ldr	r0, [r7, #24]
 8015a9c:	f7ff fef6 	bl	801588c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015aa2:	f7f6 fb8f 	bl	800c1c4 <pbuf_free>
        goto memerr;
 8015aa6:	e074      	b.n	8015b92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f7f6 fc31 	bl	800c310 <pbuf_ref>
      pcr->original = p;
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015ab4:	69bb      	ldr	r3, [r7, #24]
 8015ab6:	4a3f      	ldr	r2, [pc, #252]	; (8015bb4 <ip4_frag+0x288>)
 8015ab8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015aba:	6979      	ldr	r1, [r7, #20]
 8015abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015abe:	f7f6 fc4f 	bl	800c360 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015ac2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015aca:	1ad3      	subs	r3, r2, r3
 8015acc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d004      	beq.n	8015ae2 <ip4_frag+0x1b6>
        poff = 0;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015ae2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d196      	bne.n	8015a18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015aea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015aec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015af0:	4413      	add	r3, r2
 8015af2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015af8:	f1a3 0213 	sub.w	r2, r3, #19
 8015afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b00:	429a      	cmp	r2, r3
 8015b02:	bfcc      	ite	gt
 8015b04:	2301      	movgt	r3, #1
 8015b06:	2300      	movle	r3, #0
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015b0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015b16:	6a3b      	ldr	r3, [r7, #32]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d002      	beq.n	8015b22 <ip4_frag+0x1f6>
 8015b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d003      	beq.n	8015b2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015b28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015b2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f4 ff57 	bl	800a9e0 <lwip_htons>
 8015b32:	4603      	mov	r3, r0
 8015b34:	461a      	mov	r2, r3
 8015b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015b3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015b3c:	3314      	adds	r3, #20
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7f4 ff4d 	bl	800a9e0 <lwip_htons>
 8015b46:	4603      	mov	r3, r0
 8015b48:	461a      	mov	r2, r3
 8015b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	2200      	movs	r2, #0
 8015b52:	729a      	strb	r2, [r3, #10]
 8015b54:	2200      	movs	r2, #0
 8015b56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	695b      	ldr	r3, [r3, #20]
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b60:	68b8      	ldr	r0, [r7, #8]
 8015b62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b66:	f7f6 fb2d 	bl	800c1c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015b6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015b70:	1ad3      	subs	r3, r2, r3
 8015b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015b76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015b82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f47f af19 	bne.w	80159be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e002      	b.n	8015b96 <ip4_frag+0x26a>
      goto memerr;
 8015b90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3748      	adds	r7, #72	; 0x48
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	0801aed8 	.word	0x0801aed8
 8015ba4:	0801b0b4 	.word	0x0801b0b4
 8015ba8:	0801af20 	.word	0x0801af20
 8015bac:	0801b0d0 	.word	0x0801b0d0
 8015bb0:	0801b0f0 	.word	0x0801b0f0
 8015bb4:	080158c5 	.word	0x080158c5

08015bb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b086      	sub	sp, #24
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015bc2:	230e      	movs	r3, #14
 8015bc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	895b      	ldrh	r3, [r3, #10]
 8015bca:	2b0e      	cmp	r3, #14
 8015bcc:	d96e      	bls.n	8015cac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	7bdb      	ldrb	r3, [r3, #15]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015bdc:	3301      	adds	r3, #1
 8015bde:	b2da      	uxtb	r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	7b1a      	ldrb	r2, [r3, #12]
 8015bee:	7b5b      	ldrb	r3, [r3, #13]
 8015bf0:	021b      	lsls	r3, r3, #8
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	f003 0301 	and.w	r3, r3, #1
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d023      	beq.n	8015c4a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d10f      	bne.n	8015c2a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	785b      	ldrb	r3, [r3, #1]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d11b      	bne.n	8015c4a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015c16:	2b5e      	cmp	r3, #94	; 0x5e
 8015c18:	d117      	bne.n	8015c4a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	7b5b      	ldrb	r3, [r3, #13]
 8015c1e:	f043 0310 	orr.w	r3, r3, #16
 8015c22:	b2da      	uxtb	r2, r3
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	735a      	strb	r2, [r3, #13]
 8015c28:	e00f      	b.n	8015c4a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	2206      	movs	r2, #6
 8015c2e:	4928      	ldr	r1, [pc, #160]	; (8015cd0 <ethernet_input+0x118>)
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 fcdf 	bl	80165f4 <memcmp>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	7b5b      	ldrb	r3, [r3, #13]
 8015c40:	f043 0308 	orr.w	r3, r3, #8
 8015c44:	b2da      	uxtb	r2, r3
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015c4a:	89fb      	ldrh	r3, [r7, #14]
 8015c4c:	2b08      	cmp	r3, #8
 8015c4e:	d003      	beq.n	8015c58 <ethernet_input+0xa0>
 8015c50:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015c54:	d014      	beq.n	8015c80 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015c56:	e032      	b.n	8015cbe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c5e:	f003 0308 	and.w	r3, r3, #8
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d024      	beq.n	8015cb0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c66:	8afb      	ldrh	r3, [r7, #22]
 8015c68:	4619      	mov	r1, r3
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7f6 fa24 	bl	800c0b8 <pbuf_remove_header>
 8015c70:	4603      	mov	r3, r0
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d11e      	bne.n	8015cb4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015c76:	6839      	ldr	r1, [r7, #0]
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7fe fdf7 	bl	801486c <ip4_input>
      break;
 8015c7e:	e013      	b.n	8015ca8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c86:	f003 0308 	and.w	r3, r3, #8
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d014      	beq.n	8015cb8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c8e:	8afb      	ldrh	r3, [r7, #22]
 8015c90:	4619      	mov	r1, r3
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f7f6 fa10 	bl	800c0b8 <pbuf_remove_header>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d10e      	bne.n	8015cbc <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c9e:	6839      	ldr	r1, [r7, #0]
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f7fd ff97 	bl	8013bd4 <etharp_input>
      break;
 8015ca6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	e00c      	b.n	8015cc6 <ethernet_input+0x10e>
    goto free_and_return;
 8015cac:	bf00      	nop
 8015cae:	e006      	b.n	8015cbe <ethernet_input+0x106>
        goto free_and_return;
 8015cb0:	bf00      	nop
 8015cb2:	e004      	b.n	8015cbe <ethernet_input+0x106>
        goto free_and_return;
 8015cb4:	bf00      	nop
 8015cb6:	e002      	b.n	8015cbe <ethernet_input+0x106>
        goto free_and_return;
 8015cb8:	bf00      	nop
 8015cba:	e000      	b.n	8015cbe <ethernet_input+0x106>
        goto free_and_return;
 8015cbc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f7f6 fa80 	bl	800c1c4 <pbuf_free>
  return ERR_OK;
 8015cc4:	2300      	movs	r3, #0
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3718      	adds	r7, #24
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	0801b314 	.word	0x0801b314

08015cd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b086      	sub	sp, #24
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
 8015ce0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ce2:	8c3b      	ldrh	r3, [r7, #32]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7f4 fe7b 	bl	800a9e0 <lwip_htons>
 8015cea:	4603      	mov	r3, r0
 8015cec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015cee:	210e      	movs	r1, #14
 8015cf0:	68b8      	ldr	r0, [r7, #8]
 8015cf2:	f7f6 f9d1 	bl	800c098 <pbuf_add_header>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d125      	bne.n	8015d48 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	8afa      	ldrh	r2, [r7, #22]
 8015d06:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	2206      	movs	r2, #6
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 fd75 	bl	80167fe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	3306      	adds	r3, #6
 8015d18:	2206      	movs	r2, #6
 8015d1a:	6879      	ldr	r1, [r7, #4]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f000 fd6e 	bl	80167fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d28:	2b06      	cmp	r3, #6
 8015d2a:	d006      	beq.n	8015d3a <ethernet_output+0x66>
 8015d2c:	4b0a      	ldr	r3, [pc, #40]	; (8015d58 <ethernet_output+0x84>)
 8015d2e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015d32:	490a      	ldr	r1, [pc, #40]	; (8015d5c <ethernet_output+0x88>)
 8015d34:	480a      	ldr	r0, [pc, #40]	; (8015d60 <ethernet_output+0x8c>)
 8015d36:	f000 faf7 	bl	8016328 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	699b      	ldr	r3, [r3, #24]
 8015d3e:	68b9      	ldr	r1, [r7, #8]
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	4798      	blx	r3
 8015d44:	4603      	mov	r3, r0
 8015d46:	e002      	b.n	8015d4e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015d48:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015d4a:	f06f 0301 	mvn.w	r3, #1
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3718      	adds	r7, #24
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	0801b100 	.word	0x0801b100
 8015d5c:	0801b138 	.word	0x0801b138
 8015d60:	0801b16c 	.word	0x0801b16c

08015d64 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	60bb      	str	r3, [r7, #8]
 8015d72:	2304      	movs	r3, #4
 8015d74:	60fb      	str	r3, [r7, #12]
 8015d76:	2300      	movs	r3, #0
 8015d78:	613b      	str	r3, [r7, #16]
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015d7e:	f107 0308 	add.w	r3, r7, #8
 8015d82:	2100      	movs	r1, #0
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7ef fb44 	bl	8005412 <osMessageCreate>
 8015d8a:	4602      	mov	r2, r0
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d102      	bne.n	8015d9e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015d98:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9c:	e000      	b.n	8015da0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015d9e:	2300      	movs	r3, #0
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3718      	adds	r7, #24
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7ef fc09 	bl	80055cc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7ef fc1a 	bl	80055f8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015dc4:	bf00      	nop
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	6839      	ldr	r1, [r7, #0]
 8015ddc:	2200      	movs	r2, #0
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7ef fb40 	bl	8005464 <osMessagePut>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d102      	bne.n	8015df0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015dea:	2300      	movs	r3, #0
 8015dec:	73fb      	strb	r3, [r7, #15]
 8015dee:	e001      	b.n	8015df4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015df0:	23ff      	movs	r3, #255	; 0xff
 8015df2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b08c      	sub	sp, #48	; 0x30
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	61f8      	str	r0, [r7, #28]
 8015e08:	61b9      	str	r1, [r7, #24]
 8015e0a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015e0c:	f7ef f92c 	bl	8005068 <osKernelSysTick>
 8015e10:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d017      	beq.n	8015e48 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015e18:	69fb      	ldr	r3, [r7, #28]
 8015e1a:	6819      	ldr	r1, [r3, #0]
 8015e1c:	f107 0320 	add.w	r3, r7, #32
 8015e20:	697a      	ldr	r2, [r7, #20]
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7ef fb5e 	bl	80054e4 <osMessageGet>

    if(event.status == osEventMessage)
 8015e28:	6a3b      	ldr	r3, [r7, #32]
 8015e2a:	2b10      	cmp	r3, #16
 8015e2c:	d109      	bne.n	8015e42 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e30:	461a      	mov	r2, r3
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015e36:	f7ef f917 	bl	8005068 <osKernelSysTick>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3e:	1ad3      	subs	r3, r2, r3
 8015e40:	e019      	b.n	8015e76 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015e42:	f04f 33ff 	mov.w	r3, #4294967295
 8015e46:	e016      	b.n	8015e76 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	6819      	ldr	r1, [r3, #0]
 8015e4c:	463b      	mov	r3, r7
 8015e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7ef fb46 	bl	80054e4 <osMessageGet>
 8015e58:	f107 0320 	add.w	r3, r7, #32
 8015e5c:	463a      	mov	r2, r7
 8015e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	461a      	mov	r2, r3
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015e6c:	f7ef f8fc 	bl	8005068 <osKernelSysTick>
 8015e70:	4602      	mov	r2, r0
 8015e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e74:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3730      	adds	r7, #48	; 0x30
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}

08015e7e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b086      	sub	sp, #24
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6819      	ldr	r1, [r3, #0]
 8015e8c:	f107 030c 	add.w	r3, r7, #12
 8015e90:	2200      	movs	r2, #0
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7ef fb26 	bl	80054e4 <osMessageGet>

  if(event.status == osEventMessage)
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	2b10      	cmp	r3, #16
 8015e9c:	d105      	bne.n	8015eaa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e001      	b.n	8015eae <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015eaa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3718      	adds	r7, #24
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015eb6:	b480      	push	{r7}
 8015eb8:	b083      	sub	sp, #12
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d101      	bne.n	8015eca <sys_mbox_valid+0x14>
    return 0;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e000      	b.n	8015ecc <sys_mbox_valid+0x16>
  else
    return 1;
 8015eca:	2301      	movs	r3, #1
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr

08015ed8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015ed8:	b480      	push	{r7}
 8015eda:	b083      	sub	sp, #12
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	601a      	str	r2, [r3, #0]
}
 8015ee6:	bf00      	nop
 8015ee8:	370c      	adds	r7, #12
 8015eea:	46bd      	mov	sp, r7
 8015eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef0:	4770      	bx	lr

08015ef2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6078      	str	r0, [r7, #4]
 8015efa:	460b      	mov	r3, r1
 8015efc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015efe:	2300      	movs	r3, #0
 8015f00:	60bb      	str	r3, [r7, #8]
 8015f02:	2300      	movs	r3, #0
 8015f04:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015f06:	f107 0308 	add.w	r3, r7, #8
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ef f9b7 	bl	8005280 <osSemaphoreCreate>
 8015f12:	4602      	mov	r2, r0
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d102      	bne.n	8015f26 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015f20:	f04f 33ff 	mov.w	r3, #4294967295
 8015f24:	e009      	b.n	8015f3a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015f26:	78fb      	ldrb	r3, [r7, #3]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d105      	bne.n	8015f38 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	2100      	movs	r1, #0
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7ef f9d6 	bl	80052e4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b084      	sub	sp, #16
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
 8015f4a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015f4c:	f7ef f88c 	bl	8005068 <osKernelSysTick>
 8015f50:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d011      	beq.n	8015f7c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	6839      	ldr	r1, [r7, #0]
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7ef f9c0 	bl	80052e4 <osSemaphoreWait>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d105      	bne.n	8015f76 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015f6a:	f7ef f87d 	bl	8005068 <osKernelSysTick>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	e012      	b.n	8015f9c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015f76:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7a:	e00f      	b.n	8015f9c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015f7c:	bf00      	nop
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	f04f 31ff 	mov.w	r1, #4294967295
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7ef f9ac 	bl	80052e4 <osSemaphoreWait>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d1f5      	bne.n	8015f7e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015f92:	f7ef f869 	bl	8005068 <osKernelSysTick>
 8015f96:	4602      	mov	r2, r0
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7ef f9e5 	bl	8005380 <osSemaphoreRelease>
}
 8015fb6:	bf00      	nop
 8015fb8:	3708      	adds	r7, #8
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b082      	sub	sp, #8
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7ef fa0e 	bl	80053ec <osSemaphoreDelete>
}
 8015fd0:	bf00      	nop
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d101      	bne.n	8015fec <sys_sem_valid+0x14>
    return 0;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e000      	b.n	8015fee <sys_sem_valid+0x16>
  else
    return 1;
 8015fec:	2301      	movs	r3, #1
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	370c      	adds	r7, #12
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff8:	4770      	bx	lr

08015ffa <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015ffa:	b480      	push	{r7}
 8015ffc:	b083      	sub	sp, #12
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	2200      	movs	r2, #0
 8016006:	601a      	str	r2, [r3, #0]
}
 8016008:	bf00      	nop
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016018:	4803      	ldr	r0, [pc, #12]	; (8016028 <sys_init+0x14>)
 801601a:	f7ef f895 	bl	8005148 <osMutexCreate>
 801601e:	4603      	mov	r3, r0
 8016020:	4a02      	ldr	r2, [pc, #8]	; (801602c <sys_init+0x18>)
 8016022:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016024:	bf00      	nop
 8016026:	bd80      	pop	{r7, pc}
 8016028:	0801b324 	.word	0x0801b324
 801602c:	2000c954 	.word	0x2000c954

08016030 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016038:	2300      	movs	r3, #0
 801603a:	60bb      	str	r3, [r7, #8]
 801603c:	2300      	movs	r3, #0
 801603e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016040:	f107 0308 	add.w	r3, r7, #8
 8016044:	4618      	mov	r0, r3
 8016046:	f7ef f87f 	bl	8005148 <osMutexCreate>
 801604a:	4602      	mov	r2, r0
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d102      	bne.n	801605e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016058:	f04f 33ff 	mov.w	r3, #4294967295
 801605c:	e000      	b.n	8016060 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	f04f 31ff 	mov.w	r1, #4294967295
 8016078:	4618      	mov	r0, r3
 801607a:	f7ef f87d 	bl	8005178 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801607e:	bf00      	nop
 8016080:	3708      	adds	r7, #8
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}

08016086 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016086:	b580      	push	{r7, lr}
 8016088:	b082      	sub	sp, #8
 801608a:	af00      	add	r7, sp, #0
 801608c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4618      	mov	r0, r3
 8016094:	f7ef f8be 	bl	8005214 <osMutexRelease>
}
 8016098:	bf00      	nop
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b08c      	sub	sp, #48	; 0x30
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	607a      	str	r2, [r7, #4]
 80160ac:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80160ae:	f107 0314 	add.w	r3, r7, #20
 80160b2:	2200      	movs	r2, #0
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	605a      	str	r2, [r3, #4]
 80160b8:	609a      	str	r2, [r3, #8]
 80160ba:	60da      	str	r2, [r3, #12]
 80160bc:	611a      	str	r2, [r3, #16]
 80160be:	615a      	str	r2, [r3, #20]
 80160c0:	619a      	str	r2, [r3, #24]
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	617b      	str	r3, [r7, #20]
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	61bb      	str	r3, [r7, #24]
 80160ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160cc:	b21b      	sxth	r3, r3
 80160ce:	83bb      	strh	r3, [r7, #28]
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80160d4:	f107 0314 	add.w	r3, r7, #20
 80160d8:	6879      	ldr	r1, [r7, #4]
 80160da:	4618      	mov	r0, r3
 80160dc:	f7ee ffd4 	bl	8005088 <osThreadCreate>
 80160e0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3730      	adds	r7, #48	; 0x30
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}
	...

080160ec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80160f0:	4b04      	ldr	r3, [pc, #16]	; (8016104 <sys_arch_protect+0x18>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	f04f 31ff 	mov.w	r1, #4294967295
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7ef f83d 	bl	8005178 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80160fe:	2301      	movs	r3, #1
}
 8016100:	4618      	mov	r0, r3
 8016102:	bd80      	pop	{r7, pc}
 8016104:	2000c954 	.word	0x2000c954

08016108 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016110:	4b04      	ldr	r3, [pc, #16]	; (8016124 <sys_arch_unprotect+0x1c>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	4618      	mov	r0, r3
 8016116:	f7ef f87d 	bl	8005214 <osMutexRelease>
}
 801611a:	bf00      	nop
 801611c:	3708      	adds	r7, #8
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	2000c954 	.word	0x2000c954

08016128 <rand>:
 8016128:	4b16      	ldr	r3, [pc, #88]	; (8016184 <rand+0x5c>)
 801612a:	b510      	push	{r4, lr}
 801612c:	681c      	ldr	r4, [r3, #0]
 801612e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016130:	b9b3      	cbnz	r3, 8016160 <rand+0x38>
 8016132:	2018      	movs	r0, #24
 8016134:	f000 fbdc 	bl	80168f0 <malloc>
 8016138:	4602      	mov	r2, r0
 801613a:	6320      	str	r0, [r4, #48]	; 0x30
 801613c:	b920      	cbnz	r0, 8016148 <rand+0x20>
 801613e:	4b12      	ldr	r3, [pc, #72]	; (8016188 <rand+0x60>)
 8016140:	4812      	ldr	r0, [pc, #72]	; (801618c <rand+0x64>)
 8016142:	2152      	movs	r1, #82	; 0x52
 8016144:	f000 fb6a 	bl	801681c <__assert_func>
 8016148:	4911      	ldr	r1, [pc, #68]	; (8016190 <rand+0x68>)
 801614a:	4b12      	ldr	r3, [pc, #72]	; (8016194 <rand+0x6c>)
 801614c:	e9c0 1300 	strd	r1, r3, [r0]
 8016150:	4b11      	ldr	r3, [pc, #68]	; (8016198 <rand+0x70>)
 8016152:	6083      	str	r3, [r0, #8]
 8016154:	230b      	movs	r3, #11
 8016156:	8183      	strh	r3, [r0, #12]
 8016158:	2100      	movs	r1, #0
 801615a:	2001      	movs	r0, #1
 801615c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016160:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016162:	480e      	ldr	r0, [pc, #56]	; (801619c <rand+0x74>)
 8016164:	690b      	ldr	r3, [r1, #16]
 8016166:	694c      	ldr	r4, [r1, #20]
 8016168:	4a0d      	ldr	r2, [pc, #52]	; (80161a0 <rand+0x78>)
 801616a:	4358      	muls	r0, r3
 801616c:	fb02 0004 	mla	r0, r2, r4, r0
 8016170:	fba3 3202 	umull	r3, r2, r3, r2
 8016174:	3301      	adds	r3, #1
 8016176:	eb40 0002 	adc.w	r0, r0, r2
 801617a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801617e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016182:	bd10      	pop	{r4, pc}
 8016184:	20000088 	.word	0x20000088
 8016188:	0801b32c 	.word	0x0801b32c
 801618c:	0801b343 	.word	0x0801b343
 8016190:	abcd330e 	.word	0xabcd330e
 8016194:	e66d1234 	.word	0xe66d1234
 8016198:	0005deec 	.word	0x0005deec
 801619c:	5851f42d 	.word	0x5851f42d
 80161a0:	4c957f2d 	.word	0x4c957f2d

080161a4 <std>:
 80161a4:	2300      	movs	r3, #0
 80161a6:	b510      	push	{r4, lr}
 80161a8:	4604      	mov	r4, r0
 80161aa:	e9c0 3300 	strd	r3, r3, [r0]
 80161ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161b2:	6083      	str	r3, [r0, #8]
 80161b4:	8181      	strh	r1, [r0, #12]
 80161b6:	6643      	str	r3, [r0, #100]	; 0x64
 80161b8:	81c2      	strh	r2, [r0, #14]
 80161ba:	6183      	str	r3, [r0, #24]
 80161bc:	4619      	mov	r1, r3
 80161be:	2208      	movs	r2, #8
 80161c0:	305c      	adds	r0, #92	; 0x5c
 80161c2:	f000 fa41 	bl	8016648 <memset>
 80161c6:	4b0d      	ldr	r3, [pc, #52]	; (80161fc <std+0x58>)
 80161c8:	6263      	str	r3, [r4, #36]	; 0x24
 80161ca:	4b0d      	ldr	r3, [pc, #52]	; (8016200 <std+0x5c>)
 80161cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80161ce:	4b0d      	ldr	r3, [pc, #52]	; (8016204 <std+0x60>)
 80161d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80161d2:	4b0d      	ldr	r3, [pc, #52]	; (8016208 <std+0x64>)
 80161d4:	6323      	str	r3, [r4, #48]	; 0x30
 80161d6:	4b0d      	ldr	r3, [pc, #52]	; (801620c <std+0x68>)
 80161d8:	6224      	str	r4, [r4, #32]
 80161da:	429c      	cmp	r4, r3
 80161dc:	d006      	beq.n	80161ec <std+0x48>
 80161de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80161e2:	4294      	cmp	r4, r2
 80161e4:	d002      	beq.n	80161ec <std+0x48>
 80161e6:	33d0      	adds	r3, #208	; 0xd0
 80161e8:	429c      	cmp	r4, r3
 80161ea:	d105      	bne.n	80161f8 <std+0x54>
 80161ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80161f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161f4:	f000 bb00 	b.w	80167f8 <__retarget_lock_init_recursive>
 80161f8:	bd10      	pop	{r4, pc}
 80161fa:	bf00      	nop
 80161fc:	08016445 	.word	0x08016445
 8016200:	08016467 	.word	0x08016467
 8016204:	0801649f 	.word	0x0801649f
 8016208:	080164c3 	.word	0x080164c3
 801620c:	2000c958 	.word	0x2000c958

08016210 <stdio_exit_handler>:
 8016210:	4a02      	ldr	r2, [pc, #8]	; (801621c <stdio_exit_handler+0xc>)
 8016212:	4903      	ldr	r1, [pc, #12]	; (8016220 <stdio_exit_handler+0x10>)
 8016214:	4803      	ldr	r0, [pc, #12]	; (8016224 <stdio_exit_handler+0x14>)
 8016216:	f000 b869 	b.w	80162ec <_fwalk_sglue>
 801621a:	bf00      	nop
 801621c:	20000030 	.word	0x20000030
 8016220:	080173bd 	.word	0x080173bd
 8016224:	2000003c 	.word	0x2000003c

08016228 <cleanup_stdio>:
 8016228:	6841      	ldr	r1, [r0, #4]
 801622a:	4b0c      	ldr	r3, [pc, #48]	; (801625c <cleanup_stdio+0x34>)
 801622c:	4299      	cmp	r1, r3
 801622e:	b510      	push	{r4, lr}
 8016230:	4604      	mov	r4, r0
 8016232:	d001      	beq.n	8016238 <cleanup_stdio+0x10>
 8016234:	f001 f8c2 	bl	80173bc <_fflush_r>
 8016238:	68a1      	ldr	r1, [r4, #8]
 801623a:	4b09      	ldr	r3, [pc, #36]	; (8016260 <cleanup_stdio+0x38>)
 801623c:	4299      	cmp	r1, r3
 801623e:	d002      	beq.n	8016246 <cleanup_stdio+0x1e>
 8016240:	4620      	mov	r0, r4
 8016242:	f001 f8bb 	bl	80173bc <_fflush_r>
 8016246:	68e1      	ldr	r1, [r4, #12]
 8016248:	4b06      	ldr	r3, [pc, #24]	; (8016264 <cleanup_stdio+0x3c>)
 801624a:	4299      	cmp	r1, r3
 801624c:	d004      	beq.n	8016258 <cleanup_stdio+0x30>
 801624e:	4620      	mov	r0, r4
 8016250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016254:	f001 b8b2 	b.w	80173bc <_fflush_r>
 8016258:	bd10      	pop	{r4, pc}
 801625a:	bf00      	nop
 801625c:	2000c958 	.word	0x2000c958
 8016260:	2000c9c0 	.word	0x2000c9c0
 8016264:	2000ca28 	.word	0x2000ca28

08016268 <global_stdio_init.part.0>:
 8016268:	b510      	push	{r4, lr}
 801626a:	4b0b      	ldr	r3, [pc, #44]	; (8016298 <global_stdio_init.part.0+0x30>)
 801626c:	4c0b      	ldr	r4, [pc, #44]	; (801629c <global_stdio_init.part.0+0x34>)
 801626e:	4a0c      	ldr	r2, [pc, #48]	; (80162a0 <global_stdio_init.part.0+0x38>)
 8016270:	601a      	str	r2, [r3, #0]
 8016272:	4620      	mov	r0, r4
 8016274:	2200      	movs	r2, #0
 8016276:	2104      	movs	r1, #4
 8016278:	f7ff ff94 	bl	80161a4 <std>
 801627c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016280:	2201      	movs	r2, #1
 8016282:	2109      	movs	r1, #9
 8016284:	f7ff ff8e 	bl	80161a4 <std>
 8016288:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801628c:	2202      	movs	r2, #2
 801628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016292:	2112      	movs	r1, #18
 8016294:	f7ff bf86 	b.w	80161a4 <std>
 8016298:	2000ca90 	.word	0x2000ca90
 801629c:	2000c958 	.word	0x2000c958
 80162a0:	08016211 	.word	0x08016211

080162a4 <__sfp_lock_acquire>:
 80162a4:	4801      	ldr	r0, [pc, #4]	; (80162ac <__sfp_lock_acquire+0x8>)
 80162a6:	f000 baa8 	b.w	80167fa <__retarget_lock_acquire_recursive>
 80162aa:	bf00      	nop
 80162ac:	2000ca99 	.word	0x2000ca99

080162b0 <__sfp_lock_release>:
 80162b0:	4801      	ldr	r0, [pc, #4]	; (80162b8 <__sfp_lock_release+0x8>)
 80162b2:	f000 baa3 	b.w	80167fc <__retarget_lock_release_recursive>
 80162b6:	bf00      	nop
 80162b8:	2000ca99 	.word	0x2000ca99

080162bc <__sinit>:
 80162bc:	b510      	push	{r4, lr}
 80162be:	4604      	mov	r4, r0
 80162c0:	f7ff fff0 	bl	80162a4 <__sfp_lock_acquire>
 80162c4:	6a23      	ldr	r3, [r4, #32]
 80162c6:	b11b      	cbz	r3, 80162d0 <__sinit+0x14>
 80162c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162cc:	f7ff bff0 	b.w	80162b0 <__sfp_lock_release>
 80162d0:	4b04      	ldr	r3, [pc, #16]	; (80162e4 <__sinit+0x28>)
 80162d2:	6223      	str	r3, [r4, #32]
 80162d4:	4b04      	ldr	r3, [pc, #16]	; (80162e8 <__sinit+0x2c>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1f5      	bne.n	80162c8 <__sinit+0xc>
 80162dc:	f7ff ffc4 	bl	8016268 <global_stdio_init.part.0>
 80162e0:	e7f2      	b.n	80162c8 <__sinit+0xc>
 80162e2:	bf00      	nop
 80162e4:	08016229 	.word	0x08016229
 80162e8:	2000ca90 	.word	0x2000ca90

080162ec <_fwalk_sglue>:
 80162ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162f0:	4607      	mov	r7, r0
 80162f2:	4688      	mov	r8, r1
 80162f4:	4614      	mov	r4, r2
 80162f6:	2600      	movs	r6, #0
 80162f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80162fc:	f1b9 0901 	subs.w	r9, r9, #1
 8016300:	d505      	bpl.n	801630e <_fwalk_sglue+0x22>
 8016302:	6824      	ldr	r4, [r4, #0]
 8016304:	2c00      	cmp	r4, #0
 8016306:	d1f7      	bne.n	80162f8 <_fwalk_sglue+0xc>
 8016308:	4630      	mov	r0, r6
 801630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801630e:	89ab      	ldrh	r3, [r5, #12]
 8016310:	2b01      	cmp	r3, #1
 8016312:	d907      	bls.n	8016324 <_fwalk_sglue+0x38>
 8016314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016318:	3301      	adds	r3, #1
 801631a:	d003      	beq.n	8016324 <_fwalk_sglue+0x38>
 801631c:	4629      	mov	r1, r5
 801631e:	4638      	mov	r0, r7
 8016320:	47c0      	blx	r8
 8016322:	4306      	orrs	r6, r0
 8016324:	3568      	adds	r5, #104	; 0x68
 8016326:	e7e9      	b.n	80162fc <_fwalk_sglue+0x10>

08016328 <iprintf>:
 8016328:	b40f      	push	{r0, r1, r2, r3}
 801632a:	b507      	push	{r0, r1, r2, lr}
 801632c:	4906      	ldr	r1, [pc, #24]	; (8016348 <iprintf+0x20>)
 801632e:	ab04      	add	r3, sp, #16
 8016330:	6808      	ldr	r0, [r1, #0]
 8016332:	f853 2b04 	ldr.w	r2, [r3], #4
 8016336:	6881      	ldr	r1, [r0, #8]
 8016338:	9301      	str	r3, [sp, #4]
 801633a:	f000 fd0f 	bl	8016d5c <_vfiprintf_r>
 801633e:	b003      	add	sp, #12
 8016340:	f85d eb04 	ldr.w	lr, [sp], #4
 8016344:	b004      	add	sp, #16
 8016346:	4770      	bx	lr
 8016348:	20000088 	.word	0x20000088

0801634c <_puts_r>:
 801634c:	6a03      	ldr	r3, [r0, #32]
 801634e:	b570      	push	{r4, r5, r6, lr}
 8016350:	6884      	ldr	r4, [r0, #8]
 8016352:	4605      	mov	r5, r0
 8016354:	460e      	mov	r6, r1
 8016356:	b90b      	cbnz	r3, 801635c <_puts_r+0x10>
 8016358:	f7ff ffb0 	bl	80162bc <__sinit>
 801635c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801635e:	07db      	lsls	r3, r3, #31
 8016360:	d405      	bmi.n	801636e <_puts_r+0x22>
 8016362:	89a3      	ldrh	r3, [r4, #12]
 8016364:	0598      	lsls	r0, r3, #22
 8016366:	d402      	bmi.n	801636e <_puts_r+0x22>
 8016368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801636a:	f000 fa46 	bl	80167fa <__retarget_lock_acquire_recursive>
 801636e:	89a3      	ldrh	r3, [r4, #12]
 8016370:	0719      	lsls	r1, r3, #28
 8016372:	d513      	bpl.n	801639c <_puts_r+0x50>
 8016374:	6923      	ldr	r3, [r4, #16]
 8016376:	b18b      	cbz	r3, 801639c <_puts_r+0x50>
 8016378:	3e01      	subs	r6, #1
 801637a:	68a3      	ldr	r3, [r4, #8]
 801637c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016380:	3b01      	subs	r3, #1
 8016382:	60a3      	str	r3, [r4, #8]
 8016384:	b9e9      	cbnz	r1, 80163c2 <_puts_r+0x76>
 8016386:	2b00      	cmp	r3, #0
 8016388:	da2e      	bge.n	80163e8 <_puts_r+0x9c>
 801638a:	4622      	mov	r2, r4
 801638c:	210a      	movs	r1, #10
 801638e:	4628      	mov	r0, r5
 8016390:	f000 f89b 	bl	80164ca <__swbuf_r>
 8016394:	3001      	adds	r0, #1
 8016396:	d007      	beq.n	80163a8 <_puts_r+0x5c>
 8016398:	250a      	movs	r5, #10
 801639a:	e007      	b.n	80163ac <_puts_r+0x60>
 801639c:	4621      	mov	r1, r4
 801639e:	4628      	mov	r0, r5
 80163a0:	f000 f8d0 	bl	8016544 <__swsetup_r>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d0e7      	beq.n	8016378 <_puts_r+0x2c>
 80163a8:	f04f 35ff 	mov.w	r5, #4294967295
 80163ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163ae:	07da      	lsls	r2, r3, #31
 80163b0:	d405      	bmi.n	80163be <_puts_r+0x72>
 80163b2:	89a3      	ldrh	r3, [r4, #12]
 80163b4:	059b      	lsls	r3, r3, #22
 80163b6:	d402      	bmi.n	80163be <_puts_r+0x72>
 80163b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163ba:	f000 fa1f 	bl	80167fc <__retarget_lock_release_recursive>
 80163be:	4628      	mov	r0, r5
 80163c0:	bd70      	pop	{r4, r5, r6, pc}
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	da04      	bge.n	80163d0 <_puts_r+0x84>
 80163c6:	69a2      	ldr	r2, [r4, #24]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	dc06      	bgt.n	80163da <_puts_r+0x8e>
 80163cc:	290a      	cmp	r1, #10
 80163ce:	d004      	beq.n	80163da <_puts_r+0x8e>
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	1c5a      	adds	r2, r3, #1
 80163d4:	6022      	str	r2, [r4, #0]
 80163d6:	7019      	strb	r1, [r3, #0]
 80163d8:	e7cf      	b.n	801637a <_puts_r+0x2e>
 80163da:	4622      	mov	r2, r4
 80163dc:	4628      	mov	r0, r5
 80163de:	f000 f874 	bl	80164ca <__swbuf_r>
 80163e2:	3001      	adds	r0, #1
 80163e4:	d1c9      	bne.n	801637a <_puts_r+0x2e>
 80163e6:	e7df      	b.n	80163a8 <_puts_r+0x5c>
 80163e8:	6823      	ldr	r3, [r4, #0]
 80163ea:	250a      	movs	r5, #10
 80163ec:	1c5a      	adds	r2, r3, #1
 80163ee:	6022      	str	r2, [r4, #0]
 80163f0:	701d      	strb	r5, [r3, #0]
 80163f2:	e7db      	b.n	80163ac <_puts_r+0x60>

080163f4 <puts>:
 80163f4:	4b02      	ldr	r3, [pc, #8]	; (8016400 <puts+0xc>)
 80163f6:	4601      	mov	r1, r0
 80163f8:	6818      	ldr	r0, [r3, #0]
 80163fa:	f7ff bfa7 	b.w	801634c <_puts_r>
 80163fe:	bf00      	nop
 8016400:	20000088 	.word	0x20000088

08016404 <siprintf>:
 8016404:	b40e      	push	{r1, r2, r3}
 8016406:	b500      	push	{lr}
 8016408:	b09c      	sub	sp, #112	; 0x70
 801640a:	ab1d      	add	r3, sp, #116	; 0x74
 801640c:	9002      	str	r0, [sp, #8]
 801640e:	9006      	str	r0, [sp, #24]
 8016410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016414:	4809      	ldr	r0, [pc, #36]	; (801643c <siprintf+0x38>)
 8016416:	9107      	str	r1, [sp, #28]
 8016418:	9104      	str	r1, [sp, #16]
 801641a:	4909      	ldr	r1, [pc, #36]	; (8016440 <siprintf+0x3c>)
 801641c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016420:	9105      	str	r1, [sp, #20]
 8016422:	6800      	ldr	r0, [r0, #0]
 8016424:	9301      	str	r3, [sp, #4]
 8016426:	a902      	add	r1, sp, #8
 8016428:	f000 fb70 	bl	8016b0c <_svfiprintf_r>
 801642c:	9b02      	ldr	r3, [sp, #8]
 801642e:	2200      	movs	r2, #0
 8016430:	701a      	strb	r2, [r3, #0]
 8016432:	b01c      	add	sp, #112	; 0x70
 8016434:	f85d eb04 	ldr.w	lr, [sp], #4
 8016438:	b003      	add	sp, #12
 801643a:	4770      	bx	lr
 801643c:	20000088 	.word	0x20000088
 8016440:	ffff0208 	.word	0xffff0208

08016444 <__sread>:
 8016444:	b510      	push	{r4, lr}
 8016446:	460c      	mov	r4, r1
 8016448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801644c:	f000 f98c 	bl	8016768 <_read_r>
 8016450:	2800      	cmp	r0, #0
 8016452:	bfab      	itete	ge
 8016454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016456:	89a3      	ldrhlt	r3, [r4, #12]
 8016458:	181b      	addge	r3, r3, r0
 801645a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801645e:	bfac      	ite	ge
 8016460:	6563      	strge	r3, [r4, #84]	; 0x54
 8016462:	81a3      	strhlt	r3, [r4, #12]
 8016464:	bd10      	pop	{r4, pc}

08016466 <__swrite>:
 8016466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801646a:	461f      	mov	r7, r3
 801646c:	898b      	ldrh	r3, [r1, #12]
 801646e:	05db      	lsls	r3, r3, #23
 8016470:	4605      	mov	r5, r0
 8016472:	460c      	mov	r4, r1
 8016474:	4616      	mov	r6, r2
 8016476:	d505      	bpl.n	8016484 <__swrite+0x1e>
 8016478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801647c:	2302      	movs	r3, #2
 801647e:	2200      	movs	r2, #0
 8016480:	f000 f960 	bl	8016744 <_lseek_r>
 8016484:	89a3      	ldrh	r3, [r4, #12]
 8016486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801648a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801648e:	81a3      	strh	r3, [r4, #12]
 8016490:	4632      	mov	r2, r6
 8016492:	463b      	mov	r3, r7
 8016494:	4628      	mov	r0, r5
 8016496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801649a:	f000 b977 	b.w	801678c <_write_r>

0801649e <__sseek>:
 801649e:	b510      	push	{r4, lr}
 80164a0:	460c      	mov	r4, r1
 80164a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164a6:	f000 f94d 	bl	8016744 <_lseek_r>
 80164aa:	1c43      	adds	r3, r0, #1
 80164ac:	89a3      	ldrh	r3, [r4, #12]
 80164ae:	bf15      	itete	ne
 80164b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80164b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80164b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80164ba:	81a3      	strheq	r3, [r4, #12]
 80164bc:	bf18      	it	ne
 80164be:	81a3      	strhne	r3, [r4, #12]
 80164c0:	bd10      	pop	{r4, pc}

080164c2 <__sclose>:
 80164c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164c6:	f000 b8d7 	b.w	8016678 <_close_r>

080164ca <__swbuf_r>:
 80164ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164cc:	460e      	mov	r6, r1
 80164ce:	4614      	mov	r4, r2
 80164d0:	4605      	mov	r5, r0
 80164d2:	b118      	cbz	r0, 80164dc <__swbuf_r+0x12>
 80164d4:	6a03      	ldr	r3, [r0, #32]
 80164d6:	b90b      	cbnz	r3, 80164dc <__swbuf_r+0x12>
 80164d8:	f7ff fef0 	bl	80162bc <__sinit>
 80164dc:	69a3      	ldr	r3, [r4, #24]
 80164de:	60a3      	str	r3, [r4, #8]
 80164e0:	89a3      	ldrh	r3, [r4, #12]
 80164e2:	071a      	lsls	r2, r3, #28
 80164e4:	d525      	bpl.n	8016532 <__swbuf_r+0x68>
 80164e6:	6923      	ldr	r3, [r4, #16]
 80164e8:	b31b      	cbz	r3, 8016532 <__swbuf_r+0x68>
 80164ea:	6823      	ldr	r3, [r4, #0]
 80164ec:	6922      	ldr	r2, [r4, #16]
 80164ee:	1a98      	subs	r0, r3, r2
 80164f0:	6963      	ldr	r3, [r4, #20]
 80164f2:	b2f6      	uxtb	r6, r6
 80164f4:	4283      	cmp	r3, r0
 80164f6:	4637      	mov	r7, r6
 80164f8:	dc04      	bgt.n	8016504 <__swbuf_r+0x3a>
 80164fa:	4621      	mov	r1, r4
 80164fc:	4628      	mov	r0, r5
 80164fe:	f000 ff5d 	bl	80173bc <_fflush_r>
 8016502:	b9e0      	cbnz	r0, 801653e <__swbuf_r+0x74>
 8016504:	68a3      	ldr	r3, [r4, #8]
 8016506:	3b01      	subs	r3, #1
 8016508:	60a3      	str	r3, [r4, #8]
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	1c5a      	adds	r2, r3, #1
 801650e:	6022      	str	r2, [r4, #0]
 8016510:	701e      	strb	r6, [r3, #0]
 8016512:	6962      	ldr	r2, [r4, #20]
 8016514:	1c43      	adds	r3, r0, #1
 8016516:	429a      	cmp	r2, r3
 8016518:	d004      	beq.n	8016524 <__swbuf_r+0x5a>
 801651a:	89a3      	ldrh	r3, [r4, #12]
 801651c:	07db      	lsls	r3, r3, #31
 801651e:	d506      	bpl.n	801652e <__swbuf_r+0x64>
 8016520:	2e0a      	cmp	r6, #10
 8016522:	d104      	bne.n	801652e <__swbuf_r+0x64>
 8016524:	4621      	mov	r1, r4
 8016526:	4628      	mov	r0, r5
 8016528:	f000 ff48 	bl	80173bc <_fflush_r>
 801652c:	b938      	cbnz	r0, 801653e <__swbuf_r+0x74>
 801652e:	4638      	mov	r0, r7
 8016530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016532:	4621      	mov	r1, r4
 8016534:	4628      	mov	r0, r5
 8016536:	f000 f805 	bl	8016544 <__swsetup_r>
 801653a:	2800      	cmp	r0, #0
 801653c:	d0d5      	beq.n	80164ea <__swbuf_r+0x20>
 801653e:	f04f 37ff 	mov.w	r7, #4294967295
 8016542:	e7f4      	b.n	801652e <__swbuf_r+0x64>

08016544 <__swsetup_r>:
 8016544:	b538      	push	{r3, r4, r5, lr}
 8016546:	4b2a      	ldr	r3, [pc, #168]	; (80165f0 <__swsetup_r+0xac>)
 8016548:	4605      	mov	r5, r0
 801654a:	6818      	ldr	r0, [r3, #0]
 801654c:	460c      	mov	r4, r1
 801654e:	b118      	cbz	r0, 8016558 <__swsetup_r+0x14>
 8016550:	6a03      	ldr	r3, [r0, #32]
 8016552:	b90b      	cbnz	r3, 8016558 <__swsetup_r+0x14>
 8016554:	f7ff feb2 	bl	80162bc <__sinit>
 8016558:	89a3      	ldrh	r3, [r4, #12]
 801655a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801655e:	0718      	lsls	r0, r3, #28
 8016560:	d422      	bmi.n	80165a8 <__swsetup_r+0x64>
 8016562:	06d9      	lsls	r1, r3, #27
 8016564:	d407      	bmi.n	8016576 <__swsetup_r+0x32>
 8016566:	2309      	movs	r3, #9
 8016568:	602b      	str	r3, [r5, #0]
 801656a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801656e:	81a3      	strh	r3, [r4, #12]
 8016570:	f04f 30ff 	mov.w	r0, #4294967295
 8016574:	e034      	b.n	80165e0 <__swsetup_r+0x9c>
 8016576:	0758      	lsls	r0, r3, #29
 8016578:	d512      	bpl.n	80165a0 <__swsetup_r+0x5c>
 801657a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801657c:	b141      	cbz	r1, 8016590 <__swsetup_r+0x4c>
 801657e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016582:	4299      	cmp	r1, r3
 8016584:	d002      	beq.n	801658c <__swsetup_r+0x48>
 8016586:	4628      	mov	r0, r5
 8016588:	f000 f966 	bl	8016858 <_free_r>
 801658c:	2300      	movs	r3, #0
 801658e:	6363      	str	r3, [r4, #52]	; 0x34
 8016590:	89a3      	ldrh	r3, [r4, #12]
 8016592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016596:	81a3      	strh	r3, [r4, #12]
 8016598:	2300      	movs	r3, #0
 801659a:	6063      	str	r3, [r4, #4]
 801659c:	6923      	ldr	r3, [r4, #16]
 801659e:	6023      	str	r3, [r4, #0]
 80165a0:	89a3      	ldrh	r3, [r4, #12]
 80165a2:	f043 0308 	orr.w	r3, r3, #8
 80165a6:	81a3      	strh	r3, [r4, #12]
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	b94b      	cbnz	r3, 80165c0 <__swsetup_r+0x7c>
 80165ac:	89a3      	ldrh	r3, [r4, #12]
 80165ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80165b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165b6:	d003      	beq.n	80165c0 <__swsetup_r+0x7c>
 80165b8:	4621      	mov	r1, r4
 80165ba:	4628      	mov	r0, r5
 80165bc:	f000 ff5e 	bl	801747c <__smakebuf_r>
 80165c0:	89a0      	ldrh	r0, [r4, #12]
 80165c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165c6:	f010 0301 	ands.w	r3, r0, #1
 80165ca:	d00a      	beq.n	80165e2 <__swsetup_r+0x9e>
 80165cc:	2300      	movs	r3, #0
 80165ce:	60a3      	str	r3, [r4, #8]
 80165d0:	6963      	ldr	r3, [r4, #20]
 80165d2:	425b      	negs	r3, r3
 80165d4:	61a3      	str	r3, [r4, #24]
 80165d6:	6923      	ldr	r3, [r4, #16]
 80165d8:	b943      	cbnz	r3, 80165ec <__swsetup_r+0xa8>
 80165da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80165de:	d1c4      	bne.n	801656a <__swsetup_r+0x26>
 80165e0:	bd38      	pop	{r3, r4, r5, pc}
 80165e2:	0781      	lsls	r1, r0, #30
 80165e4:	bf58      	it	pl
 80165e6:	6963      	ldrpl	r3, [r4, #20]
 80165e8:	60a3      	str	r3, [r4, #8]
 80165ea:	e7f4      	b.n	80165d6 <__swsetup_r+0x92>
 80165ec:	2000      	movs	r0, #0
 80165ee:	e7f7      	b.n	80165e0 <__swsetup_r+0x9c>
 80165f0:	20000088 	.word	0x20000088

080165f4 <memcmp>:
 80165f4:	b510      	push	{r4, lr}
 80165f6:	3901      	subs	r1, #1
 80165f8:	4402      	add	r2, r0
 80165fa:	4290      	cmp	r0, r2
 80165fc:	d101      	bne.n	8016602 <memcmp+0xe>
 80165fe:	2000      	movs	r0, #0
 8016600:	e005      	b.n	801660e <memcmp+0x1a>
 8016602:	7803      	ldrb	r3, [r0, #0]
 8016604:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016608:	42a3      	cmp	r3, r4
 801660a:	d001      	beq.n	8016610 <memcmp+0x1c>
 801660c:	1b18      	subs	r0, r3, r4
 801660e:	bd10      	pop	{r4, pc}
 8016610:	3001      	adds	r0, #1
 8016612:	e7f2      	b.n	80165fa <memcmp+0x6>

08016614 <memmove>:
 8016614:	4288      	cmp	r0, r1
 8016616:	b510      	push	{r4, lr}
 8016618:	eb01 0402 	add.w	r4, r1, r2
 801661c:	d902      	bls.n	8016624 <memmove+0x10>
 801661e:	4284      	cmp	r4, r0
 8016620:	4623      	mov	r3, r4
 8016622:	d807      	bhi.n	8016634 <memmove+0x20>
 8016624:	1e43      	subs	r3, r0, #1
 8016626:	42a1      	cmp	r1, r4
 8016628:	d008      	beq.n	801663c <memmove+0x28>
 801662a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801662e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016632:	e7f8      	b.n	8016626 <memmove+0x12>
 8016634:	4402      	add	r2, r0
 8016636:	4601      	mov	r1, r0
 8016638:	428a      	cmp	r2, r1
 801663a:	d100      	bne.n	801663e <memmove+0x2a>
 801663c:	bd10      	pop	{r4, pc}
 801663e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016646:	e7f7      	b.n	8016638 <memmove+0x24>

08016648 <memset>:
 8016648:	4402      	add	r2, r0
 801664a:	4603      	mov	r3, r0
 801664c:	4293      	cmp	r3, r2
 801664e:	d100      	bne.n	8016652 <memset+0xa>
 8016650:	4770      	bx	lr
 8016652:	f803 1b01 	strb.w	r1, [r3], #1
 8016656:	e7f9      	b.n	801664c <memset+0x4>

08016658 <strcat>:
 8016658:	b510      	push	{r4, lr}
 801665a:	4602      	mov	r2, r0
 801665c:	7814      	ldrb	r4, [r2, #0]
 801665e:	4613      	mov	r3, r2
 8016660:	3201      	adds	r2, #1
 8016662:	2c00      	cmp	r4, #0
 8016664:	d1fa      	bne.n	801665c <strcat+0x4>
 8016666:	3b01      	subs	r3, #1
 8016668:	f811 2b01 	ldrb.w	r2, [r1], #1
 801666c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016670:	2a00      	cmp	r2, #0
 8016672:	d1f9      	bne.n	8016668 <strcat+0x10>
 8016674:	bd10      	pop	{r4, pc}
	...

08016678 <_close_r>:
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4d06      	ldr	r5, [pc, #24]	; (8016694 <_close_r+0x1c>)
 801667c:	2300      	movs	r3, #0
 801667e:	4604      	mov	r4, r0
 8016680:	4608      	mov	r0, r1
 8016682:	602b      	str	r3, [r5, #0]
 8016684:	f7ea facf 	bl	8000c26 <_close>
 8016688:	1c43      	adds	r3, r0, #1
 801668a:	d102      	bne.n	8016692 <_close_r+0x1a>
 801668c:	682b      	ldr	r3, [r5, #0]
 801668e:	b103      	cbz	r3, 8016692 <_close_r+0x1a>
 8016690:	6023      	str	r3, [r4, #0]
 8016692:	bd38      	pop	{r3, r4, r5, pc}
 8016694:	2000ca94 	.word	0x2000ca94

08016698 <_reclaim_reent>:
 8016698:	4b29      	ldr	r3, [pc, #164]	; (8016740 <_reclaim_reent+0xa8>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	4283      	cmp	r3, r0
 801669e:	b570      	push	{r4, r5, r6, lr}
 80166a0:	4604      	mov	r4, r0
 80166a2:	d04b      	beq.n	801673c <_reclaim_reent+0xa4>
 80166a4:	69c3      	ldr	r3, [r0, #28]
 80166a6:	b143      	cbz	r3, 80166ba <_reclaim_reent+0x22>
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d144      	bne.n	8016738 <_reclaim_reent+0xa0>
 80166ae:	69e3      	ldr	r3, [r4, #28]
 80166b0:	6819      	ldr	r1, [r3, #0]
 80166b2:	b111      	cbz	r1, 80166ba <_reclaim_reent+0x22>
 80166b4:	4620      	mov	r0, r4
 80166b6:	f000 f8cf 	bl	8016858 <_free_r>
 80166ba:	6961      	ldr	r1, [r4, #20]
 80166bc:	b111      	cbz	r1, 80166c4 <_reclaim_reent+0x2c>
 80166be:	4620      	mov	r0, r4
 80166c0:	f000 f8ca 	bl	8016858 <_free_r>
 80166c4:	69e1      	ldr	r1, [r4, #28]
 80166c6:	b111      	cbz	r1, 80166ce <_reclaim_reent+0x36>
 80166c8:	4620      	mov	r0, r4
 80166ca:	f000 f8c5 	bl	8016858 <_free_r>
 80166ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80166d0:	b111      	cbz	r1, 80166d8 <_reclaim_reent+0x40>
 80166d2:	4620      	mov	r0, r4
 80166d4:	f000 f8c0 	bl	8016858 <_free_r>
 80166d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166da:	b111      	cbz	r1, 80166e2 <_reclaim_reent+0x4a>
 80166dc:	4620      	mov	r0, r4
 80166de:	f000 f8bb 	bl	8016858 <_free_r>
 80166e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80166e4:	b111      	cbz	r1, 80166ec <_reclaim_reent+0x54>
 80166e6:	4620      	mov	r0, r4
 80166e8:	f000 f8b6 	bl	8016858 <_free_r>
 80166ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80166ee:	b111      	cbz	r1, 80166f6 <_reclaim_reent+0x5e>
 80166f0:	4620      	mov	r0, r4
 80166f2:	f000 f8b1 	bl	8016858 <_free_r>
 80166f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80166f8:	b111      	cbz	r1, 8016700 <_reclaim_reent+0x68>
 80166fa:	4620      	mov	r0, r4
 80166fc:	f000 f8ac 	bl	8016858 <_free_r>
 8016700:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016702:	b111      	cbz	r1, 801670a <_reclaim_reent+0x72>
 8016704:	4620      	mov	r0, r4
 8016706:	f000 f8a7 	bl	8016858 <_free_r>
 801670a:	6a23      	ldr	r3, [r4, #32]
 801670c:	b1b3      	cbz	r3, 801673c <_reclaim_reent+0xa4>
 801670e:	4620      	mov	r0, r4
 8016710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016714:	4718      	bx	r3
 8016716:	5949      	ldr	r1, [r1, r5]
 8016718:	b941      	cbnz	r1, 801672c <_reclaim_reent+0x94>
 801671a:	3504      	adds	r5, #4
 801671c:	69e3      	ldr	r3, [r4, #28]
 801671e:	2d80      	cmp	r5, #128	; 0x80
 8016720:	68d9      	ldr	r1, [r3, #12]
 8016722:	d1f8      	bne.n	8016716 <_reclaim_reent+0x7e>
 8016724:	4620      	mov	r0, r4
 8016726:	f000 f897 	bl	8016858 <_free_r>
 801672a:	e7c0      	b.n	80166ae <_reclaim_reent+0x16>
 801672c:	680e      	ldr	r6, [r1, #0]
 801672e:	4620      	mov	r0, r4
 8016730:	f000 f892 	bl	8016858 <_free_r>
 8016734:	4631      	mov	r1, r6
 8016736:	e7ef      	b.n	8016718 <_reclaim_reent+0x80>
 8016738:	2500      	movs	r5, #0
 801673a:	e7ef      	b.n	801671c <_reclaim_reent+0x84>
 801673c:	bd70      	pop	{r4, r5, r6, pc}
 801673e:	bf00      	nop
 8016740:	20000088 	.word	0x20000088

08016744 <_lseek_r>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	4d07      	ldr	r5, [pc, #28]	; (8016764 <_lseek_r+0x20>)
 8016748:	4604      	mov	r4, r0
 801674a:	4608      	mov	r0, r1
 801674c:	4611      	mov	r1, r2
 801674e:	2200      	movs	r2, #0
 8016750:	602a      	str	r2, [r5, #0]
 8016752:	461a      	mov	r2, r3
 8016754:	f7ea fa8e 	bl	8000c74 <_lseek>
 8016758:	1c43      	adds	r3, r0, #1
 801675a:	d102      	bne.n	8016762 <_lseek_r+0x1e>
 801675c:	682b      	ldr	r3, [r5, #0]
 801675e:	b103      	cbz	r3, 8016762 <_lseek_r+0x1e>
 8016760:	6023      	str	r3, [r4, #0]
 8016762:	bd38      	pop	{r3, r4, r5, pc}
 8016764:	2000ca94 	.word	0x2000ca94

08016768 <_read_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4d07      	ldr	r5, [pc, #28]	; (8016788 <_read_r+0x20>)
 801676c:	4604      	mov	r4, r0
 801676e:	4608      	mov	r0, r1
 8016770:	4611      	mov	r1, r2
 8016772:	2200      	movs	r2, #0
 8016774:	602a      	str	r2, [r5, #0]
 8016776:	461a      	mov	r2, r3
 8016778:	f7ea fa1c 	bl	8000bb4 <_read>
 801677c:	1c43      	adds	r3, r0, #1
 801677e:	d102      	bne.n	8016786 <_read_r+0x1e>
 8016780:	682b      	ldr	r3, [r5, #0]
 8016782:	b103      	cbz	r3, 8016786 <_read_r+0x1e>
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	bd38      	pop	{r3, r4, r5, pc}
 8016788:	2000ca94 	.word	0x2000ca94

0801678c <_write_r>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4d07      	ldr	r5, [pc, #28]	; (80167ac <_write_r+0x20>)
 8016790:	4604      	mov	r4, r0
 8016792:	4608      	mov	r0, r1
 8016794:	4611      	mov	r1, r2
 8016796:	2200      	movs	r2, #0
 8016798:	602a      	str	r2, [r5, #0]
 801679a:	461a      	mov	r2, r3
 801679c:	f7ea fa27 	bl	8000bee <_write>
 80167a0:	1c43      	adds	r3, r0, #1
 80167a2:	d102      	bne.n	80167aa <_write_r+0x1e>
 80167a4:	682b      	ldr	r3, [r5, #0]
 80167a6:	b103      	cbz	r3, 80167aa <_write_r+0x1e>
 80167a8:	6023      	str	r3, [r4, #0]
 80167aa:	bd38      	pop	{r3, r4, r5, pc}
 80167ac:	2000ca94 	.word	0x2000ca94

080167b0 <__libc_init_array>:
 80167b0:	b570      	push	{r4, r5, r6, lr}
 80167b2:	4d0d      	ldr	r5, [pc, #52]	; (80167e8 <__libc_init_array+0x38>)
 80167b4:	4c0d      	ldr	r4, [pc, #52]	; (80167ec <__libc_init_array+0x3c>)
 80167b6:	1b64      	subs	r4, r4, r5
 80167b8:	10a4      	asrs	r4, r4, #2
 80167ba:	2600      	movs	r6, #0
 80167bc:	42a6      	cmp	r6, r4
 80167be:	d109      	bne.n	80167d4 <__libc_init_array+0x24>
 80167c0:	4d0b      	ldr	r5, [pc, #44]	; (80167f0 <__libc_init_array+0x40>)
 80167c2:	4c0c      	ldr	r4, [pc, #48]	; (80167f4 <__libc_init_array+0x44>)
 80167c4:	f000 ff4a 	bl	801765c <_init>
 80167c8:	1b64      	subs	r4, r4, r5
 80167ca:	10a4      	asrs	r4, r4, #2
 80167cc:	2600      	movs	r6, #0
 80167ce:	42a6      	cmp	r6, r4
 80167d0:	d105      	bne.n	80167de <__libc_init_array+0x2e>
 80167d2:	bd70      	pop	{r4, r5, r6, pc}
 80167d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80167d8:	4798      	blx	r3
 80167da:	3601      	adds	r6, #1
 80167dc:	e7ee      	b.n	80167bc <__libc_init_array+0xc>
 80167de:	f855 3b04 	ldr.w	r3, [r5], #4
 80167e2:	4798      	blx	r3
 80167e4:	3601      	adds	r6, #1
 80167e6:	e7f2      	b.n	80167ce <__libc_init_array+0x1e>
 80167e8:	0801b514 	.word	0x0801b514
 80167ec:	0801b514 	.word	0x0801b514
 80167f0:	0801b514 	.word	0x0801b514
 80167f4:	0801b518 	.word	0x0801b518

080167f8 <__retarget_lock_init_recursive>:
 80167f8:	4770      	bx	lr

080167fa <__retarget_lock_acquire_recursive>:
 80167fa:	4770      	bx	lr

080167fc <__retarget_lock_release_recursive>:
 80167fc:	4770      	bx	lr

080167fe <memcpy>:
 80167fe:	440a      	add	r2, r1
 8016800:	4291      	cmp	r1, r2
 8016802:	f100 33ff 	add.w	r3, r0, #4294967295
 8016806:	d100      	bne.n	801680a <memcpy+0xc>
 8016808:	4770      	bx	lr
 801680a:	b510      	push	{r4, lr}
 801680c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016814:	4291      	cmp	r1, r2
 8016816:	d1f9      	bne.n	801680c <memcpy+0xe>
 8016818:	bd10      	pop	{r4, pc}
	...

0801681c <__assert_func>:
 801681c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801681e:	4614      	mov	r4, r2
 8016820:	461a      	mov	r2, r3
 8016822:	4b09      	ldr	r3, [pc, #36]	; (8016848 <__assert_func+0x2c>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4605      	mov	r5, r0
 8016828:	68d8      	ldr	r0, [r3, #12]
 801682a:	b14c      	cbz	r4, 8016840 <__assert_func+0x24>
 801682c:	4b07      	ldr	r3, [pc, #28]	; (801684c <__assert_func+0x30>)
 801682e:	9100      	str	r1, [sp, #0]
 8016830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016834:	4906      	ldr	r1, [pc, #24]	; (8016850 <__assert_func+0x34>)
 8016836:	462b      	mov	r3, r5
 8016838:	f000 fde8 	bl	801740c <fiprintf>
 801683c:	f000 fe8c 	bl	8017558 <abort>
 8016840:	4b04      	ldr	r3, [pc, #16]	; (8016854 <__assert_func+0x38>)
 8016842:	461c      	mov	r4, r3
 8016844:	e7f3      	b.n	801682e <__assert_func+0x12>
 8016846:	bf00      	nop
 8016848:	20000088 	.word	0x20000088
 801684c:	0801b49c 	.word	0x0801b49c
 8016850:	0801b4a9 	.word	0x0801b4a9
 8016854:	0801b4d7 	.word	0x0801b4d7

08016858 <_free_r>:
 8016858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801685a:	2900      	cmp	r1, #0
 801685c:	d044      	beq.n	80168e8 <_free_r+0x90>
 801685e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016862:	9001      	str	r0, [sp, #4]
 8016864:	2b00      	cmp	r3, #0
 8016866:	f1a1 0404 	sub.w	r4, r1, #4
 801686a:	bfb8      	it	lt
 801686c:	18e4      	addlt	r4, r4, r3
 801686e:	f000 f8e7 	bl	8016a40 <__malloc_lock>
 8016872:	4a1e      	ldr	r2, [pc, #120]	; (80168ec <_free_r+0x94>)
 8016874:	9801      	ldr	r0, [sp, #4]
 8016876:	6813      	ldr	r3, [r2, #0]
 8016878:	b933      	cbnz	r3, 8016888 <_free_r+0x30>
 801687a:	6063      	str	r3, [r4, #4]
 801687c:	6014      	str	r4, [r2, #0]
 801687e:	b003      	add	sp, #12
 8016880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016884:	f000 b8e2 	b.w	8016a4c <__malloc_unlock>
 8016888:	42a3      	cmp	r3, r4
 801688a:	d908      	bls.n	801689e <_free_r+0x46>
 801688c:	6825      	ldr	r5, [r4, #0]
 801688e:	1961      	adds	r1, r4, r5
 8016890:	428b      	cmp	r3, r1
 8016892:	bf01      	itttt	eq
 8016894:	6819      	ldreq	r1, [r3, #0]
 8016896:	685b      	ldreq	r3, [r3, #4]
 8016898:	1949      	addeq	r1, r1, r5
 801689a:	6021      	streq	r1, [r4, #0]
 801689c:	e7ed      	b.n	801687a <_free_r+0x22>
 801689e:	461a      	mov	r2, r3
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	b10b      	cbz	r3, 80168a8 <_free_r+0x50>
 80168a4:	42a3      	cmp	r3, r4
 80168a6:	d9fa      	bls.n	801689e <_free_r+0x46>
 80168a8:	6811      	ldr	r1, [r2, #0]
 80168aa:	1855      	adds	r5, r2, r1
 80168ac:	42a5      	cmp	r5, r4
 80168ae:	d10b      	bne.n	80168c8 <_free_r+0x70>
 80168b0:	6824      	ldr	r4, [r4, #0]
 80168b2:	4421      	add	r1, r4
 80168b4:	1854      	adds	r4, r2, r1
 80168b6:	42a3      	cmp	r3, r4
 80168b8:	6011      	str	r1, [r2, #0]
 80168ba:	d1e0      	bne.n	801687e <_free_r+0x26>
 80168bc:	681c      	ldr	r4, [r3, #0]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	6053      	str	r3, [r2, #4]
 80168c2:	440c      	add	r4, r1
 80168c4:	6014      	str	r4, [r2, #0]
 80168c6:	e7da      	b.n	801687e <_free_r+0x26>
 80168c8:	d902      	bls.n	80168d0 <_free_r+0x78>
 80168ca:	230c      	movs	r3, #12
 80168cc:	6003      	str	r3, [r0, #0]
 80168ce:	e7d6      	b.n	801687e <_free_r+0x26>
 80168d0:	6825      	ldr	r5, [r4, #0]
 80168d2:	1961      	adds	r1, r4, r5
 80168d4:	428b      	cmp	r3, r1
 80168d6:	bf04      	itt	eq
 80168d8:	6819      	ldreq	r1, [r3, #0]
 80168da:	685b      	ldreq	r3, [r3, #4]
 80168dc:	6063      	str	r3, [r4, #4]
 80168de:	bf04      	itt	eq
 80168e0:	1949      	addeq	r1, r1, r5
 80168e2:	6021      	streq	r1, [r4, #0]
 80168e4:	6054      	str	r4, [r2, #4]
 80168e6:	e7ca      	b.n	801687e <_free_r+0x26>
 80168e8:	b003      	add	sp, #12
 80168ea:	bd30      	pop	{r4, r5, pc}
 80168ec:	2000ca9c 	.word	0x2000ca9c

080168f0 <malloc>:
 80168f0:	4b02      	ldr	r3, [pc, #8]	; (80168fc <malloc+0xc>)
 80168f2:	4601      	mov	r1, r0
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	f000 b823 	b.w	8016940 <_malloc_r>
 80168fa:	bf00      	nop
 80168fc:	20000088 	.word	0x20000088

08016900 <sbrk_aligned>:
 8016900:	b570      	push	{r4, r5, r6, lr}
 8016902:	4e0e      	ldr	r6, [pc, #56]	; (801693c <sbrk_aligned+0x3c>)
 8016904:	460c      	mov	r4, r1
 8016906:	6831      	ldr	r1, [r6, #0]
 8016908:	4605      	mov	r5, r0
 801690a:	b911      	cbnz	r1, 8016912 <sbrk_aligned+0x12>
 801690c:	f000 fe14 	bl	8017538 <_sbrk_r>
 8016910:	6030      	str	r0, [r6, #0]
 8016912:	4621      	mov	r1, r4
 8016914:	4628      	mov	r0, r5
 8016916:	f000 fe0f 	bl	8017538 <_sbrk_r>
 801691a:	1c43      	adds	r3, r0, #1
 801691c:	d00a      	beq.n	8016934 <sbrk_aligned+0x34>
 801691e:	1cc4      	adds	r4, r0, #3
 8016920:	f024 0403 	bic.w	r4, r4, #3
 8016924:	42a0      	cmp	r0, r4
 8016926:	d007      	beq.n	8016938 <sbrk_aligned+0x38>
 8016928:	1a21      	subs	r1, r4, r0
 801692a:	4628      	mov	r0, r5
 801692c:	f000 fe04 	bl	8017538 <_sbrk_r>
 8016930:	3001      	adds	r0, #1
 8016932:	d101      	bne.n	8016938 <sbrk_aligned+0x38>
 8016934:	f04f 34ff 	mov.w	r4, #4294967295
 8016938:	4620      	mov	r0, r4
 801693a:	bd70      	pop	{r4, r5, r6, pc}
 801693c:	2000caa0 	.word	0x2000caa0

08016940 <_malloc_r>:
 8016940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016944:	1ccd      	adds	r5, r1, #3
 8016946:	f025 0503 	bic.w	r5, r5, #3
 801694a:	3508      	adds	r5, #8
 801694c:	2d0c      	cmp	r5, #12
 801694e:	bf38      	it	cc
 8016950:	250c      	movcc	r5, #12
 8016952:	2d00      	cmp	r5, #0
 8016954:	4607      	mov	r7, r0
 8016956:	db01      	blt.n	801695c <_malloc_r+0x1c>
 8016958:	42a9      	cmp	r1, r5
 801695a:	d905      	bls.n	8016968 <_malloc_r+0x28>
 801695c:	230c      	movs	r3, #12
 801695e:	603b      	str	r3, [r7, #0]
 8016960:	2600      	movs	r6, #0
 8016962:	4630      	mov	r0, r6
 8016964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016968:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016a3c <_malloc_r+0xfc>
 801696c:	f000 f868 	bl	8016a40 <__malloc_lock>
 8016970:	f8d8 3000 	ldr.w	r3, [r8]
 8016974:	461c      	mov	r4, r3
 8016976:	bb5c      	cbnz	r4, 80169d0 <_malloc_r+0x90>
 8016978:	4629      	mov	r1, r5
 801697a:	4638      	mov	r0, r7
 801697c:	f7ff ffc0 	bl	8016900 <sbrk_aligned>
 8016980:	1c43      	adds	r3, r0, #1
 8016982:	4604      	mov	r4, r0
 8016984:	d155      	bne.n	8016a32 <_malloc_r+0xf2>
 8016986:	f8d8 4000 	ldr.w	r4, [r8]
 801698a:	4626      	mov	r6, r4
 801698c:	2e00      	cmp	r6, #0
 801698e:	d145      	bne.n	8016a1c <_malloc_r+0xdc>
 8016990:	2c00      	cmp	r4, #0
 8016992:	d048      	beq.n	8016a26 <_malloc_r+0xe6>
 8016994:	6823      	ldr	r3, [r4, #0]
 8016996:	4631      	mov	r1, r6
 8016998:	4638      	mov	r0, r7
 801699a:	eb04 0903 	add.w	r9, r4, r3
 801699e:	f000 fdcb 	bl	8017538 <_sbrk_r>
 80169a2:	4581      	cmp	r9, r0
 80169a4:	d13f      	bne.n	8016a26 <_malloc_r+0xe6>
 80169a6:	6821      	ldr	r1, [r4, #0]
 80169a8:	1a6d      	subs	r5, r5, r1
 80169aa:	4629      	mov	r1, r5
 80169ac:	4638      	mov	r0, r7
 80169ae:	f7ff ffa7 	bl	8016900 <sbrk_aligned>
 80169b2:	3001      	adds	r0, #1
 80169b4:	d037      	beq.n	8016a26 <_malloc_r+0xe6>
 80169b6:	6823      	ldr	r3, [r4, #0]
 80169b8:	442b      	add	r3, r5
 80169ba:	6023      	str	r3, [r4, #0]
 80169bc:	f8d8 3000 	ldr.w	r3, [r8]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d038      	beq.n	8016a36 <_malloc_r+0xf6>
 80169c4:	685a      	ldr	r2, [r3, #4]
 80169c6:	42a2      	cmp	r2, r4
 80169c8:	d12b      	bne.n	8016a22 <_malloc_r+0xe2>
 80169ca:	2200      	movs	r2, #0
 80169cc:	605a      	str	r2, [r3, #4]
 80169ce:	e00f      	b.n	80169f0 <_malloc_r+0xb0>
 80169d0:	6822      	ldr	r2, [r4, #0]
 80169d2:	1b52      	subs	r2, r2, r5
 80169d4:	d41f      	bmi.n	8016a16 <_malloc_r+0xd6>
 80169d6:	2a0b      	cmp	r2, #11
 80169d8:	d917      	bls.n	8016a0a <_malloc_r+0xca>
 80169da:	1961      	adds	r1, r4, r5
 80169dc:	42a3      	cmp	r3, r4
 80169de:	6025      	str	r5, [r4, #0]
 80169e0:	bf18      	it	ne
 80169e2:	6059      	strne	r1, [r3, #4]
 80169e4:	6863      	ldr	r3, [r4, #4]
 80169e6:	bf08      	it	eq
 80169e8:	f8c8 1000 	streq.w	r1, [r8]
 80169ec:	5162      	str	r2, [r4, r5]
 80169ee:	604b      	str	r3, [r1, #4]
 80169f0:	4638      	mov	r0, r7
 80169f2:	f104 060b 	add.w	r6, r4, #11
 80169f6:	f000 f829 	bl	8016a4c <__malloc_unlock>
 80169fa:	f026 0607 	bic.w	r6, r6, #7
 80169fe:	1d23      	adds	r3, r4, #4
 8016a00:	1af2      	subs	r2, r6, r3
 8016a02:	d0ae      	beq.n	8016962 <_malloc_r+0x22>
 8016a04:	1b9b      	subs	r3, r3, r6
 8016a06:	50a3      	str	r3, [r4, r2]
 8016a08:	e7ab      	b.n	8016962 <_malloc_r+0x22>
 8016a0a:	42a3      	cmp	r3, r4
 8016a0c:	6862      	ldr	r2, [r4, #4]
 8016a0e:	d1dd      	bne.n	80169cc <_malloc_r+0x8c>
 8016a10:	f8c8 2000 	str.w	r2, [r8]
 8016a14:	e7ec      	b.n	80169f0 <_malloc_r+0xb0>
 8016a16:	4623      	mov	r3, r4
 8016a18:	6864      	ldr	r4, [r4, #4]
 8016a1a:	e7ac      	b.n	8016976 <_malloc_r+0x36>
 8016a1c:	4634      	mov	r4, r6
 8016a1e:	6876      	ldr	r6, [r6, #4]
 8016a20:	e7b4      	b.n	801698c <_malloc_r+0x4c>
 8016a22:	4613      	mov	r3, r2
 8016a24:	e7cc      	b.n	80169c0 <_malloc_r+0x80>
 8016a26:	230c      	movs	r3, #12
 8016a28:	603b      	str	r3, [r7, #0]
 8016a2a:	4638      	mov	r0, r7
 8016a2c:	f000 f80e 	bl	8016a4c <__malloc_unlock>
 8016a30:	e797      	b.n	8016962 <_malloc_r+0x22>
 8016a32:	6025      	str	r5, [r4, #0]
 8016a34:	e7dc      	b.n	80169f0 <_malloc_r+0xb0>
 8016a36:	605b      	str	r3, [r3, #4]
 8016a38:	deff      	udf	#255	; 0xff
 8016a3a:	bf00      	nop
 8016a3c:	2000ca9c 	.word	0x2000ca9c

08016a40 <__malloc_lock>:
 8016a40:	4801      	ldr	r0, [pc, #4]	; (8016a48 <__malloc_lock+0x8>)
 8016a42:	f7ff beda 	b.w	80167fa <__retarget_lock_acquire_recursive>
 8016a46:	bf00      	nop
 8016a48:	2000ca98 	.word	0x2000ca98

08016a4c <__malloc_unlock>:
 8016a4c:	4801      	ldr	r0, [pc, #4]	; (8016a54 <__malloc_unlock+0x8>)
 8016a4e:	f7ff bed5 	b.w	80167fc <__retarget_lock_release_recursive>
 8016a52:	bf00      	nop
 8016a54:	2000ca98 	.word	0x2000ca98

08016a58 <__ssputs_r>:
 8016a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a5c:	688e      	ldr	r6, [r1, #8]
 8016a5e:	461f      	mov	r7, r3
 8016a60:	42be      	cmp	r6, r7
 8016a62:	680b      	ldr	r3, [r1, #0]
 8016a64:	4682      	mov	sl, r0
 8016a66:	460c      	mov	r4, r1
 8016a68:	4690      	mov	r8, r2
 8016a6a:	d82c      	bhi.n	8016ac6 <__ssputs_r+0x6e>
 8016a6c:	898a      	ldrh	r2, [r1, #12]
 8016a6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a72:	d026      	beq.n	8016ac2 <__ssputs_r+0x6a>
 8016a74:	6965      	ldr	r5, [r4, #20]
 8016a76:	6909      	ldr	r1, [r1, #16]
 8016a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a7c:	eba3 0901 	sub.w	r9, r3, r1
 8016a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a84:	1c7b      	adds	r3, r7, #1
 8016a86:	444b      	add	r3, r9
 8016a88:	106d      	asrs	r5, r5, #1
 8016a8a:	429d      	cmp	r5, r3
 8016a8c:	bf38      	it	cc
 8016a8e:	461d      	movcc	r5, r3
 8016a90:	0553      	lsls	r3, r2, #21
 8016a92:	d527      	bpl.n	8016ae4 <__ssputs_r+0x8c>
 8016a94:	4629      	mov	r1, r5
 8016a96:	f7ff ff53 	bl	8016940 <_malloc_r>
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	b360      	cbz	r0, 8016af8 <__ssputs_r+0xa0>
 8016a9e:	6921      	ldr	r1, [r4, #16]
 8016aa0:	464a      	mov	r2, r9
 8016aa2:	f7ff feac 	bl	80167fe <memcpy>
 8016aa6:	89a3      	ldrh	r3, [r4, #12]
 8016aa8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ab0:	81a3      	strh	r3, [r4, #12]
 8016ab2:	6126      	str	r6, [r4, #16]
 8016ab4:	6165      	str	r5, [r4, #20]
 8016ab6:	444e      	add	r6, r9
 8016ab8:	eba5 0509 	sub.w	r5, r5, r9
 8016abc:	6026      	str	r6, [r4, #0]
 8016abe:	60a5      	str	r5, [r4, #8]
 8016ac0:	463e      	mov	r6, r7
 8016ac2:	42be      	cmp	r6, r7
 8016ac4:	d900      	bls.n	8016ac8 <__ssputs_r+0x70>
 8016ac6:	463e      	mov	r6, r7
 8016ac8:	6820      	ldr	r0, [r4, #0]
 8016aca:	4632      	mov	r2, r6
 8016acc:	4641      	mov	r1, r8
 8016ace:	f7ff fda1 	bl	8016614 <memmove>
 8016ad2:	68a3      	ldr	r3, [r4, #8]
 8016ad4:	1b9b      	subs	r3, r3, r6
 8016ad6:	60a3      	str	r3, [r4, #8]
 8016ad8:	6823      	ldr	r3, [r4, #0]
 8016ada:	4433      	add	r3, r6
 8016adc:	6023      	str	r3, [r4, #0]
 8016ade:	2000      	movs	r0, #0
 8016ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ae4:	462a      	mov	r2, r5
 8016ae6:	f000 fd3e 	bl	8017566 <_realloc_r>
 8016aea:	4606      	mov	r6, r0
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d1e0      	bne.n	8016ab2 <__ssputs_r+0x5a>
 8016af0:	6921      	ldr	r1, [r4, #16]
 8016af2:	4650      	mov	r0, sl
 8016af4:	f7ff feb0 	bl	8016858 <_free_r>
 8016af8:	230c      	movs	r3, #12
 8016afa:	f8ca 3000 	str.w	r3, [sl]
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b04:	81a3      	strh	r3, [r4, #12]
 8016b06:	f04f 30ff 	mov.w	r0, #4294967295
 8016b0a:	e7e9      	b.n	8016ae0 <__ssputs_r+0x88>

08016b0c <_svfiprintf_r>:
 8016b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b10:	4698      	mov	r8, r3
 8016b12:	898b      	ldrh	r3, [r1, #12]
 8016b14:	061b      	lsls	r3, r3, #24
 8016b16:	b09d      	sub	sp, #116	; 0x74
 8016b18:	4607      	mov	r7, r0
 8016b1a:	460d      	mov	r5, r1
 8016b1c:	4614      	mov	r4, r2
 8016b1e:	d50e      	bpl.n	8016b3e <_svfiprintf_r+0x32>
 8016b20:	690b      	ldr	r3, [r1, #16]
 8016b22:	b963      	cbnz	r3, 8016b3e <_svfiprintf_r+0x32>
 8016b24:	2140      	movs	r1, #64	; 0x40
 8016b26:	f7ff ff0b 	bl	8016940 <_malloc_r>
 8016b2a:	6028      	str	r0, [r5, #0]
 8016b2c:	6128      	str	r0, [r5, #16]
 8016b2e:	b920      	cbnz	r0, 8016b3a <_svfiprintf_r+0x2e>
 8016b30:	230c      	movs	r3, #12
 8016b32:	603b      	str	r3, [r7, #0]
 8016b34:	f04f 30ff 	mov.w	r0, #4294967295
 8016b38:	e0d0      	b.n	8016cdc <_svfiprintf_r+0x1d0>
 8016b3a:	2340      	movs	r3, #64	; 0x40
 8016b3c:	616b      	str	r3, [r5, #20]
 8016b3e:	2300      	movs	r3, #0
 8016b40:	9309      	str	r3, [sp, #36]	; 0x24
 8016b42:	2320      	movs	r3, #32
 8016b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b4c:	2330      	movs	r3, #48	; 0x30
 8016b4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016cf4 <_svfiprintf_r+0x1e8>
 8016b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b56:	f04f 0901 	mov.w	r9, #1
 8016b5a:	4623      	mov	r3, r4
 8016b5c:	469a      	mov	sl, r3
 8016b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b62:	b10a      	cbz	r2, 8016b68 <_svfiprintf_r+0x5c>
 8016b64:	2a25      	cmp	r2, #37	; 0x25
 8016b66:	d1f9      	bne.n	8016b5c <_svfiprintf_r+0x50>
 8016b68:	ebba 0b04 	subs.w	fp, sl, r4
 8016b6c:	d00b      	beq.n	8016b86 <_svfiprintf_r+0x7a>
 8016b6e:	465b      	mov	r3, fp
 8016b70:	4622      	mov	r2, r4
 8016b72:	4629      	mov	r1, r5
 8016b74:	4638      	mov	r0, r7
 8016b76:	f7ff ff6f 	bl	8016a58 <__ssputs_r>
 8016b7a:	3001      	adds	r0, #1
 8016b7c:	f000 80a9 	beq.w	8016cd2 <_svfiprintf_r+0x1c6>
 8016b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b82:	445a      	add	r2, fp
 8016b84:	9209      	str	r2, [sp, #36]	; 0x24
 8016b86:	f89a 3000 	ldrb.w	r3, [sl]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	f000 80a1 	beq.w	8016cd2 <_svfiprintf_r+0x1c6>
 8016b90:	2300      	movs	r3, #0
 8016b92:	f04f 32ff 	mov.w	r2, #4294967295
 8016b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b9a:	f10a 0a01 	add.w	sl, sl, #1
 8016b9e:	9304      	str	r3, [sp, #16]
 8016ba0:	9307      	str	r3, [sp, #28]
 8016ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8016ba8:	4654      	mov	r4, sl
 8016baa:	2205      	movs	r2, #5
 8016bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bb0:	4850      	ldr	r0, [pc, #320]	; (8016cf4 <_svfiprintf_r+0x1e8>)
 8016bb2:	f7e9 fb15 	bl	80001e0 <memchr>
 8016bb6:	9a04      	ldr	r2, [sp, #16]
 8016bb8:	b9d8      	cbnz	r0, 8016bf2 <_svfiprintf_r+0xe6>
 8016bba:	06d0      	lsls	r0, r2, #27
 8016bbc:	bf44      	itt	mi
 8016bbe:	2320      	movmi	r3, #32
 8016bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016bc4:	0711      	lsls	r1, r2, #28
 8016bc6:	bf44      	itt	mi
 8016bc8:	232b      	movmi	r3, #43	; 0x2b
 8016bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016bce:	f89a 3000 	ldrb.w	r3, [sl]
 8016bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8016bd4:	d015      	beq.n	8016c02 <_svfiprintf_r+0xf6>
 8016bd6:	9a07      	ldr	r2, [sp, #28]
 8016bd8:	4654      	mov	r4, sl
 8016bda:	2000      	movs	r0, #0
 8016bdc:	f04f 0c0a 	mov.w	ip, #10
 8016be0:	4621      	mov	r1, r4
 8016be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016be6:	3b30      	subs	r3, #48	; 0x30
 8016be8:	2b09      	cmp	r3, #9
 8016bea:	d94d      	bls.n	8016c88 <_svfiprintf_r+0x17c>
 8016bec:	b1b0      	cbz	r0, 8016c1c <_svfiprintf_r+0x110>
 8016bee:	9207      	str	r2, [sp, #28]
 8016bf0:	e014      	b.n	8016c1c <_svfiprintf_r+0x110>
 8016bf2:	eba0 0308 	sub.w	r3, r0, r8
 8016bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8016bfa:	4313      	orrs	r3, r2
 8016bfc:	9304      	str	r3, [sp, #16]
 8016bfe:	46a2      	mov	sl, r4
 8016c00:	e7d2      	b.n	8016ba8 <_svfiprintf_r+0x9c>
 8016c02:	9b03      	ldr	r3, [sp, #12]
 8016c04:	1d19      	adds	r1, r3, #4
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	9103      	str	r1, [sp, #12]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	bfbb      	ittet	lt
 8016c0e:	425b      	neglt	r3, r3
 8016c10:	f042 0202 	orrlt.w	r2, r2, #2
 8016c14:	9307      	strge	r3, [sp, #28]
 8016c16:	9307      	strlt	r3, [sp, #28]
 8016c18:	bfb8      	it	lt
 8016c1a:	9204      	strlt	r2, [sp, #16]
 8016c1c:	7823      	ldrb	r3, [r4, #0]
 8016c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8016c20:	d10c      	bne.n	8016c3c <_svfiprintf_r+0x130>
 8016c22:	7863      	ldrb	r3, [r4, #1]
 8016c24:	2b2a      	cmp	r3, #42	; 0x2a
 8016c26:	d134      	bne.n	8016c92 <_svfiprintf_r+0x186>
 8016c28:	9b03      	ldr	r3, [sp, #12]
 8016c2a:	1d1a      	adds	r2, r3, #4
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	9203      	str	r2, [sp, #12]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	bfb8      	it	lt
 8016c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c38:	3402      	adds	r4, #2
 8016c3a:	9305      	str	r3, [sp, #20]
 8016c3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016d04 <_svfiprintf_r+0x1f8>
 8016c40:	7821      	ldrb	r1, [r4, #0]
 8016c42:	2203      	movs	r2, #3
 8016c44:	4650      	mov	r0, sl
 8016c46:	f7e9 facb 	bl	80001e0 <memchr>
 8016c4a:	b138      	cbz	r0, 8016c5c <_svfiprintf_r+0x150>
 8016c4c:	9b04      	ldr	r3, [sp, #16]
 8016c4e:	eba0 000a 	sub.w	r0, r0, sl
 8016c52:	2240      	movs	r2, #64	; 0x40
 8016c54:	4082      	lsls	r2, r0
 8016c56:	4313      	orrs	r3, r2
 8016c58:	3401      	adds	r4, #1
 8016c5a:	9304      	str	r3, [sp, #16]
 8016c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c60:	4825      	ldr	r0, [pc, #148]	; (8016cf8 <_svfiprintf_r+0x1ec>)
 8016c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c66:	2206      	movs	r2, #6
 8016c68:	f7e9 faba 	bl	80001e0 <memchr>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d038      	beq.n	8016ce2 <_svfiprintf_r+0x1d6>
 8016c70:	4b22      	ldr	r3, [pc, #136]	; (8016cfc <_svfiprintf_r+0x1f0>)
 8016c72:	bb1b      	cbnz	r3, 8016cbc <_svfiprintf_r+0x1b0>
 8016c74:	9b03      	ldr	r3, [sp, #12]
 8016c76:	3307      	adds	r3, #7
 8016c78:	f023 0307 	bic.w	r3, r3, #7
 8016c7c:	3308      	adds	r3, #8
 8016c7e:	9303      	str	r3, [sp, #12]
 8016c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c82:	4433      	add	r3, r6
 8016c84:	9309      	str	r3, [sp, #36]	; 0x24
 8016c86:	e768      	b.n	8016b5a <_svfiprintf_r+0x4e>
 8016c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c8c:	460c      	mov	r4, r1
 8016c8e:	2001      	movs	r0, #1
 8016c90:	e7a6      	b.n	8016be0 <_svfiprintf_r+0xd4>
 8016c92:	2300      	movs	r3, #0
 8016c94:	3401      	adds	r4, #1
 8016c96:	9305      	str	r3, [sp, #20]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	f04f 0c0a 	mov.w	ip, #10
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ca4:	3a30      	subs	r2, #48	; 0x30
 8016ca6:	2a09      	cmp	r2, #9
 8016ca8:	d903      	bls.n	8016cb2 <_svfiprintf_r+0x1a6>
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d0c6      	beq.n	8016c3c <_svfiprintf_r+0x130>
 8016cae:	9105      	str	r1, [sp, #20]
 8016cb0:	e7c4      	b.n	8016c3c <_svfiprintf_r+0x130>
 8016cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	2301      	movs	r3, #1
 8016cba:	e7f0      	b.n	8016c9e <_svfiprintf_r+0x192>
 8016cbc:	ab03      	add	r3, sp, #12
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	462a      	mov	r2, r5
 8016cc2:	4b0f      	ldr	r3, [pc, #60]	; (8016d00 <_svfiprintf_r+0x1f4>)
 8016cc4:	a904      	add	r1, sp, #16
 8016cc6:	4638      	mov	r0, r7
 8016cc8:	f3af 8000 	nop.w
 8016ccc:	1c42      	adds	r2, r0, #1
 8016cce:	4606      	mov	r6, r0
 8016cd0:	d1d6      	bne.n	8016c80 <_svfiprintf_r+0x174>
 8016cd2:	89ab      	ldrh	r3, [r5, #12]
 8016cd4:	065b      	lsls	r3, r3, #25
 8016cd6:	f53f af2d 	bmi.w	8016b34 <_svfiprintf_r+0x28>
 8016cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cdc:	b01d      	add	sp, #116	; 0x74
 8016cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce2:	ab03      	add	r3, sp, #12
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	462a      	mov	r2, r5
 8016ce8:	4b05      	ldr	r3, [pc, #20]	; (8016d00 <_svfiprintf_r+0x1f4>)
 8016cea:	a904      	add	r1, sp, #16
 8016cec:	4638      	mov	r0, r7
 8016cee:	f000 f9bd 	bl	801706c <_printf_i>
 8016cf2:	e7eb      	b.n	8016ccc <_svfiprintf_r+0x1c0>
 8016cf4:	0801b4d8 	.word	0x0801b4d8
 8016cf8:	0801b4e2 	.word	0x0801b4e2
 8016cfc:	00000000 	.word	0x00000000
 8016d00:	08016a59 	.word	0x08016a59
 8016d04:	0801b4de 	.word	0x0801b4de

08016d08 <__sfputc_r>:
 8016d08:	6893      	ldr	r3, [r2, #8]
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	b410      	push	{r4}
 8016d10:	6093      	str	r3, [r2, #8]
 8016d12:	da08      	bge.n	8016d26 <__sfputc_r+0x1e>
 8016d14:	6994      	ldr	r4, [r2, #24]
 8016d16:	42a3      	cmp	r3, r4
 8016d18:	db01      	blt.n	8016d1e <__sfputc_r+0x16>
 8016d1a:	290a      	cmp	r1, #10
 8016d1c:	d103      	bne.n	8016d26 <__sfputc_r+0x1e>
 8016d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d22:	f7ff bbd2 	b.w	80164ca <__swbuf_r>
 8016d26:	6813      	ldr	r3, [r2, #0]
 8016d28:	1c58      	adds	r0, r3, #1
 8016d2a:	6010      	str	r0, [r2, #0]
 8016d2c:	7019      	strb	r1, [r3, #0]
 8016d2e:	4608      	mov	r0, r1
 8016d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <__sfputs_r>:
 8016d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d38:	4606      	mov	r6, r0
 8016d3a:	460f      	mov	r7, r1
 8016d3c:	4614      	mov	r4, r2
 8016d3e:	18d5      	adds	r5, r2, r3
 8016d40:	42ac      	cmp	r4, r5
 8016d42:	d101      	bne.n	8016d48 <__sfputs_r+0x12>
 8016d44:	2000      	movs	r0, #0
 8016d46:	e007      	b.n	8016d58 <__sfputs_r+0x22>
 8016d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d4c:	463a      	mov	r2, r7
 8016d4e:	4630      	mov	r0, r6
 8016d50:	f7ff ffda 	bl	8016d08 <__sfputc_r>
 8016d54:	1c43      	adds	r3, r0, #1
 8016d56:	d1f3      	bne.n	8016d40 <__sfputs_r+0xa>
 8016d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d5c <_vfiprintf_r>:
 8016d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d60:	460d      	mov	r5, r1
 8016d62:	b09d      	sub	sp, #116	; 0x74
 8016d64:	4614      	mov	r4, r2
 8016d66:	4698      	mov	r8, r3
 8016d68:	4606      	mov	r6, r0
 8016d6a:	b118      	cbz	r0, 8016d74 <_vfiprintf_r+0x18>
 8016d6c:	6a03      	ldr	r3, [r0, #32]
 8016d6e:	b90b      	cbnz	r3, 8016d74 <_vfiprintf_r+0x18>
 8016d70:	f7ff faa4 	bl	80162bc <__sinit>
 8016d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d76:	07d9      	lsls	r1, r3, #31
 8016d78:	d405      	bmi.n	8016d86 <_vfiprintf_r+0x2a>
 8016d7a:	89ab      	ldrh	r3, [r5, #12]
 8016d7c:	059a      	lsls	r2, r3, #22
 8016d7e:	d402      	bmi.n	8016d86 <_vfiprintf_r+0x2a>
 8016d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d82:	f7ff fd3a 	bl	80167fa <__retarget_lock_acquire_recursive>
 8016d86:	89ab      	ldrh	r3, [r5, #12]
 8016d88:	071b      	lsls	r3, r3, #28
 8016d8a:	d501      	bpl.n	8016d90 <_vfiprintf_r+0x34>
 8016d8c:	692b      	ldr	r3, [r5, #16]
 8016d8e:	b99b      	cbnz	r3, 8016db8 <_vfiprintf_r+0x5c>
 8016d90:	4629      	mov	r1, r5
 8016d92:	4630      	mov	r0, r6
 8016d94:	f7ff fbd6 	bl	8016544 <__swsetup_r>
 8016d98:	b170      	cbz	r0, 8016db8 <_vfiprintf_r+0x5c>
 8016d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d9c:	07dc      	lsls	r4, r3, #31
 8016d9e:	d504      	bpl.n	8016daa <_vfiprintf_r+0x4e>
 8016da0:	f04f 30ff 	mov.w	r0, #4294967295
 8016da4:	b01d      	add	sp, #116	; 0x74
 8016da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016daa:	89ab      	ldrh	r3, [r5, #12]
 8016dac:	0598      	lsls	r0, r3, #22
 8016dae:	d4f7      	bmi.n	8016da0 <_vfiprintf_r+0x44>
 8016db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016db2:	f7ff fd23 	bl	80167fc <__retarget_lock_release_recursive>
 8016db6:	e7f3      	b.n	8016da0 <_vfiprintf_r+0x44>
 8016db8:	2300      	movs	r3, #0
 8016dba:	9309      	str	r3, [sp, #36]	; 0x24
 8016dbc:	2320      	movs	r3, #32
 8016dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dc6:	2330      	movs	r3, #48	; 0x30
 8016dc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016f7c <_vfiprintf_r+0x220>
 8016dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016dd0:	f04f 0901 	mov.w	r9, #1
 8016dd4:	4623      	mov	r3, r4
 8016dd6:	469a      	mov	sl, r3
 8016dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ddc:	b10a      	cbz	r2, 8016de2 <_vfiprintf_r+0x86>
 8016dde:	2a25      	cmp	r2, #37	; 0x25
 8016de0:	d1f9      	bne.n	8016dd6 <_vfiprintf_r+0x7a>
 8016de2:	ebba 0b04 	subs.w	fp, sl, r4
 8016de6:	d00b      	beq.n	8016e00 <_vfiprintf_r+0xa4>
 8016de8:	465b      	mov	r3, fp
 8016dea:	4622      	mov	r2, r4
 8016dec:	4629      	mov	r1, r5
 8016dee:	4630      	mov	r0, r6
 8016df0:	f7ff ffa1 	bl	8016d36 <__sfputs_r>
 8016df4:	3001      	adds	r0, #1
 8016df6:	f000 80a9 	beq.w	8016f4c <_vfiprintf_r+0x1f0>
 8016dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dfc:	445a      	add	r2, fp
 8016dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8016e00:	f89a 3000 	ldrb.w	r3, [sl]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f000 80a1 	beq.w	8016f4c <_vfiprintf_r+0x1f0>
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e14:	f10a 0a01 	add.w	sl, sl, #1
 8016e18:	9304      	str	r3, [sp, #16]
 8016e1a:	9307      	str	r3, [sp, #28]
 8016e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e20:	931a      	str	r3, [sp, #104]	; 0x68
 8016e22:	4654      	mov	r4, sl
 8016e24:	2205      	movs	r2, #5
 8016e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e2a:	4854      	ldr	r0, [pc, #336]	; (8016f7c <_vfiprintf_r+0x220>)
 8016e2c:	f7e9 f9d8 	bl	80001e0 <memchr>
 8016e30:	9a04      	ldr	r2, [sp, #16]
 8016e32:	b9d8      	cbnz	r0, 8016e6c <_vfiprintf_r+0x110>
 8016e34:	06d1      	lsls	r1, r2, #27
 8016e36:	bf44      	itt	mi
 8016e38:	2320      	movmi	r3, #32
 8016e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e3e:	0713      	lsls	r3, r2, #28
 8016e40:	bf44      	itt	mi
 8016e42:	232b      	movmi	r3, #43	; 0x2b
 8016e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e48:	f89a 3000 	ldrb.w	r3, [sl]
 8016e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e4e:	d015      	beq.n	8016e7c <_vfiprintf_r+0x120>
 8016e50:	9a07      	ldr	r2, [sp, #28]
 8016e52:	4654      	mov	r4, sl
 8016e54:	2000      	movs	r0, #0
 8016e56:	f04f 0c0a 	mov.w	ip, #10
 8016e5a:	4621      	mov	r1, r4
 8016e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e60:	3b30      	subs	r3, #48	; 0x30
 8016e62:	2b09      	cmp	r3, #9
 8016e64:	d94d      	bls.n	8016f02 <_vfiprintf_r+0x1a6>
 8016e66:	b1b0      	cbz	r0, 8016e96 <_vfiprintf_r+0x13a>
 8016e68:	9207      	str	r2, [sp, #28]
 8016e6a:	e014      	b.n	8016e96 <_vfiprintf_r+0x13a>
 8016e6c:	eba0 0308 	sub.w	r3, r0, r8
 8016e70:	fa09 f303 	lsl.w	r3, r9, r3
 8016e74:	4313      	orrs	r3, r2
 8016e76:	9304      	str	r3, [sp, #16]
 8016e78:	46a2      	mov	sl, r4
 8016e7a:	e7d2      	b.n	8016e22 <_vfiprintf_r+0xc6>
 8016e7c:	9b03      	ldr	r3, [sp, #12]
 8016e7e:	1d19      	adds	r1, r3, #4
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	9103      	str	r1, [sp, #12]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	bfbb      	ittet	lt
 8016e88:	425b      	neglt	r3, r3
 8016e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e8e:	9307      	strge	r3, [sp, #28]
 8016e90:	9307      	strlt	r3, [sp, #28]
 8016e92:	bfb8      	it	lt
 8016e94:	9204      	strlt	r2, [sp, #16]
 8016e96:	7823      	ldrb	r3, [r4, #0]
 8016e98:	2b2e      	cmp	r3, #46	; 0x2e
 8016e9a:	d10c      	bne.n	8016eb6 <_vfiprintf_r+0x15a>
 8016e9c:	7863      	ldrb	r3, [r4, #1]
 8016e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8016ea0:	d134      	bne.n	8016f0c <_vfiprintf_r+0x1b0>
 8016ea2:	9b03      	ldr	r3, [sp, #12]
 8016ea4:	1d1a      	adds	r2, r3, #4
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	9203      	str	r2, [sp, #12]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	bfb8      	it	lt
 8016eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eb2:	3402      	adds	r4, #2
 8016eb4:	9305      	str	r3, [sp, #20]
 8016eb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016f8c <_vfiprintf_r+0x230>
 8016eba:	7821      	ldrb	r1, [r4, #0]
 8016ebc:	2203      	movs	r2, #3
 8016ebe:	4650      	mov	r0, sl
 8016ec0:	f7e9 f98e 	bl	80001e0 <memchr>
 8016ec4:	b138      	cbz	r0, 8016ed6 <_vfiprintf_r+0x17a>
 8016ec6:	9b04      	ldr	r3, [sp, #16]
 8016ec8:	eba0 000a 	sub.w	r0, r0, sl
 8016ecc:	2240      	movs	r2, #64	; 0x40
 8016ece:	4082      	lsls	r2, r0
 8016ed0:	4313      	orrs	r3, r2
 8016ed2:	3401      	adds	r4, #1
 8016ed4:	9304      	str	r3, [sp, #16]
 8016ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eda:	4829      	ldr	r0, [pc, #164]	; (8016f80 <_vfiprintf_r+0x224>)
 8016edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ee0:	2206      	movs	r2, #6
 8016ee2:	f7e9 f97d 	bl	80001e0 <memchr>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d03f      	beq.n	8016f6a <_vfiprintf_r+0x20e>
 8016eea:	4b26      	ldr	r3, [pc, #152]	; (8016f84 <_vfiprintf_r+0x228>)
 8016eec:	bb1b      	cbnz	r3, 8016f36 <_vfiprintf_r+0x1da>
 8016eee:	9b03      	ldr	r3, [sp, #12]
 8016ef0:	3307      	adds	r3, #7
 8016ef2:	f023 0307 	bic.w	r3, r3, #7
 8016ef6:	3308      	adds	r3, #8
 8016ef8:	9303      	str	r3, [sp, #12]
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	443b      	add	r3, r7
 8016efe:	9309      	str	r3, [sp, #36]	; 0x24
 8016f00:	e768      	b.n	8016dd4 <_vfiprintf_r+0x78>
 8016f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f06:	460c      	mov	r4, r1
 8016f08:	2001      	movs	r0, #1
 8016f0a:	e7a6      	b.n	8016e5a <_vfiprintf_r+0xfe>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	3401      	adds	r4, #1
 8016f10:	9305      	str	r3, [sp, #20]
 8016f12:	4619      	mov	r1, r3
 8016f14:	f04f 0c0a 	mov.w	ip, #10
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f1e:	3a30      	subs	r2, #48	; 0x30
 8016f20:	2a09      	cmp	r2, #9
 8016f22:	d903      	bls.n	8016f2c <_vfiprintf_r+0x1d0>
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d0c6      	beq.n	8016eb6 <_vfiprintf_r+0x15a>
 8016f28:	9105      	str	r1, [sp, #20]
 8016f2a:	e7c4      	b.n	8016eb6 <_vfiprintf_r+0x15a>
 8016f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f30:	4604      	mov	r4, r0
 8016f32:	2301      	movs	r3, #1
 8016f34:	e7f0      	b.n	8016f18 <_vfiprintf_r+0x1bc>
 8016f36:	ab03      	add	r3, sp, #12
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	4b12      	ldr	r3, [pc, #72]	; (8016f88 <_vfiprintf_r+0x22c>)
 8016f3e:	a904      	add	r1, sp, #16
 8016f40:	4630      	mov	r0, r6
 8016f42:	f3af 8000 	nop.w
 8016f46:	4607      	mov	r7, r0
 8016f48:	1c78      	adds	r0, r7, #1
 8016f4a:	d1d6      	bne.n	8016efa <_vfiprintf_r+0x19e>
 8016f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016f4e:	07d9      	lsls	r1, r3, #31
 8016f50:	d405      	bmi.n	8016f5e <_vfiprintf_r+0x202>
 8016f52:	89ab      	ldrh	r3, [r5, #12]
 8016f54:	059a      	lsls	r2, r3, #22
 8016f56:	d402      	bmi.n	8016f5e <_vfiprintf_r+0x202>
 8016f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016f5a:	f7ff fc4f 	bl	80167fc <__retarget_lock_release_recursive>
 8016f5e:	89ab      	ldrh	r3, [r5, #12]
 8016f60:	065b      	lsls	r3, r3, #25
 8016f62:	f53f af1d 	bmi.w	8016da0 <_vfiprintf_r+0x44>
 8016f66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f68:	e71c      	b.n	8016da4 <_vfiprintf_r+0x48>
 8016f6a:	ab03      	add	r3, sp, #12
 8016f6c:	9300      	str	r3, [sp, #0]
 8016f6e:	462a      	mov	r2, r5
 8016f70:	4b05      	ldr	r3, [pc, #20]	; (8016f88 <_vfiprintf_r+0x22c>)
 8016f72:	a904      	add	r1, sp, #16
 8016f74:	4630      	mov	r0, r6
 8016f76:	f000 f879 	bl	801706c <_printf_i>
 8016f7a:	e7e4      	b.n	8016f46 <_vfiprintf_r+0x1ea>
 8016f7c:	0801b4d8 	.word	0x0801b4d8
 8016f80:	0801b4e2 	.word	0x0801b4e2
 8016f84:	00000000 	.word	0x00000000
 8016f88:	08016d37 	.word	0x08016d37
 8016f8c:	0801b4de 	.word	0x0801b4de

08016f90 <_printf_common>:
 8016f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f94:	4616      	mov	r6, r2
 8016f96:	4699      	mov	r9, r3
 8016f98:	688a      	ldr	r2, [r1, #8]
 8016f9a:	690b      	ldr	r3, [r1, #16]
 8016f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	bfb8      	it	lt
 8016fa4:	4613      	movlt	r3, r2
 8016fa6:	6033      	str	r3, [r6, #0]
 8016fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fac:	4607      	mov	r7, r0
 8016fae:	460c      	mov	r4, r1
 8016fb0:	b10a      	cbz	r2, 8016fb6 <_printf_common+0x26>
 8016fb2:	3301      	adds	r3, #1
 8016fb4:	6033      	str	r3, [r6, #0]
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	0699      	lsls	r1, r3, #26
 8016fba:	bf42      	ittt	mi
 8016fbc:	6833      	ldrmi	r3, [r6, #0]
 8016fbe:	3302      	addmi	r3, #2
 8016fc0:	6033      	strmi	r3, [r6, #0]
 8016fc2:	6825      	ldr	r5, [r4, #0]
 8016fc4:	f015 0506 	ands.w	r5, r5, #6
 8016fc8:	d106      	bne.n	8016fd8 <_printf_common+0x48>
 8016fca:	f104 0a19 	add.w	sl, r4, #25
 8016fce:	68e3      	ldr	r3, [r4, #12]
 8016fd0:	6832      	ldr	r2, [r6, #0]
 8016fd2:	1a9b      	subs	r3, r3, r2
 8016fd4:	42ab      	cmp	r3, r5
 8016fd6:	dc26      	bgt.n	8017026 <_printf_common+0x96>
 8016fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fdc:	1e13      	subs	r3, r2, #0
 8016fde:	6822      	ldr	r2, [r4, #0]
 8016fe0:	bf18      	it	ne
 8016fe2:	2301      	movne	r3, #1
 8016fe4:	0692      	lsls	r2, r2, #26
 8016fe6:	d42b      	bmi.n	8017040 <_printf_common+0xb0>
 8016fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fec:	4649      	mov	r1, r9
 8016fee:	4638      	mov	r0, r7
 8016ff0:	47c0      	blx	r8
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	d01e      	beq.n	8017034 <_printf_common+0xa4>
 8016ff6:	6823      	ldr	r3, [r4, #0]
 8016ff8:	6922      	ldr	r2, [r4, #16]
 8016ffa:	f003 0306 	and.w	r3, r3, #6
 8016ffe:	2b04      	cmp	r3, #4
 8017000:	bf02      	ittt	eq
 8017002:	68e5      	ldreq	r5, [r4, #12]
 8017004:	6833      	ldreq	r3, [r6, #0]
 8017006:	1aed      	subeq	r5, r5, r3
 8017008:	68a3      	ldr	r3, [r4, #8]
 801700a:	bf0c      	ite	eq
 801700c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017010:	2500      	movne	r5, #0
 8017012:	4293      	cmp	r3, r2
 8017014:	bfc4      	itt	gt
 8017016:	1a9b      	subgt	r3, r3, r2
 8017018:	18ed      	addgt	r5, r5, r3
 801701a:	2600      	movs	r6, #0
 801701c:	341a      	adds	r4, #26
 801701e:	42b5      	cmp	r5, r6
 8017020:	d11a      	bne.n	8017058 <_printf_common+0xc8>
 8017022:	2000      	movs	r0, #0
 8017024:	e008      	b.n	8017038 <_printf_common+0xa8>
 8017026:	2301      	movs	r3, #1
 8017028:	4652      	mov	r2, sl
 801702a:	4649      	mov	r1, r9
 801702c:	4638      	mov	r0, r7
 801702e:	47c0      	blx	r8
 8017030:	3001      	adds	r0, #1
 8017032:	d103      	bne.n	801703c <_printf_common+0xac>
 8017034:	f04f 30ff 	mov.w	r0, #4294967295
 8017038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801703c:	3501      	adds	r5, #1
 801703e:	e7c6      	b.n	8016fce <_printf_common+0x3e>
 8017040:	18e1      	adds	r1, r4, r3
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	2030      	movs	r0, #48	; 0x30
 8017046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801704a:	4422      	add	r2, r4
 801704c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017054:	3302      	adds	r3, #2
 8017056:	e7c7      	b.n	8016fe8 <_printf_common+0x58>
 8017058:	2301      	movs	r3, #1
 801705a:	4622      	mov	r2, r4
 801705c:	4649      	mov	r1, r9
 801705e:	4638      	mov	r0, r7
 8017060:	47c0      	blx	r8
 8017062:	3001      	adds	r0, #1
 8017064:	d0e6      	beq.n	8017034 <_printf_common+0xa4>
 8017066:	3601      	adds	r6, #1
 8017068:	e7d9      	b.n	801701e <_printf_common+0x8e>
	...

0801706c <_printf_i>:
 801706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017070:	7e0f      	ldrb	r7, [r1, #24]
 8017072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017074:	2f78      	cmp	r7, #120	; 0x78
 8017076:	4691      	mov	r9, r2
 8017078:	4680      	mov	r8, r0
 801707a:	460c      	mov	r4, r1
 801707c:	469a      	mov	sl, r3
 801707e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017082:	d807      	bhi.n	8017094 <_printf_i+0x28>
 8017084:	2f62      	cmp	r7, #98	; 0x62
 8017086:	d80a      	bhi.n	801709e <_printf_i+0x32>
 8017088:	2f00      	cmp	r7, #0
 801708a:	f000 80d4 	beq.w	8017236 <_printf_i+0x1ca>
 801708e:	2f58      	cmp	r7, #88	; 0x58
 8017090:	f000 80c0 	beq.w	8017214 <_printf_i+0x1a8>
 8017094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801709c:	e03a      	b.n	8017114 <_printf_i+0xa8>
 801709e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80170a2:	2b15      	cmp	r3, #21
 80170a4:	d8f6      	bhi.n	8017094 <_printf_i+0x28>
 80170a6:	a101      	add	r1, pc, #4	; (adr r1, 80170ac <_printf_i+0x40>)
 80170a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80170ac:	08017105 	.word	0x08017105
 80170b0:	08017119 	.word	0x08017119
 80170b4:	08017095 	.word	0x08017095
 80170b8:	08017095 	.word	0x08017095
 80170bc:	08017095 	.word	0x08017095
 80170c0:	08017095 	.word	0x08017095
 80170c4:	08017119 	.word	0x08017119
 80170c8:	08017095 	.word	0x08017095
 80170cc:	08017095 	.word	0x08017095
 80170d0:	08017095 	.word	0x08017095
 80170d4:	08017095 	.word	0x08017095
 80170d8:	0801721d 	.word	0x0801721d
 80170dc:	08017145 	.word	0x08017145
 80170e0:	080171d7 	.word	0x080171d7
 80170e4:	08017095 	.word	0x08017095
 80170e8:	08017095 	.word	0x08017095
 80170ec:	0801723f 	.word	0x0801723f
 80170f0:	08017095 	.word	0x08017095
 80170f4:	08017145 	.word	0x08017145
 80170f8:	08017095 	.word	0x08017095
 80170fc:	08017095 	.word	0x08017095
 8017100:	080171df 	.word	0x080171df
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	1d1a      	adds	r2, r3, #4
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	602a      	str	r2, [r5, #0]
 801710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017114:	2301      	movs	r3, #1
 8017116:	e09f      	b.n	8017258 <_printf_i+0x1ec>
 8017118:	6820      	ldr	r0, [r4, #0]
 801711a:	682b      	ldr	r3, [r5, #0]
 801711c:	0607      	lsls	r7, r0, #24
 801711e:	f103 0104 	add.w	r1, r3, #4
 8017122:	6029      	str	r1, [r5, #0]
 8017124:	d501      	bpl.n	801712a <_printf_i+0xbe>
 8017126:	681e      	ldr	r6, [r3, #0]
 8017128:	e003      	b.n	8017132 <_printf_i+0xc6>
 801712a:	0646      	lsls	r6, r0, #25
 801712c:	d5fb      	bpl.n	8017126 <_printf_i+0xba>
 801712e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017132:	2e00      	cmp	r6, #0
 8017134:	da03      	bge.n	801713e <_printf_i+0xd2>
 8017136:	232d      	movs	r3, #45	; 0x2d
 8017138:	4276      	negs	r6, r6
 801713a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801713e:	485a      	ldr	r0, [pc, #360]	; (80172a8 <_printf_i+0x23c>)
 8017140:	230a      	movs	r3, #10
 8017142:	e012      	b.n	801716a <_printf_i+0xfe>
 8017144:	682b      	ldr	r3, [r5, #0]
 8017146:	6820      	ldr	r0, [r4, #0]
 8017148:	1d19      	adds	r1, r3, #4
 801714a:	6029      	str	r1, [r5, #0]
 801714c:	0605      	lsls	r5, r0, #24
 801714e:	d501      	bpl.n	8017154 <_printf_i+0xe8>
 8017150:	681e      	ldr	r6, [r3, #0]
 8017152:	e002      	b.n	801715a <_printf_i+0xee>
 8017154:	0641      	lsls	r1, r0, #25
 8017156:	d5fb      	bpl.n	8017150 <_printf_i+0xe4>
 8017158:	881e      	ldrh	r6, [r3, #0]
 801715a:	4853      	ldr	r0, [pc, #332]	; (80172a8 <_printf_i+0x23c>)
 801715c:	2f6f      	cmp	r7, #111	; 0x6f
 801715e:	bf0c      	ite	eq
 8017160:	2308      	moveq	r3, #8
 8017162:	230a      	movne	r3, #10
 8017164:	2100      	movs	r1, #0
 8017166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801716a:	6865      	ldr	r5, [r4, #4]
 801716c:	60a5      	str	r5, [r4, #8]
 801716e:	2d00      	cmp	r5, #0
 8017170:	bfa2      	ittt	ge
 8017172:	6821      	ldrge	r1, [r4, #0]
 8017174:	f021 0104 	bicge.w	r1, r1, #4
 8017178:	6021      	strge	r1, [r4, #0]
 801717a:	b90e      	cbnz	r6, 8017180 <_printf_i+0x114>
 801717c:	2d00      	cmp	r5, #0
 801717e:	d04b      	beq.n	8017218 <_printf_i+0x1ac>
 8017180:	4615      	mov	r5, r2
 8017182:	fbb6 f1f3 	udiv	r1, r6, r3
 8017186:	fb03 6711 	mls	r7, r3, r1, r6
 801718a:	5dc7      	ldrb	r7, [r0, r7]
 801718c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017190:	4637      	mov	r7, r6
 8017192:	42bb      	cmp	r3, r7
 8017194:	460e      	mov	r6, r1
 8017196:	d9f4      	bls.n	8017182 <_printf_i+0x116>
 8017198:	2b08      	cmp	r3, #8
 801719a:	d10b      	bne.n	80171b4 <_printf_i+0x148>
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	07de      	lsls	r6, r3, #31
 80171a0:	d508      	bpl.n	80171b4 <_printf_i+0x148>
 80171a2:	6923      	ldr	r3, [r4, #16]
 80171a4:	6861      	ldr	r1, [r4, #4]
 80171a6:	4299      	cmp	r1, r3
 80171a8:	bfde      	ittt	le
 80171aa:	2330      	movle	r3, #48	; 0x30
 80171ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80171b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80171b4:	1b52      	subs	r2, r2, r5
 80171b6:	6122      	str	r2, [r4, #16]
 80171b8:	f8cd a000 	str.w	sl, [sp]
 80171bc:	464b      	mov	r3, r9
 80171be:	aa03      	add	r2, sp, #12
 80171c0:	4621      	mov	r1, r4
 80171c2:	4640      	mov	r0, r8
 80171c4:	f7ff fee4 	bl	8016f90 <_printf_common>
 80171c8:	3001      	adds	r0, #1
 80171ca:	d14a      	bne.n	8017262 <_printf_i+0x1f6>
 80171cc:	f04f 30ff 	mov.w	r0, #4294967295
 80171d0:	b004      	add	sp, #16
 80171d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171d6:	6823      	ldr	r3, [r4, #0]
 80171d8:	f043 0320 	orr.w	r3, r3, #32
 80171dc:	6023      	str	r3, [r4, #0]
 80171de:	4833      	ldr	r0, [pc, #204]	; (80172ac <_printf_i+0x240>)
 80171e0:	2778      	movs	r7, #120	; 0x78
 80171e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171e6:	6823      	ldr	r3, [r4, #0]
 80171e8:	6829      	ldr	r1, [r5, #0]
 80171ea:	061f      	lsls	r7, r3, #24
 80171ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80171f0:	d402      	bmi.n	80171f8 <_printf_i+0x18c>
 80171f2:	065f      	lsls	r7, r3, #25
 80171f4:	bf48      	it	mi
 80171f6:	b2b6      	uxthmi	r6, r6
 80171f8:	07df      	lsls	r7, r3, #31
 80171fa:	bf48      	it	mi
 80171fc:	f043 0320 	orrmi.w	r3, r3, #32
 8017200:	6029      	str	r1, [r5, #0]
 8017202:	bf48      	it	mi
 8017204:	6023      	strmi	r3, [r4, #0]
 8017206:	b91e      	cbnz	r6, 8017210 <_printf_i+0x1a4>
 8017208:	6823      	ldr	r3, [r4, #0]
 801720a:	f023 0320 	bic.w	r3, r3, #32
 801720e:	6023      	str	r3, [r4, #0]
 8017210:	2310      	movs	r3, #16
 8017212:	e7a7      	b.n	8017164 <_printf_i+0xf8>
 8017214:	4824      	ldr	r0, [pc, #144]	; (80172a8 <_printf_i+0x23c>)
 8017216:	e7e4      	b.n	80171e2 <_printf_i+0x176>
 8017218:	4615      	mov	r5, r2
 801721a:	e7bd      	b.n	8017198 <_printf_i+0x12c>
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	6826      	ldr	r6, [r4, #0]
 8017220:	6961      	ldr	r1, [r4, #20]
 8017222:	1d18      	adds	r0, r3, #4
 8017224:	6028      	str	r0, [r5, #0]
 8017226:	0635      	lsls	r5, r6, #24
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	d501      	bpl.n	8017230 <_printf_i+0x1c4>
 801722c:	6019      	str	r1, [r3, #0]
 801722e:	e002      	b.n	8017236 <_printf_i+0x1ca>
 8017230:	0670      	lsls	r0, r6, #25
 8017232:	d5fb      	bpl.n	801722c <_printf_i+0x1c0>
 8017234:	8019      	strh	r1, [r3, #0]
 8017236:	2300      	movs	r3, #0
 8017238:	6123      	str	r3, [r4, #16]
 801723a:	4615      	mov	r5, r2
 801723c:	e7bc      	b.n	80171b8 <_printf_i+0x14c>
 801723e:	682b      	ldr	r3, [r5, #0]
 8017240:	1d1a      	adds	r2, r3, #4
 8017242:	602a      	str	r2, [r5, #0]
 8017244:	681d      	ldr	r5, [r3, #0]
 8017246:	6862      	ldr	r2, [r4, #4]
 8017248:	2100      	movs	r1, #0
 801724a:	4628      	mov	r0, r5
 801724c:	f7e8 ffc8 	bl	80001e0 <memchr>
 8017250:	b108      	cbz	r0, 8017256 <_printf_i+0x1ea>
 8017252:	1b40      	subs	r0, r0, r5
 8017254:	6060      	str	r0, [r4, #4]
 8017256:	6863      	ldr	r3, [r4, #4]
 8017258:	6123      	str	r3, [r4, #16]
 801725a:	2300      	movs	r3, #0
 801725c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017260:	e7aa      	b.n	80171b8 <_printf_i+0x14c>
 8017262:	6923      	ldr	r3, [r4, #16]
 8017264:	462a      	mov	r2, r5
 8017266:	4649      	mov	r1, r9
 8017268:	4640      	mov	r0, r8
 801726a:	47d0      	blx	sl
 801726c:	3001      	adds	r0, #1
 801726e:	d0ad      	beq.n	80171cc <_printf_i+0x160>
 8017270:	6823      	ldr	r3, [r4, #0]
 8017272:	079b      	lsls	r3, r3, #30
 8017274:	d413      	bmi.n	801729e <_printf_i+0x232>
 8017276:	68e0      	ldr	r0, [r4, #12]
 8017278:	9b03      	ldr	r3, [sp, #12]
 801727a:	4298      	cmp	r0, r3
 801727c:	bfb8      	it	lt
 801727e:	4618      	movlt	r0, r3
 8017280:	e7a6      	b.n	80171d0 <_printf_i+0x164>
 8017282:	2301      	movs	r3, #1
 8017284:	4632      	mov	r2, r6
 8017286:	4649      	mov	r1, r9
 8017288:	4640      	mov	r0, r8
 801728a:	47d0      	blx	sl
 801728c:	3001      	adds	r0, #1
 801728e:	d09d      	beq.n	80171cc <_printf_i+0x160>
 8017290:	3501      	adds	r5, #1
 8017292:	68e3      	ldr	r3, [r4, #12]
 8017294:	9903      	ldr	r1, [sp, #12]
 8017296:	1a5b      	subs	r3, r3, r1
 8017298:	42ab      	cmp	r3, r5
 801729a:	dcf2      	bgt.n	8017282 <_printf_i+0x216>
 801729c:	e7eb      	b.n	8017276 <_printf_i+0x20a>
 801729e:	2500      	movs	r5, #0
 80172a0:	f104 0619 	add.w	r6, r4, #25
 80172a4:	e7f5      	b.n	8017292 <_printf_i+0x226>
 80172a6:	bf00      	nop
 80172a8:	0801b4e9 	.word	0x0801b4e9
 80172ac:	0801b4fa 	.word	0x0801b4fa

080172b0 <__sflush_r>:
 80172b0:	898a      	ldrh	r2, [r1, #12]
 80172b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b6:	4605      	mov	r5, r0
 80172b8:	0710      	lsls	r0, r2, #28
 80172ba:	460c      	mov	r4, r1
 80172bc:	d458      	bmi.n	8017370 <__sflush_r+0xc0>
 80172be:	684b      	ldr	r3, [r1, #4]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	dc05      	bgt.n	80172d0 <__sflush_r+0x20>
 80172c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	dc02      	bgt.n	80172d0 <__sflush_r+0x20>
 80172ca:	2000      	movs	r0, #0
 80172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172d2:	2e00      	cmp	r6, #0
 80172d4:	d0f9      	beq.n	80172ca <__sflush_r+0x1a>
 80172d6:	2300      	movs	r3, #0
 80172d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80172dc:	682f      	ldr	r7, [r5, #0]
 80172de:	6a21      	ldr	r1, [r4, #32]
 80172e0:	602b      	str	r3, [r5, #0]
 80172e2:	d032      	beq.n	801734a <__sflush_r+0x9a>
 80172e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80172e6:	89a3      	ldrh	r3, [r4, #12]
 80172e8:	075a      	lsls	r2, r3, #29
 80172ea:	d505      	bpl.n	80172f8 <__sflush_r+0x48>
 80172ec:	6863      	ldr	r3, [r4, #4]
 80172ee:	1ac0      	subs	r0, r0, r3
 80172f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172f2:	b10b      	cbz	r3, 80172f8 <__sflush_r+0x48>
 80172f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172f6:	1ac0      	subs	r0, r0, r3
 80172f8:	2300      	movs	r3, #0
 80172fa:	4602      	mov	r2, r0
 80172fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172fe:	6a21      	ldr	r1, [r4, #32]
 8017300:	4628      	mov	r0, r5
 8017302:	47b0      	blx	r6
 8017304:	1c43      	adds	r3, r0, #1
 8017306:	89a3      	ldrh	r3, [r4, #12]
 8017308:	d106      	bne.n	8017318 <__sflush_r+0x68>
 801730a:	6829      	ldr	r1, [r5, #0]
 801730c:	291d      	cmp	r1, #29
 801730e:	d82b      	bhi.n	8017368 <__sflush_r+0xb8>
 8017310:	4a29      	ldr	r2, [pc, #164]	; (80173b8 <__sflush_r+0x108>)
 8017312:	410a      	asrs	r2, r1
 8017314:	07d6      	lsls	r6, r2, #31
 8017316:	d427      	bmi.n	8017368 <__sflush_r+0xb8>
 8017318:	2200      	movs	r2, #0
 801731a:	6062      	str	r2, [r4, #4]
 801731c:	04d9      	lsls	r1, r3, #19
 801731e:	6922      	ldr	r2, [r4, #16]
 8017320:	6022      	str	r2, [r4, #0]
 8017322:	d504      	bpl.n	801732e <__sflush_r+0x7e>
 8017324:	1c42      	adds	r2, r0, #1
 8017326:	d101      	bne.n	801732c <__sflush_r+0x7c>
 8017328:	682b      	ldr	r3, [r5, #0]
 801732a:	b903      	cbnz	r3, 801732e <__sflush_r+0x7e>
 801732c:	6560      	str	r0, [r4, #84]	; 0x54
 801732e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017330:	602f      	str	r7, [r5, #0]
 8017332:	2900      	cmp	r1, #0
 8017334:	d0c9      	beq.n	80172ca <__sflush_r+0x1a>
 8017336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801733a:	4299      	cmp	r1, r3
 801733c:	d002      	beq.n	8017344 <__sflush_r+0x94>
 801733e:	4628      	mov	r0, r5
 8017340:	f7ff fa8a 	bl	8016858 <_free_r>
 8017344:	2000      	movs	r0, #0
 8017346:	6360      	str	r0, [r4, #52]	; 0x34
 8017348:	e7c0      	b.n	80172cc <__sflush_r+0x1c>
 801734a:	2301      	movs	r3, #1
 801734c:	4628      	mov	r0, r5
 801734e:	47b0      	blx	r6
 8017350:	1c41      	adds	r1, r0, #1
 8017352:	d1c8      	bne.n	80172e6 <__sflush_r+0x36>
 8017354:	682b      	ldr	r3, [r5, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d0c5      	beq.n	80172e6 <__sflush_r+0x36>
 801735a:	2b1d      	cmp	r3, #29
 801735c:	d001      	beq.n	8017362 <__sflush_r+0xb2>
 801735e:	2b16      	cmp	r3, #22
 8017360:	d101      	bne.n	8017366 <__sflush_r+0xb6>
 8017362:	602f      	str	r7, [r5, #0]
 8017364:	e7b1      	b.n	80172ca <__sflush_r+0x1a>
 8017366:	89a3      	ldrh	r3, [r4, #12]
 8017368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801736c:	81a3      	strh	r3, [r4, #12]
 801736e:	e7ad      	b.n	80172cc <__sflush_r+0x1c>
 8017370:	690f      	ldr	r7, [r1, #16]
 8017372:	2f00      	cmp	r7, #0
 8017374:	d0a9      	beq.n	80172ca <__sflush_r+0x1a>
 8017376:	0793      	lsls	r3, r2, #30
 8017378:	680e      	ldr	r6, [r1, #0]
 801737a:	bf08      	it	eq
 801737c:	694b      	ldreq	r3, [r1, #20]
 801737e:	600f      	str	r7, [r1, #0]
 8017380:	bf18      	it	ne
 8017382:	2300      	movne	r3, #0
 8017384:	eba6 0807 	sub.w	r8, r6, r7
 8017388:	608b      	str	r3, [r1, #8]
 801738a:	f1b8 0f00 	cmp.w	r8, #0
 801738e:	dd9c      	ble.n	80172ca <__sflush_r+0x1a>
 8017390:	6a21      	ldr	r1, [r4, #32]
 8017392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017394:	4643      	mov	r3, r8
 8017396:	463a      	mov	r2, r7
 8017398:	4628      	mov	r0, r5
 801739a:	47b0      	blx	r6
 801739c:	2800      	cmp	r0, #0
 801739e:	dc06      	bgt.n	80173ae <__sflush_r+0xfe>
 80173a0:	89a3      	ldrh	r3, [r4, #12]
 80173a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173a6:	81a3      	strh	r3, [r4, #12]
 80173a8:	f04f 30ff 	mov.w	r0, #4294967295
 80173ac:	e78e      	b.n	80172cc <__sflush_r+0x1c>
 80173ae:	4407      	add	r7, r0
 80173b0:	eba8 0800 	sub.w	r8, r8, r0
 80173b4:	e7e9      	b.n	801738a <__sflush_r+0xda>
 80173b6:	bf00      	nop
 80173b8:	dfbffffe 	.word	0xdfbffffe

080173bc <_fflush_r>:
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	690b      	ldr	r3, [r1, #16]
 80173c0:	4605      	mov	r5, r0
 80173c2:	460c      	mov	r4, r1
 80173c4:	b913      	cbnz	r3, 80173cc <_fflush_r+0x10>
 80173c6:	2500      	movs	r5, #0
 80173c8:	4628      	mov	r0, r5
 80173ca:	bd38      	pop	{r3, r4, r5, pc}
 80173cc:	b118      	cbz	r0, 80173d6 <_fflush_r+0x1a>
 80173ce:	6a03      	ldr	r3, [r0, #32]
 80173d0:	b90b      	cbnz	r3, 80173d6 <_fflush_r+0x1a>
 80173d2:	f7fe ff73 	bl	80162bc <__sinit>
 80173d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d0f3      	beq.n	80173c6 <_fflush_r+0xa>
 80173de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173e0:	07d0      	lsls	r0, r2, #31
 80173e2:	d404      	bmi.n	80173ee <_fflush_r+0x32>
 80173e4:	0599      	lsls	r1, r3, #22
 80173e6:	d402      	bmi.n	80173ee <_fflush_r+0x32>
 80173e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173ea:	f7ff fa06 	bl	80167fa <__retarget_lock_acquire_recursive>
 80173ee:	4628      	mov	r0, r5
 80173f0:	4621      	mov	r1, r4
 80173f2:	f7ff ff5d 	bl	80172b0 <__sflush_r>
 80173f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173f8:	07da      	lsls	r2, r3, #31
 80173fa:	4605      	mov	r5, r0
 80173fc:	d4e4      	bmi.n	80173c8 <_fflush_r+0xc>
 80173fe:	89a3      	ldrh	r3, [r4, #12]
 8017400:	059b      	lsls	r3, r3, #22
 8017402:	d4e1      	bmi.n	80173c8 <_fflush_r+0xc>
 8017404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017406:	f7ff f9f9 	bl	80167fc <__retarget_lock_release_recursive>
 801740a:	e7dd      	b.n	80173c8 <_fflush_r+0xc>

0801740c <fiprintf>:
 801740c:	b40e      	push	{r1, r2, r3}
 801740e:	b503      	push	{r0, r1, lr}
 8017410:	4601      	mov	r1, r0
 8017412:	ab03      	add	r3, sp, #12
 8017414:	4805      	ldr	r0, [pc, #20]	; (801742c <fiprintf+0x20>)
 8017416:	f853 2b04 	ldr.w	r2, [r3], #4
 801741a:	6800      	ldr	r0, [r0, #0]
 801741c:	9301      	str	r3, [sp, #4]
 801741e:	f7ff fc9d 	bl	8016d5c <_vfiprintf_r>
 8017422:	b002      	add	sp, #8
 8017424:	f85d eb04 	ldr.w	lr, [sp], #4
 8017428:	b003      	add	sp, #12
 801742a:	4770      	bx	lr
 801742c:	20000088 	.word	0x20000088

08017430 <__swhatbuf_r>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	460c      	mov	r4, r1
 8017434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017438:	2900      	cmp	r1, #0
 801743a:	b096      	sub	sp, #88	; 0x58
 801743c:	4615      	mov	r5, r2
 801743e:	461e      	mov	r6, r3
 8017440:	da0d      	bge.n	801745e <__swhatbuf_r+0x2e>
 8017442:	89a3      	ldrh	r3, [r4, #12]
 8017444:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017448:	f04f 0100 	mov.w	r1, #0
 801744c:	bf0c      	ite	eq
 801744e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017452:	2340      	movne	r3, #64	; 0x40
 8017454:	2000      	movs	r0, #0
 8017456:	6031      	str	r1, [r6, #0]
 8017458:	602b      	str	r3, [r5, #0]
 801745a:	b016      	add	sp, #88	; 0x58
 801745c:	bd70      	pop	{r4, r5, r6, pc}
 801745e:	466a      	mov	r2, sp
 8017460:	f000 f848 	bl	80174f4 <_fstat_r>
 8017464:	2800      	cmp	r0, #0
 8017466:	dbec      	blt.n	8017442 <__swhatbuf_r+0x12>
 8017468:	9901      	ldr	r1, [sp, #4]
 801746a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801746e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017472:	4259      	negs	r1, r3
 8017474:	4159      	adcs	r1, r3
 8017476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801747a:	e7eb      	b.n	8017454 <__swhatbuf_r+0x24>

0801747c <__smakebuf_r>:
 801747c:	898b      	ldrh	r3, [r1, #12]
 801747e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017480:	079d      	lsls	r5, r3, #30
 8017482:	4606      	mov	r6, r0
 8017484:	460c      	mov	r4, r1
 8017486:	d507      	bpl.n	8017498 <__smakebuf_r+0x1c>
 8017488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801748c:	6023      	str	r3, [r4, #0]
 801748e:	6123      	str	r3, [r4, #16]
 8017490:	2301      	movs	r3, #1
 8017492:	6163      	str	r3, [r4, #20]
 8017494:	b002      	add	sp, #8
 8017496:	bd70      	pop	{r4, r5, r6, pc}
 8017498:	ab01      	add	r3, sp, #4
 801749a:	466a      	mov	r2, sp
 801749c:	f7ff ffc8 	bl	8017430 <__swhatbuf_r>
 80174a0:	9900      	ldr	r1, [sp, #0]
 80174a2:	4605      	mov	r5, r0
 80174a4:	4630      	mov	r0, r6
 80174a6:	f7ff fa4b 	bl	8016940 <_malloc_r>
 80174aa:	b948      	cbnz	r0, 80174c0 <__smakebuf_r+0x44>
 80174ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174b0:	059a      	lsls	r2, r3, #22
 80174b2:	d4ef      	bmi.n	8017494 <__smakebuf_r+0x18>
 80174b4:	f023 0303 	bic.w	r3, r3, #3
 80174b8:	f043 0302 	orr.w	r3, r3, #2
 80174bc:	81a3      	strh	r3, [r4, #12]
 80174be:	e7e3      	b.n	8017488 <__smakebuf_r+0xc>
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	6020      	str	r0, [r4, #0]
 80174c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174c8:	81a3      	strh	r3, [r4, #12]
 80174ca:	9b00      	ldr	r3, [sp, #0]
 80174cc:	6163      	str	r3, [r4, #20]
 80174ce:	9b01      	ldr	r3, [sp, #4]
 80174d0:	6120      	str	r0, [r4, #16]
 80174d2:	b15b      	cbz	r3, 80174ec <__smakebuf_r+0x70>
 80174d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174d8:	4630      	mov	r0, r6
 80174da:	f000 f81d 	bl	8017518 <_isatty_r>
 80174de:	b128      	cbz	r0, 80174ec <__smakebuf_r+0x70>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	f023 0303 	bic.w	r3, r3, #3
 80174e6:	f043 0301 	orr.w	r3, r3, #1
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	431d      	orrs	r5, r3
 80174f0:	81a5      	strh	r5, [r4, #12]
 80174f2:	e7cf      	b.n	8017494 <__smakebuf_r+0x18>

080174f4 <_fstat_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4d07      	ldr	r5, [pc, #28]	; (8017514 <_fstat_r+0x20>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	4604      	mov	r4, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	4611      	mov	r1, r2
 8017500:	602b      	str	r3, [r5, #0]
 8017502:	f7e9 fb9c 	bl	8000c3e <_fstat>
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	d102      	bne.n	8017510 <_fstat_r+0x1c>
 801750a:	682b      	ldr	r3, [r5, #0]
 801750c:	b103      	cbz	r3, 8017510 <_fstat_r+0x1c>
 801750e:	6023      	str	r3, [r4, #0]
 8017510:	bd38      	pop	{r3, r4, r5, pc}
 8017512:	bf00      	nop
 8017514:	2000ca94 	.word	0x2000ca94

08017518 <_isatty_r>:
 8017518:	b538      	push	{r3, r4, r5, lr}
 801751a:	4d06      	ldr	r5, [pc, #24]	; (8017534 <_isatty_r+0x1c>)
 801751c:	2300      	movs	r3, #0
 801751e:	4604      	mov	r4, r0
 8017520:	4608      	mov	r0, r1
 8017522:	602b      	str	r3, [r5, #0]
 8017524:	f7e9 fb9b 	bl	8000c5e <_isatty>
 8017528:	1c43      	adds	r3, r0, #1
 801752a:	d102      	bne.n	8017532 <_isatty_r+0x1a>
 801752c:	682b      	ldr	r3, [r5, #0]
 801752e:	b103      	cbz	r3, 8017532 <_isatty_r+0x1a>
 8017530:	6023      	str	r3, [r4, #0]
 8017532:	bd38      	pop	{r3, r4, r5, pc}
 8017534:	2000ca94 	.word	0x2000ca94

08017538 <_sbrk_r>:
 8017538:	b538      	push	{r3, r4, r5, lr}
 801753a:	4d06      	ldr	r5, [pc, #24]	; (8017554 <_sbrk_r+0x1c>)
 801753c:	2300      	movs	r3, #0
 801753e:	4604      	mov	r4, r0
 8017540:	4608      	mov	r0, r1
 8017542:	602b      	str	r3, [r5, #0]
 8017544:	f7e9 fba4 	bl	8000c90 <_sbrk>
 8017548:	1c43      	adds	r3, r0, #1
 801754a:	d102      	bne.n	8017552 <_sbrk_r+0x1a>
 801754c:	682b      	ldr	r3, [r5, #0]
 801754e:	b103      	cbz	r3, 8017552 <_sbrk_r+0x1a>
 8017550:	6023      	str	r3, [r4, #0]
 8017552:	bd38      	pop	{r3, r4, r5, pc}
 8017554:	2000ca94 	.word	0x2000ca94

08017558 <abort>:
 8017558:	b508      	push	{r3, lr}
 801755a:	2006      	movs	r0, #6
 801755c:	f000 f85a 	bl	8017614 <raise>
 8017560:	2001      	movs	r0, #1
 8017562:	f7e9 fb1d 	bl	8000ba0 <_exit>

08017566 <_realloc_r>:
 8017566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801756a:	4680      	mov	r8, r0
 801756c:	4614      	mov	r4, r2
 801756e:	460e      	mov	r6, r1
 8017570:	b921      	cbnz	r1, 801757c <_realloc_r+0x16>
 8017572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017576:	4611      	mov	r1, r2
 8017578:	f7ff b9e2 	b.w	8016940 <_malloc_r>
 801757c:	b92a      	cbnz	r2, 801758a <_realloc_r+0x24>
 801757e:	f7ff f96b 	bl	8016858 <_free_r>
 8017582:	4625      	mov	r5, r4
 8017584:	4628      	mov	r0, r5
 8017586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801758a:	f000 f85f 	bl	801764c <_malloc_usable_size_r>
 801758e:	4284      	cmp	r4, r0
 8017590:	4607      	mov	r7, r0
 8017592:	d802      	bhi.n	801759a <_realloc_r+0x34>
 8017594:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017598:	d812      	bhi.n	80175c0 <_realloc_r+0x5a>
 801759a:	4621      	mov	r1, r4
 801759c:	4640      	mov	r0, r8
 801759e:	f7ff f9cf 	bl	8016940 <_malloc_r>
 80175a2:	4605      	mov	r5, r0
 80175a4:	2800      	cmp	r0, #0
 80175a6:	d0ed      	beq.n	8017584 <_realloc_r+0x1e>
 80175a8:	42bc      	cmp	r4, r7
 80175aa:	4622      	mov	r2, r4
 80175ac:	4631      	mov	r1, r6
 80175ae:	bf28      	it	cs
 80175b0:	463a      	movcs	r2, r7
 80175b2:	f7ff f924 	bl	80167fe <memcpy>
 80175b6:	4631      	mov	r1, r6
 80175b8:	4640      	mov	r0, r8
 80175ba:	f7ff f94d 	bl	8016858 <_free_r>
 80175be:	e7e1      	b.n	8017584 <_realloc_r+0x1e>
 80175c0:	4635      	mov	r5, r6
 80175c2:	e7df      	b.n	8017584 <_realloc_r+0x1e>

080175c4 <_raise_r>:
 80175c4:	291f      	cmp	r1, #31
 80175c6:	b538      	push	{r3, r4, r5, lr}
 80175c8:	4604      	mov	r4, r0
 80175ca:	460d      	mov	r5, r1
 80175cc:	d904      	bls.n	80175d8 <_raise_r+0x14>
 80175ce:	2316      	movs	r3, #22
 80175d0:	6003      	str	r3, [r0, #0]
 80175d2:	f04f 30ff 	mov.w	r0, #4294967295
 80175d6:	bd38      	pop	{r3, r4, r5, pc}
 80175d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80175da:	b112      	cbz	r2, 80175e2 <_raise_r+0x1e>
 80175dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175e0:	b94b      	cbnz	r3, 80175f6 <_raise_r+0x32>
 80175e2:	4620      	mov	r0, r4
 80175e4:	f000 f830 	bl	8017648 <_getpid_r>
 80175e8:	462a      	mov	r2, r5
 80175ea:	4601      	mov	r1, r0
 80175ec:	4620      	mov	r0, r4
 80175ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175f2:	f000 b817 	b.w	8017624 <_kill_r>
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d00a      	beq.n	8017610 <_raise_r+0x4c>
 80175fa:	1c59      	adds	r1, r3, #1
 80175fc:	d103      	bne.n	8017606 <_raise_r+0x42>
 80175fe:	2316      	movs	r3, #22
 8017600:	6003      	str	r3, [r0, #0]
 8017602:	2001      	movs	r0, #1
 8017604:	e7e7      	b.n	80175d6 <_raise_r+0x12>
 8017606:	2400      	movs	r4, #0
 8017608:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801760c:	4628      	mov	r0, r5
 801760e:	4798      	blx	r3
 8017610:	2000      	movs	r0, #0
 8017612:	e7e0      	b.n	80175d6 <_raise_r+0x12>

08017614 <raise>:
 8017614:	4b02      	ldr	r3, [pc, #8]	; (8017620 <raise+0xc>)
 8017616:	4601      	mov	r1, r0
 8017618:	6818      	ldr	r0, [r3, #0]
 801761a:	f7ff bfd3 	b.w	80175c4 <_raise_r>
 801761e:	bf00      	nop
 8017620:	20000088 	.word	0x20000088

08017624 <_kill_r>:
 8017624:	b538      	push	{r3, r4, r5, lr}
 8017626:	4d07      	ldr	r5, [pc, #28]	; (8017644 <_kill_r+0x20>)
 8017628:	2300      	movs	r3, #0
 801762a:	4604      	mov	r4, r0
 801762c:	4608      	mov	r0, r1
 801762e:	4611      	mov	r1, r2
 8017630:	602b      	str	r3, [r5, #0]
 8017632:	f7e9 faa3 	bl	8000b7c <_kill>
 8017636:	1c43      	adds	r3, r0, #1
 8017638:	d102      	bne.n	8017640 <_kill_r+0x1c>
 801763a:	682b      	ldr	r3, [r5, #0]
 801763c:	b103      	cbz	r3, 8017640 <_kill_r+0x1c>
 801763e:	6023      	str	r3, [r4, #0]
 8017640:	bd38      	pop	{r3, r4, r5, pc}
 8017642:	bf00      	nop
 8017644:	2000ca94 	.word	0x2000ca94

08017648 <_getpid_r>:
 8017648:	f7e9 ba90 	b.w	8000b6c <_getpid>

0801764c <_malloc_usable_size_r>:
 801764c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017650:	1f18      	subs	r0, r3, #4
 8017652:	2b00      	cmp	r3, #0
 8017654:	bfbc      	itt	lt
 8017656:	580b      	ldrlt	r3, [r1, r0]
 8017658:	18c0      	addlt	r0, r0, r3
 801765a:	4770      	bx	lr

0801765c <_init>:
 801765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801765e:	bf00      	nop
 8017660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017662:	bc08      	pop	{r3}
 8017664:	469e      	mov	lr, r3
 8017666:	4770      	bx	lr

08017668 <_fini>:
 8017668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801766a:	bf00      	nop
 801766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801766e:	bc08      	pop	{r3}
 8017670:	469e      	mov	lr, r3
 8017672:	4770      	bx	lr
