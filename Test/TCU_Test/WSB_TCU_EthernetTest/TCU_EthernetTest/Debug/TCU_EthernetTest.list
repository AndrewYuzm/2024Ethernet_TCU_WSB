
TCU_EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f64  08017f0c  08017f0c  00027f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be70  0801be70  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  0801be70  0801be70  0002be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be78  0801be78  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be78  0801be78  0002be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be7c  0801be7c  0002be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801be80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000d32c  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d3b8  2000d3b8  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030d8e  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007b12  00000000  00000000  00060e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002100  00000000  00000000  000689a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a47  00000000  00000000  0006aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000341e1  00000000  00000000  0006c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036bd0  00000000  00000000  000a06c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef0aa  00000000  00000000  000d7298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009180  00000000  00000000  001c6344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  001cf4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017ef4 	.word	0x08017ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08017ef4 	.word	0x08017ef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	20000148 	.word	0x20000148

080005b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    //具体哪个串口可以更改huart1为其它串�?????????
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <__io_putchar+0x20>)
 80005c2:	f003 fffe 	bl	80045c2 <HAL_UART_Transmit>
    return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000370 	.word	0x20000370

080005d4 <configCANFilters>:
	    if(HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
	    {
	        Error_Handler();
	    }
}
void configCANFilters(CAN_HandleTypeDef* canHandle){	//Without filtered any CAN msgs
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef sFilterConfig;

    // Configure the filter to accept all messages
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e0:	2301      	movs	r3, #1
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterBank = 0;  // Use filter bank 0
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

    // From the reference manual, it seems that setting SlaveStartFilterBank to 0 means all filters are used for the enabled CAN peripheral
    // TODO: Verify this is the correct config
    sFilterConfig.SlaveStartFilterBank = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4619      	mov	r1, r3
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f001 f8fa 	bl	8001804 <HAL_CAN_ConfigFilter>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <configCANFilters+0x46>
    {
        Error_Handler();
 8000616:	f000 fa7d 	bl	8000b14 <Error_Handler>
    }
}
 800061a:	bf00      	nop
 800061c:	3730      	adds	r7, #48	; 0x30
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint16_t fifo0=0,fifo1=0;
char globalmsg[128];	//transfer msgs to string
int msg_len;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b09f      	sub	sp, #124	; 0x7c
 8000628:	af08      	add	r7, sp, #32
 800062a:	6078      	str	r0, [r7, #4]
	fifo0++;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000636:	801a      	strh	r2, [r3, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800063c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000640:	2100      	movs	r1, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f001 fa02 	bl	8001a4c <HAL_CAN_GetRxMessage>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d126      	bne.n	800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
//    				   RxData[4], RxData[5], RxData[6], RxData[7]);	//real
//    	HAL_UART_Transmit(&huart1, (uint8_t *)globalmsg, msg_len, HAL_MAX_DELAY);

    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
    	    				   "%02X%02X%02X%02X%02X%02X%02X%02X",
    	    				   RxData[0], RxData[1], RxData[2], RxData[3],
 800064e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
 8000652:	469c      	mov	ip, r3
    	    				   RxData[0], RxData[1], RxData[2], RxData[3],
 8000654:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000658:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800065c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
    	    				   RxData[4], RxData[5], RxData[6], RxData[7]);
 8000660:	f897 0038 	ldrb.w	r0, [r7, #56]	; 0x38
 8000664:	f897 4039 	ldrb.w	r4, [r7, #57]	; 0x39
 8000668:	f897 503a 	ldrb.w	r5, [r7, #58]	; 0x3a
 800066c:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
    	msg_len = snprintf(globalmsg, sizeof(globalmsg),
 8000670:	9606      	str	r6, [sp, #24]
 8000672:	9505      	str	r5, [sp, #20]
 8000674:	9404      	str	r4, [sp, #16]
 8000676:	9003      	str	r0, [sp, #12]
 8000678:	9102      	str	r1, [sp, #8]
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4663      	mov	r3, ip
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000686:	f016 fac1 	bl	8016c0c <sniprintf>
 800068a:	4603      	mov	r3, r0
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800068e:	6013      	str	r3, [r2, #0]

    	add_or_update_data(RxHeader.ExtId, globalmsg);
 8000690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000692:	4910      	ldr	r1, [pc, #64]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fcdb 	bl	8001050 <add_or_update_data>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         // if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //         //     /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         // }
    // }
}
 800069a:	e012      	b.n	80006c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
        uint8_t msg[] = "Failed to receive CAN message from FIFO0\n";
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800069e:	f107 0408 	add.w	r4, r7, #8
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	c403      	stmia	r4!, {r0, r1}
 80006b2:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80006b4:	f107 0108 	add.w	r1, r7, #8
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	222a      	movs	r2, #42	; 0x2a
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80006be:	f003 ff80 	bl	80045c2 <HAL_UART_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	375c      	adds	r7, #92	; 0x5c
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200003b8 	.word	0x200003b8
 80006d0:	08017f0c 	.word	0x08017f0c
 80006d4:	200003bc 	.word	0x200003bc
 80006d8:	2000043c 	.word	0x2000043c
 80006dc:	08017f30 	.word	0x08017f30
 80006e0:	20000370 	.word	0x20000370

080006e4 <HAL_CAN_RxFifo1MsgPendingCallback>:

//Currently not used (we use FIFO0)
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b096      	sub	sp, #88	; 0x58
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	fifo1++;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80006f6:	801a      	strh	r2, [r3, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 80006f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f001 f9a2 	bl	8001a4c <HAL_CAN_GetRxMessage>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d012      	beq.n	8000734 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>
    {
        uint8_t msg[] = "Failed to receive CAN message from FIFO1\n";
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000710:	f107 0408 	add.w	r4, r7, #8
 8000714:	461d      	mov	r5, r3
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000722:	c403      	stmia	r4!, {r0, r1}
 8000724:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000726:	f107 0108 	add.w	r1, r7, #8
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	222a      	movs	r2, #42	; 0x2a
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000730:	f003 ff47 	bl	80045c2 <HAL_UART_Transmit>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //             /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         }
    // }
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bdb0      	pop	{r4, r5, r7, pc}
 800073c:	200003ba 	.word	0x200003ba
 8000740:	08017f5c 	.word	0x08017f5c
 8000744:	20000370 	.word	0x20000370

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b09a      	sub	sp, #104	; 0x68
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fec7 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f87d 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 f945 	bl	80009e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800075a:	f000 f919 	bl	8000990 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800075e:	f000 f8e1 	bl	8000924 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  configCANFilters(&hcan1);
 8000762:	4835      	ldr	r0, [pc, #212]	; (8000838 <main+0xf0>)
 8000764:	f7ff ff36 	bl	80005d4 <configCANFilters>
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000768:	4833      	ldr	r0, [pc, #204]	; (8000838 <main+0xf0>)
 800076a:	f001 f92b 	bl	80019c4 <HAL_CAN_Start>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0x54>
         uint8_t msg[] = "Failed to start CAN!\n";
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <main+0xf4>)
 8000776:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800077a:	461d      	mov	r5, r3
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000784:	6020      	str	r0, [r4, #0]
 8000786:	3404      	adds	r4, #4
 8000788:	8021      	strh	r1, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 800078a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	2216      	movs	r2, #22
 8000792:	482b      	ldr	r0, [pc, #172]	; (8000840 <main+0xf8>)
 8000794:	f003 ff15 	bl	80045c2 <HAL_UART_Transmit>
     return HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	e049      	b.n	8000830 <main+0xe8>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800079c:	2102      	movs	r1, #2
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <main+0xf0>)
 80007a0:	f001 fa66 	bl	8001c70 <HAL_CAN_ActivateNotification>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d012      	beq.n	80007d0 <main+0x88>
   {
         uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <main+0xfc>)
 80007ac:	463c      	mov	r4, r7
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	682b      	ldr	r3, [r5, #0]
 80007be:	8023      	strh	r3, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80007c0:	4639      	mov	r1, r7
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	2232      	movs	r2, #50	; 0x32
 80007c6:	481e      	ldr	r0, [pc, #120]	; (8000840 <main+0xf8>)
 80007c8:	f003 fefb 	bl	80045c2 <HAL_UART_Transmit>
       return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e02f      	b.n	8000830 <main+0xe8>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80007d0:	2110      	movs	r1, #16
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <main+0xf0>)
 80007d4:	f001 fa4c 	bl	8001c70 <HAL_CAN_ActivateNotification>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d012      	beq.n	8000804 <main+0xbc>
   {
         uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <main+0xfc>)
 80007e0:	463c      	mov	r4, r7
 80007e2:	461d      	mov	r5, r3
 80007e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	8023      	strh	r3, [r4, #0]
         HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80007f4:	4639      	mov	r1, r7
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2232      	movs	r2, #50	; 0x32
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <main+0xf8>)
 80007fc:	f003 fee1 	bl	80045c2 <HAL_UART_Transmit>
       return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e015      	b.n	8000830 <main+0xe8>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <main+0x100>)
 8000806:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800080a:	461d      	mov	r5, r3
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f005 f894 	bl	800594c <osThreadCreate>
 8000824:	4603      	mov	r3, r0
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <main+0x104>)
 8000828:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800082a:	f005 f878 	bl	800591e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	e7fe      	b.n	800082e <main+0xe6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000830:	4618      	mov	r0, r3
 8000832:	3768      	adds	r7, #104	; 0x68
 8000834:	46bd      	mov	sp, r7
 8000836:	bdb0      	pop	{r4, r5, r7, pc}
 8000838:	20000348 	.word	0x20000348
 800083c:	08017f88 	.word	0x08017f88
 8000840:	20000370 	.word	0x20000370
 8000844:	08017fa0 	.word	0x08017fa0
 8000848:	08017fe0 	.word	0x08017fe0
 800084c:	200003b4 	.word	0x200003b4

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f016 fa95 	bl	8016d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	; (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008c4:	2350      	movs	r3, #80	; 0x50
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f98f 	bl	8003bf8 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e0:	f000 f918 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2102      	movs	r1, #2
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fbf0 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800090e:	f000 f901 	bl	8000b14 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	; 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_CAN1_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_CAN1_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_CAN1_Init+0x64>)
 8000930:	2204      	movs	r2, #4
 8000932:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_CAN1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_CAN1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_CAN1_Init+0x64>)
 8000942:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000946:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_CAN1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_CAN1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_CAN1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_CAN1_Init+0x64>)
 8000974:	f000 fe4a 	bl	800160c <HAL_CAN_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800097e:	f000 f8c9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000348 	.word	0x20000348
 800098c:	40006400 	.word	0x40006400

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f003 fdae 	bl	8004528 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f89f 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000370 	.word	0x20000370
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_GPIO_Init+0xbc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	f5ad 6dc5 	sub.w	sp, sp, #1576	; 0x628
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000ab0:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8000ab4:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ab6:	f004 f8f9 	bl	8004cac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //  TCP_Client_Init();
    int soctemp=create_tcp_client(); //$
 8000aba:	f000 fa3f 	bl	8000f3c <create_tcp_client>
 8000abe:	f8c7 0624 	str.w	r0, [r7, #1572]	; 0x624
  //  double t=0,y=0;
    int t=0,y=0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
  //  uint8_t send_buf[30];
    void init_dataItems();
    /* Infinite loop */

    for(;;){
    	printf("CAN: 0:%u,1:%u\r\n",fifo0,fifo1);
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <StartDefaultTask+0x60>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <StartDefaultTask+0x64>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <StartDefaultTask+0x68>)
 8000adc:	f016 f884 	bl	8016be8 <iprintf>
    	tcp_client_send(soctemp, get_all_data_str());
 8000ae0:	f000 fb42 	bl	8001168 <get_all_data_str>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8000aec:	f000 fa64 	bl	8000fb8 <tcp_client_send>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000af0:	2101      	movs	r1, #1
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <StartDefaultTask+0x6c>)
 8000af4:	f003 f866 	bl	8003bc4 <HAL_GPIO_TogglePin>
    	osDelay(500);
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f004 ff72 	bl	80059e4 <osDelay>
    	printf("CAN: 0:%u,1:%u\r\n",fifo0,fifo1);
 8000b00:	e7e5      	b.n	8000ace <StartDefaultTask+0x2a>
 8000b02:	bf00      	nop
 8000b04:	200003b8 	.word	0x200003b8
 8000b08:	200003ba 	.word	0x200003ba
 8000b0c:	08017ffc 	.word	0x08017ffc
 8000b10:	40020400 	.word	0x40020400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_MspInit+0x54>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_MspInit+0x54>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x54>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_MspInit+0x54>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_MspInit+0x54>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_MspInit+0x54>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	f06f 0001 	mvn.w	r0, #1
 8000b66:	f001 fbaa 	bl	80022be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <HAL_CAN_MspInit+0xc4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d14b      	bne.n	8000c32 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <HAL_CAN_MspInit+0xc8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000be2:	2309      	movs	r3, #9
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <HAL_CAN_MspInit+0xcc>)
 8000bee:	f002 fe4d 	bl	800388c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	2013      	movs	r0, #19
 8000bf8:	f001 fb61 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bfc:	2013      	movs	r0, #19
 8000bfe:	f001 fb7a 	bl	80022f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2014      	movs	r0, #20
 8000c08:	f001 fb59 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c0c:	2014      	movs	r0, #20
 8000c0e:	f001 fb72 	bl	80022f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2105      	movs	r1, #5
 8000c16:	2015      	movs	r0, #21
 8000c18:	f001 fb51 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c1c:	2015      	movs	r0, #21
 8000c1e:	f001 fb6a 	bl	80022f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	2016      	movs	r0, #22
 8000c28:	f001 fb49 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c2c:	2016      	movs	r0, #22
 8000c2e:	f001 fb62 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40006400 	.word	0x40006400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020c00 	.word	0x40020c00

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12c      	bne.n	8000cc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_UART_MspInit+0x8c>)
 8000cc0:	f002 fde4 	bl	800388c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 fc3c 	bl	8001584 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d0c:	f006 ff7a 	bl	8007c04 <xTaskGetSchedulerState>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d001      	beq.n	8000d1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d16:	f007 fb57 	bl	80083c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <CAN1_TX_IRQHandler+0x10>)
 8000d26:	f000 ffc9 	bl	8001cbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000348 	.word	0x20000348

08000d34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <CAN1_RX0_IRQHandler+0x10>)
 8000d3a:	f000 ffbf 	bl	8001cbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000348 	.word	0x20000348

08000d48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <CAN1_RX1_IRQHandler+0x10>)
 8000d4e:	f000 ffb5 	bl	8001cbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000348 	.word	0x20000348

08000d5c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <CAN1_SCE_IRQHandler+0x10>)
 8000d62:	f000 ffab 	bl	8001cbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000348 	.word	0x20000348

08000d70 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <ETH_IRQHandler+0x10>)
 8000d76:	f001 feb3 	bl	8002ae0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20005ac8 	.word	0x20005ac8

08000d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_kill>:

int _kill(int pid, int sig)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <_kill+0x20>)
 8000da0:	2216      	movs	r2, #22
 8000da2:	601a      	str	r2, [r3, #0]
	return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	2000d3a8 	.word	0x2000d3a8

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe5 	bl	8000d94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dca:	e7fe      	b.n	8000dca <_exit+0x12>

08000dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
	}

return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fbc5 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
	}
	return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e66:	605a      	str	r2, [r3, #4]
	return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d205      	bcs.n	8000ee4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <_sbrk+0x6c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	20000440 	.word	0x20000440
 8000f10:	2000d3b8 	.word	0x2000d3b8
 8000f14:	2000d3a8 	.word	0x2000d3a8

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <create_tcp_client>:
//#define SERVER_IP "192.168.2.19" // 本地
//#define SERVER_IP "192.168.2.89" // 本地PC
//#define SERVER_IP "192.168.56.1" // 本地
#define SERVER_PORT 2333         // 服务器端口号

int create_tcp_client(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
    int sock;
    struct sockaddr_in server_address;

    // 创建socket
    sock = lwip_socket(AF_INET, SOCK_STREAM, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2101      	movs	r1, #1
 8000f46:	2002      	movs	r0, #2
 8000f48:	f009 fe06 	bl	800ab58 <lwip_socket>
 8000f4c:	6178      	str	r0, [r7, #20]
    if (sock < 0) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da05      	bge.n	8000f60 <create_tcp_client+0x24>
    	printf("soc create error...\n\r");
 8000f54:	4815      	ldr	r0, [pc, #84]	; (8000fac <create_tcp_client+0x70>)
 8000f56:	f015 fe47 	bl	8016be8 <iprintf>
        return -1; // Socket创建失败
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e020      	b.n	8000fa2 <create_tcp_client+0x66>
    }

    // 设置服务器地址
    server_address.sin_family = AF_INET;
 8000f60:	2302      	movs	r3, #2
 8000f62:	717b      	strb	r3, [r7, #5]
    server_address.sin_port = htons(SERVER_PORT);
 8000f64:	f640 101d 	movw	r0, #2333	; 0x91d
 8000f68:	f00a f99a 	bl	800b2a0 <lwip_htons>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	80fb      	strh	r3, [r7, #6]
    inet_aton(SERVER_IP, &server_address.sin_addr.s_addr);
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	3304      	adds	r3, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <create_tcp_client+0x74>)
 8000f78:	f014 fb16 	bl	80155a8 <ip4addr_aton>

    // 连接服务器
    if (lwip_connect(sock, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2210      	movs	r2, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f009 fc58 	bl	800a838 <lwip_connect>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da08      	bge.n	8000fa0 <create_tcp_client+0x64>
        lwip_close(sock);
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f009 fbfc 	bl	800a78c <lwip_close>
    	printf("connect error...\n\r");
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <create_tcp_client+0x78>)
 8000f96:	f015 fe27 	bl	8016be8 <iprintf>
        return -2; // 连接失败
 8000f9a:	f06f 0301 	mvn.w	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <create_tcp_client+0x66>
    }

    return sock; // 返回socket描述符
 8000fa0:	697b      	ldr	r3, [r7, #20]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08018010 	.word	0x08018010
 8000fb0:	08018028 	.word	0x08018028
 8000fb4:	08018038 	.word	0x08018038

08000fb8 <tcp_client_send>:
void tcp_client_send(int sock, const char *data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	err_t err;
    err = lwip_send(sock, data, strlen(data), 0);
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f7ff f904 	bl	80001d0 <strlen>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2300      	movs	r3, #0
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f009 fcb2 	bl	800a938 <lwip_send>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
//		printf("memerr..\n\r");
		// 处理错误
		// ERR_MEM 如果发送缓冲区太小不能放下全部数据
		// 其他错误码表示其他问题
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <init_dataItems>:
//
DataItem dataItems[MAX_DATA];
SemaphoreHandle_t dataMutex;

//初始化存储空间
void init_dataItems() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
//    dataMutex = xSemaphoreCreateMutex();
    for (int i = 0; i < MAX_DATA; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e027      	b.n	800103c <init_dataItems+0x5c>
        dataItems[i].id = -1;  // 使用-1表示该位置为空
 8000fec:	4917      	ldr	r1, [pc, #92]	; (800104c <init_dataItems+0x6c>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	601a      	str	r2, [r3, #0]
        memset(dataItems[i].data, 0, sizeof(dataItems[i].data));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <init_dataItems+0x6c>)
 800100c:	4413      	add	r3, r2
 800100e:	3304      	adds	r3, #4
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f015 feba 	bl	8016d8e <memset>
        memset(dataItems[i].str, 0, sizeof(dataItems[i].str));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	3320      	adds	r3, #32
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <init_dataItems+0x6c>)
 8001028:	4413      	add	r3, r2
 800102a:	3304      	adds	r3, #4
 800102c:	2220      	movs	r2, #32
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f015 feac 	bl	8016d8e <memset>
    for (int i = 0; i < MAX_DATA; i++) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b1d      	cmp	r3, #29
 8001040:	ddd4      	ble.n	8000fec <init_dataItems+0xc>
    }
//    xSemaphoreGive(dataMutex);
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000444 	.word	0x20000444

08001050 <add_or_update_data>:

//产生新数据
void add_or_update_data(int id, char data[]) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]

//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    int emptyIndex = -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	60fb      	str	r3, [r7, #12]
//printf("running..\n");
    for (int i = 0; i < MAX_DATA; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	e044      	b.n	80010f0 <add_or_update_data+0xa0>
        if (dataItems[i].id == id) {  // 找到相同ID，更新数据
 8001066:	493e      	ldr	r1, [pc, #248]	; (8001160 <add_or_update_data+0x110>)
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4613      	mov	r3, r2
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d125      	bne.n	80010c8 <add_or_update_data+0x78>
        	 strncpy(dataItems[i].data, data, sizeof(dataItems[i].data) - 1);
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <add_or_update_data+0x110>)
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	221f      	movs	r2, #31
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f015 fe93 	bl	8016dbc <strncpy>
        	 dataItems[i].data[sizeof(dataItems[i].data) - 1] = '\0'; // 确保字符串以null结尾
 8001096:	4932      	ldr	r1, [pc, #200]	; (8001160 <add_or_update_data+0x110>)
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	3323      	adds	r3, #35	; 0x23
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
            sprintf(dataItems[i].str, ",0x%08X%s\n", id, data);
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	4613      	mov	r3, r2
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	3320      	adds	r3, #32
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <add_or_update_data+0x110>)
 80010b8:	4413      	add	r3, r2
 80010ba:	1d18      	adds	r0, r3, #4
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4928      	ldr	r1, [pc, #160]	; (8001164 <add_or_update_data+0x114>)
 80010c2:	f015 fdd7 	bl	8016c74 <siprintf>
//            xSemaphoreGive(dataMutex);
            return;
 80010c6:	e048      	b.n	800115a <add_or_update_data+0x10a>
        }
        if (dataItems[i].id == -1 && emptyIndex == -1) {  // 记录第一个空位
 80010c8:	4925      	ldr	r1, [pc, #148]	; (8001160 <add_or_update_data+0x110>)
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d105      	bne.n	80010ea <add_or_update_data+0x9a>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d101      	bne.n	80010ea <add_or_update_data+0x9a>
            emptyIndex = i;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < MAX_DATA; i++) {
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b1d      	cmp	r3, #29
 80010f4:	ddb7      	ble.n	8001066 <add_or_update_data+0x16>
        }
    }

    if (emptyIndex != -1) {  // 有空位，添加新数据
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d02d      	beq.n	800115a <add_or_update_data+0x10a>
        dataItems[emptyIndex].id = id;
 80010fe:	4918      	ldr	r1, [pc, #96]	; (8001160 <add_or_update_data+0x110>)
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4613      	mov	r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
   	 strncpy(dataItems[emptyIndex].data, data, sizeof(dataItems[emptyIndex].data) - 1);
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4613      	mov	r3, r2
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <add_or_update_data+0x110>)
 800111c:	4413      	add	r3, r2
 800111e:	3304      	adds	r3, #4
 8001120:	221f      	movs	r2, #31
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f015 fe49 	bl	8016dbc <strncpy>
   	 dataItems[emptyIndex].data[sizeof(dataItems[emptyIndex].data) - 1] = '\0'; // 确保字符串以null结尾
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <add_or_update_data+0x110>)
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4613      	mov	r3, r2
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3323      	adds	r3, #35	; 0x23
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
        sprintf(dataItems[emptyIndex].str, ",0x%08X%s\n", id, data);
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4613      	mov	r3, r2
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3320      	adds	r3, #32
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <add_or_update_data+0x110>)
 800114c:	4413      	add	r3, r2
 800114e:	1d18      	adds	r0, r3, #4
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4903      	ldr	r1, [pc, #12]	; (8001164 <add_or_update_data+0x114>)
 8001156:	f015 fd8d 	bl	8016c74 <siprintf>
    }

//    xSemaphoreGive(dataMutex);
}
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000444 	.word	0x20000444
 8001164:	08018128 	.word	0x08018128

08001168 <get_all_data_str>:

char* get_all_data_str() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
    static char allDataStr[MAX_DATA * 29];  // 需要足够大的空间来存储所有字符串
//    xSemaphoreTake(dataMutex, portMAX_DELAY);
    strcpy(allDataStr, "");  // 初始化字符串
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <get_all_data_str+0x5c>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < MAX_DATA; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e01a      	b.n	80011b0 <get_all_data_str+0x48>
        if (dataItems[i].id != -1) {
 800117a:	4913      	ldr	r1, [pc, #76]	; (80011c8 <get_all_data_str+0x60>)
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118e:	d00c      	beq.n	80011aa <get_all_data_str+0x42>
            strcat(allDataStr, dataItems[i].str);
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	3320      	adds	r3, #32
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <get_all_data_str+0x60>)
 800119e:	4413      	add	r3, r2
 80011a0:	3304      	adds	r3, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <get_all_data_str+0x5c>)
 80011a6:	f015 fdfa 	bl	8016d9e <strcat>
    for (int i = 0; i < MAX_DATA; i++) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b1d      	cmp	r3, #29
 80011b4:	dde1      	ble.n	800117a <get_all_data_str+0x12>
        }
    }
//    strcat(allDataStr, '\n');
//    printf(allDataStr);
//    xSemaphoreGive(dataMutex);
    init_dataItems();
 80011b6:	f7ff ff13 	bl	8000fe0 <init_dataItems>
    return allDataStr;
 80011ba:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <get_all_data_str+0x5c>)
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000c3c 	.word	0x20000c3c
 80011c8:	20000444 	.word	0x20000444

080011cc <Reset_Handler>:
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0x12>
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
 80011d2:	490e      	ldr	r1, [pc, #56]	; (800120c <LoopFillZerobss+0x1a>)
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <LoopFillZerobss+0x1e>)
 80011d6:	2300      	movs	r3, #0
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:
 80011da:	58d4      	ldr	r4, [r2, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:
 80011e0:	18c4      	adds	r4, r0, r3
 80011e2:	428c      	cmp	r4, r1
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopFillZerobss+0x22>)
 80011e8:	4c0b      	ldr	r4, [pc, #44]	; (8001218 <LoopFillZerobss+0x26>)
 80011ea:	2300      	movs	r3, #0
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:
 80011f2:	42a2      	cmp	r2, r4
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>
 80011f6:	f7ff fe8f 	bl	8000f18 <SystemInit>
 80011fa:	f015 fe8f 	bl	8016f1c <__libc_init_array>
 80011fe:	f7ff faa3 	bl	8000748 <main>
 8001202:	4770      	bx	lr
 8001204:	20020000 	.word	0x20020000
 8001208:	20000000 	.word	0x20000000
 800120c:	2000008c 	.word	0x2000008c
 8001210:	0801be80 	.word	0x0801be80
 8001214:	2000008c 	.word	0x2000008c
 8001218:	2000d3b8 	.word	0x2000d3b8

0800121c <ADC_IRQHandler>:
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>

0800121e <DP83848_RegisterBusIO>:
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <DP83848_RegisterBusIO+0x28>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <DP83848_RegisterBusIO+0x2e>
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e014      	b.n	8001276 <DP83848_RegisterBusIO+0x58>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	2300      	movs	r3, #0
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DP83848_Init>:
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d17c      	bne.n	800139c <DP83848_Init+0x11a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <DP83848_Init+0x2e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4798      	blx	r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e01c      	b.n	80012f6 <DP83848_Init+0x74>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f107 0208 	add.w	r2, r7, #8
 80012c4:	2119      	movs	r1, #25
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da03      	bge.n	80012d8 <DP83848_Init+0x56>
 80012d0:	f06f 0304 	mvn.w	r3, #4
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e00b      	b.n	80012f0 <DP83848_Init+0x6e>
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d105      	bne.n	80012f0 <DP83848_Init+0x6e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	e005      	b.n	80012fc <DP83848_Init+0x7a>
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b1f      	cmp	r3, #31
 80012fa:	d9df      	bls.n	80012bc <DP83848_Init+0x3a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b1f      	cmp	r3, #31
 8001302:	d902      	bls.n	800130a <DP83848_Init+0x88>
 8001304:	f06f 0302 	mvn.w	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d145      	bne.n	800139c <DP83848_Init+0x11a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131c:	2100      	movs	r1, #0
 800131e:	4798      	blx	r3
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	db37      	blt.n	8001396 <DP83848_Init+0x114>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6810      	ldr	r0, [r2, #0]
 800132e:	f107 0208 	add.w	r2, r7, #8
 8001332:	2100      	movs	r1, #0
 8001334:	4798      	blx	r3
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	db28      	blt.n	800138e <DP83848_Init+0x10c>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4798      	blx	r3
 8001342:	4603      	mov	r3, r0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e01c      	b.n	8001382 <DP83848_Init+0x100>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800135a:	d80e      	bhi.n	800137a <DP83848_Init+0xf8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6810      	ldr	r0, [r2, #0]
 8001364:	f107 0208 	add.w	r2, r7, #8
 8001368:	2100      	movs	r1, #0
 800136a:	4798      	blx	r3
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	da07      	bge.n	8001382 <DP83848_Init+0x100>
 8001372:	f06f 0304 	mvn.w	r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e010      	b.n	800139c <DP83848_Init+0x11a>
 800137a:	f06f 0301 	mvn.w	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e00c      	b.n	800139c <DP83848_Init+0x11a>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1dd      	bne.n	8001348 <DP83848_Init+0xc6>
 800138c:	e006      	b.n	800139c <DP83848_Init+0x11a>
 800138e:	f06f 0304 	mvn.w	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e002      	b.n	800139c <DP83848_Init+0x11a>
 8001396:	f06f 0303 	mvn.w	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d112      	bne.n	80013c8 <DP83848_Init+0x146>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4798      	blx	r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	bf00      	nop
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4798      	blx	r3
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013c0:	d9f5      	bls.n	80013ae <DP83848_Init+0x12c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <DP83848_GetLinkState>:
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6810      	ldr	r0, [r2, #0]
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	2101      	movs	r1, #1
 80013ec:	4798      	blx	r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da02      	bge.n	80013fa <DP83848_GetLinkState+0x28>
 80013f4:	f06f 0304 	mvn.w	r3, #4
 80013f8:	e06e      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6810      	ldr	r0, [r2, #0]
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	2101      	movs	r1, #1
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <DP83848_GetLinkState+0x44>
 8001410:	f06f 0304 	mvn.w	r3, #4
 8001414:	e060      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <DP83848_GetLinkState+0x52>
 8001420:	2301      	movs	r3, #1
 8001422:	e059      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	2100      	movs	r1, #0
 8001432:	4798      	blx	r3
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	da02      	bge.n	8001440 <DP83848_GetLinkState+0x6e>
 800143a:	f06f 0304 	mvn.w	r3, #4
 800143e:	e04b      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d11b      	bne.n	8001482 <DP83848_GetLinkState+0xb0>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <DP83848_GetLinkState+0x90>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <DP83848_GetLinkState+0x90>
 800145e:	2302      	movs	r3, #2
 8001460:	e03a      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <DP83848_GetLinkState+0x9e>
 800146c:	2303      	movs	r3, #3
 800146e:	e033      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <DP83848_GetLinkState+0xac>
 800147a:	2304      	movs	r3, #4
 800147c:	e02c      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 800147e:	2305      	movs	r3, #5
 8001480:	e02a      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6810      	ldr	r0, [r2, #0]
 800148a:	f107 020c 	add.w	r2, r7, #12
 800148e:	2110      	movs	r1, #16
 8001490:	4798      	blx	r3
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	da02      	bge.n	800149e <DP83848_GetLinkState+0xcc>
 8001498:	f06f 0304 	mvn.w	r3, #4
 800149c:	e01c      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <DP83848_GetLinkState+0xda>
 80014a8:	2306      	movs	r3, #6
 80014aa:	e015      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0306 	and.w	r3, r3, #6
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d101      	bne.n	80014ba <DP83848_GetLinkState+0xe8>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e00e      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 0306 	and.w	r3, r3, #6
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <DP83848_GetLinkState+0xf6>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e007      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0306 	and.w	r3, r3, #6
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d101      	bne.n	80014d6 <DP83848_GetLinkState+0x104>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e000      	b.n	80014d8 <DP83848_GetLinkState+0x106>
 80014d6:	2305      	movs	r3, #5
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fecd 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fb04 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fee5 	bl	8002312 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 fead 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000fa4 	.word	0x20000fa4

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000fa4 	.word	0x20000fa4

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0ed      	b.n	80017fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff faa4 	bl	8000b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001640:	f7ff ffb4 	bl	80015ac <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001646:	e012      	b.n	800166e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001648:	f7ff ffb0 	bl	80015ac <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d90b      	bls.n	800166e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0c5      	b.n	80017fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e5      	beq.n	8001648 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0202 	bic.w	r2, r2, #2
 800168a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168c:	f7ff ff8e 	bl	80015ac <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001692:	e012      	b.n	80016ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001694:	f7ff ff8a 	bl	80015ac <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b0a      	cmp	r3, #10
 80016a0:	d90b      	bls.n	80016ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e09f      	b.n	80017fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e5      	bne.n	8001694 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7e1b      	ldrb	r3, [r3, #24]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e5b      	ldrb	r3, [r3, #25]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e9b      	ldrb	r3, [r3, #26]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d108      	bne.n	8001736 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0220 	orr.w	r2, r2, #32
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e007      	b.n	8001746 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0220 	bic.w	r2, r2, #32
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7edb      	ldrb	r3, [r3, #27]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0210 	bic.w	r2, r2, #16
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e007      	b.n	8001770 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0210 	orr.w	r2, r2, #16
 800176e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7f1b      	ldrb	r3, [r3, #28]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d108      	bne.n	800178a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0208 	orr.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e007      	b.n	800179a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7f5b      	ldrb	r3, [r3, #29]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0204 	orr.w	r2, r2, #4
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e007      	b.n	80017c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	ea42 0103 	orr.w	r1, r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800181c:	7cfb      	ldrb	r3, [r7, #19]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d003      	beq.n	800182a <HAL_CAN_ConfigFilter+0x26>
 8001822:	7cfb      	ldrb	r3, [r7, #19]
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 80be 	bne.w	80019a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800182c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001844:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	431a      	orrs	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2201      	movs	r2, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d123      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3248      	adds	r2, #72	; 0x48
 80018b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ca:	6979      	ldr	r1, [r7, #20]
 80018cc:	3348      	adds	r3, #72	; 0x48
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d122      	bne.n	8001922 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3248      	adds	r2, #72	; 0x48
 8001902:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001916:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001918:	6979      	ldr	r1, [r7, #20]
 800191a:	3348      	adds	r3, #72	; 0x48
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	401a      	ands	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800193c:	e007      	b.n	800194e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	431a      	orrs	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001968:	e007      	b.n	800197a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	431a      	orrs	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001998:	f023 0201 	bic.w	r2, r3, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e006      	b.n	80019b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40006400 	.word	0x40006400

080019c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d12e      	bne.n	8001a36 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019f0:	f7ff fddc 	bl	80015ac <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019f6:	e012      	b.n	8001a1e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f8:	f7ff fdd8 	bl	80015ac <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d90b      	bls.n	8001a1e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2205      	movs	r2, #5
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e012      	b.n	8001a44 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e5      	bne.n	80019f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e006      	b.n	8001a44 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d003      	beq.n	8001a70 <HAL_CAN_GetRxMessage+0x24>
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	f040 80f3 	bne.w	8001c56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10e      	bne.n	8001a94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d116      	bne.n	8001ab2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0e7      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0d8      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	331b      	adds	r3, #27
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0204 	and.w	r2, r3, #4
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10c      	bne.n	8001aea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	331b      	adds	r3, #27
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0d5b      	lsrs	r3, r3, #21
 8001ae0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e00b      	b.n	8001b02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	331b      	adds	r3, #27
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	331b      	adds	r3, #27
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0202 	and.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	331b      	adds	r3, #27
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	331b      	adds	r3, #27
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	331b      	adds	r3, #27
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0c1a      	lsrs	r2, r3, #16
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0e1a      	lsrs	r2, r3, #24
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0a1a      	lsrs	r2, r3, #8
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0c1a      	lsrs	r2, r3, #16
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3306      	adds	r3, #6
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e1a      	lsrs	r2, r3, #24
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3307      	adds	r3, #7
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d108      	bne.n	8001c42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	e007      	b.n	8001c52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d002      	beq.n	8001c8e <HAL_CAN_ActivateNotification+0x1e>
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d109      	bne.n	8001ca2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6959      	ldr	r1, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e006      	b.n	8001cb0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
  }
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d07c      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f983 	bl	800202a <HAL_CAN_TxMailbox0CompleteCallback>
 8001d24:	e016      	b.n	8001d54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
 8001d38:	e00c      	b.n	8001d54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	e002      	b.n	8001d54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f989 	bl	8002066 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d024      	beq.n	8001da8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f963 	bl	800203e <HAL_CAN_TxMailbox1CompleteCallback>
 8001d78:	e016      	b.n	8001da8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	e00c      	b.n	8001da8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001da0:	e002      	b.n	8001da8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f969 	bl	800207a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d024      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f943 	bl	8002052 <HAL_CAN_TxMailbox2CompleteCallback>
 8001dcc:	e016      	b.n	8001dfc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
 8001de0:	e00c      	b.n	8001dfc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	e002      	b.n	8001dfc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f949 	bl	800208e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f930 	bl	80020a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fbe2 	bl	8000624 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00c      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2210      	movs	r2, #16
 8001e82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f908 	bl	80020b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fc10 	bl	80006e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8f2 	bl	80020ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2208      	movs	r2, #8
 8001f00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8eb 	bl	80020de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d07b      	beq.n	800200a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d072      	beq.n	8002002 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d043      	beq.n	8002002 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d03e      	beq.n	8002002 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	2b60      	cmp	r3, #96	; 0x60
 8001f8c:	d02b      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x32a>
 8001f8e:	2b60      	cmp	r3, #96	; 0x60
 8001f90:	d82e      	bhi.n	8001ff0 <HAL_CAN_IRQHandler+0x334>
 8001f92:	2b50      	cmp	r3, #80	; 0x50
 8001f94:	d022      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x320>
 8001f96:	2b50      	cmp	r3, #80	; 0x50
 8001f98:	d82a      	bhi.n	8001ff0 <HAL_CAN_IRQHandler+0x334>
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d019      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x316>
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d826      	bhi.n	8001ff0 <HAL_CAN_IRQHandler+0x334>
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d010      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x30c>
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d822      	bhi.n	8001ff0 <HAL_CAN_IRQHandler+0x334>
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d002      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x2f8>
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d005      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fb2:	e01d      	b.n	8001ff0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fbc:	e019      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fc6:	e014      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	f043 0320 	orr.w	r3, r3, #32
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fd0:	e00f      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fda:	e00a      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe4:	e005      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fee:	e000      	b.n	8001ff2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ff0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002000:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f868 	bl	80020f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff3e 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff31 	bl	800216c <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06c      	b.n	8002418 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2223      	movs	r2, #35	; 0x23
 800234c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f003 f895 	bl	8005480 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_ETH_Init+0xf4>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_ETH_Init+0xf4>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_ETH_Init+0xf4>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <HAL_ETH_Init+0xf8>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <HAL_ETH_Init+0xf8>)
 8002378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800237c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_ETH_Init+0xf8>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_ETH_Init+0xf8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_ETH_Init+0xf8>)
 800238e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff f900 	bl	80015ac <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023ae:	e011      	b.n	80023d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023b0:	f7ff f8fc 	bl	80015ac <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023be:	d909      	bls.n	80023d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	22e0      	movs	r2, #224	; 0xe0
 80023cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e021      	b.n	8002418 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e4      	bne.n	80023b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 ffaa 	bl	8003340 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 f851 	bl	8003494 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f001 f8a7 	bl	8003546 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	461a      	mov	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f001 f80f 	bl	8003424 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2210      	movs	r2, #16
 8002412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800

08002428 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002436:	2b10      	cmp	r3, #16
 8002438:	d150      	bne.n	80024dc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2223      	movs	r2, #35	; 0x23
 800243e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fa79 	bl	8002940 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0208 	orr.w	r2, r2, #8
 800245c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff f8ac 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff f899 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fdf1 	bl	8003082 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ce:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2223      	movs	r2, #35	; 0x23
 80024d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d17f      	bne.n	80025f8 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2223      	movs	r2, #35	; 0x23
 80024fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800252a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800253e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9f9 	bl	8002940 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0208 	orr.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002566:	2001      	movs	r0, #1
 8002568:	f7ff f82c 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0204 	orr.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800258c:	2001      	movs	r0, #1
 800258e:	f7ff f819 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fd71 	bl	8003082 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025b6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ce:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80025e2:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80025e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ea:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2223      	movs	r2, #35	; 0x23
 80025f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002610:	2b23      	cmp	r3, #35	; 0x23
 8002612:	d170      	bne.n	80026f6 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2223      	movs	r2, #35	; 0x23
 8002618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 800262e:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8002632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002636:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f023 0302 	bic.w	r3, r3, #2
 8002662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002666:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002680:	2001      	movs	r0, #1
 8002682:	f7fe ff9f 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fcf7 	bl	8003082 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0208 	bic.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fe ff89 	bl	80015c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e00e      	b.n	80026de <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	3212      	adds	r2, #18
 80026c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ca:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d9ed      	bls.n	80026c0 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e045      	b.n	80027b0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272a:	2b23      	cmp	r3, #35	; 0x23
 800272c:	d13f      	bne.n	80027ae <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002736:	2201      	movs	r2, #1
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 ff70 	bl	8003620 <ETH_Prepare_Tx_Descriptors>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02a      	b.n	80027b0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800275a:	f3bf 8f4f 	dsb	sy
}
 800275e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	2b03      	cmp	r3, #3
 8002770:	d904      	bls.n	800277c <HAL_ETH_Transmit_IT+0x7c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	1f1a      	subs	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002796:	461a      	mov	r2, r3
 8002798:	2304      	movs	r3, #4
 800279a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	461a      	mov	r2, r3
 80027a6:	2300      	movs	r3, #0
 80027a8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0a8      	b.n	8002936 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ea:	2b23      	cmp	r3, #35	; 0x23
 80027ec:	d001      	beq.n	80027f2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0a1      	b.n	8002936 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	3212      	adds	r2, #18
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002808:	f1c3 0304 	rsb	r3, r3, #4
 800280c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800280e:	e06a      	b.n	80028e6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <HAL_ETH_ReadData+0x88>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d040      	beq.n	80028c2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002874:	3b04      	subs	r3, #4
 8002876:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800289c:	461a      	mov	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f002 ffc7 	bl	8005834 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	441a      	add	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d902      	bls.n	80028d4 <HAL_ETH_ReadData+0x11c>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	3212      	adds	r2, #18
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db06      	blt.n	80028fc <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d202      	bcs.n	80028fc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d089      	beq.n	8002810 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	441a      	add	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f815 	bl	8002940 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002954:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	3212      	adds	r2, #18
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002968:	e040      	b.n	80029ec <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d112      	bne.n	8002998 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	4618      	mov	r0, r3
 8002978:	f002 ff2c 	bl	80057d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	74fb      	strb	r3, [r7, #19]
 8002986:	e007      	b.n	8002998 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d026      	beq.n	80029ec <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <ETH_UpdateDescriptor+0xe4>)
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	e003      	b.n	80029b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80029b4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029b6:	f3bf 8f5f 	dmb	sy
}
 80029ba:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d902      	bls.n	80029da <ETH_UpdateDescriptor+0x9a>
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3b04      	subs	r3, #4
 80029d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	3212      	adds	r2, #18
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <ETH_UpdateDescriptor+0xb8>
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1b8      	bne.n	800296a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d00c      	beq.n	8002a1c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	800045f8 	.word	0x800045f8

08002a28 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3318      	adds	r3, #24
 8002a34:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a46:	e03f      	b.n	8002ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3304      	adds	r3, #4
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db1b      	blt.n	8002ac4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3304      	adds	r3, #4
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 ff0b 	bl	80058b4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac2:	e001      	b.n	8002ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_ETH_ReleaseTxPacket+0xac>
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1b9      	bne.n	8002a48 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d112      	bne.n	8002b20 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d109      	bne.n	8002b20 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_ETH_IRQHandler+0x178>)
 8002b18:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f002 fa16 	bl	8004f4c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d113      	bne.n	8002b5a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10a      	bne.n	8002b5a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002b52:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f002 fa09 	bl	8004f6c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6c:	d14c      	bne.n	8002c08 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d142      	bne.n	8002c08 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f043 0208 	orr.w	r2, r3, #8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d11a      	bne.n	8002bdc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_ETH_IRQHandler+0x17c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002bcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bd0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	22e0      	movs	r2, #224	; 0xe0
 8002bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002bda:	e012      	b.n	8002c02 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	f248 6380 	movw	r3, #34432	; 0x8680
 8002bea:	4013      	ands	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c00:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f002 f9c2 	bl	8004f8c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d10e      	bne.n	8002c34 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f81c 	bl	8002c64 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_ETH_IRQHandler+0x180>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_ETH_IRQHandler+0x180>)
 8002c42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c46:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f815 	bl	8002c78 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00010040 	.word	0x00010040
 8002c5c:	007e2000 	.word	0x007e2000
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 031c 	and.w	r3, r3, #28
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	02db      	lsls	r3, r3, #11
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0302 	bic.w	r3, r3, #2
 8002cca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002cdc:	f7fe fc66 	bl	80015ac <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ce2:	e00d      	b.n	8002d00 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ce4:	f7fe fc62 	bl	80015ac <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d301      	bcc.n	8002cf8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e010      	b.n	8002d1a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ec      	bne.n	8002ce4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 031c 	and.w	r3, r3, #28
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	02db      	lsls	r3, r3, #11
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	019b      	lsls	r3, r3, #6
 8002d50:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d7c:	f7fe fc16 	bl	80015ac <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d82:	e00d      	b.n	8002da0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002d84:	f7fe fc12 	bl	80015ac <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d92:	d301      	bcc.n	8002d98 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e009      	b.n	8002dac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ec      	bne.n	8002d84 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0d9      	b.n	8002f7c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e00b      	b.n	8002fb4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d105      	bne.n	8002fb2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f88f 	bl	80030cc <ETH_SetMACConfig>

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 031c 	bic.w	r3, r3, #28
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fd4:	f001 fa74 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8002fd8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d804      	bhi.n	8002ff4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e027      	b.n	8003044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d908      	bls.n	800300e <HAL_ETH_SetMDIOClockRange+0x52>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d204      	bcs.n	800300e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f043 030c 	orr.w	r3, r3, #12
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e01a      	b.n	8003044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d303      	bcc.n	800301e <HAL_ETH_SetMDIOClockRange+0x62>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d911      	bls.n	8003042 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d908      	bls.n	8003038 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d804      	bhi.n	8003038 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e005      	b.n	8003044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e000      	b.n	8003044 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003042:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	611a      	str	r2, [r3, #16]
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	01312cff 	.word	0x01312cff
 8003058:	02160ebf 	.word	0x02160ebf
 800305c:	03938700 	.word	0x03938700
 8003060:	05f5e0ff 	.word	0x05f5e0ff
 8003064:	08f0d17f 	.word	0x08f0d17f

08003068 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7fe fa86 	bl	80015c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030c2:	6193      	str	r3, [r2, #24]
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4b51      	ldr	r3, [pc, #324]	; (8003228 <ETH_SetMACConfig+0x15c>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	7c1b      	ldrb	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <ETH_SetMACConfig+0x28>
 80030ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030f2:	e000      	b.n	80030f6 <ETH_SetMACConfig+0x2a>
 80030f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7c5b      	ldrb	r3, [r3, #17]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <ETH_SetMACConfig+0x38>
 80030fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003102:	e000      	b.n	8003106 <ETH_SetMACConfig+0x3a>
 8003104:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003106:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800310c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	7fdb      	ldrb	r3, [r3, #31]
 8003112:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003114:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800311a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	7f92      	ldrb	r2, [r2, #30]
 8003120:	2a00      	cmp	r2, #0
 8003122:	d102      	bne.n	800312a <ETH_SetMACConfig+0x5e>
 8003124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003128:	e000      	b.n	800312c <ETH_SetMACConfig+0x60>
 800312a:	2200      	movs	r2, #0
                        macconf->Speed |
 800312c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	7f1b      	ldrb	r3, [r3, #28]
 8003132:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003134:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800313a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003142:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	f892 2020 	ldrb.w	r2, [r2, #32]
 800314a:	2a00      	cmp	r2, #0
 800314c:	d102      	bne.n	8003154 <ETH_SetMACConfig+0x88>
 800314e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003152:	e000      	b.n	8003156 <ETH_SetMACConfig+0x8a>
 8003154:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003156:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	7bdb      	ldrb	r3, [r3, #15]
 800315c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800315e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003164:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800316c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800316e:	4313      	orrs	r3, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003186:	2001      	movs	r0, #1
 8003188:	f7fe fa1c 	bl	80015c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031a2:	4013      	ands	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	d101      	bne.n	80031ba <ETH_SetMACConfig+0xee>
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	e000      	b.n	80031bc <ETH_SetMACConfig+0xf0>
 80031ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80031ca:	2a01      	cmp	r2, #1
 80031cc:	d101      	bne.n	80031d2 <ETH_SetMACConfig+0x106>
 80031ce:	2208      	movs	r2, #8
 80031d0:	e000      	b.n	80031d4 <ETH_SetMACConfig+0x108>
 80031d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80031d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80031dc:	2a01      	cmp	r2, #1
 80031de:	d101      	bne.n	80031e4 <ETH_SetMACConfig+0x118>
 80031e0:	2204      	movs	r2, #4
 80031e2:	e000      	b.n	80031e6 <ETH_SetMACConfig+0x11a>
 80031e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80031ee:	2a01      	cmp	r2, #1
 80031f0:	d101      	bne.n	80031f6 <ETH_SetMACConfig+0x12a>
 80031f2:	2202      	movs	r2, #2
 80031f4:	e000      	b.n	80031f8 <ETH_SetMACConfig+0x12c>
 80031f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003210:	2001      	movs	r0, #1
 8003212:	f7fe f9d7 	bl	80015c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	ff20810f 	.word	0xff20810f

0800322c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <ETH_SetDMAConfig+0x110>)
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	7b1b      	ldrb	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <ETH_SetDMAConfig+0x2c>
 8003252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003256:	e000      	b.n	800325a <ETH_SetDMAConfig+0x2e>
 8003258:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	7b5b      	ldrb	r3, [r3, #13]
 800325e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003260:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	7f52      	ldrb	r2, [r2, #29]
 8003266:	2a00      	cmp	r2, #0
 8003268:	d102      	bne.n	8003270 <ETH_SetDMAConfig+0x44>
 800326a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326e:	e000      	b.n	8003272 <ETH_SetDMAConfig+0x46>
 8003270:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003272:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	7b9b      	ldrb	r3, [r3, #14]
 8003278:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800327a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003280:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	7f1b      	ldrb	r3, [r3, #28]
 8003286:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003288:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	7f9b      	ldrb	r3, [r3, #30]
 800328e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003290:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003296:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f7fe f97e 	bl	80015c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d0:	461a      	mov	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	791b      	ldrb	r3, [r3, #4]
 80032da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80032e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80032f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003304:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800330e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003312:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003320:	2001      	movs	r0, #1
 8003322:	f7fe f94f 	bl	80015c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	f8de3f23 	.word	0xf8de3f23

08003340 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b0a6      	sub	sp, #152	; 0x98
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003354:	2300      	movs	r3, #0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800337c:	2300      	movs	r3, #0
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003386:	2300      	movs	r3, #0
 8003388:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fe86 	bl	80030cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80033f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003400:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003408:	2300      	movs	r3, #0
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ff08 	bl	800322c <ETH_SetDMAConfig>
}
 800341c:	bf00      	nop
 800341e:	3798      	adds	r7, #152	; 0x98
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3305      	adds	r3, #5
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	3204      	adds	r2, #4
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <ETH_MACAddressConfig+0x68>)
 8003446:	4413      	add	r3, r2
 8003448:	461a      	mov	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3303      	adds	r3, #3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	061a      	lsls	r2, r3, #24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3302      	adds	r3, #2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	4313      	orrs	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <ETH_MACAddressConfig+0x6c>)
 8003476:	4413      	add	r3, r2
 8003478:	461a      	mov	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6013      	str	r3, [r2, #0]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40028040 	.word	0x40028040
 8003490:	40028044 	.word	0x40028044

08003494 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e03e      	b.n	8003520 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68d9      	ldr	r1, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2200      	movs	r2, #0
 80034be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	3206      	adds	r2, #6
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d80c      	bhi.n	8003504 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	e004      	b.n	800350e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3301      	adds	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d9bd      	bls.n	80034a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	611a      	str	r2, [r3, #16]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e046      	b.n	80035e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6919      	ldr	r1, [r3, #16]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2200      	movs	r2, #0
 8003570:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003590:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003598:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	3212      	adds	r2, #18
 80035ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d80c      	bhi.n	80035d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6919      	ldr	r1, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	e004      	b.n	80035dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3301      	adds	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d9b5      	bls.n	8003554 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003612:	60da      	str	r2, [r3, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003620:	b480      	push	{r7}
 8003622:	b08d      	sub	sp, #52	; 0x34
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3318      	adds	r3, #24
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003662:	d007      	beq.n	8003674 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	3304      	adds	r3, #4
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003674:	2302      	movs	r3, #2
 8003676:	e103      	b.n	8003880 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003690:	f023 031f 	bic.w	r3, r3, #31
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	6852      	ldr	r2, [r2, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80036fe:	f3bf 8f5f 	dmb	sy
}
 8003702:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003710:	e084      	b.n	800381c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e005      	b.n	800373e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	3301      	adds	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b03      	cmp	r3, #3
 8003748:	d902      	bls.n	8003750 <ETH_Prepare_Tx_Descriptors+0x130>
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	3b04      	subs	r3, #4
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003772:	d007      	beq.n	8003784 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	3304      	adds	r3, #4
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d029      	beq.n	80037d8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003792:	2300      	movs	r3, #0
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 8003796:	e019      	b.n	80037cc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003798:	f3bf 8f5f 	dmb	sy
}
 800379c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	3301      	adds	r3, #1
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d902      	bls.n	80037bc <ETH_Prepare_Tx_Descriptors+0x19c>
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	3b04      	subs	r3, #4
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	3301      	adds	r3, #1
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80037cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3e1      	bcc.n	8003798 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e053      	b.n	8003880 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	3301      	adds	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80037f6:	f023 031f 	bic.w	r3, r3, #31
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	6852      	ldr	r2, [r2, #4]
 80037fe:	431a      	orrs	r2, r3
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3301      	adds	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800380a:	f3bf 8f5f 	dmb	sy
}
 800380e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f af76 	bne.w	8003712 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e005      	b.n	8003846 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	3304      	adds	r3, #4
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003866:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003868:	b672      	cpsid	i
}
 800386a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4413      	add	r3, r2
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800387a:	b662      	cpsie	i
}
 800387c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3734      	adds	r7, #52	; 0x34
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e16b      	b.n	8003b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f040 815a 	bne.w	8003b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d130      	bne.n	8003940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003914:	2201      	movs	r2, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 0201 	and.w	r2, r3, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b03      	cmp	r3, #3
 800394a:	d017      	beq.n	800397c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d123      	bne.n	80039d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80b4 	beq.w	8003b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b60      	ldr	r3, [pc, #384]	; (8003b98 <HAL_GPIO_Init+0x30c>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a5f      	ldr	r2, [pc, #380]	; (8003b98 <HAL_GPIO_Init+0x30c>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_GPIO_Init+0x30c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	; (8003b9c <HAL_GPIO_Init+0x310>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_GPIO_Init+0x314>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02b      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a51      	ldr	r2, [pc, #324]	; (8003ba4 <HAL_GPIO_Init+0x318>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d025      	beq.n	8003aae <HAL_GPIO_Init+0x222>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a50      	ldr	r2, [pc, #320]	; (8003ba8 <HAL_GPIO_Init+0x31c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01f      	beq.n	8003aaa <HAL_GPIO_Init+0x21e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4f      	ldr	r2, [pc, #316]	; (8003bac <HAL_GPIO_Init+0x320>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d019      	beq.n	8003aa6 <HAL_GPIO_Init+0x21a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4e      	ldr	r2, [pc, #312]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_GPIO_Init+0x216>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4d      	ldr	r2, [pc, #308]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00d      	beq.n	8003a9e <HAL_GPIO_Init+0x212>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4c      	ldr	r2, [pc, #304]	; (8003bb8 <HAL_GPIO_Init+0x32c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <HAL_GPIO_Init+0x20e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_GPIO_Init+0x20a>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e00e      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003a96:	2308      	movs	r3, #8
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x228>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x310>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f ae90 	bls.w	80038a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	40021c00 	.word	0x40021c00
 8003bc0:	40013c00 	.word	0x40013c00

08003bc4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43d9      	mvns	r1, r3
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	400b      	ands	r3, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e267      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d075      	beq.n	8003d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d112      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	4b7e      	ldr	r3, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x108>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d157      	bne.n	8003d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e242      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCC_OscConfig+0x74>
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e01d      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x98>
 8003c76:	4b70      	ldr	r3, [pc, #448]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6f      	ldr	r2, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6c      	ldr	r2, [pc, #432]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c90:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a68      	ldr	r2, [pc, #416]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fc7c 	bl	80015ac <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fc78 	bl	80015ac <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e207      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xc0>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fc68 	bl	80015ac <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fc64 	bl	80015ac <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1f3      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	4b51      	ldr	r3, [pc, #324]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xe8>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d063      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d11c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1c7      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4937      	ldr	r1, [pc, #220]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	e03a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fc1d 	bl	80015ac <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fc19 	bl	80015ac <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1a8      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4925      	ldr	r1, [pc, #148]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fbfc 	bl	80015ac <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fd fbf8 	bl	80015ac <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e187      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d036      	beq.n	8003e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd fbdc 	bl	80015ac <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fd fbd8 	bl	80015ac <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e167      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x200>
 8003e16:	e01b      	b.n	8003e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fbc5 	bl	80015ac <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	e00e      	b.n	8003e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fd fbc1 	bl	80015ac <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d907      	bls.n	8003e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e150      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470000 	.word	0x42470000
 8003e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	4b88      	ldr	r3, [pc, #544]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ea      	bne.n	8003e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8097 	beq.w	8003f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	4b7d      	ldr	r3, [pc, #500]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	4a7c      	ldr	r2, [pc, #496]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fb81 	bl	80015ac <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fd fb7d 	bl	80015ac <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e10c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2ea>
 8003ed4:	4b64      	ldr	r3, [pc, #400]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a63      	ldr	r2, [pc, #396]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e01c      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x30c>
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a5e      	ldr	r2, [pc, #376]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a5b      	ldr	r2, [pc, #364]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003f04:	4b58      	ldr	r3, [pc, #352]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a57      	ldr	r2, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f10:	4b55      	ldr	r3, [pc, #340]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a54      	ldr	r2, [pc, #336]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f023 0304 	bic.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd fb42 	bl	80015ac <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fb3e 	bl	80015ac <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0cb      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ee      	beq.n	8003f2c <HAL_RCC_OscConfig+0x334>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fd fb2c 	bl	80015ac <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd fb28 	bl	80015ac <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0b5      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ee      	bne.n	8003f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f80:	4b39      	ldr	r3, [pc, #228]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	4a38      	ldr	r2, [pc, #224]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a1 	beq.w	80040d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d05c      	beq.n	800405c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d141      	bne.n	800402e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fafc 	bl	80015ac <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd faf8 	bl	80015ac <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e087      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fd fad1 	bl	80015ac <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd facd 	bl	80015ac <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e05c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x416>
 800402c:	e054      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd faba 	bl	80015ac <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fab6 	bl	80015ac <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e045      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x444>
 800405a:	e03d      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e038      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
 8004070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d028      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d121      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fd f9e8 	bl	80015ac <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd f9e4 	bl	80015ac <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f821 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd f948 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0801baf8 	.word	0x0801baf8
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b094      	sub	sp, #80	; 0x50
 80042ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	647b      	str	r3, [r7, #68]	; 0x44
 80042c0:	2300      	movs	r3, #0
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	2300      	movs	r3, #0
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042cc:	4b79      	ldr	r3, [pc, #484]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x40>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 80e1 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x3a>
 80042e6:	e0db      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b73      	ldr	r3, [pc, #460]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042ec:	e0db      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ee:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCC_GetSysClockFreq+0x208>)
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f2:	e0d8      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fe:	4b6d      	ldr	r3, [pc, #436]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d063      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	2200      	movs	r2, #0
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
 8004314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	f04f 0000 	mov.w	r0, #0
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	0159      	lsls	r1, r3, #5
 8004334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004338:	0150      	lsls	r0, r2, #5
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4621      	mov	r1, r4
 8004340:	1a51      	subs	r1, r2, r1
 8004342:	6139      	str	r1, [r7, #16]
 8004344:	4629      	mov	r1, r5
 8004346:	eb63 0301 	sbc.w	r3, r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004362:	4651      	mov	r1, sl
 8004364:	018a      	lsls	r2, r1, #6
 8004366:	4651      	mov	r1, sl
 8004368:	ebb2 0801 	subs.w	r8, r2, r1
 800436c:	4659      	mov	r1, fp
 800436e:	eb63 0901 	sbc.w	r9, r3, r1
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004386:	4690      	mov	r8, r2
 8004388:	4699      	mov	r9, r3
 800438a:	4623      	mov	r3, r4
 800438c:	eb18 0303 	adds.w	r3, r8, r3
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	462b      	mov	r3, r5
 8004394:	eb49 0303 	adc.w	r3, r9, r3
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043a6:	4629      	mov	r1, r5
 80043a8:	024b      	lsls	r3, r1, #9
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b0:	4621      	mov	r1, r4
 80043b2:	024a      	lsls	r2, r1, #9
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c4:	f7fb ff5c 	bl	8000280 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d0:	e058      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	2200      	movs	r2, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	4611      	mov	r1, r2
 80043de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	f04f 0000 	mov.w	r0, #0
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	0159      	lsls	r1, r3, #5
 80043fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043fe:	0150      	lsls	r0, r2, #5
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4641      	mov	r1, r8
 8004406:	ebb2 0a01 	subs.w	sl, r2, r1
 800440a:	4649      	mov	r1, r9
 800440c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800441c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004424:	ebb2 040a 	subs.w	r4, r2, sl
 8004428:	eb63 050b 	sbc.w	r5, r3, fp
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	464b      	mov	r3, r9
 8004448:	eb45 0303 	adc.w	r3, r5, r3
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445a:	4629      	mov	r1, r5
 800445c:	028b      	lsls	r3, r1, #10
 800445e:	4621      	mov	r1, r4
 8004460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004464:	4621      	mov	r1, r4
 8004466:	028a      	lsls	r2, r1, #10
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446e:	2200      	movs	r2, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	61fa      	str	r2, [r7, #28]
 8004474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004478:	f7fb ff02 	bl	8000280 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	3301      	adds	r3, #1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3750      	adds	r7, #80	; 0x50
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000000 	.word	0x20000000

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0801bb08 	.word	0x0801bb08

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0801bb08 	.word	0x0801bb08

08004528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e03f      	b.n	80045ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fb7a 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f929 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d17c      	bne.n	80046dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_UART_Transmit+0x2c>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e075      	b.n	80046de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Transmit+0x3e>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e06e      	b.n	80046de <HAL_UART_Transmit+0x11c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004616:	f7fc ffc9 	bl	80015ac <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	d108      	bne.n	8004644 <HAL_UART_Transmit+0x82>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e003      	b.n	800464c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004654:	e02a      	b.n	80046ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f840 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e036      	b.n	80046de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1cf      	bne.n	8004656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2140      	movs	r1, #64	; 0x40
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f810 	bl	80046e6 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e006      	b.n	80046de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b090      	sub	sp, #64	; 0x40
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f6:	e050      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d04c      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <UART_WaitOnFlagUntilTimeout+0x30>
 8004706:	f7fc ff51 	bl	80015ac <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004712:	429a      	cmp	r2, r3
 8004714:	d241      	bcs.n	800479a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800472c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004736:	637a      	str	r2, [r7, #52]	; 0x34
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800473c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	613b      	str	r3, [r7, #16]
   return(result);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476a:	623a      	str	r2, [r7, #32]
 800476c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	61bb      	str	r3, [r7, #24]
   return(result);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e5      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e00f      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d09f      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3740      	adds	r7, #64	; 0x40
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b0c0      	sub	sp, #256	; 0x100
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	ea40 0301 	orr.w	r3, r0, r1
 80047ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800481c:	f021 010c 	bic.w	r1, r1, #12
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800482a:	430b      	orrs	r3, r1
 800482c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	ea40 0301 	orr.w	r3, r0, r1
 800484a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <UART_SetConfig+0x2cc>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d005      	beq.n	8004864 <UART_SetConfig+0xa0>
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8d      	ldr	r3, [pc, #564]	; (8004a94 <UART_SetConfig+0x2d0>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004864:	f7ff fe4c 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8004868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800486c:	e003      	b.n	8004876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7ff fe33 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8004872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	f040 810c 	bne.w	8004a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800488e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	1891      	adds	r1, r2, r2
 800489c:	65b9      	str	r1, [r7, #88]	; 0x58
 800489e:	415b      	adcs	r3, r3
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048a6:	4621      	mov	r1, r4
 80048a8:	eb12 0801 	adds.w	r8, r2, r1
 80048ac:	4629      	mov	r1, r5
 80048ae:	eb43 0901 	adc.w	r9, r3, r1
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c6:	4690      	mov	r8, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	4623      	mov	r3, r4
 80048cc:	eb18 0303 	adds.w	r3, r8, r3
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d4:	462b      	mov	r3, r5
 80048d6:	eb49 0303 	adc.w	r3, r9, r3
 80048da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048f2:	460b      	mov	r3, r1
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	653b      	str	r3, [r7, #80]	; 0x50
 80048f8:	4613      	mov	r3, r2
 80048fa:	eb42 0303 	adc.w	r3, r2, r3
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004908:	f7fb fcba 	bl	8000280 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	011c      	lsls	r4, r3, #4
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	64b9      	str	r1, [r7, #72]	; 0x48
 8004934:	415b      	adcs	r3, r3
 8004936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800493c:	4641      	mov	r1, r8
 800493e:	eb12 0a01 	adds.w	sl, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0b01 	adc.w	fp, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495c:	4692      	mov	sl, r2
 800495e:	469b      	mov	fp, r3
 8004960:	4643      	mov	r3, r8
 8004962:	eb1a 0303 	adds.w	r3, sl, r3
 8004966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800496a:	464b      	mov	r3, r9
 800496c:	eb4b 0303 	adc.w	r3, fp, r3
 8004970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004988:	460b      	mov	r3, r1
 800498a:	18db      	adds	r3, r3, r3
 800498c:	643b      	str	r3, [r7, #64]	; 0x40
 800498e:	4613      	mov	r3, r2
 8004990:	eb42 0303 	adc.w	r3, r2, r3
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800499a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800499e:	f7fb fc6f 	bl	8000280 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049aa:	fba3 2301 	umull	r2, r3, r3, r1
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2264      	movs	r2, #100	; 0x64
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	1acb      	subs	r3, r1, r3
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049be:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <UART_SetConfig+0x2d4>)
 80049c0:	fba3 2302 	umull	r2, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049cc:	441c      	add	r4, r3
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e8:	415b      	adcs	r3, r3
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6339      	str	r1, [r7, #48]	; 0x30
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a44:	460b      	mov	r3, r1
 8004a46:	18db      	adds	r3, r3, r3
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a5a:	f7fb fc11 	bl	8000280 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	; 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	3332      	adds	r3, #50	; 0x32
 8004a76:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <UART_SetConfig+0x2d4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 0207 	and.w	r2, r3, #7
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4422      	add	r2, r4
 8004a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a8c:	e106      	b.n	8004c9c <UART_SetConfig+0x4d8>
 8004a8e:	bf00      	nop
 8004a90:	40011000 	.word	0x40011000
 8004a94:	40011400 	.word	0x40011400
 8004a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aae:	4642      	mov	r2, r8
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	1891      	adds	r1, r2, r2
 8004ab4:	6239      	str	r1, [r7, #32]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004abe:	4641      	mov	r1, r8
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb43 0501 	adc.w	r5, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	00eb      	lsls	r3, r5, #3
 8004ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	4614      	mov	r4, r2
 8004ada:	461d      	mov	r5, r3
 8004adc:	4643      	mov	r3, r8
 8004ade:	18e3      	adds	r3, r4, r3
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	eb45 0303 	adc.w	r3, r5, r3
 8004aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b14:	4621      	mov	r1, r4
 8004b16:	008a      	lsls	r2, r1, #2
 8004b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b1c:	f7fb fbb0 	bl	8000280 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b60      	ldr	r3, [pc, #384]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	61b9      	str	r1, [r7, #24]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6139      	str	r1, [r7, #16]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ba8:	4649      	mov	r1, r9
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	4641      	mov	r1, r8
 8004bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	008a      	lsls	r2, r1, #2
 8004bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2264      	movs	r2, #100	; 0x64
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	1acb      	subs	r3, r1, r3
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be4:	441c      	add	r4, r3
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	673b      	str	r3, [r7, #112]	; 0x70
 8004bee:	677a      	str	r2, [r7, #116]	; 0x74
 8004bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c36:	464b      	mov	r3, r9
 8004c38:	460a      	mov	r2, r1
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	663b      	str	r3, [r7, #96]	; 0x60
 8004c4a:	667a      	str	r2, [r7, #100]	; 0x64
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c6a:	f7fb fb09 	bl	8000280 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	3332      	adds	r3, #50	; 0x32
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <UART_SetConfig+0x4e4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 020f 	and.w	r2, r3, #15
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4422      	add	r2, r4
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca8:	51eb851f 	.word	0x51eb851f

08004cac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004cac:	b5b0      	push	{r4, r5, r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004cb2:	4b96      	ldr	r3, [pc, #600]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004cb4:	22c0      	movs	r2, #192	; 0xc0
 8004cb6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004cb8:	4b94      	ldr	r3, [pc, #592]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004cba:	22a8      	movs	r2, #168	; 0xa8
 8004cbc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004cbe:	4b93      	ldr	r3, [pc, #588]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 36;
 8004cc4:	4b91      	ldr	r3, [pc, #580]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004cca:	4b91      	ldr	r3, [pc, #580]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004cd0:	4b8f      	ldr	r3, [pc, #572]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004cd6:	4b8e      	ldr	r3, [pc, #568]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004cdc:	4b8c      	ldr	r3, [pc, #560]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004ce2:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004ce4:	22c0      	movs	r2, #192	; 0xc0
 8004ce6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004ce8:	4b8a      	ldr	r3, [pc, #552]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004cea:	22a8      	movs	r2, #168	; 0xa8
 8004cec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004cee:	4b89      	ldr	r3, [pc, #548]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004cf4:	4b87      	ldr	r3, [pc, #540]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	70da      	strb	r2, [r3, #3]
//100.105.251.157
/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f006 fa85 	bl	800b20c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d02:	4b82      	ldr	r3, [pc, #520]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	061a      	lsls	r2, r3, #24
 8004d08:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	4b7e      	ldr	r3, [pc, #504]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d12:	789b      	ldrb	r3, [r3, #2]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	4313      	orrs	r3, r2
 8004d18:	4a7c      	ldr	r2, [pc, #496]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d1a:	78d2      	ldrb	r2, [r2, #3]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	061a      	lsls	r2, r3, #24
 8004d20:	4b7a      	ldr	r3, [pc, #488]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	0619      	lsls	r1, r3, #24
 8004d26:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	4319      	orrs	r1, r3
 8004d2e:	4b77      	ldr	r3, [pc, #476]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d30:	789b      	ldrb	r3, [r3, #2]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	430b      	orrs	r3, r1
 8004d36:	4975      	ldr	r1, [pc, #468]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d38:	78c9      	ldrb	r1, [r1, #3]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d42:	431a      	orrs	r2, r3
 8004d44:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	0619      	lsls	r1, r3, #24
 8004d4a:	4b70      	ldr	r3, [pc, #448]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	4319      	orrs	r1, r3
 8004d52:	4b6e      	ldr	r3, [pc, #440]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d54:	789b      	ldrb	r3, [r3, #2]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	496c      	ldr	r1, [pc, #432]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d5c:	78c9      	ldrb	r1, [r1, #3]
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d66:	431a      	orrs	r2, r3
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	0619      	lsls	r1, r3, #24
 8004d6e:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	4319      	orrs	r1, r3
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d78:	789b      	ldrb	r3, [r3, #2]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	4963      	ldr	r1, [pc, #396]	; (8004f0c <MX_LWIP_Init+0x260>)
 8004d80:	78c9      	ldrb	r1, [r1, #3]
 8004d82:	430b      	orrs	r3, r1
 8004d84:	0e1b      	lsrs	r3, r3, #24
 8004d86:	4313      	orrs	r3, r2
 8004d88:	4a63      	ldr	r2, [pc, #396]	; (8004f18 <MX_LWIP_Init+0x26c>)
 8004d8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d8c:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	061a      	lsls	r2, r3, #24
 8004d92:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004d9c:	789b      	ldrb	r3, [r3, #2]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	4313      	orrs	r3, r2
 8004da2:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004da4:	78d2      	ldrb	r2, [r2, #3]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	061a      	lsls	r2, r3, #24
 8004daa:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	0619      	lsls	r1, r3, #24
 8004db0:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4319      	orrs	r1, r3
 8004db8:	4b55      	ldr	r3, [pc, #340]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	4953      	ldr	r1, [pc, #332]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dc2:	78c9      	ldrb	r1, [r1, #3]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	0619      	lsls	r1, r3, #24
 8004dd4:	4b4e      	ldr	r3, [pc, #312]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	4319      	orrs	r1, r3
 8004ddc:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dde:	789b      	ldrb	r3, [r3, #2]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	430b      	orrs	r3, r1
 8004de4:	494a      	ldr	r1, [pc, #296]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004de6:	78c9      	ldrb	r1, [r1, #3]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004df0:	431a      	orrs	r2, r3
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	0619      	lsls	r1, r3, #24
 8004df8:	4b45      	ldr	r3, [pc, #276]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	4319      	orrs	r1, r3
 8004e00:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004e02:	789b      	ldrb	r3, [r3, #2]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	430b      	orrs	r3, r1
 8004e08:	4941      	ldr	r1, [pc, #260]	; (8004f10 <MX_LWIP_Init+0x264>)
 8004e0a:	78c9      	ldrb	r1, [r1, #3]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	0e1b      	lsrs	r3, r3, #24
 8004e10:	4313      	orrs	r3, r2
 8004e12:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <MX_LWIP_Init+0x270>)
 8004e14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e16:	4b3f      	ldr	r3, [pc, #252]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	061a      	lsls	r2, r3, #24
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	431a      	orrs	r2, r3
 8004e24:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	4a39      	ldr	r2, [pc, #228]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e2e:	78d2      	ldrb	r2, [r2, #3]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	061a      	lsls	r2, r3, #24
 8004e34:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	0619      	lsls	r1, r3, #24
 8004e3a:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	4319      	orrs	r1, r3
 8004e42:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e44:	789b      	ldrb	r3, [r3, #2]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	4932      	ldr	r1, [pc, #200]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e4c:	78c9      	ldrb	r1, [r1, #3]
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e56:	431a      	orrs	r2, r3
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	0619      	lsls	r1, r3, #24
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	4319      	orrs	r1, r3
 8004e66:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e68:	789b      	ldrb	r3, [r3, #2]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	4929      	ldr	r1, [pc, #164]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e70:	78c9      	ldrb	r1, [r1, #3]
 8004e72:	430b      	orrs	r3, r1
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	0619      	lsls	r1, r3, #24
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	4319      	orrs	r1, r3
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e8c:	789b      	ldrb	r3, [r3, #2]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	430b      	orrs	r3, r1
 8004e92:	4920      	ldr	r1, [pc, #128]	; (8004f14 <MX_LWIP_Init+0x268>)
 8004e94:	78c9      	ldrb	r1, [r1, #3]
 8004e96:	430b      	orrs	r3, r1
 8004e98:	0e1b      	lsrs	r3, r3, #24
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <MX_LWIP_Init+0x274>)
 8004e9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004ea0:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <MX_LWIP_Init+0x278>)
 8004ea2:	9302      	str	r3, [sp, #8]
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <MX_LWIP_Init+0x27c>)
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <MX_LWIP_Init+0x274>)
 8004eae:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <MX_LWIP_Init+0x270>)
 8004eb0:	4919      	ldr	r1, [pc, #100]	; (8004f18 <MX_LWIP_Init+0x26c>)
 8004eb2:	481e      	ldr	r0, [pc, #120]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004eb4:	f006 ff74 	bl	800bda0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004eb8:	481c      	ldr	r0, [pc, #112]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004eba:	f007 f923 	bl	800c104 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ed0:	4816      	ldr	r0, [pc, #88]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004ed2:	f007 f927 	bl	800c124 <netif_set_up>
 8004ed6:	e002      	b.n	8004ede <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004ed8:	4814      	ldr	r0, [pc, #80]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004eda:	f007 f98f 	bl	800c1fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004ede:	4914      	ldr	r1, [pc, #80]	; (8004f30 <MX_LWIP_Init+0x284>)
 8004ee0:	4812      	ldr	r0, [pc, #72]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004ee2:	f007 fa21 	bl	800c328 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <MX_LWIP_Init+0x288>)
 8004ee8:	1d3c      	adds	r4, r7, #4
 8004eea:	461d      	mov	r5, r3
 8004eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	490c      	ldr	r1, [pc, #48]	; (8004f2c <MX_LWIP_Init+0x280>)
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fd25 	bl	800594c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f02:	bf00      	nop
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000fe8 	.word	0x20000fe8
 8004f10:	20000fec 	.word	0x20000fec
 8004f14:	20000ff0 	.word	0x20000ff0
 8004f18:	20000fdc 	.word	0x20000fdc
 8004f1c:	20000fe0 	.word	0x20000fe0
 8004f20:	20000fe4 	.word	0x20000fe4
 8004f24:	0800b11d 	.word	0x0800b11d
 8004f28:	080053d5 	.word	0x080053d5
 8004f2c:	20000fa8 	.word	0x20000fa8
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	0801814c 	.word	0x0801814c

08004f38 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_ETH_RxCpltCallback+0x1c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fe73 	bl	8005c44 <osSemaphoreRelease>
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20005ac0 	.word	0x20005ac0

08004f6c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_ETH_TxCpltCallback+0x1c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fe63 	bl	8005c44 <osSemaphoreRelease>
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20005ac4 	.word	0x20005ac4

08004f8c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fe f867 	bl	8003068 <HAL_ETH_GetDMAError>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d104      	bne.n	8004fae <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004fa4:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <HAL_ETH_ErrorCallback+0x2c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fe4b 	bl	8005c44 <osSemaphoreRelease>
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20005ac0 	.word	0x20005ac0

08004fbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fbc:	b5b0      	push	{r4, r5, r7, lr}
 8004fbe:	b0a8      	sub	sp, #160	; 0xa0
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fda:	2264      	movs	r2, #100	; 0x64
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f011 fed5 	bl	8016d8e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004fe4:	4b84      	ldr	r3, [pc, #528]	; (80051f8 <low_level_init+0x23c>)
 8004fe6:	4a85      	ldr	r2, [pc, #532]	; (80051fc <low_level_init+0x240>)
 8004fe8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004ff6:	23e1      	movs	r3, #225	; 0xe1
 8004ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800500e:	4a7a      	ldr	r2, [pc, #488]	; (80051f8 <low_level_init+0x23c>)
 8005010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005014:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8005016:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <low_level_init+0x23c>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800501c:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <low_level_init+0x23c>)
 800501e:	4a78      	ldr	r2, [pc, #480]	; (8005200 <low_level_init+0x244>)
 8005020:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005022:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <low_level_init+0x23c>)
 8005024:	4a77      	ldr	r2, [pc, #476]	; (8005204 <low_level_init+0x248>)
 8005026:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005028:	4b73      	ldr	r3, [pc, #460]	; (80051f8 <low_level_init+0x23c>)
 800502a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800502e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005030:	4871      	ldr	r0, [pc, #452]	; (80051f8 <low_level_init+0x23c>)
 8005032:	f7fd f97b 	bl	800232c <HAL_ETH_Init>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800503c:	2238      	movs	r2, #56	; 0x38
 800503e:	2100      	movs	r1, #0
 8005040:	4871      	ldr	r0, [pc, #452]	; (8005208 <low_level_init+0x24c>)
 8005042:	f011 fea4 	bl	8016d8e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005046:	4b70      	ldr	r3, [pc, #448]	; (8005208 <low_level_init+0x24c>)
 8005048:	2221      	movs	r2, #33	; 0x21
 800504a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800504c:	4b6e      	ldr	r3, [pc, #440]	; (8005208 <low_level_init+0x24c>)
 800504e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005052:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <low_level_init+0x24c>)
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800505a:	486c      	ldr	r0, [pc, #432]	; (800520c <low_level_init+0x250>)
 800505c:	f006 fd5a 	bl	800bb14 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2206      	movs	r2, #6
 8005064:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005068:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <low_level_init+0x23c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005074:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <low_level_init+0x23c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	785a      	ldrb	r2, [r3, #1]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005080:	4b5d      	ldr	r3, [pc, #372]	; (80051f8 <low_level_init+0x23c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	789a      	ldrb	r2, [r3, #2]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800508c:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <low_level_init+0x23c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	78da      	ldrb	r2, [r3, #3]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005098:	4b57      	ldr	r3, [pc, #348]	; (80051f8 <low_level_init+0x23c>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	791a      	ldrb	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050a4:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <low_level_init+0x23c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	795a      	ldrb	r2, [r3, #5]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050b6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050be:	f043 030a 	orr.w	r3, r3, #10
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80050ca:	2203      	movs	r2, #3
 80050cc:	2100      	movs	r1, #0
 80050ce:	2001      	movs	r0, #1
 80050d0:	f001 f89c 	bl	800620c <xQueueGenericCreate>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4a4e      	ldr	r2, [pc, #312]	; (8005210 <low_level_init+0x254>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80050da:	2203      	movs	r2, #3
 80050dc:	2100      	movs	r1, #0
 80050de:	2001      	movs	r0, #1
 80050e0:	f001 f894 	bl	800620c <xQueueGenericCreate>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <low_level_init+0x258>)
 80050e8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80050ea:	4b4b      	ldr	r3, [pc, #300]	; (8005218 <low_level_init+0x25c>)
 80050ec:	f107 0408 	add.w	r4, r7, #8
 80050f0:	461d      	mov	r5, r3
 80050f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80050fe:	f107 0308 	add.w	r3, r7, #8
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fc21 	bl	800594c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800510a:	4944      	ldr	r1, [pc, #272]	; (800521c <low_level_init+0x260>)
 800510c:	4844      	ldr	r0, [pc, #272]	; (8005220 <low_level_init+0x264>)
 800510e:	f7fc f886 	bl	800121e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8005112:	4843      	ldr	r0, [pc, #268]	; (8005220 <low_level_init+0x264>)
 8005114:	f7fc f8b5 	bl	8001282 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8005118:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800511c:	2b00      	cmp	r3, #0
 800511e:	d164      	bne.n	80051ea <low_level_init+0x22e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005120:	483f      	ldr	r0, [pc, #252]	; (8005220 <low_level_init+0x264>)
 8005122:	f7fc f956 	bl	80013d2 <DP83848_GetLinkState>
 8005126:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800512a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800512e:	2b01      	cmp	r3, #1
 8005130:	dc06      	bgt.n	8005140 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f007 f8c8 	bl	800c2c8 <netif_set_link_down>
      netif_set_down(netif);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f007 f85f 	bl	800c1fc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800513e:	e056      	b.n	80051ee <low_level_init+0x232>
      switch (PHYLinkState)
 8005140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005144:	3b02      	subs	r3, #2
 8005146:	2b03      	cmp	r3, #3
 8005148:	d82a      	bhi.n	80051a0 <low_level_init+0x1e4>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <low_level_init+0x194>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	08005173 	.word	0x08005173
 8005158:	08005183 	.word	0x08005183
 800515c:	08005193 	.word	0x08005193
        duplex = ETH_FULLDUPLEX_MODE;
 8005160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005170:	e01f      	b.n	80051b2 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8005172:	2300      	movs	r3, #0
 8005174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005180:	e017      	b.n	80051b2 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8005182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800518a:	2300      	movs	r3, #0
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005190:	e00f      	b.n	80051b2 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005198:	2300      	movs	r3, #0
 800519a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800519e:	e008      	b.n	80051b2 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80051a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80051a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80051b0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051b6:	4619      	mov	r1, r3
 80051b8:	480f      	ldr	r0, [pc, #60]	; (80051f8 <low_level_init+0x23c>)
 80051ba:	f7fd fdfb 	bl	8002db4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80051be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80051c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80051ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ce:	4619      	mov	r1, r3
 80051d0:	4809      	ldr	r0, [pc, #36]	; (80051f8 <low_level_init+0x23c>)
 80051d2:	f7fd fed9 	bl	8002f88 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80051d6:	4808      	ldr	r0, [pc, #32]	; (80051f8 <low_level_init+0x23c>)
 80051d8:	f7fd f985 	bl	80024e6 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f006 ffa1 	bl	800c124 <netif_set_up>
    netif_set_link_up(netif);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f007 f83c 	bl	800c260 <netif_set_link_up>
}
 80051e8:	e001      	b.n	80051ee <low_level_init+0x232>
    Error_Handler();
 80051ea:	f7fb fc93 	bl	8000b14 <Error_Handler>
}
 80051ee:	bf00      	nop
 80051f0:	37a0      	adds	r7, #160	; 0xa0
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bdb0      	pop	{r4, r5, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20005ac8 	.word	0x20005ac8
 80051fc:	40028000 	.word	0x40028000
 8005200:	20005a20 	.word	0x20005a20
 8005204:	20005980 	.word	0x20005980
 8005208:	20005b78 	.word	0x20005b78
 800520c:	0801bb10 	.word	0x0801bb10
 8005210:	20005ac0 	.word	0x20005ac0
 8005214:	20005ac4 	.word	0x20005ac4
 8005218:	08018170 	.word	0x08018170
 800521c:	2000000c 	.word	0x2000000c
 8005220:	20005bb0 	.word	0x20005bb0

08005224 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b092      	sub	sp, #72	; 0x48
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	2230      	movs	r2, #48	; 0x30
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f011 fda2 	bl	8016d8e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800524a:	f107 030c 	add.w	r3, r7, #12
 800524e:	2230      	movs	r2, #48	; 0x30
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f011 fd9b 	bl	8016d8e <memset>

  for(q = p; q != NULL; q = q->next)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
 800525c:	e045      	b.n	80052ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	2b03      	cmp	r3, #3
 8005262:	d902      	bls.n	800526a <low_level_output+0x46>
      return ERR_IF;
 8005264:	f06f 030b 	mvn.w	r3, #11
 8005268:	e065      	b.n	8005336 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800526a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526c:	6859      	ldr	r1, [r3, #4]
 800526e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	3348      	adds	r3, #72	; 0x48
 800527a:	443b      	add	r3, r7
 800527c:	3b3c      	subs	r3, #60	; 0x3c
 800527e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	895b      	ldrh	r3, [r3, #10]
 8005284:	4619      	mov	r1, r3
 8005286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005288:	4613      	mov	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	3348      	adds	r3, #72	; 0x48
 8005292:	443b      	add	r3, r7
 8005294:	3b38      	subs	r3, #56	; 0x38
 8005296:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800529e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	f107 000c 	add.w	r0, r7, #12
 80052a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a8:	460b      	mov	r3, r1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	440b      	add	r3, r1
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	18c1      	adds	r1, r0, r3
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	3348      	adds	r3, #72	; 0x48
 80052bc:	443b      	add	r3, r7
 80052be:	3b34      	subs	r3, #52	; 0x34
 80052c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	3348      	adds	r3, #72	; 0x48
 80052d6:	443b      	add	r3, r7
 80052d8:	3b34      	subs	r3, #52	; 0x34
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	3301      	adds	r3, #1
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1b6      	bne.n	800525e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	891b      	ldrh	r3, [r3, #8]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <low_level_output+0x11c>)
 80052f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80052fa:	4a11      	ldr	r2, [pc, #68]	; (8005340 <low_level_output+0x11c>)
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <low_level_output+0x11c>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005308:	6838      	ldr	r0, [r7, #0]
 800530a:	f007 fc61 	bl	800cbd0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800530e:	490c      	ldr	r1, [pc, #48]	; (8005340 <low_level_output+0x11c>)
 8005310:	480c      	ldr	r0, [pc, #48]	; (8005344 <low_level_output+0x120>)
 8005312:	f7fd f9f5 	bl	8002700 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005316:	bf00      	nop
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <low_level_output+0x124>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f04f 31ff 	mov.w	r1, #4294967295
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fc41 	bl	8005ba8 <osSemaphoreWait>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f5      	bne.n	8005318 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <low_level_output+0x120>)
 800532e:	f7fd fb7b 	bl	8002a28 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005332:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005336:	4618      	mov	r0, r3
 8005338:	3748      	adds	r7, #72	; 0x48
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20005b78 	.word	0x20005b78
 8005344:	20005ac8 	.word	0x20005ac8
 8005348:	20005ac4 	.word	0x20005ac4

0800534c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <low_level_input+0x2c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	4619      	mov	r1, r3
 8005366:	4805      	ldr	r0, [pc, #20]	; (800537c <low_level_input+0x30>)
 8005368:	f7fd fa26 	bl	80027b8 <HAL_ETH_ReadData>
  }

  return p;
 800536c:	68fb      	ldr	r3, [r7, #12]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2000597c 	.word	0x2000597c
 800537c:	20005ac8 	.word	0x20005ac8

08005380 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <ethernetif_input+0x50>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f04f 31ff 	mov.w	r1, #4294967295
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fc05 	bl	8005ba8 <osSemaphoreWait>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f5      	bne.n	8005390 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80053a4:	68b8      	ldr	r0, [r7, #8]
 80053a6:	f7ff ffd1 	bl	800534c <low_level_input>
 80053aa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	4798      	blx	r3
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f007 fb5e 	bl	800ca84 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053ce:	e7df      	b.n	8005390 <ethernetif_input+0x10>
 80053d0:	20005ac0 	.word	0x20005ac0

080053d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <ethernetif_init+0x1c>
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <ethernetif_init+0x48>)
 80053e4:	f240 12df 	movw	r2, #479	; 0x1df
 80053e8:	490d      	ldr	r1, [pc, #52]	; (8005420 <ethernetif_init+0x4c>)
 80053ea:	480e      	ldr	r0, [pc, #56]	; (8005424 <ethernetif_init+0x50>)
 80053ec:	f011 fbfc 	bl	8016be8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2273      	movs	r2, #115	; 0x73
 80053f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2274      	movs	r2, #116	; 0x74
 80053fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <ethernetif_init+0x54>)
 8005404:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a08      	ldr	r2, [pc, #32]	; (800542c <ethernetif_init+0x58>)
 800540a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fdd5 	bl	8004fbc <low_level_init>

  return ERR_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	0801818c 	.word	0x0801818c
 8005420:	080181a8 	.word	0x080181a8
 8005424:	080181b8 	.word	0x080181b8
 8005428:	080146dd 	.word	0x080146dd
 800542c:	08005225 	.word	0x08005225

08005430 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800543c:	68f9      	ldr	r1, [r7, #12]
 800543e:	4809      	ldr	r0, [pc, #36]	; (8005464 <pbuf_free_custom+0x34>)
 8005440:	f006 fc58 	bl	800bcf4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <pbuf_free_custom+0x38>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <pbuf_free_custom+0x38>)
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <pbuf_free_custom+0x3c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fbf4 	bl	8005c44 <osSemaphoreRelease>
  }
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	0801bb10 	.word	0x0801bb10
 8005468:	2000597c 	.word	0x2000597c
 800546c:	20005ac0 	.word	0x20005ac0

08005470 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005474:	f7fc f89a 	bl	80015ac <HAL_GetTick>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08e      	sub	sp, #56	; 0x38
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a59      	ldr	r2, [pc, #356]	; (8005604 <HAL_ETH_MspInit+0x184>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f040 80ab 	bne.w	80055fa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	4b57      	ldr	r3, [pc, #348]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	4a56      	ldr	r2, [pc, #344]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054b2:	6313      	str	r3, [r2, #48]	; 0x30
 80054b4:	4b54      	ldr	r3, [pc, #336]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	623b      	str	r3, [r7, #32]
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	4b50      	ldr	r3, [pc, #320]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a4f      	ldr	r2, [pc, #316]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	4a48      	ldr	r2, [pc, #288]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ea:	6313      	str	r3, [r2, #48]	; 0x30
 80054ec:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	4b42      	ldr	r3, [pc, #264]	; (8005608 <HAL_ETH_MspInit+0x188>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4a41      	ldr	r2, [pc, #260]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005502:	f043 0310 	orr.w	r3, r3, #16
 8005506:	6313      	str	r3, [r2, #48]	; 0x30
 8005508:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <HAL_ETH_MspInit+0x188>)
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <HAL_ETH_MspInit+0x188>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <HAL_ETH_MspInit+0x188>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6313      	str	r3, [r2, #48]	; 0x30
 8005524:	4b38      	ldr	r3, [pc, #224]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	4b34      	ldr	r3, [pc, #208]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a33      	ldr	r2, [pc, #204]	; (8005608 <HAL_ETH_MspInit+0x188>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	4a2c      	ldr	r2, [pc, #176]	; (8005608 <HAL_ETH_MspInit+0x188>)
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	6313      	str	r3, [r2, #48]	; 0x30
 800555c:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <HAL_ETH_MspInit+0x188>)
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005568:	2304      	movs	r3, #4
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556c:	2302      	movs	r3, #2
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005570:	2300      	movs	r3, #0
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005574:	2303      	movs	r3, #3
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005578:	230b      	movs	r3, #11
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800557c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005580:	4619      	mov	r1, r3
 8005582:	4822      	ldr	r0, [pc, #136]	; (800560c <HAL_ETH_MspInit+0x18c>)
 8005584:	f7fe f982 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8005588:	233e      	movs	r3, #62	; 0x3e
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005598:	230b      	movs	r3, #11
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a0:	4619      	mov	r1, r3
 80055a2:	481b      	ldr	r0, [pc, #108]	; (8005610 <HAL_ETH_MspInit+0x190>)
 80055a4:	f7fe f972 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80055a8:	238f      	movs	r3, #143	; 0x8f
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ac:	2302      	movs	r3, #2
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b4:	2303      	movs	r3, #3
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055b8:	230b      	movs	r3, #11
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c0:	4619      	mov	r1, r3
 80055c2:	4814      	ldr	r0, [pc, #80]	; (8005614 <HAL_ETH_MspInit+0x194>)
 80055c4:	f7fe f962 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 80055c8:	f643 0303 	movw	r3, #14339	; 0x3803
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ce:	2302      	movs	r3, #2
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d6:	2303      	movs	r3, #3
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055da:	230b      	movs	r3, #11
 80055dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e2:	4619      	mov	r1, r3
 80055e4:	480c      	ldr	r0, [pc, #48]	; (8005618 <HAL_ETH_MspInit+0x198>)
 80055e6:	f7fe f951 	bl	800388c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	2105      	movs	r1, #5
 80055ee:	203d      	movs	r0, #61	; 0x3d
 80055f0:	f7fc fe65 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80055f4:	203d      	movs	r0, #61	; 0x3d
 80055f6:	f7fc fe7e 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80055fa:	bf00      	nop
 80055fc:	3738      	adds	r7, #56	; 0x38
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40028000 	.word	0x40028000
 8005608:	40023800 	.word	0x40023800
 800560c:	40021000 	.word	0x40021000
 8005610:	40020800 	.word	0x40020800
 8005614:	40020000 	.word	0x40020000
 8005618:	40020400 	.word	0x40020400

0800561c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005620:	4802      	ldr	r0, [pc, #8]	; (800562c <ETH_PHY_IO_Init+0x10>)
 8005622:	f7fd fccb 	bl	8002fbc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20005ac8 	.word	0x20005ac8

08005630 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return 0;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	68f9      	ldr	r1, [r7, #12]
 8005652:	4807      	ldr	r0, [pc, #28]	; (8005670 <ETH_PHY_IO_ReadReg+0x30>)
 8005654:	f7fd fb1a 	bl	8002c8c <HAL_ETH_ReadPHYRegister>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	e000      	b.n	8005666 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20005ac8 	.word	0x20005ac8

08005674 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	4807      	ldr	r0, [pc, #28]	; (80056a4 <ETH_PHY_IO_WriteReg+0x30>)
 8005688:	f7fd fb4b 	bl	8002d22 <HAL_ETH_WritePHYRegister>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	e000      	b.n	800569a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20005ac8 	.word	0x20005ac8

080056a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056ac:	f7fb ff7e 	bl	80015ac <HAL_GetTick>
 80056b0:	4603      	mov	r3, r0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0a0      	sub	sp, #128	; 0x80
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	2264      	movs	r2, #100	; 0x64
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f011 fb60 	bl	8016d8e <memset>
  int32_t PHYLinkState = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056d6:	2300      	movs	r3, #0
 80056d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056da:	2300      	movs	r3, #0
 80056dc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80056e2:	483a      	ldr	r0, [pc, #232]	; (80057cc <ethernet_link_thread+0x114>)
 80056e4:	f7fb fe75 	bl	80013d2 <DP83848_GetLinkState>
 80056e8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00c      	beq.n	8005716 <ethernet_link_thread+0x5e>
 80056fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fe:	2b01      	cmp	r3, #1
 8005700:	dc09      	bgt.n	8005716 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005702:	4833      	ldr	r0, [pc, #204]	; (80057d0 <ethernet_link_thread+0x118>)
 8005704:	f7fc ff7d 	bl	8002602 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005708:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800570a:	f006 fd77 	bl	800c1fc <netif_set_down>
    netif_set_link_down(netif);
 800570e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005710:	f006 fdda 	bl	800c2c8 <netif_set_link_down>
 8005714:	e055      	b.n	80057c2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d14e      	bne.n	80057c2 <ethernet_link_thread+0x10a>
 8005724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005726:	2b01      	cmp	r3, #1
 8005728:	dd4b      	ble.n	80057c2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572c:	3b02      	subs	r3, #2
 800572e:	2b03      	cmp	r3, #3
 8005730:	d82a      	bhi.n	8005788 <ethernet_link_thread+0xd0>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <ethernet_link_thread+0x80>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005749 	.word	0x08005749
 800573c:	0800575b 	.word	0x0800575b
 8005740:	0800576b 	.word	0x0800576b
 8005744:	0800577b 	.word	0x0800577b
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800574c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800574e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005752:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005754:	2301      	movs	r3, #1
 8005756:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005758:	e017      	b.n	800578a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800575a:	2300      	movs	r3, #0
 800575c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800575e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005762:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005764:	2301      	movs	r3, #1
 8005766:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005768:	e00f      	b.n	800578a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800576a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800576e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005770:	2300      	movs	r3, #0
 8005772:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005774:	2301      	movs	r3, #1
 8005776:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005778:	e007      	b.n	800578a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800577a:	2300      	movs	r3, #0
 800577c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800577e:	2300      	movs	r3, #0
 8005780:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005786:	e000      	b.n	800578a <ethernet_link_thread+0xd2>
    default:
      break;
 8005788:	bf00      	nop
    }

    if(linkchanged)
 800578a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d018      	beq.n	80057c2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005790:	f107 0308 	add.w	r3, r7, #8
 8005794:	4619      	mov	r1, r3
 8005796:	480e      	ldr	r0, [pc, #56]	; (80057d0 <ethernet_link_thread+0x118>)
 8005798:	f7fd fb0c 	bl	8002db4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800579c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80057a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	4809      	ldr	r0, [pc, #36]	; (80057d0 <ethernet_link_thread+0x118>)
 80057ac:	f7fd fbec 	bl	8002f88 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80057b0:	4807      	ldr	r0, [pc, #28]	; (80057d0 <ethernet_link_thread+0x118>)
 80057b2:	f7fc fe39 	bl	8002428 <HAL_ETH_Start>
      netif_set_up(netif);
 80057b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057b8:	f006 fcb4 	bl	800c124 <netif_set_up>
      netif_set_link_up(netif);
 80057bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057be:	f006 fd4f 	bl	800c260 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80057c2:	2064      	movs	r0, #100	; 0x64
 80057c4:	f000 f90e 	bl	80059e4 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80057c8:	e78b      	b.n	80056e2 <ethernet_link_thread+0x2a>
 80057ca:	bf00      	nop
 80057cc:	20005bb0 	.word	0x20005bb0
 80057d0:	20005ac8 	.word	0x20005ac8

080057d4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af02      	add	r7, sp, #8
 80057da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80057dc:	4812      	ldr	r0, [pc, #72]	; (8005828 <HAL_ETH_RxAllocateCallback+0x54>)
 80057de:	f006 fa15 	bl	800bc0c <memp_malloc_pool>
 80057e2:	60f8      	str	r0, [r7, #12]
  if (p)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f103 0220 	add.w	r2, r3, #32
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4a0d      	ldr	r2, [pc, #52]	; (800582c <HAL_ETH_RxAllocateCallback+0x58>)
 80057f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005802:	9201      	str	r2, [sp, #4]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2241      	movs	r2, #65	; 0x41
 800580a:	2100      	movs	r1, #0
 800580c:	2000      	movs	r0, #0
 800580e:	f006 ff7f 	bl	800c710 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005812:	e005      	b.n	8005820 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	0801bb10 	.word	0x0801bb10
 800582c:	08005431 	.word	0x08005431
 8005830:	2000597c 	.word	0x2000597c

08005834 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3b20      	subs	r3, #32
 8005852:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2200      	movs	r2, #0
 800585e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e003      	b.n	800587e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e009      	b.n	80058a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	891a      	ldrh	r2, [r3, #8]
 8005890:	887b      	ldrh	r3, [r7, #2]
 8005892:	4413      	add	r3, r2
 8005894:	b29a      	uxth	r2, r3
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f2      	bne.n	800588c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f007 f8e1 	bl	800ca84 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	4603      	mov	r3, r0
 80058d2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058dc:	2b84      	cmp	r3, #132	; 0x84
 80058de:	d005      	beq.n	80058ec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	3303      	adds	r3, #3
 80058ea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058ec:	68fb      	ldr	r3, [r7, #12]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005900:	f3ef 8305 	mrs	r3, IPSR
 8005904:	607b      	str	r3, [r7, #4]
  return(result);
 8005906:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005922:	f001 fd3b 	bl	800739c <vTaskStartScheduler>
  
  return osOK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}

0800592c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005930:	f7ff ffe3 	bl	80058fa <inHandlerMode>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800593a:	f001 fe53 	bl	80075e4 <xTaskGetTickCountFromISR>
 800593e:	4603      	mov	r3, r0
 8005940:	e002      	b.n	8005948 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005942:	f001 fe3f 	bl	80075c4 <xTaskGetTickCount>
 8005946:	4603      	mov	r3, r0
  }
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}

0800594c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800594c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594e:	b089      	sub	sp, #36	; 0x24
 8005950:	af04      	add	r7, sp, #16
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <osThreadCreate+0x54>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01c      	beq.n	80059a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685c      	ldr	r4, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691e      	ldr	r6, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ffa6 	bl	80058ca <makeFreeRtosPriority>
 800597e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005988:	9202      	str	r2, [sp, #8]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	9100      	str	r1, [sp, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	4632      	mov	r2, r6
 8005992:	4629      	mov	r1, r5
 8005994:	4620      	mov	r0, r4
 8005996:	f001 fb23 	bl	8006fe0 <xTaskCreateStatic>
 800599a:	4603      	mov	r3, r0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e01c      	b.n	80059da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685c      	ldr	r4, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff ff88 	bl	80058ca <makeFreeRtosPriority>
 80059ba:	4602      	mov	r2, r0
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	9200      	str	r2, [sp, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4632      	mov	r2, r6
 80059c8:	4629      	mov	r1, r5
 80059ca:	4620      	mov	r0, r4
 80059cc:	f001 fb65 	bl	800709a <xTaskCreate>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d001      	beq.n	80059da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <osDelay+0x16>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	e000      	b.n	80059fc <osDelay+0x18>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 fc99 	bl	8007334 <vTaskDelay>
  
  return osOK;
 8005a02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	2001      	movs	r0, #1
 8005a24:	f000 fc7d 	bl	8006322 <xQueueCreateMutexStatic>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e003      	b.n	8005a34 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	f000 fc60 	bl	80062f2 <xQueueCreateMutex>
 8005a32:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <osMutexWait+0x18>
    return osErrorParameter;
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	e03a      	b.n	8005aca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d103      	bne.n	8005a68 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e009      	b.n	8005a7c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <osMutexWait+0x40>
      ticks = 1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a7c:	f7ff ff3d 	bl	80058fa <inHandlerMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 f874 	bl	8006b7c <xQueueReceiveFromISR>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <osMutexWait+0x62>
      return osErrorOS;
 8005a9a:	23ff      	movs	r3, #255	; 0xff
 8005a9c:	e015      	b.n	8005aca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d011      	beq.n	8005ac8 <osMutexWait+0x8c>
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <osMutexWait+0x98>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	e008      	b.n	8005ac8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 ff53 	bl	8006964 <xQueueSemaphoreTake>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <osMutexWait+0x8c>
    return osErrorOS;
 8005ac4:	23ff      	movs	r3, #255	; 0xff
 8005ac6:	e000      	b.n	8005aca <osMutexWait+0x8e>
  }
  
  return osOK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005ae8:	f7ff ff07 	bl	80058fa <inHandlerMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fdc6 	bl	800668a <xQueueGiveFromISR>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d001      	beq.n	8005b08 <osMutexRelease+0x30>
      return osErrorOS;
 8005b04:	23ff      	movs	r3, #255	; 0xff
 8005b06:	e017      	b.n	8005b38 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d013      	beq.n	8005b36 <osMutexRelease+0x5e>
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <osMutexRelease+0x68>)
 8005b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	e00a      	b.n	8005b36 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b20:	2300      	movs	r3, #0
 8005b22:	2200      	movs	r2, #0
 8005b24:	2100      	movs	r1, #0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fc16 	bl	8006358 <xQueueGenericSend>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d001      	beq.n	8005b36 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005b32:	23ff      	movs	r3, #255	; 0xff
 8005b34:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00f      	beq.n	8005b76 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10a      	bne.n	8005b72 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2203      	movs	r2, #3
 8005b62:	9200      	str	r2, [sp, #0]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	2001      	movs	r0, #1
 8005b6a:	f000 fad7 	bl	800611c <xQueueGenericCreateStatic>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e016      	b.n	8005ba0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e014      	b.n	8005ba0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d110      	bne.n	8005b9e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	2100      	movs	r1, #0
 8005b80:	2001      	movs	r0, #1
 8005b82:	f000 fb43 	bl	800620c <xQueueGenericCreate>
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <osSemaphoreCreate+0x56>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2200      	movs	r2, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fbdf 	bl	8006358 <xQueueGenericSend>
      return sema;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	e000      	b.n	8005ba0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005b9e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	e03a      	b.n	8005c36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d103      	bne.n	8005bd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e009      	b.n	8005be8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <osSemaphoreWait+0x40>
      ticks = 1;
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005be8:	f7ff fe87 	bl	80058fa <inHandlerMode>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d017      	beq.n	8005c22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 ffbe 	bl	8006b7c <xQueueReceiveFromISR>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d001      	beq.n	8005c0a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c06:	23ff      	movs	r3, #255	; 0xff
 8005c08:	e015      	b.n	8005c36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <osSemaphoreWait+0x8c>
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <osSemaphoreWait+0x98>)
 8005c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	e008      	b.n	8005c34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fe9d 	bl	8006964 <xQueueSemaphoreTake>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d001      	beq.n	8005c34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c30:	23ff      	movs	r3, #255	; 0xff
 8005c32:	e000      	b.n	8005c36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005c54:	f7ff fe51 	bl	80058fa <inHandlerMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fd10 	bl	800668a <xQueueGiveFromISR>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c70:	23ff      	movs	r3, #255	; 0xff
 8005c72:	e017      	b.n	8005ca4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <osSemaphoreRelease+0x5e>
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <osSemaphoreRelease+0x68>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	e00a      	b.n	8005ca2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2100      	movs	r1, #0
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fb60 	bl	8006358 <xQueueGenericSend>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d001      	beq.n	8005ca2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005c9e:	23ff      	movs	r3, #255	; 0xff
 8005ca0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005cb8:	f7ff fe1f 	bl	80058fa <inHandlerMode>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005cc2:	2382      	movs	r3, #130	; 0x82
 8005cc4:	e003      	b.n	8005cce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 f814 	bl	8006cf4 <vQueueDelete>

  return osOK; 
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005cd6:	b590      	push	{r4, r7, lr}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af02      	add	r7, sp, #8
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d011      	beq.n	8005d0c <osMessageCreate+0x36>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2400      	movs	r4, #0
 8005d02:	9400      	str	r4, [sp, #0]
 8005d04:	f000 fa0a 	bl	800611c <xQueueGenericCreateStatic>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	e008      	b.n	8005d1e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	4619      	mov	r1, r3
 8005d18:	f000 fa78 	bl	800620c <xQueueGenericCreate>
 8005d1c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}
	...

08005d28 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <osMessagePut+0x1e>
    ticks = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005d46:	f7ff fdd8 	bl	80058fa <inHandlerMode>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005d50:	f107 0210 	add.w	r2, r7, #16
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	2300      	movs	r3, #0
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fbfa 	bl	8006554 <xQueueGenericSendFromISR>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d001      	beq.n	8005d6a <osMessagePut+0x42>
      return osErrorOS;
 8005d66:	23ff      	movs	r3, #255	; 0xff
 8005d68:	e018      	b.n	8005d9c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d014      	beq.n	8005d9a <osMessagePut+0x72>
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <osMessagePut+0x7c>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	e00b      	b.n	8005d9a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d82:	f107 0108 	add.w	r1, r7, #8
 8005d86:	2300      	movs	r3, #0
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fae4 	bl	8006358 <xQueueGenericSend>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d001      	beq.n	8005d9a <osMessagePut+0x72>
      return osErrorOS;
 8005d96:	23ff      	movs	r3, #255	; 0xff
 8005d98:	e000      	b.n	8005d9c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b08b      	sub	sp, #44	; 0x2c
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	617b      	str	r3, [r7, #20]
    return event;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	461c      	mov	r4, r3
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dd6:	e054      	b.n	8005e82 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d103      	bne.n	8005df0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e009      	b.n	8005e04 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <osMessageGet+0x5c>
      ticks = 1;
 8005e00:	2301      	movs	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e04:	f7ff fd79 	bl	80058fa <inHandlerMode>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01c      	beq.n	8005e48 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e0e:	f107 0220 	add.w	r2, r7, #32
 8005e12:	f107 0314 	add.w	r3, r7, #20
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	68b8      	ldr	r0, [r7, #8]
 8005e1c:	f000 feae 	bl	8006b7c <xQueueReceiveFromISR>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e26:	2310      	movs	r3, #16
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e001      	b.n	8005e30 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01d      	beq.n	8005e72 <osMessageGet+0xca>
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <osMessageGet+0xe4>)
 8005e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	e014      	b.n	8005e72 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e50:	4619      	mov	r1, r3
 8005e52:	68b8      	ldr	r0, [r7, #8]
 8005e54:	f000 fca6 	bl	80067a4 <xQueueReceive>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e5e:	2310      	movs	r3, #16
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e006      	b.n	8005e72 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <osMessageGet+0xc6>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <osMessageGet+0xc8>
 8005e6e:	2340      	movs	r3, #64	; 0x40
 8005e70:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	461c      	mov	r4, r3
 8005e76:	f107 0314 	add.w	r3, r7, #20
 8005e7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	372c      	adds	r7, #44	; 0x2c
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005e98:	f7ff fd2f 	bl	80058fa <inHandlerMode>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 ff08 	bl	8006cb8 <uxQueueMessagesWaitingFromISR>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	e003      	b.n	8005eb4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fee5 	bl	8006c7c <uxQueueMessagesWaiting>
 8005eb2:	4603      	mov	r3, r0
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ec4:	f7ff fd19 	bl	80058fa <inHandlerMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <osMessageDelete+0x16>
    return osErrorISR;
 8005ece:	2382      	movs	r3, #130	; 0x82
 8005ed0:	e003      	b.n	8005eda <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff0e 	bl	8006cf4 <vQueueDelete>

  return osOK; 
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f103 0208 	add.w	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8005efa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 0208 	add.w	r2, r3, #8
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f103 0208 	add.w	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d103      	bne.n	8005fa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e00c      	b.n	8005fbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e002      	b.n	8005fb2 <vListInsert+0x2e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d2f6      	bcs.n	8005fac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6852      	ldr	r2, [r2, #4]
 8006016:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d103      	bne.n	800602a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006076:	f002 f915 	bl	80082a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	3b01      	subs	r3, #1
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	22ff      	movs	r2, #255	; 0xff
 80060ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d114      	bne.n	80060f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01a      	beq.n	800610a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3310      	adds	r3, #16
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fbd3 	bl	8007884 <xTaskRemoveFromEventList>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d012      	beq.n	800610a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <xQueueGenericReset+0xcc>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	e009      	b.n	800610a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3310      	adds	r3, #16
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fef1 	bl	8005ee2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff feec 	bl	8005ee2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800610a:	f002 f8fb 	bl	8008304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800610e:	2301      	movs	r3, #1
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <xQueueGenericCreateStatic+0x52>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <xQueueGenericCreateStatic+0x56>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueGenericCreateStatic+0x58>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <xQueueGenericCreateStatic+0x7e>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueGenericCreateStatic+0x82>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericCreateStatic+0x84>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61fb      	str	r3, [r7, #28]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ba:	2348      	movs	r3, #72	; 0x48
 80061bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b48      	cmp	r3, #72	; 0x48
 80061c2:	d00a      	beq.n	80061da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	61bb      	str	r3, [r7, #24]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f83f 	bl	8006280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006204:	4618      	mov	r0, r3
 8006206:	3730      	adds	r7, #48	; 0x30
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3348      	adds	r3, #72	; 0x48
 8006244:	4618      	mov	r0, r3
 8006246:	f002 f94f 	bl	80084e8 <pvPortMalloc>
 800624a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	3348      	adds	r3, #72	; 0x48
 800625a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006264:	79fa      	ldrb	r2, [r7, #7]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f805 	bl	8006280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006276:	69bb      	ldr	r3, [r7, #24]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e002      	b.n	80062a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062ae:	2101      	movs	r1, #1
 80062b0:	69b8      	ldr	r0, [r7, #24]
 80062b2:	f7ff fecb 	bl	800604c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062de:	2300      	movs	r3, #0
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f837 	bl	8006358 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	4603      	mov	r3, r0
 80062fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	461a      	mov	r2, r3
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f7ff ff7e 	bl	800620c <xQueueGenericCreate>
 8006310:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ffd3 	bl	80062be <prvInitialiseMutex>

		return xNewQueue;
 8006318:	68fb      	ldr	r3, [r7, #12]
	}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006322:	b580      	push	{r7, lr}
 8006324:	b088      	sub	sp, #32
 8006326:	af02      	add	r7, sp, #8
 8006328:	4603      	mov	r3, r0
 800632a:	6039      	str	r1, [r7, #0]
 800632c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	6939      	ldr	r1, [r7, #16]
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f7ff feeb 	bl	800611c <xQueueGenericCreateStatic>
 8006346:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ffb8 	bl	80062be <prvInitialiseMutex>

		return xNewQueue;
 800634e:	68fb      	ldr	r3, [r7, #12]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	; 0x38
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006366:	2300      	movs	r3, #0
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xQueueGenericSend+0x32>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <xQueueGenericSend+0x40>
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <xQueueGenericSend+0x44>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <xQueueGenericSend+0x46>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <xQueueGenericSend+0x60>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d103      	bne.n	80063c6 <xQueueGenericSend+0x6e>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <xQueueGenericSend+0x72>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueGenericSend+0x74>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	623b      	str	r3, [r7, #32]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e6:	f001 fc0d 	bl	8007c04 <xTaskGetSchedulerState>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <xQueueGenericSend+0x9e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <xQueueGenericSend+0xa2>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <xQueueGenericSend+0xa4>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xQueueGenericSend+0xbe>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	61fb      	str	r3, [r7, #28]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006416:	f001 ff45 	bl	80082a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <xQueueGenericSend+0xd4>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d129      	bne.n	8006480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fc9a 	bl	8006d6a <prvCopyDataToQueue>
 8006436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	3324      	adds	r3, #36	; 0x24
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fa1d 	bl	8007884 <xTaskRemoveFromEventList>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006450:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <xQueueGenericSend+0x1f8>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	e00a      	b.n	8006478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006468:	4b39      	ldr	r3, [pc, #228]	; (8006550 <xQueueGenericSend+0x1f8>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006478:	f001 ff44 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 800647c:	2301      	movs	r3, #1
 800647e:	e063      	b.n	8006548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006486:	f001 ff3d 	bl	8008304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800648a:	2300      	movs	r3, #0
 800648c:	e05c      	b.n	8006548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fa55 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a2:	f001 ff2f 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a6:	f000 ffe3 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064aa:	f001 fefb 	bl	80082a4 <vPortEnterCritical>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d103      	bne.n	80064c4 <xQueueGenericSend+0x16c>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d103      	bne.n	80064da <xQueueGenericSend+0x182>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064da:	f001 ff13 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064de:	1d3a      	adds	r2, r7, #4
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fa44 	bl	8007974 <xTaskCheckForTimeOut>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d124      	bne.n	800653c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f4:	f000 fd31 	bl	8006f5a <prvIsQueueFull>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	3310      	adds	r3, #16
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f998 	bl	800783c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 fcbc 	bl	8006e8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006512:	f000 ffbb 	bl	800748c <xTaskResumeAll>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	f47f af7c 	bne.w	8006416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <xQueueGenericSend+0x1f8>)
 8006520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	e772      	b.n	8006416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006532:	f000 fcaa 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006536:	f000 ffa9 	bl	800748c <xTaskResumeAll>
 800653a:	e76c      	b.n	8006416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653e:	f000 fca4 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006542:	f000 ffa3 	bl	800748c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006548:	4618      	mov	r0, r3
 800654a:	3738      	adds	r7, #56	; 0x38
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b090      	sub	sp, #64	; 0x40
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <xQueueGenericSendFromISR+0x3c>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <xQueueGenericSendFromISR+0x40>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <xQueueGenericSendFromISR+0x42>
 8006594:	2300      	movs	r3, #0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x6a>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x70>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065de:	f001 ff43 	bl	8008468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065e2:	f3ef 8211 	mrs	r2, BASEPRI
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61fa      	str	r2, [r7, #28]
 80065f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <xQueueGenericSendFromISR+0xbc>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d12f      	bne.n	8006670 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006626:	f000 fba0 	bl	8006d6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800662a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d112      	bne.n	800665a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d016      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f001 f91f 	bl	8007884 <xTaskRemoveFromEventList>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00e      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e007      	b.n	800666a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800665a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800665e:	3301      	adds	r3, #1
 8006660:	b2db      	uxtb	r3, r3
 8006662:	b25a      	sxtb	r2, r3
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800666a:	2301      	movs	r3, #1
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800666e:	e001      	b.n	8006674 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800667e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006682:	4618      	mov	r0, r3
 8006684:	3740      	adds	r7, #64	; 0x40
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08e      	sub	sp, #56	; 0x38
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	623b      	str	r3, [r7, #32]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	61fb      	str	r3, [r7, #28]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <xQueueGiveFromISR+0x58>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <xQueueGiveFromISR+0x5c>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <xQueueGiveFromISR+0x5e>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueGiveFromISR+0x78>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61bb      	str	r3, [r7, #24]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006702:	f001 feb1 	bl	8008468 <vPortValidateInterruptPriority>
	__asm volatile
 8006706:	f3ef 8211 	mrs	r2, BASEPRI
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	617a      	str	r2, [r7, #20]
 800671c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800671e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672e:	429a      	cmp	r2, r3
 8006730:	d22b      	bcs.n	800678a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d112      	bne.n	8006774 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	3324      	adds	r3, #36	; 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f892 	bl	8007884 <xTaskRemoveFromEventList>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e007      	b.n	8006784 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006778:	3301      	adds	r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	b25a      	sxtb	r2, r3
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006784:	2301      	movs	r3, #1
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
 8006788:	e001      	b.n	800678e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800678a:	2300      	movs	r3, #0
 800678c:	637b      	str	r3, [r7, #52]	; 0x34
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f383 8811 	msr	BASEPRI, r3
}
 8006798:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800679c:	4618      	mov	r0, r3
 800679e:	3738      	adds	r7, #56	; 0x38
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xQueueReceive+0x30>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	623b      	str	r3, [r7, #32]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <xQueueReceive+0x3e>
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <xQueueReceive+0x42>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <xQueueReceive+0x44>
 80067e6:	2300      	movs	r3, #0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueReceive+0x5e>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	61fb      	str	r3, [r7, #28]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006802:	f001 f9ff 	bl	8007c04 <xTaskGetSchedulerState>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <xQueueReceive+0x6e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <xQueueReceive+0x72>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <xQueueReceive+0x74>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueReceive+0x8e>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61bb      	str	r3, [r7, #24]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006832:	f001 fd37 	bl	80082a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01f      	beq.n	8006882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006846:	f000 fafa 	bl	8006e3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00f      	beq.n	800687a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	3310      	adds	r3, #16
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f810 	bl	8007884 <xTaskRemoveFromEventList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d007      	beq.n	800687a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800686a:	4b3d      	ldr	r3, [pc, #244]	; (8006960 <xQueueReceive+0x1bc>)
 800686c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800687a:	f001 fd43 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 800687e:	2301      	movs	r3, #1
 8006880:	e069      	b.n	8006956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006888:	f001 fd3c 	bl	8008304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800688c:	2300      	movs	r3, #0
 800688e:	e062      	b.n	8006956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f854 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068a4:	f001 fd2e 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068a8:	f000 fde2 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ac:	f001 fcfa 	bl	80082a4 <vPortEnterCritical>
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d103      	bne.n	80068c6 <xQueueReceive+0x122>
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <xQueueReceive+0x138>
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	f001 fd12 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068e0:	1d3a      	adds	r2, r7, #4
 80068e2:	f107 0310 	add.w	r3, r7, #16
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f843 	bl	8007974 <xTaskCheckForTimeOut>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d123      	bne.n	800693c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f6:	f000 fb1a 	bl	8006f2e <prvIsQueueEmpty>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f000 ff97 	bl	800783c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800690e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006910:	f000 fabb 	bl	8006e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006914:	f000 fdba 	bl	800748c <xTaskResumeAll>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d189      	bne.n	8006832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <xQueueReceive+0x1bc>)
 8006920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	e780      	b.n	8006832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006932:	f000 faaa 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006936:	f000 fda9 	bl	800748c <xTaskResumeAll>
 800693a:	e77a      	b.n	8006832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800693c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693e:	f000 faa4 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006942:	f000 fda3 	bl	800748c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006948:	f000 faf1 	bl	8006f2e <prvIsQueueEmpty>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	f43f af6f 	beq.w	8006832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006956:	4618      	mov	r0, r3
 8006958:	3730      	adds	r7, #48	; 0x30
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	623b      	str	r3, [r7, #32]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	61fb      	str	r3, [r7, #28]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b4:	f001 f926 	bl	8007c04 <xTaskGetSchedulerState>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <xQueueSemaphoreTake+0x60>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <xQueueSemaphoreTake+0x64>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <xQueueSemaphoreTake+0x66>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61bb      	str	r3, [r7, #24]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e4:	f001 fc5e 	bl	80082a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d024      	beq.n	8006a3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	1e5a      	subs	r2, r3, #1
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a04:	f001 faa6 	bl	8007f54 <pvTaskIncrementMutexHeldCount>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	3310      	adds	r3, #16
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 ff32 	bl	8007884 <xTaskRemoveFromEventList>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a26:	4b54      	ldr	r3, [pc, #336]	; (8006b78 <xQueueSemaphoreTake+0x214>)
 8006a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a36:	f001 fc65 	bl	8008304 <vPortExitCritical>
				return pdPASS;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e097      	b.n	8006b6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d111      	bne.n	8006a68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a60:	f001 fc50 	bl	8008304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e082      	b.n	8006b6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 ff68 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a7c:	f001 fc42 	bl	8008304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a80:	f000 fcf6 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a84:	f001 fc0e 	bl	80082a4 <vPortEnterCritical>
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d103      	bne.n	8006a9e <xQueueSemaphoreTake+0x13a>
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d103      	bne.n	8006ab4 <xQueueSemaphoreTake+0x150>
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	f001 fc26 	bl	8008304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab8:	463a      	mov	r2, r7
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ff57 	bl	8007974 <xTaskCheckForTimeOut>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d132      	bne.n	8006b32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ace:	f000 fa2e 	bl	8006f2e <prvIsQueueEmpty>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d026      	beq.n	8006b26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ae0:	f001 fbe0 	bl	80082a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f8a9 	bl	8007c40 <xTaskPriorityInherit>
 8006aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006af0:	f001 fc08 	bl	8008304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fe9d 	bl	800783c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b04:	f000 f9c1 	bl	8006e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b08:	f000 fcc0 	bl	800748c <xTaskResumeAll>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af68 	bne.w	80069e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b14:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <xQueueSemaphoreTake+0x214>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	e75e      	b.n	80069e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b28:	f000 f9af 	bl	8006e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2c:	f000 fcae 	bl	800748c <xTaskResumeAll>
 8006b30:	e758      	b.n	80069e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b34:	f000 f9a9 	bl	8006e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b38:	f000 fca8 	bl	800748c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b3e:	f000 f9f6 	bl	8006f2e <prvIsQueueEmpty>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f43f af4d 	beq.w	80069e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b50:	f001 fba8 	bl	80082a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b56:	f000 f8f0 	bl	8006d3a <prvGetDisinheritPriorityAfterTimeout>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f968 	bl	8007e38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b68:	f001 fbcc 	bl	8008304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3738      	adds	r7, #56	; 0x38
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	623b      	str	r3, [r7, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <xQueueReceiveFromISR+0x3a>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueReceiveFromISR+0x3e>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueReceiveFromISR+0x40>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	61fb      	str	r3, [r7, #28]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bd6:	f001 fc47 	bl	8008468 <vPortValidateInterruptPriority>
	__asm volatile
 8006bda:	f3ef 8211 	mrs	r2, BASEPRI
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61ba      	str	r2, [r7, #24]
 8006bf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02f      	beq.n	8006c62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c10:	f000 f915 	bl	8006e3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	1e5a      	subs	r2, r3, #1
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d112      	bne.n	8006c4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	3310      	adds	r3, #16
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fe26 	bl	8007884 <xTaskRemoveFromEventList>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00e      	beq.n	8006c5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	e007      	b.n	8006c5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c50:	3301      	adds	r3, #1
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	b25a      	sxtb	r2, r3
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c60:	e001      	b.n	8006c66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f383 8811 	msr	BASEPRI, r3
}
 8006c70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3738      	adds	r7, #56	; 0x38
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	60bb      	str	r3, [r7, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006ca0:	f001 fb00 	bl	80082a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006caa:	f001 fb2b 	bl	8008304 <vPortExitCritical>

	return uxReturn;
 8006cae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	60fb      	str	r3, [r7, #12]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006ce6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <vQueueDelete+0x28>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60bb      	str	r3, [r7, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f935 	bl	8006f8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fca7 	bl	8008680 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1c3 0307 	rsb	r3, r3, #7
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e001      	b.n	8006d5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10d      	bne.n	8006da4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d14d      	bne.n	8006e2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 ffc9 	bl	8007d2c <xTaskPriorityDisinherit>
 8006d9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]
 8006da2:	e043      	b.n	8006e2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d119      	bne.n	8006dde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6858      	ldr	r0, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	461a      	mov	r2, r3
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	f010 f8d8 	bl	8016f6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d32b      	bcc.n	8006e2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
 8006ddc:	e026      	b.n	8006e2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	461a      	mov	r2, r3
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	f010 f8be 	bl	8016f6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	425b      	negs	r3, r3
 8006df8:	441a      	add	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d207      	bcs.n	8006e1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	425b      	negs	r3, r3
 8006e14:	441a      	add	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d105      	bne.n	8006e2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e34:	697b      	ldr	r3, [r7, #20]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	441a      	add	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d303      	bcc.n	8006e72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68d9      	ldr	r1, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f010 f874 	bl	8016f6a <memcpy>
	}
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e92:	f001 fa07 	bl	80082a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9e:	e011      	b.n	8006ec4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fce9 	bl	8007884 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eb8:	f000 fdbe 	bl	8007a38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dce9      	bgt.n	8006ea0 <prvUnlockQueue+0x16>
 8006ecc:	e000      	b.n	8006ed0 <prvUnlockQueue+0x46>
					break;
 8006ece:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fa14 	bl	8008304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006edc:	f001 f9e2 	bl	80082a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee8:	e011      	b.n	8006f0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d012      	beq.n	8006f18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fcc4 	bl	8007884 <xTaskRemoveFromEventList>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f02:	f000 fd99 	bl	8007a38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dce9      	bgt.n	8006eea <prvUnlockQueue+0x60>
 8006f16:	e000      	b.n	8006f1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f22:	f001 f9ef 	bl	8008304 <vPortExitCritical>
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f36:	f001 f9b5 	bl	80082a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e001      	b.n	8006f4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f4c:	f001 f9da 	bl	8008304 <vPortExitCritical>

	return xReturn;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f62:	f001 f99f 	bl	80082a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d102      	bne.n	8006f78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e001      	b.n	8006f7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f7c:	f001 f9c2 	bl	8008304 <vPortExitCritical>

	return xReturn;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e016      	b.n	8006fc8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f9a:	4a10      	ldr	r2, [pc, #64]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d10b      	bne.n	8006fc2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fb4:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <vQueueUnregisterQueue+0x50>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4413      	add	r3, r2
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]
				break;
 8006fc0:	e006      	b.n	8006fd0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b07      	cmp	r3, #7
 8006fcc:	d9e5      	bls.n	8006f9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20005bd0 	.word	0x20005bd0

08006fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08e      	sub	sp, #56	; 0x38
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <xTaskCreateStatic+0x46>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	61fb      	str	r3, [r7, #28]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007026:	23a0      	movs	r3, #160	; 0xa0
 8007028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2ba0      	cmp	r3, #160	; 0xa0
 800702e:	d00a      	beq.n	8007046 <xTaskCreateStatic+0x66>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	61bb      	str	r3, [r7, #24]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007046:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01e      	beq.n	800708c <xTaskCreateStatic+0xac>
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01b      	beq.n	800708c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	2202      	movs	r2, #2
 8007062:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007066:	2300      	movs	r3, #0
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	9302      	str	r3, [sp, #8]
 800706e:	f107 0314 	add.w	r3, r7, #20
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f850 	bl	8007124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007086:	f000 f8eb 	bl	8007260 <prvAddNewTaskToReadyList>
 800708a:	e001      	b.n	8007090 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
	}
 8007092:	4618      	mov	r0, r3
 8007094:	3728      	adds	r7, #40	; 0x28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08c      	sub	sp, #48	; 0x30
 800709e:	af04      	add	r7, sp, #16
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fa1a 	bl	80084e8 <pvPortMalloc>
 80070b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070bc:	20a0      	movs	r0, #160	; 0xa0
 80070be:	f001 fa13 	bl	80084e8 <pvPortMalloc>
 80070c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
 80070d0:	e005      	b.n	80070de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070d2:	6978      	ldr	r0, [r7, #20]
 80070d4:	f001 fad4 	bl	8008680 <vPortFree>
 80070d8:	e001      	b.n	80070de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f80e 	bl	8007124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007108:	69f8      	ldr	r0, [r7, #28]
 800710a:	f000 f8a9 	bl	8007260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800710e:	2301      	movs	r3, #1
 8007110:	61bb      	str	r3, [r7, #24]
 8007112:	e002      	b.n	800711a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
 8007118:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800711a:	69bb      	ldr	r3, [r7, #24]
	}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800713c:	3b01      	subs	r3, #1
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	617b      	str	r3, [r7, #20]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01f      	beq.n	80071b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	e012      	b.n	800719e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	7819      	ldrb	r1, [r3, #0]
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	3334      	adds	r3, #52	; 0x34
 8007188:	460a      	mov	r2, r1
 800718a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b0f      	cmp	r3, #15
 80071a2:	d9e9      	bls.n	8007178 <prvInitialiseNewTask+0x54>
 80071a4:	e000      	b.n	80071a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80071a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b0:	e003      	b.n	80071ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d901      	bls.n	80071c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071c0:	2306      	movs	r3, #6
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2200      	movs	r2, #0
 80071d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	3304      	adds	r3, #4
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fea1 	bl	8005f22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	3318      	adds	r3, #24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fe9c 	bl	8005f22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f1c3 0207 	rsb	r2, r3, #7
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	334c      	adds	r3, #76	; 0x4c
 8007214:	224c      	movs	r2, #76	; 0x4c
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f00f fdb8 	bl	8016d8e <memset>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <prvInitialiseNewTask+0x130>)
 8007222:	651a      	str	r2, [r3, #80]	; 0x50
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <prvInitialiseNewTask+0x134>)
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	4a0b      	ldr	r2, [pc, #44]	; (800725c <prvInitialiseNewTask+0x138>)
 800722e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	69b8      	ldr	r0, [r7, #24]
 8007236:	f000 ff07 	bl	8008048 <pxPortInitialiseStack>
 800723a:	4602      	mov	r2, r0
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724c:	bf00      	nop
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	2000d26c 	.word	0x2000d26c
 8007258:	2000d2d4 	.word	0x2000d2d4
 800725c:	2000d33c 	.word	0x2000d33c

08007260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007268:	f001 f81c 	bl	80082a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800726c:	4b2a      	ldr	r3, [pc, #168]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a29      	ldr	r2, [pc, #164]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 8007274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800727e:	4a27      	ldr	r2, [pc, #156]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007284:	4b24      	ldr	r3, [pc, #144]	; (8007318 <prvAddNewTaskToReadyList+0xb8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d110      	bne.n	80072ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800728c:	f000 fbf8 	bl	8007a80 <prvInitialiseTaskLists>
 8007290:	e00d      	b.n	80072ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <prvAddNewTaskToReadyList+0xc0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d802      	bhi.n	80072ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072ae:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <prvAddNewTaskToReadyList+0xc4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	4a1b      	ldr	r2, [pc, #108]	; (8007324 <prvAddNewTaskToReadyList+0xc4>)
 80072b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <prvAddNewTaskToReadyList+0xc8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <prvAddNewTaskToReadyList+0xc8>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <prvAddNewTaskToReadyList+0xcc>)
 80072d8:	441a      	add	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7fe fe2b 	bl	8005f3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072e6:	f001 f80d 	bl	8008304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d207      	bcs.n	8007310 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <prvAddNewTaskToReadyList+0xd0>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20005d10 	.word	0x20005d10
 800731c:	20005c10 	.word	0x20005c10
 8007320:	20005d1c 	.word	0x20005d1c
 8007324:	20005d2c 	.word	0x20005d2c
 8007328:	20005d18 	.word	0x20005d18
 800732c:	20005c14 	.word	0x20005c14
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <vTaskDelay+0x60>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <vTaskDelay+0x30>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007364:	f000 f884 	bl	8007470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fe06 	bl	8007f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007370:	f000 f88c 	bl	800748c <xTaskResumeAll>
 8007374:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <vTaskDelay+0x64>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20005d38 	.word	0x20005d38
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073aa:	463a      	mov	r2, r7
 80073ac:	1d39      	adds	r1, r7, #4
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 f8e2 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	9202      	str	r2, [sp, #8]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	460a      	mov	r2, r1
 80073ca:	4921      	ldr	r1, [pc, #132]	; (8007450 <vTaskStartScheduler+0xb4>)
 80073cc:	4821      	ldr	r0, [pc, #132]	; (8007454 <vTaskStartScheduler+0xb8>)
 80073ce:	f7ff fe07 	bl	8006fe0 <xTaskCreateStatic>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4a20      	ldr	r2, [pc, #128]	; (8007458 <vTaskStartScheduler+0xbc>)
 80073d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073d8:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <vTaskStartScheduler+0xbc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e001      	b.n	80073ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d11b      	bne.n	8007428 <vTaskStartScheduler+0x8c>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <vTaskStartScheduler+0xc0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	334c      	adds	r3, #76	; 0x4c
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <vTaskStartScheduler+0xc4>)
 800740c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800740e:	4b15      	ldr	r3, [pc, #84]	; (8007464 <vTaskStartScheduler+0xc8>)
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <vTaskStartScheduler+0xcc>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800741c:	4b13      	ldr	r3, [pc, #76]	; (800746c <vTaskStartScheduler+0xd0>)
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007422:	f000 fe9d 	bl	8008160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007426:	e00e      	b.n	8007446 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d10a      	bne.n	8007446 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <vTaskStartScheduler+0xa8>
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	080181e0 	.word	0x080181e0
 8007454:	08007a51 	.word	0x08007a51
 8007458:	20005d34 	.word	0x20005d34
 800745c:	20005c10 	.word	0x20005c10
 8007460:	20000088 	.word	0x20000088
 8007464:	20005d30 	.word	0x20005d30
 8007468:	20005d1c 	.word	0x20005d1c
 800746c:	20005d14 	.word	0x20005d14

08007470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <vTaskSuspendAll+0x18>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a03      	ldr	r2, [pc, #12]	; (8007488 <vTaskSuspendAll+0x18>)
 800747c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20005d38 	.word	0x20005d38

0800748c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800749a:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <xTaskResumeAll+0x114>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	603b      	str	r3, [r7, #0]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b8:	f000 fef4 	bl	80082a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074bc:	4b38      	ldr	r3, [pc, #224]	; (80075a0 <xTaskResumeAll+0x114>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	4a37      	ldr	r2, [pc, #220]	; (80075a0 <xTaskResumeAll+0x114>)
 80074c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c6:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <xTaskResumeAll+0x114>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d161      	bne.n	8007592 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ce:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <xTaskResumeAll+0x118>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d05d      	beq.n	8007592 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d6:	e02e      	b.n	8007536 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d8:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <xTaskResumeAll+0x11c>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3318      	adds	r3, #24
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fd86 	bl	8005ff6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fd81 	bl	8005ff6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	2201      	movs	r2, #1
 80074fa:	409a      	lsls	r2, r3
 80074fc:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <xTaskResumeAll+0x120>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4313      	orrs	r3, r2
 8007502:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <xTaskResumeAll+0x120>)
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4a27      	ldr	r2, [pc, #156]	; (80075b0 <xTaskResumeAll+0x124>)
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fe fd0d 	bl	8005f3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <xTaskResumeAll+0x128>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	429a      	cmp	r2, r3
 800752e:	d302      	bcc.n	8007536 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <xTaskResumeAll+0x11c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1cc      	bne.n	80074d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007544:	f000 fb3e 	bl	8007bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007548:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <xTaskResumeAll+0x130>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007554:	f000 f858 	bl	8007608 <xTaskIncrementTick>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800755e:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f1      	bne.n	8007554 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xTaskResumeAll+0x130>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <xTaskResumeAll+0x12c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xTaskResumeAll+0x134>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f000 feb7 	bl	8008304 <vPortExitCritical>

	return xAlreadyYielded;
 8007596:	68bb      	ldr	r3, [r7, #8]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20005d38 	.word	0x20005d38
 80075a4:	20005d10 	.word	0x20005d10
 80075a8:	20005cd0 	.word	0x20005cd0
 80075ac:	20005d18 	.word	0x20005d18
 80075b0:	20005c14 	.word	0x20005c14
 80075b4:	20005c10 	.word	0x20005c10
 80075b8:	20005d24 	.word	0x20005d24
 80075bc:	20005d20 	.word	0x20005d20
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <xTaskGetTickCount+0x1c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20005d14 	.word	0x20005d14

080075e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ea:	f000 ff3d 	bl	8008468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80075f2:	4b04      	ldr	r3, [pc, #16]	; (8007604 <xTaskGetTickCountFromISR+0x20>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075f8:	683b      	ldr	r3, [r7, #0]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20005d14 	.word	0x20005d14

08007608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007612:	4b4e      	ldr	r3, [pc, #312]	; (800774c <xTaskIncrementTick+0x144>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 808e 	bne.w	8007738 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800761c:	4b4c      	ldr	r3, [pc, #304]	; (8007750 <xTaskIncrementTick+0x148>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007624:	4a4a      	ldr	r2, [pc, #296]	; (8007750 <xTaskIncrementTick+0x148>)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d120      	bne.n	8007672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007630:	4b48      	ldr	r3, [pc, #288]	; (8007754 <xTaskIncrementTick+0x14c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <xTaskIncrementTick+0x48>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <xTaskIncrementTick+0x46>
 8007650:	4b40      	ldr	r3, [pc, #256]	; (8007754 <xTaskIncrementTick+0x14c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	4b40      	ldr	r3, [pc, #256]	; (8007758 <xTaskIncrementTick+0x150>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a3e      	ldr	r2, [pc, #248]	; (8007754 <xTaskIncrementTick+0x14c>)
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	4a3e      	ldr	r2, [pc, #248]	; (8007758 <xTaskIncrementTick+0x150>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	4b3d      	ldr	r3, [pc, #244]	; (800775c <xTaskIncrementTick+0x154>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a3c      	ldr	r2, [pc, #240]	; (800775c <xTaskIncrementTick+0x154>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	f000 faa9 	bl	8007bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007672:	4b3b      	ldr	r3, [pc, #236]	; (8007760 <xTaskIncrementTick+0x158>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	429a      	cmp	r2, r3
 800767a:	d348      	bcc.n	800770e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767c:	4b35      	ldr	r3, [pc, #212]	; (8007754 <xTaskIncrementTick+0x14c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007686:	4b36      	ldr	r3, [pc, #216]	; (8007760 <xTaskIncrementTick+0x158>)
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	601a      	str	r2, [r3, #0]
					break;
 800768e:	e03e      	b.n	800770e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007690:	4b30      	ldr	r3, [pc, #192]	; (8007754 <xTaskIncrementTick+0x14c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d203      	bcs.n	80076b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076a8:	4a2d      	ldr	r2, [pc, #180]	; (8007760 <xTaskIncrementTick+0x158>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076ae:	e02e      	b.n	800770e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe fc9e 	bl	8005ff6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	3318      	adds	r3, #24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fc95 	bl	8005ff6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	2201      	movs	r2, #1
 80076d2:	409a      	lsls	r2, r3
 80076d4:	4b23      	ldr	r3, [pc, #140]	; (8007764 <xTaskIncrementTick+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	4a22      	ldr	r2, [pc, #136]	; (8007764 <xTaskIncrementTick+0x15c>)
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <xTaskIncrementTick+0x160>)
 80076ec:	441a      	add	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f7fe fc21 	bl	8005f3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	4b1b      	ldr	r3, [pc, #108]	; (800776c <xTaskIncrementTick+0x164>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d3b9      	bcc.n	800767c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770c:	e7b6      	b.n	800767c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800770e:	4b17      	ldr	r3, [pc, #92]	; (800776c <xTaskIncrementTick+0x164>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	4914      	ldr	r1, [pc, #80]	; (8007768 <xTaskIncrementTick+0x160>)
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d901      	bls.n	800772a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007726:	2301      	movs	r3, #1
 8007728:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800772a:	4b11      	ldr	r3, [pc, #68]	; (8007770 <xTaskIncrementTick+0x168>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e004      	b.n	8007742 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <xTaskIncrementTick+0x16c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <xTaskIncrementTick+0x16c>)
 8007740:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20005d38 	.word	0x20005d38
 8007750:	20005d14 	.word	0x20005d14
 8007754:	20005cc8 	.word	0x20005cc8
 8007758:	20005ccc 	.word	0x20005ccc
 800775c:	20005d28 	.word	0x20005d28
 8007760:	20005d30 	.word	0x20005d30
 8007764:	20005d18 	.word	0x20005d18
 8007768:	20005c14 	.word	0x20005c14
 800776c:	20005c10 	.word	0x20005c10
 8007770:	20005d24 	.word	0x20005d24
 8007774:	20005d20 	.word	0x20005d20

08007778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800777e:	4b29      	ldr	r3, [pc, #164]	; (8007824 <vTaskSwitchContext+0xac>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007786:	4b28      	ldr	r3, [pc, #160]	; (8007828 <vTaskSwitchContext+0xb0>)
 8007788:	2201      	movs	r2, #1
 800778a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800778c:	e044      	b.n	8007818 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800778e:	4b26      	ldr	r3, [pc, #152]	; (8007828 <vTaskSwitchContext+0xb0>)
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <vTaskSwitchContext+0xb4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	fab3 f383 	clz	r3, r3
 80077a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	f1c3 031f 	rsb	r3, r3, #31
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	4921      	ldr	r1, [pc, #132]	; (8007830 <vTaskSwitchContext+0xb8>)
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	607b      	str	r3, [r7, #4]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <vTaskSwitchContext+0x5a>
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4a14      	ldr	r2, [pc, #80]	; (8007830 <vTaskSwitchContext+0xb8>)
 80077e0:	4413      	add	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3308      	adds	r3, #8
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d104      	bne.n	8007804 <vTaskSwitchContext+0x8c>
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <vTaskSwitchContext+0xbc>)
 800780c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <vTaskSwitchContext+0xbc>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	334c      	adds	r3, #76	; 0x4c
 8007814:	4a08      	ldr	r2, [pc, #32]	; (8007838 <vTaskSwitchContext+0xc0>)
 8007816:	6013      	str	r3, [r2, #0]
}
 8007818:	bf00      	nop
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	20005d38 	.word	0x20005d38
 8007828:	20005d24 	.word	0x20005d24
 800782c:	20005d18 	.word	0x20005d18
 8007830:	20005c14 	.word	0x20005c14
 8007834:	20005c10 	.word	0x20005c10
 8007838:	20000088 	.word	0x20000088

0800783c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007862:	4b07      	ldr	r3, [pc, #28]	; (8007880 <vTaskPlaceOnEventList+0x44>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3318      	adds	r3, #24
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fe fb8a 	bl	8005f84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007870:	2101      	movs	r1, #1
 8007872:	6838      	ldr	r0, [r7, #0]
 8007874:	f000 fb82 	bl	8007f7c <prvAddCurrentTaskToDelayedList>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20005c10 	.word	0x20005c10

08007884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60fb      	str	r3, [r7, #12]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	3318      	adds	r3, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fb9e 	bl	8005ff6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ba:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <xTaskRemoveFromEventList+0xac>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d11c      	bne.n	80078fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fb95 	bl	8005ff6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	2201      	movs	r2, #1
 80078d2:	409a      	lsls	r2, r3
 80078d4:	4b17      	ldr	r3, [pc, #92]	; (8007934 <xTaskRemoveFromEventList+0xb0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4313      	orrs	r3, r2
 80078da:	4a16      	ldr	r2, [pc, #88]	; (8007934 <xTaskRemoveFromEventList+0xb0>)
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4a13      	ldr	r2, [pc, #76]	; (8007938 <xTaskRemoveFromEventList+0xb4>)
 80078ec:	441a      	add	r2, r3
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe fb21 	bl	8005f3c <vListInsertEnd>
 80078fa:	e005      	b.n	8007908 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	3318      	adds	r3, #24
 8007900:	4619      	mov	r1, r3
 8007902:	480e      	ldr	r0, [pc, #56]	; (800793c <xTaskRemoveFromEventList+0xb8>)
 8007904:	f7fe fb1a 	bl	8005f3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <xTaskRemoveFromEventList+0xbc>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	429a      	cmp	r2, r3
 8007914:	d905      	bls.n	8007922 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007916:	2301      	movs	r3, #1
 8007918:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <xTaskRemoveFromEventList+0xc0>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e001      	b.n	8007926 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007926:	697b      	ldr	r3, [r7, #20]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20005d38 	.word	0x20005d38
 8007934:	20005d18 	.word	0x20005d18
 8007938:	20005c14 	.word	0x20005c14
 800793c:	20005cd0 	.word	0x20005cd0
 8007940:	20005c10 	.word	0x20005c10
 8007944:	20005d24 	.word	0x20005d24

08007948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <vTaskInternalSetTimeOutState+0x24>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <vTaskInternalSetTimeOutState+0x28>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	605a      	str	r2, [r3, #4]
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20005d28 	.word	0x20005d28
 8007970:	20005d14 	.word	0x20005d14

08007974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	613b      	str	r3, [r7, #16]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079b6:	f000 fc75 	bl	80082a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <xTaskCheckForTimeOut+0xbc>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d102      	bne.n	80079da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	e023      	b.n	8007a22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <xTaskCheckForTimeOut+0xc0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d007      	beq.n	80079f6 <xTaskCheckForTimeOut+0x82>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d302      	bcc.n	80079f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e015      	b.n	8007a22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d20b      	bcs.n	8007a18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ff9b 	bl	8007948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e004      	b.n	8007a22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a22:	f000 fc6f 	bl	8008304 <vPortExitCritical>

	return xReturn;
 8007a26:	69fb      	ldr	r3, [r7, #28]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20005d14 	.word	0x20005d14
 8007a34:	20005d28 	.word	0x20005d28

08007a38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a3c:	4b03      	ldr	r3, [pc, #12]	; (8007a4c <vTaskMissedYield+0x14>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20005d24 	.word	0x20005d24

08007a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a58:	f000 f852 	bl	8007b00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a5c:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <prvIdleTask+0x28>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d9f9      	bls.n	8007a58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <prvIdleTask+0x2c>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a74:	e7f0      	b.n	8007a58 <prvIdleTask+0x8>
 8007a76:	bf00      	nop
 8007a78:	20005c14 	.word	0x20005c14
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
 8007a8a:	e00c      	b.n	8007aa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4a12      	ldr	r2, [pc, #72]	; (8007ae0 <prvInitialiseTaskLists+0x60>)
 8007a98:	4413      	add	r3, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fa21 	bl	8005ee2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b06      	cmp	r3, #6
 8007aaa:	d9ef      	bls.n	8007a8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aac:	480d      	ldr	r0, [pc, #52]	; (8007ae4 <prvInitialiseTaskLists+0x64>)
 8007aae:	f7fe fa18 	bl	8005ee2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ab2:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <prvInitialiseTaskLists+0x68>)
 8007ab4:	f7fe fa15 	bl	8005ee2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab8:	480c      	ldr	r0, [pc, #48]	; (8007aec <prvInitialiseTaskLists+0x6c>)
 8007aba:	f7fe fa12 	bl	8005ee2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007abe:	480c      	ldr	r0, [pc, #48]	; (8007af0 <prvInitialiseTaskLists+0x70>)
 8007ac0:	f7fe fa0f 	bl	8005ee2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac4:	480b      	ldr	r0, [pc, #44]	; (8007af4 <prvInitialiseTaskLists+0x74>)
 8007ac6:	f7fe fa0c 	bl	8005ee2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aca:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <prvInitialiseTaskLists+0x78>)
 8007acc:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <prvInitialiseTaskLists+0x64>)
 8007ace:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <prvInitialiseTaskLists+0x7c>)
 8007ad2:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <prvInitialiseTaskLists+0x68>)
 8007ad4:	601a      	str	r2, [r3, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20005c14 	.word	0x20005c14
 8007ae4:	20005ca0 	.word	0x20005ca0
 8007ae8:	20005cb4 	.word	0x20005cb4
 8007aec:	20005cd0 	.word	0x20005cd0
 8007af0:	20005ce4 	.word	0x20005ce4
 8007af4:	20005cfc 	.word	0x20005cfc
 8007af8:	20005cc8 	.word	0x20005cc8
 8007afc:	20005ccc 	.word	0x20005ccc

08007b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b06:	e019      	b.n	8007b3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b08:	f000 fbcc 	bl	80082a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <prvCheckTasksWaitingTermination+0x50>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fa6c 	bl	8005ff6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <prvCheckTasksWaitingTermination+0x54>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <prvCheckTasksWaitingTermination+0x54>)
 8007b26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <prvCheckTasksWaitingTermination+0x58>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <prvCheckTasksWaitingTermination+0x58>)
 8007b30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b32:	f000 fbe7 	bl	8008304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f810 	bl	8007b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <prvCheckTasksWaitingTermination+0x58>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e1      	bne.n	8007b08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20005ce4 	.word	0x20005ce4
 8007b54:	20005d10 	.word	0x20005d10
 8007b58:	20005cf8 	.word	0x20005cf8

08007b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	334c      	adds	r3, #76	; 0x4c
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f00f f94b 	bl	8016e04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d108      	bne.n	8007b8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fd7f 	bl	8008680 <vPortFree>
				vPortFree( pxTCB );
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd7c 	bl	8008680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b88:	e018      	b.n	8007bbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d103      	bne.n	8007b9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fd73 	bl	8008680 <vPortFree>
	}
 8007b9a:	e00f      	b.n	8007bbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d00a      	beq.n	8007bbc <prvDeleteTCB+0x60>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <prvDeleteTCB+0x5e>
	}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bca:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <prvResetNextTaskUnblockTime+0x38>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <prvResetNextTaskUnblockTime+0x3c>)
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bdc:	e008      	b.n	8007bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <prvResetNextTaskUnblockTime+0x38>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <prvResetNextTaskUnblockTime+0x3c>)
 8007bee:	6013      	str	r3, [r2, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	20005cc8 	.word	0x20005cc8
 8007c00:	20005d30 	.word	0x20005d30

08007c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <xTaskGetSchedulerState+0x34>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c12:	2301      	movs	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	e008      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <xTaskGetSchedulerState+0x38>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c20:	2302      	movs	r3, #2
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e001      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c2a:	687b      	ldr	r3, [r7, #4]
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20005d1c 	.word	0x20005d1c
 8007c3c:	20005d38 	.word	0x20005d38

08007c40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d05e      	beq.n	8007d14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xTaskPriorityInherit+0xe0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d24e      	bcs.n	8007d02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	db06      	blt.n	8007c7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6c:	4b2c      	ldr	r3, [pc, #176]	; (8007d20 <xTaskPriorityInherit+0xe0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	f1c3 0207 	rsb	r2, r3, #7
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6959      	ldr	r1, [r3, #20]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <xTaskPriorityInherit+0xe4>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	4299      	cmp	r1, r3
 8007c90:	d12f      	bne.n	8007cf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe f9ad 	bl	8005ff6 <uxListRemove>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	43da      	mvns	r2, r3
 8007cae:	4b1e      	ldr	r3, [pc, #120]	; (8007d28 <xTaskPriorityInherit+0xe8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <xTaskPriorityInherit+0xe8>)
 8007cb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cb8:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <xTaskPriorityInherit+0xe0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	409a      	lsls	r2, r3
 8007cca:	4b17      	ldr	r3, [pc, #92]	; (8007d28 <xTaskPriorityInherit+0xe8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <xTaskPriorityInherit+0xe8>)
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <xTaskPriorityInherit+0xe4>)
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7fe f926 	bl	8005f3c <vListInsertEnd>
 8007cf0:	e004      	b.n	8007cfc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <xTaskPriorityInherit+0xe0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e008      	b.n	8007d14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <xTaskPriorityInherit+0xe0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d201      	bcs.n	8007d14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d14:	68fb      	ldr	r3, [r7, #12]
	}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20005c10 	.word	0x20005c10
 8007d24:	20005c14 	.word	0x20005c14
 8007d28:	20005d18 	.word	0x20005d18

08007d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d06e      	beq.n	8007e20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d42:	4b3a      	ldr	r3, [pc, #232]	; (8007e2c <xTaskPriorityDisinherit+0x100>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d00a      	beq.n	8007d62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60fb      	str	r3, [r7, #12]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	60bb      	str	r3, [r7, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d044      	beq.n	8007e20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d140      	bne.n	8007e20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe f927 	bl	8005ff6 <uxListRemove>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d115      	bne.n	8007dda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	491f      	ldr	r1, [pc, #124]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <xTaskPriorityDisinherit+0xae>
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	2201      	movs	r2, #1
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43da      	mvns	r2, r3
 8007dd0:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <xTaskPriorityDisinherit+0x108>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <xTaskPriorityDisinherit+0x108>)
 8007dd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f1c3 0207 	rsb	r2, r3, #7
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	2201      	movs	r2, #1
 8007df4:	409a      	lsls	r2, r3
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <xTaskPriorityDisinherit+0x108>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	4a0d      	ldr	r2, [pc, #52]	; (8007e34 <xTaskPriorityDisinherit+0x108>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4a08      	ldr	r2, [pc, #32]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007e0e:	441a      	add	r2, r3
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f7fe f890 	bl	8005f3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e20:	697b      	ldr	r3, [r7, #20]
	}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20005c10 	.word	0x20005c10
 8007e30:	20005c14 	.word	0x20005c14
 8007e34:	20005d18 	.word	0x20005d18

08007e38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e46:	2301      	movs	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d077      	beq.n	8007f40 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	60fb      	str	r3, [r7, #12]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d902      	bls.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e002      	b.n	8007e84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d058      	beq.n	8007f40 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d153      	bne.n	8007f40 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e98:	4b2b      	ldr	r3, [pc, #172]	; (8007f48 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d10a      	bne.n	8007eb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60bb      	str	r3, [r7, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db04      	blt.n	8007ed6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f1c3 0207 	rsb	r2, r3, #7
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	6959      	ldr	r1, [r3, #20]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4a19      	ldr	r2, [pc, #100]	; (8007f4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007ee6:	4413      	add	r3, r2
 8007ee8:	4299      	cmp	r1, r3
 8007eea:	d129      	bne.n	8007f40 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe f880 	bl	8005ff6 <uxListRemove>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	43da      	mvns	r2, r3
 8007f08:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	2201      	movs	r2, #1
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	4a0b      	ldr	r2, [pc, #44]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4a06      	ldr	r2, [pc, #24]	; (8007f4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f32:	441a      	add	r2, r3
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fd fffe 	bl	8005f3c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f40:	bf00      	nop
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20005c10 	.word	0x20005c10
 8007f4c:	20005c14 	.word	0x20005c14
 8007f50:	20005d18 	.word	0x20005d18

08007f54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f66:	3201      	adds	r2, #1
 8007f68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
	}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	20005c10 	.word	0x20005c10

08007f7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f86:	4b29      	ldr	r3, [pc, #164]	; (800802c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f8c:	4b28      	ldr	r3, [pc, #160]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe f82f 	bl	8005ff6 <uxListRemove>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f9e:	4b24      	ldr	r3, [pc, #144]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	43da      	mvns	r2, r3
 8007fac:	4b21      	ldr	r3, [pc, #132]	; (8008034 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	4a20      	ldr	r2, [pc, #128]	; (8008034 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d10a      	bne.n	8007fd4 <prvAddCurrentTaskToDelayedList+0x58>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	481a      	ldr	r0, [pc, #104]	; (8008038 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007fce:	f7fd ffb5 	bl	8005f3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fd2:	e026      	b.n	8008022 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fdc:	4b14      	ldr	r3, [pc, #80]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d209      	bcs.n	8008000 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fec:	4b13      	ldr	r3, [pc, #76]	; (800803c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fd ffc3 	bl	8005f84 <vListInsert>
}
 8007ffe:	e010      	b.n	8008022 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3304      	adds	r3, #4
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f7fd ffb9 	bl	8005f84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	429a      	cmp	r2, r3
 800801a:	d202      	bcs.n	8008022 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800801c:	4a09      	ldr	r2, [pc, #36]	; (8008044 <prvAddCurrentTaskToDelayedList+0xc8>)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	6013      	str	r3, [r2, #0]
}
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20005d14 	.word	0x20005d14
 8008030:	20005c10 	.word	0x20005c10
 8008034:	20005d18 	.word	0x20005d18
 8008038:	20005cfc 	.word	0x20005cfc
 800803c:	20005ccc 	.word	0x20005ccc
 8008040:	20005cc8 	.word	0x20005cc8
 8008044:	20005d30 	.word	0x20005d30

08008048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3b04      	subs	r3, #4
 8008058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3b04      	subs	r3, #4
 8008066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3b04      	subs	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008078:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <pxPortInitialiseStack+0x64>)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3b14      	subs	r3, #20
 8008082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3b04      	subs	r3, #4
 800808e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f06f 0202 	mvn.w	r2, #2
 8008096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3b20      	subs	r3, #32
 800809c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	080080b1 	.word	0x080080b1

080080b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <prvTaskExitError+0x54>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d00a      	beq.n	80080da <prvTaskExitError+0x2a>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <prvTaskExitError+0x28>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60bb      	str	r3, [r7, #8]
}
 80080ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080ee:	bf00      	nop
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0fc      	beq.n	80080f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	20000020 	.word	0x20000020
	...

08008110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <pxCurrentTCBConst2>)
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	6808      	ldr	r0, [r1, #0]
 8008116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811a:	f380 8809 	msr	PSP, r0
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	4770      	bx	lr
 800812c:	f3af 8000 	nop.w

08008130 <pxCurrentTCBConst2>:
 8008130:	20005c10 	.word	0x20005c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008138:	4808      	ldr	r0, [pc, #32]	; (800815c <prvPortStartFirstTask+0x24>)
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	6800      	ldr	r0, [r0, #0]
 800813e:	f380 8808 	msr	MSP, r0
 8008142:	f04f 0000 	mov.w	r0, #0
 8008146:	f380 8814 	msr	CONTROL, r0
 800814a:	b662      	cpsie	i
 800814c:	b661      	cpsie	f
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	df00      	svc	0
 8008158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800815a:	bf00      	nop
 800815c:	e000ed08 	.word	0xe000ed08

08008160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008166:	4b46      	ldr	r3, [pc, #280]	; (8008280 <xPortStartScheduler+0x120>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a46      	ldr	r2, [pc, #280]	; (8008284 <xPortStartScheduler+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10a      	bne.n	8008186 <xPortStartScheduler+0x26>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	613b      	str	r3, [r7, #16]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008186:	4b3e      	ldr	r3, [pc, #248]	; (8008280 <xPortStartScheduler+0x120>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a3f      	ldr	r2, [pc, #252]	; (8008288 <xPortStartScheduler+0x128>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10a      	bne.n	80081a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	60fb      	str	r3, [r7, #12]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081a6:	4b39      	ldr	r3, [pc, #228]	; (800828c <xPortStartScheduler+0x12c>)
 80081a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	4b31      	ldr	r3, [pc, #196]	; (8008290 <xPortStartScheduler+0x130>)
 80081cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081ce:	4b31      	ldr	r3, [pc, #196]	; (8008294 <xPortStartScheduler+0x134>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081d4:	e009      	b.n	80081ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <xPortStartScheduler+0x134>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <xPortStartScheduler+0x134>)
 80081de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f2:	2b80      	cmp	r3, #128	; 0x80
 80081f4:	d0ef      	beq.n	80081d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081f6:	4b27      	ldr	r3, [pc, #156]	; (8008294 <xPortStartScheduler+0x134>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f1c3 0307 	rsb	r3, r3, #7
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d00a      	beq.n	8008218 <xPortStartScheduler+0xb8>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008218:	4b1e      	ldr	r3, [pc, #120]	; (8008294 <xPortStartScheduler+0x134>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <xPortStartScheduler+0x134>)
 8008220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <xPortStartScheduler+0x134>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800822a:	4a1a      	ldr	r2, [pc, #104]	; (8008294 <xPortStartScheduler+0x134>)
 800822c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008236:	4b18      	ldr	r3, [pc, #96]	; (8008298 <xPortStartScheduler+0x138>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <xPortStartScheduler+0x138>)
 800823c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008242:	4b15      	ldr	r3, [pc, #84]	; (8008298 <xPortStartScheduler+0x138>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a14      	ldr	r2, [pc, #80]	; (8008298 <xPortStartScheduler+0x138>)
 8008248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800824c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800824e:	f000 f8dd 	bl	800840c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <xPortStartScheduler+0x13c>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008258:	f000 f8fc 	bl	8008454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800825c:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <xPortStartScheduler+0x140>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0f      	ldr	r2, [pc, #60]	; (80082a0 <xPortStartScheduler+0x140>)
 8008262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008268:	f7ff ff66 	bl	8008138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800826c:	f7ff fa84 	bl	8007778 <vTaskSwitchContext>
	prvTaskExitError();
 8008270:	f7ff ff1e 	bl	80080b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	e000ed00 	.word	0xe000ed00
 8008284:	410fc271 	.word	0x410fc271
 8008288:	410fc270 	.word	0x410fc270
 800828c:	e000e400 	.word	0xe000e400
 8008290:	20005d3c 	.word	0x20005d3c
 8008294:	20005d40 	.word	0x20005d40
 8008298:	e000ed20 	.word	0xe000ed20
 800829c:	20000020 	.word	0x20000020
 80082a0:	e000ef34 	.word	0xe000ef34

080082a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <vPortEnterCritical+0x58>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	4a0d      	ldr	r2, [pc, #52]	; (80082fc <vPortEnterCritical+0x58>)
 80082c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <vPortEnterCritical+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d10f      	bne.n	80082f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortEnterCritical+0x5c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <vPortEnterCritical+0x4a>
	}
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000020 	.word	0x20000020
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <vPortExitCritical+0x50>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <vPortExitCritical+0x24>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	607b      	str	r3, [r7, #4]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <vPortExitCritical+0x50>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3b01      	subs	r3, #1
 800832e:	4a09      	ldr	r2, [pc, #36]	; (8008354 <vPortExitCritical+0x50>)
 8008330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <vPortExitCritical+0x50>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d105      	bne.n	8008346 <vPortExitCritical+0x42>
 800833a:	2300      	movs	r3, #0
 800833c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	f383 8811 	msr	BASEPRI, r3
}
 8008344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000020 	.word	0x20000020
	...

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008384:	f380 8811 	msr	BASEPRI, r0
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f7ff f9f2 	bl	8007778 <vTaskSwitchContext>
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	f380 8811 	msr	BASEPRI, r0
 800839c:	bc09      	pop	{r0, r3}
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a6:	f01e 0f10 	tst.w	lr, #16
 80083aa:	bf08      	it	eq
 80083ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b0:	f380 8809 	msr	PSP, r0
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst>:
 80083c0:	20005c10 	.word	0x20005c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f7ff f911 	bl	8007608 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <xPortSysTickHandler+0x40>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortSetupTimerInterrupt+0x38>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <vPortSetupTimerInterrupt+0x3c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x40>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	099b      	lsrs	r3, r3, #6
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <vPortSetupTimerInterrupt+0x44>)
 800842a:	3b01      	subs	r3, #1
 800842c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800842e:	4b04      	ldr	r3, [pc, #16]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	e000e010 	.word	0xe000e010
 8008444:	e000e018 	.word	0xe000e018
 8008448:	20000000 	.word	0x20000000
 800844c:	10624dd3 	.word	0x10624dd3
 8008450:	e000e014 	.word	0xe000e014

08008454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008464 <vPortEnableVFP+0x10>
 8008458:	6801      	ldr	r1, [r0, #0]
 800845a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800845e:	6001      	str	r1, [r0, #0]
 8008460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008462:	bf00      	nop
 8008464:	e000ed88 	.word	0xe000ed88

08008468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800846e:	f3ef 8305 	mrs	r3, IPSR
 8008472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d914      	bls.n	80084a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <vPortValidateInterruptPriority+0x70>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008484:	4b15      	ldr	r3, [pc, #84]	; (80084dc <vPortValidateInterruptPriority+0x74>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	7afa      	ldrb	r2, [r7, #11]
 800848a:	429a      	cmp	r2, r3
 800848c:	d20a      	bcs.n	80084a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084a4:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <vPortValidateInterruptPriority+0x78>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084ac:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <vPortValidateInterruptPriority+0x7c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d90a      	bls.n	80084ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	603b      	str	r3, [r7, #0]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <vPortValidateInterruptPriority+0x60>
	}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	e000e3f0 	.word	0xe000e3f0
 80084dc:	20005d3c 	.word	0x20005d3c
 80084e0:	e000ed0c 	.word	0xe000ed0c
 80084e4:	20005d40 	.word	0x20005d40

080084e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	; 0x28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084f4:	f7fe ffbc 	bl	8007470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084f8:	4b5b      	ldr	r3, [pc, #364]	; (8008668 <pvPortMalloc+0x180>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008500:	f000 f920 	bl	8008744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008504:	4b59      	ldr	r3, [pc, #356]	; (800866c <pvPortMalloc+0x184>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 8093 	bne.w	8008638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01d      	beq.n	8008554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008518:	2208      	movs	r2, #8
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	2b00      	cmp	r3, #0
 8008528:	d014      	beq.n	8008554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	3308      	adds	r3, #8
 8008532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <pvPortMalloc+0x6c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	617b      	str	r3, [r7, #20]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d06e      	beq.n	8008638 <pvPortMalloc+0x150>
 800855a:	4b45      	ldr	r3, [pc, #276]	; (8008670 <pvPortMalloc+0x188>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d869      	bhi.n	8008638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008564:	4b43      	ldr	r3, [pc, #268]	; (8008674 <pvPortMalloc+0x18c>)
 8008566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008568:	4b42      	ldr	r3, [pc, #264]	; (8008674 <pvPortMalloc+0x18c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800856e:	e004      	b.n	800857a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d903      	bls.n	800858c <pvPortMalloc+0xa4>
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f1      	bne.n	8008570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800858c:	4b36      	ldr	r3, [pc, #216]	; (8008668 <pvPortMalloc+0x180>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008592:	429a      	cmp	r2, r3
 8008594:	d050      	beq.n	8008638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2208      	movs	r2, #8
 800859c:	4413      	add	r3, r2
 800859e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	2308      	movs	r3, #8
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d91f      	bls.n	80085f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <pvPortMalloc+0xf8>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	613b      	str	r3, [r7, #16]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	1ad2      	subs	r2, r2, r3
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085f2:	69b8      	ldr	r0, [r7, #24]
 80085f4:	f000 f908 	bl	8008808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085f8:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <pvPortMalloc+0x188>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	4a1b      	ldr	r2, [pc, #108]	; (8008670 <pvPortMalloc+0x188>)
 8008604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008606:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <pvPortMalloc+0x188>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <pvPortMalloc+0x190>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d203      	bcs.n	800861a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008612:	4b17      	ldr	r3, [pc, #92]	; (8008670 <pvPortMalloc+0x188>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a18      	ldr	r2, [pc, #96]	; (8008678 <pvPortMalloc+0x190>)
 8008618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <pvPortMalloc+0x184>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	431a      	orrs	r2, r3
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <pvPortMalloc+0x194>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	4a11      	ldr	r2, [pc, #68]	; (800867c <pvPortMalloc+0x194>)
 8008636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008638:	f7fe ff28 	bl	800748c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <pvPortMalloc+0x174>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60fb      	str	r3, [r7, #12]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <pvPortMalloc+0x172>
	return pvReturn;
 800865c:	69fb      	ldr	r3, [r7, #28]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3728      	adds	r7, #40	; 0x28
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2000994c 	.word	0x2000994c
 800866c:	20009960 	.word	0x20009960
 8008670:	20009950 	.word	0x20009950
 8008674:	20009944 	.word	0x20009944
 8008678:	20009954 	.word	0x20009954
 800867c:	20009958 	.word	0x20009958

08008680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d04d      	beq.n	800872e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008692:	2308      	movs	r3, #8
 8008694:	425b      	negs	r3, r3
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	4b24      	ldr	r3, [pc, #144]	; (8008738 <vPortFree+0xb8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <vPortFree+0x44>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60fb      	str	r3, [r7, #12]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <vPortFree+0x62>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	60bb      	str	r3, [r7, #8]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <vPortFree+0xb8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01e      	beq.n	800872e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11a      	bne.n	800872e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <vPortFree+0xb8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	43db      	mvns	r3, r3
 8008702:	401a      	ands	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008708:	f7fe feb2 	bl	8007470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <vPortFree+0xbc>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4413      	add	r3, r2
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <vPortFree+0xbc>)
 8008718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800871a:	6938      	ldr	r0, [r7, #16]
 800871c:	f000 f874 	bl	8008808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008720:	4b07      	ldr	r3, [pc, #28]	; (8008740 <vPortFree+0xc0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a06      	ldr	r2, [pc, #24]	; (8008740 <vPortFree+0xc0>)
 8008728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800872a:	f7fe feaf 	bl	800748c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800872e:	bf00      	nop
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20009960 	.word	0x20009960
 800873c:	20009950 	.word	0x20009950
 8008740:	2000995c 	.word	0x2000995c

08008744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800874a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800874e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <prvHeapInit+0xac>)
 8008752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00c      	beq.n	8008778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3307      	adds	r3, #7
 8008762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <prvHeapInit+0xac>)
 8008774:	4413      	add	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800877c:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <prvHeapInit+0xb0>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <prvHeapInit+0xb0>)
 8008784:	2200      	movs	r2, #0
 8008786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4413      	add	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008790:	2208      	movs	r2, #8
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0307 	bic.w	r3, r3, #7
 800879e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <prvHeapInit+0xb4>)
 80087a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <prvHeapInit+0xb4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2200      	movs	r2, #0
 80087ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087ae:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <prvHeapInit+0xb4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <prvHeapInit+0xb4>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <prvHeapInit+0xb8>)
 80087d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a09      	ldr	r2, [pc, #36]	; (8008800 <prvHeapInit+0xbc>)
 80087da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <prvHeapInit+0xc0>)
 80087de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087e2:	601a      	str	r2, [r3, #0]
}
 80087e4:	bf00      	nop
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20005d44 	.word	0x20005d44
 80087f4:	20009944 	.word	0x20009944
 80087f8:	2000994c 	.word	0x2000994c
 80087fc:	20009954 	.word	0x20009954
 8008800:	20009950 	.word	0x20009950
 8008804:	20009960 	.word	0x20009960

08008808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008810:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <prvInsertBlockIntoFreeList+0xac>)
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e002      	b.n	800881c <prvInsertBlockIntoFreeList+0x14>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	429a      	cmp	r2, r3
 8008824:	d8f7      	bhi.n	8008816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d108      	bne.n	800884a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	441a      	add	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d118      	bne.n	8008890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d00d      	beq.n	8008886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	441a      	add	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e008      	b.n	8008898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	e003      	b.n	8008898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d002      	beq.n	80088a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20009944 	.word	0x20009944
 80088b8:	2000994c 	.word	0x2000994c

080088bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	330c      	adds	r3, #12
 80088cc:	461a      	mov	r2, r3
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f002 fc85 	bl	800b1e0 <tcpip_send_msg_wait_sem>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80088da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80088e8:	e001      	b.n	80088ee <netconn_apimsg+0x32>
  }
  return err;
 80088ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	603a      	str	r2, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
 8008904:	460b      	mov	r3, r1
 8008906:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fdd5 	bl	80094bc <netconn_alloc>
 8008912:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d054      	beq.n	80089c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800891a:	79bb      	ldrb	r3, [r7, #6]
 800891c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	4619      	mov	r1, r3
 8008928:	4829      	ldr	r0, [pc, #164]	; (80089d0 <netconn_new_with_proto_and_callback+0xd8>)
 800892a:	f7ff ffc7 	bl	80088bc <netconn_apimsg>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008934:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008938:	2b00      	cmp	r3, #0
 800893a:	d043      	beq.n	80089c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <netconn_new_with_proto_and_callback+0x58>
 8008944:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 8008946:	22a3      	movs	r2, #163	; 0xa3
 8008948:	4923      	ldr	r1, [pc, #140]	; (80089d8 <netconn_new_with_proto_and_callback+0xe0>)
 800894a:	4824      	ldr	r0, [pc, #144]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 800894c:	f00e f94c 	bl	8016be8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	3310      	adds	r3, #16
 8008954:	4618      	mov	r0, r3
 8008956:	f00d ff0e 	bl	8016776 <sys_mbox_valid>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <netconn_new_with_proto_and_callback+0x74>
 8008960:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 8008962:	22a4      	movs	r2, #164	; 0xa4
 8008964:	491e      	ldr	r1, [pc, #120]	; (80089e0 <netconn_new_with_proto_and_callback+0xe8>)
 8008966:	481d      	ldr	r0, [pc, #116]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 8008968:	f00e f93e 	bl	8016be8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	3314      	adds	r3, #20
 8008970:	4618      	mov	r0, r3
 8008972:	f00d ff00 	bl	8016776 <sys_mbox_valid>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <netconn_new_with_proto_and_callback+0x90>
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 800897e:	22a6      	movs	r2, #166	; 0xa6
 8008980:	4918      	ldr	r1, [pc, #96]	; (80089e4 <netconn_new_with_proto_and_callback+0xec>)
 8008982:	4816      	ldr	r0, [pc, #88]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 8008984:	f00e f930 	bl	8016be8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	330c      	adds	r3, #12
 800898c:	4618      	mov	r0, r3
 800898e:	f00d ff83 	bl	8016898 <sys_sem_valid>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <netconn_new_with_proto_and_callback+0xac>
 8008998:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <netconn_new_with_proto_and_callback+0xdc>)
 800899a:	22a9      	movs	r2, #169	; 0xa9
 800899c:	4912      	ldr	r1, [pc, #72]	; (80089e8 <netconn_new_with_proto_and_callback+0xf0>)
 800899e:	480f      	ldr	r0, [pc, #60]	; (80089dc <netconn_new_with_proto_and_callback+0xe4>)
 80089a0:	f00e f922 	bl	8016be8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	330c      	adds	r3, #12
 80089a8:	4618      	mov	r0, r3
 80089aa:	f00d ff68 	bl	801687e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	3310      	adds	r3, #16
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00d fe58 	bl	8016668 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80089b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ba:	2007      	movs	r0, #7
 80089bc:	f003 f9be 	bl	800bd3c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	e000      	b.n	80089c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3730      	adds	r7, #48	; 0x30
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	08009491 	.word	0x08009491
 80089d4:	080181e8 	.word	0x080181e8
 80089d8:	0801821c 	.word	0x0801821c
 80089dc:	08018240 	.word	0x08018240
 80089e0:	08018268 	.word	0x08018268
 80089e4:	08018280 	.word	0x08018280
 80089e8:	080182a4 	.word	0x080182a4

080089ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08c      	sub	sp, #48	; 0x30
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e014      	b.n	8008a28 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a02:	2329      	movs	r3, #41	; 0x29
 8008a04:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a06:	f107 030c 	add.w	r3, r7, #12
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4808      	ldr	r0, [pc, #32]	; (8008a30 <netconn_prepare_delete+0x44>)
 8008a0e:	f7ff ff55 	bl	80088bc <netconn_apimsg>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <netconn_prepare_delete+0x3a>
    return err;
 8008a20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a24:	e000      	b.n	8008a28 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	080099fd 	.word	0x080099fd

08008a34 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <netconn_delete+0x12>
    return ERR_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e00d      	b.n	8008a62 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ffd0 	bl	80089ec <netconn_prepare_delete>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <netconn_delete+0x2a>
    netconn_free(conn);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fd9d 	bl	8009598 <netconn_free>
  }
  return err;
 8008a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08e      	sub	sp, #56	; 0x38
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <netconn_connect+0x28>
 8008a80:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <netconn_connect+0x5c>)
 8008a82:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008a86:	4911      	ldr	r1, [pc, #68]	; (8008acc <netconn_connect+0x60>)
 8008a88:	4811      	ldr	r0, [pc, #68]	; (8008ad0 <netconn_connect+0x64>)
 8008a8a:	f00e f8ad 	bl	8016be8 <iprintf>
 8008a8e:	f06f 030f 	mvn.w	r3, #15
 8008a92:	e015      	b.n	8008ac0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <netconn_connect+0x68>)
 8008a9c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008aaa:	f107 0314 	add.w	r3, r7, #20
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <netconn_connect+0x6c>)
 8008ab2:	f7ff ff03 	bl	80088bc <netconn_apimsg>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008abc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3738      	adds	r7, #56	; 0x38
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	080181e8 	.word	0x080181e8
 8008acc:	0801835c 	.word	0x0801835c
 8008ad0:	08018240 	.word	0x08018240
 8008ad4:	0801bc74 	.word	0x0801bc74
 8008ad8:	08009ce5 	.word	0x08009ce5

08008adc <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <netconn_disconnect+0x22>
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <netconn_disconnect+0x44>)
 8008aec:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8008af0:	490c      	ldr	r1, [pc, #48]	; (8008b24 <netconn_disconnect+0x48>)
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <netconn_disconnect+0x4c>)
 8008af4:	f00e f878 	bl	8016be8 <iprintf>
 8008af8:	f06f 030f 	mvn.w	r3, #15
 8008afc:	e00c      	b.n	8008b18 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008b02:	f107 030c 	add.w	r3, r7, #12
 8008b06:	4619      	mov	r1, r3
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <netconn_disconnect+0x50>)
 8008b0a:	f7ff fed7 	bl	80088bc <netconn_apimsg>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3730      	adds	r7, #48	; 0x30
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	080181e8 	.word	0x080181e8
 8008b24:	0801837c 	.word	0x0801837c
 8008b28:	08018240 	.word	0x08018240
 8008b2c:	08009e61 	.word	0x08009e61

08008b30 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08c      	sub	sp, #48	; 0x30
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <netconn_send+0x24>
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <netconn_send+0x4c>)
 8008b42:	f240 32b2 	movw	r2, #946	; 0x3b2
 8008b46:	490e      	ldr	r1, [pc, #56]	; (8008b80 <netconn_send+0x50>)
 8008b48:	480e      	ldr	r0, [pc, #56]	; (8008b84 <netconn_send+0x54>)
 8008b4a:	f00e f84d 	bl	8016be8 <iprintf>
 8008b4e:	f06f 030f 	mvn.w	r3, #15
 8008b52:	e00e      	b.n	8008b72 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008b5c:	f107 030c 	add.w	r3, r7, #12
 8008b60:	4619      	mov	r1, r3
 8008b62:	4809      	ldr	r0, [pc, #36]	; (8008b88 <netconn_send+0x58>)
 8008b64:	f7ff feaa 	bl	80088bc <netconn_apimsg>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3730      	adds	r7, #48	; 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	080181e8 	.word	0x080181e8
 8008b80:	080184a4 	.word	0x080184a4
 8008b84:	08018240 	.word	0x08018240
 8008b88:	08009e9d 	.word	0x08009e9d

08008b8c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	f107 0110 	add.w	r1, r7, #16
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	4613      	mov	r3, r2
 8008bae:	2201      	movs	r2, #1
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f805 	bl	8008bc0 <netconn_write_vectors_partly>
 8008bb6:	4603      	mov	r3, r0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b092      	sub	sp, #72	; 0x48
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	460b      	mov	r3, r1
 8008bd0:	80fb      	strh	r3, [r7, #6]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d109      	bne.n	8008bf0 <netconn_write_vectors_partly+0x30>
 8008bdc:	4b4e      	ldr	r3, [pc, #312]	; (8008d18 <netconn_write_vectors_partly+0x158>)
 8008bde:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008be2:	494e      	ldr	r1, [pc, #312]	; (8008d1c <netconn_write_vectors_partly+0x15c>)
 8008be4:	484e      	ldr	r0, [pc, #312]	; (8008d20 <netconn_write_vectors_partly+0x160>)
 8008be6:	f00d ffff 	bl	8016be8 <iprintf>
 8008bea:	f06f 030f 	mvn.w	r3, #15
 8008bee:	e08e      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d009      	beq.n	8008c10 <netconn_write_vectors_partly+0x50>
 8008bfc:	4b46      	ldr	r3, [pc, #280]	; (8008d18 <netconn_write_vectors_partly+0x158>)
 8008bfe:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008c02:	4948      	ldr	r1, [pc, #288]	; (8008d24 <netconn_write_vectors_partly+0x164>)
 8008c04:	4846      	ldr	r0, [pc, #280]	; (8008d20 <netconn_write_vectors_partly+0x160>)
 8008c06:	f00d ffef 	bl	8016be8 <iprintf>
 8008c0a:	f06f 0305 	mvn.w	r3, #5
 8008c0e:	e07e      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	7f1b      	ldrb	r3, [r3, #28]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <netconn_write_vectors_partly+0x66>
 8008c1c:	797b      	ldrb	r3, [r7, #5]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <netconn_write_vectors_partly+0x6a>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e000      	b.n	8008c2c <netconn_write_vectors_partly+0x6c>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <netconn_write_vectors_partly+0x84>
 8008c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d102      	bne.n	8008c44 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008c3e:	f06f 0305 	mvn.w	r3, #5
 8008c42:	e064      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008c48:	2300      	movs	r3, #0
 8008c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4c:	e015      	b.n	8008c7a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5a:	4413      	add	r3, r2
 8008c5c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d202      	bcs.n	8008c74 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008c6e:	f06f 0305 	mvn.w	r3, #5
 8008c72:	e04c      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c76:	3301      	adds	r3, #1
 8008c78:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	dbe5      	blt.n	8008c4e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e040      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da0a      	bge.n	8008ca8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008c98:	f06f 0305 	mvn.w	r3, #5
 8008c9c:	e037      	b.n	8008d0e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008c9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008cb8:	797b      	ldrb	r3, [r7, #5]
 8008cba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008cc6:	f107 0314 	add.w	r3, r7, #20
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4816      	ldr	r0, [pc, #88]	; (8008d28 <netconn_write_vectors_partly+0x168>)
 8008cce:	f7ff fdf5 	bl	80088bc <netconn_apimsg>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008cd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d114      	bne.n	8008d0a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cea:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d006      	beq.n	8008d0a <netconn_write_vectors_partly+0x14a>
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <netconn_write_vectors_partly+0x158>)
 8008cfe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008d02:	490a      	ldr	r1, [pc, #40]	; (8008d2c <netconn_write_vectors_partly+0x16c>)
 8008d04:	4806      	ldr	r0, [pc, #24]	; (8008d20 <netconn_write_vectors_partly+0x160>)
 8008d06:	f00d ff6f 	bl	8016be8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008d0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3748      	adds	r7, #72	; 0x48
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	080181e8 	.word	0x080181e8
 8008d1c:	080184c0 	.word	0x080184c0
 8008d20:	08018240 	.word	0x08018240
 8008d24:	080184dc 	.word	0x080184dc
 8008d28:	0800a2d1 	.word	0x0800a2d1
 8008d2c:	08018500 	.word	0x08018500

08008d30 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <netconn_err+0x12>
    return ERR_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e00d      	b.n	8008d5e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008d42:	f00d fe33 	bl	80169ac <sys_arch_protect>
 8008d46:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7a1b      	ldrb	r3, [r3, #8]
 8008d4c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f00d fe37 	bl	80169c8 <sys_arch_unprotect>
  return err;
 8008d5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d76:	f113 0f0d 	cmn.w	r3, #13
 8008d7a:	d009      	beq.n	8008d90 <lwip_netconn_err_to_msg+0x28>
 8008d7c:	f113 0f0d 	cmn.w	r3, #13
 8008d80:	dc0c      	bgt.n	8008d9c <lwip_netconn_err_to_msg+0x34>
 8008d82:	f113 0f0f 	cmn.w	r3, #15
 8008d86:	d007      	beq.n	8008d98 <lwip_netconn_err_to_msg+0x30>
 8008d88:	f113 0f0e 	cmn.w	r3, #14
 8008d8c:	d002      	beq.n	8008d94 <lwip_netconn_err_to_msg+0x2c>
 8008d8e:	e005      	b.n	8008d9c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <lwip_netconn_err_to_msg+0x54>)
 8008d92:	e00e      	b.n	8008db2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <lwip_netconn_err_to_msg+0x58>)
 8008d96:	e00c      	b.n	8008db2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <lwip_netconn_err_to_msg+0x5c>)
 8008d9a:	e00a      	b.n	8008db2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <lwip_netconn_err_to_msg+0x48>
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <lwip_netconn_err_to_msg+0x60>)
 8008da6:	227d      	movs	r2, #125	; 0x7d
 8008da8:	4908      	ldr	r1, [pc, #32]	; (8008dcc <lwip_netconn_err_to_msg+0x64>)
 8008daa:	4809      	ldr	r0, [pc, #36]	; (8008dd0 <lwip_netconn_err_to_msg+0x68>)
 8008dac:	f00d ff1c 	bl	8016be8 <iprintf>
      return NULL;
 8008db0:	2300      	movs	r3, #0
  }
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	0801bb1c 	.word	0x0801bb1c
 8008dc0:	0801bb1d 	.word	0x0801bb1d
 8008dc4:	0801bb1e 	.word	0x0801bb1e
 8008dc8:	08018540 	.word	0x08018540
 8008dcc:	08018574 	.word	0x08018574
 8008dd0:	08018584 	.word	0x08018584

08008dd4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d105      	bne.n	8008df0 <lwip_netconn_is_err_msg+0x1c>
 8008de4:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <lwip_netconn_is_err_msg+0x5c>)
 8008de6:	2285      	movs	r2, #133	; 0x85
 8008de8:	4912      	ldr	r1, [pc, #72]	; (8008e34 <lwip_netconn_is_err_msg+0x60>)
 8008dea:	4813      	ldr	r0, [pc, #76]	; (8008e38 <lwip_netconn_is_err_msg+0x64>)
 8008dec:	f00d fefc 	bl	8016be8 <iprintf>

  if (msg == &netconn_aborted) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <lwip_netconn_is_err_msg+0x68>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d104      	bne.n	8008e02 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	22f3      	movs	r2, #243	; 0xf3
 8008dfc:	701a      	strb	r2, [r3, #0]
    return 1;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e012      	b.n	8008e28 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a0e      	ldr	r2, [pc, #56]	; (8008e40 <lwip_netconn_is_err_msg+0x6c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d104      	bne.n	8008e14 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	22f2      	movs	r2, #242	; 0xf2
 8008e0e:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e009      	b.n	8008e28 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a0b      	ldr	r2, [pc, #44]	; (8008e44 <lwip_netconn_is_err_msg+0x70>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d104      	bne.n	8008e26 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	22f1      	movs	r2, #241	; 0xf1
 8008e20:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	08018540 	.word	0x08018540
 8008e34:	080185ac 	.word	0x080185ac
 8008e38:	08018584 	.word	0x08018584
 8008e3c:	0801bb1c 	.word	0x0801bb1c
 8008e40:	0801bb1d 	.word	0x0801bb1d
 8008e44:	0801bb1e 	.word	0x0801bb1e

08008e48 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <recv_udp+0x20>
 8008e5c:	4b34      	ldr	r3, [pc, #208]	; (8008f30 <recv_udp+0xe8>)
 8008e5e:	22e5      	movs	r2, #229	; 0xe5
 8008e60:	4934      	ldr	r1, [pc, #208]	; (8008f34 <recv_udp+0xec>)
 8008e62:	4835      	ldr	r0, [pc, #212]	; (8008f38 <recv_udp+0xf0>)
 8008e64:	f00d fec0 	bl	8016be8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <recv_udp+0x32>
 8008e6e:	4b30      	ldr	r3, [pc, #192]	; (8008f30 <recv_udp+0xe8>)
 8008e70:	22e6      	movs	r2, #230	; 0xe6
 8008e72:	4932      	ldr	r1, [pc, #200]	; (8008f3c <recv_udp+0xf4>)
 8008e74:	4830      	ldr	r0, [pc, #192]	; (8008f38 <recv_udp+0xf0>)
 8008e76:	f00d feb7 	bl	8016be8 <iprintf>
  conn = (struct netconn *)arg;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <recv_udp+0x44>
    pbuf_free(p);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f003 fdfd 	bl	800ca84 <pbuf_free>
    return;
 8008e8a:	e04d      	b.n	8008f28 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d005      	beq.n	8008ea2 <recv_udp+0x5a>
 8008e96:	4b26      	ldr	r3, [pc, #152]	; (8008f30 <recv_udp+0xe8>)
 8008e98:	22ee      	movs	r2, #238	; 0xee
 8008e9a:	4929      	ldr	r1, [pc, #164]	; (8008f40 <recv_udp+0xf8>)
 8008e9c:	4826      	ldr	r0, [pc, #152]	; (8008f38 <recv_udp+0xf0>)
 8008e9e:	f00d fea3 	bl	8016be8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f00d fc65 	bl	8016776 <sys_mbox_valid>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d103      	bne.n	8008eba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f003 fde6 	bl	800ca84 <pbuf_free>
    return;
 8008eb8:	e036      	b.n	8008f28 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008eba:	2006      	movs	r0, #6
 8008ebc:	f002 fec8 	bl	800bc50 <memp_malloc>
 8008ec0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <recv_udp+0x88>
    pbuf_free(p);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f003 fddb 	bl	800ca84 <pbuf_free>
    return;
 8008ece:	e02b      	b.n	8008f28 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <recv_udp+0xa0>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	e000      	b.n	8008eea <recv_udp+0xa2>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ef2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	891b      	ldrh	r3, [r3, #8]
 8008ef8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	3310      	adds	r3, #16
 8008efe:	69b9      	ldr	r1, [r7, #24]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f00d fbc3 	bl	801668c <sys_mbox_trypost>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008f0c:	69b8      	ldr	r0, [r7, #24]
 8008f0e:	f001 fa89 	bl	800a424 <netbuf_delete>
    return;
 8008f12:	e009      	b.n	8008f28 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <recv_udp+0xe0>
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	8afa      	ldrh	r2, [r7, #22]
 8008f22:	2100      	movs	r1, #0
 8008f24:	69f8      	ldr	r0, [r7, #28]
 8008f26:	4798      	blx	r3
  }
}
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	08018540 	.word	0x08018540
 8008f34:	080185b8 	.word	0x080185b8
 8008f38:	08018584 	.word	0x08018584
 8008f3c:	080185dc 	.word	0x080185dc
 8008f40:	080185fc 	.word	0x080185fc

08008f44 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <recv_tcp+0x22>
 8008f58:	4b36      	ldr	r3, [pc, #216]	; (8009034 <recv_tcp+0xf0>)
 8008f5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f5e:	4936      	ldr	r1, [pc, #216]	; (8009038 <recv_tcp+0xf4>)
 8008f60:	4836      	ldr	r0, [pc, #216]	; (800903c <recv_tcp+0xf8>)
 8008f62:	f00d fe41 	bl	8016be8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d106      	bne.n	8008f7a <recv_tcp+0x36>
 8008f6c:	4b31      	ldr	r3, [pc, #196]	; (8009034 <recv_tcp+0xf0>)
 8008f6e:	f240 122d 	movw	r2, #301	; 0x12d
 8008f72:	4933      	ldr	r1, [pc, #204]	; (8009040 <recv_tcp+0xfc>)
 8008f74:	4831      	ldr	r0, [pc, #196]	; (800903c <recv_tcp+0xf8>)
 8008f76:	f00d fe37 	bl	8016be8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d006      	beq.n	8008f90 <recv_tcp+0x4c>
 8008f82:	4b2c      	ldr	r3, [pc, #176]	; (8009034 <recv_tcp+0xf0>)
 8008f84:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008f88:	492e      	ldr	r1, [pc, #184]	; (8009044 <recv_tcp+0x100>)
 8008f8a:	482c      	ldr	r0, [pc, #176]	; (800903c <recv_tcp+0xf8>)
 8008f8c:	f00d fe2c 	bl	8016be8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <recv_tcp+0x5c>
    return ERR_VAL;
 8008f9a:	f06f 0305 	mvn.w	r3, #5
 8008f9e:	e045      	b.n	800902c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d006      	beq.n	8008fb8 <recv_tcp+0x74>
 8008faa:	4b22      	ldr	r3, [pc, #136]	; (8009034 <recv_tcp+0xf0>)
 8008fac:	f240 1235 	movw	r2, #309	; 0x135
 8008fb0:	4925      	ldr	r1, [pc, #148]	; (8009048 <recv_tcp+0x104>)
 8008fb2:	4822      	ldr	r0, [pc, #136]	; (800903c <recv_tcp+0xf8>)
 8008fb4:	f00d fe18 	bl	8016be8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	3310      	adds	r3, #16
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f00d fbda 	bl	8016776 <sys_mbox_valid>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10d      	bne.n	8008fe4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	891b      	ldrh	r3, [r3, #8]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68b8      	ldr	r0, [r7, #8]
 8008fd6:	f004 fbbb 	bl	800d750 <tcp_recved>
      pbuf_free(p);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f003 fd52 	bl	800ca84 <pbuf_free>
    }
    return ERR_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e023      	b.n	800902c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <recv_tcp+0xb2>
    msg = p;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	891b      	ldrh	r3, [r3, #8]
 8008ff2:	83fb      	strh	r3, [r7, #30]
 8008ff4:	e003      	b.n	8008ffe <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <recv_tcp+0x108>)
 8008ff8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	3310      	adds	r3, #16
 8009002:	69b9      	ldr	r1, [r7, #24]
 8009004:	4618      	mov	r0, r3
 8009006:	f00d fb41 	bl	801668c <sys_mbox_trypost>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009010:	f04f 33ff 	mov.w	r3, #4294967295
 8009014:	e00a      	b.n	800902c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <recv_tcp+0xe6>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	8bfa      	ldrh	r2, [r7, #30]
 8009024:	2100      	movs	r1, #0
 8009026:	6978      	ldr	r0, [r7, #20]
 8009028:	4798      	blx	r3
  }

  return ERR_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	08018540 	.word	0x08018540
 8009038:	0801861c 	.word	0x0801861c
 800903c:	08018584 	.word	0x08018584
 8009040:	08018640 	.word	0x08018640
 8009044:	08018660 	.word	0x08018660
 8009048:	08018678 	.word	0x08018678
 800904c:	0801bb1e 	.word	0x0801bb1e

08009050 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <poll_tcp+0x22>
 8009064:	4b29      	ldr	r3, [pc, #164]	; (800910c <poll_tcp+0xbc>)
 8009066:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800906a:	4929      	ldr	r1, [pc, #164]	; (8009110 <poll_tcp+0xc0>)
 800906c:	4829      	ldr	r0, [pc, #164]	; (8009114 <poll_tcp+0xc4>)
 800906e:	f00d fdbb 	bl	8016be8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d104      	bne.n	8009084 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800907a:	2101      	movs	r1, #1
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 ff5b 	bl	8009f38 <lwip_netconn_do_writemore>
 8009082:	e016      	b.n	80090b2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d112      	bne.n	80090b2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00a      	beq.n	80090aa <poll_tcp+0x5a>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	7a5b      	ldrb	r3, [r3, #9]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	7a5a      	ldrb	r2, [r3, #9]
 80090a4:	3a01      	subs	r2, #1
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80090aa:	2101      	movs	r1, #1
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fb3b 	bl	8009728 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	7f1b      	ldrb	r3, [r3, #28]
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d021      	beq.n	8009102 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01d      	beq.n	8009102 <poll_tcp+0xb2>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090ce:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80090d2:	d316      	bcc.n	8009102 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d810      	bhi.n	8009102 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	7f1b      	ldrb	r3, [r3, #28]
 80090e4:	f023 0310 	bic.w	r3, r3, #16
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <poll_tcp+0xb2>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2200      	movs	r2, #0
 80090fc:	2102      	movs	r1, #2
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	08018540 	.word	0x08018540
 8009110:	08018698 	.word	0x08018698
 8009114:	08018584 	.word	0x08018584

08009118 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <sent_tcp+0x26>
 8009130:	4b20      	ldr	r3, [pc, #128]	; (80091b4 <sent_tcp+0x9c>)
 8009132:	f240 1293 	movw	r2, #403	; 0x193
 8009136:	4920      	ldr	r1, [pc, #128]	; (80091b8 <sent_tcp+0xa0>)
 8009138:	4820      	ldr	r0, [pc, #128]	; (80091bc <sent_tcp+0xa4>)
 800913a:	f00d fd55 	bl	8016be8 <iprintf>

  if (conn) {
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d032      	beq.n	80091aa <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d104      	bne.n	8009156 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800914c:	2101      	movs	r1, #1
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f000 fef2 	bl	8009f38 <lwip_netconn_do_writemore>
 8009154:	e007      	b.n	8009166 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d103      	bne.n	8009166 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800915e:	2101      	movs	r1, #1
 8009160:	6978      	ldr	r0, [r7, #20]
 8009162:	f000 fae1 	bl	8009728 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01d      	beq.n	80091aa <sent_tcp+0x92>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009176:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800917a:	d316      	bcc.n	80091aa <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009184:	2b04      	cmp	r3, #4
 8009186:	d810      	bhi.n	80091aa <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	7f1b      	ldrb	r3, [r3, #28]
 800918c:	f023 0310 	bic.w	r3, r3, #16
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <sent_tcp+0x92>
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	2102      	movs	r1, #2
 80091a6:	6978      	ldr	r0, [r7, #20]
 80091a8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	08018540 	.word	0x08018540
 80091b8:	08018698 	.word	0x08018698
 80091bc:	08018584 	.word	0x08018584

080091c0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <err_tcp+0x24>
 80091d6:	4b5f      	ldr	r3, [pc, #380]	; (8009354 <err_tcp+0x194>)
 80091d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80091dc:	495e      	ldr	r1, [pc, #376]	; (8009358 <err_tcp+0x198>)
 80091de:	485f      	ldr	r0, [pc, #380]	; (800935c <err_tcp+0x19c>)
 80091e0:	f00d fd02 	bl	8016be8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80091e4:	f00d fbe2 	bl	80169ac <sys_arch_protect>
 80091e8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	7f1b      	ldrb	r3, [r3, #28]
 80091fa:	f043 0301 	orr.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	2200      	movs	r2, #0
 800920e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009210:	69b8      	ldr	r0, [r7, #24]
 8009212:	f00d fbd9 	bl	80169c8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <err_tcp+0x6a>
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	2200      	movs	r2, #0
 8009224:	2104      	movs	r1, #4
 8009226:	69f8      	ldr	r0, [r7, #28]
 8009228:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <err_tcp+0x7e>
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	69f8      	ldr	r0, [r7, #28]
 800923c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <err_tcp+0x92>
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	2200      	movs	r2, #0
 800924c:	2102      	movs	r1, #2
 800924e:	69f8      	ldr	r0, [r7, #28]
 8009250:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fd86 	bl	8008d68 <lwip_netconn_err_to_msg>
 800925c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	3310      	adds	r3, #16
 8009262:	4618      	mov	r0, r3
 8009264:	f00d fa87 	bl	8016776 <sys_mbox_valid>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	3310      	adds	r3, #16
 8009272:	6939      	ldr	r1, [r7, #16]
 8009274:	4618      	mov	r0, r3
 8009276:	f00d fa09 	bl	801668c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	3314      	adds	r3, #20
 800927e:	4618      	mov	r0, r3
 8009280:	f00d fa79 	bl	8016776 <sys_mbox_valid>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	3314      	adds	r3, #20
 800928e:	6939      	ldr	r1, [r7, #16]
 8009290:	4618      	mov	r0, r3
 8009292:	f00d f9fb 	bl	801668c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d005      	beq.n	80092a8 <err_tcp+0xe8>
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d002      	beq.n	80092a8 <err_tcp+0xe8>
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d143      	bne.n	8009330 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	7f1b      	ldrb	r3, [r3, #28]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bf14      	ite	ne
 80092b4:	2301      	movne	r3, #1
 80092b6:	2300      	moveq	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	7f1b      	ldrb	r3, [r3, #28]
 80092c0:	f023 0304 	bic.w	r3, r3, #4
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d13b      	bne.n	8009348 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <err_tcp+0x126>
 80092d8:	4b1e      	ldr	r3, [pc, #120]	; (8009354 <err_tcp+0x194>)
 80092da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80092de:	4920      	ldr	r1, [pc, #128]	; (8009360 <err_tcp+0x1a0>)
 80092e0:	481e      	ldr	r0, [pc, #120]	; (800935c <err_tcp+0x19c>)
 80092e2:	f00d fc81 	bl	8016be8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d104      	bne.n	80092f6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	2200      	movs	r2, #0
 80092f2:	711a      	strb	r2, [r3, #4]
 80092f4:	e003      	b.n	80092fe <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009308:	68b8      	ldr	r0, [r7, #8]
 800930a:	f00d fac5 	bl	8016898 <sys_sem_valid>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <err_tcp+0x162>
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <err_tcp+0x194>)
 8009316:	f240 12ef 	movw	r2, #495	; 0x1ef
 800931a:	4912      	ldr	r1, [pc, #72]	; (8009364 <err_tcp+0x1a4>)
 800931c:	480f      	ldr	r0, [pc, #60]	; (800935c <err_tcp+0x19c>)
 800931e:	f00d fc63 	bl	8016be8 <iprintf>
      conn->current_msg = NULL;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	2200      	movs	r2, #0
 8009326:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f00d fa9b 	bl	8016864 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800932e:	e00b      	b.n	8009348 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d008      	beq.n	800934a <err_tcp+0x18a>
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <err_tcp+0x194>)
 800933a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800933e:	490a      	ldr	r1, [pc, #40]	; (8009368 <err_tcp+0x1a8>)
 8009340:	4806      	ldr	r0, [pc, #24]	; (800935c <err_tcp+0x19c>)
 8009342:	f00d fc51 	bl	8016be8 <iprintf>
  }
}
 8009346:	e000      	b.n	800934a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009348:	bf00      	nop
}
 800934a:	bf00      	nop
 800934c:	3720      	adds	r7, #32
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	08018540 	.word	0x08018540
 8009358:	08018698 	.word	0x08018698
 800935c:	08018584 	.word	0x08018584
 8009360:	080186a8 	.word	0x080186a8
 8009364:	080186c4 	.word	0x080186c4
 8009368:	080186e0 	.word	0x080186e0

0800936c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f005 f9c5 	bl	800e70c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009382:	490a      	ldr	r1, [pc, #40]	; (80093ac <setup_tcp+0x40>)
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f005 f9d3 	bl	800e730 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800938a:	4909      	ldr	r1, [pc, #36]	; (80093b0 <setup_tcp+0x44>)
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f005 f9f1 	bl	800e774 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009392:	2202      	movs	r2, #2
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <setup_tcp+0x48>)
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f005 fa48 	bl	800e82c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800939c:	4906      	ldr	r1, [pc, #24]	; (80093b8 <setup_tcp+0x4c>)
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f005 fa0a 	bl	800e7b8 <tcp_err>
}
 80093a4:	bf00      	nop
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	08008f45 	.word	0x08008f45
 80093b0:	08009119 	.word	0x08009119
 80093b4:	08009051 	.word	0x08009051
 80093b8:	080091c1 	.word	0x080091c1

080093bc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d006      	beq.n	80093e0 <pcb_new+0x24>
 80093d2:	4b2b      	ldr	r3, [pc, #172]	; (8009480 <pcb_new+0xc4>)
 80093d4:	f240 2265 	movw	r2, #613	; 0x265
 80093d8:	492a      	ldr	r1, [pc, #168]	; (8009484 <pcb_new+0xc8>)
 80093da:	482b      	ldr	r0, [pc, #172]	; (8009488 <pcb_new+0xcc>)
 80093dc:	f00d fc04 	bl	8016be8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d022      	beq.n	8009434 <pcb_new+0x78>
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d133      	bne.n	800945a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681c      	ldr	r4, [r3, #0]
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f00a fce6 	bl	8013dca <udp_new_ip_type>
 80093fe:	4603      	mov	r3, r0
 8009400:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d02a      	beq.n	8009462 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b22      	cmp	r3, #34	; 0x22
 8009414:	d104      	bne.n	8009420 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6858      	ldr	r0, [r3, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	4917      	ldr	r1, [pc, #92]	; (800948c <pcb_new+0xd0>)
 800942e:	f00a fc53 	bl	8013cd8 <udp_recv>
      }
      break;
 8009432:	e016      	b.n	8009462 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681c      	ldr	r4, [r3, #0]
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f005 f958 	bl	800e6f0 <tcp_new_ip_type>
 8009440:	4603      	mov	r3, r0
 8009442:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff ff8a 	bl	800936c <setup_tcp>
      }
      break;
 8009458:	e005      	b.n	8009466 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	22fa      	movs	r2, #250	; 0xfa
 800945e:	711a      	strb	r2, [r3, #4]
      return;
 8009460:	e00a      	b.n	8009478 <pcb_new+0xbc>
      break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <pcb_new+0xac>
      break;
 8009466:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	22ff      	movs	r2, #255	; 0xff
 8009476:	711a      	strb	r2, [r3, #4]
  }
}
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	bd90      	pop	{r4, r7, pc}
 800947e:	bf00      	nop
 8009480:	08018540 	.word	0x08018540
 8009484:	08018724 	.word	0x08018724
 8009488:	08018584 	.word	0x08018584
 800948c:	08008e49 	.word	0x08008e49

08009490 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff ff85 	bl	80093bc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80094b2:	bf00      	nop
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80094cc:	2007      	movs	r0, #7
 80094ce:	f002 fbbf 	bl	800bc50 <memp_malloc>
 80094d2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <netconn_alloc+0x22>
    return NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	e052      	b.n	8009584 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	79fa      	ldrb	r2, [r7, #7]
 80094e8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f6:	2b10      	cmp	r3, #16
 80094f8:	d004      	beq.n	8009504 <netconn_alloc+0x48>
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d105      	bne.n	800950a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80094fe:	2306      	movs	r3, #6
 8009500:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009502:	e00a      	b.n	800951a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009504:	2306      	movs	r3, #6
 8009506:	617b      	str	r3, [r7, #20]
      break;
 8009508:	e007      	b.n	800951a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800950a:	4b20      	ldr	r3, [pc, #128]	; (800958c <netconn_alloc+0xd0>)
 800950c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009510:	491f      	ldr	r1, [pc, #124]	; (8009590 <netconn_alloc+0xd4>)
 8009512:	4820      	ldr	r0, [pc, #128]	; (8009594 <netconn_alloc+0xd8>)
 8009514:	f00d fb68 	bl	8016be8 <iprintf>
      goto free_and_return;
 8009518:	e02f      	b.n	800957a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3310      	adds	r3, #16
 800951e:	6979      	ldr	r1, [r7, #20]
 8009520:	4618      	mov	r0, r3
 8009522:	f00d f87f 	bl	8016624 <sys_mbox_new>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d125      	bne.n	8009578 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	330c      	adds	r3, #12
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f00d f93d 	bl	80167b2 <sys_sem_new>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3310      	adds	r3, #16
 8009542:	4618      	mov	r0, r3
 8009544:	f00d f890 	bl	8016668 <sys_mbox_free>
    goto free_and_return;
 8009548:	e017      	b.n	800957a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3314      	adds	r3, #20
 800954e:	4618      	mov	r0, r3
 8009550:	f00d f922 	bl	8016798 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f04f 32ff 	mov.w	r2, #4294967295
 8009560:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	7cfa      	ldrb	r2, [r7, #19]
 8009572:	771a      	strb	r2, [r3, #28]
  return conn;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e005      	b.n	8009584 <netconn_alloc+0xc8>
    goto free_and_return;
 8009578:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	2007      	movs	r0, #7
 800957e:	f002 fbdd 	bl	800bd3c <memp_free>
  return NULL;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	08018540 	.word	0x08018540
 8009590:	08018744 	.word	0x08018744
 8009594:	08018584 	.word	0x08018584

08009598 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d006      	beq.n	80095b6 <netconn_free+0x1e>
 80095a8:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <netconn_free+0x80>)
 80095aa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80095ae:	491b      	ldr	r1, [pc, #108]	; (800961c <netconn_free+0x84>)
 80095b0:	481b      	ldr	r0, [pc, #108]	; (8009620 <netconn_free+0x88>)
 80095b2:	f00d fb19 	bl	8016be8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3310      	adds	r3, #16
 80095ba:	4618      	mov	r0, r3
 80095bc:	f00d f8db 	bl	8016776 <sys_mbox_valid>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <netconn_free+0x3c>
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <netconn_free+0x80>)
 80095c8:	f240 3223 	movw	r2, #803	; 0x323
 80095cc:	4915      	ldr	r1, [pc, #84]	; (8009624 <netconn_free+0x8c>)
 80095ce:	4814      	ldr	r0, [pc, #80]	; (8009620 <netconn_free+0x88>)
 80095d0:	f00d fb0a 	bl	8016be8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3314      	adds	r3, #20
 80095d8:	4618      	mov	r0, r3
 80095da:	f00d f8cc 	bl	8016776 <sys_mbox_valid>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <netconn_free+0x5a>
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <netconn_free+0x80>)
 80095e6:	f240 3226 	movw	r2, #806	; 0x326
 80095ea:	490f      	ldr	r1, [pc, #60]	; (8009628 <netconn_free+0x90>)
 80095ec:	480c      	ldr	r0, [pc, #48]	; (8009620 <netconn_free+0x88>)
 80095ee:	f00d fafb 	bl	8016be8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	330c      	adds	r3, #12
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00d f941 	bl	801687e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	330c      	adds	r3, #12
 8009600:	4618      	mov	r0, r3
 8009602:	f00d f95a 	bl	80168ba <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	2007      	movs	r0, #7
 800960a:	f002 fb97 	bl	800bd3c <memp_free>
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	08018540 	.word	0x08018540
 800961c:	0801876c 	.word	0x0801876c
 8009620:	08018584 	.word	0x08018584
 8009624:	0801879c 	.word	0x0801879c
 8009628:	080187d8 	.word	0x080187d8

0800962c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3310      	adds	r3, #16
 8009638:	4618      	mov	r0, r3
 800963a:	f00d f89c 	bl	8016776 <sys_mbox_valid>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02f      	beq.n	80096a4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009644:	e018      	b.n	8009678 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800964e:	2b10      	cmp	r3, #16
 8009650:	d10e      	bne.n	8009670 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f107 020f 	add.w	r2, r7, #15
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fbba 	bl	8008dd4 <lwip_netconn_is_err_msg>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d108      	bne.n	8009678 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4618      	mov	r0, r3
 800966a:	f003 fa0b 	bl	800ca84 <pbuf_free>
 800966e:	e003      	b.n	8009678 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fed6 	bl	800a424 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3310      	adds	r3, #16
 800967c:	f107 0210 	add.w	r2, r7, #16
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f00d f85b 	bl	801673e <sys_arch_mbox_tryfetch>
 8009688:	4603      	mov	r3, r0
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d1da      	bne.n	8009646 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3310      	adds	r3, #16
 8009694:	4618      	mov	r0, r3
 8009696:	f00c ffe7 	bl	8016668 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3310      	adds	r3, #16
 800969e:	4618      	mov	r0, r3
 80096a0:	f00d f87a 	bl	8016798 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3314      	adds	r3, #20
 80096a8:	4618      	mov	r0, r3
 80096aa:	f00d f864 	bl	8016776 <sys_mbox_valid>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d034      	beq.n	800971e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80096b4:	e01d      	b.n	80096f2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f107 020e 	add.w	r2, r7, #14
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff fb88 	bl	8008dd4 <lwip_netconn_is_err_msg>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d113      	bne.n	80096f2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80096ce:	6978      	ldr	r0, [r7, #20]
 80096d0:	f7ff ffac 	bl	800962c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f003 ffcf 	bl	800d684 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2200      	movs	r2, #0
 80096ea:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80096ec:	6978      	ldr	r0, [r7, #20]
 80096ee:	f7ff ff53 	bl	8009598 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3314      	adds	r3, #20
 80096f6:	f107 0210 	add.w	r2, r7, #16
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f00d f81e 	bl	801673e <sys_arch_mbox_tryfetch>
 8009702:	4603      	mov	r3, r0
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d1d5      	bne.n	80096b6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3314      	adds	r3, #20
 800970e:	4618      	mov	r0, r3
 8009710:	f00c ffaa 	bl	8016668 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3314      	adds	r3, #20
 8009718:	4618      	mov	r0, r3
 800971a:	f00d f83d 	bl	8016798 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800971e:	bf00      	nop
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d106      	bne.n	800974c <lwip_netconn_do_close_internal+0x24>
 800973e:	4b87      	ldr	r3, [pc, #540]	; (800995c <lwip_netconn_do_close_internal+0x234>)
 8009740:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009744:	4986      	ldr	r1, [pc, #536]	; (8009960 <lwip_netconn_do_close_internal+0x238>)
 8009746:	4887      	ldr	r0, [pc, #540]	; (8009964 <lwip_netconn_do_close_internal+0x23c>)
 8009748:	f00d fa4e 	bl	8016be8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009754:	2b10      	cmp	r3, #16
 8009756:	d006      	beq.n	8009766 <lwip_netconn_do_close_internal+0x3e>
 8009758:	4b80      	ldr	r3, [pc, #512]	; (800995c <lwip_netconn_do_close_internal+0x234>)
 800975a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800975e:	4982      	ldr	r1, [pc, #520]	; (8009968 <lwip_netconn_do_close_internal+0x240>)
 8009760:	4880      	ldr	r0, [pc, #512]	; (8009964 <lwip_netconn_do_close_internal+0x23c>)
 8009762:	f00d fa41 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	2b04      	cmp	r3, #4
 800976c:	d006      	beq.n	800977c <lwip_netconn_do_close_internal+0x54>
 800976e:	4b7b      	ldr	r3, [pc, #492]	; (800995c <lwip_netconn_do_close_internal+0x234>)
 8009770:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009774:	497d      	ldr	r1, [pc, #500]	; (800996c <lwip_netconn_do_close_internal+0x244>)
 8009776:	487b      	ldr	r0, [pc, #492]	; (8009964 <lwip_netconn_do_close_internal+0x23c>)
 8009778:	f00d fa36 	bl	8016be8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <lwip_netconn_do_close_internal+0x6a>
 8009784:	4b75      	ldr	r3, [pc, #468]	; (800995c <lwip_netconn_do_close_internal+0x234>)
 8009786:	f240 32a5 	movw	r2, #933	; 0x3a5
 800978a:	4979      	ldr	r1, [pc, #484]	; (8009970 <lwip_netconn_do_close_internal+0x248>)
 800978c:	4875      	ldr	r0, [pc, #468]	; (8009964 <lwip_netconn_do_close_internal+0x23c>)
 800978e:	f00d fa2b 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <lwip_netconn_do_close_internal+0x80>
 800979a:	4b70      	ldr	r3, [pc, #448]	; (800995c <lwip_netconn_do_close_internal+0x234>)
 800979c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80097a0:	4974      	ldr	r1, [pc, #464]	; (8009974 <lwip_netconn_do_close_internal+0x24c>)
 80097a2:	4870      	ldr	r0, [pc, #448]	; (8009964 <lwip_netconn_do_close_internal+0x23c>)
 80097a4:	f00d fa20 	bl	8016be8 <iprintf>

  tpcb = conn->pcb.tcp;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	7a1b      	ldrb	r3, [r3, #8]
 80097b4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d102      	bne.n	80097d2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75bb      	strb	r3, [r7, #22]
 80097d0:	e01f      	b.n	8009812 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00e      	beq.n	80097f6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d007      	beq.n	80097f0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d003      	beq.n	80097f0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d102      	bne.n	80097f6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80097f0:	2301      	movs	r3, #1
 80097f2:	75bb      	strb	r3, [r7, #22]
 80097f4:	e00d      	b.n	8009812 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80097f6:	7b7b      	ldrb	r3, [r7, #13]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <lwip_netconn_do_close_internal+0xe6>
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	8b5b      	ldrh	r3, [r3, #26]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009808:	2301      	movs	r3, #1
 800980a:	75bb      	strb	r3, [r7, #22]
 800980c:	e001      	b.n	8009812 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009812:	7dbb      	ldrb	r3, [r7, #22]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009818:	2100      	movs	r1, #0
 800981a:	6938      	ldr	r0, [r7, #16]
 800981c:	f004 ff76 	bl	800e70c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	7d1b      	ldrb	r3, [r3, #20]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d104      	bne.n	8009832 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009828:	2100      	movs	r1, #0
 800982a:	6938      	ldr	r0, [r7, #16]
 800982c:	f004 ffe6 	bl	800e7fc <tcp_accept>
 8009830:	e01d      	b.n	800986e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009838:	2100      	movs	r1, #0
 800983a:	6938      	ldr	r0, [r7, #16]
 800983c:	f004 ff78 	bl	800e730 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009840:	2100      	movs	r1, #0
 8009842:	6938      	ldr	r0, [r7, #16]
 8009844:	f004 ffda 	bl	800e7fc <tcp_accept>
    }
    if (shut_tx) {
 8009848:	7b7b      	ldrb	r3, [r7, #13]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800984e:	2100      	movs	r1, #0
 8009850:	6938      	ldr	r0, [r7, #16]
 8009852:	f004 ff8f 	bl	800e774 <tcp_sent>
    }
    if (shut_close) {
 8009856:	7dbb      	ldrb	r3, [r7, #22]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800985c:	2200      	movs	r2, #0
 800985e:	2100      	movs	r1, #0
 8009860:	6938      	ldr	r0, [r7, #16]
 8009862:	f004 ffe3 	bl	800e82c <tcp_poll>
      tcp_err(tpcb, NULL);
 8009866:	2100      	movs	r1, #0
 8009868:	6938      	ldr	r0, [r7, #16]
 800986a:	f004 ffa5 	bl	800e7b8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009874:	6938      	ldr	r0, [r7, #16]
 8009876:	f003 fdbf 	bl	800d3f8 <tcp_close>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]
 800987e:	e007      	b.n	8009890 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	7b7a      	ldrb	r2, [r7, #13]
 8009884:	4619      	mov	r1, r3
 8009886:	6938      	ldr	r0, [r7, #16]
 8009888:	f003 fde2 	bl	800d450 <tcp_shutdown>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009898:	2301      	movs	r3, #1
 800989a:	757b      	strb	r3, [r7, #21]
 800989c:	e016      	b.n	80098cc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800989e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d10f      	bne.n	80098c8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	7a5b      	ldrb	r3, [r3, #9]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80098b2:	2301      	movs	r3, #1
 80098b4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80098b6:	7dbb      	ldrb	r3, [r7, #22]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80098bc:	6938      	ldr	r0, [r7, #16]
 80098be:	f003 fee1 	bl	800d684 <tcp_abort>
          err = ERR_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]
 80098c6:	e001      	b.n	80098cc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80098cc:	7d7b      	ldrb	r3, [r7, #21]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d052      	beq.n	8009978 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	7dfa      	ldrb	r2, [r7, #23]
 80098e2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80098f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d129      	bne.n	800994c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80098f8:	7dbb      	ldrb	r3, [r7, #22]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00c      	beq.n	8009918 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <lwip_netconn_do_close_internal+0x1f0>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	2200      	movs	r2, #0
 8009912:	2104      	movs	r1, #4
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
      }
      if (shut_rx) {
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <lwip_netconn_do_close_internal+0x20a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
      }
      if (shut_tx) {
 8009932:	7b7b      	ldrb	r3, [r7, #13]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <lwip_netconn_do_close_internal+0x224>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	2200      	movs	r2, #0
 8009946:	2102      	movs	r1, #2
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009952:	68b8      	ldr	r0, [r7, #8]
 8009954:	f00c ff86 	bl	8016864 <sys_sem_signal>
    }
    return ERR_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e03c      	b.n	80099d6 <lwip_netconn_do_close_internal+0x2ae>
 800995c:	08018540 	.word	0x08018540
 8009960:	08018814 	.word	0x08018814
 8009964:	08018584 	.word	0x08018584
 8009968:	08018824 	.word	0x08018824
 800996c:	08018844 	.word	0x08018844
 8009970:	08018868 	.word	0x08018868
 8009974:	080186a8 	.word	0x080186a8
  }
  if (!close_finished) {
 8009978:	7d7b      	ldrb	r3, [r7, #21]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d11e      	bne.n	80099bc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	7d1b      	ldrb	r3, [r3, #20]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d106      	bne.n	8009994 <lwip_netconn_do_close_internal+0x26c>
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <lwip_netconn_do_close_internal+0x2b8>)
 8009988:	f240 4241 	movw	r2, #1089	; 0x441
 800998c:	4915      	ldr	r1, [pc, #84]	; (80099e4 <lwip_netconn_do_close_internal+0x2bc>)
 800998e:	4816      	ldr	r0, [pc, #88]	; (80099e8 <lwip_netconn_do_close_internal+0x2c0>)
 8009990:	f00d f92a 	bl	8016be8 <iprintf>
    if (shut_tx) {
 8009994:	7b7b      	ldrb	r3, [r7, #13]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800999a:	4914      	ldr	r1, [pc, #80]	; (80099ec <lwip_netconn_do_close_internal+0x2c4>)
 800999c:	6938      	ldr	r0, [r7, #16]
 800999e:	f004 fee9 	bl	800e774 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80099a2:	2201      	movs	r2, #1
 80099a4:	4912      	ldr	r1, [pc, #72]	; (80099f0 <lwip_netconn_do_close_internal+0x2c8>)
 80099a6:	6938      	ldr	r0, [r7, #16]
 80099a8:	f004 ff40 	bl	800e82c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80099ac:	4911      	ldr	r1, [pc, #68]	; (80099f4 <lwip_netconn_do_close_internal+0x2cc>)
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f004 ff02 	bl	800e7b8 <tcp_err>
    tcp_arg(tpcb, conn);
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	6938      	ldr	r0, [r7, #16]
 80099b8:	f004 fea8 	bl	800e70c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80099bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <lwip_netconn_do_close_internal+0x2aa>
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <lwip_netconn_do_close_internal+0x2b8>)
 80099c6:	f240 424d 	movw	r2, #1101	; 0x44d
 80099ca:	490b      	ldr	r1, [pc, #44]	; (80099f8 <lwip_netconn_do_close_internal+0x2d0>)
 80099cc:	4806      	ldr	r0, [pc, #24]	; (80099e8 <lwip_netconn_do_close_internal+0x2c0>)
 80099ce:	f00d f90b 	bl	8016be8 <iprintf>
  return err;
 80099d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	08018540 	.word	0x08018540
 80099e4:	0801887c 	.word	0x0801887c
 80099e8:	08018584 	.word	0x08018584
 80099ec:	08009119 	.word	0x08009119
 80099f0:	08009051 	.word	0x08009051
 80099f4:	080091c1 	.word	0x080091c1
 80099f8:	080188a0 	.word	0x080188a0

080099fc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <lwip_netconn_do_delconn+0x36>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d006      	beq.n	8009a32 <lwip_netconn_do_delconn+0x36>
 8009a24:	4b60      	ldr	r3, [pc, #384]	; (8009ba8 <lwip_netconn_do_delconn+0x1ac>)
 8009a26:	f240 425e 	movw	r2, #1118	; 0x45e
 8009a2a:	4960      	ldr	r1, [pc, #384]	; (8009bac <lwip_netconn_do_delconn+0x1b0>)
 8009a2c:	4860      	ldr	r0, [pc, #384]	; (8009bb0 <lwip_netconn_do_delconn+0x1b4>)
 8009a2e:	f00d f8db 	bl	8016be8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <lwip_netconn_do_delconn+0x48>
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d002      	beq.n	8009a44 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d109      	bne.n	8009a58 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d10a      	bne.n	8009a60 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	7f1b      	ldrb	r3, [r3, #28]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	22fb      	movs	r2, #251	; 0xfb
 8009a5c:	711a      	strb	r2, [r3, #4]
 8009a5e:	e097      	b.n	8009b90 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009a60:	7afb      	ldrb	r3, [r7, #11]
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d10d      	bne.n	8009a82 <lwip_netconn_do_delconn+0x86>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	7f1b      	ldrb	r3, [r3, #28]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <lwip_netconn_do_delconn+0x86>
 8009a74:	4b4c      	ldr	r3, [pc, #304]	; (8009ba8 <lwip_netconn_do_delconn+0x1ac>)
 8009a76:	f240 427a 	movw	r2, #1146	; 0x47a
 8009a7a:	494e      	ldr	r1, [pc, #312]	; (8009bb4 <lwip_netconn_do_delconn+0x1b8>)
 8009a7c:	484c      	ldr	r0, [pc, #304]	; (8009bb0 <lwip_netconn_do_delconn+0x1b4>)
 8009a7e:	f00d f8b3 	bl	8016be8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fdcd 	bl	800962c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d05f      	beq.n	8009b5c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d00d      	beq.n	8009ac6 <lwip_netconn_do_delconn+0xca>
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d151      	bne.n	8009b52 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f00a f92a 	bl	8013d18 <udp_remove>
          break;
 8009ac4:	e046      	b.n	8009b54 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <lwip_netconn_do_delconn+0xe2>
 8009ad0:	4b35      	ldr	r3, [pc, #212]	; (8009ba8 <lwip_netconn_do_delconn+0x1ac>)
 8009ad2:	f240 4294 	movw	r2, #1172	; 0x494
 8009ad6:	4938      	ldr	r1, [pc, #224]	; (8009bb8 <lwip_netconn_do_delconn+0x1bc>)
 8009ad8:	4835      	ldr	r0, [pc, #212]	; (8009bb0 <lwip_netconn_do_delconn+0x1b4>)
 8009ada:	f00d f885 	bl	8016be8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2204      	movs	r2, #4
 8009ae4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2203      	movs	r2, #3
 8009aea:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2100      	movs	r1, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fe14 	bl	8009728 <lwip_netconn_do_close_internal>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d04b      	beq.n	8009b9e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d006      	beq.n	8009b1e <lwip_netconn_do_delconn+0x122>
 8009b10:	4b25      	ldr	r3, [pc, #148]	; (8009ba8 <lwip_netconn_do_delconn+0x1ac>)
 8009b12:	f240 429a 	movw	r2, #1178	; 0x49a
 8009b16:	4929      	ldr	r1, [pc, #164]	; (8009bbc <lwip_netconn_do_delconn+0x1c0>)
 8009b18:	4825      	ldr	r0, [pc, #148]	; (8009bb0 <lwip_netconn_do_delconn+0x1b4>)
 8009b1a:	f00d f865 	bl	8016be8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009b1e:	4828      	ldr	r0, [pc, #160]	; (8009bc0 <lwip_netconn_do_delconn+0x1c4>)
 8009b20:	f00c ff11 	bl	8016946 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f00c fe68 	bl	8016802 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009b32:	4823      	ldr	r0, [pc, #140]	; (8009bc0 <lwip_netconn_do_delconn+0x1c4>)
 8009b34:	f00c fef8 	bl	8016928 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d02d      	beq.n	8009b9e <lwip_netconn_do_delconn+0x1a2>
 8009b42:	4b19      	ldr	r3, [pc, #100]	; (8009ba8 <lwip_netconn_do_delconn+0x1ac>)
 8009b44:	f240 429e 	movw	r2, #1182	; 0x49e
 8009b48:	491c      	ldr	r1, [pc, #112]	; (8009bbc <lwip_netconn_do_delconn+0x1c0>)
 8009b4a:	4819      	ldr	r0, [pc, #100]	; (8009bb0 <lwip_netconn_do_delconn+0x1b4>)
 8009b4c:	f00d f84c 	bl	8016be8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009b50:	e025      	b.n	8009b9e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009b52:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d007      	beq.n	8009b76 <lwip_netconn_do_delconn+0x17a>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	6810      	ldr	r0, [r2, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2100      	movs	r1, #0
 8009b74:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <lwip_netconn_do_delconn+0x194>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	6810      	ldr	r0, [r2, #0]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2102      	movs	r1, #2
 8009b8e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	4618      	mov	r0, r3
 8009b98:	f00c fe7e 	bl	8016898 <sys_sem_valid>
 8009b9c:	e000      	b.n	8009ba0 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009b9e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	08018540 	.word	0x08018540
 8009bac:	080188b0 	.word	0x080188b0
 8009bb0:	08018584 	.word	0x08018584
 8009bb4:	080188c4 	.word	0x080188c4
 8009bb8:	080188e4 	.word	0x080188e4
 8009bbc:	08018900 	.word	0x08018900
 8009bc0:	200099b4 	.word	0x200099b4

08009bc4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009be0:	f06f 0305 	mvn.w	r3, #5
 8009be4:	e070      	b.n	8009cc8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	785b      	ldrb	r3, [r3, #1]
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d006      	beq.n	8009bfc <lwip_netconn_do_connected+0x38>
 8009bee:	4b38      	ldr	r3, [pc, #224]	; (8009cd0 <lwip_netconn_do_connected+0x10c>)
 8009bf0:	f240 5223 	movw	r2, #1315	; 0x523
 8009bf4:	4937      	ldr	r1, [pc, #220]	; (8009cd4 <lwip_netconn_do_connected+0x110>)
 8009bf6:	4838      	ldr	r0, [pc, #224]	; (8009cd8 <lwip_netconn_do_connected+0x114>)
 8009bf8:	f00c fff6 	bl	8016be8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10c      	bne.n	8009c1e <lwip_netconn_do_connected+0x5a>
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	7f1b      	ldrb	r3, [r3, #28]
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d106      	bne.n	8009c1e <lwip_netconn_do_connected+0x5a>
 8009c10:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <lwip_netconn_do_connected+0x10c>)
 8009c12:	f240 5224 	movw	r2, #1316	; 0x524
 8009c16:	4931      	ldr	r1, [pc, #196]	; (8009cdc <lwip_netconn_do_connected+0x118>)
 8009c18:	482f      	ldr	r0, [pc, #188]	; (8009cd8 <lwip_netconn_do_connected+0x114>)
 8009c1a:	f00c ffe5 	bl	8016be8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d008      	beq.n	8009c38 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	79fa      	ldrb	r2, [r7, #7]
 8009c2c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	330c      	adds	r3, #12
 8009c36:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c40:	2b10      	cmp	r3, #16
 8009c42:	d106      	bne.n	8009c52 <lwip_netconn_do_connected+0x8e>
 8009c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009c4c:	69b8      	ldr	r0, [r7, #24]
 8009c4e:	f7ff fb8d 	bl	800936c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	7f1b      	ldrb	r3, [r3, #28]
 8009c56:	f003 0304 	and.w	r3, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bf0c      	ite	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	2300      	movne	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	7f1b      	ldrb	r3, [r3, #28]
 8009c6a:	f023 0304 	bic.w	r3, r3, #4
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <lwip_netconn_do_connected+0xbc>
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10c      	bne.n	8009c9a <lwip_netconn_do_connected+0xd6>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <lwip_netconn_do_connected+0xc8>
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d006      	beq.n	8009c9a <lwip_netconn_do_connected+0xd6>
 8009c8c:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <lwip_netconn_do_connected+0x10c>)
 8009c8e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009c92:	4913      	ldr	r1, [pc, #76]	; (8009ce0 <lwip_netconn_do_connected+0x11c>)
 8009c94:	4810      	ldr	r0, [pc, #64]	; (8009cd8 <lwip_netconn_do_connected+0x114>)
 8009c96:	f00c ffa7 	bl	8016be8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <lwip_netconn_do_connected+0xf6>
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2102      	movs	r1, #2
 8009cb6:	69b8      	ldr	r0, [r7, #24]
 8009cb8:	4798      	blx	r3

  if (was_blocking) {
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009cc0:	69f8      	ldr	r0, [r7, #28]
 8009cc2:	f00c fdcf 	bl	8016864 <sys_sem_signal>
  }
  return ERR_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3720      	adds	r7, #32
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	08018540 	.word	0x08018540
 8009cd4:	08018908 	.word	0x08018908
 8009cd8:	08018584 	.word	0x08018584
 8009cdc:	08018928 	.word	0x08018928
 8009ce0:	08018968 	.word	0x08018968

08009ce4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009cfa:	23f1      	movs	r3, #241	; 0xf1
 8009cfc:	75fb      	strb	r3, [r7, #23]
 8009cfe:	e09b      	b.n	8009e38 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d00f      	beq.n	8009d2e <lwip_netconn_do_connect+0x4a>
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	f040 8087 	bne.w	8009e22 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6858      	ldr	r0, [r3, #4]
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	6899      	ldr	r1, [r3, #8]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	899b      	ldrh	r3, [r3, #12]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f009 ff42 	bl	8013bac <udp_connect>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d2c:	e084      	b.n	8009e38 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d102      	bne.n	8009d3e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009d38:	23f7      	movs	r3, #247	; 0xf7
 8009d3a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009d3c:	e07b      	b.n	8009e36 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009d48:	23f6      	movs	r3, #246	; 0xf6
 8009d4a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d4c:	e073      	b.n	8009e36 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fb0a 	bl	800936c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6858      	ldr	r0, [r3, #4]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6899      	ldr	r1, [r3, #8]
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	899a      	ldrh	r2, [r3, #12]
 8009d66:	4b38      	ldr	r3, [pc, #224]	; (8009e48 <lwip_netconn_do_connect+0x164>)
 8009d68:	f003 fd88 	bl	800d87c <tcp_connect>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d15e      	bne.n	8009e36 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	7f1b      	ldrb	r3, [r3, #28]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bf14      	ite	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	2300      	moveq	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2203      	movs	r2, #3
 8009d94:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <lwip_netconn_do_connect+0xcc>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	7f1a      	ldrb	r2, [r3, #28]
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0204 	orr.w	r2, r2, #4
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	771a      	strb	r2, [r3, #28]
 8009dae:	e008      	b.n	8009dc2 <lwip_netconn_do_connect+0xde>
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	7f1a      	ldrb	r2, [r3, #28]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0204 	bic.w	r2, r2, #4
 8009dbe:	b2d2      	uxtb	r2, r2
 8009dc0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009dc8:	23fb      	movs	r3, #251	; 0xfb
 8009dca:	75fb      	strb	r3, [r7, #23]
        break;
 8009dcc:	e033      	b.n	8009e36 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	785b      	ldrb	r3, [r3, #1]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d006      	beq.n	8009dee <lwip_netconn_do_connect+0x10a>
 8009de0:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <lwip_netconn_do_connect+0x168>)
 8009de2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009de6:	491a      	ldr	r1, [pc, #104]	; (8009e50 <lwip_netconn_do_connect+0x16c>)
 8009de8:	481a      	ldr	r0, [pc, #104]	; (8009e54 <lwip_netconn_do_connect+0x170>)
 8009dea:	f00c fefd 	bl	8016be8 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009dee:	481a      	ldr	r0, [pc, #104]	; (8009e58 <lwip_netconn_do_connect+0x174>)
 8009df0:	f00c fda9 	bl	8016946 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f00c fd00 	bl	8016802 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009e02:	4815      	ldr	r0, [pc, #84]	; (8009e58 <lwip_netconn_do_connect+0x174>)
 8009e04:	f00c fd90 	bl	8016928 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d116      	bne.n	8009e40 <lwip_netconn_do_connect+0x15c>
 8009e12:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <lwip_netconn_do_connect+0x168>)
 8009e14:	f240 5274 	movw	r2, #1396	; 0x574
 8009e18:	490d      	ldr	r1, [pc, #52]	; (8009e50 <lwip_netconn_do_connect+0x16c>)
 8009e1a:	480e      	ldr	r0, [pc, #56]	; (8009e54 <lwip_netconn_do_connect+0x170>)
 8009e1c:	f00c fee4 	bl	8016be8 <iprintf>
              return;
 8009e20:	e00e      	b.n	8009e40 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009e22:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <lwip_netconn_do_connect+0x168>)
 8009e24:	f240 527d 	movw	r2, #1405	; 0x57d
 8009e28:	490c      	ldr	r1, [pc, #48]	; (8009e5c <lwip_netconn_do_connect+0x178>)
 8009e2a:	480a      	ldr	r0, [pc, #40]	; (8009e54 <lwip_netconn_do_connect+0x170>)
 8009e2c:	f00c fedc 	bl	8016be8 <iprintf>
 8009e30:	23fa      	movs	r3, #250	; 0xfa
 8009e32:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009e34:	e000      	b.n	8009e38 <lwip_netconn_do_connect+0x154>
        break;
 8009e36:	bf00      	nop
    }
  }
  msg->err = err;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	7dfa      	ldrb	r2, [r7, #23]
 8009e3c:	711a      	strb	r2, [r3, #4]
 8009e3e:	e000      	b.n	8009e42 <lwip_netconn_do_connect+0x15e>
              return;
 8009e40:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	08009bc5 	.word	0x08009bc5
 8009e4c:	08018540 	.word	0x08018540
 8009e50:	08018900 	.word	0x08018900
 8009e54:	08018584 	.word	0x08018584
 8009e58:	200099b4 	.word	0x200099b4
 8009e5c:	08018988 	.word	0x08018988

08009e60 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d109      	bne.n	8009e8e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f009 ff01 	bl	8013c88 <udp_disconnect>
    msg->err = ERR_OK;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e8c:	e002      	b.n	8009e94 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	22fa      	movs	r2, #250	; 0xfa
 8009e92:	711a      	strb	r2, [r3, #4]
}
 8009e94:	bf00      	nop
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe ff3f 	bl	8008d30 <netconn_err>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d134      	bne.n	8009f28 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d02d      	beq.n	8009f24 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d123      	bne.n	8009f1e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10c      	bne.n	8009efa <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f009 fbea 	bl	80136c8 <udp_send>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009ef8:	e016      	b.n	8009f28 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6858      	ldr	r0, [r3, #4]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f103 0208 	add.w	r2, r3, #8
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	899b      	ldrh	r3, [r3, #12]
 8009f14:	f009 fc0c 	bl	8013730 <udp_sendto>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8009f1c:	e004      	b.n	8009f28 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009f1e:	23f5      	movs	r3, #245	; 0xf5
 8009f20:	73fb      	strb	r3, [r7, #15]
          break;
 8009f22:	e001      	b.n	8009f28 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009f24:	23f5      	movs	r3, #245	; 0xf5
 8009f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	7bfa      	ldrb	r2, [r7, #15]
 8009f2c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b088      	sub	sp, #32
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <lwip_netconn_do_writemore+0x24>
 8009f4e:	4b96      	ldr	r3, [pc, #600]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009f50:	f240 6273 	movw	r2, #1651	; 0x673
 8009f54:	4995      	ldr	r1, [pc, #596]	; (800a1ac <lwip_netconn_do_writemore+0x274>)
 8009f56:	4896      	ldr	r0, [pc, #600]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009f58:	f00c fe46 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d006      	beq.n	8009f72 <lwip_netconn_do_writemore+0x3a>
 8009f64:	4b90      	ldr	r3, [pc, #576]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009f66:	f240 6274 	movw	r2, #1652	; 0x674
 8009f6a:	4992      	ldr	r1, [pc, #584]	; (800a1b4 <lwip_netconn_do_writemore+0x27c>)
 8009f6c:	4890      	ldr	r0, [pc, #576]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009f6e:	f00c fe3b 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <lwip_netconn_do_writemore+0x50>
 8009f7a:	4b8b      	ldr	r3, [pc, #556]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009f7c:	f240 6275 	movw	r2, #1653	; 0x675
 8009f80:	498d      	ldr	r1, [pc, #564]	; (800a1b8 <lwip_netconn_do_writemore+0x280>)
 8009f82:	488b      	ldr	r0, [pc, #556]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009f84:	f00c fe30 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <lwip_netconn_do_writemore+0x66>
 8009f90:	4b85      	ldr	r3, [pc, #532]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009f92:	f240 6276 	movw	r2, #1654	; 0x676
 8009f96:	4989      	ldr	r1, [pc, #548]	; (800a1bc <lwip_netconn_do_writemore+0x284>)
 8009f98:	4885      	ldr	r0, [pc, #532]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009f9a:	f00c fe25 	bl	8016be8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d306      	bcc.n	8009fbc <lwip_netconn_do_writemore+0x84>
 8009fae:	4b7e      	ldr	r3, [pc, #504]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009fb0:	f240 6277 	movw	r2, #1655	; 0x677
 8009fb4:	4982      	ldr	r1, [pc, #520]	; (800a1c0 <lwip_netconn_do_writemore+0x288>)
 8009fb6:	487e      	ldr	r0, [pc, #504]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009fb8:	f00c fe16 	bl	8016be8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	899b      	ldrh	r3, [r3, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d106      	bne.n	8009fd4 <lwip_netconn_do_writemore+0x9c>
 8009fc6:	4b78      	ldr	r3, [pc, #480]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 8009fc8:	f240 6279 	movw	r2, #1657	; 0x679
 8009fcc:	497d      	ldr	r1, [pc, #500]	; (800a1c4 <lwip_netconn_do_writemore+0x28c>)
 8009fce:	4878      	ldr	r0, [pc, #480]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 8009fd0:	f00c fe0a 	bl	8016be8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	7f1b      	ldrb	r3, [r3, #28]
 8009fda:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7f1b      	ldrb	r3, [r3, #28]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <lwip_netconn_do_writemore+0xba>
 8009fe8:	7ebb      	ldrb	r3, [r7, #26]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <lwip_netconn_do_writemore+0xbe>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e000      	b.n	8009ff8 <lwip_netconn_do_writemore+0xc0>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	4413      	add	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a024:	d307      	bcc.n	800a036 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a02a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a02c:	7ebb      	ldrb	r3, [r7, #26]
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	76bb      	strb	r3, [r7, #26]
 800a034:	e001      	b.n	800a03a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a042:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a044:	89fa      	ldrh	r2, [r7, #14]
 800a046:	8bbb      	ldrh	r3, [r7, #28]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d216      	bcs.n	800a07a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a050:	7e3b      	ldrb	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a056:	8bbb      	ldrh	r3, [r7, #28]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10e      	bne.n	800a07a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d102      	bne.n	800a06c <lwip_netconn_do_writemore+0x134>
 800a066:	f06f 0306 	mvn.w	r3, #6
 800a06a:	e000      	b.n	800a06e <lwip_netconn_do_writemore+0x136>
 800a06c:	2300      	movs	r3, #0
 800a06e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a070:	e07d      	b.n	800a16e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a072:	7ebb      	ldrb	r3, [r7, #26]
 800a074:	f043 0302 	orr.w	r3, r3, #2
 800a078:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	8bbb      	ldrh	r3, [r7, #28]
 800a082:	441a      	add	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d906      	bls.n	800a09e <lwip_netconn_do_writemore+0x166>
 800a090:	4b45      	ldr	r3, [pc, #276]	; (800a1a8 <lwip_netconn_do_writemore+0x270>)
 800a092:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a096:	494c      	ldr	r1, [pc, #304]	; (800a1c8 <lwip_netconn_do_writemore+0x290>)
 800a098:	4845      	ldr	r0, [pc, #276]	; (800a1b0 <lwip_netconn_do_writemore+0x278>)
 800a09a:	f00c fda5 	bl	8016be8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a09e:	8bbb      	ldrh	r3, [r7, #28]
 800a0a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d103      	bne.n	800a0b0 <lwip_netconn_do_writemore+0x178>
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ae:	d209      	bcs.n	800a0c4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a0b4:	8bba      	ldrh	r2, [r7, #28]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d10b      	bne.n	800a0d2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	899b      	ldrh	r3, [r3, #12]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d906      	bls.n	800a0d2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a0c8:	7ebb      	ldrb	r3, [r7, #26]
 800a0ca:	f043 0302 	orr.w	r3, r3, #2
 800a0ce:	76bb      	strb	r3, [r7, #26]
 800a0d0:	e001      	b.n	800a0d6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6858      	ldr	r0, [r3, #4]
 800a0da:	7ebb      	ldrb	r3, [r7, #26]
 800a0dc:	8bba      	ldrh	r2, [r7, #28]
 800a0de:	6979      	ldr	r1, [r7, #20]
 800a0e0:	f007 fa56 	bl	8011590 <tcp_write>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a0e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d12c      	bne.n	800a14a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	6999      	ldr	r1, [r3, #24]
 800a0f6:	8bba      	ldrh	r2, [r7, #28]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	440a      	add	r2, r1
 800a0fe:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	6919      	ldr	r1, [r3, #16]
 800a106:	8bba      	ldrh	r2, [r7, #28]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	440a      	add	r2, r1
 800a10e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	691a      	ldr	r2, [r3, #16]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d113      	bne.n	800a14a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	899a      	ldrh	r2, [r3, #12]
 800a128:	3a01      	subs	r2, #1
 800a12a:	b292      	uxth	r2, r2
 800a12c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	899b      	ldrh	r3, [r3, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d008      	beq.n	800a14a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	3208      	adds	r2, #8
 800a140:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	2200      	movs	r2, #0
 800a148:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a14a:	7e7b      	ldrb	r3, [r7, #25]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d004      	beq.n	800a15a <lwip_netconn_do_writemore+0x222>
 800a150:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f43f af50 	beq.w	8009ffa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a15a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <lwip_netconn_do_writemore+0x234>
 800a162:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d146      	bne.n	800a1fa <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a16c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a16e:	7e3b      	ldrb	r3, [r7, #24]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02b      	beq.n	800a1cc <lwip_netconn_do_writemore+0x294>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	699a      	ldr	r2, [r3, #24]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d223      	bcs.n	800a1cc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <lwip_netconn_do_writemore+0x260>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2200      	movs	r2, #0
 800a192:	2103      	movs	r1, #3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7f1b      	ldrb	r3, [r3, #28]
 800a19c:	f043 0310 	orr.w	r3, r3, #16
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	771a      	strb	r2, [r3, #28]
 800a1a6:	e028      	b.n	800a1fa <lwip_netconn_do_writemore+0x2c2>
 800a1a8:	08018540 	.word	0x08018540
 800a1ac:	08018698 	.word	0x08018698
 800a1b0:	08018584 	.word	0x08018584
 800a1b4:	080189a0 	.word	0x080189a0
 800a1b8:	080186a8 	.word	0x080186a8
 800a1bc:	080189c0 	.word	0x080189c0
 800a1c0:	080189d8 	.word	0x080189d8
 800a1c4:	08018a18 	.word	0x08018a18
 800a1c8:	08018a40 	.word	0x08018a40
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1d4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a1d8:	d305      	bcc.n	800a1e6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d909      	bls.n	800a1fa <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <lwip_netconn_do_writemore+0x2c2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2103      	movs	r1, #3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a1fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d11d      	bne.n	800a23e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	699a      	ldr	r2, [r3, #24]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d002      	beq.n	800a218 <lwip_netconn_do_writemore+0x2e0>
 800a212:	7e3b      	ldrb	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a218:	2301      	movs	r3, #1
 800a21a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	f007 ff9f 	bl	8012164 <tcp_output>
 800a226:	4603      	mov	r3, r0
 800a228:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a22a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a22e:	f113 0f04 	cmn.w	r3, #4
 800a232:	d12c      	bne.n	800a28e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a234:	7b3b      	ldrb	r3, [r7, #12]
 800a236:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a238:	2301      	movs	r3, #1
 800a23a:	76fb      	strb	r3, [r7, #27]
 800a23c:	e027      	b.n	800a28e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a23e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a246:	d120      	bne.n	800a28a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f007 ff89 	bl	8012164 <tcp_output>
 800a252:	4603      	mov	r3, r0
 800a254:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a256:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a25a:	f113 0f04 	cmn.w	r3, #4
 800a25e:	d104      	bne.n	800a26a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a260:	7b7b      	ldrb	r3, [r7, #13]
 800a262:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a264:	2301      	movs	r3, #1
 800a266:	76fb      	strb	r3, [r7, #27]
 800a268:	e011      	b.n	800a28e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a26a:	7e3b      	ldrb	r3, [r7, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00e      	beq.n	800a28e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <lwip_netconn_do_writemore+0x348>
 800a27a:	f06f 0306 	mvn.w	r3, #6
 800a27e:	e000      	b.n	800a282 <lwip_netconn_do_writemore+0x34a>
 800a280:	2300      	movs	r3, #0
 800a282:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a284:	2301      	movs	r3, #1
 800a286:	76fb      	strb	r3, [r7, #27]
 800a288:	e001      	b.n	800a28e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a28e:	7efb      	ldrb	r3, [r7, #27]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d015      	beq.n	800a2c0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	330c      	adds	r3, #12
 800a29c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	7ffa      	ldrb	r2, [r7, #31]
 800a2a4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f00c fad3 	bl	8016864 <sys_sem_signal>
 800a2be:	e002      	b.n	800a2c6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c4:	e000      	b.n	800a2c8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fd25 	bl	8008d30 <netconn_err>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d166      	bne.n	800a3c0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2fc:	2b10      	cmp	r3, #16
 800a2fe:	d15d      	bne.n	800a3bc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	785b      	ldrb	r3, [r3, #1]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a30a:	23fb      	movs	r3, #251	; 0xfb
 800a30c:	73fb      	strb	r3, [r7, #15]
 800a30e:	e057      	b.n	800a3c0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d04d      	beq.n	800a3b6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2201      	movs	r2, #1
 800a320:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d006      	beq.n	800a33a <lwip_netconn_do_write+0x6a>
 800a32c:	4b28      	ldr	r3, [pc, #160]	; (800a3d0 <lwip_netconn_do_write+0x100>)
 800a32e:	f240 7223 	movw	r2, #1827	; 0x723
 800a332:	4928      	ldr	r1, [pc, #160]	; (800a3d4 <lwip_netconn_do_write+0x104>)
 800a334:	4828      	ldr	r0, [pc, #160]	; (800a3d8 <lwip_netconn_do_write+0x108>)
 800a336:	f00c fc57 	bl	8016be8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <lwip_netconn_do_write+0x80>
 800a342:	4b23      	ldr	r3, [pc, #140]	; (800a3d0 <lwip_netconn_do_write+0x100>)
 800a344:	f240 7224 	movw	r2, #1828	; 0x724
 800a348:	4924      	ldr	r1, [pc, #144]	; (800a3dc <lwip_netconn_do_write+0x10c>)
 800a34a:	4823      	ldr	r0, [pc, #140]	; (800a3d8 <lwip_netconn_do_write+0x108>)
 800a34c:	f00c fc4c 	bl	8016be8 <iprintf>
        msg->conn->current_msg = msg;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff fdea 	bl	8009f38 <lwip_netconn_do_writemore>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d02e      	beq.n	800a3c8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	785b      	ldrb	r3, [r3, #1]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d006      	beq.n	800a382 <lwip_netconn_do_write+0xb2>
 800a374:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <lwip_netconn_do_write+0x100>)
 800a376:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a37a:	4919      	ldr	r1, [pc, #100]	; (800a3e0 <lwip_netconn_do_write+0x110>)
 800a37c:	4816      	ldr	r0, [pc, #88]	; (800a3d8 <lwip_netconn_do_write+0x108>)
 800a37e:	f00c fc33 	bl	8016be8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a382:	4818      	ldr	r0, [pc, #96]	; (800a3e4 <lwip_netconn_do_write+0x114>)
 800a384:	f00c fadf 	bl	8016946 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	2100      	movs	r1, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f00c fa36 	bl	8016802 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a396:	4813      	ldr	r0, [pc, #76]	; (800a3e4 <lwip_netconn_do_write+0x114>)
 800a398:	f00c fac6 	bl	8016928 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	785b      	ldrb	r3, [r3, #1]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d110      	bne.n	800a3c8 <lwip_netconn_do_write+0xf8>
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <lwip_netconn_do_write+0x100>)
 800a3a8:	f240 722c 	movw	r2, #1836	; 0x72c
 800a3ac:	490c      	ldr	r1, [pc, #48]	; (800a3e0 <lwip_netconn_do_write+0x110>)
 800a3ae:	480a      	ldr	r0, [pc, #40]	; (800a3d8 <lwip_netconn_do_write+0x108>)
 800a3b0:	f00c fc1a 	bl	8016be8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a3b4:	e008      	b.n	800a3c8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a3b6:	23f5      	movs	r3, #245	; 0xf5
 800a3b8:	73fb      	strb	r3, [r7, #15]
 800a3ba:	e001      	b.n	800a3c0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a3bc:	23fa      	movs	r3, #250	; 0xfa
 800a3be:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	7bfa      	ldrb	r2, [r7, #15]
 800a3c4:	711a      	strb	r2, [r3, #4]
 800a3c6:	e000      	b.n	800a3ca <lwip_netconn_do_write+0xfa>
        return;
 800a3c8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	08018540 	.word	0x08018540
 800a3d4:	080188e4 	.word	0x080188e4
 800a3d8:	08018584 	.word	0x08018584
 800a3dc:	08018a6c 	.word	0x08018a6c
 800a3e0:	08018900 	.word	0x08018900
 800a3e4:	200099b4 	.word	0x200099b4

0800a3e8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a3f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dc04      	bgt.n	800a404 <err_to_errno+0x1c>
 800a3fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3fe:	f113 0f10 	cmn.w	r3, #16
 800a402:	da01      	bge.n	800a408 <err_to_errno+0x20>
    return EIO;
 800a404:	2305      	movs	r3, #5
 800a406:	e005      	b.n	800a414 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a40c:	425b      	negs	r3, r3
 800a40e:	4a04      	ldr	r2, [pc, #16]	; (800a420 <err_to_errno+0x38>)
 800a410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	0801bb20 	.word	0x0801bb20

0800a424 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d013      	beq.n	800a45a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00b      	beq.n	800a452 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f002 fb20 	bl	800ca84 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	605a      	str	r2, [r3, #4]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	2006      	movs	r0, #6
 800a456:	f001 fc71 	bl	800bd3c <memp_free>
  }
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <netbuf_free+0x1c>
 800a472:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <netbuf_free+0x44>)
 800a474:	2281      	movs	r2, #129	; 0x81
 800a476:	490d      	ldr	r1, [pc, #52]	; (800a4ac <netbuf_free+0x48>)
 800a478:	480d      	ldr	r0, [pc, #52]	; (800a4b0 <netbuf_free+0x4c>)
 800a47a:	f00c fbb5 	bl	8016be8 <iprintf>
 800a47e:	e00f      	b.n	800a4a0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d004      	beq.n	800a492 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f002 faf9 	bl	800ca84 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	605a      	str	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	08018a98 	.word	0x08018a98
 800a4ac:	08018b34 	.word	0x08018b34
 800a4b0:	08018ae8 	.word	0x08018ae8

0800a4b4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d108      	bne.n	800a4da <netbuf_ref+0x26>
 800a4c8:	4b1c      	ldr	r3, [pc, #112]	; (800a53c <netbuf_ref+0x88>)
 800a4ca:	2299      	movs	r2, #153	; 0x99
 800a4cc:	491c      	ldr	r1, [pc, #112]	; (800a540 <netbuf_ref+0x8c>)
 800a4ce:	481d      	ldr	r0, [pc, #116]	; (800a544 <netbuf_ref+0x90>)
 800a4d0:	f00c fb8a 	bl	8016be8 <iprintf>
 800a4d4:	f06f 030f 	mvn.w	r3, #15
 800a4d8:	e02b      	b.n	800a532 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 facc 	bl	800ca84 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a4ec:	2241      	movs	r2, #65	; 0x41
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	2036      	movs	r0, #54	; 0x36
 800a4f2:	f001 ffe3 	bl	800c4bc <pbuf_alloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a50a:	f04f 33ff 	mov.w	r3, #4294967295
 800a50e:	e010      	b.n	800a532 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	88fa      	ldrh	r2, [r7, #6]
 800a51e:	811a      	strh	r2, [r3, #8]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	891b      	ldrh	r3, [r3, #8]
 800a526:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	08018a98 	.word	0x08018a98
 800a540:	08018b50 	.word	0x08018b50
 800a544:	08018ae8 	.word	0x08018ae8

0800a548 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	db02      	blt.n	800a560 <tryget_socket_unconn_nouse+0x18>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	dd01      	ble.n	800a564 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	e003      	b.n	800a56c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	4a03      	ldr	r2, [pc, #12]	; (800a578 <tryget_socket_unconn_nouse+0x30>)
 800a56a:	4413      	add	r3, r2
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20009964 	.word	0x20009964

0800a57c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ffdf 	bl	800a548 <tryget_socket_unconn_nouse>
 800a58a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a58c:	68fb      	ldr	r3, [r7, #12]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff ffec 	bl	800a57c <tryget_socket_unconn>
 800a5a4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <tryget_socket+0x22>
    if (sock->conn) {
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <tryget_socket+0x22>
      return sock;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	e000      	b.n	800a5ba <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ffe2 	bl	800a596 <tryget_socket>
 800a5d2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d104      	bne.n	800a5e4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <get_socket+0x2c>)
 800a5dc:	2209      	movs	r2, #9
 800a5de:	601a      	str	r2, [r3, #0]
    return NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <get_socket+0x22>
  }
  return sock;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000d3a8 	.word	0x2000d3a8

0800a5f4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e052      	b.n	800a6aa <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a604:	f00c f9d2 	bl	80169ac <sys_arch_protect>
 800a608:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a60a:	4a2c      	ldr	r2, [pc, #176]	; (800a6bc <alloc_socket+0xc8>)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	4413      	add	r3, r2
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d142      	bne.n	800a69e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a618:	4a28      	ldr	r2, [pc, #160]	; (800a6bc <alloc_socket+0xc8>)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	011b      	lsls	r3, r3, #4
 800a61e:	4413      	add	r3, r2
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a624:	68b8      	ldr	r0, [r7, #8]
 800a626:	f00c f9cf 	bl	80169c8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a62a:	4a24      	ldr	r2, [pc, #144]	; (800a6bc <alloc_socket+0xc8>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	4413      	add	r3, r2
 800a632:	3304      	adds	r3, #4
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a638:	4a20      	ldr	r2, [pc, #128]	; (800a6bc <alloc_socket+0xc8>)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	4413      	add	r3, r2
 800a640:	330e      	adds	r3, #14
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d006      	beq.n	800a656 <alloc_socket+0x62>
 800a648:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <alloc_socket+0xcc>)
 800a64a:	f240 220e 	movw	r2, #526	; 0x20e
 800a64e:	491d      	ldr	r1, [pc, #116]	; (800a6c4 <alloc_socket+0xd0>)
 800a650:	481d      	ldr	r0, [pc, #116]	; (800a6c8 <alloc_socket+0xd4>)
 800a652:	f00c fac9 	bl	8016be8 <iprintf>
      sockets[i].rcvevent   = 0;
 800a656:	4a19      	ldr	r2, [pc, #100]	; (800a6bc <alloc_socket+0xc8>)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	4413      	add	r3, r2
 800a65e:	3308      	adds	r3, #8
 800a660:	2200      	movs	r2, #0
 800a662:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	d102      	bne.n	800a676 <alloc_socket+0x82>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <alloc_socket+0x86>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <alloc_socket+0x88>
 800a67a:	2300      	movs	r3, #0
 800a67c:	b299      	uxth	r1, r3
 800a67e:	4a0f      	ldr	r2, [pc, #60]	; (800a6bc <alloc_socket+0xc8>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	4413      	add	r3, r2
 800a686:	330a      	adds	r3, #10
 800a688:	460a      	mov	r2, r1
 800a68a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a68c:	4a0b      	ldr	r2, [pc, #44]	; (800a6bc <alloc_socket+0xc8>)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4413      	add	r3, r2
 800a694:	330c      	adds	r3, #12
 800a696:	2200      	movs	r2, #0
 800a698:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	e00a      	b.n	800a6b4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a69e:	68b8      	ldr	r0, [r7, #8]
 800a6a0:	f00c f992 	bl	80169c8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	dda9      	ble.n	800a604 <alloc_socket+0x10>
  }
  return -1;
 800a6b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	20009964 	.word	0x20009964
 800a6c0:	08018c30 	.word	0x08018c30
 800a6c4:	08018c64 	.word	0x08018c64
 800a6c8:	08018c84 	.word	0x08018c84

0800a6cc <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	6852      	ldr	r2, [r2, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
  return 1;
 800a6f6:	2301      	movs	r3, #1
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00d      	beq.n	800a734 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f002 f9ae 	bl	800ca84 <pbuf_free>
 800a728:	e004      	b.n	800a734 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fe78 	bl	800a424 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800a73a:	68b8      	ldr	r0, [r7, #8]
 800a73c:	f7fe f97a 	bl	8008a34 <netconn_delete>
  }
}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800a752:	f00c f92b 	bl	80169ac <sys_arch_protect>
 800a756:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	f107 020c 	add.w	r2, r7, #12
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff ffb2 	bl	800a6cc <free_socket_locked>
 800a768:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800a76a:	6978      	ldr	r0, [r7, #20]
 800a76c:	f00c f92c 	bl	80169c8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d006      	beq.n	800a784 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f107 0208 	add.w	r2, r7, #8
 800a77c:	4619      	mov	r1, r3
 800a77e:	6838      	ldr	r0, [r7, #0]
 800a780:	f7ff ffc0 	bl	800a704 <free_socket_free_elements>
  }
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff13 	bl	800a5c4 <get_socket>
 800a79e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d102      	bne.n	800a7ac <lwip_close+0x20>
    return -1;
 800a7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7aa:	e039      	b.n	800a820 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7be:	2b10      	cmp	r3, #16
 800a7c0:	bf0c      	ite	eq
 800a7c2:	2301      	moveq	r3, #1
 800a7c4:	2300      	movne	r3, #0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	e00a      	b.n	800a7e2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d006      	beq.n	800a7e2 <lwip_close+0x56>
 800a7d4:	4b14      	ldr	r3, [pc, #80]	; (800a828 <lwip_close+0x9c>)
 800a7d6:	f44f 7245 	mov.w	r2, #788	; 0x314
 800a7da:	4914      	ldr	r1, [pc, #80]	; (800a82c <lwip_close+0xa0>)
 800a7dc:	4814      	ldr	r0, [pc, #80]	; (800a830 <lwip_close+0xa4>)
 800a7de:	f00c fa03 	bl	8016be8 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe f900 	bl	80089ec <netconn_prepare_delete>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800a7f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff fdf3 	bl	800a3e8 <err_to_errno>
 800a802:	60b8      	str	r0, [r7, #8]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <lwip_close+0x84>
 800a80a:	4a0a      	ldr	r2, [pc, #40]	; (800a834 <lwip_close+0xa8>)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a810:	f04f 33ff 	mov.w	r3, #4294967295
 800a814:	e004      	b.n	800a820 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800a816:	6979      	ldr	r1, [r7, #20]
 800a818:	6938      	ldr	r0, [r7, #16]
 800a81a:	f7ff ff95 	bl	800a748 <free_socket>
  set_errno(0);
  return 0;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	08018c30 	.word	0x08018c30
 800a82c:	08018cf0 	.word	0x08018cf0
 800a830:	08018c84 	.word	0x08018c84
 800a834:	2000d3a8 	.word	0x2000d3a8

0800a838 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08c      	sub	sp, #48	; 0x30
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7ff febd 	bl	800a5c4 <get_socket>
 800a84a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <lwip_connect+0x20>
    return -1;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e062      	b.n	800a91e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d108      	bne.n	800a872 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe f939 	bl	8008adc <netconn_disconnect>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a870:	e039      	b.n	800a8e6 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b10      	cmp	r3, #16
 800a876:	d10c      	bne.n	800a892 <lwip_connect+0x5a>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <lwip_connect+0x50>
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	785b      	ldrb	r3, [r3, #1]
 800a884:	2b02      	cmp	r3, #2
 800a886:	d104      	bne.n	800a892 <lwip_connect+0x5a>
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d014      	beq.n	800a8bc <lwip_connect+0x84>
 800a892:	4b25      	ldr	r3, [pc, #148]	; (800a928 <lwip_connect+0xf0>)
 800a894:	f240 3247 	movw	r2, #839	; 0x347
 800a898:	4924      	ldr	r1, [pc, #144]	; (800a92c <lwip_connect+0xf4>)
 800a89a:	4825      	ldr	r0, [pc, #148]	; (800a930 <lwip_connect+0xf8>)
 800a89c:	f00c f9a4 	bl	8016be8 <iprintf>
 800a8a0:	f06f 000f 	mvn.w	r0, #15
 800a8a4:	f7ff fda0 	bl	800a3e8 <err_to_errno>
 800a8a8:	6238      	str	r0, [r7, #32]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <lwip_connect+0x7e>
 800a8b0:	4a20      	ldr	r2, [pc, #128]	; (800a934 <lwip_connect+0xfc>)
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ba:	e030      	b.n	800a91e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	885b      	ldrh	r3, [r3, #2]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 fcea 	bl	800b2a0 <lwip_htons>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8d6:	f107 0114 	add.w	r1, r7, #20
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe f8c6 	bl	8008a6c <netconn_connect>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800a8e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00e      	beq.n	800a90c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a8ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fd78 	bl	800a3e8 <err_to_errno>
 800a8f8:	61b8      	str	r0, [r7, #24]
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <lwip_connect+0xce>
 800a900:	4a0c      	ldr	r2, [pc, #48]	; (800a934 <lwip_connect+0xfc>)
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a906:	f04f 33ff 	mov.w	r3, #4294967295
 800a90a:	e008      	b.n	800a91e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a90c:	2300      	movs	r3, #0
 800a90e:	61fb      	str	r3, [r7, #28]
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <lwip_connect+0xe4>
 800a916:	4a07      	ldr	r2, [pc, #28]	; (800a934 <lwip_connect+0xfc>)
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3730      	adds	r7, #48	; 0x30
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	08018c30 	.word	0x08018c30
 800a92c:	08018d08 	.word	0x08018d08
 800a930:	08018c84 	.word	0x08018c84
 800a934:	2000d3a8 	.word	0x2000d3a8

0800a938 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08a      	sub	sp, #40	; 0x28
 800a93c:	af02      	add	r7, sp, #8
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fe3c 	bl	800a5c4 <get_socket>
 800a94c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <lwip_send+0x22>
    return -1;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e046      	b.n	800a9e8 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a964:	2b10      	cmp	r3, #16
 800a966:	d00b      	beq.n	800a980 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800a968:	2300      	movs	r3, #0
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	2300      	movs	r3, #0
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	68b9      	ldr	r1, [r7, #8]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f83c 	bl	800a9f4 <lwip_sendto>
 800a97c:	4603      	mov	r3, r0
 800a97e:	e033      	b.n	800a9e8 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <lwip_send+0x56>
 800a98a:	2203      	movs	r2, #3
 800a98c:	e000      	b.n	800a990 <lwip_send+0x58>
 800a98e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	105b      	asrs	r3, r3, #1
 800a994:	b25b      	sxtb	r3, r3
 800a996:	f003 0304 	and.w	r3, r3, #4
 800a99a:	b25b      	sxtb	r3, r3
 800a99c:	4313      	orrs	r3, r2
 800a99e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800a9a0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	7efa      	ldrb	r2, [r7, #27]
 800a9ac:	f107 0310 	add.w	r3, r7, #16
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	68b9      	ldr	r1, [r7, #8]
 800a9b8:	f7fe f8e8 	bl	8008b8c <netconn_write_partly>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800a9c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fd0f 	bl	800a3e8 <err_to_errno>
 800a9ca:	6178      	str	r0, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <lwip_send+0xa0>
 800a9d2:	4a07      	ldr	r2, [pc, #28]	; (800a9f0 <lwip_send+0xb8>)
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800a9d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <lwip_send+0xac>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	e001      	b.n	800a9e8 <lwip_send+0xb0>
 800a9e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3720      	adds	r7, #32
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	2000d3a8 	.word	0x2000d3a8

0800a9f4 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08e      	sub	sp, #56	; 0x38
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff fdde 	bl	800a5c4 <get_socket>
 800aa08:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <lwip_sendto+0x22>
    return -1;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	e093      	b.n	800ab3e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa20:	2b10      	cmp	r3, #16
 800aa22:	d107      	bne.n	800aa34 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff ff84 	bl	800a938 <lwip_send>
 800aa30:	4603      	mov	r3, r0
 800aa32:	e084      	b.n	800ab3e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa3a:	d30a      	bcc.n	800aa52 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800aa3c:	235a      	movs	r3, #90	; 0x5a
 800aa3e:	623b      	str	r3, [r7, #32]
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <lwip_sendto+0x58>
 800aa46:	4a40      	ldr	r2, [pc, #256]	; (800ab48 <lwip_sendto+0x154>)
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800aa4c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa50:	e075      	b.n	800ab3e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800aa56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <lwip_sendto+0x6e>
 800aa5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d023      	beq.n	800aaaa <lwip_sendto+0xb6>
 800aa62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa64:	2b10      	cmp	r3, #16
 800aa66:	d10b      	bne.n	800aa80 <lwip_sendto+0x8c>
 800aa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <lwip_sendto+0x8c>
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d104      	bne.n	800aa80 <lwip_sendto+0x8c>
 800aa76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa78:	f003 0303 	and.w	r3, r3, #3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d014      	beq.n	800aaaa <lwip_sendto+0xb6>
 800aa80:	4b32      	ldr	r3, [pc, #200]	; (800ab4c <lwip_sendto+0x158>)
 800aa82:	f240 6252 	movw	r2, #1618	; 0x652
 800aa86:	4932      	ldr	r1, [pc, #200]	; (800ab50 <lwip_sendto+0x15c>)
 800aa88:	4832      	ldr	r0, [pc, #200]	; (800ab54 <lwip_sendto+0x160>)
 800aa8a:	f00c f8ad 	bl	8016be8 <iprintf>
 800aa8e:	f06f 000f 	mvn.w	r0, #15
 800aa92:	f7ff fca9 	bl	800a3e8 <err_to_errno>
 800aa96:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <lwip_sendto+0xb0>
 800aa9e:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <lwip_sendto+0x154>)
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa8:	e049      	b.n	800ab3e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800aab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00a      	beq.n	800aace <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800aab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac0:	885b      	ldrh	r3, [r3, #2]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fbec 	bl	800b2a0 <lwip_htons>
 800aac8:	4603      	mov	r3, r0
 800aaca:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aacc:	e003      	b.n	800aad6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800aad2:	2300      	movs	r3, #0
 800aad4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800aad6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aad8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800aada:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aadc:	f107 0310 	add.w	r3, r7, #16
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff fce6 	bl	800a4b4 <netbuf_ref>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800aaee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f107 0210 	add.w	r2, r7, #16
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe f815 	bl	8008b30 <netconn_send>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ab0c:	f107 0310 	add.w	r3, r7, #16
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fca7 	bl	800a464 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800ab16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff fc64 	bl	800a3e8 <err_to_errno>
 800ab20:	6278      	str	r0, [r7, #36]	; 0x24
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <lwip_sendto+0x13a>
 800ab28:	4a07      	ldr	r2, [pc, #28]	; (800ab48 <lwip_sendto+0x154>)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800ab2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <lwip_sendto+0x146>
 800ab36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab38:	e001      	b.n	800ab3e <lwip_sendto+0x14a>
 800ab3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3738      	adds	r7, #56	; 0x38
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	2000d3a8 	.word	0x2000d3a8
 800ab4c:	08018c30 	.word	0x08018c30
 800ab50:	08018f10 	.word	0x08018f10
 800ab54:	08018c84 	.word	0x08018c84

0800ab58 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d009      	beq.n	800ab7e <lwip_socket+0x26>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	dc23      	bgt.n	800abb8 <lwip_socket+0x60>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d019      	beq.n	800abaa <lwip_socket+0x52>
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d009      	beq.n	800ab90 <lwip_socket+0x38>
 800ab7c:	e01c      	b.n	800abb8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	4a22      	ldr	r2, [pc, #136]	; (800ac0c <lwip_socket+0xb4>)
 800ab84:	4619      	mov	r1, r3
 800ab86:	2040      	movs	r0, #64	; 0x40
 800ab88:	f7fd feb6 	bl	80088f8 <netconn_new_with_proto_and_callback>
 800ab8c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ab8e:	e019      	b.n	800abc4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b88      	cmp	r3, #136	; 0x88
 800ab94:	d101      	bne.n	800ab9a <lwip_socket+0x42>
 800ab96:	2321      	movs	r3, #33	; 0x21
 800ab98:	e000      	b.n	800ab9c <lwip_socket+0x44>
 800ab9a:	2320      	movs	r3, #32
 800ab9c:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <lwip_socket+0xb4>)
 800ab9e:	2100      	movs	r1, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fd fea9 	bl	80088f8 <netconn_new_with_proto_and_callback>
 800aba6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800aba8:	e00c      	b.n	800abc4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800abaa:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <lwip_socket+0xb4>)
 800abac:	2100      	movs	r1, #0
 800abae:	2010      	movs	r0, #16
 800abb0:	f7fd fea2 	bl	80088f8 <netconn_new_with_proto_and_callback>
 800abb4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800abb6:	e005      	b.n	800abc4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800abb8:	4b15      	ldr	r3, [pc, #84]	; (800ac10 <lwip_socket+0xb8>)
 800abba:	2216      	movs	r2, #22
 800abbc:	601a      	str	r2, [r3, #0]
      return -1;
 800abbe:	f04f 33ff 	mov.w	r3, #4294967295
 800abc2:	e01e      	b.n	800ac02 <lwip_socket+0xaa>
  }

  if (!conn) {
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800abca:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <lwip_socket+0xb8>)
 800abcc:	2269      	movs	r2, #105	; 0x69
 800abce:	601a      	str	r2, [r3, #0]
    return -1;
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	e015      	b.n	800ac02 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800abd6:	2100      	movs	r1, #0
 800abd8:	6978      	ldr	r0, [r7, #20]
 800abda:	f7ff fd0b 	bl	800a5f4 <alloc_socket>
 800abde:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d108      	bne.n	800abfa <lwip_socket+0xa2>
    netconn_delete(conn);
 800abe8:	6978      	ldr	r0, [r7, #20]
 800abea:	f7fd ff23 	bl	8008a34 <netconn_delete>
    set_errno(ENFILE);
 800abee:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <lwip_socket+0xb8>)
 800abf0:	2217      	movs	r2, #23
 800abf2:	601a      	str	r2, [r3, #0]
    return -1;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295
 800abf8:	e003      	b.n	800ac02 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ac00:	693b      	ldr	r3, [r7, #16]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	0800ac9d 	.word	0x0800ac9d
 800ac10:	2000d3a8 	.word	0x2000d3a8

0800ac14 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	e02c      	b.n	800ac82 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	695a      	ldr	r2, [r3, #20]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4413      	add	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d11e      	bne.n	800ac7c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d009      	beq.n	800ac58 <lwip_poll_should_wake+0x44>
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <lwip_poll_should_wake+0x44>
        return 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e01a      	b.n	800ac8e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d009      	beq.n	800ac72 <lwip_poll_should_wake+0x5e>
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <lwip_poll_should_wake+0x5e>
        return 1;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e00d      	b.n	800ac8e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e008      	b.n	800ac8e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d3cd      	bcc.n	800ac28 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
	...

0800ac9c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	; 0x28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
 800aca8:	4613      	mov	r3, r2
 800acaa:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80a4 	beq.w	800adfc <event_callback+0x160>
    s = conn->socket;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	da18      	bge.n	800acf2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800acc0:	f00b fe74 	bl	80169ac <sys_arch_protect>
 800acc4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	da0b      	bge.n	800ace6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800acde:	69f8      	ldr	r0, [r7, #28]
 800ace0:	f00b fe72 	bl	80169c8 <sys_arch_unprotect>
        return;
 800ace4:	e08d      	b.n	800ae02 <event_callback+0x166>
      }
      s = conn->socket;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800acec:	69f8      	ldr	r0, [r7, #28]
 800acee:	f00b fe6b 	bl	80169c8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800acf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf4:	f7ff fc66 	bl	800a5c4 <get_socket>
 800acf8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d07f      	beq.n	800ae00 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ad00:	2301      	movs	r3, #1
 800ad02:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ad04:	f00b fe52 	bl	80169ac <sys_arch_protect>
 800ad08:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d83e      	bhi.n	800ad8e <event_callback+0xf2>
 800ad10:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <event_callback+0x7c>)
 800ad12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad16:	bf00      	nop
 800ad18:	0800ad2d 	.word	0x0800ad2d
 800ad1c:	0800ad4f 	.word	0x0800ad4f
 800ad20:	0800ad67 	.word	0x0800ad67
 800ad24:	0800ad7b 	.word	0x0800ad7b
 800ad28:	0800ad87 	.word	0x0800ad87
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	3301      	adds	r3, #1
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	b21a      	sxth	r2, r3
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	dd2a      	ble.n	800ad9e <event_callback+0x102>
        check_waiters = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad4c:	e027      	b.n	800ad9e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	b21a      	sxth	r2, r3
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	623b      	str	r3, [r7, #32]
      break;
 800ad64:	e01c      	b.n	800ada0 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	895b      	ldrh	r3, [r3, #10]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <event_callback+0xd6>
        check_waiters = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	2201      	movs	r2, #1
 800ad76:	815a      	strh	r2, [r3, #10]
      break;
 800ad78:	e012      	b.n	800ada0 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	623b      	str	r3, [r7, #32]
      break;
 800ad84:	e00c      	b.n	800ada0 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	819a      	strh	r2, [r3, #12]
      break;
 800ad8c:	e008      	b.n	800ada0 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ad8e:	4b1e      	ldr	r3, [pc, #120]	; (800ae08 <event_callback+0x16c>)
 800ad90:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800ad94:	491d      	ldr	r1, [pc, #116]	; (800ae0c <event_callback+0x170>)
 800ad96:	481e      	ldr	r0, [pc, #120]	; (800ae10 <event_callback+0x174>)
 800ad98:	f00b ff26 	bl	8016be8 <iprintf>
      break;
 800ad9c:	e000      	b.n	800ada0 <event_callback+0x104>
      break;
 800ad9e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	7b9b      	ldrb	r3, [r3, #14]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d025      	beq.n	800adf4 <event_callback+0x158>
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d022      	beq.n	800adf4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfcc      	ite	gt
 800adb8:	2301      	movgt	r3, #1
 800adba:	2300      	movle	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	895b      	ldrh	r3, [r3, #10]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bf14      	ite	ne
 800adc8:	2301      	movne	r3, #1
 800adca:	2300      	moveq	r3, #0
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	899b      	ldrh	r3, [r3, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	bf14      	ite	ne
 800add8:	2301      	movne	r3, #1
 800adda:	2300      	moveq	r3, #0
 800addc:	b2db      	uxtb	r3, r3
 800adde:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ade0:	69f8      	ldr	r0, [r7, #28]
 800ade2:	f00b fdf1 	bl	80169c8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	6979      	ldr	r1, [r7, #20]
 800adec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adee:	f000 f811 	bl	800ae14 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800adf2:	e006      	b.n	800ae02 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800adf4:	69f8      	ldr	r0, [r7, #28]
 800adf6:	f00b fde7 	bl	80169c8 <sys_arch_unprotect>
 800adfa:	e002      	b.n	800ae02 <event_callback+0x166>
    return;
 800adfc:	bf00      	nop
 800adfe:	e000      	b.n	800ae02 <event_callback+0x166>
      return;
 800ae00:	bf00      	nop
  }
  done_socket(sock);
}
 800ae02:	3728      	adds	r7, #40	; 0x28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	08018c30 	.word	0x08018c30
 800ae0c:	08018fac 	.word	0x08018fac
 800ae10:	08018c84 	.word	0x08018c84

0800ae14 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ae22:	4b42      	ldr	r3, [pc, #264]	; (800af2c <select_check_waiters+0x118>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	e078      	b.n	800af1c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d171      	bne.n	800af16 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	6978      	ldr	r0, [r7, #20]
 800ae4a:	f7ff fee3 	bl	800ac14 <lwip_poll_should_wake>
 800ae4e:	6138      	str	r0, [r7, #16]
 800ae50:	e056      	b.n	800af00 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d017      	beq.n	800ae88 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d013      	beq.n	800ae88 <select_check_waiters+0x74>
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	da00      	bge.n	800ae6c <select_check_waiters+0x58>
 800ae6a:	331f      	adds	r3, #31
 800ae6c:	115b      	asrs	r3, r3, #5
 800ae6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f003 031f 	and.w	r3, r3, #31
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7c:	f003 0301 	and.w	r3, r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <select_check_waiters+0x74>
            do_signal = 1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01a      	beq.n	800aec4 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d117      	bne.n	800aec4 <select_check_waiters+0xb0>
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d013      	beq.n	800aec4 <select_check_waiters+0xb0>
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da00      	bge.n	800aea8 <select_check_waiters+0x94>
 800aea6:	331f      	adds	r3, #31
 800aea8:	115b      	asrs	r3, r3, #5
 800aeaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f003 031f 	and.w	r3, r3, #31
 800aeb4:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <select_check_waiters+0xb0>
            do_signal = 1;
 800aec0:	2301      	movs	r3, #1
 800aec2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01a      	beq.n	800af00 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d117      	bne.n	800af00 <select_check_waiters+0xec>
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d013      	beq.n	800af00 <select_check_waiters+0xec>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	da00      	bge.n	800aee4 <select_check_waiters+0xd0>
 800aee2:	331f      	adds	r3, #31
 800aee4:	115b      	asrs	r3, r3, #5
 800aee6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f003 031f 	and.w	r3, r3, #31
 800aef0:	fa22 f303 	lsr.w	r3, r2, r3
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <select_check_waiters+0xec>
            do_signal = 1;
 800aefc:	2301      	movs	r3, #1
 800aefe:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2201      	movs	r2, #1
 800af0a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	3320      	adds	r3, #32
 800af10:	4618      	mov	r0, r3
 800af12:	f00b fca7 	bl	8016864 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	617b      	str	r3, [r7, #20]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d183      	bne.n	800ae2a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	200099a4 	.word	0x200099a4

0800af30 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800af3a:	f008 f9cb 	bl	80132d4 <sys_timeouts_sleeptime>
 800af3e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d10b      	bne.n	800af60 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800af48:	4813      	ldr	r0, [pc, #76]	; (800af98 <tcpip_timeouts_mbox_fetch+0x68>)
 800af4a:	f00b fcfc 	bl	8016946 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800af4e:	2200      	movs	r2, #0
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f00b fbb4 	bl	80166c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800af58:	480f      	ldr	r0, [pc, #60]	; (800af98 <tcpip_timeouts_mbox_fetch+0x68>)
 800af5a:	f00b fce5 	bl	8016928 <sys_mutex_lock>
    return;
 800af5e:	e018      	b.n	800af92 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d102      	bne.n	800af6c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800af66:	f008 f97b 	bl	8013260 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af6a:	e7e6      	b.n	800af3a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800af6c:	480a      	ldr	r0, [pc, #40]	; (800af98 <tcpip_timeouts_mbox_fetch+0x68>)
 800af6e:	f00b fcea 	bl	8016946 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f00b fba2 	bl	80166c0 <sys_arch_mbox_fetch>
 800af7c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800af7e:	4806      	ldr	r0, [pc, #24]	; (800af98 <tcpip_timeouts_mbox_fetch+0x68>)
 800af80:	f00b fcd2 	bl	8016928 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8a:	d102      	bne.n	800af92 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800af8c:	f008 f968 	bl	8013260 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af90:	e7d3      	b.n	800af3a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200099b4 	.word	0x200099b4

0800af9c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800afa4:	4810      	ldr	r0, [pc, #64]	; (800afe8 <tcpip_thread+0x4c>)
 800afa6:	f00b fcbf 	bl	8016928 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800afaa:	4b10      	ldr	r3, [pc, #64]	; (800afec <tcpip_thread+0x50>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800afb2:	4b0e      	ldr	r3, [pc, #56]	; (800afec <tcpip_thread+0x50>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a0e      	ldr	r2, [pc, #56]	; (800aff0 <tcpip_thread+0x54>)
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	4610      	mov	r0, r2
 800afbc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800afbe:	f107 030c 	add.w	r3, r7, #12
 800afc2:	4619      	mov	r1, r3
 800afc4:	480b      	ldr	r0, [pc, #44]	; (800aff4 <tcpip_thread+0x58>)
 800afc6:	f7ff ffb3 	bl	800af30 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800afd0:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <tcpip_thread+0x5c>)
 800afd2:	2291      	movs	r2, #145	; 0x91
 800afd4:	4909      	ldr	r1, [pc, #36]	; (800affc <tcpip_thread+0x60>)
 800afd6:	480a      	ldr	r0, [pc, #40]	; (800b000 <tcpip_thread+0x64>)
 800afd8:	f00b fe06 	bl	8016be8 <iprintf>
      continue;
 800afdc:	e003      	b.n	800afe6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 f80f 	bl	800b004 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800afe6:	e7ea      	b.n	800afbe <tcpip_thread+0x22>
 800afe8:	200099b4 	.word	0x200099b4
 800afec:	200099a8 	.word	0x200099a8
 800aff0:	200099ac 	.word	0x200099ac
 800aff4:	200099b0 	.word	0x200099b0
 800aff8:	08019000 	.word	0x08019000
 800affc:	08019030 	.word	0x08019030
 800b000:	08019050 	.word	0x08019050

0800b004 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d026      	beq.n	800b062 <tcpip_thread_handle_msg+0x5e>
 800b014:	2b02      	cmp	r3, #2
 800b016:	dc2b      	bgt.n	800b070 <tcpip_thread_handle_msg+0x6c>
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <tcpip_thread_handle_msg+0x1e>
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d015      	beq.n	800b04c <tcpip_thread_handle_msg+0x48>
 800b020:	e026      	b.n	800b070 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6850      	ldr	r0, [r2, #4]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	6892      	ldr	r2, [r2, #8]
 800b02e:	4611      	mov	r1, r2
 800b030:	4798      	blx	r3
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 fd21 	bl	800ca84 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b042:	6879      	ldr	r1, [r7, #4]
 800b044:	2009      	movs	r0, #9
 800b046:	f000 fe79 	bl	800bd3c <memp_free>
      break;
 800b04a:	e018      	b.n	800b07e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6892      	ldr	r2, [r2, #8]
 800b054:	4610      	mov	r0, r2
 800b056:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	2008      	movs	r0, #8
 800b05c:	f000 fe6e 	bl	800bd3c <memp_free>
      break;
 800b060:	e00d      	b.n	800b07e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6892      	ldr	r2, [r2, #8]
 800b06a:	4610      	mov	r0, r2
 800b06c:	4798      	blx	r3
      break;
 800b06e:	e006      	b.n	800b07e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <tcpip_thread_handle_msg+0x84>)
 800b072:	22cf      	movs	r2, #207	; 0xcf
 800b074:	4905      	ldr	r1, [pc, #20]	; (800b08c <tcpip_thread_handle_msg+0x88>)
 800b076:	4806      	ldr	r0, [pc, #24]	; (800b090 <tcpip_thread_handle_msg+0x8c>)
 800b078:	f00b fdb6 	bl	8016be8 <iprintf>
      break;
 800b07c:	bf00      	nop
  }
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	08019000 	.word	0x08019000
 800b08c:	08019030 	.word	0x08019030
 800b090:	08019050 	.word	0x08019050

0800b094 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b0a0:	481a      	ldr	r0, [pc, #104]	; (800b10c <tcpip_inpkt+0x78>)
 800b0a2:	f00b fb68 	bl	8016776 <sys_mbox_valid>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d105      	bne.n	800b0b8 <tcpip_inpkt+0x24>
 800b0ac:	4b18      	ldr	r3, [pc, #96]	; (800b110 <tcpip_inpkt+0x7c>)
 800b0ae:	22fc      	movs	r2, #252	; 0xfc
 800b0b0:	4918      	ldr	r1, [pc, #96]	; (800b114 <tcpip_inpkt+0x80>)
 800b0b2:	4819      	ldr	r0, [pc, #100]	; (800b118 <tcpip_inpkt+0x84>)
 800b0b4:	f00b fd98 	bl	8016be8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b0b8:	2009      	movs	r0, #9
 800b0ba:	f000 fdc9 	bl	800bc50 <memp_malloc>
 800b0be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d102      	bne.n	800b0cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ca:	e01a      	b.n	800b102 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b0e4:	6979      	ldr	r1, [r7, #20]
 800b0e6:	4809      	ldr	r0, [pc, #36]	; (800b10c <tcpip_inpkt+0x78>)
 800b0e8:	f00b fad0 	bl	801668c <sys_mbox_trypost>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0f2:	6979      	ldr	r1, [r7, #20]
 800b0f4:	2009      	movs	r0, #9
 800b0f6:	f000 fe21 	bl	800bd3c <memp_free>
    return ERR_MEM;
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fe:	e000      	b.n	800b102 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b100:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	200099b0 	.word	0x200099b0
 800b110:	08019000 	.word	0x08019000
 800b114:	08019078 	.word	0x08019078
 800b118:	08019050 	.word	0x08019050

0800b11c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b12c:	f003 0318 	and.w	r3, r3, #24
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b134:	4a08      	ldr	r2, [pc, #32]	; (800b158 <tcpip_input+0x3c>)
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff ffab 	bl	800b094 <tcpip_inpkt>
 800b13e:	4603      	mov	r3, r0
 800b140:	e005      	b.n	800b14e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b142:	4a06      	ldr	r2, [pc, #24]	; (800b15c <tcpip_input+0x40>)
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff ffa4 	bl	800b094 <tcpip_inpkt>
 800b14c:	4603      	mov	r3, r0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	08016479 	.word	0x08016479
 800b15c:	0801512d 	.word	0x0801512d

0800b160 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b16a:	4819      	ldr	r0, [pc, #100]	; (800b1d0 <tcpip_try_callback+0x70>)
 800b16c:	f00b fb03 	bl	8016776 <sys_mbox_valid>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <tcpip_try_callback+0x24>
 800b176:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <tcpip_try_callback+0x74>)
 800b178:	f240 125d 	movw	r2, #349	; 0x15d
 800b17c:	4916      	ldr	r1, [pc, #88]	; (800b1d8 <tcpip_try_callback+0x78>)
 800b17e:	4817      	ldr	r0, [pc, #92]	; (800b1dc <tcpip_try_callback+0x7c>)
 800b180:	f00b fd32 	bl	8016be8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b184:	2008      	movs	r0, #8
 800b186:	f000 fd63 	bl	800bc50 <memp_malloc>
 800b18a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d102      	bne.n	800b198 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b192:	f04f 33ff 	mov.w	r3, #4294967295
 800b196:	e017      	b.n	800b1c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2201      	movs	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	4808      	ldr	r0, [pc, #32]	; (800b1d0 <tcpip_try_callback+0x70>)
 800b1ae:	f00b fa6d 	bl	801668c <sys_mbox_trypost>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d006      	beq.n	800b1c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b1b8:	68f9      	ldr	r1, [r7, #12]
 800b1ba:	2008      	movs	r0, #8
 800b1bc:	f000 fdbe 	bl	800bd3c <memp_free>
    return ERR_MEM;
 800b1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c4:	e000      	b.n	800b1c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	200099b0 	.word	0x200099b0
 800b1d4:	08019000 	.word	0x08019000
 800b1d8:	08019078 	.word	0x08019078
 800b1dc:	08019050 	.word	0x08019050

0800b1e0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b1ec:	4806      	ldr	r0, [pc, #24]	; (800b208 <tcpip_send_msg_wait_sem+0x28>)
 800b1ee:	f00b fb9b 	bl	8016928 <sys_mutex_lock>
  fn(apimsg);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	68b8      	ldr	r0, [r7, #8]
 800b1f6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b1f8:	4803      	ldr	r0, [pc, #12]	; (800b208 <tcpip_send_msg_wait_sem+0x28>)
 800b1fa:	f00b fba4 	bl	8016946 <sys_mutex_unlock>
  return ERR_OK;
 800b1fe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	200099b4 	.word	0x200099b4

0800b20c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b216:	f000 f871 	bl	800b2fc <lwip_init>

  tcpip_init_done = initfunc;
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <tcpip_init+0x6c>)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b220:	4a16      	ldr	r2, [pc, #88]	; (800b27c <tcpip_init+0x70>)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b226:	2106      	movs	r1, #6
 800b228:	4815      	ldr	r0, [pc, #84]	; (800b280 <tcpip_init+0x74>)
 800b22a:	f00b f9fb 	bl	8016624 <sys_mbox_new>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d006      	beq.n	800b242 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b234:	4b13      	ldr	r3, [pc, #76]	; (800b284 <tcpip_init+0x78>)
 800b236:	f240 2261 	movw	r2, #609	; 0x261
 800b23a:	4913      	ldr	r1, [pc, #76]	; (800b288 <tcpip_init+0x7c>)
 800b23c:	4813      	ldr	r0, [pc, #76]	; (800b28c <tcpip_init+0x80>)
 800b23e:	f00b fcd3 	bl	8016be8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b242:	4813      	ldr	r0, [pc, #76]	; (800b290 <tcpip_init+0x84>)
 800b244:	f00b fb54 	bl	80168f0 <sys_mutex_new>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b24e:	4b0d      	ldr	r3, [pc, #52]	; (800b284 <tcpip_init+0x78>)
 800b250:	f240 2265 	movw	r2, #613	; 0x265
 800b254:	490f      	ldr	r1, [pc, #60]	; (800b294 <tcpip_init+0x88>)
 800b256:	480d      	ldr	r0, [pc, #52]	; (800b28c <tcpip_init+0x80>)
 800b258:	f00b fcc6 	bl	8016be8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b25c:	2300      	movs	r3, #0
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b264:	2200      	movs	r2, #0
 800b266:	490c      	ldr	r1, [pc, #48]	; (800b298 <tcpip_init+0x8c>)
 800b268:	480c      	ldr	r0, [pc, #48]	; (800b29c <tcpip_init+0x90>)
 800b26a:	f00b fb79 	bl	8016960 <sys_thread_new>
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	200099a8 	.word	0x200099a8
 800b27c:	200099ac 	.word	0x200099ac
 800b280:	200099b0 	.word	0x200099b0
 800b284:	08019000 	.word	0x08019000
 800b288:	08019088 	.word	0x08019088
 800b28c:	08019050 	.word	0x08019050
 800b290:	200099b4 	.word	0x200099b4
 800b294:	080190ac 	.word	0x080190ac
 800b298:	0800af9d 	.word	0x0800af9d
 800b29c:	080190d0 	.word	0x080190d0

0800b2a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b21a      	sxth	r2, r3
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	0a1b      	lsrs	r3, r3, #8
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	b21b      	sxth	r3, r3
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	b21b      	sxth	r3, r3
 800b2bc:	b29b      	uxth	r3, r3
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	061a      	lsls	r2, r3, #24
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b2e8:	431a      	orrs	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	0e1b      	lsrs	r3, r3, #24
 800b2ee:	4313      	orrs	r3, r2
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b306:	f00b fae5 	bl	80168d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b30a:	f000 f8d5 	bl	800b4b8 <mem_init>
  memp_init();
 800b30e:	f000 fc31 	bl	800bb74 <memp_init>
  pbuf_init();
  netif_init();
 800b312:	f000 fd3d 	bl	800bd90 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b316:	f008 f815 	bl	8013344 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b31a:	f001 fe5d 	bl	800cfd8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b31e:	f007 ff57 	bl	80131d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
	...

0800b32c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <ptr_to_mem+0x20>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	4413      	add	r3, r2
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	2000a024 	.word	0x2000a024

0800b350 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <mem_to_ptr+0x20>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	b29b      	uxth	r3, r3
}
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	2000a024 	.word	0x2000a024

0800b374 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b37c:	4b45      	ldr	r3, [pc, #276]	; (800b494 <plug_holes+0x120>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	429a      	cmp	r2, r3
 800b384:	d206      	bcs.n	800b394 <plug_holes+0x20>
 800b386:	4b44      	ldr	r3, [pc, #272]	; (800b498 <plug_holes+0x124>)
 800b388:	f240 12df 	movw	r2, #479	; 0x1df
 800b38c:	4943      	ldr	r1, [pc, #268]	; (800b49c <plug_holes+0x128>)
 800b38e:	4844      	ldr	r0, [pc, #272]	; (800b4a0 <plug_holes+0x12c>)
 800b390:	f00b fc2a 	bl	8016be8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b394:	4b43      	ldr	r3, [pc, #268]	; (800b4a4 <plug_holes+0x130>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d306      	bcc.n	800b3ac <plug_holes+0x38>
 800b39e:	4b3e      	ldr	r3, [pc, #248]	; (800b498 <plug_holes+0x124>)
 800b3a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b3a4:	4940      	ldr	r1, [pc, #256]	; (800b4a8 <plug_holes+0x134>)
 800b3a6:	483e      	ldr	r0, [pc, #248]	; (800b4a0 <plug_holes+0x12c>)
 800b3a8:	f00b fc1e 	bl	8016be8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	791b      	ldrb	r3, [r3, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <plug_holes+0x4e>
 800b3b4:	4b38      	ldr	r3, [pc, #224]	; (800b498 <plug_holes+0x124>)
 800b3b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b3ba:	493c      	ldr	r1, [pc, #240]	; (800b4ac <plug_holes+0x138>)
 800b3bc:	4838      	ldr	r0, [pc, #224]	; (800b4a0 <plug_holes+0x12c>)
 800b3be:	f00b fc13 	bl	8016be8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3ca:	d906      	bls.n	800b3da <plug_holes+0x66>
 800b3cc:	4b32      	ldr	r3, [pc, #200]	; (800b498 <plug_holes+0x124>)
 800b3ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b3d2:	4937      	ldr	r1, [pc, #220]	; (800b4b0 <plug_holes+0x13c>)
 800b3d4:	4832      	ldr	r0, [pc, #200]	; (800b4a0 <plug_holes+0x12c>)
 800b3d6:	f00b fc07 	bl	8016be8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff ffa4 	bl	800b32c <ptr_to_mem>
 800b3e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d024      	beq.n	800b438 <plug_holes+0xc4>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	791b      	ldrb	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d120      	bne.n	800b438 <plug_holes+0xc4>
 800b3f6:	4b2b      	ldr	r3, [pc, #172]	; (800b4a4 <plug_holes+0x130>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d01b      	beq.n	800b438 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b400:	4b2c      	ldr	r3, [pc, #176]	; (800b4b4 <plug_holes+0x140>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	429a      	cmp	r2, r3
 800b408:	d102      	bne.n	800b410 <plug_holes+0x9c>
      lfree = mem;
 800b40a:	4a2a      	ldr	r2, [pc, #168]	; (800b4b4 <plug_holes+0x140>)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	881a      	ldrh	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b420:	d00a      	beq.n	800b438 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff ff80 	bl	800b32c <ptr_to_mem>
 800b42c:	4604      	mov	r4, r0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff ff8e 	bl	800b350 <mem_to_ptr>
 800b434:	4603      	mov	r3, r0
 800b436:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	885b      	ldrh	r3, [r3, #2]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff ff75 	bl	800b32c <ptr_to_mem>
 800b442:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d01f      	beq.n	800b48c <plug_holes+0x118>
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	791b      	ldrb	r3, [r3, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d11b      	bne.n	800b48c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b454:	4b17      	ldr	r3, [pc, #92]	; (800b4b4 <plug_holes+0x140>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d102      	bne.n	800b464 <plug_holes+0xf0>
      lfree = pmem;
 800b45e:	4a15      	ldr	r2, [pc, #84]	; (800b4b4 <plug_holes+0x140>)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	881a      	ldrh	r2, [r3, #0]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b474:	d00a      	beq.n	800b48c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff ff56 	bl	800b32c <ptr_to_mem>
 800b480:	4604      	mov	r4, r0
 800b482:	68b8      	ldr	r0, [r7, #8]
 800b484:	f7ff ff64 	bl	800b350 <mem_to_ptr>
 800b488:	4603      	mov	r3, r0
 800b48a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b48c:	bf00      	nop
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	bd90      	pop	{r4, r7, pc}
 800b494:	2000a024 	.word	0x2000a024
 800b498:	080190e0 	.word	0x080190e0
 800b49c:	08019110 	.word	0x08019110
 800b4a0:	08019128 	.word	0x08019128
 800b4a4:	2000a028 	.word	0x2000a028
 800b4a8:	08019150 	.word	0x08019150
 800b4ac:	0801916c 	.word	0x0801916c
 800b4b0:	08019188 	.word	0x08019188
 800b4b4:	2000a030 	.word	0x2000a030

0800b4b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b4be:	4b1f      	ldr	r3, [pc, #124]	; (800b53c <mem_init+0x84>)
 800b4c0:	3303      	adds	r3, #3
 800b4c2:	f023 0303 	bic.w	r3, r3, #3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	; (800b540 <mem_init+0x88>)
 800b4ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b4cc:	4b1c      	ldr	r3, [pc, #112]	; (800b540 <mem_init+0x88>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b4d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b4e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b4ea:	f7ff ff1f 	bl	800b32c <ptr_to_mem>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4a14      	ldr	r2, [pc, #80]	; (800b544 <mem_init+0x8c>)
 800b4f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <mem_init+0x8c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b4fc:	4b11      	ldr	r3, [pc, #68]	; (800b544 <mem_init+0x8c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b504:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b506:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <mem_init+0x8c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b50e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b510:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <mem_init+0x88>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <mem_init+0x90>)
 800b516:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b518:	480c      	ldr	r0, [pc, #48]	; (800b54c <mem_init+0x94>)
 800b51a:	f00b f9e9 	bl	80168f0 <sys_mutex_new>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d006      	beq.n	800b532 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b524:	4b0a      	ldr	r3, [pc, #40]	; (800b550 <mem_init+0x98>)
 800b526:	f240 221f 	movw	r2, #543	; 0x21f
 800b52a:	490a      	ldr	r1, [pc, #40]	; (800b554 <mem_init+0x9c>)
 800b52c:	480a      	ldr	r0, [pc, #40]	; (800b558 <mem_init+0xa0>)
 800b52e:	f00b fb5b 	bl	8016be8 <iprintf>
  }
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200099d0 	.word	0x200099d0
 800b540:	2000a024 	.word	0x2000a024
 800b544:	2000a028 	.word	0x2000a028
 800b548:	2000a030 	.word	0x2000a030
 800b54c:	2000a02c 	.word	0x2000a02c
 800b550:	080190e0 	.word	0x080190e0
 800b554:	080191b4 	.word	0x080191b4
 800b558:	08019128 	.word	0x08019128

0800b55c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff fef3 	bl	800b350 <mem_to_ptr>
 800b56a:	4603      	mov	r3, r0
 800b56c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff feda 	bl	800b32c <ptr_to_mem>
 800b578:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	885b      	ldrh	r3, [r3, #2]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fed4 	bl	800b32c <ptr_to_mem>
 800b584:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b58e:	d818      	bhi.n	800b5c2 <mem_link_valid+0x66>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	885b      	ldrh	r3, [r3, #2]
 800b594:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b598:	d813      	bhi.n	800b5c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b59e:	8afa      	ldrh	r2, [r7, #22]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d004      	beq.n	800b5ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	8afa      	ldrh	r2, [r7, #22]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d109      	bne.n	800b5c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5ae:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <mem_link_valid+0x74>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d006      	beq.n	800b5c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	885b      	ldrh	r3, [r3, #2]
 800b5bc:	8afa      	ldrh	r2, [r7, #22]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d001      	beq.n	800b5c6 <mem_link_valid+0x6a>
    return 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <mem_link_valid+0x6c>
  }
  return 1;
 800b5c6:	2301      	movs	r3, #1
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2000a028 	.word	0x2000a028

0800b5d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d070      	beq.n	800b6c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00d      	beq.n	800b608 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b5ec:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <mem_free+0xf8>)
 800b5ee:	f240 2273 	movw	r2, #627	; 0x273
 800b5f2:	4937      	ldr	r1, [pc, #220]	; (800b6d0 <mem_free+0xfc>)
 800b5f4:	4837      	ldr	r0, [pc, #220]	; (800b6d4 <mem_free+0x100>)
 800b5f6:	f00b faf7 	bl	8016be8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5fa:	f00b f9d7 	bl	80169ac <sys_arch_protect>
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f00b f9e1 	bl	80169c8 <sys_arch_unprotect>
    return;
 800b606:	e05e      	b.n	800b6c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3b08      	subs	r3, #8
 800b60c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b60e:	4b32      	ldr	r3, [pc, #200]	; (800b6d8 <mem_free+0x104>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	69fa      	ldr	r2, [r7, #28]
 800b614:	429a      	cmp	r2, r3
 800b616:	d306      	bcc.n	800b626 <mem_free+0x52>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f103 020c 	add.w	r2, r3, #12
 800b61e:	4b2f      	ldr	r3, [pc, #188]	; (800b6dc <mem_free+0x108>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	429a      	cmp	r2, r3
 800b624:	d90d      	bls.n	800b642 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b626:	4b29      	ldr	r3, [pc, #164]	; (800b6cc <mem_free+0xf8>)
 800b628:	f240 227f 	movw	r2, #639	; 0x27f
 800b62c:	492c      	ldr	r1, [pc, #176]	; (800b6e0 <mem_free+0x10c>)
 800b62e:	4829      	ldr	r0, [pc, #164]	; (800b6d4 <mem_free+0x100>)
 800b630:	f00b fada 	bl	8016be8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b634:	f00b f9ba 	bl	80169ac <sys_arch_protect>
 800b638:	6138      	str	r0, [r7, #16]
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f00b f9c4 	bl	80169c8 <sys_arch_unprotect>
    return;
 800b640:	e041      	b.n	800b6c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b642:	4828      	ldr	r0, [pc, #160]	; (800b6e4 <mem_free+0x110>)
 800b644:	f00b f970 	bl	8016928 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	791b      	ldrb	r3, [r3, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d110      	bne.n	800b672 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b650:	4b1e      	ldr	r3, [pc, #120]	; (800b6cc <mem_free+0xf8>)
 800b652:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b656:	4924      	ldr	r1, [pc, #144]	; (800b6e8 <mem_free+0x114>)
 800b658:	481e      	ldr	r0, [pc, #120]	; (800b6d4 <mem_free+0x100>)
 800b65a:	f00b fac5 	bl	8016be8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b65e:	4821      	ldr	r0, [pc, #132]	; (800b6e4 <mem_free+0x110>)
 800b660:	f00b f971 	bl	8016946 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b664:	f00b f9a2 	bl	80169ac <sys_arch_protect>
 800b668:	6178      	str	r0, [r7, #20]
 800b66a:	6978      	ldr	r0, [r7, #20]
 800b66c:	f00b f9ac 	bl	80169c8 <sys_arch_unprotect>
    return;
 800b670:	e029      	b.n	800b6c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b672:	69f8      	ldr	r0, [r7, #28]
 800b674:	f7ff ff72 	bl	800b55c <mem_link_valid>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d110      	bne.n	800b6a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b67e:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <mem_free+0xf8>)
 800b680:	f240 2295 	movw	r2, #661	; 0x295
 800b684:	4919      	ldr	r1, [pc, #100]	; (800b6ec <mem_free+0x118>)
 800b686:	4813      	ldr	r0, [pc, #76]	; (800b6d4 <mem_free+0x100>)
 800b688:	f00b faae 	bl	8016be8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b68c:	4815      	ldr	r0, [pc, #84]	; (800b6e4 <mem_free+0x110>)
 800b68e:	f00b f95a 	bl	8016946 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b692:	f00b f98b 	bl	80169ac <sys_arch_protect>
 800b696:	61b8      	str	r0, [r7, #24]
 800b698:	69b8      	ldr	r0, [r7, #24]
 800b69a:	f00b f995 	bl	80169c8 <sys_arch_unprotect>
    return;
 800b69e:	e012      	b.n	800b6c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b6a6:	4b12      	ldr	r3, [pc, #72]	; (800b6f0 <mem_free+0x11c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d202      	bcs.n	800b6b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b6b0:	4a0f      	ldr	r2, [pc, #60]	; (800b6f0 <mem_free+0x11c>)
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b6b6:	69f8      	ldr	r0, [r7, #28]
 800b6b8:	f7ff fe5c 	bl	800b374 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b6bc:	4809      	ldr	r0, [pc, #36]	; (800b6e4 <mem_free+0x110>)
 800b6be:	f00b f942 	bl	8016946 <sys_mutex_unlock>
 800b6c2:	e000      	b.n	800b6c6 <mem_free+0xf2>
    return;
 800b6c4:	bf00      	nop
}
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	080190e0 	.word	0x080190e0
 800b6d0:	080191d0 	.word	0x080191d0
 800b6d4:	08019128 	.word	0x08019128
 800b6d8:	2000a024 	.word	0x2000a024
 800b6dc:	2000a028 	.word	0x2000a028
 800b6e0:	080191f4 	.word	0x080191f4
 800b6e4:	2000a02c 	.word	0x2000a02c
 800b6e8:	08019210 	.word	0x08019210
 800b6ec:	08019238 	.word	0x08019238
 800b6f0:	2000a030 	.word	0x2000a030

0800b6f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b700:	887b      	ldrh	r3, [r7, #2]
 800b702:	3303      	adds	r3, #3
 800b704:	b29b      	uxth	r3, r3
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b70c:	8bfb      	ldrh	r3, [r7, #30]
 800b70e:	2b0b      	cmp	r3, #11
 800b710:	d801      	bhi.n	800b716 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b712:	230c      	movs	r3, #12
 800b714:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b716:	8bfb      	ldrh	r3, [r7, #30]
 800b718:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b71c:	d803      	bhi.n	800b726 <mem_trim+0x32>
 800b71e:	8bfa      	ldrh	r2, [r7, #30]
 800b720:	887b      	ldrh	r3, [r7, #2]
 800b722:	429a      	cmp	r2, r3
 800b724:	d201      	bcs.n	800b72a <mem_trim+0x36>
    return NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	e0d8      	b.n	800b8dc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b72a:	4b6e      	ldr	r3, [pc, #440]	; (800b8e4 <mem_trim+0x1f0>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d304      	bcc.n	800b73e <mem_trim+0x4a>
 800b734:	4b6c      	ldr	r3, [pc, #432]	; (800b8e8 <mem_trim+0x1f4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d306      	bcc.n	800b74c <mem_trim+0x58>
 800b73e:	4b6b      	ldr	r3, [pc, #428]	; (800b8ec <mem_trim+0x1f8>)
 800b740:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b744:	496a      	ldr	r1, [pc, #424]	; (800b8f0 <mem_trim+0x1fc>)
 800b746:	486b      	ldr	r0, [pc, #428]	; (800b8f4 <mem_trim+0x200>)
 800b748:	f00b fa4e 	bl	8016be8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b74c:	4b65      	ldr	r3, [pc, #404]	; (800b8e4 <mem_trim+0x1f0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	429a      	cmp	r2, r3
 800b754:	d304      	bcc.n	800b760 <mem_trim+0x6c>
 800b756:	4b64      	ldr	r3, [pc, #400]	; (800b8e8 <mem_trim+0x1f4>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d307      	bcc.n	800b770 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b760:	f00b f924 	bl	80169ac <sys_arch_protect>
 800b764:	60b8      	str	r0, [r7, #8]
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	f00b f92e 	bl	80169c8 <sys_arch_unprotect>
    return rmem;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	e0b5      	b.n	800b8dc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3b08      	subs	r3, #8
 800b774:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b776:	69b8      	ldr	r0, [r7, #24]
 800b778:	f7ff fdea 	bl	800b350 <mem_to_ptr>
 800b77c:	4603      	mov	r3, r0
 800b77e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	881a      	ldrh	r2, [r3, #0]
 800b784:	8afb      	ldrh	r3, [r7, #22]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	b29b      	uxth	r3, r3
 800b78a:	3b08      	subs	r3, #8
 800b78c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b78e:	8bfa      	ldrh	r2, [r7, #30]
 800b790:	8abb      	ldrh	r3, [r7, #20]
 800b792:	429a      	cmp	r2, r3
 800b794:	d906      	bls.n	800b7a4 <mem_trim+0xb0>
 800b796:	4b55      	ldr	r3, [pc, #340]	; (800b8ec <mem_trim+0x1f8>)
 800b798:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b79c:	4956      	ldr	r1, [pc, #344]	; (800b8f8 <mem_trim+0x204>)
 800b79e:	4855      	ldr	r0, [pc, #340]	; (800b8f4 <mem_trim+0x200>)
 800b7a0:	f00b fa22 	bl	8016be8 <iprintf>
  if (newsize > size) {
 800b7a4:	8bfa      	ldrh	r2, [r7, #30]
 800b7a6:	8abb      	ldrh	r3, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d901      	bls.n	800b7b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e095      	b.n	800b8dc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b7b0:	8bfa      	ldrh	r2, [r7, #30]
 800b7b2:	8abb      	ldrh	r3, [r7, #20]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d101      	bne.n	800b7bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	e08f      	b.n	800b8dc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b7bc:	484f      	ldr	r0, [pc, #316]	; (800b8fc <mem_trim+0x208>)
 800b7be:	f00b f8b3 	bl	8016928 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fdb0 	bl	800b32c <ptr_to_mem>
 800b7cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d13f      	bne.n	800b856 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7de:	d106      	bne.n	800b7ee <mem_trim+0xfa>
 800b7e0:	4b42      	ldr	r3, [pc, #264]	; (800b8ec <mem_trim+0x1f8>)
 800b7e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b7e6:	4946      	ldr	r1, [pc, #280]	; (800b900 <mem_trim+0x20c>)
 800b7e8:	4842      	ldr	r0, [pc, #264]	; (800b8f4 <mem_trim+0x200>)
 800b7ea:	f00b f9fd 	bl	8016be8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b7f4:	8afa      	ldrh	r2, [r7, #22]
 800b7f6:	8bfb      	ldrh	r3, [r7, #30]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b800:	4b40      	ldr	r3, [pc, #256]	; (800b904 <mem_trim+0x210>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	429a      	cmp	r2, r3
 800b808:	d106      	bne.n	800b818 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b80a:	89fb      	ldrh	r3, [r7, #14]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fd8d 	bl	800b32c <ptr_to_mem>
 800b812:	4603      	mov	r3, r0
 800b814:	4a3b      	ldr	r2, [pc, #236]	; (800b904 <mem_trim+0x210>)
 800b816:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b818:	89fb      	ldrh	r3, [r7, #14]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff fd86 	bl	800b32c <ptr_to_mem>
 800b820:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2200      	movs	r2, #0
 800b826:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	89ba      	ldrh	r2, [r7, #12]
 800b82c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	8afa      	ldrh	r2, [r7, #22]
 800b832:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	89fa      	ldrh	r2, [r7, #14]
 800b838:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	881b      	ldrh	r3, [r3, #0]
 800b83e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b842:	d047      	beq.n	800b8d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff fd6f 	bl	800b32c <ptr_to_mem>
 800b84e:	4602      	mov	r2, r0
 800b850:	89fb      	ldrh	r3, [r7, #14]
 800b852:	8053      	strh	r3, [r2, #2]
 800b854:	e03e      	b.n	800b8d4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b856:	8bfb      	ldrh	r3, [r7, #30]
 800b858:	f103 0214 	add.w	r2, r3, #20
 800b85c:	8abb      	ldrh	r3, [r7, #20]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d838      	bhi.n	800b8d4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b862:	8afa      	ldrh	r2, [r7, #22]
 800b864:	8bfb      	ldrh	r3, [r7, #30]
 800b866:	4413      	add	r3, r2
 800b868:	b29b      	uxth	r3, r3
 800b86a:	3308      	adds	r3, #8
 800b86c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b876:	d106      	bne.n	800b886 <mem_trim+0x192>
 800b878:	4b1c      	ldr	r3, [pc, #112]	; (800b8ec <mem_trim+0x1f8>)
 800b87a:	f240 3216 	movw	r2, #790	; 0x316
 800b87e:	4920      	ldr	r1, [pc, #128]	; (800b900 <mem_trim+0x20c>)
 800b880:	481c      	ldr	r0, [pc, #112]	; (800b8f4 <mem_trim+0x200>)
 800b882:	f00b f9b1 	bl	8016be8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b886:	89fb      	ldrh	r3, [r7, #14]
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fd4f 	bl	800b32c <ptr_to_mem>
 800b88e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b890:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <mem_trim+0x210>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d202      	bcs.n	800b8a0 <mem_trim+0x1ac>
      lfree = mem2;
 800b89a:	4a1a      	ldr	r2, [pc, #104]	; (800b904 <mem_trim+0x210>)
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	881a      	ldrh	r2, [r3, #0]
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	8afa      	ldrh	r2, [r7, #22]
 800b8b2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	89fa      	ldrh	r2, [r7, #14]
 800b8b8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8c2:	d007      	beq.n	800b8d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff fd2f 	bl	800b32c <ptr_to_mem>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	89fb      	ldrh	r3, [r7, #14]
 800b8d2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b8d4:	4809      	ldr	r0, [pc, #36]	; (800b8fc <mem_trim+0x208>)
 800b8d6:	f00b f836 	bl	8016946 <sys_mutex_unlock>
  return rmem;
 800b8da:	687b      	ldr	r3, [r7, #4]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	2000a024 	.word	0x2000a024
 800b8e8:	2000a028 	.word	0x2000a028
 800b8ec:	080190e0 	.word	0x080190e0
 800b8f0:	0801926c 	.word	0x0801926c
 800b8f4:	08019128 	.word	0x08019128
 800b8f8:	08019284 	.word	0x08019284
 800b8fc:	2000a02c 	.word	0x2000a02c
 800b900:	080192a4 	.word	0x080192a4
 800b904:	2000a030 	.word	0x2000a030

0800b908 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b912:	88fb      	ldrh	r3, [r7, #6]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <mem_malloc+0x14>
    return NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	e0e2      	b.n	800bae2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b91c:	88fb      	ldrh	r3, [r7, #6]
 800b91e:	3303      	adds	r3, #3
 800b920:	b29b      	uxth	r3, r3
 800b922:	f023 0303 	bic.w	r3, r3, #3
 800b926:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b928:	8bbb      	ldrh	r3, [r7, #28]
 800b92a:	2b0b      	cmp	r3, #11
 800b92c:	d801      	bhi.n	800b932 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b92e:	230c      	movs	r3, #12
 800b930:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b932:	8bbb      	ldrh	r3, [r7, #28]
 800b934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b938:	d803      	bhi.n	800b942 <mem_malloc+0x3a>
 800b93a:	8bba      	ldrh	r2, [r7, #28]
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d201      	bcs.n	800b946 <mem_malloc+0x3e>
    return NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	e0cd      	b.n	800bae2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b946:	4869      	ldr	r0, [pc, #420]	; (800baec <mem_malloc+0x1e4>)
 800b948:	f00a ffee 	bl	8016928 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b94c:	4b68      	ldr	r3, [pc, #416]	; (800baf0 <mem_malloc+0x1e8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fcfd 	bl	800b350 <mem_to_ptr>
 800b956:	4603      	mov	r3, r0
 800b958:	83fb      	strh	r3, [r7, #30]
 800b95a:	e0b7      	b.n	800bacc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b95c:	8bfb      	ldrh	r3, [r7, #30]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fce4 	bl	800b32c <ptr_to_mem>
 800b964:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f040 80a7 	bne.w	800babe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	8bfb      	ldrh	r3, [r7, #30]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	f1a3 0208 	sub.w	r2, r3, #8
 800b97e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b980:	429a      	cmp	r2, r3
 800b982:	f0c0 809c 	bcc.w	800babe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	8bfb      	ldrh	r3, [r7, #30]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	f1a3 0208 	sub.w	r2, r3, #8
 800b994:	8bbb      	ldrh	r3, [r7, #28]
 800b996:	3314      	adds	r3, #20
 800b998:	429a      	cmp	r2, r3
 800b99a:	d333      	bcc.n	800ba04 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b99c:	8bfa      	ldrh	r2, [r7, #30]
 800b99e:	8bbb      	ldrh	r3, [r7, #28]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b9a8:	8a7b      	ldrh	r3, [r7, #18]
 800b9aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9ae:	d106      	bne.n	800b9be <mem_malloc+0xb6>
 800b9b0:	4b50      	ldr	r3, [pc, #320]	; (800baf4 <mem_malloc+0x1ec>)
 800b9b2:	f240 3287 	movw	r2, #903	; 0x387
 800b9b6:	4950      	ldr	r1, [pc, #320]	; (800baf8 <mem_malloc+0x1f0>)
 800b9b8:	4850      	ldr	r0, [pc, #320]	; (800bafc <mem_malloc+0x1f4>)
 800b9ba:	f00b f915 	bl	8016be8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b9be:	8a7b      	ldrh	r3, [r7, #18]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff fcb3 	bl	800b32c <ptr_to_mem>
 800b9c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	881a      	ldrh	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8bfa      	ldrh	r2, [r7, #30]
 800b9da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	8a7a      	ldrh	r2, [r7, #18]
 800b9e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9f0:	d00b      	beq.n	800ba0a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fc98 	bl	800b32c <ptr_to_mem>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	8a7b      	ldrh	r3, [r7, #18]
 800ba00:	8053      	strh	r3, [r2, #2]
 800ba02:	e002      	b.n	800ba0a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2201      	movs	r2, #1
 800ba08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ba0a:	4b39      	ldr	r3, [pc, #228]	; (800baf0 <mem_malloc+0x1e8>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d127      	bne.n	800ba64 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ba14:	4b36      	ldr	r3, [pc, #216]	; (800baf0 <mem_malloc+0x1e8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ba1a:	e005      	b.n	800ba28 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff fc83 	bl	800b32c <ptr_to_mem>
 800ba26:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	791b      	ldrb	r3, [r3, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <mem_malloc+0x132>
 800ba30:	4b33      	ldr	r3, [pc, #204]	; (800bb00 <mem_malloc+0x1f8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d1f0      	bne.n	800ba1c <mem_malloc+0x114>
          }
          lfree = cur;
 800ba3a:	4a2d      	ldr	r2, [pc, #180]	; (800baf0 <mem_malloc+0x1e8>)
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ba40:	4b2b      	ldr	r3, [pc, #172]	; (800baf0 <mem_malloc+0x1e8>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	4b2e      	ldr	r3, [pc, #184]	; (800bb00 <mem_malloc+0x1f8>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d00b      	beq.n	800ba64 <mem_malloc+0x15c>
 800ba4c:	4b28      	ldr	r3, [pc, #160]	; (800baf0 <mem_malloc+0x1e8>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	791b      	ldrb	r3, [r3, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d006      	beq.n	800ba64 <mem_malloc+0x15c>
 800ba56:	4b27      	ldr	r3, [pc, #156]	; (800baf4 <mem_malloc+0x1ec>)
 800ba58:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ba5c:	4929      	ldr	r1, [pc, #164]	; (800bb04 <mem_malloc+0x1fc>)
 800ba5e:	4827      	ldr	r0, [pc, #156]	; (800bafc <mem_malloc+0x1f4>)
 800ba60:	f00b f8c2 	bl	8016be8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ba64:	4821      	ldr	r0, [pc, #132]	; (800baec <mem_malloc+0x1e4>)
 800ba66:	f00a ff6e 	bl	8016946 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ba6a:	8bba      	ldrh	r2, [r7, #28]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	4413      	add	r3, r2
 800ba70:	3308      	adds	r3, #8
 800ba72:	4a23      	ldr	r2, [pc, #140]	; (800bb00 <mem_malloc+0x1f8>)
 800ba74:	6812      	ldr	r2, [r2, #0]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d906      	bls.n	800ba88 <mem_malloc+0x180>
 800ba7a:	4b1e      	ldr	r3, [pc, #120]	; (800baf4 <mem_malloc+0x1ec>)
 800ba7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ba80:	4921      	ldr	r1, [pc, #132]	; (800bb08 <mem_malloc+0x200>)
 800ba82:	481e      	ldr	r0, [pc, #120]	; (800bafc <mem_malloc+0x1f4>)
 800ba84:	f00b f8b0 	bl	8016be8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f003 0303 	and.w	r3, r3, #3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d006      	beq.n	800baa0 <mem_malloc+0x198>
 800ba92:	4b18      	ldr	r3, [pc, #96]	; (800baf4 <mem_malloc+0x1ec>)
 800ba94:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ba98:	491c      	ldr	r1, [pc, #112]	; (800bb0c <mem_malloc+0x204>)
 800ba9a:	4818      	ldr	r0, [pc, #96]	; (800bafc <mem_malloc+0x1f4>)
 800ba9c:	f00b f8a4 	bl	8016be8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d006      	beq.n	800bab8 <mem_malloc+0x1b0>
 800baaa:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <mem_malloc+0x1ec>)
 800baac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bab0:	4917      	ldr	r1, [pc, #92]	; (800bb10 <mem_malloc+0x208>)
 800bab2:	4812      	ldr	r0, [pc, #72]	; (800bafc <mem_malloc+0x1f4>)
 800bab4:	f00b f898 	bl	8016be8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	3308      	adds	r3, #8
 800babc:	e011      	b.n	800bae2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800babe:	8bfb      	ldrh	r3, [r7, #30]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff fc33 	bl	800b32c <ptr_to_mem>
 800bac6:	4603      	mov	r3, r0
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bacc:	8bfa      	ldrh	r2, [r7, #30]
 800bace:	8bbb      	ldrh	r3, [r7, #28]
 800bad0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bad4:	429a      	cmp	r2, r3
 800bad6:	f4ff af41 	bcc.w	800b95c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bada:	4804      	ldr	r0, [pc, #16]	; (800baec <mem_malloc+0x1e4>)
 800badc:	f00a ff33 	bl	8016946 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	2000a02c 	.word	0x2000a02c
 800baf0:	2000a030 	.word	0x2000a030
 800baf4:	080190e0 	.word	0x080190e0
 800baf8:	080192a4 	.word	0x080192a4
 800bafc:	08019128 	.word	0x08019128
 800bb00:	2000a028 	.word	0x2000a028
 800bb04:	080192b8 	.word	0x080192b8
 800bb08:	080192d4 	.word	0x080192d4
 800bb0c:	08019304 	.word	0x08019304
 800bb10:	08019334 	.word	0x08019334

0800bb14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	3303      	adds	r3, #3
 800bb2a:	f023 0303 	bic.w	r3, r3, #3
 800bb2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e011      	b.n	800bb5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	881b      	ldrh	r3, [r3, #0]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	4413      	add	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3301      	adds	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	885b      	ldrh	r3, [r3, #2]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4293      	cmp	r3, r2
 800bb64:	dbe7      	blt.n	800bb36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	80fb      	strh	r3, [r7, #6]
 800bb7e:	e009      	b.n	800bb94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	4a08      	ldr	r2, [pc, #32]	; (800bba4 <memp_init+0x30>)
 800bb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff ffc3 	bl	800bb14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb8e:	88fb      	ldrh	r3, [r7, #6]
 800bb90:	3301      	adds	r3, #1
 800bb92:	80fb      	strh	r3, [r7, #6]
 800bb94:	88fb      	ldrh	r3, [r7, #6]
 800bb96:	2b0c      	cmp	r3, #12
 800bb98:	d9f2      	bls.n	800bb80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bb9a:	bf00      	nop
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	0801bc00 	.word	0x0801bc00

0800bba8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bbb0:	f00a fefc 	bl	80169ac <sys_arch_protect>
 800bbb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d015      	beq.n	800bbf0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f003 0303 	and.w	r3, r3, #3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <do_memp_malloc_pool+0x3e>
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <do_memp_malloc_pool+0x58>)
 800bbda:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bbde:	4909      	ldr	r1, [pc, #36]	; (800bc04 <do_memp_malloc_pool+0x5c>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <do_memp_malloc_pool+0x60>)
 800bbe2:	f00b f801 	bl	8016be8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f00a feee 	bl	80169c8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	e003      	b.n	800bbf8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f00a fee9 	bl	80169c8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	08019358 	.word	0x08019358
 800bc04:	08019388 	.word	0x08019388
 800bc08:	080193ac 	.word	0x080193ac

0800bc0c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <memp_malloc_pool+0x1c>
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <memp_malloc_pool+0x38>)
 800bc1c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bc20:	4909      	ldr	r1, [pc, #36]	; (800bc48 <memp_malloc_pool+0x3c>)
 800bc22:	480a      	ldr	r0, [pc, #40]	; (800bc4c <memp_malloc_pool+0x40>)
 800bc24:	f00a ffe0 	bl	8016be8 <iprintf>
  if (desc == NULL) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <memp_malloc_pool+0x26>
    return NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e003      	b.n	800bc3a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff ffb8 	bl	800bba8 <do_memp_malloc_pool>
 800bc38:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08019358 	.word	0x08019358
 800bc48:	080193d4 	.word	0x080193d4
 800bc4c:	080193ac 	.word	0x080193ac

0800bc50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	2b0c      	cmp	r3, #12
 800bc5e:	d908      	bls.n	800bc72 <memp_malloc+0x22>
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <memp_malloc+0x3c>)
 800bc62:	f240 1257 	movw	r2, #343	; 0x157
 800bc66:	490a      	ldr	r1, [pc, #40]	; (800bc90 <memp_malloc+0x40>)
 800bc68:	480a      	ldr	r0, [pc, #40]	; (800bc94 <memp_malloc+0x44>)
 800bc6a:	f00a ffbd 	bl	8016be8 <iprintf>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e008      	b.n	800bc84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	4a08      	ldr	r2, [pc, #32]	; (800bc98 <memp_malloc+0x48>)
 800bc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff ff94 	bl	800bba8 <do_memp_malloc_pool>
 800bc80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bc82:	68fb      	ldr	r3, [r7, #12]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	08019358 	.word	0x08019358
 800bc90:	080193e8 	.word	0x080193e8
 800bc94:	080193ac 	.word	0x080193ac
 800bc98:	0801bc00 	.word	0x0801bc00

0800bc9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d006      	beq.n	800bcbe <do_memp_free_pool+0x22>
 800bcb0:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <do_memp_free_pool+0x4c>)
 800bcb2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bcb6:	490d      	ldr	r1, [pc, #52]	; (800bcec <do_memp_free_pool+0x50>)
 800bcb8:	480d      	ldr	r0, [pc, #52]	; (800bcf0 <do_memp_free_pool+0x54>)
 800bcba:	f00a ff95 	bl	8016be8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bcc2:	f00a fe73 	bl	80169ac <sys_arch_protect>
 800bcc6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bcda:	68b8      	ldr	r0, [r7, #8]
 800bcdc:	f00a fe74 	bl	80169c8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	08019358 	.word	0x08019358
 800bcec:	08019408 	.word	0x08019408
 800bcf0:	080193ac 	.word	0x080193ac

0800bcf4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <memp_free_pool+0x1e>
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <memp_free_pool+0x3c>)
 800bd06:	f240 1295 	movw	r2, #405	; 0x195
 800bd0a:	490a      	ldr	r1, [pc, #40]	; (800bd34 <memp_free_pool+0x40>)
 800bd0c:	480a      	ldr	r0, [pc, #40]	; (800bd38 <memp_free_pool+0x44>)
 800bd0e:	f00a ff6b 	bl	8016be8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d007      	beq.n	800bd28 <memp_free_pool+0x34>
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d004      	beq.n	800bd28 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff ffbb 	bl	800bc9c <do_memp_free_pool>
 800bd26:	e000      	b.n	800bd2a <memp_free_pool+0x36>
    return;
 800bd28:	bf00      	nop
}
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	08019358 	.word	0x08019358
 800bd34:	080193d4 	.word	0x080193d4
 800bd38:	080193ac 	.word	0x080193ac

0800bd3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	6039      	str	r1, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	2b0c      	cmp	r3, #12
 800bd4c:	d907      	bls.n	800bd5e <memp_free+0x22>
 800bd4e:	4b0c      	ldr	r3, [pc, #48]	; (800bd80 <memp_free+0x44>)
 800bd50:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bd54:	490b      	ldr	r1, [pc, #44]	; (800bd84 <memp_free+0x48>)
 800bd56:	480c      	ldr	r0, [pc, #48]	; (800bd88 <memp_free+0x4c>)
 800bd58:	f00a ff46 	bl	8016be8 <iprintf>
 800bd5c:	e00c      	b.n	800bd78 <memp_free+0x3c>

  if (mem == NULL) {
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d008      	beq.n	800bd76 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	4a09      	ldr	r2, [pc, #36]	; (800bd8c <memp_free+0x50>)
 800bd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff ff94 	bl	800bc9c <do_memp_free_pool>
 800bd74:	e000      	b.n	800bd78 <memp_free+0x3c>
    return;
 800bd76:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	08019358 	.word	0x08019358
 800bd84:	08019428 	.word	0x08019428
 800bd88:	080193ac 	.word	0x080193ac
 800bd8c:	0801bc00 	.word	0x0801bc00

0800bd90 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d108      	bne.n	800bdc6 <netif_add+0x26>
 800bdb4:	4b57      	ldr	r3, [pc, #348]	; (800bf14 <netif_add+0x174>)
 800bdb6:	f240 1227 	movw	r2, #295	; 0x127
 800bdba:	4957      	ldr	r1, [pc, #348]	; (800bf18 <netif_add+0x178>)
 800bdbc:	4857      	ldr	r0, [pc, #348]	; (800bf1c <netif_add+0x17c>)
 800bdbe:	f00a ff13 	bl	8016be8 <iprintf>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e0a2      	b.n	800bf0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d108      	bne.n	800bdde <netif_add+0x3e>
 800bdcc:	4b51      	ldr	r3, [pc, #324]	; (800bf14 <netif_add+0x174>)
 800bdce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bdd2:	4953      	ldr	r1, [pc, #332]	; (800bf20 <netif_add+0x180>)
 800bdd4:	4851      	ldr	r0, [pc, #324]	; (800bf1c <netif_add+0x17c>)
 800bdd6:	f00a ff07 	bl	8016be8 <iprintf>
 800bdda:	2300      	movs	r3, #0
 800bddc:	e096      	b.n	800bf0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bde4:	4b4f      	ldr	r3, [pc, #316]	; (800bf24 <netif_add+0x184>)
 800bde6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bdee:	4b4d      	ldr	r3, [pc, #308]	; (800bf24 <netif_add+0x184>)
 800bdf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bdf8:	4b4a      	ldr	r3, [pc, #296]	; (800bf24 <netif_add+0x184>)
 800bdfa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4a45      	ldr	r2, [pc, #276]	; (800bf28 <netif_add+0x188>)
 800be12:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6a3a      	ldr	r2, [r7, #32]
 800be2c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800be2e:	4b3f      	ldr	r3, [pc, #252]	; (800bf2c <netif_add+0x18c>)
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 f913 	bl	800c070 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	4798      	blx	r3
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <netif_add+0xba>
    return NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	e058      	b.n	800bf0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be60:	2bff      	cmp	r3, #255	; 0xff
 800be62:	d103      	bne.n	800be6c <netif_add+0xcc>
        netif->num = 0;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be70:	4b2f      	ldr	r3, [pc, #188]	; (800bf30 <netif_add+0x190>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e02b      	b.n	800bed0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d106      	bne.n	800be8e <netif_add+0xee>
 800be80:	4b24      	ldr	r3, [pc, #144]	; (800bf14 <netif_add+0x174>)
 800be82:	f240 128b 	movw	r2, #395	; 0x18b
 800be86:	492b      	ldr	r1, [pc, #172]	; (800bf34 <netif_add+0x194>)
 800be88:	4824      	ldr	r0, [pc, #144]	; (800bf1c <netif_add+0x17c>)
 800be8a:	f00a fead 	bl	8016be8 <iprintf>
        num_netifs++;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2bff      	cmp	r3, #255	; 0xff
 800be98:	dd06      	ble.n	800bea8 <netif_add+0x108>
 800be9a:	4b1e      	ldr	r3, [pc, #120]	; (800bf14 <netif_add+0x174>)
 800be9c:	f240 128d 	movw	r2, #397	; 0x18d
 800bea0:	4925      	ldr	r1, [pc, #148]	; (800bf38 <netif_add+0x198>)
 800bea2:	481e      	ldr	r0, [pc, #120]	; (800bf1c <netif_add+0x17c>)
 800bea4:	f00a fea0 	bl	8016be8 <iprintf>
        if (netif2->num == netif->num) {
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d108      	bne.n	800beca <netif_add+0x12a>
          netif->num++;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bebe:	3301      	adds	r3, #1
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bec8:	e005      	b.n	800bed6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1d0      	bne.n	800be78 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1be      	bne.n	800be5a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bee2:	2bfe      	cmp	r3, #254	; 0xfe
 800bee4:	d103      	bne.n	800beee <netif_add+0x14e>
    netif_num = 0;
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <netif_add+0x18c>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e006      	b.n	800befc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bef4:	3301      	adds	r3, #1
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <netif_add+0x18c>)
 800befa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800befc:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <netif_add+0x190>)
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bf04:	4a0a      	ldr	r2, [pc, #40]	; (800bf30 <netif_add+0x190>)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	08019444 	.word	0x08019444
 800bf18:	080194d8 	.word	0x080194d8
 800bf1c:	08019494 	.word	0x08019494
 800bf20:	080194f4 	.word	0x080194f4
 800bf24:	0801bc74 	.word	0x0801bc74
 800bf28:	0800c34b 	.word	0x0800c34b
 800bf2c:	2000d108 	.word	0x2000d108
 800bf30:	2000d100 	.word	0x2000d100
 800bf34:	08019518 	.word	0x08019518
 800bf38:	0801952c 	.word	0x0801952c

0800bf3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f002 fe15 	bl	800eb78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f007 ff47 	bl	8013de4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <netif_do_set_ipaddr+0x20>
 800bf72:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <netif_do_set_ipaddr+0x88>)
 800bf74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bf78:	491c      	ldr	r1, [pc, #112]	; (800bfec <netif_do_set_ipaddr+0x8c>)
 800bf7a:	481d      	ldr	r0, [pc, #116]	; (800bff0 <netif_do_set_ipaddr+0x90>)
 800bf7c:	f00a fe34 	bl	8016be8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <netif_do_set_ipaddr+0x34>
 800bf86:	4b18      	ldr	r3, [pc, #96]	; (800bfe8 <netif_do_set_ipaddr+0x88>)
 800bf88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bf8c:	4917      	ldr	r1, [pc, #92]	; (800bfec <netif_do_set_ipaddr+0x8c>)
 800bf8e:	4818      	ldr	r0, [pc, #96]	; (800bff0 <netif_do_set_ipaddr+0x90>)
 800bf90:	f00a fe2a 	bl	8016be8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d01c      	beq.n	800bfdc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bfb2:	f107 0314 	add.w	r3, r7, #20
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ffbf 	bl	800bf3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <netif_do_set_ipaddr+0x6a>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	e000      	b.n	800bfcc <netif_do_set_ipaddr+0x6c>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 f8d2 	bl	800c17c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e000      	b.n	800bfde <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	08019444 	.word	0x08019444
 800bfec:	0801955c 	.word	0x0801955c
 800bff0:	08019494 	.word	0x08019494

0800bff4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3308      	adds	r3, #8
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d00a      	beq.n	800c024 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <netif_do_set_netmask+0x26>
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	e000      	b.n	800c01c <netif_do_set_netmask+0x28>
 800c01a:	2300      	movs	r3, #0
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c020:	2301      	movs	r3, #1
 800c022:	e000      	b.n	800c026 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	330c      	adds	r3, #12
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d00a      	beq.n	800c062 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <netif_do_set_gw+0x26>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	e000      	b.n	800c05a <netif_do_set_gw+0x28>
 800c058:	2300      	movs	r3, #0
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
 800c07c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c082:	2300      	movs	r3, #0
 800c084:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c08c:	4b1c      	ldr	r3, [pc, #112]	; (800c100 <netif_set_addr+0x90>)
 800c08e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c096:	4b1a      	ldr	r3, [pc, #104]	; (800c100 <netif_set_addr+0x90>)
 800c098:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c0a0:	4b17      	ldr	r3, [pc, #92]	; (800c100 <netif_set_addr+0x90>)
 800c0a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <netif_set_addr+0x42>
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <netif_set_addr+0x46>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <netif_set_addr+0x48>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d006      	beq.n	800c0ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c0c0:	f107 0310 	add.w	r3, r7, #16
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff ff49 	bl	800bf60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c0ce:	69fa      	ldr	r2, [r7, #28]
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff ff8e 	bl	800bff4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff ffa8 	bl	800c032 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d106      	bne.n	800c0f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c0e8:	f107 0310 	add.w	r3, r7, #16
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7ff ff35 	bl	800bf60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c0f6:	bf00      	nop
 800c0f8:	3720      	adds	r7, #32
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	0801bc74 	.word	0x0801bc74

0800c104 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c10c:	4a04      	ldr	r2, [pc, #16]	; (800c120 <netif_set_default+0x1c>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c112:	bf00      	nop
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	2000d104 	.word	0x2000d104

0800c124 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d107      	bne.n	800c142 <netif_set_up+0x1e>
 800c132:	4b0f      	ldr	r3, [pc, #60]	; (800c170 <netif_set_up+0x4c>)
 800c134:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c138:	490e      	ldr	r1, [pc, #56]	; (800c174 <netif_set_up+0x50>)
 800c13a:	480f      	ldr	r0, [pc, #60]	; (800c178 <netif_set_up+0x54>)
 800c13c:	f00a fd54 	bl	8016be8 <iprintf>
 800c140:	e013      	b.n	800c16a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10c      	bne.n	800c16a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c162:	2103      	movs	r1, #3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f809 	bl	800c17c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	08019444 	.word	0x08019444
 800c174:	080195cc 	.word	0x080195cc
 800c178:	08019494 	.word	0x08019494

0800c17c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <netif_issue_reports+0x20>
 800c18e:	4b18      	ldr	r3, [pc, #96]	; (800c1f0 <netif_issue_reports+0x74>)
 800c190:	f240 326d 	movw	r2, #877	; 0x36d
 800c194:	4917      	ldr	r1, [pc, #92]	; (800c1f4 <netif_issue_reports+0x78>)
 800c196:	4818      	ldr	r0, [pc, #96]	; (800c1f8 <netif_issue_reports+0x7c>)
 800c198:	f00a fd26 	bl	8016be8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d01e      	beq.n	800c1e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d017      	beq.n	800c1e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d013      	beq.n	800c1ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00e      	beq.n	800c1ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1d2:	f003 0308 	and.w	r3, r3, #8
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f008 fd69 	bl	8014cb8 <etharp_request>
 800c1e6:	e000      	b.n	800c1ea <netif_issue_reports+0x6e>
    return;
 800c1e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	08019444 	.word	0x08019444
 800c1f4:	080195e8 	.word	0x080195e8
 800c1f8:	08019494 	.word	0x08019494

0800c1fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d107      	bne.n	800c21a <netif_set_down+0x1e>
 800c20a:	4b12      	ldr	r3, [pc, #72]	; (800c254 <netif_set_down+0x58>)
 800c20c:	f240 329b 	movw	r2, #923	; 0x39b
 800c210:	4911      	ldr	r1, [pc, #68]	; (800c258 <netif_set_down+0x5c>)
 800c212:	4812      	ldr	r0, [pc, #72]	; (800c25c <netif_set_down+0x60>)
 800c214:	f00a fce8 	bl	8016be8 <iprintf>
 800c218:	e019      	b.n	800c24e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c220:	f003 0301 	and.w	r3, r3, #1
 800c224:	2b00      	cmp	r3, #0
 800c226:	d012      	beq.n	800c24e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c22e:	f023 0301 	bic.w	r3, r3, #1
 800c232:	b2da      	uxtb	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c240:	f003 0308 	and.w	r3, r3, #8
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f008 f8f3 	bl	8014434 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	08019444 	.word	0x08019444
 800c258:	0801960c 	.word	0x0801960c
 800c25c:	08019494 	.word	0x08019494

0800c260 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d107      	bne.n	800c27e <netif_set_link_up+0x1e>
 800c26e:	4b13      	ldr	r3, [pc, #76]	; (800c2bc <netif_set_link_up+0x5c>)
 800c270:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c274:	4912      	ldr	r1, [pc, #72]	; (800c2c0 <netif_set_link_up+0x60>)
 800c276:	4813      	ldr	r0, [pc, #76]	; (800c2c4 <netif_set_link_up+0x64>)
 800c278:	f00a fcb6 	bl	8016be8 <iprintf>
 800c27c:	e01b      	b.n	800c2b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d114      	bne.n	800c2b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c292:	f043 0304 	orr.w	r3, r3, #4
 800c296:	b2da      	uxtb	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c29e:	2103      	movs	r1, #3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ff6b 	bl	800c17c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <netif_set_link_up+0x56>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	08019444 	.word	0x08019444
 800c2c0:	0801962c 	.word	0x0801962c
 800c2c4:	08019494 	.word	0x08019494

0800c2c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d107      	bne.n	800c2e6 <netif_set_link_down+0x1e>
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <netif_set_link_down+0x54>)
 800c2d8:	f240 4206 	movw	r2, #1030	; 0x406
 800c2dc:	4910      	ldr	r1, [pc, #64]	; (800c320 <netif_set_link_down+0x58>)
 800c2de:	4811      	ldr	r0, [pc, #68]	; (800c324 <netif_set_link_down+0x5c>)
 800c2e0:	f00a fc82 	bl	8016be8 <iprintf>
 800c2e4:	e017      	b.n	800c316 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d010      	beq.n	800c316 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2fa:	f023 0304 	bic.w	r3, r3, #4
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <netif_set_link_down+0x4e>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	08019444 	.word	0x08019444
 800c320:	08019650 	.word	0x08019650
 800c324:	08019494 	.word	0x08019494

0800c328 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	61da      	str	r2, [r3, #28]
  }
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	60b9      	str	r1, [r7, #8]
 800c354:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c356:	f06f 030b 	mvn.w	r3, #11
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
	...

0800c368 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d013      	beq.n	800c3a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c378:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <netif_get_by_index+0x48>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	e00c      	b.n	800c39a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c386:	3301      	adds	r3, #1
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	79fa      	ldrb	r2, [r7, #7]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d101      	bne.n	800c394 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	e006      	b.n	800c3a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1ef      	bne.n	800c380 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	2000d100 	.word	0x2000d100

0800c3b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c3ba:	f00a faf7 	bl	80169ac <sys_arch_protect>
 800c3be:	6038      	str	r0, [r7, #0]
 800c3c0:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <pbuf_free_ooseq+0x44>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	701a      	strb	r2, [r3, #0]
 800c3c6:	6838      	ldr	r0, [r7, #0]
 800c3c8:	f00a fafe 	bl	80169c8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c3cc:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <pbuf_free_ooseq+0x48>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	e00a      	b.n	800c3ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f002 fc09 	bl	800ebf4 <tcp_free_ooseq>
      return;
 800c3e2:	e005      	b.n	800c3f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	607b      	str	r3, [r7, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1f1      	bne.n	800c3d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	2000d109 	.word	0x2000d109
 800c3fc:	2000d118 	.word	0x2000d118

0800c400 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c408:	f7ff ffd4 	bl	800c3b4 <pbuf_free_ooseq>
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c41a:	f00a fac7 	bl	80169ac <sys_arch_protect>
 800c41e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c420:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <pbuf_pool_is_empty+0x4c>)
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c426:	4b0e      	ldr	r3, [pc, #56]	; (800c460 <pbuf_pool_is_empty+0x4c>)
 800c428:	2201      	movs	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f00a facb 	bl	80169c8 <sys_arch_unprotect>

  if (!queued) {
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10f      	bne.n	800c458 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c438:	2100      	movs	r1, #0
 800c43a:	480a      	ldr	r0, [pc, #40]	; (800c464 <pbuf_pool_is_empty+0x50>)
 800c43c:	f7fe fe90 	bl	800b160 <tcpip_try_callback>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d008      	beq.n	800c458 <pbuf_pool_is_empty+0x44>
 800c446:	f00a fab1 	bl	80169ac <sys_arch_protect>
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	4b04      	ldr	r3, [pc, #16]	; (800c460 <pbuf_pool_is_empty+0x4c>)
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f00a fab8 	bl	80169c8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	2000d109 	.word	0x2000d109
 800c464:	0800c401 	.word	0x0800c401

0800c468 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	4611      	mov	r1, r2
 800c474:	461a      	mov	r2, r3
 800c476:	460b      	mov	r3, r1
 800c478:	80fb      	strh	r3, [r7, #6]
 800c47a:	4613      	mov	r3, r2
 800c47c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	88fa      	ldrh	r2, [r7, #6]
 800c48e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	88ba      	ldrh	r2, [r7, #4]
 800c494:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c496:	8b3b      	ldrh	r3, [r7, #24]
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	7f3a      	ldrb	r2, [r7, #28]
 800c4a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	73da      	strb	r2, [r3, #15]
}
 800c4b0:	bf00      	nop
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08c      	sub	sp, #48	; 0x30
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	71fb      	strb	r3, [r7, #7]
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	80bb      	strh	r3, [r7, #4]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c4d2:	887b      	ldrh	r3, [r7, #2]
 800c4d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c4d8:	d07f      	beq.n	800c5da <pbuf_alloc+0x11e>
 800c4da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c4de:	f300 80c8 	bgt.w	800c672 <pbuf_alloc+0x1b6>
 800c4e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c4e6:	d010      	beq.n	800c50a <pbuf_alloc+0x4e>
 800c4e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c4ec:	f300 80c1 	bgt.w	800c672 <pbuf_alloc+0x1b6>
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d002      	beq.n	800c4fa <pbuf_alloc+0x3e>
 800c4f4:	2b41      	cmp	r3, #65	; 0x41
 800c4f6:	f040 80bc 	bne.w	800c672 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c4fa:	887a      	ldrh	r2, [r7, #2]
 800c4fc:	88bb      	ldrh	r3, [r7, #4]
 800c4fe:	4619      	mov	r1, r3
 800c500:	2000      	movs	r0, #0
 800c502:	f000 f8d1 	bl	800c6a8 <pbuf_alloc_reference>
 800c506:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c508:	e0bd      	b.n	800c686 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c50e:	2300      	movs	r3, #0
 800c510:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c512:	88bb      	ldrh	r3, [r7, #4]
 800c514:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c516:	200c      	movs	r0, #12
 800c518:	f7ff fb9a 	bl	800bc50 <memp_malloc>
 800c51c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d109      	bne.n	800c538 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c524:	f7ff ff76 	bl	800c414 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c530:	f000 faa8 	bl	800ca84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c534:	2300      	movs	r3, #0
 800c536:	e0a7      	b.n	800c688 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c53a:	3303      	adds	r3, #3
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	f023 0303 	bic.w	r3, r3, #3
 800c542:	b29b      	uxth	r3, r3
 800c544:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c548:	b29b      	uxth	r3, r3
 800c54a:	8b7a      	ldrh	r2, [r7, #26]
 800c54c:	4293      	cmp	r3, r2
 800c54e:	bf28      	it	cs
 800c550:	4613      	movcs	r3, r2
 800c552:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c556:	3310      	adds	r3, #16
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	4413      	add	r3, r2
 800c55c:	3303      	adds	r3, #3
 800c55e:	f023 0303 	bic.w	r3, r3, #3
 800c562:	4618      	mov	r0, r3
 800c564:	89f9      	ldrh	r1, [r7, #14]
 800c566:	8b7a      	ldrh	r2, [r7, #26]
 800c568:	2300      	movs	r3, #0
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	887b      	ldrh	r3, [r7, #2]
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	460b      	mov	r3, r1
 800c572:	4601      	mov	r1, r0
 800c574:	6938      	ldr	r0, [r7, #16]
 800c576:	f7ff ff77 	bl	800c468 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f003 0303 	and.w	r3, r3, #3
 800c582:	2b00      	cmp	r3, #0
 800c584:	d006      	beq.n	800c594 <pbuf_alloc+0xd8>
 800c586:	4b42      	ldr	r3, [pc, #264]	; (800c690 <pbuf_alloc+0x1d4>)
 800c588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c58c:	4941      	ldr	r1, [pc, #260]	; (800c694 <pbuf_alloc+0x1d8>)
 800c58e:	4842      	ldr	r0, [pc, #264]	; (800c698 <pbuf_alloc+0x1dc>)
 800c590:	f00a fb2a 	bl	8016be8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c596:	3303      	adds	r3, #3
 800c598:	f023 0303 	bic.w	r3, r3, #3
 800c59c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c5a0:	d106      	bne.n	800c5b0 <pbuf_alloc+0xf4>
 800c5a2:	4b3b      	ldr	r3, [pc, #236]	; (800c690 <pbuf_alloc+0x1d4>)
 800c5a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c5a8:	493c      	ldr	r1, [pc, #240]	; (800c69c <pbuf_alloc+0x1e0>)
 800c5aa:	483b      	ldr	r0, [pc, #236]	; (800c698 <pbuf_alloc+0x1dc>)
 800c5ac:	f00a fb1c 	bl	8016be8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ba:	e002      	b.n	800c5c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c5c6:	8b7a      	ldrh	r2, [r7, #26]
 800c5c8:	89fb      	ldrh	r3, [r7, #14]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c5d2:	8b7b      	ldrh	r3, [r7, #26]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d19e      	bne.n	800c516 <pbuf_alloc+0x5a>
      break;
 800c5d8:	e055      	b.n	800c686 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c5da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5dc:	3303      	adds	r3, #3
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f023 0303 	bic.w	r3, r3, #3
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	88bb      	ldrh	r3, [r7, #4]
 800c5e8:	3303      	adds	r3, #3
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	f023 0303 	bic.w	r3, r3, #3
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4413      	add	r3, r2
 800c5f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c5f6:	8b3b      	ldrh	r3, [r7, #24]
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c5fc:	8b3a      	ldrh	r2, [r7, #24]
 800c5fe:	88bb      	ldrh	r3, [r7, #4]
 800c600:	3303      	adds	r3, #3
 800c602:	f023 0303 	bic.w	r3, r3, #3
 800c606:	429a      	cmp	r2, r3
 800c608:	d306      	bcc.n	800c618 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c60a:	8afa      	ldrh	r2, [r7, #22]
 800c60c:	88bb      	ldrh	r3, [r7, #4]
 800c60e:	3303      	adds	r3, #3
 800c610:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c614:	429a      	cmp	r2, r3
 800c616:	d201      	bcs.n	800c61c <pbuf_alloc+0x160>
        return NULL;
 800c618:	2300      	movs	r3, #0
 800c61a:	e035      	b.n	800c688 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c61c:	8afb      	ldrh	r3, [r7, #22]
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff f972 	bl	800b908 <mem_malloc>
 800c624:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d101      	bne.n	800c630 <pbuf_alloc+0x174>
        return NULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	e02b      	b.n	800c688 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c632:	3310      	adds	r3, #16
 800c634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c636:	4413      	add	r3, r2
 800c638:	3303      	adds	r3, #3
 800c63a:	f023 0303 	bic.w	r3, r3, #3
 800c63e:	4618      	mov	r0, r3
 800c640:	88b9      	ldrh	r1, [r7, #4]
 800c642:	88ba      	ldrh	r2, [r7, #4]
 800c644:	2300      	movs	r3, #0
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	887b      	ldrh	r3, [r7, #2]
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	460b      	mov	r3, r1
 800c64e:	4601      	mov	r1, r0
 800c650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c652:	f7ff ff09 	bl	800c468 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d010      	beq.n	800c684 <pbuf_alloc+0x1c8>
 800c662:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <pbuf_alloc+0x1d4>)
 800c664:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c668:	490d      	ldr	r1, [pc, #52]	; (800c6a0 <pbuf_alloc+0x1e4>)
 800c66a:	480b      	ldr	r0, [pc, #44]	; (800c698 <pbuf_alloc+0x1dc>)
 800c66c:	f00a fabc 	bl	8016be8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c670:	e008      	b.n	800c684 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c672:	4b07      	ldr	r3, [pc, #28]	; (800c690 <pbuf_alloc+0x1d4>)
 800c674:	f240 1227 	movw	r2, #295	; 0x127
 800c678:	490a      	ldr	r1, [pc, #40]	; (800c6a4 <pbuf_alloc+0x1e8>)
 800c67a:	4807      	ldr	r0, [pc, #28]	; (800c698 <pbuf_alloc+0x1dc>)
 800c67c:	f00a fab4 	bl	8016be8 <iprintf>
      return NULL;
 800c680:	2300      	movs	r3, #0
 800c682:	e001      	b.n	800c688 <pbuf_alloc+0x1cc>
      break;
 800c684:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3728      	adds	r7, #40	; 0x28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	08019674 	.word	0x08019674
 800c694:	080196a4 	.word	0x080196a4
 800c698:	080196d4 	.word	0x080196d4
 800c69c:	080196fc 	.word	0x080196fc
 800c6a0:	08019730 	.word	0x08019730
 800c6a4:	0801975c 	.word	0x0801975c

0800c6a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	807b      	strh	r3, [r7, #2]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c6b8:	883b      	ldrh	r3, [r7, #0]
 800c6ba:	2b41      	cmp	r3, #65	; 0x41
 800c6bc:	d009      	beq.n	800c6d2 <pbuf_alloc_reference+0x2a>
 800c6be:	883b      	ldrh	r3, [r7, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d006      	beq.n	800c6d2 <pbuf_alloc_reference+0x2a>
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <pbuf_alloc_reference+0x5c>)
 800c6c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c6ca:	490f      	ldr	r1, [pc, #60]	; (800c708 <pbuf_alloc_reference+0x60>)
 800c6cc:	480f      	ldr	r0, [pc, #60]	; (800c70c <pbuf_alloc_reference+0x64>)
 800c6ce:	f00a fa8b 	bl	8016be8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c6d2:	200b      	movs	r0, #11
 800c6d4:	f7ff fabc 	bl	800bc50 <memp_malloc>
 800c6d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	e00b      	b.n	800c6fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c6e4:	8879      	ldrh	r1, [r7, #2]
 800c6e6:	887a      	ldrh	r2, [r7, #2]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9301      	str	r3, [sp, #4]
 800c6ec:	883b      	ldrh	r3, [r7, #0]
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f7ff feb7 	bl	800c468 <pbuf_init_alloced_pbuf>
  return p;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	08019674 	.word	0x08019674
 800c708:	08019778 	.word	0x08019778
 800c70c:	080196d4 	.word	0x080196d4

0800c710 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af02      	add	r7, sp, #8
 800c716:	607b      	str	r3, [r7, #4]
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
 800c71c:	460b      	mov	r3, r1
 800c71e:	81bb      	strh	r3, [r7, #12]
 800c720:	4613      	mov	r3, r2
 800c722:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c728:	8a7b      	ldrh	r3, [r7, #18]
 800c72a:	3303      	adds	r3, #3
 800c72c:	f023 0203 	bic.w	r2, r3, #3
 800c730:	89bb      	ldrh	r3, [r7, #12]
 800c732:	441a      	add	r2, r3
 800c734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c736:	429a      	cmp	r2, r3
 800c738:	d901      	bls.n	800c73e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e018      	b.n	800c770 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d007      	beq.n	800c754 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c744:	8a7b      	ldrh	r3, [r7, #18]
 800c746:	3303      	adds	r3, #3
 800c748:	f023 0303 	bic.w	r3, r3, #3
 800c74c:	6a3a      	ldr	r2, [r7, #32]
 800c74e:	4413      	add	r3, r2
 800c750:	617b      	str	r3, [r7, #20]
 800c752:	e001      	b.n	800c758 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	89b9      	ldrh	r1, [r7, #12]
 800c75c:	89ba      	ldrh	r2, [r7, #12]
 800c75e:	2302      	movs	r3, #2
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	897b      	ldrh	r3, [r7, #10]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	460b      	mov	r3, r1
 800c768:	6979      	ldr	r1, [r7, #20]
 800c76a:	f7ff fe7d 	bl	800c468 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c76e:	687b      	ldr	r3, [r7, #4]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d106      	bne.n	800c798 <pbuf_realloc+0x20>
 800c78a:	4b3a      	ldr	r3, [pc, #232]	; (800c874 <pbuf_realloc+0xfc>)
 800c78c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c790:	4939      	ldr	r1, [pc, #228]	; (800c878 <pbuf_realloc+0x100>)
 800c792:	483a      	ldr	r0, [pc, #232]	; (800c87c <pbuf_realloc+0x104>)
 800c794:	f00a fa28 	bl	8016be8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	891b      	ldrh	r3, [r3, #8]
 800c79c:	887a      	ldrh	r2, [r7, #2]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d263      	bcs.n	800c86a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	891a      	ldrh	r2, [r3, #8]
 800c7a6:	887b      	ldrh	r3, [r7, #2]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c7ac:	887b      	ldrh	r3, [r7, #2]
 800c7ae:	817b      	strh	r3, [r7, #10]
  q = p;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c7b4:	e018      	b.n	800c7e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	895b      	ldrh	r3, [r3, #10]
 800c7ba:	897a      	ldrh	r2, [r7, #10]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	891a      	ldrh	r2, [r3, #8]
 800c7c4:	893b      	ldrh	r3, [r7, #8]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <pbuf_realloc+0x70>
 800c7da:	4b26      	ldr	r3, [pc, #152]	; (800c874 <pbuf_realloc+0xfc>)
 800c7dc:	f240 12af 	movw	r2, #431	; 0x1af
 800c7e0:	4927      	ldr	r1, [pc, #156]	; (800c880 <pbuf_realloc+0x108>)
 800c7e2:	4826      	ldr	r0, [pc, #152]	; (800c87c <pbuf_realloc+0x104>)
 800c7e4:	f00a fa00 	bl	8016be8 <iprintf>
  while (rem_len > q->len) {
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	895b      	ldrh	r3, [r3, #10]
 800c7ec:	897a      	ldrh	r2, [r7, #10]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d8e1      	bhi.n	800c7b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	7b1b      	ldrb	r3, [r3, #12]
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d121      	bne.n	800c842 <pbuf_realloc+0xca>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	895b      	ldrh	r3, [r3, #10]
 800c802:	897a      	ldrh	r2, [r7, #10]
 800c804:	429a      	cmp	r2, r3
 800c806:	d01c      	beq.n	800c842 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	7b5b      	ldrb	r3, [r3, #13]
 800c80c:	f003 0302 	and.w	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d116      	bne.n	800c842 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	897b      	ldrh	r3, [r7, #10]
 800c820:	4413      	add	r3, r2
 800c822:	b29b      	uxth	r3, r3
 800c824:	4619      	mov	r1, r3
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f7fe ff64 	bl	800b6f4 <mem_trim>
 800c82c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d106      	bne.n	800c842 <pbuf_realloc+0xca>
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <pbuf_realloc+0xfc>)
 800c836:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c83a:	4912      	ldr	r1, [pc, #72]	; (800c884 <pbuf_realloc+0x10c>)
 800c83c:	480f      	ldr	r0, [pc, #60]	; (800c87c <pbuf_realloc+0x104>)
 800c83e:	f00a f9d3 	bl	8016be8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	897a      	ldrh	r2, [r7, #10]
 800c846:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	895a      	ldrh	r2, [r3, #10]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f911 	bl	800ca84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	e000      	b.n	800c86c <pbuf_realloc+0xf4>
    return;
 800c86a:	bf00      	nop

}
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	08019674 	.word	0x08019674
 800c878:	0801978c 	.word	0x0801978c
 800c87c:	080196d4 	.word	0x080196d4
 800c880:	080197a4 	.word	0x080197a4
 800c884:	080197bc 	.word	0x080197bc

0800c888 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	4613      	mov	r3, r2
 800c894:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d106      	bne.n	800c8aa <pbuf_add_header_impl+0x22>
 800c89c:	4b2b      	ldr	r3, [pc, #172]	; (800c94c <pbuf_add_header_impl+0xc4>)
 800c89e:	f240 12df 	movw	r2, #479	; 0x1df
 800c8a2:	492b      	ldr	r1, [pc, #172]	; (800c950 <pbuf_add_header_impl+0xc8>)
 800c8a4:	482b      	ldr	r0, [pc, #172]	; (800c954 <pbuf_add_header_impl+0xcc>)
 800c8a6:	f00a f99f 	bl	8016be8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <pbuf_add_header_impl+0x30>
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8b6:	d301      	bcc.n	800c8bc <pbuf_add_header_impl+0x34>
    return 1;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e043      	b.n	800c944 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e03e      	b.n	800c944 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	891a      	ldrh	r2, [r3, #8]
 800c8ce:	8a7b      	ldrh	r3, [r7, #18]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	8a7a      	ldrh	r2, [r7, #18]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d901      	bls.n	800c8de <pbuf_add_header_impl+0x56>
    return 1;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e032      	b.n	800c944 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	7b1b      	ldrb	r3, [r3, #12]
 800c8e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c8e4:	8a3b      	ldrh	r3, [r7, #16]
 800c8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00c      	beq.n	800c908 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	425b      	negs	r3, r3
 800c8f6:	4413      	add	r3, r2
 800c8f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3310      	adds	r3, #16
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	429a      	cmp	r2, r3
 800c902:	d20d      	bcs.n	800c920 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c904:	2301      	movs	r3, #1
 800c906:	e01d      	b.n	800c944 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d006      	beq.n	800c91c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	425b      	negs	r3, r3
 800c916:	4413      	add	r3, r2
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	e001      	b.n	800c920 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e011      	b.n	800c944 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	895a      	ldrh	r2, [r3, #10]
 800c92a:	8a7b      	ldrh	r3, [r7, #18]
 800c92c:	4413      	add	r3, r2
 800c92e:	b29a      	uxth	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	891a      	ldrh	r2, [r3, #8]
 800c938:	8a7b      	ldrh	r3, [r7, #18]
 800c93a:	4413      	add	r3, r2
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	811a      	strh	r2, [r3, #8]


  return 0;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	08019674 	.word	0x08019674
 800c950:	080197d8 	.word	0x080197d8
 800c954:	080196d4 	.word	0x080196d4

0800c958 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c962:	2200      	movs	r2, #0
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff ff8e 	bl	800c888 <pbuf_add_header_impl>
 800c96c:	4603      	mov	r3, r0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d106      	bne.n	800c996 <pbuf_remove_header+0x1e>
 800c988:	4b20      	ldr	r3, [pc, #128]	; (800ca0c <pbuf_remove_header+0x94>)
 800c98a:	f240 224b 	movw	r2, #587	; 0x24b
 800c98e:	4920      	ldr	r1, [pc, #128]	; (800ca10 <pbuf_remove_header+0x98>)
 800c990:	4820      	ldr	r0, [pc, #128]	; (800ca14 <pbuf_remove_header+0x9c>)
 800c992:	f00a f929 	bl	8016be8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <pbuf_remove_header+0x2c>
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9a2:	d301      	bcc.n	800c9a8 <pbuf_remove_header+0x30>
    return 1;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e02c      	b.n	800ca02 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <pbuf_remove_header+0x3a>
    return 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e027      	b.n	800ca02 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	895b      	ldrh	r3, [r3, #10]
 800c9ba:	89fa      	ldrh	r2, [r7, #14]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d908      	bls.n	800c9d2 <pbuf_remove_header+0x5a>
 800c9c0:	4b12      	ldr	r3, [pc, #72]	; (800ca0c <pbuf_remove_header+0x94>)
 800c9c2:	f240 2255 	movw	r2, #597	; 0x255
 800c9c6:	4914      	ldr	r1, [pc, #80]	; (800ca18 <pbuf_remove_header+0xa0>)
 800c9c8:	4812      	ldr	r0, [pc, #72]	; (800ca14 <pbuf_remove_header+0x9c>)
 800c9ca:	f00a f90d 	bl	8016be8 <iprintf>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e017      	b.n	800ca02 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	441a      	add	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	895a      	ldrh	r2, [r3, #10]
 800c9e8:	89fb      	ldrh	r3, [r7, #14]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	891a      	ldrh	r2, [r3, #8]
 800c9f6:	89fb      	ldrh	r3, [r7, #14]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	08019674 	.word	0x08019674
 800ca10:	080197d8 	.word	0x080197d8
 800ca14:	080196d4 	.word	0x080196d4
 800ca18:	080197e4 	.word	0x080197e4

0800ca1c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	807b      	strh	r3, [r7, #2]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ca2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	da08      	bge.n	800ca46 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ca34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca38:	425b      	negs	r3, r3
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff ff9b 	bl	800c978 <pbuf_remove_header>
 800ca42:	4603      	mov	r3, r0
 800ca44:	e007      	b.n	800ca56 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ca46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca4a:	787a      	ldrb	r2, [r7, #1]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff ff1a 	bl	800c888 <pbuf_add_header_impl>
 800ca54:	4603      	mov	r3, r0
  }
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ca6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff ffd2 	bl	800ca1c <pbuf_header_impl>
 800ca78:	4603      	mov	r3, r0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
	...

0800ca84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10b      	bne.n	800caaa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d106      	bne.n	800caa6 <pbuf_free+0x22>
 800ca98:	4b3b      	ldr	r3, [pc, #236]	; (800cb88 <pbuf_free+0x104>)
 800ca9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ca9e:	493b      	ldr	r1, [pc, #236]	; (800cb8c <pbuf_free+0x108>)
 800caa0:	483b      	ldr	r0, [pc, #236]	; (800cb90 <pbuf_free+0x10c>)
 800caa2:	f00a f8a1 	bl	8016be8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e069      	b.n	800cb7e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800caae:	e062      	b.n	800cb76 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cab0:	f009 ff7c 	bl	80169ac <sys_arch_protect>
 800cab4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	7b9b      	ldrb	r3, [r3, #14]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d106      	bne.n	800cacc <pbuf_free+0x48>
 800cabe:	4b32      	ldr	r3, [pc, #200]	; (800cb88 <pbuf_free+0x104>)
 800cac0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cac4:	4933      	ldr	r1, [pc, #204]	; (800cb94 <pbuf_free+0x110>)
 800cac6:	4832      	ldr	r0, [pc, #200]	; (800cb90 <pbuf_free+0x10c>)
 800cac8:	f00a f88e 	bl	8016be8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7b9b      	ldrb	r3, [r3, #14]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	739a      	strb	r2, [r3, #14]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7b9b      	ldrb	r3, [r3, #14]
 800cadc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cade:	69b8      	ldr	r0, [r7, #24]
 800cae0:	f009 ff72 	bl	80169c8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d143      	bne.n	800cb72 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7b1b      	ldrb	r3, [r3, #12]
 800caf4:	f003 030f 	and.w	r3, r3, #15
 800caf8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7b5b      	ldrb	r3, [r3, #13]
 800cafe:	f003 0302 	and.w	r3, r3, #2
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d011      	beq.n	800cb2a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d106      	bne.n	800cb20 <pbuf_free+0x9c>
 800cb12:	4b1d      	ldr	r3, [pc, #116]	; (800cb88 <pbuf_free+0x104>)
 800cb14:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cb18:	491f      	ldr	r1, [pc, #124]	; (800cb98 <pbuf_free+0x114>)
 800cb1a:	481d      	ldr	r0, [pc, #116]	; (800cb90 <pbuf_free+0x10c>)
 800cb1c:	f00a f864 	bl	8016be8 <iprintf>
        pc->custom_free_function(p);
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	4798      	blx	r3
 800cb28:	e01d      	b.n	800cb66 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d104      	bne.n	800cb3a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	200c      	movs	r0, #12
 800cb34:	f7ff f902 	bl	800bd3c <memp_free>
 800cb38:	e015      	b.n	800cb66 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d104      	bne.n	800cb4a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	200b      	movs	r0, #11
 800cb44:	f7ff f8fa 	bl	800bd3c <memp_free>
 800cb48:	e00d      	b.n	800cb66 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d103      	bne.n	800cb58 <pbuf_free+0xd4>
          mem_free(p);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7fe fd3f 	bl	800b5d4 <mem_free>
 800cb56:	e006      	b.n	800cb66 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <pbuf_free+0x104>)
 800cb5a:	f240 320f 	movw	r2, #783	; 0x30f
 800cb5e:	490f      	ldr	r1, [pc, #60]	; (800cb9c <pbuf_free+0x118>)
 800cb60:	480b      	ldr	r0, [pc, #44]	; (800cb90 <pbuf_free+0x10c>)
 800cb62:	f00a f841 	bl	8016be8 <iprintf>
        }
      }
      count++;
 800cb66:	7ffb      	ldrb	r3, [r7, #31]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	607b      	str	r3, [r7, #4]
 800cb70:	e001      	b.n	800cb76 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d199      	bne.n	800cab0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cb7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08019674 	.word	0x08019674
 800cb8c:	080197d8 	.word	0x080197d8
 800cb90:	080196d4 	.word	0x080196d4
 800cb94:	08019804 	.word	0x08019804
 800cb98:	0801981c 	.word	0x0801981c
 800cb9c:	08019840 	.word	0x08019840

0800cba0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cbac:	e005      	b.n	800cbba <pbuf_clen+0x1a>
    ++len;
 800cbae:	89fb      	ldrh	r3, [r7, #14]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1f6      	bne.n	800cbae <pbuf_clen+0xe>
  }
  return len;
 800cbc0:	89fb      	ldrh	r3, [r7, #14]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d016      	beq.n	800cc0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cbde:	f009 fee5 	bl	80169ac <sys_arch_protect>
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	7b9b      	ldrb	r3, [r3, #14]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	739a      	strb	r2, [r3, #14]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f009 fee9 	bl	80169c8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	7b9b      	ldrb	r3, [r3, #14]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d106      	bne.n	800cc0c <pbuf_ref+0x3c>
 800cbfe:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <pbuf_ref+0x44>)
 800cc00:	f240 3242 	movw	r2, #834	; 0x342
 800cc04:	4904      	ldr	r1, [pc, #16]	; (800cc18 <pbuf_ref+0x48>)
 800cc06:	4805      	ldr	r0, [pc, #20]	; (800cc1c <pbuf_ref+0x4c>)
 800cc08:	f009 ffee 	bl	8016be8 <iprintf>
  }
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	08019674 	.word	0x08019674
 800cc18:	08019854 	.word	0x08019854
 800cc1c:	080196d4 	.word	0x080196d4

0800cc20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <pbuf_cat+0x16>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d107      	bne.n	800cc46 <pbuf_cat+0x26>
 800cc36:	4b20      	ldr	r3, [pc, #128]	; (800ccb8 <pbuf_cat+0x98>)
 800cc38:	f240 3259 	movw	r2, #857	; 0x359
 800cc3c:	491f      	ldr	r1, [pc, #124]	; (800ccbc <pbuf_cat+0x9c>)
 800cc3e:	4820      	ldr	r0, [pc, #128]	; (800ccc0 <pbuf_cat+0xa0>)
 800cc40:	f009 ffd2 	bl	8016be8 <iprintf>
 800cc44:	e034      	b.n	800ccb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	e00a      	b.n	800cc62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	891a      	ldrh	r2, [r3, #8]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	891b      	ldrh	r3, [r3, #8]
 800cc54:	4413      	add	r3, r2
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	60fb      	str	r3, [r7, #12]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f0      	bne.n	800cc4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	891a      	ldrh	r2, [r3, #8]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	895b      	ldrh	r3, [r3, #10]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d006      	beq.n	800cc84 <pbuf_cat+0x64>
 800cc76:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <pbuf_cat+0x98>)
 800cc78:	f240 3262 	movw	r2, #866	; 0x362
 800cc7c:	4911      	ldr	r1, [pc, #68]	; (800ccc4 <pbuf_cat+0xa4>)
 800cc7e:	4810      	ldr	r0, [pc, #64]	; (800ccc0 <pbuf_cat+0xa0>)
 800cc80:	f009 ffb2 	bl	8016be8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d006      	beq.n	800cc9a <pbuf_cat+0x7a>
 800cc8c:	4b0a      	ldr	r3, [pc, #40]	; (800ccb8 <pbuf_cat+0x98>)
 800cc8e:	f240 3263 	movw	r2, #867	; 0x363
 800cc92:	490d      	ldr	r1, [pc, #52]	; (800ccc8 <pbuf_cat+0xa8>)
 800cc94:	480a      	ldr	r0, [pc, #40]	; (800ccc0 <pbuf_cat+0xa0>)
 800cc96:	f009 ffa7 	bl	8016be8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	891a      	ldrh	r2, [r3, #8]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	891b      	ldrh	r3, [r3, #8]
 800cca2:	4413      	add	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	08019674 	.word	0x08019674
 800ccbc:	08019868 	.word	0x08019868
 800ccc0:	080196d4 	.word	0x080196d4
 800ccc4:	080198a0 	.word	0x080198a0
 800ccc8:	080198d0 	.word	0x080198d0

0800cccc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7ff ffa1 	bl	800cc20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ccde:	6838      	ldr	r0, [r7, #0]
 800cce0:	f7ff ff76 	bl	800cbd0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cce4:	bf00      	nop
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <pbuf_copy+0x2a>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d005      	beq.n	800cd16 <pbuf_copy+0x2a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	891a      	ldrh	r2, [r3, #8]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	891b      	ldrh	r3, [r3, #8]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d209      	bcs.n	800cd2a <pbuf_copy+0x3e>
 800cd16:	4b57      	ldr	r3, [pc, #348]	; (800ce74 <pbuf_copy+0x188>)
 800cd18:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cd1c:	4956      	ldr	r1, [pc, #344]	; (800ce78 <pbuf_copy+0x18c>)
 800cd1e:	4857      	ldr	r0, [pc, #348]	; (800ce7c <pbuf_copy+0x190>)
 800cd20:	f009 ff62 	bl	8016be8 <iprintf>
 800cd24:	f06f 030f 	mvn.w	r3, #15
 800cd28:	e09f      	b.n	800ce6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	895b      	ldrh	r3, [r3, #10]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	1ad2      	subs	r2, r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	895b      	ldrh	r3, [r3, #10]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	1acb      	subs	r3, r1, r3
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d306      	bcc.n	800cd50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	895b      	ldrh	r3, [r3, #10]
 800cd46:	461a      	mov	r2, r3
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	e005      	b.n	800cd5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	895b      	ldrh	r3, [r3, #10]
 800cd54:	461a      	mov	r2, r3
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	18d0      	adds	r0, r2, r3
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f00a f8fb 	bl	8016f6a <memcpy>
    offset_to += len;
 800cd74:	697a      	ldr	r2, [r7, #20]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	4413      	add	r3, r2
 800cd7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	4413      	add	r3, r2
 800cd82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	895b      	ldrh	r3, [r3, #10]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d906      	bls.n	800cd9e <pbuf_copy+0xb2>
 800cd90:	4b38      	ldr	r3, [pc, #224]	; (800ce74 <pbuf_copy+0x188>)
 800cd92:	f240 32d9 	movw	r2, #985	; 0x3d9
 800cd96:	493a      	ldr	r1, [pc, #232]	; (800ce80 <pbuf_copy+0x194>)
 800cd98:	4838      	ldr	r0, [pc, #224]	; (800ce7c <pbuf_copy+0x190>)
 800cd9a:	f009 ff25 	bl	8016be8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	895b      	ldrh	r3, [r3, #10]
 800cda2:	461a      	mov	r2, r3
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d906      	bls.n	800cdb8 <pbuf_copy+0xcc>
 800cdaa:	4b32      	ldr	r3, [pc, #200]	; (800ce74 <pbuf_copy+0x188>)
 800cdac:	f240 32da 	movw	r2, #986	; 0x3da
 800cdb0:	4934      	ldr	r1, [pc, #208]	; (800ce84 <pbuf_copy+0x198>)
 800cdb2:	4832      	ldr	r0, [pc, #200]	; (800ce7c <pbuf_copy+0x190>)
 800cdb4:	f009 ff18 	bl	8016be8 <iprintf>
    if (offset_from >= p_from->len) {
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	895b      	ldrh	r3, [r3, #10]
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d304      	bcc.n	800cdce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	895b      	ldrh	r3, [r3, #10]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d114      	bne.n	800ce04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10c      	bne.n	800ce04 <pbuf_copy+0x118>
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <pbuf_copy+0x118>
 800cdf0:	4b20      	ldr	r3, [pc, #128]	; (800ce74 <pbuf_copy+0x188>)
 800cdf2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cdf6:	4924      	ldr	r1, [pc, #144]	; (800ce88 <pbuf_copy+0x19c>)
 800cdf8:	4820      	ldr	r0, [pc, #128]	; (800ce7c <pbuf_copy+0x190>)
 800cdfa:	f009 fef5 	bl	8016be8 <iprintf>
 800cdfe:	f06f 030f 	mvn.w	r3, #15
 800ce02:	e032      	b.n	800ce6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d013      	beq.n	800ce32 <pbuf_copy+0x146>
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	895a      	ldrh	r2, [r3, #10]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	891b      	ldrh	r3, [r3, #8]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d10d      	bne.n	800ce32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d009      	beq.n	800ce32 <pbuf_copy+0x146>
 800ce1e:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <pbuf_copy+0x188>)
 800ce20:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ce24:	4919      	ldr	r1, [pc, #100]	; (800ce8c <pbuf_copy+0x1a0>)
 800ce26:	4815      	ldr	r0, [pc, #84]	; (800ce7c <pbuf_copy+0x190>)
 800ce28:	f009 fede 	bl	8016be8 <iprintf>
 800ce2c:	f06f 0305 	mvn.w	r3, #5
 800ce30:	e01b      	b.n	800ce6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d013      	beq.n	800ce60 <pbuf_copy+0x174>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	895a      	ldrh	r2, [r3, #10]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	891b      	ldrh	r3, [r3, #8]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d10d      	bne.n	800ce60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d009      	beq.n	800ce60 <pbuf_copy+0x174>
 800ce4c:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <pbuf_copy+0x188>)
 800ce4e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ce52:	490e      	ldr	r1, [pc, #56]	; (800ce8c <pbuf_copy+0x1a0>)
 800ce54:	4809      	ldr	r0, [pc, #36]	; (800ce7c <pbuf_copy+0x190>)
 800ce56:	f009 fec7 	bl	8016be8 <iprintf>
 800ce5a:	f06f 0305 	mvn.w	r3, #5
 800ce5e:	e004      	b.n	800ce6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f47f af61 	bne.w	800cd2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	08019674 	.word	0x08019674
 800ce78:	0801991c 	.word	0x0801991c
 800ce7c:	080196d4 	.word	0x080196d4
 800ce80:	0801994c 	.word	0x0801994c
 800ce84:	08019964 	.word	0x08019964
 800ce88:	08019980 	.word	0x08019980
 800ce8c:	08019990 	.word	0x08019990

0800ce90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	460b      	mov	r3, r1
 800cea0:	80fb      	strh	r3, [r7, #6]
 800cea2:	4613      	mov	r3, r2
 800cea4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d108      	bne.n	800cec6 <pbuf_copy_partial+0x36>
 800ceb4:	4b2b      	ldr	r3, [pc, #172]	; (800cf64 <pbuf_copy_partial+0xd4>)
 800ceb6:	f240 420a 	movw	r2, #1034	; 0x40a
 800ceba:	492b      	ldr	r1, [pc, #172]	; (800cf68 <pbuf_copy_partial+0xd8>)
 800cebc:	482b      	ldr	r0, [pc, #172]	; (800cf6c <pbuf_copy_partial+0xdc>)
 800cebe:	f009 fe93 	bl	8016be8 <iprintf>
 800cec2:	2300      	movs	r3, #0
 800cec4:	e04a      	b.n	800cf5c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d108      	bne.n	800cede <pbuf_copy_partial+0x4e>
 800cecc:	4b25      	ldr	r3, [pc, #148]	; (800cf64 <pbuf_copy_partial+0xd4>)
 800cece:	f240 420b 	movw	r2, #1035	; 0x40b
 800ced2:	4927      	ldr	r1, [pc, #156]	; (800cf70 <pbuf_copy_partial+0xe0>)
 800ced4:	4825      	ldr	r0, [pc, #148]	; (800cf6c <pbuf_copy_partial+0xdc>)
 800ced6:	f009 fe87 	bl	8016be8 <iprintf>
 800ceda:	2300      	movs	r3, #0
 800cedc:	e03e      	b.n	800cf5c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	61fb      	str	r3, [r7, #28]
 800cee2:	e034      	b.n	800cf4e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cee4:	88bb      	ldrh	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <pbuf_copy_partial+0x70>
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	895b      	ldrh	r3, [r3, #10]
 800ceee:	88ba      	ldrh	r2, [r7, #4]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d305      	bcc.n	800cf00 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	895b      	ldrh	r3, [r3, #10]
 800cef8:	88ba      	ldrh	r2, [r7, #4]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	80bb      	strh	r3, [r7, #4]
 800cefe:	e023      	b.n	800cf48 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	895a      	ldrh	r2, [r3, #10]
 800cf04:	88bb      	ldrh	r3, [r7, #4]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cf0a:	8b3a      	ldrh	r2, [r7, #24]
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d901      	bls.n	800cf16 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cf12:	88fb      	ldrh	r3, [r7, #6]
 800cf14:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cf16:	8b7b      	ldrh	r3, [r7, #26]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	18d0      	adds	r0, r2, r3
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	88bb      	ldrh	r3, [r7, #4]
 800cf22:	4413      	add	r3, r2
 800cf24:	8b3a      	ldrh	r2, [r7, #24]
 800cf26:	4619      	mov	r1, r3
 800cf28:	f00a f81f 	bl	8016f6a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cf2c:	8afa      	ldrh	r2, [r7, #22]
 800cf2e:	8b3b      	ldrh	r3, [r7, #24]
 800cf30:	4413      	add	r3, r2
 800cf32:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cf34:	8b7a      	ldrh	r2, [r7, #26]
 800cf36:	8b3b      	ldrh	r3, [r7, #24]
 800cf38:	4413      	add	r3, r2
 800cf3a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cf3c:	88fa      	ldrh	r2, [r7, #6]
 800cf3e:	8b3b      	ldrh	r3, [r7, #24]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	61fb      	str	r3, [r7, #28]
 800cf4e:	88fb      	ldrh	r3, [r7, #6]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <pbuf_copy_partial+0xca>
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1c4      	bne.n	800cee4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cf5a:	8afb      	ldrh	r3, [r7, #22]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3720      	adds	r7, #32
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	08019674 	.word	0x08019674
 800cf68:	080199bc 	.word	0x080199bc
 800cf6c:	080196d4 	.word	0x080196d4
 800cf70:	080199dc 	.word	0x080199dc

0800cf74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	603a      	str	r2, [r7, #0]
 800cf7e:	71fb      	strb	r3, [r7, #7]
 800cf80:	460b      	mov	r3, r1
 800cf82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	8919      	ldrh	r1, [r3, #8]
 800cf88:	88ba      	ldrh	r2, [r7, #4]
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fa95 	bl	800c4bc <pbuf_alloc>
 800cf92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <pbuf_clone+0x2a>
    return NULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e011      	b.n	800cfc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f7ff fea3 	bl	800ccec <pbuf_copy>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cfaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d006      	beq.n	800cfc0 <pbuf_clone+0x4c>
 800cfb2:	4b06      	ldr	r3, [pc, #24]	; (800cfcc <pbuf_clone+0x58>)
 800cfb4:	f240 5224 	movw	r2, #1316	; 0x524
 800cfb8:	4905      	ldr	r1, [pc, #20]	; (800cfd0 <pbuf_clone+0x5c>)
 800cfba:	4806      	ldr	r0, [pc, #24]	; (800cfd4 <pbuf_clone+0x60>)
 800cfbc:	f009 fe14 	bl	8016be8 <iprintf>
  return q;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	08019674 	.word	0x08019674
 800cfd0:	08019ae8 	.word	0x08019ae8
 800cfd4:	080196d4 	.word	0x080196d4

0800cfd8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cfdc:	f009 fd04 	bl	80169e8 <rand>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	4b01      	ldr	r3, [pc, #4]	; (800cff8 <tcp_init+0x20>)
 800cff2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cff4:	bf00      	nop
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20000024 	.word	0x20000024

0800cffc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7d1b      	ldrb	r3, [r3, #20]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d105      	bne.n	800d018 <tcp_free+0x1c>
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <tcp_free+0x2c>)
 800d00e:	22d4      	movs	r2, #212	; 0xd4
 800d010:	4906      	ldr	r1, [pc, #24]	; (800d02c <tcp_free+0x30>)
 800d012:	4807      	ldr	r0, [pc, #28]	; (800d030 <tcp_free+0x34>)
 800d014:	f009 fde8 	bl	8016be8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	2001      	movs	r0, #1
 800d01c:	f7fe fe8e 	bl	800bd3c <memp_free>
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	08019b74 	.word	0x08019b74
 800d02c:	08019ba4 	.word	0x08019ba4
 800d030:	08019bb8 	.word	0x08019bb8

0800d034 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	7d1b      	ldrb	r3, [r3, #20]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d105      	bne.n	800d050 <tcp_free_listen+0x1c>
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <tcp_free_listen+0x2c>)
 800d046:	22df      	movs	r2, #223	; 0xdf
 800d048:	4906      	ldr	r1, [pc, #24]	; (800d064 <tcp_free_listen+0x30>)
 800d04a:	4807      	ldr	r0, [pc, #28]	; (800d068 <tcp_free_listen+0x34>)
 800d04c:	f009 fdcc 	bl	8016be8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	2002      	movs	r0, #2
 800d054:	f7fe fe72 	bl	800bd3c <memp_free>
}
 800d058:	bf00      	nop
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	08019b74 	.word	0x08019b74
 800d064:	08019be0 	.word	0x08019be0
 800d068:	08019bb8 	.word	0x08019bb8

0800d06c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d070:	f001 f85c 	bl	800e12c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d074:	4b07      	ldr	r3, [pc, #28]	; (800d094 <tcp_tmr+0x28>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	3301      	adds	r3, #1
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <tcp_tmr+0x28>)
 800d07e:	701a      	strb	r2, [r3, #0]
 800d080:	4b04      	ldr	r3, [pc, #16]	; (800d094 <tcp_tmr+0x28>)
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d08c:	f000 fd0e 	bl	800daac <tcp_slowtmr>
  }
}
 800d090:	bf00      	nop
 800d092:	bd80      	pop	{r7, pc}
 800d094:	2000d121 	.word	0x2000d121

0800d098 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d105      	bne.n	800d0b4 <tcp_remove_listener+0x1c>
 800d0a8:	4b0d      	ldr	r3, [pc, #52]	; (800d0e0 <tcp_remove_listener+0x48>)
 800d0aa:	22ff      	movs	r2, #255	; 0xff
 800d0ac:	490d      	ldr	r1, [pc, #52]	; (800d0e4 <tcp_remove_listener+0x4c>)
 800d0ae:	480e      	ldr	r0, [pc, #56]	; (800d0e8 <tcp_remove_listener+0x50>)
 800d0b0:	f009 fd9a 	bl	8016be8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60fb      	str	r3, [r7, #12]
 800d0b8:	e00a      	b.n	800d0d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d102      	bne.n	800d0ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1f1      	bne.n	800d0ba <tcp_remove_listener+0x22>
    }
  }
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	08019b74 	.word	0x08019b74
 800d0e4:	08019bfc 	.word	0x08019bfc
 800d0e8:	08019bb8 	.word	0x08019bb8

0800d0ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <tcp_listen_closed+0x1c>
 800d0fa:	4b14      	ldr	r3, [pc, #80]	; (800d14c <tcp_listen_closed+0x60>)
 800d0fc:	f240 1211 	movw	r2, #273	; 0x111
 800d100:	4913      	ldr	r1, [pc, #76]	; (800d150 <tcp_listen_closed+0x64>)
 800d102:	4814      	ldr	r0, [pc, #80]	; (800d154 <tcp_listen_closed+0x68>)
 800d104:	f009 fd70 	bl	8016be8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	7d1b      	ldrb	r3, [r3, #20]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d006      	beq.n	800d11e <tcp_listen_closed+0x32>
 800d110:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <tcp_listen_closed+0x60>)
 800d112:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d116:	4910      	ldr	r1, [pc, #64]	; (800d158 <tcp_listen_closed+0x6c>)
 800d118:	480e      	ldr	r0, [pc, #56]	; (800d154 <tcp_listen_closed+0x68>)
 800d11a:	f009 fd65 	bl	8016be8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d11e:	2301      	movs	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	e00b      	b.n	800d13c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d124:	4a0d      	ldr	r2, [pc, #52]	; (800d15c <tcp_listen_closed+0x70>)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff ffb1 	bl	800d098 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3301      	adds	r3, #1
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d9f0      	bls.n	800d124 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	08019b74 	.word	0x08019b74
 800d150:	08019c24 	.word	0x08019c24
 800d154:	08019bb8 	.word	0x08019bb8
 800d158:	08019c30 	.word	0x08019c30
 800d15c:	0801bc4c 	.word	0x0801bc4c

0800d160 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d160:	b5b0      	push	{r4, r5, r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af04      	add	r7, sp, #16
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <tcp_close_shutdown+0x20>
 800d172:	4b63      	ldr	r3, [pc, #396]	; (800d300 <tcp_close_shutdown+0x1a0>)
 800d174:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d178:	4962      	ldr	r1, [pc, #392]	; (800d304 <tcp_close_shutdown+0x1a4>)
 800d17a:	4863      	ldr	r0, [pc, #396]	; (800d308 <tcp_close_shutdown+0x1a8>)
 800d17c:	f009 fd34 	bl	8016be8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d066      	beq.n	800d254 <tcp_close_shutdown+0xf4>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7d1b      	ldrb	r3, [r3, #20]
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	d003      	beq.n	800d196 <tcp_close_shutdown+0x36>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7d1b      	ldrb	r3, [r3, #20]
 800d192:	2b07      	cmp	r3, #7
 800d194:	d15e      	bne.n	800d254 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d104      	bne.n	800d1a8 <tcp_close_shutdown+0x48>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1a6:	d055      	beq.n	800d254 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f003 0310 	and.w	r3, r3, #16
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d106      	bne.n	800d1c2 <tcp_close_shutdown+0x62>
 800d1b4:	4b52      	ldr	r3, [pc, #328]	; (800d300 <tcp_close_shutdown+0x1a0>)
 800d1b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d1ba:	4954      	ldr	r1, [pc, #336]	; (800d30c <tcp_close_shutdown+0x1ac>)
 800d1bc:	4852      	ldr	r0, [pc, #328]	; (800d308 <tcp_close_shutdown+0x1a8>)
 800d1be:	f009 fd13 	bl	8016be8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d1ca:	687d      	ldr	r5, [r7, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	8ad2      	ldrh	r2, [r2, #22]
 800d1d4:	6879      	ldr	r1, [r7, #4]
 800d1d6:	8b09      	ldrh	r1, [r1, #24]
 800d1d8:	9102      	str	r1, [sp, #8]
 800d1da:	9201      	str	r2, [sp, #4]
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	462b      	mov	r3, r5
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f005 fd71 	bl	8012ccc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fb4e 	bl	800e88c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d1f0:	4b47      	ldr	r3, [pc, #284]	; (800d310 <tcp_close_shutdown+0x1b0>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d105      	bne.n	800d206 <tcp_close_shutdown+0xa6>
 800d1fa:	4b45      	ldr	r3, [pc, #276]	; (800d310 <tcp_close_shutdown+0x1b0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	4a43      	ldr	r2, [pc, #268]	; (800d310 <tcp_close_shutdown+0x1b0>)
 800d202:	6013      	str	r3, [r2, #0]
 800d204:	e013      	b.n	800d22e <tcp_close_shutdown+0xce>
 800d206:	4b42      	ldr	r3, [pc, #264]	; (800d310 <tcp_close_shutdown+0x1b0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	e00c      	b.n	800d228 <tcp_close_shutdown+0xc8>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	429a      	cmp	r2, r3
 800d216:	d104      	bne.n	800d222 <tcp_close_shutdown+0xc2>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	60da      	str	r2, [r3, #12]
 800d220:	e005      	b.n	800d22e <tcp_close_shutdown+0xce>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1ef      	bne.n	800d20e <tcp_close_shutdown+0xae>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	60da      	str	r2, [r3, #12]
 800d234:	4b37      	ldr	r3, [pc, #220]	; (800d314 <tcp_close_shutdown+0x1b4>)
 800d236:	2201      	movs	r2, #1
 800d238:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d23a:	4b37      	ldr	r3, [pc, #220]	; (800d318 <tcp_close_shutdown+0x1b8>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	429a      	cmp	r2, r3
 800d242:	d102      	bne.n	800d24a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d244:	f003 ffe6 	bl	8011214 <tcp_trigger_input_pcb_close>
 800d248:	e002      	b.n	800d250 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff fed6 	bl	800cffc <tcp_free>
      }
      return ERR_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	e050      	b.n	800d2f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7d1b      	ldrb	r3, [r3, #20]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d03b      	beq.n	800d2d4 <tcp_close_shutdown+0x174>
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	dc44      	bgt.n	800d2ea <tcp_close_shutdown+0x18a>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <tcp_close_shutdown+0x10a>
 800d264:	2b01      	cmp	r3, #1
 800d266:	d02a      	beq.n	800d2be <tcp_close_shutdown+0x15e>
 800d268:	e03f      	b.n	800d2ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8adb      	ldrh	r3, [r3, #22]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d021      	beq.n	800d2b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d272:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <tcp_close_shutdown+0x1bc>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d105      	bne.n	800d288 <tcp_close_shutdown+0x128>
 800d27c:	4b27      	ldr	r3, [pc, #156]	; (800d31c <tcp_close_shutdown+0x1bc>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	4a26      	ldr	r2, [pc, #152]	; (800d31c <tcp_close_shutdown+0x1bc>)
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	e013      	b.n	800d2b0 <tcp_close_shutdown+0x150>
 800d288:	4b24      	ldr	r3, [pc, #144]	; (800d31c <tcp_close_shutdown+0x1bc>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60bb      	str	r3, [r7, #8]
 800d28e:	e00c      	b.n	800d2aa <tcp_close_shutdown+0x14a>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d104      	bne.n	800d2a4 <tcp_close_shutdown+0x144>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	60da      	str	r2, [r3, #12]
 800d2a2:	e005      	b.n	800d2b0 <tcp_close_shutdown+0x150>
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	60bb      	str	r3, [r7, #8]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1ef      	bne.n	800d290 <tcp_close_shutdown+0x130>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff fea0 	bl	800cffc <tcp_free>
      break;
 800d2bc:	e01a      	b.n	800d2f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff ff14 	bl	800d0ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d2c4:	6879      	ldr	r1, [r7, #4]
 800d2c6:	4816      	ldr	r0, [pc, #88]	; (800d320 <tcp_close_shutdown+0x1c0>)
 800d2c8:	f001 fb30 	bl	800e92c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff feb1 	bl	800d034 <tcp_free_listen>
      break;
 800d2d2:	e00f      	b.n	800d2f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d2d4:	6879      	ldr	r1, [r7, #4]
 800d2d6:	480e      	ldr	r0, [pc, #56]	; (800d310 <tcp_close_shutdown+0x1b0>)
 800d2d8:	f001 fb28 	bl	800e92c <tcp_pcb_remove>
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <tcp_close_shutdown+0x1b4>)
 800d2de:	2201      	movs	r2, #1
 800d2e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff fe8a 	bl	800cffc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d2e8:	e004      	b.n	800d2f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f81a 	bl	800d324 <tcp_close_shutdown_fin>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	e000      	b.n	800d2f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800d2fe:	bf00      	nop
 800d300:	08019b74 	.word	0x08019b74
 800d304:	08019c48 	.word	0x08019c48
 800d308:	08019bb8 	.word	0x08019bb8
 800d30c:	08019c68 	.word	0x08019c68
 800d310:	2000d118 	.word	0x2000d118
 800d314:	2000d120 	.word	0x2000d120
 800d318:	2000d158 	.word	0x2000d158
 800d31c:	2000d110 	.word	0x2000d110
 800d320:	2000d114 	.word	0x2000d114

0800d324 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <tcp_close_shutdown_fin+0x1c>
 800d332:	4b2e      	ldr	r3, [pc, #184]	; (800d3ec <tcp_close_shutdown_fin+0xc8>)
 800d334:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d338:	492d      	ldr	r1, [pc, #180]	; (800d3f0 <tcp_close_shutdown_fin+0xcc>)
 800d33a:	482e      	ldr	r0, [pc, #184]	; (800d3f4 <tcp_close_shutdown_fin+0xd0>)
 800d33c:	f009 fc54 	bl	8016be8 <iprintf>

  switch (pcb->state) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7d1b      	ldrb	r3, [r3, #20]
 800d344:	2b07      	cmp	r3, #7
 800d346:	d020      	beq.n	800d38a <tcp_close_shutdown_fin+0x66>
 800d348:	2b07      	cmp	r3, #7
 800d34a:	dc2b      	bgt.n	800d3a4 <tcp_close_shutdown_fin+0x80>
 800d34c:	2b03      	cmp	r3, #3
 800d34e:	d002      	beq.n	800d356 <tcp_close_shutdown_fin+0x32>
 800d350:	2b04      	cmp	r3, #4
 800d352:	d00d      	beq.n	800d370 <tcp_close_shutdown_fin+0x4c>
 800d354:	e026      	b.n	800d3a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f004 fdc6 	bl	8011ee8 <tcp_send_fin>
 800d35c:	4603      	mov	r3, r0
 800d35e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d11f      	bne.n	800d3a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2205      	movs	r2, #5
 800d36c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d36e:	e01b      	b.n	800d3a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f004 fdb9 	bl	8011ee8 <tcp_send_fin>
 800d376:	4603      	mov	r3, r0
 800d378:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d114      	bne.n	800d3ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2205      	movs	r2, #5
 800d386:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d388:	e010      	b.n	800d3ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f004 fdac 	bl	8011ee8 <tcp_send_fin>
 800d390:	4603      	mov	r3, r0
 800d392:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d109      	bne.n	800d3b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2209      	movs	r2, #9
 800d3a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d3a2:	e005      	b.n	800d3b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e01c      	b.n	800d3e2 <tcp_close_shutdown_fin+0xbe>
      break;
 800d3a8:	bf00      	nop
 800d3aa:	e002      	b.n	800d3b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d3ac:	bf00      	nop
 800d3ae:	e000      	b.n	800d3b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d3b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d103      	bne.n	800d3c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f004 fed2 	bl	8012164 <tcp_output>
 800d3c0:	e00d      	b.n	800d3de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ca:	d108      	bne.n	800d3de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	8b5b      	ldrh	r3, [r3, #26]
 800d3d0:	f043 0308 	orr.w	r3, r3, #8
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e001      	b.n	800d3e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	08019b74 	.word	0x08019b74
 800d3f0:	08019c24 	.word	0x08019c24
 800d3f4:	08019bb8 	.word	0x08019bb8

0800d3f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d109      	bne.n	800d41a <tcp_close+0x22>
 800d406:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <tcp_close+0x4c>)
 800d408:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d40c:	490e      	ldr	r1, [pc, #56]	; (800d448 <tcp_close+0x50>)
 800d40e:	480f      	ldr	r0, [pc, #60]	; (800d44c <tcp_close+0x54>)
 800d410:	f009 fbea 	bl	8016be8 <iprintf>
 800d414:	f06f 030f 	mvn.w	r3, #15
 800d418:	e00f      	b.n	800d43a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7d1b      	ldrb	r3, [r3, #20]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d006      	beq.n	800d430 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	8b5b      	ldrh	r3, [r3, #26]
 800d426:	f043 0310 	orr.w	r3, r3, #16
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d430:	2101      	movs	r1, #1
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fe94 	bl	800d160 <tcp_close_shutdown>
 800d438:	4603      	mov	r3, r0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	08019b74 	.word	0x08019b74
 800d448:	08019c84 	.word	0x08019c84
 800d44c:	08019bb8 	.word	0x08019bb8

0800d450 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d109      	bne.n	800d476 <tcp_shutdown+0x26>
 800d462:	4b26      	ldr	r3, [pc, #152]	; (800d4fc <tcp_shutdown+0xac>)
 800d464:	f240 2207 	movw	r2, #519	; 0x207
 800d468:	4925      	ldr	r1, [pc, #148]	; (800d500 <tcp_shutdown+0xb0>)
 800d46a:	4826      	ldr	r0, [pc, #152]	; (800d504 <tcp_shutdown+0xb4>)
 800d46c:	f009 fbbc 	bl	8016be8 <iprintf>
 800d470:	f06f 030f 	mvn.w	r3, #15
 800d474:	e03d      	b.n	800d4f2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	7d1b      	ldrb	r3, [r3, #20]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d102      	bne.n	800d484 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d47e:	f06f 030a 	mvn.w	r3, #10
 800d482:	e036      	b.n	800d4f2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d01b      	beq.n	800d4c2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8b5b      	ldrh	r3, [r3, #26]
 800d48e:	f043 0310 	orr.w	r3, r3, #16
 800d492:	b29a      	uxth	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d005      	beq.n	800d4aa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d49e:	2101      	movs	r1, #1
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff fe5d 	bl	800d160 <tcp_close_shutdown>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	e023      	b.n	800d4f2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d007      	beq.n	800d4c2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fae4 	bl	800ca84 <pbuf_free>
      pcb->refused_data = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d013      	beq.n	800d4f0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	7d1b      	ldrb	r3, [r3, #20]
 800d4cc:	2b04      	cmp	r3, #4
 800d4ce:	dc02      	bgt.n	800d4d6 <tcp_shutdown+0x86>
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	da02      	bge.n	800d4da <tcp_shutdown+0x8a>
 800d4d4:	e009      	b.n	800d4ea <tcp_shutdown+0x9a>
 800d4d6:	2b07      	cmp	r3, #7
 800d4d8:	d107      	bne.n	800d4ea <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	4619      	mov	r1, r3
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7ff fe3d 	bl	800d160 <tcp_close_shutdown>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	e003      	b.n	800d4f2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d4ea:	f06f 030a 	mvn.w	r3, #10
 800d4ee:	e000      	b.n	800d4f2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	08019b74 	.word	0x08019b74
 800d500:	08019c9c 	.word	0x08019c9c
 800d504:	08019bb8 	.word	0x08019bb8

0800d508 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08e      	sub	sp, #56	; 0x38
 800d50c:	af04      	add	r7, sp, #16
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d107      	bne.n	800d528 <tcp_abandon+0x20>
 800d518:	4b52      	ldr	r3, [pc, #328]	; (800d664 <tcp_abandon+0x15c>)
 800d51a:	f240 223d 	movw	r2, #573	; 0x23d
 800d51e:	4952      	ldr	r1, [pc, #328]	; (800d668 <tcp_abandon+0x160>)
 800d520:	4852      	ldr	r0, [pc, #328]	; (800d66c <tcp_abandon+0x164>)
 800d522:	f009 fb61 	bl	8016be8 <iprintf>
 800d526:	e099      	b.n	800d65c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	7d1b      	ldrb	r3, [r3, #20]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d106      	bne.n	800d53e <tcp_abandon+0x36>
 800d530:	4b4c      	ldr	r3, [pc, #304]	; (800d664 <tcp_abandon+0x15c>)
 800d532:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d536:	494e      	ldr	r1, [pc, #312]	; (800d670 <tcp_abandon+0x168>)
 800d538:	484c      	ldr	r0, [pc, #304]	; (800d66c <tcp_abandon+0x164>)
 800d53a:	f009 fb55 	bl	8016be8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7d1b      	ldrb	r3, [r3, #20]
 800d542:	2b0a      	cmp	r3, #10
 800d544:	d107      	bne.n	800d556 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d546:	6879      	ldr	r1, [r7, #4]
 800d548:	484a      	ldr	r0, [pc, #296]	; (800d674 <tcp_abandon+0x16c>)
 800d54a:	f001 f9ef 	bl	800e92c <tcp_pcb_remove>
    tcp_free(pcb);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff fd54 	bl	800cffc <tcp_free>
 800d554:	e082      	b.n	800d65c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d562:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d570:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	7d1b      	ldrb	r3, [r3, #20]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d126      	bne.n	800d5ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	8adb      	ldrh	r3, [r3, #22]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d02e      	beq.n	800d5e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d588:	4b3b      	ldr	r3, [pc, #236]	; (800d678 <tcp_abandon+0x170>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d105      	bne.n	800d59e <tcp_abandon+0x96>
 800d592:	4b39      	ldr	r3, [pc, #228]	; (800d678 <tcp_abandon+0x170>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	4a37      	ldr	r2, [pc, #220]	; (800d678 <tcp_abandon+0x170>)
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	e013      	b.n	800d5c6 <tcp_abandon+0xbe>
 800d59e:	4b36      	ldr	r3, [pc, #216]	; (800d678 <tcp_abandon+0x170>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	61fb      	str	r3, [r7, #28]
 800d5a4:	e00c      	b.n	800d5c0 <tcp_abandon+0xb8>
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d104      	bne.n	800d5ba <tcp_abandon+0xb2>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68da      	ldr	r2, [r3, #12]
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	60da      	str	r2, [r3, #12]
 800d5b8:	e005      	b.n	800d5c6 <tcp_abandon+0xbe>
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	61fb      	str	r3, [r7, #28]
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1ef      	bne.n	800d5a6 <tcp_abandon+0x9e>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	60da      	str	r2, [r3, #12]
 800d5cc:	e00b      	b.n	800d5e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	8adb      	ldrh	r3, [r3, #22]
 800d5d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	4828      	ldr	r0, [pc, #160]	; (800d67c <tcp_abandon+0x174>)
 800d5dc:	f001 f9a6 	bl	800e92c <tcp_pcb_remove>
 800d5e0:	4b27      	ldr	r3, [pc, #156]	; (800d680 <tcp_abandon+0x178>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 fe7a 	bl	800e2ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d604:	4618      	mov	r0, r3
 800d606:	f000 fe71 	bl	800e2ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d004      	beq.n	800d61c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fe68 	bl	800e2ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00e      	beq.n	800d640 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3304      	adds	r3, #4
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	8b12      	ldrh	r2, [r2, #24]
 800d62c:	9202      	str	r2, [sp, #8]
 800d62e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d630:	9201      	str	r2, [sp, #4]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	460b      	mov	r3, r1
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	69b9      	ldr	r1, [r7, #24]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f005 fb46 	bl	8012ccc <tcp_rst>
    }
    last_state = pcb->state;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	7d1b      	ldrb	r3, [r3, #20]
 800d644:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff fcd8 	bl	800cffc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d004      	beq.n	800d65c <tcp_abandon+0x154>
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f06f 010c 	mvn.w	r1, #12
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	4798      	blx	r3
  }
}
 800d65c:	3728      	adds	r7, #40	; 0x28
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	08019b74 	.word	0x08019b74
 800d668:	08019cb8 	.word	0x08019cb8
 800d66c:	08019bb8 	.word	0x08019bb8
 800d670:	08019cd4 	.word	0x08019cd4
 800d674:	2000d11c 	.word	0x2000d11c
 800d678:	2000d110 	.word	0x2000d110
 800d67c:	2000d118 	.word	0x2000d118
 800d680:	2000d120 	.word	0x2000d120

0800d684 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d68c:	2101      	movs	r1, #1
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff ff3a 	bl	800d508 <tcp_abandon>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <tcp_update_rcv_ann_wnd+0x1c>
 800d6aa:	4b25      	ldr	r3, [pc, #148]	; (800d740 <tcp_update_rcv_ann_wnd+0xa4>)
 800d6ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d6b0:	4924      	ldr	r1, [pc, #144]	; (800d744 <tcp_update_rcv_ann_wnd+0xa8>)
 800d6b2:	4825      	ldr	r0, [pc, #148]	; (800d748 <tcp_update_rcv_ann_wnd+0xac>)
 800d6b4:	f009 fa98 	bl	8016be8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d6c0:	4413      	add	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d6cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d6d0:	bf28      	it	cs
 800d6d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d6d6:	b292      	uxth	r2, r2
 800d6d8:	4413      	add	r3, r2
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	db08      	blt.n	800d6f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	e020      	b.n	800d736 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dd03      	ble.n	800d70a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d708:	e014      	b.n	800d734 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d71c:	d306      	bcc.n	800d72c <tcp_update_rcv_ann_wnd+0x90>
 800d71e:	4b08      	ldr	r3, [pc, #32]	; (800d740 <tcp_update_rcv_ann_wnd+0xa4>)
 800d720:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d724:	4909      	ldr	r1, [pc, #36]	; (800d74c <tcp_update_rcv_ann_wnd+0xb0>)
 800d726:	4808      	ldr	r0, [pc, #32]	; (800d748 <tcp_update_rcv_ann_wnd+0xac>)
 800d728:	f009 fa5e 	bl	8016be8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	b29a      	uxth	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d734:	2300      	movs	r3, #0
  }
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	08019b74 	.word	0x08019b74
 800d744:	08019dd0 	.word	0x08019dd0
 800d748:	08019bb8 	.word	0x08019bb8
 800d74c:	08019df4 	.word	0x08019df4

0800d750 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	460b      	mov	r3, r1
 800d75a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d107      	bne.n	800d772 <tcp_recved+0x22>
 800d762:	4b1f      	ldr	r3, [pc, #124]	; (800d7e0 <tcp_recved+0x90>)
 800d764:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d768:	491e      	ldr	r1, [pc, #120]	; (800d7e4 <tcp_recved+0x94>)
 800d76a:	481f      	ldr	r0, [pc, #124]	; (800d7e8 <tcp_recved+0x98>)
 800d76c:	f009 fa3c 	bl	8016be8 <iprintf>
 800d770:	e032      	b.n	800d7d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	7d1b      	ldrb	r3, [r3, #20]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d106      	bne.n	800d788 <tcp_recved+0x38>
 800d77a:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <tcp_recved+0x90>)
 800d77c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d780:	491a      	ldr	r1, [pc, #104]	; (800d7ec <tcp_recved+0x9c>)
 800d782:	4819      	ldr	r0, [pc, #100]	; (800d7e8 <tcp_recved+0x98>)
 800d784:	f009 fa30 	bl	8016be8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d78c:	887b      	ldrh	r3, [r7, #2]
 800d78e:	4413      	add	r3, r2
 800d790:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d792:	89fb      	ldrh	r3, [r7, #14]
 800d794:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d798:	d804      	bhi.n	800d7a4 <tcp_recved+0x54>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d79e:	89fa      	ldrh	r2, [r7, #14]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d204      	bcs.n	800d7ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d7aa:	851a      	strh	r2, [r3, #40]	; 0x28
 800d7ac:	e002      	b.n	800d7b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	89fa      	ldrh	r2, [r7, #14]
 800d7b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff ff71 	bl	800d69c <tcp_update_rcv_ann_wnd>
 800d7ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d7c2:	d309      	bcc.n	800d7d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	8b5b      	ldrh	r3, [r3, #26]
 800d7c8:	f043 0302 	orr.w	r3, r3, #2
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f004 fcc6 	bl	8012164 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	08019b74 	.word	0x08019b74
 800d7e4:	08019e10 	.word	0x08019e10
 800d7e8:	08019bb8 	.word	0x08019bb8
 800d7ec:	08019e28 	.word	0x08019e28

0800d7f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d7fa:	4b1e      	ldr	r3, [pc, #120]	; (800d874 <tcp_new_port+0x84>)
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	3301      	adds	r3, #1
 800d800:	b29a      	uxth	r2, r3
 800d802:	4b1c      	ldr	r3, [pc, #112]	; (800d874 <tcp_new_port+0x84>)
 800d804:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d806:	4b1b      	ldr	r3, [pc, #108]	; (800d874 <tcp_new_port+0x84>)
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d80e:	4293      	cmp	r3, r2
 800d810:	d103      	bne.n	800d81a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d812:	4b18      	ldr	r3, [pc, #96]	; (800d874 <tcp_new_port+0x84>)
 800d814:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d818:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d81a:	2300      	movs	r3, #0
 800d81c:	71fb      	strb	r3, [r7, #7]
 800d81e:	e01e      	b.n	800d85e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	4a15      	ldr	r2, [pc, #84]	; (800d878 <tcp_new_port+0x88>)
 800d824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	603b      	str	r3, [r7, #0]
 800d82c:	e011      	b.n	800d852 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	8ada      	ldrh	r2, [r3, #22]
 800d832:	4b10      	ldr	r3, [pc, #64]	; (800d874 <tcp_new_port+0x84>)
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d108      	bne.n	800d84c <tcp_new_port+0x5c>
        n++;
 800d83a:	88bb      	ldrh	r3, [r7, #4]
 800d83c:	3301      	adds	r3, #1
 800d83e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d840:	88bb      	ldrh	r3, [r7, #4]
 800d842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d846:	d3d8      	bcc.n	800d7fa <tcp_new_port+0xa>
          return 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	e00d      	b.n	800d868 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	603b      	str	r3, [r7, #0]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1ea      	bne.n	800d82e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d858:	79fb      	ldrb	r3, [r7, #7]
 800d85a:	3301      	adds	r3, #1
 800d85c:	71fb      	strb	r3, [r7, #7]
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	2b03      	cmp	r3, #3
 800d862:	d9dd      	bls.n	800d820 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d864:	4b03      	ldr	r3, [pc, #12]	; (800d874 <tcp_new_port+0x84>)
 800d866:	881b      	ldrh	r3, [r3, #0]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	20000024 	.word	0x20000024
 800d878:	0801bc4c 	.word	0x0801bc4c

0800d87c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	4613      	mov	r3, r2
 800d88a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d109      	bne.n	800d8aa <tcp_connect+0x2e>
 800d896:	4b7d      	ldr	r3, [pc, #500]	; (800da8c <tcp_connect+0x210>)
 800d898:	f240 4235 	movw	r2, #1077	; 0x435
 800d89c:	497c      	ldr	r1, [pc, #496]	; (800da90 <tcp_connect+0x214>)
 800d89e:	487d      	ldr	r0, [pc, #500]	; (800da94 <tcp_connect+0x218>)
 800d8a0:	f009 f9a2 	bl	8016be8 <iprintf>
 800d8a4:	f06f 030f 	mvn.w	r3, #15
 800d8a8:	e0ec      	b.n	800da84 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d109      	bne.n	800d8c4 <tcp_connect+0x48>
 800d8b0:	4b76      	ldr	r3, [pc, #472]	; (800da8c <tcp_connect+0x210>)
 800d8b2:	f240 4236 	movw	r2, #1078	; 0x436
 800d8b6:	4978      	ldr	r1, [pc, #480]	; (800da98 <tcp_connect+0x21c>)
 800d8b8:	4876      	ldr	r0, [pc, #472]	; (800da94 <tcp_connect+0x218>)
 800d8ba:	f009 f995 	bl	8016be8 <iprintf>
 800d8be:	f06f 030f 	mvn.w	r3, #15
 800d8c2:	e0df      	b.n	800da84 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d009      	beq.n	800d8e0 <tcp_connect+0x64>
 800d8cc:	4b6f      	ldr	r3, [pc, #444]	; (800da8c <tcp_connect+0x210>)
 800d8ce:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d8d2:	4972      	ldr	r1, [pc, #456]	; (800da9c <tcp_connect+0x220>)
 800d8d4:	486f      	ldr	r0, [pc, #444]	; (800da94 <tcp_connect+0x218>)
 800d8d6:	f009 f987 	bl	8016be8 <iprintf>
 800d8da:	f06f 0309 	mvn.w	r3, #9
 800d8de:	e0d1      	b.n	800da84 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <tcp_connect+0x70>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	e000      	b.n	800d8ee <tcp_connect+0x72>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	88fa      	ldrh	r2, [r7, #6]
 800d8f6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	7a1b      	ldrb	r3, [r3, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	7a1b      	ldrb	r3, [r3, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f7fe fd2f 	bl	800c368 <netif_get_by_index>
 800d90a:	6278      	str	r0, [r7, #36]	; 0x24
 800d90c:	e005      	b.n	800d91a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3304      	adds	r3, #4
 800d912:	4618      	mov	r0, r3
 800d914:	f007 fb70 	bl	8014ff8 <ip4_route>
 800d918:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d920:	f06f 0303 	mvn.w	r3, #3
 800d924:	e0ae      	b.n	800da84 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d003      	beq.n	800d934 <tcp_connect+0xb8>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d111      	bne.n	800d958 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <tcp_connect+0xc4>
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	3304      	adds	r3, #4
 800d93e:	e000      	b.n	800d942 <tcp_connect+0xc6>
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <tcp_connect+0xd4>
      return ERR_RTE;
 800d94a:	f06f 0303 	mvn.w	r3, #3
 800d94e:	e099      	b.n	800da84 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	8adb      	ldrh	r3, [r3, #22]
 800d95c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	8adb      	ldrh	r3, [r3, #22]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10c      	bne.n	800d980 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d966:	f7ff ff43 	bl	800d7f0 <tcp_new_port>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461a      	mov	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	8adb      	ldrh	r3, [r3, #22]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d102      	bne.n	800d980 <tcp_connect+0x104>
      return ERR_BUF;
 800d97a:	f06f 0301 	mvn.w	r3, #1
 800d97e:	e081      	b.n	800da84 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f001 f867 	bl	800ea54 <tcp_next_iss>
 800d986:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	1e5a      	subs	r2, r3, #1
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	1e5a      	subs	r2, r3, #1
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	1e5a      	subs	r2, r3, #1
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d9b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d9ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9d4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	461a      	mov	r2, r3
 800d9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9e2:	f001 f85d 	bl	800eaa0 <tcp_eff_send_mss_netif>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d9fe:	2102      	movs	r1, #2
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f004 fac1 	bl	8011f88 <tcp_enqueue_flags>
 800da06:	4603      	mov	r3, r0
 800da08:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800da0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d136      	bne.n	800da80 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2202      	movs	r2, #2
 800da16:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800da18:	8b7b      	ldrh	r3, [r7, #26]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d021      	beq.n	800da62 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800da1e:	4b20      	ldr	r3, [pc, #128]	; (800daa0 <tcp_connect+0x224>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	429a      	cmp	r2, r3
 800da26:	d105      	bne.n	800da34 <tcp_connect+0x1b8>
 800da28:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <tcp_connect+0x224>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	4a1c      	ldr	r2, [pc, #112]	; (800daa0 <tcp_connect+0x224>)
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	e013      	b.n	800da5c <tcp_connect+0x1e0>
 800da34:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <tcp_connect+0x224>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	623b      	str	r3, [r7, #32]
 800da3a:	e00c      	b.n	800da56 <tcp_connect+0x1da>
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	429a      	cmp	r2, r3
 800da44:	d104      	bne.n	800da50 <tcp_connect+0x1d4>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68da      	ldr	r2, [r3, #12]
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	60da      	str	r2, [r3, #12]
 800da4e:	e005      	b.n	800da5c <tcp_connect+0x1e0>
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	623b      	str	r3, [r7, #32]
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1ef      	bne.n	800da3c <tcp_connect+0x1c0>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800da62:	4b10      	ldr	r3, [pc, #64]	; (800daa4 <tcp_connect+0x228>)
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	60da      	str	r2, [r3, #12]
 800da6a:	4a0e      	ldr	r2, [pc, #56]	; (800daa4 <tcp_connect+0x228>)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	f005 faee 	bl	8013050 <tcp_timer_needed>
 800da74:	4b0c      	ldr	r3, [pc, #48]	; (800daa8 <tcp_connect+0x22c>)
 800da76:	2201      	movs	r2, #1
 800da78:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f004 fb72 	bl	8012164 <tcp_output>
  }
  return ret;
 800da80:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3728      	adds	r7, #40	; 0x28
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	08019b74 	.word	0x08019b74
 800da90:	08019e50 	.word	0x08019e50
 800da94:	08019bb8 	.word	0x08019bb8
 800da98:	08019e6c 	.word	0x08019e6c
 800da9c:	08019e88 	.word	0x08019e88
 800daa0:	2000d110 	.word	0x2000d110
 800daa4:	2000d118 	.word	0x2000d118
 800daa8:	2000d120 	.word	0x2000d120

0800daac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800daac:	b5b0      	push	{r4, r5, r7, lr}
 800daae:	b090      	sub	sp, #64	; 0x40
 800dab0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dab8:	4b94      	ldr	r3, [pc, #592]	; (800dd0c <tcp_slowtmr+0x260>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3301      	adds	r3, #1
 800dabe:	4a93      	ldr	r2, [pc, #588]	; (800dd0c <tcp_slowtmr+0x260>)
 800dac0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dac2:	4b93      	ldr	r3, [pc, #588]	; (800dd10 <tcp_slowtmr+0x264>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b91      	ldr	r3, [pc, #580]	; (800dd10 <tcp_slowtmr+0x264>)
 800dacc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dad2:	4b90      	ldr	r3, [pc, #576]	; (800dd14 <tcp_slowtmr+0x268>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dad8:	e29f      	b.n	800e01a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	7d1b      	ldrb	r3, [r3, #20]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d106      	bne.n	800daf0 <tcp_slowtmr+0x44>
 800dae2:	4b8d      	ldr	r3, [pc, #564]	; (800dd18 <tcp_slowtmr+0x26c>)
 800dae4:	f240 42be 	movw	r2, #1214	; 0x4be
 800dae8:	498c      	ldr	r1, [pc, #560]	; (800dd1c <tcp_slowtmr+0x270>)
 800daea:	488d      	ldr	r0, [pc, #564]	; (800dd20 <tcp_slowtmr+0x274>)
 800daec:	f009 f87c 	bl	8016be8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d106      	bne.n	800db06 <tcp_slowtmr+0x5a>
 800daf8:	4b87      	ldr	r3, [pc, #540]	; (800dd18 <tcp_slowtmr+0x26c>)
 800dafa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dafe:	4989      	ldr	r1, [pc, #548]	; (800dd24 <tcp_slowtmr+0x278>)
 800db00:	4887      	ldr	r0, [pc, #540]	; (800dd20 <tcp_slowtmr+0x274>)
 800db02:	f009 f871 	bl	8016be8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	7d1b      	ldrb	r3, [r3, #20]
 800db0a:	2b0a      	cmp	r3, #10
 800db0c:	d106      	bne.n	800db1c <tcp_slowtmr+0x70>
 800db0e:	4b82      	ldr	r3, [pc, #520]	; (800dd18 <tcp_slowtmr+0x26c>)
 800db10:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800db14:	4984      	ldr	r1, [pc, #528]	; (800dd28 <tcp_slowtmr+0x27c>)
 800db16:	4882      	ldr	r0, [pc, #520]	; (800dd20 <tcp_slowtmr+0x274>)
 800db18:	f009 f866 	bl	8016be8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	7f9a      	ldrb	r2, [r3, #30]
 800db20:	4b7b      	ldr	r3, [pc, #492]	; (800dd10 <tcp_slowtmr+0x264>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	429a      	cmp	r2, r3
 800db26:	d105      	bne.n	800db34 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800db32:	e272      	b.n	800e01a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800db34:	4b76      	ldr	r3, [pc, #472]	; (800dd10 <tcp_slowtmr+0x264>)
 800db36:	781a      	ldrb	r2, [r3, #0]
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800db42:	2300      	movs	r3, #0
 800db44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d10a      	bne.n	800db66 <tcp_slowtmr+0xba>
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db56:	2b05      	cmp	r3, #5
 800db58:	d905      	bls.n	800db66 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800db5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db5e:	3301      	adds	r3, #1
 800db60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db64:	e11e      	b.n	800dda4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800db66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db6c:	2b0b      	cmp	r3, #11
 800db6e:	d905      	bls.n	800db7c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800db70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db74:	3301      	adds	r3, #1
 800db76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db7a:	e113      	b.n	800dda4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db82:	2b00      	cmp	r3, #0
 800db84:	d075      	beq.n	800dc72 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d006      	beq.n	800db9c <tcp_slowtmr+0xf0>
 800db8e:	4b62      	ldr	r3, [pc, #392]	; (800dd18 <tcp_slowtmr+0x26c>)
 800db90:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800db94:	4965      	ldr	r1, [pc, #404]	; (800dd2c <tcp_slowtmr+0x280>)
 800db96:	4862      	ldr	r0, [pc, #392]	; (800dd20 <tcp_slowtmr+0x274>)
 800db98:	f009 f826 	bl	8016be8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <tcp_slowtmr+0x106>
 800dba4:	4b5c      	ldr	r3, [pc, #368]	; (800dd18 <tcp_slowtmr+0x26c>)
 800dba6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dbaa:	4961      	ldr	r1, [pc, #388]	; (800dd30 <tcp_slowtmr+0x284>)
 800dbac:	485c      	ldr	r0, [pc, #368]	; (800dd20 <tcp_slowtmr+0x274>)
 800dbae:	f009 f81b 	bl	8016be8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dbb8:	2b0b      	cmp	r3, #11
 800dbba:	d905      	bls.n	800dbc8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbc6:	e0ed      	b.n	800dda4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	4a58      	ldr	r2, [pc, #352]	; (800dd34 <tcp_slowtmr+0x288>)
 800dbd2:	5cd3      	ldrb	r3, [r2, r3]
 800dbd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dbdc:	7c7a      	ldrb	r2, [r7, #17]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d907      	bls.n	800dbf2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dbe8:	3301      	adds	r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dbf8:	7c7a      	ldrb	r2, [r7, #17]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	f200 80d2 	bhi.w	800dda4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dc00:	2301      	movs	r3, #1
 800dc02:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d108      	bne.n	800dc20 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc10:	f005 f950 	bl	8012eb4 <tcp_zero_window_probe>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d014      	beq.n	800dc44 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	623b      	str	r3, [r7, #32]
 800dc1e:	e011      	b.n	800dc44 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc26:	4619      	mov	r1, r3
 800dc28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc2a:	f004 f815 	bl	8011c58 <tcp_split_unsent_seg>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d107      	bne.n	800dc44 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dc34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc36:	f004 fa95 	bl	8012164 <tcp_output>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f000 80ac 	beq.w	800dda4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc5a:	2b06      	cmp	r3, #6
 800dc5c:	f200 80a2 	bhi.w	800dda4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc66:	3301      	adds	r3, #1
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dc70:	e098      	b.n	800dda4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	db0f      	blt.n	800dc9c <tcp_slowtmr+0x1f0>
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d008      	beq.n	800dc9c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	3301      	adds	r3, #1
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	b21a      	sxth	r2, r3
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	db7b      	blt.n	800dda4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dcac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcae:	f004 fd4d 	bl	801274c <tcp_rexmit_rto_prepare>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <tcp_slowtmr+0x21c>
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d171      	bne.n	800dda4 <tcp_slowtmr+0x2f8>
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d06d      	beq.n	800dda4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800dcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d03a      	beq.n	800dd46 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcd6:	2b0c      	cmp	r3, #12
 800dcd8:	bf28      	it	cs
 800dcda:	230c      	movcs	r3, #12
 800dcdc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dce4:	10db      	asrs	r3, r3, #3
 800dce6:	b21b      	sxth	r3, r3
 800dce8:	461a      	mov	r2, r3
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dcf0:	4413      	add	r3, r2
 800dcf2:	7efa      	ldrb	r2, [r7, #27]
 800dcf4:	4910      	ldr	r1, [pc, #64]	; (800dd38 <tcp_slowtmr+0x28c>)
 800dcf6:	5c8a      	ldrb	r2, [r1, r2]
 800dcf8:	4093      	lsls	r3, r2
 800dcfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dd02:	4293      	cmp	r3, r2
 800dd04:	dc1a      	bgt.n	800dd3c <tcp_slowtmr+0x290>
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	b21a      	sxth	r2, r3
 800dd0a:	e019      	b.n	800dd40 <tcp_slowtmr+0x294>
 800dd0c:	2000d10c 	.word	0x2000d10c
 800dd10:	2000d122 	.word	0x2000d122
 800dd14:	2000d118 	.word	0x2000d118
 800dd18:	08019b74 	.word	0x08019b74
 800dd1c:	08019eb8 	.word	0x08019eb8
 800dd20:	08019bb8 	.word	0x08019bb8
 800dd24:	08019ee4 	.word	0x08019ee4
 800dd28:	08019f10 	.word	0x08019f10
 800dd2c:	08019f40 	.word	0x08019f40
 800dd30:	08019f74 	.word	0x08019f74
 800dd34:	0801bc44 	.word	0x0801bc44
 800dd38:	0801bc34 	.word	0x0801bc34
 800dd3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	2200      	movs	r2, #0
 800dd4a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	bf28      	it	cs
 800dd5c:	4613      	movcs	r3, r2
 800dd5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dd60:	8a7b      	ldrh	r3, [r7, #18]
 800dd62:	085b      	lsrs	r3, r3, #1
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd76:	005b      	lsls	r3, r3, #1
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d206      	bcs.n	800dd8c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dd9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dda0:	f004 fd44 	bl	801282c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda6:	7d1b      	ldrb	r3, [r3, #20]
 800dda8:	2b06      	cmp	r3, #6
 800ddaa:	d111      	bne.n	800ddd0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	8b5b      	ldrh	r3, [r3, #26]
 800ddb0:	f003 0310 	and.w	r3, r3, #16
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00b      	beq.n	800ddd0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddb8:	4b9d      	ldr	r3, [pc, #628]	; (800e030 <tcp_slowtmr+0x584>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	2b28      	cmp	r3, #40	; 0x28
 800ddc4:	d904      	bls.n	800ddd0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ddc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddca:	3301      	adds	r3, #1
 800ddcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	7a5b      	ldrb	r3, [r3, #9]
 800ddd4:	f003 0308 	and.w	r3, r3, #8
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d04c      	beq.n	800de76 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dde0:	2b04      	cmp	r3, #4
 800dde2:	d003      	beq.n	800ddec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dde8:	2b07      	cmp	r3, #7
 800ddea:	d144      	bne.n	800de76 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddec:	4b90      	ldr	r3, [pc, #576]	; (800e030 <tcp_slowtmr+0x584>)
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddfc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800de00:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800de04:	498b      	ldr	r1, [pc, #556]	; (800e034 <tcp_slowtmr+0x588>)
 800de06:	fba1 1303 	umull	r1, r3, r1, r3
 800de0a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d90a      	bls.n	800de26 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800de10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de14:	3301      	adds	r3, #1
 800de16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800de1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de1e:	3301      	adds	r3, #1
 800de20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de24:	e027      	b.n	800de76 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de26:	4b82      	ldr	r3, [pc, #520]	; (800e030 <tcp_slowtmr+0x584>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800de3c:	4618      	mov	r0, r3
 800de3e:	4b7e      	ldr	r3, [pc, #504]	; (800e038 <tcp_slowtmr+0x58c>)
 800de40:	fb00 f303 	mul.w	r3, r0, r3
 800de44:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800de46:	497b      	ldr	r1, [pc, #492]	; (800e034 <tcp_slowtmr+0x588>)
 800de48:	fba1 1303 	umull	r1, r3, r1, r3
 800de4c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de4e:	429a      	cmp	r2, r3
 800de50:	d911      	bls.n	800de76 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800de52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de54:	f004 ffee 	bl	8012e34 <tcp_keepalive>
 800de58:	4603      	mov	r3, r0
 800de5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800de5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800de62:	2b00      	cmp	r3, #0
 800de64:	d107      	bne.n	800de76 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800de6c:	3301      	adds	r3, #1
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d011      	beq.n	800dea2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800de7e:	4b6c      	ldr	r3, [pc, #432]	; (800e030 <tcp_slowtmr+0x584>)
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	1ad2      	subs	r2, r2, r3
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800de8e:	4619      	mov	r1, r3
 800de90:	460b      	mov	r3, r1
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	440b      	add	r3, r1
 800de96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800de98:	429a      	cmp	r2, r3
 800de9a:	d302      	bcc.n	800dea2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800de9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de9e:	f000 fea9 	bl	800ebf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	7d1b      	ldrb	r3, [r3, #20]
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d10b      	bne.n	800dec2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deaa:	4b61      	ldr	r3, [pc, #388]	; (800e030 <tcp_slowtmr+0x584>)
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b28      	cmp	r3, #40	; 0x28
 800deb6:	d904      	bls.n	800dec2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800deb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800debc:	3301      	adds	r3, #1
 800debe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec4:	7d1b      	ldrb	r3, [r3, #20]
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d10b      	bne.n	800dee2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800deca:	4b59      	ldr	r3, [pc, #356]	; (800e030 <tcp_slowtmr+0x584>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	6a1b      	ldr	r3, [r3, #32]
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	2bf0      	cmp	r3, #240	; 0xf0
 800ded6:	d904      	bls.n	800dee2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ded8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dedc:	3301      	adds	r3, #1
 800dede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d060      	beq.n	800dfac <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800def2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800def4:	f000 fcca 	bl	800e88c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	d010      	beq.n	800df20 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800defe:	4b4f      	ldr	r3, [pc, #316]	; (800e03c <tcp_slowtmr+0x590>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df04:	429a      	cmp	r2, r3
 800df06:	d106      	bne.n	800df16 <tcp_slowtmr+0x46a>
 800df08:	4b4d      	ldr	r3, [pc, #308]	; (800e040 <tcp_slowtmr+0x594>)
 800df0a:	f240 526d 	movw	r2, #1389	; 0x56d
 800df0e:	494d      	ldr	r1, [pc, #308]	; (800e044 <tcp_slowtmr+0x598>)
 800df10:	484d      	ldr	r0, [pc, #308]	; (800e048 <tcp_slowtmr+0x59c>)
 800df12:	f008 fe69 	bl	8016be8 <iprintf>
        prev->next = pcb->next;
 800df16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1c:	60da      	str	r2, [r3, #12]
 800df1e:	e00f      	b.n	800df40 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800df20:	4b46      	ldr	r3, [pc, #280]	; (800e03c <tcp_slowtmr+0x590>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df26:	429a      	cmp	r2, r3
 800df28:	d006      	beq.n	800df38 <tcp_slowtmr+0x48c>
 800df2a:	4b45      	ldr	r3, [pc, #276]	; (800e040 <tcp_slowtmr+0x594>)
 800df2c:	f240 5271 	movw	r2, #1393	; 0x571
 800df30:	4946      	ldr	r1, [pc, #280]	; (800e04c <tcp_slowtmr+0x5a0>)
 800df32:	4845      	ldr	r0, [pc, #276]	; (800e048 <tcp_slowtmr+0x59c>)
 800df34:	f008 fe58 	bl	8016be8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	4a3f      	ldr	r2, [pc, #252]	; (800e03c <tcp_slowtmr+0x590>)
 800df3e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800df40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df44:	2b00      	cmp	r3, #0
 800df46:	d013      	beq.n	800df70 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df50:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	3304      	adds	r3, #4
 800df56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df58:	8ad2      	ldrh	r2, [r2, #22]
 800df5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df5c:	8b09      	ldrh	r1, [r1, #24]
 800df5e:	9102      	str	r1, [sp, #8]
 800df60:	9201      	str	r2, [sp, #4]
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	462b      	mov	r3, r5
 800df66:	4622      	mov	r2, r4
 800df68:	4601      	mov	r1, r0
 800df6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df6c:	f004 feae 	bl	8012ccc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	7d1b      	ldrb	r3, [r3, #20]
 800df7a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800df86:	6838      	ldr	r0, [r7, #0]
 800df88:	f7ff f838 	bl	800cffc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800df8c:	4b30      	ldr	r3, [pc, #192]	; (800e050 <tcp_slowtmr+0x5a4>)
 800df8e:	2200      	movs	r2, #0
 800df90:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d004      	beq.n	800dfa2 <tcp_slowtmr+0x4f6>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f06f 010c 	mvn.w	r1, #12
 800df9e:	68b8      	ldr	r0, [r7, #8]
 800dfa0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dfa2:	4b2b      	ldr	r3, [pc, #172]	; (800e050 <tcp_slowtmr+0x5a4>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d037      	beq.n	800e01a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dfaa:	e590      	b.n	800dace <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb8:	7f1b      	ldrb	r3, [r3, #28]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	b2da      	uxtb	r2, r3
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	7f1a      	ldrb	r2, [r3, #28]
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	7f5b      	ldrb	r3, [r3, #29]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d325      	bcc.n	800e01a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dfd4:	4b1e      	ldr	r3, [pc, #120]	; (800e050 <tcp_slowtmr+0x5a4>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00b      	beq.n	800dffc <tcp_slowtmr+0x550>
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfec:	6912      	ldr	r2, [r2, #16]
 800dfee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dff0:	4610      	mov	r0, r2
 800dff2:	4798      	blx	r3
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800dffa:	e002      	b.n	800e002 <tcp_slowtmr+0x556>
 800dffc:	2300      	movs	r3, #0
 800dffe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e002:	4b13      	ldr	r3, [pc, #76]	; (800e050 <tcp_slowtmr+0x5a4>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d000      	beq.n	800e00c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e00a:	e560      	b.n	800dace <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e00c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e016:	f004 f8a5 	bl	8012164 <tcp_output>
  while (pcb != NULL) {
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f47f ad5c 	bne.w	800dada <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e022:	2300      	movs	r3, #0
 800e024:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e026:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <tcp_slowtmr+0x5a8>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e02c:	e067      	b.n	800e0fe <tcp_slowtmr+0x652>
 800e02e:	bf00      	nop
 800e030:	2000d10c 	.word	0x2000d10c
 800e034:	10624dd3 	.word	0x10624dd3
 800e038:	000124f8 	.word	0x000124f8
 800e03c:	2000d118 	.word	0x2000d118
 800e040:	08019b74 	.word	0x08019b74
 800e044:	08019fac 	.word	0x08019fac
 800e048:	08019bb8 	.word	0x08019bb8
 800e04c:	08019fd8 	.word	0x08019fd8
 800e050:	2000d120 	.word	0x2000d120
 800e054:	2000d11c 	.word	0x2000d11c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	7d1b      	ldrb	r3, [r3, #20]
 800e05c:	2b0a      	cmp	r3, #10
 800e05e:	d006      	beq.n	800e06e <tcp_slowtmr+0x5c2>
 800e060:	4b2b      	ldr	r3, [pc, #172]	; (800e110 <tcp_slowtmr+0x664>)
 800e062:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e066:	492b      	ldr	r1, [pc, #172]	; (800e114 <tcp_slowtmr+0x668>)
 800e068:	482b      	ldr	r0, [pc, #172]	; (800e118 <tcp_slowtmr+0x66c>)
 800e06a:	f008 fdbd 	bl	8016be8 <iprintf>
    pcb_remove = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e074:	4b29      	ldr	r3, [pc, #164]	; (800e11c <tcp_slowtmr+0x670>)
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	2bf0      	cmp	r3, #240	; 0xf0
 800e080:	d904      	bls.n	800e08c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e086:	3301      	adds	r3, #1
 800e088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e090:	2b00      	cmp	r3, #0
 800e092:	d02f      	beq.n	800e0f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e096:	f000 fbf9 	bl	800e88c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d010      	beq.n	800e0c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e0a0:	4b1f      	ldr	r3, [pc, #124]	; (800e120 <tcp_slowtmr+0x674>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d106      	bne.n	800e0b8 <tcp_slowtmr+0x60c>
 800e0aa:	4b19      	ldr	r3, [pc, #100]	; (800e110 <tcp_slowtmr+0x664>)
 800e0ac:	f240 52af 	movw	r2, #1455	; 0x5af
 800e0b0:	491c      	ldr	r1, [pc, #112]	; (800e124 <tcp_slowtmr+0x678>)
 800e0b2:	4819      	ldr	r0, [pc, #100]	; (800e118 <tcp_slowtmr+0x66c>)
 800e0b4:	f008 fd98 	bl	8016be8 <iprintf>
        prev->next = pcb->next;
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	68da      	ldr	r2, [r3, #12]
 800e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0be:	60da      	str	r2, [r3, #12]
 800e0c0:	e00f      	b.n	800e0e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e0c2:	4b17      	ldr	r3, [pc, #92]	; (800e120 <tcp_slowtmr+0x674>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d006      	beq.n	800e0da <tcp_slowtmr+0x62e>
 800e0cc:	4b10      	ldr	r3, [pc, #64]	; (800e110 <tcp_slowtmr+0x664>)
 800e0ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e0d2:	4915      	ldr	r1, [pc, #84]	; (800e128 <tcp_slowtmr+0x67c>)
 800e0d4:	4810      	ldr	r0, [pc, #64]	; (800e118 <tcp_slowtmr+0x66c>)
 800e0d6:	f008 fd87 	bl	8016be8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	4a10      	ldr	r2, [pc, #64]	; (800e120 <tcp_slowtmr+0x674>)
 800e0e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e0ec:	69f8      	ldr	r0, [r7, #28]
 800e0ee:	f7fe ff85 	bl	800cffc <tcp_free>
 800e0f2:	e004      	b.n	800e0fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1a9      	bne.n	800e058 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop
 800e108:	3730      	adds	r7, #48	; 0x30
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bdb0      	pop	{r4, r5, r7, pc}
 800e10e:	bf00      	nop
 800e110:	08019b74 	.word	0x08019b74
 800e114:	0801a004 	.word	0x0801a004
 800e118:	08019bb8 	.word	0x08019bb8
 800e11c:	2000d10c 	.word	0x2000d10c
 800e120:	2000d11c 	.word	0x2000d11c
 800e124:	0801a034 	.word	0x0801a034
 800e128:	0801a05c 	.word	0x0801a05c

0800e12c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e132:	4b2d      	ldr	r3, [pc, #180]	; (800e1e8 <tcp_fasttmr+0xbc>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	4b2b      	ldr	r3, [pc, #172]	; (800e1e8 <tcp_fasttmr+0xbc>)
 800e13c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e13e:	4b2b      	ldr	r3, [pc, #172]	; (800e1ec <tcp_fasttmr+0xc0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e144:	e048      	b.n	800e1d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7f9a      	ldrb	r2, [r3, #30]
 800e14a:	4b27      	ldr	r3, [pc, #156]	; (800e1e8 <tcp_fasttmr+0xbc>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d03f      	beq.n	800e1d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e152:	4b25      	ldr	r3, [pc, #148]	; (800e1e8 <tcp_fasttmr+0xbc>)
 800e154:	781a      	ldrb	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	2b00      	cmp	r3, #0
 800e164:	d010      	beq.n	800e188 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	8b5b      	ldrh	r3, [r3, #26]
 800e16a:	f043 0302 	orr.w	r3, r3, #2
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f003 fff5 	bl	8012164 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	8b5b      	ldrh	r3, [r3, #26]
 800e17e:	f023 0303 	bic.w	r3, r3, #3
 800e182:	b29a      	uxth	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	8b5b      	ldrh	r3, [r3, #26]
 800e18c:	f003 0308 	and.w	r3, r3, #8
 800e190:	2b00      	cmp	r3, #0
 800e192:	d009      	beq.n	800e1a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	8b5b      	ldrh	r3, [r3, #26]
 800e198:	f023 0308 	bic.w	r3, r3, #8
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff f8be 	bl	800d324 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00a      	beq.n	800e1cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e1b6:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <tcp_fasttmr+0xc4>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f819 	bl	800e1f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e1c2:	4b0b      	ldr	r3, [pc, #44]	; (800e1f0 <tcp_fasttmr+0xc4>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d000      	beq.n	800e1cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e1ca:	e7b8      	b.n	800e13e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	607b      	str	r3, [r7, #4]
 800e1d0:	e002      	b.n	800e1d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1b3      	bne.n	800e146 <tcp_fasttmr+0x1a>
    }
  }
}
 800e1de:	bf00      	nop
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	2000d122 	.word	0x2000d122
 800e1ec:	2000d118 	.word	0x2000d118
 800e1f0:	2000d120 	.word	0x2000d120

0800e1f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e1f4:	b590      	push	{r4, r7, lr}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d109      	bne.n	800e216 <tcp_process_refused_data+0x22>
 800e202:	4b37      	ldr	r3, [pc, #220]	; (800e2e0 <tcp_process_refused_data+0xec>)
 800e204:	f240 6209 	movw	r2, #1545	; 0x609
 800e208:	4936      	ldr	r1, [pc, #216]	; (800e2e4 <tcp_process_refused_data+0xf0>)
 800e20a:	4837      	ldr	r0, [pc, #220]	; (800e2e8 <tcp_process_refused_data+0xf4>)
 800e20c:	f008 fcec 	bl	8016be8 <iprintf>
 800e210:	f06f 030f 	mvn.w	r3, #15
 800e214:	e060      	b.n	800e2d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e21a:	7b5b      	ldrb	r3, [r3, #13]
 800e21c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e222:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00b      	beq.n	800e24c <tcp_process_refused_data+0x58>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6918      	ldr	r0, [r3, #16]
 800e23e:	2300      	movs	r3, #0
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	47a0      	blx	r4
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]
 800e24a:	e007      	b.n	800e25c <tcp_process_refused_data+0x68>
 800e24c:	2300      	movs	r3, #0
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	6879      	ldr	r1, [r7, #4]
 800e252:	2000      	movs	r0, #0
 800e254:	f000 f8a4 	bl	800e3a0 <tcp_recv_null>
 800e258:	4603      	mov	r3, r0
 800e25a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d12a      	bne.n	800e2ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e264:	7bbb      	ldrb	r3, [r7, #14]
 800e266:	f003 0320 	and.w	r3, r3, #32
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d033      	beq.n	800e2d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e272:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e276:	d005      	beq.n	800e284 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e27c:	3301      	adds	r3, #1
 800e27e:	b29a      	uxth	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00b      	beq.n	800e2a6 <tcp_process_refused_data+0xb2>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6918      	ldr	r0, [r3, #16]
 800e298:	2300      	movs	r3, #0
 800e29a:	2200      	movs	r2, #0
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	47a0      	blx	r4
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]
 800e2a4:	e001      	b.n	800e2aa <tcp_process_refused_data+0xb6>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2ae:	f113 0f0d 	cmn.w	r3, #13
 800e2b2:	d110      	bne.n	800e2d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e2b4:	f06f 030c 	mvn.w	r3, #12
 800e2b8:	e00e      	b.n	800e2d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2be:	f113 0f0d 	cmn.w	r3, #13
 800e2c2:	d102      	bne.n	800e2ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e2c4:	f06f 030c 	mvn.w	r3, #12
 800e2c8:	e006      	b.n	800e2d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e2d0:	f06f 0304 	mvn.w	r3, #4
 800e2d4:	e000      	b.n	800e2d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd90      	pop	{r4, r7, pc}
 800e2e0:	08019b74 	.word	0x08019b74
 800e2e4:	0801a084 	.word	0x0801a084
 800e2e8:	08019bb8 	.word	0x08019bb8

0800e2ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e2f4:	e007      	b.n	800e306 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 f80a 	bl	800e316 <tcp_seg_free>
    seg = next;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1f4      	bne.n	800e2f6 <tcp_segs_free+0xa>
  }
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b082      	sub	sp, #8
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00c      	beq.n	800e33e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fba7 	bl	800ca84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e336:	6879      	ldr	r1, [r7, #4]
 800e338:	2003      	movs	r0, #3
 800e33a:	f7fd fcff 	bl	800bd3c <memp_free>
  }
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <tcp_seg_copy+0x1c>
 800e356:	4b0f      	ldr	r3, [pc, #60]	; (800e394 <tcp_seg_copy+0x4c>)
 800e358:	f240 6282 	movw	r2, #1666	; 0x682
 800e35c:	490e      	ldr	r1, [pc, #56]	; (800e398 <tcp_seg_copy+0x50>)
 800e35e:	480f      	ldr	r0, [pc, #60]	; (800e39c <tcp_seg_copy+0x54>)
 800e360:	f008 fc42 	bl	8016be8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e364:	2003      	movs	r0, #3
 800e366:	f7fd fc73 	bl	800bc50 <memp_malloc>
 800e36a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <tcp_seg_copy+0x2e>
    return NULL;
 800e372:	2300      	movs	r3, #0
 800e374:	e00a      	b.n	800e38c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e376:	2210      	movs	r2, #16
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f008 fdf5 	bl	8016f6a <memcpy>
  pbuf_ref(cseg->p);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fc23 	bl	800cbd0 <pbuf_ref>
  return cseg;
 800e38a:	68fb      	ldr	r3, [r7, #12]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	08019b74 	.word	0x08019b74
 800e398:	0801a0c8 	.word	0x0801a0c8
 800e39c:	08019bb8 	.word	0x08019bb8

0800e3a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d109      	bne.n	800e3c8 <tcp_recv_null+0x28>
 800e3b4:	4b12      	ldr	r3, [pc, #72]	; (800e400 <tcp_recv_null+0x60>)
 800e3b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e3ba:	4912      	ldr	r1, [pc, #72]	; (800e404 <tcp_recv_null+0x64>)
 800e3bc:	4812      	ldr	r0, [pc, #72]	; (800e408 <tcp_recv_null+0x68>)
 800e3be:	f008 fc13 	bl	8016be8 <iprintf>
 800e3c2:	f06f 030f 	mvn.w	r3, #15
 800e3c6:	e016      	b.n	800e3f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	891b      	ldrh	r3, [r3, #8]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	68b8      	ldr	r0, [r7, #8]
 800e3d6:	f7ff f9bb 	bl	800d750 <tcp_recved>
    pbuf_free(p);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7fe fb52 	bl	800ca84 <pbuf_free>
 800e3e0:	e008      	b.n	800e3f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e3e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d104      	bne.n	800e3f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e3ea:	68b8      	ldr	r0, [r7, #8]
 800e3ec:	f7ff f804 	bl	800d3f8 <tcp_close>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	e000      	b.n	800e3f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	08019b74 	.word	0x08019b74
 800e404:	0801a0e4 	.word	0x0801a0e4
 800e408:	08019bb8 	.word	0x08019bb8

0800e40c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	db01      	blt.n	800e422 <tcp_kill_prio+0x16>
 800e41e:	79fb      	ldrb	r3, [r7, #7]
 800e420:	e000      	b.n	800e424 <tcp_kill_prio+0x18>
 800e422:	237f      	movs	r3, #127	; 0x7f
 800e424:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d034      	beq.n	800e496 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e42c:	7afb      	ldrb	r3, [r7, #11]
 800e42e:	3b01      	subs	r3, #1
 800e430:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e43a:	4b19      	ldr	r3, [pc, #100]	; (800e4a0 <tcp_kill_prio+0x94>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	e01f      	b.n	800e482 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	7d5b      	ldrb	r3, [r3, #21]
 800e446:	7afa      	ldrb	r2, [r7, #11]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d80c      	bhi.n	800e466 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e450:	7afa      	ldrb	r2, [r7, #11]
 800e452:	429a      	cmp	r2, r3
 800e454:	d112      	bne.n	800e47c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e456:	4b13      	ldr	r3, [pc, #76]	; (800e4a4 <tcp_kill_prio+0x98>)
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	6a1b      	ldr	r3, [r3, #32]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	429a      	cmp	r2, r3
 800e464:	d80a      	bhi.n	800e47c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e466:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <tcp_kill_prio+0x98>)
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	7d5b      	ldrb	r3, [r3, #21]
 800e47a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	617b      	str	r3, [r7, #20]
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1dc      	bne.n	800e442 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d004      	beq.n	800e498 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e48e:	6938      	ldr	r0, [r7, #16]
 800e490:	f7ff f8f8 	bl	800d684 <tcp_abort>
 800e494:	e000      	b.n	800e498 <tcp_kill_prio+0x8c>
    return;
 800e496:	bf00      	nop
  }
}
 800e498:	3718      	adds	r7, #24
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	2000d118 	.word	0x2000d118
 800e4a4:	2000d10c 	.word	0x2000d10c

0800e4a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e4b2:	79fb      	ldrb	r3, [r7, #7]
 800e4b4:	2b08      	cmp	r3, #8
 800e4b6:	d009      	beq.n	800e4cc <tcp_kill_state+0x24>
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	2b09      	cmp	r3, #9
 800e4bc:	d006      	beq.n	800e4cc <tcp_kill_state+0x24>
 800e4be:	4b1a      	ldr	r3, [pc, #104]	; (800e528 <tcp_kill_state+0x80>)
 800e4c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e4c4:	4919      	ldr	r1, [pc, #100]	; (800e52c <tcp_kill_state+0x84>)
 800e4c6:	481a      	ldr	r0, [pc, #104]	; (800e530 <tcp_kill_state+0x88>)
 800e4c8:	f008 fb8e 	bl	8016be8 <iprintf>

  inactivity = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4d4:	4b17      	ldr	r3, [pc, #92]	; (800e534 <tcp_kill_state+0x8c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	e017      	b.n	800e50c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	7d1b      	ldrb	r3, [r3, #20]
 800e4e0:	79fa      	ldrb	r2, [r7, #7]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d10f      	bne.n	800e506 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e4e6:	4b14      	ldr	r3, [pc, #80]	; (800e538 <tcp_kill_state+0x90>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d807      	bhi.n	800e506 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e4f6:	4b10      	ldr	r3, [pc, #64]	; (800e538 <tcp_kill_state+0x90>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	617b      	str	r3, [r7, #20]
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e4      	bne.n	800e4dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e518:	2100      	movs	r1, #0
 800e51a:	6938      	ldr	r0, [r7, #16]
 800e51c:	f7fe fff4 	bl	800d508 <tcp_abandon>
  }
}
 800e520:	bf00      	nop
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	08019b74 	.word	0x08019b74
 800e52c:	0801a100 	.word	0x0801a100
 800e530:	08019bb8 	.word	0x08019bb8
 800e534:	2000d118 	.word	0x2000d118
 800e538:	2000d10c 	.word	0x2000d10c

0800e53c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e546:	2300      	movs	r3, #0
 800e548:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e54a:	4b12      	ldr	r3, [pc, #72]	; (800e594 <tcp_kill_timewait+0x58>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	60fb      	str	r3, [r7, #12]
 800e550:	e012      	b.n	800e578 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e552:	4b11      	ldr	r3, [pc, #68]	; (800e598 <tcp_kill_timewait+0x5c>)
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6a1b      	ldr	r3, [r3, #32]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d807      	bhi.n	800e572 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e562:	4b0d      	ldr	r3, [pc, #52]	; (800e598 <tcp_kill_timewait+0x5c>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6a1b      	ldr	r3, [r3, #32]
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1e9      	bne.n	800e552 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e584:	68b8      	ldr	r0, [r7, #8]
 800e586:	f7ff f87d 	bl	800d684 <tcp_abort>
  }
}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	2000d11c 	.word	0x2000d11c
 800e598:	2000d10c 	.word	0x2000d10c

0800e59c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e5a2:	4b10      	ldr	r3, [pc, #64]	; (800e5e4 <tcp_handle_closepend+0x48>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e5a8:	e014      	b.n	800e5d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	8b5b      	ldrh	r3, [r3, #26]
 800e5b4:	f003 0308 	and.w	r3, r3, #8
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d009      	beq.n	800e5d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	8b5b      	ldrh	r3, [r3, #26]
 800e5c0:	f023 0308 	bic.w	r3, r3, #8
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7fe feaa 	bl	800d324 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e7      	bne.n	800e5aa <tcp_handle_closepend+0xe>
  }
}
 800e5da:	bf00      	nop
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	2000d118 	.word	0x2000d118

0800e5e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	f7fd fb2c 	bl	800bc50 <memp_malloc>
 800e5f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d126      	bne.n	800e64e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e600:	f7ff ffcc 	bl	800e59c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e604:	f7ff ff9a 	bl	800e53c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e608:	2001      	movs	r0, #1
 800e60a:	f7fd fb21 	bl	800bc50 <memp_malloc>
 800e60e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d11b      	bne.n	800e64e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e616:	2009      	movs	r0, #9
 800e618:	f7ff ff46 	bl	800e4a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e61c:	2001      	movs	r0, #1
 800e61e:	f7fd fb17 	bl	800bc50 <memp_malloc>
 800e622:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d111      	bne.n	800e64e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e62a:	2008      	movs	r0, #8
 800e62c:	f7ff ff3c 	bl	800e4a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e630:	2001      	movs	r0, #1
 800e632:	f7fd fb0d 	bl	800bc50 <memp_malloc>
 800e636:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d107      	bne.n	800e64e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff fee3 	bl	800e40c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e646:	2001      	movs	r0, #1
 800e648:	f7fd fb02 	bl	800bc50 <memp_malloc>
 800e64c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d03f      	beq.n	800e6d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e654:	229c      	movs	r2, #156	; 0x9c
 800e656:	2100      	movs	r1, #0
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f008 fb98 	bl	8016d8e <memset>
    pcb->prio = prio;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	79fa      	ldrb	r2, [r7, #7]
 800e662:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e66a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e674:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	22ff      	movs	r2, #255	; 0xff
 800e682:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e68a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2206      	movs	r2, #6
 800e690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2206      	movs	r2, #6
 800e698:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <tcp_alloc+0xf8>)
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e6b2:	4b0c      	ldr	r3, [pc, #48]	; (800e6e4 <tcp_alloc+0xfc>)
 800e6b4:	781a      	ldrb	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e6c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	4a08      	ldr	r2, [pc, #32]	; (800e6e8 <tcp_alloc+0x100>)
 800e6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	4a07      	ldr	r2, [pc, #28]	; (800e6ec <tcp_alloc+0x104>)
 800e6d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	2000d10c 	.word	0x2000d10c
 800e6e4:	2000d122 	.word	0x2000d122
 800e6e8:	0800e3a1 	.word	0x0800e3a1
 800e6ec:	006ddd00 	.word	0x006ddd00

0800e6f0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e6fa:	2040      	movs	r0, #64	; 0x40
 800e6fc:	f7ff ff74 	bl	800e5e8 <tcp_alloc>
 800e700:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e702:	68fb      	ldr	r3, [r7, #12]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	611a      	str	r2, [r3, #16]
  }
}
 800e722:	bf00      	nop
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
	...

0800e730 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00e      	beq.n	800e75e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7d1b      	ldrb	r3, [r3, #20]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d106      	bne.n	800e756 <tcp_recv+0x26>
 800e748:	4b07      	ldr	r3, [pc, #28]	; (800e768 <tcp_recv+0x38>)
 800e74a:	f240 72df 	movw	r2, #2015	; 0x7df
 800e74e:	4907      	ldr	r1, [pc, #28]	; (800e76c <tcp_recv+0x3c>)
 800e750:	4807      	ldr	r0, [pc, #28]	; (800e770 <tcp_recv+0x40>)
 800e752:	f008 fa49 	bl	8016be8 <iprintf>
    pcb->recv = recv;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	08019b74 	.word	0x08019b74
 800e76c:	0801a110 	.word	0x0801a110
 800e770:	08019bb8 	.word	0x08019bb8

0800e774 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00e      	beq.n	800e7a2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d106      	bne.n	800e79a <tcp_sent+0x26>
 800e78c:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <tcp_sent+0x38>)
 800e78e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e792:	4907      	ldr	r1, [pc, #28]	; (800e7b0 <tcp_sent+0x3c>)
 800e794:	4807      	ldr	r0, [pc, #28]	; (800e7b4 <tcp_sent+0x40>)
 800e796:	f008 fa27 	bl	8016be8 <iprintf>
    pcb->sent = sent;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08019b74 	.word	0x08019b74
 800e7b0:	0801a138 	.word	0x0801a138
 800e7b4:	08019bb8 	.word	0x08019bb8

0800e7b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00e      	beq.n	800e7e6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	7d1b      	ldrb	r3, [r3, #20]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d106      	bne.n	800e7de <tcp_err+0x26>
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <tcp_err+0x38>)
 800e7d2:	f640 020d 	movw	r2, #2061	; 0x80d
 800e7d6:	4907      	ldr	r1, [pc, #28]	; (800e7f4 <tcp_err+0x3c>)
 800e7d8:	4807      	ldr	r0, [pc, #28]	; (800e7f8 <tcp_err+0x40>)
 800e7da:	f008 fa05 	bl	8016be8 <iprintf>
    pcb->errf = err;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	08019b74 	.word	0x08019b74
 800e7f4:	0801a160 	.word	0x0801a160
 800e7f8:	08019bb8 	.word	0x08019bb8

0800e7fc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d008      	beq.n	800e81e <tcp_accept+0x22>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d104      	bne.n	800e81e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	619a      	str	r2, [r3, #24]
  }
}
 800e81e:	bf00      	nop
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
	...

0800e82c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	4613      	mov	r3, r2
 800e838:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d107      	bne.n	800e850 <tcp_poll+0x24>
 800e840:	4b0e      	ldr	r3, [pc, #56]	; (800e87c <tcp_poll+0x50>)
 800e842:	f640 023d 	movw	r2, #2109	; 0x83d
 800e846:	490e      	ldr	r1, [pc, #56]	; (800e880 <tcp_poll+0x54>)
 800e848:	480e      	ldr	r0, [pc, #56]	; (800e884 <tcp_poll+0x58>)
 800e84a:	f008 f9cd 	bl	8016be8 <iprintf>
 800e84e:	e011      	b.n	800e874 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d106      	bne.n	800e866 <tcp_poll+0x3a>
 800e858:	4b08      	ldr	r3, [pc, #32]	; (800e87c <tcp_poll+0x50>)
 800e85a:	f640 023e 	movw	r2, #2110	; 0x83e
 800e85e:	490a      	ldr	r1, [pc, #40]	; (800e888 <tcp_poll+0x5c>)
 800e860:	4808      	ldr	r0, [pc, #32]	; (800e884 <tcp_poll+0x58>)
 800e862:	f008 f9c1 	bl	8016be8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	79fa      	ldrb	r2, [r7, #7]
 800e872:	775a      	strb	r2, [r3, #29]
}
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	08019b74 	.word	0x08019b74
 800e880:	0801a188 	.word	0x0801a188
 800e884:	08019bb8 	.word	0x08019bb8
 800e888:	0801a1a0 	.word	0x0801a1a0

0800e88c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d107      	bne.n	800e8aa <tcp_pcb_purge+0x1e>
 800e89a:	4b21      	ldr	r3, [pc, #132]	; (800e920 <tcp_pcb_purge+0x94>)
 800e89c:	f640 0251 	movw	r2, #2129	; 0x851
 800e8a0:	4920      	ldr	r1, [pc, #128]	; (800e924 <tcp_pcb_purge+0x98>)
 800e8a2:	4821      	ldr	r0, [pc, #132]	; (800e928 <tcp_pcb_purge+0x9c>)
 800e8a4:	f008 f9a0 	bl	8016be8 <iprintf>
 800e8a8:	e037      	b.n	800e91a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	7d1b      	ldrb	r3, [r3, #20]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d033      	beq.n	800e91a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e8b6:	2b0a      	cmp	r3, #10
 800e8b8:	d02f      	beq.n	800e91a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d02b      	beq.n	800e91a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d007      	beq.n	800e8da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe f8d8 	bl	800ca84 <pbuf_free>
      pcb->refused_data = NULL;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d002      	beq.n	800e8e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f986 	bl	800ebf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff fcf9 	bl	800e2ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff fcf4 	bl	800e2ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	66da      	str	r2, [r3, #108]	; 0x6c
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	08019b74 	.word	0x08019b74
 800e924:	0801a1c0 	.word	0x0801a1c0
 800e928:	08019bb8 	.word	0x08019bb8

0800e92c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d106      	bne.n	800e94a <tcp_pcb_remove+0x1e>
 800e93c:	4b3e      	ldr	r3, [pc, #248]	; (800ea38 <tcp_pcb_remove+0x10c>)
 800e93e:	f640 0283 	movw	r2, #2179	; 0x883
 800e942:	493e      	ldr	r1, [pc, #248]	; (800ea3c <tcp_pcb_remove+0x110>)
 800e944:	483e      	ldr	r0, [pc, #248]	; (800ea40 <tcp_pcb_remove+0x114>)
 800e946:	f008 f94f 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d106      	bne.n	800e95e <tcp_pcb_remove+0x32>
 800e950:	4b39      	ldr	r3, [pc, #228]	; (800ea38 <tcp_pcb_remove+0x10c>)
 800e952:	f640 0284 	movw	r2, #2180	; 0x884
 800e956:	493b      	ldr	r1, [pc, #236]	; (800ea44 <tcp_pcb_remove+0x118>)
 800e958:	4839      	ldr	r0, [pc, #228]	; (800ea40 <tcp_pcb_remove+0x114>)
 800e95a:	f008 f945 	bl	8016be8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d105      	bne.n	800e974 <tcp_pcb_remove+0x48>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	601a      	str	r2, [r3, #0]
 800e972:	e013      	b.n	800e99c <tcp_pcb_remove+0x70>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	e00c      	b.n	800e996 <tcp_pcb_remove+0x6a>
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	d104      	bne.n	800e990 <tcp_pcb_remove+0x64>
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	68da      	ldr	r2, [r3, #12]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	60da      	str	r2, [r3, #12]
 800e98e:	e005      	b.n	800e99c <tcp_pcb_remove+0x70>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	60fb      	str	r3, [r7, #12]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1ef      	bne.n	800e97c <tcp_pcb_remove+0x50>
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e9a2:	6838      	ldr	r0, [r7, #0]
 800e9a4:	f7ff ff72 	bl	800e88c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	7d1b      	ldrb	r3, [r3, #20]
 800e9ac:	2b0a      	cmp	r3, #10
 800e9ae:	d013      	beq.n	800e9d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d00f      	beq.n	800e9d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	8b5b      	ldrh	r3, [r3, #26]
 800e9bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	8b5b      	ldrh	r3, [r3, #26]
 800e9c8:	f043 0302 	orr.w	r3, r3, #2
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9d2:	6838      	ldr	r0, [r7, #0]
 800e9d4:	f003 fbc6 	bl	8012164 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	7d1b      	ldrb	r3, [r3, #20]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d020      	beq.n	800ea22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d006      	beq.n	800e9f6 <tcp_pcb_remove+0xca>
 800e9e8:	4b13      	ldr	r3, [pc, #76]	; (800ea38 <tcp_pcb_remove+0x10c>)
 800e9ea:	f640 0293 	movw	r2, #2195	; 0x893
 800e9ee:	4916      	ldr	r1, [pc, #88]	; (800ea48 <tcp_pcb_remove+0x11c>)
 800e9f0:	4813      	ldr	r0, [pc, #76]	; (800ea40 <tcp_pcb_remove+0x114>)
 800e9f2:	f008 f8f9 	bl	8016be8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d006      	beq.n	800ea0c <tcp_pcb_remove+0xe0>
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ea38 <tcp_pcb_remove+0x10c>)
 800ea00:	f640 0294 	movw	r2, #2196	; 0x894
 800ea04:	4911      	ldr	r1, [pc, #68]	; (800ea4c <tcp_pcb_remove+0x120>)
 800ea06:	480e      	ldr	r0, [pc, #56]	; (800ea40 <tcp_pcb_remove+0x114>)
 800ea08:	f008 f8ee 	bl	8016be8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d006      	beq.n	800ea22 <tcp_pcb_remove+0xf6>
 800ea14:	4b08      	ldr	r3, [pc, #32]	; (800ea38 <tcp_pcb_remove+0x10c>)
 800ea16:	f640 0296 	movw	r2, #2198	; 0x896
 800ea1a:	490d      	ldr	r1, [pc, #52]	; (800ea50 <tcp_pcb_remove+0x124>)
 800ea1c:	4808      	ldr	r0, [pc, #32]	; (800ea40 <tcp_pcb_remove+0x114>)
 800ea1e:	f008 f8e3 	bl	8016be8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2200      	movs	r2, #0
 800ea26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ea2e:	bf00      	nop
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08019b74 	.word	0x08019b74
 800ea3c:	0801a1dc 	.word	0x0801a1dc
 800ea40:	08019bb8 	.word	0x08019bb8
 800ea44:	0801a1f8 	.word	0x0801a1f8
 800ea48:	0801a218 	.word	0x0801a218
 800ea4c:	0801a230 	.word	0x0801a230
 800ea50:	0801a24c 	.word	0x0801a24c

0800ea54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_next_iss+0x1c>
 800ea62:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <tcp_next_iss+0x38>)
 800ea64:	f640 02af 	movw	r2, #2223	; 0x8af
 800ea68:	4909      	ldr	r1, [pc, #36]	; (800ea90 <tcp_next_iss+0x3c>)
 800ea6a:	480a      	ldr	r0, [pc, #40]	; (800ea94 <tcp_next_iss+0x40>)
 800ea6c:	f008 f8bc 	bl	8016be8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ea70:	4b09      	ldr	r3, [pc, #36]	; (800ea98 <tcp_next_iss+0x44>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	4b09      	ldr	r3, [pc, #36]	; (800ea9c <tcp_next_iss+0x48>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4413      	add	r3, r2
 800ea7a:	4a07      	ldr	r2, [pc, #28]	; (800ea98 <tcp_next_iss+0x44>)
 800ea7c:	6013      	str	r3, [r2, #0]
  return iss;
 800ea7e:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <tcp_next_iss+0x44>)
 800ea80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	08019b74 	.word	0x08019b74
 800ea90:	0801a264 	.word	0x0801a264
 800ea94:	08019bb8 	.word	0x08019bb8
 800ea98:	20000028 	.word	0x20000028
 800ea9c:	2000d10c 	.word	0x2000d10c

0800eaa0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d106      	bne.n	800eac2 <tcp_eff_send_mss_netif+0x22>
 800eab4:	4b14      	ldr	r3, [pc, #80]	; (800eb08 <tcp_eff_send_mss_netif+0x68>)
 800eab6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800eaba:	4914      	ldr	r1, [pc, #80]	; (800eb0c <tcp_eff_send_mss_netif+0x6c>)
 800eabc:	4814      	ldr	r0, [pc, #80]	; (800eb10 <tcp_eff_send_mss_netif+0x70>)
 800eabe:	f008 f893 	bl	8016be8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d101      	bne.n	800eacc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eac8:	89fb      	ldrh	r3, [r7, #14]
 800eaca:	e019      	b.n	800eb00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ead0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ead2:	8afb      	ldrh	r3, [r7, #22]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d012      	beq.n	800eafe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ead8:	2328      	movs	r3, #40	; 0x28
 800eada:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eadc:	8afa      	ldrh	r2, [r7, #22]
 800eade:	8abb      	ldrh	r3, [r7, #20]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d904      	bls.n	800eaee <tcp_eff_send_mss_netif+0x4e>
 800eae4:	8afa      	ldrh	r2, [r7, #22]
 800eae6:	8abb      	ldrh	r3, [r7, #20]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	e000      	b.n	800eaf0 <tcp_eff_send_mss_netif+0x50>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eaf2:	8a7a      	ldrh	r2, [r7, #18]
 800eaf4:	89fb      	ldrh	r3, [r7, #14]
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	bf28      	it	cs
 800eafa:	4613      	movcs	r3, r2
 800eafc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eafe:	89fb      	ldrh	r3, [r7, #14]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	08019b74 	.word	0x08019b74
 800eb0c:	0801a280 	.word	0x0801a280
 800eb10:	08019bb8 	.word	0x08019bb8

0800eb14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d119      	bne.n	800eb5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eb28:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eb2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eb2e:	4910      	ldr	r1, [pc, #64]	; (800eb70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eb30:	4810      	ldr	r0, [pc, #64]	; (800eb74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eb32:	f008 f859 	bl	8016be8 <iprintf>

  while (pcb != NULL) {
 800eb36:	e011      	b.n	800eb5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d108      	bne.n	800eb56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7fe fd9a 	bl	800d684 <tcp_abort>
      pcb = next;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	e002      	b.n	800eb5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1ea      	bne.n	800eb38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eb62:	bf00      	nop
 800eb64:	bf00      	nop
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	08019b74 	.word	0x08019b74
 800eb70:	0801a2a8 	.word	0x0801a2a8
 800eb74:	08019bb8 	.word	0x08019bb8

0800eb78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d02a      	beq.n	800ebde <tcp_netif_ip_addr_changed+0x66>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d026      	beq.n	800ebde <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eb90:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <tcp_netif_ip_addr_changed+0x70>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff ffbc 	bl	800eb14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb9c:	4b13      	ldr	r3, [pc, #76]	; (800ebec <tcp_netif_ip_addr_changed+0x74>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4619      	mov	r1, r3
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7ff ffb6 	bl	800eb14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d017      	beq.n	800ebde <tcp_netif_ip_addr_changed+0x66>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d013      	beq.n	800ebde <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ebb6:	4b0e      	ldr	r3, [pc, #56]	; (800ebf0 <tcp_netif_ip_addr_changed+0x78>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	e00c      	b.n	800ebd8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d103      	bne.n	800ebd2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1ef      	bne.n	800ebbe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ebde:	bf00      	nop
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000d118 	.word	0x2000d118
 800ebec:	2000d110 	.word	0x2000d110
 800ebf0:	2000d114 	.word	0x2000d114

0800ebf4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d007      	beq.n	800ec14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff fb6f 	bl	800e2ec <tcp_segs_free>
    pcb->ooseq = NULL;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ec1c:	b590      	push	{r4, r7, lr}
 800ec1e:	b08d      	sub	sp, #52	; 0x34
 800ec20:	af04      	add	r7, sp, #16
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d105      	bne.n	800ec38 <tcp_input+0x1c>
 800ec2c:	4b9b      	ldr	r3, [pc, #620]	; (800ee9c <tcp_input+0x280>)
 800ec2e:	2283      	movs	r2, #131	; 0x83
 800ec30:	499b      	ldr	r1, [pc, #620]	; (800eea0 <tcp_input+0x284>)
 800ec32:	489c      	ldr	r0, [pc, #624]	; (800eea4 <tcp_input+0x288>)
 800ec34:	f007 ffd8 	bl	8016be8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	4a9a      	ldr	r2, [pc, #616]	; (800eea8 <tcp_input+0x28c>)
 800ec3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	895b      	ldrh	r3, [r3, #10]
 800ec44:	2b13      	cmp	r3, #19
 800ec46:	f240 83d1 	bls.w	800f3ec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec4a:	4b98      	ldr	r3, [pc, #608]	; (800eeac <tcp_input+0x290>)
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	4a97      	ldr	r2, [pc, #604]	; (800eeac <tcp_input+0x290>)
 800ec50:	6812      	ldr	r2, [r2, #0]
 800ec52:	4611      	mov	r1, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	f006 fc65 	bl	8015524 <ip4_addr_isbroadcast_u32>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f040 83c7 	bne.w	800f3f0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec62:	4b92      	ldr	r3, [pc, #584]	; (800eeac <tcp_input+0x290>)
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec6a:	2be0      	cmp	r3, #224	; 0xe0
 800ec6c:	f000 83c0 	beq.w	800f3f0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ec70:	4b8d      	ldr	r3, [pc, #564]	; (800eea8 <tcp_input+0x28c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fc fb11 	bl	800b2a0 <lwip_htons>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	0b1b      	lsrs	r3, r3, #12
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ec8a:	7cbb      	ldrb	r3, [r7, #18]
 800ec8c:	2b13      	cmp	r3, #19
 800ec8e:	f240 83b1 	bls.w	800f3f4 <tcp_input+0x7d8>
 800ec92:	7cbb      	ldrb	r3, [r7, #18]
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	891b      	ldrh	r3, [r3, #8]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	f200 83aa 	bhi.w	800f3f4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eca0:	7cbb      	ldrb	r3, [r7, #18]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	3b14      	subs	r3, #20
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	4b81      	ldr	r3, [pc, #516]	; (800eeb0 <tcp_input+0x294>)
 800ecaa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ecac:	4b81      	ldr	r3, [pc, #516]	; (800eeb4 <tcp_input+0x298>)
 800ecae:	2200      	movs	r2, #0
 800ecb0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	895a      	ldrh	r2, [r3, #10]
 800ecb6:	7cbb      	ldrb	r3, [r7, #18]
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d309      	bcc.n	800ecd2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ecbe:	4b7c      	ldr	r3, [pc, #496]	; (800eeb0 <tcp_input+0x294>)
 800ecc0:	881a      	ldrh	r2, [r3, #0]
 800ecc2:	4b7d      	ldr	r3, [pc, #500]	; (800eeb8 <tcp_input+0x29c>)
 800ecc4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ecc6:	7cbb      	ldrb	r3, [r7, #18]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f7fd fe54 	bl	800c978 <pbuf_remove_header>
 800ecd0:	e04e      	b.n	800ed70 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d105      	bne.n	800ece6 <tcp_input+0xca>
 800ecda:	4b70      	ldr	r3, [pc, #448]	; (800ee9c <tcp_input+0x280>)
 800ecdc:	22c2      	movs	r2, #194	; 0xc2
 800ecde:	4977      	ldr	r1, [pc, #476]	; (800eebc <tcp_input+0x2a0>)
 800ece0:	4870      	ldr	r0, [pc, #448]	; (800eea4 <tcp_input+0x288>)
 800ece2:	f007 ff81 	bl	8016be8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ece6:	2114      	movs	r1, #20
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7fd fe45 	bl	800c978 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	895a      	ldrh	r2, [r3, #10]
 800ecf2:	4b71      	ldr	r3, [pc, #452]	; (800eeb8 <tcp_input+0x29c>)
 800ecf4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ecf6:	4b6e      	ldr	r3, [pc, #440]	; (800eeb0 <tcp_input+0x294>)
 800ecf8:	881a      	ldrh	r2, [r3, #0]
 800ecfa:	4b6f      	ldr	r3, [pc, #444]	; (800eeb8 <tcp_input+0x29c>)
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ed02:	4b6d      	ldr	r3, [pc, #436]	; (800eeb8 <tcp_input+0x29c>)
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	4619      	mov	r1, r3
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7fd fe35 	bl	800c978 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	895b      	ldrh	r3, [r3, #10]
 800ed14:	8a3a      	ldrh	r2, [r7, #16]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	f200 836e 	bhi.w	800f3f8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	4a64      	ldr	r2, [pc, #400]	; (800eeb4 <tcp_input+0x298>)
 800ed24:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	8a3a      	ldrh	r2, [r7, #16]
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd fe22 	bl	800c978 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	891a      	ldrh	r2, [r3, #8]
 800ed38:	8a3b      	ldrh	r3, [r7, #16]
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	895b      	ldrh	r3, [r3, #10]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <tcp_input+0x13a>
 800ed4a:	4b54      	ldr	r3, [pc, #336]	; (800ee9c <tcp_input+0x280>)
 800ed4c:	22df      	movs	r2, #223	; 0xdf
 800ed4e:	495c      	ldr	r1, [pc, #368]	; (800eec0 <tcp_input+0x2a4>)
 800ed50:	4854      	ldr	r0, [pc, #336]	; (800eea4 <tcp_input+0x288>)
 800ed52:	f007 ff49 	bl	8016be8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	891a      	ldrh	r2, [r3, #8]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	891b      	ldrh	r3, [r3, #8]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d005      	beq.n	800ed70 <tcp_input+0x154>
 800ed64:	4b4d      	ldr	r3, [pc, #308]	; (800ee9c <tcp_input+0x280>)
 800ed66:	22e0      	movs	r2, #224	; 0xe0
 800ed68:	4956      	ldr	r1, [pc, #344]	; (800eec4 <tcp_input+0x2a8>)
 800ed6a:	484e      	ldr	r0, [pc, #312]	; (800eea4 <tcp_input+0x288>)
 800ed6c:	f007 ff3c 	bl	8016be8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ed70:	4b4d      	ldr	r3, [pc, #308]	; (800eea8 <tcp_input+0x28c>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4a4b      	ldr	r2, [pc, #300]	; (800eea8 <tcp_input+0x28c>)
 800ed7a:	6814      	ldr	r4, [r2, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fc fa8f 	bl	800b2a0 <lwip_htons>
 800ed82:	4603      	mov	r3, r0
 800ed84:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ed86:	4b48      	ldr	r3, [pc, #288]	; (800eea8 <tcp_input+0x28c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	885b      	ldrh	r3, [r3, #2]
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	4a46      	ldr	r2, [pc, #280]	; (800eea8 <tcp_input+0x28c>)
 800ed90:	6814      	ldr	r4, [r2, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fc fa84 	bl	800b2a0 <lwip_htons>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed9c:	4b42      	ldr	r3, [pc, #264]	; (800eea8 <tcp_input+0x28c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	4a41      	ldr	r2, [pc, #260]	; (800eea8 <tcp_input+0x28c>)
 800eda4:	6814      	ldr	r4, [r2, #0]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fc fa8f 	bl	800b2ca <lwip_htonl>
 800edac:	4603      	mov	r3, r0
 800edae:	6063      	str	r3, [r4, #4]
 800edb0:	6863      	ldr	r3, [r4, #4]
 800edb2:	4a45      	ldr	r2, [pc, #276]	; (800eec8 <tcp_input+0x2ac>)
 800edb4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800edb6:	4b3c      	ldr	r3, [pc, #240]	; (800eea8 <tcp_input+0x28c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	4a3a      	ldr	r2, [pc, #232]	; (800eea8 <tcp_input+0x28c>)
 800edbe:	6814      	ldr	r4, [r2, #0]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fc fa82 	bl	800b2ca <lwip_htonl>
 800edc6:	4603      	mov	r3, r0
 800edc8:	60a3      	str	r3, [r4, #8]
 800edca:	68a3      	ldr	r3, [r4, #8]
 800edcc:	4a3f      	ldr	r2, [pc, #252]	; (800eecc <tcp_input+0x2b0>)
 800edce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800edd0:	4b35      	ldr	r3, [pc, #212]	; (800eea8 <tcp_input+0x28c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	89db      	ldrh	r3, [r3, #14]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	4a33      	ldr	r2, [pc, #204]	; (800eea8 <tcp_input+0x28c>)
 800edda:	6814      	ldr	r4, [r2, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fc fa5f 	bl	800b2a0 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ede6:	4b30      	ldr	r3, [pc, #192]	; (800eea8 <tcp_input+0x28c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	899b      	ldrh	r3, [r3, #12]
 800edec:	b29b      	uxth	r3, r3
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fc fa56 	bl	800b2a0 <lwip_htons>
 800edf4:	4603      	mov	r3, r0
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	4b34      	ldr	r3, [pc, #208]	; (800eed0 <tcp_input+0x2b4>)
 800ee00:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	891a      	ldrh	r2, [r3, #8]
 800ee06:	4b33      	ldr	r3, [pc, #204]	; (800eed4 <tcp_input+0x2b8>)
 800ee08:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee0a:	4b31      	ldr	r3, [pc, #196]	; (800eed0 <tcp_input+0x2b4>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	f003 0303 	and.w	r3, r3, #3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00c      	beq.n	800ee30 <tcp_input+0x214>
    tcplen++;
 800ee16:	4b2f      	ldr	r3, [pc, #188]	; (800eed4 <tcp_input+0x2b8>)
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	4b2d      	ldr	r3, [pc, #180]	; (800eed4 <tcp_input+0x2b8>)
 800ee20:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	891a      	ldrh	r2, [r3, #8]
 800ee26:	4b2b      	ldr	r3, [pc, #172]	; (800eed4 <tcp_input+0x2b8>)
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	f200 82e6 	bhi.w	800f3fc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ee30:	2300      	movs	r3, #0
 800ee32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee34:	4b28      	ldr	r3, [pc, #160]	; (800eed8 <tcp_input+0x2bc>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	61fb      	str	r3, [r7, #28]
 800ee3a:	e09d      	b.n	800ef78 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	7d1b      	ldrb	r3, [r3, #20]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d105      	bne.n	800ee50 <tcp_input+0x234>
 800ee44:	4b15      	ldr	r3, [pc, #84]	; (800ee9c <tcp_input+0x280>)
 800ee46:	22fb      	movs	r2, #251	; 0xfb
 800ee48:	4924      	ldr	r1, [pc, #144]	; (800eedc <tcp_input+0x2c0>)
 800ee4a:	4816      	ldr	r0, [pc, #88]	; (800eea4 <tcp_input+0x288>)
 800ee4c:	f007 fecc 	bl	8016be8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	7d1b      	ldrb	r3, [r3, #20]
 800ee54:	2b0a      	cmp	r3, #10
 800ee56:	d105      	bne.n	800ee64 <tcp_input+0x248>
 800ee58:	4b10      	ldr	r3, [pc, #64]	; (800ee9c <tcp_input+0x280>)
 800ee5a:	22fc      	movs	r2, #252	; 0xfc
 800ee5c:	4920      	ldr	r1, [pc, #128]	; (800eee0 <tcp_input+0x2c4>)
 800ee5e:	4811      	ldr	r0, [pc, #68]	; (800eea4 <tcp_input+0x288>)
 800ee60:	f007 fec2 	bl	8016be8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d105      	bne.n	800ee78 <tcp_input+0x25c>
 800ee6c:	4b0b      	ldr	r3, [pc, #44]	; (800ee9c <tcp_input+0x280>)
 800ee6e:	22fd      	movs	r2, #253	; 0xfd
 800ee70:	491c      	ldr	r1, [pc, #112]	; (800eee4 <tcp_input+0x2c8>)
 800ee72:	480c      	ldr	r0, [pc, #48]	; (800eea4 <tcp_input+0x288>)
 800ee74:	f007 feb8 	bl	8016be8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	7a1b      	ldrb	r3, [r3, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d033      	beq.n	800eee8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	7a1a      	ldrb	r2, [r3, #8]
 800ee84:	4b09      	ldr	r3, [pc, #36]	; (800eeac <tcp_input+0x290>)
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d029      	beq.n	800eee8 <tcp_input+0x2cc>
      prev = pcb;
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	61bb      	str	r3, [r7, #24]
      continue;
 800ee98:	e06b      	b.n	800ef72 <tcp_input+0x356>
 800ee9a:	bf00      	nop
 800ee9c:	0801a2dc 	.word	0x0801a2dc
 800eea0:	0801a310 	.word	0x0801a310
 800eea4:	0801a328 	.word	0x0801a328
 800eea8:	2000d134 	.word	0x2000d134
 800eeac:	200099b8 	.word	0x200099b8
 800eeb0:	2000d138 	.word	0x2000d138
 800eeb4:	2000d13c 	.word	0x2000d13c
 800eeb8:	2000d13a 	.word	0x2000d13a
 800eebc:	0801a350 	.word	0x0801a350
 800eec0:	0801a360 	.word	0x0801a360
 800eec4:	0801a36c 	.word	0x0801a36c
 800eec8:	2000d144 	.word	0x2000d144
 800eecc:	2000d148 	.word	0x2000d148
 800eed0:	2000d150 	.word	0x2000d150
 800eed4:	2000d14e 	.word	0x2000d14e
 800eed8:	2000d118 	.word	0x2000d118
 800eedc:	0801a38c 	.word	0x0801a38c
 800eee0:	0801a3b4 	.word	0x0801a3b4
 800eee4:	0801a3e0 	.word	0x0801a3e0
    }

    if (pcb->remote_port == tcphdr->src &&
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	8b1a      	ldrh	r2, [r3, #24]
 800eeec:	4b72      	ldr	r3, [pc, #456]	; (800f0b8 <tcp_input+0x49c>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d13a      	bne.n	800ef6e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	8ada      	ldrh	r2, [r3, #22]
 800eefc:	4b6e      	ldr	r3, [pc, #440]	; (800f0b8 <tcp_input+0x49c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	885b      	ldrh	r3, [r3, #2]
 800ef02:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d132      	bne.n	800ef6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	685a      	ldr	r2, [r3, #4]
 800ef0c:	4b6b      	ldr	r3, [pc, #428]	; (800f0bc <tcp_input+0x4a0>)
 800ef0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d12c      	bne.n	800ef6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	4b68      	ldr	r3, [pc, #416]	; (800f0bc <tcp_input+0x4a0>)
 800ef1a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d126      	bne.n	800ef6e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	69fa      	ldr	r2, [r7, #28]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d106      	bne.n	800ef38 <tcp_input+0x31c>
 800ef2a:	4b65      	ldr	r3, [pc, #404]	; (800f0c0 <tcp_input+0x4a4>)
 800ef2c:	f240 120d 	movw	r2, #269	; 0x10d
 800ef30:	4964      	ldr	r1, [pc, #400]	; (800f0c4 <tcp_input+0x4a8>)
 800ef32:	4865      	ldr	r0, [pc, #404]	; (800f0c8 <tcp_input+0x4ac>)
 800ef34:	f007 fe58 	bl	8016be8 <iprintf>
      if (prev != NULL) {
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <tcp_input+0x338>
        prev->next = pcb->next;
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	68da      	ldr	r2, [r3, #12]
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ef46:	4b61      	ldr	r3, [pc, #388]	; (800f0cc <tcp_input+0x4b0>)
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ef4e:	4a5f      	ldr	r2, [pc, #380]	; (800f0cc <tcp_input+0x4b0>)
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	69fa      	ldr	r2, [r7, #28]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d111      	bne.n	800ef82 <tcp_input+0x366>
 800ef5e:	4b58      	ldr	r3, [pc, #352]	; (800f0c0 <tcp_input+0x4a4>)
 800ef60:	f240 1215 	movw	r2, #277	; 0x115
 800ef64:	495a      	ldr	r1, [pc, #360]	; (800f0d0 <tcp_input+0x4b4>)
 800ef66:	4858      	ldr	r0, [pc, #352]	; (800f0c8 <tcp_input+0x4ac>)
 800ef68:	f007 fe3e 	bl	8016be8 <iprintf>
      break;
 800ef6c:	e009      	b.n	800ef82 <tcp_input+0x366>
    }
    prev = pcb;
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	61fb      	str	r3, [r7, #28]
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f47f af5e 	bne.w	800ee3c <tcp_input+0x220>
 800ef80:	e000      	b.n	800ef84 <tcp_input+0x368>
      break;
 800ef82:	bf00      	nop
  }

  if (pcb == NULL) {
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f040 80aa 	bne.w	800f0e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef8c:	4b51      	ldr	r3, [pc, #324]	; (800f0d4 <tcp_input+0x4b8>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	61fb      	str	r3, [r7, #28]
 800ef92:	e03f      	b.n	800f014 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	7d1b      	ldrb	r3, [r3, #20]
 800ef98:	2b0a      	cmp	r3, #10
 800ef9a:	d006      	beq.n	800efaa <tcp_input+0x38e>
 800ef9c:	4b48      	ldr	r3, [pc, #288]	; (800f0c0 <tcp_input+0x4a4>)
 800ef9e:	f240 121f 	movw	r2, #287	; 0x11f
 800efa2:	494d      	ldr	r1, [pc, #308]	; (800f0d8 <tcp_input+0x4bc>)
 800efa4:	4848      	ldr	r0, [pc, #288]	; (800f0c8 <tcp_input+0x4ac>)
 800efa6:	f007 fe1f 	bl	8016be8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	7a1b      	ldrb	r3, [r3, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d009      	beq.n	800efc6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	7a1a      	ldrb	r2, [r3, #8]
 800efb6:	4b41      	ldr	r3, [pc, #260]	; (800f0bc <tcp_input+0x4a0>)
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efbe:	3301      	adds	r3, #1
 800efc0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d122      	bne.n	800f00c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	8b1a      	ldrh	r2, [r3, #24]
 800efca:	4b3b      	ldr	r3, [pc, #236]	; (800f0b8 <tcp_input+0x49c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d11b      	bne.n	800f00e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	8ada      	ldrh	r2, [r3, #22]
 800efda:	4b37      	ldr	r3, [pc, #220]	; (800f0b8 <tcp_input+0x49c>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	885b      	ldrh	r3, [r3, #2]
 800efe0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d113      	bne.n	800f00e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	685a      	ldr	r2, [r3, #4]
 800efea:	4b34      	ldr	r3, [pc, #208]	; (800f0bc <tcp_input+0x4a0>)
 800efec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800efee:	429a      	cmp	r2, r3
 800eff0:	d10d      	bne.n	800f00e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	4b31      	ldr	r3, [pc, #196]	; (800f0bc <tcp_input+0x4a0>)
 800eff8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800effa:	429a      	cmp	r2, r3
 800effc:	d107      	bne.n	800f00e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800effe:	69f8      	ldr	r0, [r7, #28]
 800f000:	f000 fb56 	bl	800f6b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7fd fd3d 	bl	800ca84 <pbuf_free>
        return;
 800f00a:	e1fd      	b.n	800f408 <tcp_input+0x7ec>
        continue;
 800f00c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	61fb      	str	r3, [r7, #28]
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1bc      	bne.n	800ef94 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f01e:	4b2f      	ldr	r3, [pc, #188]	; (800f0dc <tcp_input+0x4c0>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	e02a      	b.n	800f07c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	7a1b      	ldrb	r3, [r3, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00c      	beq.n	800f048 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	7a1a      	ldrb	r2, [r3, #8]
 800f032:	4b22      	ldr	r3, [pc, #136]	; (800f0bc <tcp_input+0x4a0>)
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f03a:	3301      	adds	r3, #1
 800f03c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f03e:	429a      	cmp	r2, r3
 800f040:	d002      	beq.n	800f048 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	61bb      	str	r3, [r7, #24]
        continue;
 800f046:	e016      	b.n	800f076 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	8ada      	ldrh	r2, [r3, #22]
 800f04c:	4b1a      	ldr	r3, [pc, #104]	; (800f0b8 <tcp_input+0x49c>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	885b      	ldrh	r3, [r3, #2]
 800f052:	b29b      	uxth	r3, r3
 800f054:	429a      	cmp	r2, r3
 800f056:	d10c      	bne.n	800f072 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	4b17      	ldr	r3, [pc, #92]	; (800f0bc <tcp_input+0x4a0>)
 800f05e:	695b      	ldr	r3, [r3, #20]
 800f060:	429a      	cmp	r2, r3
 800f062:	d00f      	beq.n	800f084 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00d      	beq.n	800f086 <tcp_input+0x46a>
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d009      	beq.n	800f086 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1d1      	bne.n	800f026 <tcp_input+0x40a>
 800f082:	e000      	b.n	800f086 <tcp_input+0x46a>
            break;
 800f084:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d029      	beq.n	800f0e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00a      	beq.n	800f0a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	68da      	ldr	r2, [r3, #12]
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f09a:	4b10      	ldr	r3, [pc, #64]	; (800f0dc <tcp_input+0x4c0>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f0a2:	4a0e      	ldr	r2, [pc, #56]	; (800f0dc <tcp_input+0x4c0>)
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f0a8:	6978      	ldr	r0, [r7, #20]
 800f0aa:	f000 fa03 	bl	800f4b4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7fd fce8 	bl	800ca84 <pbuf_free>
      return;
 800f0b4:	e1a8      	b.n	800f408 <tcp_input+0x7ec>
 800f0b6:	bf00      	nop
 800f0b8:	2000d134 	.word	0x2000d134
 800f0bc:	200099b8 	.word	0x200099b8
 800f0c0:	0801a2dc 	.word	0x0801a2dc
 800f0c4:	0801a408 	.word	0x0801a408
 800f0c8:	0801a328 	.word	0x0801a328
 800f0cc:	2000d118 	.word	0x2000d118
 800f0d0:	0801a434 	.word	0x0801a434
 800f0d4:	2000d11c 	.word	0x2000d11c
 800f0d8:	0801a460 	.word	0x0801a460
 800f0dc:	2000d114 	.word	0x2000d114
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 8158 	beq.w	800f398 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f0e8:	4b95      	ldr	r3, [pc, #596]	; (800f340 <tcp_input+0x724>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	891a      	ldrh	r2, [r3, #8]
 800f0f2:	4b93      	ldr	r3, [pc, #588]	; (800f340 <tcp_input+0x724>)
 800f0f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f0f6:	4a92      	ldr	r2, [pc, #584]	; (800f340 <tcp_input+0x724>)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f0fc:	4b91      	ldr	r3, [pc, #580]	; (800f344 <tcp_input+0x728>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a8f      	ldr	r2, [pc, #572]	; (800f340 <tcp_input+0x724>)
 800f102:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f104:	4b90      	ldr	r3, [pc, #576]	; (800f348 <tcp_input+0x72c>)
 800f106:	2200      	movs	r2, #0
 800f108:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f10a:	4b90      	ldr	r3, [pc, #576]	; (800f34c <tcp_input+0x730>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f110:	4b8f      	ldr	r3, [pc, #572]	; (800f350 <tcp_input+0x734>)
 800f112:	2200      	movs	r2, #0
 800f114:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f116:	4b8f      	ldr	r3, [pc, #572]	; (800f354 <tcp_input+0x738>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	f003 0308 	and.w	r3, r3, #8
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d006      	beq.n	800f130 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7b5b      	ldrb	r3, [r3, #13]
 800f126:	f043 0301 	orr.w	r3, r3, #1
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f134:	2b00      	cmp	r3, #0
 800f136:	d017      	beq.n	800f168 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f138:	69f8      	ldr	r0, [r7, #28]
 800f13a:	f7ff f85b 	bl	800e1f4 <tcp_process_refused_data>
 800f13e:	4603      	mov	r3, r0
 800f140:	f113 0f0d 	cmn.w	r3, #13
 800f144:	d007      	beq.n	800f156 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00c      	beq.n	800f168 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f14e:	4b82      	ldr	r3, [pc, #520]	; (800f358 <tcp_input+0x73c>)
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d008      	beq.n	800f168 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f040 80e3 	bne.w	800f326 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f160:	69f8      	ldr	r0, [r7, #28]
 800f162:	f003 fe05 	bl	8012d70 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f166:	e0de      	b.n	800f326 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f168:	4a7c      	ldr	r2, [pc, #496]	; (800f35c <tcp_input+0x740>)
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f16e:	69f8      	ldr	r0, [r7, #28]
 800f170:	f000 fb18 	bl	800f7a4 <tcp_process>
 800f174:	4603      	mov	r3, r0
 800f176:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f17c:	f113 0f0d 	cmn.w	r3, #13
 800f180:	f000 80d3 	beq.w	800f32a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f184:	4b71      	ldr	r3, [pc, #452]	; (800f34c <tcp_input+0x730>)
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	f003 0308 	and.w	r3, r3, #8
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d015      	beq.n	800f1bc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f196:	2b00      	cmp	r3, #0
 800f198:	d008      	beq.n	800f1ac <tcp_input+0x590>
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	6912      	ldr	r2, [r2, #16]
 800f1a4:	f06f 010d 	mvn.w	r1, #13
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f1ac:	69f9      	ldr	r1, [r7, #28]
 800f1ae:	486c      	ldr	r0, [pc, #432]	; (800f360 <tcp_input+0x744>)
 800f1b0:	f7ff fbbc 	bl	800e92c <tcp_pcb_remove>
        tcp_free(pcb);
 800f1b4:	69f8      	ldr	r0, [r7, #28]
 800f1b6:	f7fd ff21 	bl	800cffc <tcp_free>
 800f1ba:	e0da      	b.n	800f372 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f1c0:	4b63      	ldr	r3, [pc, #396]	; (800f350 <tcp_input+0x734>)
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d01d      	beq.n	800f204 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f1c8:	4b61      	ldr	r3, [pc, #388]	; (800f350 <tcp_input+0x734>)
 800f1ca:	881b      	ldrh	r3, [r3, #0]
 800f1cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00a      	beq.n	800f1ee <tcp_input+0x5d2>
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1de:	69fa      	ldr	r2, [r7, #28]
 800f1e0:	6910      	ldr	r0, [r2, #16]
 800f1e2:	89fa      	ldrh	r2, [r7, #14]
 800f1e4:	69f9      	ldr	r1, [r7, #28]
 800f1e6:	4798      	blx	r3
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	74fb      	strb	r3, [r7, #19]
 800f1ec:	e001      	b.n	800f1f2 <tcp_input+0x5d6>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f1f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1f6:	f113 0f0d 	cmn.w	r3, #13
 800f1fa:	f000 8098 	beq.w	800f32e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f1fe:	4b54      	ldr	r3, [pc, #336]	; (800f350 <tcp_input+0x734>)
 800f200:	2200      	movs	r2, #0
 800f202:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f204:	69f8      	ldr	r0, [r7, #28]
 800f206:	f000 f915 	bl	800f434 <tcp_input_delayed_close>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f040 8090 	bne.w	800f332 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f212:	4b4d      	ldr	r3, [pc, #308]	; (800f348 <tcp_input+0x72c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d041      	beq.n	800f29e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d006      	beq.n	800f230 <tcp_input+0x614>
 800f222:	4b50      	ldr	r3, [pc, #320]	; (800f364 <tcp_input+0x748>)
 800f224:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f228:	494f      	ldr	r1, [pc, #316]	; (800f368 <tcp_input+0x74c>)
 800f22a:	4850      	ldr	r0, [pc, #320]	; (800f36c <tcp_input+0x750>)
 800f22c:	f007 fcdc 	bl	8016be8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	8b5b      	ldrh	r3, [r3, #26]
 800f234:	f003 0310 	and.w	r3, r3, #16
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d008      	beq.n	800f24e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f23c:	4b42      	ldr	r3, [pc, #264]	; (800f348 <tcp_input+0x72c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4618      	mov	r0, r3
 800f242:	f7fd fc1f 	bl	800ca84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f246:	69f8      	ldr	r0, [r7, #28]
 800f248:	f7fe fa1c 	bl	800d684 <tcp_abort>
            goto aborted;
 800f24c:	e091      	b.n	800f372 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00c      	beq.n	800f272 <tcp_input+0x656>
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	6918      	ldr	r0, [r3, #16]
 800f262:	4b39      	ldr	r3, [pc, #228]	; (800f348 <tcp_input+0x72c>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	2300      	movs	r3, #0
 800f268:	69f9      	ldr	r1, [r7, #28]
 800f26a:	47a0      	blx	r4
 800f26c:	4603      	mov	r3, r0
 800f26e:	74fb      	strb	r3, [r7, #19]
 800f270:	e008      	b.n	800f284 <tcp_input+0x668>
 800f272:	4b35      	ldr	r3, [pc, #212]	; (800f348 <tcp_input+0x72c>)
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	2300      	movs	r3, #0
 800f278:	69f9      	ldr	r1, [r7, #28]
 800f27a:	2000      	movs	r0, #0
 800f27c:	f7ff f890 	bl	800e3a0 <tcp_recv_null>
 800f280:	4603      	mov	r3, r0
 800f282:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f288:	f113 0f0d 	cmn.w	r3, #13
 800f28c:	d053      	beq.n	800f336 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f28e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d003      	beq.n	800f29e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f296:	4b2c      	ldr	r3, [pc, #176]	; (800f348 <tcp_input+0x72c>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f29e:	4b2b      	ldr	r3, [pc, #172]	; (800f34c <tcp_input+0x730>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	f003 0320 	and.w	r3, r3, #32
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d030      	beq.n	800f30c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d009      	beq.n	800f2c6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2b6:	7b5a      	ldrb	r2, [r3, #13]
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2bc:	f042 0220 	orr.w	r2, r2, #32
 800f2c0:	b2d2      	uxtb	r2, r2
 800f2c2:	735a      	strb	r2, [r3, #13]
 800f2c4:	e022      	b.n	800f30c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f2ce:	d005      	beq.n	800f2dc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00b      	beq.n	800f2fe <tcp_input+0x6e2>
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	6918      	ldr	r0, [r3, #16]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	69f9      	ldr	r1, [r7, #28]
 800f2f6:	47a0      	blx	r4
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	74fb      	strb	r3, [r7, #19]
 800f2fc:	e001      	b.n	800f302 <tcp_input+0x6e6>
 800f2fe:	2300      	movs	r3, #0
 800f300:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f306:	f113 0f0d 	cmn.w	r3, #13
 800f30a:	d016      	beq.n	800f33a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f30c:	4b13      	ldr	r3, [pc, #76]	; (800f35c <tcp_input+0x740>)
 800f30e:	2200      	movs	r2, #0
 800f310:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f312:	69f8      	ldr	r0, [r7, #28]
 800f314:	f000 f88e 	bl	800f434 <tcp_input_delayed_close>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d128      	bne.n	800f370 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f31e:	69f8      	ldr	r0, [r7, #28]
 800f320:	f002 ff20 	bl	8012164 <tcp_output>
 800f324:	e025      	b.n	800f372 <tcp_input+0x756>
        goto aborted;
 800f326:	bf00      	nop
 800f328:	e023      	b.n	800f372 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f32a:	bf00      	nop
 800f32c:	e021      	b.n	800f372 <tcp_input+0x756>
              goto aborted;
 800f32e:	bf00      	nop
 800f330:	e01f      	b.n	800f372 <tcp_input+0x756>
          goto aborted;
 800f332:	bf00      	nop
 800f334:	e01d      	b.n	800f372 <tcp_input+0x756>
            goto aborted;
 800f336:	bf00      	nop
 800f338:	e01b      	b.n	800f372 <tcp_input+0x756>
              goto aborted;
 800f33a:	bf00      	nop
 800f33c:	e019      	b.n	800f372 <tcp_input+0x756>
 800f33e:	bf00      	nop
 800f340:	2000d124 	.word	0x2000d124
 800f344:	2000d134 	.word	0x2000d134
 800f348:	2000d154 	.word	0x2000d154
 800f34c:	2000d151 	.word	0x2000d151
 800f350:	2000d14c 	.word	0x2000d14c
 800f354:	2000d150 	.word	0x2000d150
 800f358:	2000d14e 	.word	0x2000d14e
 800f35c:	2000d158 	.word	0x2000d158
 800f360:	2000d118 	.word	0x2000d118
 800f364:	0801a2dc 	.word	0x0801a2dc
 800f368:	0801a490 	.word	0x0801a490
 800f36c:	0801a328 	.word	0x0801a328
          goto aborted;
 800f370:	bf00      	nop
    tcp_input_pcb = NULL;
 800f372:	4b27      	ldr	r3, [pc, #156]	; (800f410 <tcp_input+0x7f4>)
 800f374:	2200      	movs	r2, #0
 800f376:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f378:	4b26      	ldr	r3, [pc, #152]	; (800f414 <tcp_input+0x7f8>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f37e:	4b26      	ldr	r3, [pc, #152]	; (800f418 <tcp_input+0x7fc>)
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d03f      	beq.n	800f406 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f386:	4b24      	ldr	r3, [pc, #144]	; (800f418 <tcp_input+0x7fc>)
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fd fb7a 	bl	800ca84 <pbuf_free>
      inseg.p = NULL;
 800f390:	4b21      	ldr	r3, [pc, #132]	; (800f418 <tcp_input+0x7fc>)
 800f392:	2200      	movs	r2, #0
 800f394:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f396:	e036      	b.n	800f406 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f398:	4b20      	ldr	r3, [pc, #128]	; (800f41c <tcp_input+0x800>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	899b      	ldrh	r3, [r3, #12]
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fb ff7d 	bl	800b2a0 <lwip_htons>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	f003 0304 	and.w	r3, r3, #4
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d118      	bne.n	800f3e4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3b2:	4b1b      	ldr	r3, [pc, #108]	; (800f420 <tcp_input+0x804>)
 800f3b4:	6819      	ldr	r1, [r3, #0]
 800f3b6:	4b1b      	ldr	r3, [pc, #108]	; (800f424 <tcp_input+0x808>)
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	4b1a      	ldr	r3, [pc, #104]	; (800f428 <tcp_input+0x80c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3c2:	4b16      	ldr	r3, [pc, #88]	; (800f41c <tcp_input+0x800>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3c6:	885b      	ldrh	r3, [r3, #2]
 800f3c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3ca:	4a14      	ldr	r2, [pc, #80]	; (800f41c <tcp_input+0x800>)
 800f3cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3ce:	8812      	ldrh	r2, [r2, #0]
 800f3d0:	b292      	uxth	r2, r2
 800f3d2:	9202      	str	r2, [sp, #8]
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	4b15      	ldr	r3, [pc, #84]	; (800f42c <tcp_input+0x810>)
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	4b15      	ldr	r3, [pc, #84]	; (800f430 <tcp_input+0x814>)
 800f3dc:	4602      	mov	r2, r0
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f003 fc74 	bl	8012ccc <tcp_rst>
    pbuf_free(p);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7fd fb4d 	bl	800ca84 <pbuf_free>
  return;
 800f3ea:	e00c      	b.n	800f406 <tcp_input+0x7ea>
    goto dropped;
 800f3ec:	bf00      	nop
 800f3ee:	e006      	b.n	800f3fe <tcp_input+0x7e2>
    goto dropped;
 800f3f0:	bf00      	nop
 800f3f2:	e004      	b.n	800f3fe <tcp_input+0x7e2>
    goto dropped;
 800f3f4:	bf00      	nop
 800f3f6:	e002      	b.n	800f3fe <tcp_input+0x7e2>
      goto dropped;
 800f3f8:	bf00      	nop
 800f3fa:	e000      	b.n	800f3fe <tcp_input+0x7e2>
      goto dropped;
 800f3fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7fd fb40 	bl	800ca84 <pbuf_free>
 800f404:	e000      	b.n	800f408 <tcp_input+0x7ec>
  return;
 800f406:	bf00      	nop
}
 800f408:	3724      	adds	r7, #36	; 0x24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd90      	pop	{r4, r7, pc}
 800f40e:	bf00      	nop
 800f410:	2000d158 	.word	0x2000d158
 800f414:	2000d154 	.word	0x2000d154
 800f418:	2000d124 	.word	0x2000d124
 800f41c:	2000d134 	.word	0x2000d134
 800f420:	2000d148 	.word	0x2000d148
 800f424:	2000d14e 	.word	0x2000d14e
 800f428:	2000d144 	.word	0x2000d144
 800f42c:	200099c8 	.word	0x200099c8
 800f430:	200099cc 	.word	0x200099cc

0800f434 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_input_delayed_close+0x1c>
 800f442:	4b17      	ldr	r3, [pc, #92]	; (800f4a0 <tcp_input_delayed_close+0x6c>)
 800f444:	f240 225a 	movw	r2, #602	; 0x25a
 800f448:	4916      	ldr	r1, [pc, #88]	; (800f4a4 <tcp_input_delayed_close+0x70>)
 800f44a:	4817      	ldr	r0, [pc, #92]	; (800f4a8 <tcp_input_delayed_close+0x74>)
 800f44c:	f007 fbcc 	bl	8016be8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f450:	4b16      	ldr	r3, [pc, #88]	; (800f4ac <tcp_input_delayed_close+0x78>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 0310 	and.w	r3, r3, #16
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d01c      	beq.n	800f496 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	8b5b      	ldrh	r3, [r3, #26]
 800f460:	f003 0310 	and.w	r3, r3, #16
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10d      	bne.n	800f484 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d008      	beq.n	800f484 <tcp_input_delayed_close+0x50>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	6912      	ldr	r2, [r2, #16]
 800f47c:	f06f 010e 	mvn.w	r1, #14
 800f480:	4610      	mov	r0, r2
 800f482:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f484:	6879      	ldr	r1, [r7, #4]
 800f486:	480a      	ldr	r0, [pc, #40]	; (800f4b0 <tcp_input_delayed_close+0x7c>)
 800f488:	f7ff fa50 	bl	800e92c <tcp_pcb_remove>
    tcp_free(pcb);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7fd fdb5 	bl	800cffc <tcp_free>
    return 1;
 800f492:	2301      	movs	r3, #1
 800f494:	e000      	b.n	800f498 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	0801a2dc 	.word	0x0801a2dc
 800f4a4:	0801a4ac 	.word	0x0801a4ac
 800f4a8:	0801a328 	.word	0x0801a328
 800f4ac:	2000d151 	.word	0x2000d151
 800f4b0:	2000d118 	.word	0x2000d118

0800f4b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f4b4:	b590      	push	{r4, r7, lr}
 800f4b6:	b08b      	sub	sp, #44	; 0x2c
 800f4b8:	af04      	add	r7, sp, #16
 800f4ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f4bc:	4b6f      	ldr	r3, [pc, #444]	; (800f67c <tcp_listen_input+0x1c8>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f003 0304 	and.w	r3, r3, #4
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f040 80d2 	bne.w	800f66e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d106      	bne.n	800f4de <tcp_listen_input+0x2a>
 800f4d0:	4b6b      	ldr	r3, [pc, #428]	; (800f680 <tcp_listen_input+0x1cc>)
 800f4d2:	f240 2281 	movw	r2, #641	; 0x281
 800f4d6:	496b      	ldr	r1, [pc, #428]	; (800f684 <tcp_listen_input+0x1d0>)
 800f4d8:	486b      	ldr	r0, [pc, #428]	; (800f688 <tcp_listen_input+0x1d4>)
 800f4da:	f007 fb85 	bl	8016be8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f4de:	4b67      	ldr	r3, [pc, #412]	; (800f67c <tcp_listen_input+0x1c8>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	f003 0310 	and.w	r3, r3, #16
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d019      	beq.n	800f51e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ea:	4b68      	ldr	r3, [pc, #416]	; (800f68c <tcp_listen_input+0x1d8>)
 800f4ec:	6819      	ldr	r1, [r3, #0]
 800f4ee:	4b68      	ldr	r3, [pc, #416]	; (800f690 <tcp_listen_input+0x1dc>)
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4b67      	ldr	r3, [pc, #412]	; (800f694 <tcp_listen_input+0x1e0>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4fa:	4b67      	ldr	r3, [pc, #412]	; (800f698 <tcp_listen_input+0x1e4>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f502:	4a65      	ldr	r2, [pc, #404]	; (800f698 <tcp_listen_input+0x1e4>)
 800f504:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f506:	8812      	ldrh	r2, [r2, #0]
 800f508:	b292      	uxth	r2, r2
 800f50a:	9202      	str	r2, [sp, #8]
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	4b63      	ldr	r3, [pc, #396]	; (800f69c <tcp_listen_input+0x1e8>)
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	4b63      	ldr	r3, [pc, #396]	; (800f6a0 <tcp_listen_input+0x1ec>)
 800f514:	4602      	mov	r2, r0
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f003 fbd8 	bl	8012ccc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f51c:	e0a9      	b.n	800f672 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f51e:	4b57      	ldr	r3, [pc, #348]	; (800f67c <tcp_listen_input+0x1c8>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	f003 0302 	and.w	r3, r3, #2
 800f526:	2b00      	cmp	r3, #0
 800f528:	f000 80a3 	beq.w	800f672 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	7d5b      	ldrb	r3, [r3, #21]
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff f859 	bl	800e5e8 <tcp_alloc>
 800f536:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d111      	bne.n	800f562 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00a      	beq.n	800f55c <tcp_listen_input+0xa8>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	6910      	ldr	r0, [r2, #16]
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295
 800f552:	2100      	movs	r1, #0
 800f554:	4798      	blx	r3
 800f556:	4603      	mov	r3, r0
 800f558:	73bb      	strb	r3, [r7, #14]
      return;
 800f55a:	e08b      	b.n	800f674 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f55c:	23f0      	movs	r3, #240	; 0xf0
 800f55e:	73bb      	strb	r3, [r7, #14]
      return;
 800f560:	e088      	b.n	800f674 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f562:	4b50      	ldr	r3, [pc, #320]	; (800f6a4 <tcp_listen_input+0x1f0>)
 800f564:	695a      	ldr	r2, [r3, #20]
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f56a:	4b4e      	ldr	r3, [pc, #312]	; (800f6a4 <tcp_listen_input+0x1f0>)
 800f56c:	691a      	ldr	r2, [r3, #16]
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8ada      	ldrh	r2, [r3, #22]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f57a:	4b47      	ldr	r3, [pc, #284]	; (800f698 <tcp_listen_input+0x1e4>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b29a      	uxth	r2, r3
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2203      	movs	r2, #3
 800f58a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f58c:	4b41      	ldr	r3, [pc, #260]	; (800f694 <tcp_listen_input+0x1e0>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	1c5a      	adds	r2, r3, #1
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f59e:	6978      	ldr	r0, [r7, #20]
 800f5a0:	f7ff fa58 	bl	800ea54 <tcp_next_iss>
 800f5a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	693a      	ldr	r2, [r7, #16]
 800f5aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	693a      	ldr	r2, [r7, #16]
 800f5b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f5be:	4b35      	ldr	r3, [pc, #212]	; (800f694 <tcp_listen_input+0x1e0>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	1e5a      	subs	r2, r3, #1
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	691a      	ldr	r2, [r3, #16]
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	7a5b      	ldrb	r3, [r3, #9]
 800f5da:	f003 030c 	and.w	r3, r3, #12
 800f5de:	b2da      	uxtb	r2, r3
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	7a1a      	ldrb	r2, [r3, #8]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f5ec:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <tcp_listen_input+0x1f4>)
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	60da      	str	r2, [r3, #12]
 800f5f4:	4a2c      	ldr	r2, [pc, #176]	; (800f6a8 <tcp_listen_input+0x1f4>)
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	6013      	str	r3, [r2, #0]
 800f5fa:	f003 fd29 	bl	8013050 <tcp_timer_needed>
 800f5fe:	4b2b      	ldr	r3, [pc, #172]	; (800f6ac <tcp_listen_input+0x1f8>)
 800f600:	2201      	movs	r2, #1
 800f602:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f604:	6978      	ldr	r0, [r7, #20]
 800f606:	f001 fd8f 	bl	8011128 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f60a:	4b23      	ldr	r3, [pc, #140]	; (800f698 <tcp_listen_input+0x1e4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	89db      	ldrh	r3, [r3, #14]
 800f610:	b29a      	uxth	r2, r3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	3304      	adds	r3, #4
 800f62c:	4618      	mov	r0, r3
 800f62e:	f005 fce3 	bl	8014ff8 <ip4_route>
 800f632:	4601      	mov	r1, r0
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	3304      	adds	r3, #4
 800f638:	461a      	mov	r2, r3
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7ff fa30 	bl	800eaa0 <tcp_eff_send_mss_netif>
 800f640:	4603      	mov	r3, r0
 800f642:	461a      	mov	r2, r3
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f648:	2112      	movs	r1, #18
 800f64a:	6978      	ldr	r0, [r7, #20]
 800f64c:	f002 fc9c 	bl	8011f88 <tcp_enqueue_flags>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d004      	beq.n	800f666 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f65c:	2100      	movs	r1, #0
 800f65e:	6978      	ldr	r0, [r7, #20]
 800f660:	f7fd ff52 	bl	800d508 <tcp_abandon>
      return;
 800f664:	e006      	b.n	800f674 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f666:	6978      	ldr	r0, [r7, #20]
 800f668:	f002 fd7c 	bl	8012164 <tcp_output>
  return;
 800f66c:	e001      	b.n	800f672 <tcp_listen_input+0x1be>
    return;
 800f66e:	bf00      	nop
 800f670:	e000      	b.n	800f674 <tcp_listen_input+0x1c0>
  return;
 800f672:	bf00      	nop
}
 800f674:	371c      	adds	r7, #28
 800f676:	46bd      	mov	sp, r7
 800f678:	bd90      	pop	{r4, r7, pc}
 800f67a:	bf00      	nop
 800f67c:	2000d150 	.word	0x2000d150
 800f680:	0801a2dc 	.word	0x0801a2dc
 800f684:	0801a4d4 	.word	0x0801a4d4
 800f688:	0801a328 	.word	0x0801a328
 800f68c:	2000d148 	.word	0x2000d148
 800f690:	2000d14e 	.word	0x2000d14e
 800f694:	2000d144 	.word	0x2000d144
 800f698:	2000d134 	.word	0x2000d134
 800f69c:	200099c8 	.word	0x200099c8
 800f6a0:	200099cc 	.word	0x200099cc
 800f6a4:	200099b8 	.word	0x200099b8
 800f6a8:	2000d118 	.word	0x2000d118
 800f6ac:	2000d120 	.word	0x2000d120

0800f6b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af04      	add	r7, sp, #16
 800f6b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f6b8:	4b2f      	ldr	r3, [pc, #188]	; (800f778 <tcp_timewait_input+0xc8>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	f003 0304 	and.w	r3, r3, #4
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d153      	bne.n	800f76c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <tcp_timewait_input+0x28>
 800f6ca:	4b2c      	ldr	r3, [pc, #176]	; (800f77c <tcp_timewait_input+0xcc>)
 800f6cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f6d0:	492b      	ldr	r1, [pc, #172]	; (800f780 <tcp_timewait_input+0xd0>)
 800f6d2:	482c      	ldr	r0, [pc, #176]	; (800f784 <tcp_timewait_input+0xd4>)
 800f6d4:	f007 fa88 	bl	8016be8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f6d8:	4b27      	ldr	r3, [pc, #156]	; (800f778 <tcp_timewait_input+0xc8>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0302 	and.w	r3, r3, #2
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d02a      	beq.n	800f73a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f6e4:	4b28      	ldr	r3, [pc, #160]	; (800f788 <tcp_timewait_input+0xd8>)
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	db2d      	blt.n	800f74e <tcp_timewait_input+0x9e>
 800f6f2:	4b25      	ldr	r3, [pc, #148]	; (800f788 <tcp_timewait_input+0xd8>)
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fa:	6879      	ldr	r1, [r7, #4]
 800f6fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6fe:	440b      	add	r3, r1
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	dc23      	bgt.n	800f74e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f706:	4b21      	ldr	r3, [pc, #132]	; (800f78c <tcp_timewait_input+0xdc>)
 800f708:	6819      	ldr	r1, [r3, #0]
 800f70a:	4b21      	ldr	r3, [pc, #132]	; (800f790 <tcp_timewait_input+0xe0>)
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	461a      	mov	r2, r3
 800f710:	4b1d      	ldr	r3, [pc, #116]	; (800f788 <tcp_timewait_input+0xd8>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f716:	4b1f      	ldr	r3, [pc, #124]	; (800f794 <tcp_timewait_input+0xe4>)
 800f718:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f71a:	885b      	ldrh	r3, [r3, #2]
 800f71c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f71e:	4a1d      	ldr	r2, [pc, #116]	; (800f794 <tcp_timewait_input+0xe4>)
 800f720:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f722:	8812      	ldrh	r2, [r2, #0]
 800f724:	b292      	uxth	r2, r2
 800f726:	9202      	str	r2, [sp, #8]
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	4b1b      	ldr	r3, [pc, #108]	; (800f798 <tcp_timewait_input+0xe8>)
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	4b1b      	ldr	r3, [pc, #108]	; (800f79c <tcp_timewait_input+0xec>)
 800f730:	4602      	mov	r2, r0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f003 faca 	bl	8012ccc <tcp_rst>
      return;
 800f738:	e01b      	b.n	800f772 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f73a:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <tcp_timewait_input+0xc8>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	d003      	beq.n	800f74e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f746:	4b16      	ldr	r3, [pc, #88]	; (800f7a0 <tcp_timewait_input+0xf0>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f74e:	4b10      	ldr	r3, [pc, #64]	; (800f790 <tcp_timewait_input+0xe0>)
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00c      	beq.n	800f770 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8b5b      	ldrh	r3, [r3, #26]
 800f75a:	f043 0302 	orr.w	r3, r3, #2
 800f75e:	b29a      	uxth	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f002 fcfd 	bl	8012164 <tcp_output>
  }
  return;
 800f76a:	e001      	b.n	800f770 <tcp_timewait_input+0xc0>
    return;
 800f76c:	bf00      	nop
 800f76e:	e000      	b.n	800f772 <tcp_timewait_input+0xc2>
  return;
 800f770:	bf00      	nop
}
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2000d150 	.word	0x2000d150
 800f77c:	0801a2dc 	.word	0x0801a2dc
 800f780:	0801a4f4 	.word	0x0801a4f4
 800f784:	0801a328 	.word	0x0801a328
 800f788:	2000d144 	.word	0x2000d144
 800f78c:	2000d148 	.word	0x2000d148
 800f790:	2000d14e 	.word	0x2000d14e
 800f794:	2000d134 	.word	0x2000d134
 800f798:	200099c8 	.word	0x200099c8
 800f79c:	200099cc 	.word	0x200099cc
 800f7a0:	2000d10c 	.word	0x2000d10c

0800f7a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f7a4:	b590      	push	{r4, r7, lr}
 800f7a6:	b08d      	sub	sp, #52	; 0x34
 800f7a8:	af04      	add	r7, sp, #16
 800f7aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d106      	bne.n	800f7c8 <tcp_process+0x24>
 800f7ba:	4b9d      	ldr	r3, [pc, #628]	; (800fa30 <tcp_process+0x28c>)
 800f7bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f7c0:	499c      	ldr	r1, [pc, #624]	; (800fa34 <tcp_process+0x290>)
 800f7c2:	489d      	ldr	r0, [pc, #628]	; (800fa38 <tcp_process+0x294>)
 800f7c4:	f007 fa10 	bl	8016be8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f7c8:	4b9c      	ldr	r3, [pc, #624]	; (800fa3c <tcp_process+0x298>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	f003 0304 	and.w	r3, r3, #4
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d04e      	beq.n	800f872 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	7d1b      	ldrb	r3, [r3, #20]
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	d108      	bne.n	800f7ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7e0:	4b97      	ldr	r3, [pc, #604]	; (800fa40 <tcp_process+0x29c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d123      	bne.n	800f830 <tcp_process+0x8c>
        acceptable = 1;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	76fb      	strb	r3, [r7, #27]
 800f7ec:	e020      	b.n	800f830 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7f2:	4b94      	ldr	r3, [pc, #592]	; (800fa44 <tcp_process+0x2a0>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d102      	bne.n	800f800 <tcp_process+0x5c>
        acceptable = 1;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	76fb      	strb	r3, [r7, #27]
 800f7fe:	e017      	b.n	800f830 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f800:	4b90      	ldr	r3, [pc, #576]	; (800fa44 <tcp_process+0x2a0>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	db10      	blt.n	800f830 <tcp_process+0x8c>
 800f80e:	4b8d      	ldr	r3, [pc, #564]	; (800fa44 <tcp_process+0x2a0>)
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f816:	6879      	ldr	r1, [r7, #4]
 800f818:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f81a:	440b      	add	r3, r1
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dc06      	bgt.n	800f830 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8b5b      	ldrh	r3, [r3, #26]
 800f826:	f043 0302 	orr.w	r3, r3, #2
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f830:	7efb      	ldrb	r3, [r7, #27]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d01b      	beq.n	800f86e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	7d1b      	ldrb	r3, [r3, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d106      	bne.n	800f84c <tcp_process+0xa8>
 800f83e:	4b7c      	ldr	r3, [pc, #496]	; (800fa30 <tcp_process+0x28c>)
 800f840:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f844:	4980      	ldr	r1, [pc, #512]	; (800fa48 <tcp_process+0x2a4>)
 800f846:	487c      	ldr	r0, [pc, #496]	; (800fa38 <tcp_process+0x294>)
 800f848:	f007 f9ce 	bl	8016be8 <iprintf>
      recv_flags |= TF_RESET;
 800f84c:	4b7f      	ldr	r3, [pc, #508]	; (800fa4c <tcp_process+0x2a8>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	f043 0308 	orr.w	r3, r3, #8
 800f854:	b2da      	uxtb	r2, r3
 800f856:	4b7d      	ldr	r3, [pc, #500]	; (800fa4c <tcp_process+0x2a8>)
 800f858:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	8b5b      	ldrh	r3, [r3, #26]
 800f85e:	f023 0301 	bic.w	r3, r3, #1
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f868:	f06f 030d 	mvn.w	r3, #13
 800f86c:	e37a      	b.n	800ff64 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	e378      	b.n	800ff64 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f872:	4b72      	ldr	r3, [pc, #456]	; (800fa3c <tcp_process+0x298>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	f003 0302 	and.w	r3, r3, #2
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d010      	beq.n	800f8a0 <tcp_process+0xfc>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7d1b      	ldrb	r3, [r3, #20]
 800f882:	2b02      	cmp	r3, #2
 800f884:	d00c      	beq.n	800f8a0 <tcp_process+0xfc>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	7d1b      	ldrb	r3, [r3, #20]
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d008      	beq.n	800f8a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	8b5b      	ldrh	r3, [r3, #26]
 800f892:	f043 0302 	orr.w	r3, r3, #2
 800f896:	b29a      	uxth	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	e361      	b.n	800ff64 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8b5b      	ldrh	r3, [r3, #26]
 800f8a4:	f003 0310 	and.w	r3, r3, #16
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d103      	bne.n	800f8b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f8ac:	4b68      	ldr	r3, [pc, #416]	; (800fa50 <tcp_process+0x2ac>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f001 fc2f 	bl	8011128 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7d1b      	ldrb	r3, [r3, #20]
 800f8ce:	3b02      	subs	r3, #2
 800f8d0:	2b07      	cmp	r3, #7
 800f8d2:	f200 8337 	bhi.w	800ff44 <tcp_process+0x7a0>
 800f8d6:	a201      	add	r2, pc, #4	; (adr r2, 800f8dc <tcp_process+0x138>)
 800f8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8dc:	0800f8fd 	.word	0x0800f8fd
 800f8e0:	0800fb2d 	.word	0x0800fb2d
 800f8e4:	0800fca5 	.word	0x0800fca5
 800f8e8:	0800fccf 	.word	0x0800fccf
 800f8ec:	0800fdf3 	.word	0x0800fdf3
 800f8f0:	0800fca5 	.word	0x0800fca5
 800f8f4:	0800fe7f 	.word	0x0800fe7f
 800f8f8:	0800ff0f 	.word	0x0800ff0f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f8fc:	4b4f      	ldr	r3, [pc, #316]	; (800fa3c <tcp_process+0x298>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 0310 	and.w	r3, r3, #16
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 80e4 	beq.w	800fad2 <tcp_process+0x32e>
 800f90a:	4b4c      	ldr	r3, [pc, #304]	; (800fa3c <tcp_process+0x298>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	f003 0302 	and.w	r3, r3, #2
 800f912:	2b00      	cmp	r3, #0
 800f914:	f000 80dd 	beq.w	800fad2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	4b48      	ldr	r3, [pc, #288]	; (800fa40 <tcp_process+0x29c>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	f040 80d5 	bne.w	800fad2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f928:	4b46      	ldr	r3, [pc, #280]	; (800fa44 <tcp_process+0x2a0>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f93a:	4b41      	ldr	r3, [pc, #260]	; (800fa40 <tcp_process+0x29c>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f942:	4b44      	ldr	r3, [pc, #272]	; (800fa54 <tcp_process+0x2b0>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	89db      	ldrh	r3, [r3, #14]
 800f948:	b29a      	uxth	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f95c:	4b39      	ldr	r3, [pc, #228]	; (800fa44 <tcp_process+0x2a0>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	1e5a      	subs	r2, r3, #1
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2204      	movs	r2, #4
 800f96a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	3304      	adds	r3, #4
 800f974:	4618      	mov	r0, r3
 800f976:	f005 fb3f 	bl	8014ff8 <ip4_route>
 800f97a:	4601      	mov	r1, r0
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3304      	adds	r3, #4
 800f980:	461a      	mov	r2, r3
 800f982:	4620      	mov	r0, r4
 800f984:	f7ff f88c 	bl	800eaa0 <tcp_eff_send_mss_netif>
 800f988:	4603      	mov	r3, r0
 800f98a:	461a      	mov	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f994:	009a      	lsls	r2, r3, #2
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f99a:	005b      	lsls	r3, r3, #1
 800f99c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f9a0:	428b      	cmp	r3, r1
 800f9a2:	bf38      	it	cc
 800f9a4:	460b      	movcc	r3, r1
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d204      	bcs.n	800f9b4 <tcp_process+0x210>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	e00d      	b.n	800f9d0 <tcp_process+0x22c>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d904      	bls.n	800f9cc <tcp_process+0x228>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	e001      	b.n	800f9d0 <tcp_process+0x22c>
 800f9cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d106      	bne.n	800f9ee <tcp_process+0x24a>
 800f9e0:	4b13      	ldr	r3, [pc, #76]	; (800fa30 <tcp_process+0x28c>)
 800f9e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f9e6:	491c      	ldr	r1, [pc, #112]	; (800fa58 <tcp_process+0x2b4>)
 800f9e8:	4813      	ldr	r0, [pc, #76]	; (800fa38 <tcp_process+0x294>)
 800f9ea:	f007 f8fd 	bl	8016be8 <iprintf>
        --pcb->snd_queuelen;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9f4:	3b01      	subs	r3, #1
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa02:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d12a      	bne.n	800fa60 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa0e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d106      	bne.n	800fa24 <tcp_process+0x280>
 800fa16:	4b06      	ldr	r3, [pc, #24]	; (800fa30 <tcp_process+0x28c>)
 800fa18:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fa1c:	490f      	ldr	r1, [pc, #60]	; (800fa5c <tcp_process+0x2b8>)
 800fa1e:	4806      	ldr	r0, [pc, #24]	; (800fa38 <tcp_process+0x294>)
 800fa20:	f007 f8e2 	bl	8016be8 <iprintf>
          pcb->unsent = rseg->next;
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa2c:	e01c      	b.n	800fa68 <tcp_process+0x2c4>
 800fa2e:	bf00      	nop
 800fa30:	0801a2dc 	.word	0x0801a2dc
 800fa34:	0801a514 	.word	0x0801a514
 800fa38:	0801a328 	.word	0x0801a328
 800fa3c:	2000d150 	.word	0x2000d150
 800fa40:	2000d148 	.word	0x2000d148
 800fa44:	2000d144 	.word	0x2000d144
 800fa48:	0801a530 	.word	0x0801a530
 800fa4c:	2000d151 	.word	0x2000d151
 800fa50:	2000d10c 	.word	0x2000d10c
 800fa54:	2000d134 	.word	0x2000d134
 800fa58:	0801a550 	.word	0x0801a550
 800fa5c:	0801a568 	.word	0x0801a568
        } else {
          pcb->unacked = rseg->next;
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fa68:	69f8      	ldr	r0, [r7, #28]
 800fa6a:	f7fe fc54 	bl	800e316 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d104      	bne.n	800fa80 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa7c:	861a      	strh	r2, [r3, #48]	; 0x30
 800fa7e:	e006      	b.n	800fa8e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00a      	beq.n	800faae <tcp_process+0x30a>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	6910      	ldr	r0, [r2, #16]
 800faa2:	2200      	movs	r2, #0
 800faa4:	6879      	ldr	r1, [r7, #4]
 800faa6:	4798      	blx	r3
 800faa8:	4603      	mov	r3, r0
 800faaa:	76bb      	strb	r3, [r7, #26]
 800faac:	e001      	b.n	800fab2 <tcp_process+0x30e>
 800faae:	2300      	movs	r3, #0
 800fab0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fab2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fab6:	f113 0f0d 	cmn.w	r3, #13
 800faba:	d102      	bne.n	800fac2 <tcp_process+0x31e>
          return ERR_ABRT;
 800fabc:	f06f 030c 	mvn.w	r3, #12
 800fac0:	e250      	b.n	800ff64 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	8b5b      	ldrh	r3, [r3, #26]
 800fac6:	f043 0302 	orr.w	r3, r3, #2
 800faca:	b29a      	uxth	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fad0:	e23a      	b.n	800ff48 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fad2:	4b98      	ldr	r3, [pc, #608]	; (800fd34 <tcp_process+0x590>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	f003 0310 	and.w	r3, r3, #16
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 8234 	beq.w	800ff48 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fae0:	4b95      	ldr	r3, [pc, #596]	; (800fd38 <tcp_process+0x594>)
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	4b95      	ldr	r3, [pc, #596]	; (800fd3c <tcp_process+0x598>)
 800fae6:	881b      	ldrh	r3, [r3, #0]
 800fae8:	461a      	mov	r2, r3
 800faea:	4b95      	ldr	r3, [pc, #596]	; (800fd40 <tcp_process+0x59c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faf0:	4b94      	ldr	r3, [pc, #592]	; (800fd44 <tcp_process+0x5a0>)
 800faf2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faf4:	885b      	ldrh	r3, [r3, #2]
 800faf6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faf8:	4a92      	ldr	r2, [pc, #584]	; (800fd44 <tcp_process+0x5a0>)
 800fafa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fafc:	8812      	ldrh	r2, [r2, #0]
 800fafe:	b292      	uxth	r2, r2
 800fb00:	9202      	str	r2, [sp, #8]
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	4b90      	ldr	r3, [pc, #576]	; (800fd48 <tcp_process+0x5a4>)
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	4b90      	ldr	r3, [pc, #576]	; (800fd4c <tcp_process+0x5a8>)
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f003 f8dd 	bl	8012ccc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb18:	2b05      	cmp	r3, #5
 800fb1a:	f200 8215 	bhi.w	800ff48 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f002 fea9 	bl	801287c <tcp_rexmit_rto>
      break;
 800fb2a:	e20d      	b.n	800ff48 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fb2c:	4b81      	ldr	r3, [pc, #516]	; (800fd34 <tcp_process+0x590>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	f003 0310 	and.w	r3, r3, #16
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 80a1 	beq.w	800fc7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb3a:	4b7f      	ldr	r3, [pc, #508]	; (800fd38 <tcp_process+0x594>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	3b01      	subs	r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	db7e      	blt.n	800fc48 <tcp_process+0x4a4>
 800fb4a:	4b7b      	ldr	r3, [pc, #492]	; (800fd38 <tcp_process+0x594>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dc77      	bgt.n	800fc48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2204      	movs	r2, #4
 800fb5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d102      	bne.n	800fb6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fb66:	23fa      	movs	r3, #250	; 0xfa
 800fb68:	76bb      	strb	r3, [r7, #26]
 800fb6a:	e01d      	b.n	800fba8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <tcp_process+0x3e0>
 800fb76:	4b76      	ldr	r3, [pc, #472]	; (800fd50 <tcp_process+0x5ac>)
 800fb78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fb7c:	4975      	ldr	r1, [pc, #468]	; (800fd54 <tcp_process+0x5b0>)
 800fb7e:	4876      	ldr	r0, [pc, #472]	; (800fd58 <tcp_process+0x5b4>)
 800fb80:	f007 f832 	bl	8016be8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb88:	699b      	ldr	r3, [r3, #24]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00a      	beq.n	800fba4 <tcp_process+0x400>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	6910      	ldr	r0, [r2, #16]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	6879      	ldr	r1, [r7, #4]
 800fb9c:	4798      	blx	r3
 800fb9e:	4603      	mov	r3, r0
 800fba0:	76bb      	strb	r3, [r7, #26]
 800fba2:	e001      	b.n	800fba8 <tcp_process+0x404>
 800fba4:	23f0      	movs	r3, #240	; 0xf0
 800fba6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fba8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00a      	beq.n	800fbc6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fbb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fbb4:	f113 0f0d 	cmn.w	r3, #13
 800fbb8:	d002      	beq.n	800fbc0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7fd fd62 	bl	800d684 <tcp_abort>
            }
            return ERR_ABRT;
 800fbc0:	f06f 030c 	mvn.w	r3, #12
 800fbc4:	e1ce      	b.n	800ff64 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fae0 	bl	801018c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fbcc:	4b63      	ldr	r3, [pc, #396]	; (800fd5c <tcp_process+0x5b8>)
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d005      	beq.n	800fbe0 <tcp_process+0x43c>
            recv_acked--;
 800fbd4:	4b61      	ldr	r3, [pc, #388]	; (800fd5c <tcp_process+0x5b8>)
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	4b5f      	ldr	r3, [pc, #380]	; (800fd5c <tcp_process+0x5b8>)
 800fbde:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbe4:	009a      	lsls	r2, r3, #2
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	f241 111c 	movw	r1, #4380	; 0x111c
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf38      	it	cc
 800fbf4:	460b      	movcc	r3, r1
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d204      	bcs.n	800fc04 <tcp_process+0x460>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	e00d      	b.n	800fc20 <tcp_process+0x47c>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d904      	bls.n	800fc1c <tcp_process+0x478>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	e001      	b.n	800fc20 <tcp_process+0x47c>
 800fc1c:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fc26:	4b4e      	ldr	r3, [pc, #312]	; (800fd60 <tcp_process+0x5bc>)
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	f003 0320 	and.w	r3, r3, #32
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d037      	beq.n	800fca2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b5b      	ldrh	r3, [r3, #26]
 800fc36:	f043 0302 	orr.w	r3, r3, #2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2207      	movs	r2, #7
 800fc44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fc46:	e02c      	b.n	800fca2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc48:	4b3b      	ldr	r3, [pc, #236]	; (800fd38 <tcp_process+0x594>)
 800fc4a:	6819      	ldr	r1, [r3, #0]
 800fc4c:	4b3b      	ldr	r3, [pc, #236]	; (800fd3c <tcp_process+0x598>)
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b3b      	ldr	r3, [pc, #236]	; (800fd40 <tcp_process+0x59c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc58:	4b3a      	ldr	r3, [pc, #232]	; (800fd44 <tcp_process+0x5a0>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc5c:	885b      	ldrh	r3, [r3, #2]
 800fc5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc60:	4a38      	ldr	r2, [pc, #224]	; (800fd44 <tcp_process+0x5a0>)
 800fc62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc64:	8812      	ldrh	r2, [r2, #0]
 800fc66:	b292      	uxth	r2, r2
 800fc68:	9202      	str	r2, [sp, #8]
 800fc6a:	9301      	str	r3, [sp, #4]
 800fc6c:	4b36      	ldr	r3, [pc, #216]	; (800fd48 <tcp_process+0x5a4>)
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	4b36      	ldr	r3, [pc, #216]	; (800fd4c <tcp_process+0x5a8>)
 800fc72:	4602      	mov	r2, r0
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f003 f829 	bl	8012ccc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fc7a:	e167      	b.n	800ff4c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fc7c:	4b2d      	ldr	r3, [pc, #180]	; (800fd34 <tcp_process+0x590>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 0302 	and.w	r3, r3, #2
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f000 8161 	beq.w	800ff4c <tcp_process+0x7a8>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8e:	1e5a      	subs	r2, r3, #1
 800fc90:	4b2b      	ldr	r3, [pc, #172]	; (800fd40 <tcp_process+0x59c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	f040 8159 	bne.w	800ff4c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f002 fe10 	bl	80128c0 <tcp_rexmit>
      break;
 800fca0:	e154      	b.n	800ff4c <tcp_process+0x7a8>
 800fca2:	e153      	b.n	800ff4c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fa71 	bl	801018c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fcaa:	4b2d      	ldr	r3, [pc, #180]	; (800fd60 <tcp_process+0x5bc>)
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	f003 0320 	and.w	r3, r3, #32
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f000 814c 	beq.w	800ff50 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	8b5b      	ldrh	r3, [r3, #26]
 800fcbc:	f043 0302 	orr.w	r3, r3, #2
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2207      	movs	r2, #7
 800fcca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fccc:	e140      	b.n	800ff50 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fa5c 	bl	801018c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fcd4:	4b22      	ldr	r3, [pc, #136]	; (800fd60 <tcp_process+0x5bc>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f003 0320 	and.w	r3, r3, #32
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d071      	beq.n	800fdc4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fce0:	4b14      	ldr	r3, [pc, #80]	; (800fd34 <tcp_process+0x590>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 0310 	and.w	r3, r3, #16
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d060      	beq.n	800fdae <tcp_process+0x60a>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcf0:	4b11      	ldr	r3, [pc, #68]	; (800fd38 <tcp_process+0x594>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d15a      	bne.n	800fdae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d156      	bne.n	800fdae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	8b5b      	ldrh	r3, [r3, #26]
 800fd04:	f043 0302 	orr.w	r3, r3, #2
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7fe fdbc 	bl	800e88c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fd14:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <tcp_process+0x5c0>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d105      	bne.n	800fd2a <tcp_process+0x586>
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <tcp_process+0x5c0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	4a0f      	ldr	r2, [pc, #60]	; (800fd64 <tcp_process+0x5c0>)
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	e02e      	b.n	800fd88 <tcp_process+0x5e4>
 800fd2a:	4b0e      	ldr	r3, [pc, #56]	; (800fd64 <tcp_process+0x5c0>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	617b      	str	r3, [r7, #20]
 800fd30:	e027      	b.n	800fd82 <tcp_process+0x5de>
 800fd32:	bf00      	nop
 800fd34:	2000d150 	.word	0x2000d150
 800fd38:	2000d148 	.word	0x2000d148
 800fd3c:	2000d14e 	.word	0x2000d14e
 800fd40:	2000d144 	.word	0x2000d144
 800fd44:	2000d134 	.word	0x2000d134
 800fd48:	200099c8 	.word	0x200099c8
 800fd4c:	200099cc 	.word	0x200099cc
 800fd50:	0801a2dc 	.word	0x0801a2dc
 800fd54:	0801a57c 	.word	0x0801a57c
 800fd58:	0801a328 	.word	0x0801a328
 800fd5c:	2000d14c 	.word	0x2000d14c
 800fd60:	2000d151 	.word	0x2000d151
 800fd64:	2000d118 	.word	0x2000d118
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d104      	bne.n	800fd7c <tcp_process+0x5d8>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	60da      	str	r2, [r3, #12]
 800fd7a:	e005      	b.n	800fd88 <tcp_process+0x5e4>
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	617b      	str	r3, [r7, #20]
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1ef      	bne.n	800fd68 <tcp_process+0x5c4>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	60da      	str	r2, [r3, #12]
 800fd8e:	4b77      	ldr	r3, [pc, #476]	; (800ff6c <tcp_process+0x7c8>)
 800fd90:	2201      	movs	r2, #1
 800fd92:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	220a      	movs	r2, #10
 800fd98:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fd9a:	4b75      	ldr	r3, [pc, #468]	; (800ff70 <tcp_process+0x7cc>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	60da      	str	r2, [r3, #12]
 800fda2:	4a73      	ldr	r2, [pc, #460]	; (800ff70 <tcp_process+0x7cc>)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6013      	str	r3, [r2, #0]
 800fda8:	f003 f952 	bl	8013050 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fdac:	e0d2      	b.n	800ff54 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	8b5b      	ldrh	r3, [r3, #26]
 800fdb2:	f043 0302 	orr.w	r3, r3, #2
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2208      	movs	r2, #8
 800fdc0:	751a      	strb	r2, [r3, #20]
      break;
 800fdc2:	e0c7      	b.n	800ff54 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fdc4:	4b6b      	ldr	r3, [pc, #428]	; (800ff74 <tcp_process+0x7d0>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	f003 0310 	and.w	r3, r3, #16
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 80c1 	beq.w	800ff54 <tcp_process+0x7b0>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdd6:	4b68      	ldr	r3, [pc, #416]	; (800ff78 <tcp_process+0x7d4>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	f040 80ba 	bne.w	800ff54 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f040 80b5 	bne.w	800ff54 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2206      	movs	r2, #6
 800fdee:	751a      	strb	r2, [r3, #20]
      break;
 800fdf0:	e0b0      	b.n	800ff54 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f9ca 	bl	801018c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fdf8:	4b60      	ldr	r3, [pc, #384]	; (800ff7c <tcp_process+0x7d8>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f003 0320 	and.w	r3, r3, #32
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f000 80a9 	beq.w	800ff58 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8b5b      	ldrh	r3, [r3, #26]
 800fe0a:	f043 0302 	orr.w	r3, r3, #2
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7fe fd39 	bl	800e88c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe1a:	4b59      	ldr	r3, [pc, #356]	; (800ff80 <tcp_process+0x7dc>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d105      	bne.n	800fe30 <tcp_process+0x68c>
 800fe24:	4b56      	ldr	r3, [pc, #344]	; (800ff80 <tcp_process+0x7dc>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	4a55      	ldr	r2, [pc, #340]	; (800ff80 <tcp_process+0x7dc>)
 800fe2c:	6013      	str	r3, [r2, #0]
 800fe2e:	e013      	b.n	800fe58 <tcp_process+0x6b4>
 800fe30:	4b53      	ldr	r3, [pc, #332]	; (800ff80 <tcp_process+0x7dc>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	613b      	str	r3, [r7, #16]
 800fe36:	e00c      	b.n	800fe52 <tcp_process+0x6ae>
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d104      	bne.n	800fe4c <tcp_process+0x6a8>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	68da      	ldr	r2, [r3, #12]
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	60da      	str	r2, [r3, #12]
 800fe4a:	e005      	b.n	800fe58 <tcp_process+0x6b4>
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	613b      	str	r3, [r7, #16]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d1ef      	bne.n	800fe38 <tcp_process+0x694>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	60da      	str	r2, [r3, #12]
 800fe5e:	4b43      	ldr	r3, [pc, #268]	; (800ff6c <tcp_process+0x7c8>)
 800fe60:	2201      	movs	r2, #1
 800fe62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	220a      	movs	r2, #10
 800fe68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe6a:	4b41      	ldr	r3, [pc, #260]	; (800ff70 <tcp_process+0x7cc>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	60da      	str	r2, [r3, #12]
 800fe72:	4a3f      	ldr	r2, [pc, #252]	; (800ff70 <tcp_process+0x7cc>)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6013      	str	r3, [r2, #0]
 800fe78:	f003 f8ea 	bl	8013050 <tcp_timer_needed>
      }
      break;
 800fe7c:	e06c      	b.n	800ff58 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f984 	bl	801018c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe84:	4b3b      	ldr	r3, [pc, #236]	; (800ff74 <tcp_process+0x7d0>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	f003 0310 	and.w	r3, r3, #16
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d065      	beq.n	800ff5c <tcp_process+0x7b8>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe94:	4b38      	ldr	r3, [pc, #224]	; (800ff78 <tcp_process+0x7d4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d15f      	bne.n	800ff5c <tcp_process+0x7b8>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d15b      	bne.n	800ff5c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7fe fcf1 	bl	800e88c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800feaa:	4b35      	ldr	r3, [pc, #212]	; (800ff80 <tcp_process+0x7dc>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d105      	bne.n	800fec0 <tcp_process+0x71c>
 800feb4:	4b32      	ldr	r3, [pc, #200]	; (800ff80 <tcp_process+0x7dc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	4a31      	ldr	r2, [pc, #196]	; (800ff80 <tcp_process+0x7dc>)
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	e013      	b.n	800fee8 <tcp_process+0x744>
 800fec0:	4b2f      	ldr	r3, [pc, #188]	; (800ff80 <tcp_process+0x7dc>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60fb      	str	r3, [r7, #12]
 800fec6:	e00c      	b.n	800fee2 <tcp_process+0x73e>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d104      	bne.n	800fedc <tcp_process+0x738>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68da      	ldr	r2, [r3, #12]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	60da      	str	r2, [r3, #12]
 800feda:	e005      	b.n	800fee8 <tcp_process+0x744>
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	60fb      	str	r3, [r7, #12]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1ef      	bne.n	800fec8 <tcp_process+0x724>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	60da      	str	r2, [r3, #12]
 800feee:	4b1f      	ldr	r3, [pc, #124]	; (800ff6c <tcp_process+0x7c8>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	220a      	movs	r2, #10
 800fef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fefa:	4b1d      	ldr	r3, [pc, #116]	; (800ff70 <tcp_process+0x7cc>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	60da      	str	r2, [r3, #12]
 800ff02:	4a1b      	ldr	r2, [pc, #108]	; (800ff70 <tcp_process+0x7cc>)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	f003 f8a2 	bl	8013050 <tcp_timer_needed>
      }
      break;
 800ff0c:	e026      	b.n	800ff5c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f93c 	bl	801018c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff14:	4b17      	ldr	r3, [pc, #92]	; (800ff74 <tcp_process+0x7d0>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 0310 	and.w	r3, r3, #16
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d01f      	beq.n	800ff60 <tcp_process+0x7bc>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff24:	4b14      	ldr	r3, [pc, #80]	; (800ff78 <tcp_process+0x7d4>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d119      	bne.n	800ff60 <tcp_process+0x7bc>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d115      	bne.n	800ff60 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ff34:	4b11      	ldr	r3, [pc, #68]	; (800ff7c <tcp_process+0x7d8>)
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	f043 0310 	orr.w	r3, r3, #16
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	4b0f      	ldr	r3, [pc, #60]	; (800ff7c <tcp_process+0x7d8>)
 800ff40:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ff42:	e00d      	b.n	800ff60 <tcp_process+0x7bc>
    default:
      break;
 800ff44:	bf00      	nop
 800ff46:	e00c      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff48:	bf00      	nop
 800ff4a:	e00a      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff4c:	bf00      	nop
 800ff4e:	e008      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff50:	bf00      	nop
 800ff52:	e006      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff54:	bf00      	nop
 800ff56:	e004      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff58:	bf00      	nop
 800ff5a:	e002      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff5c:	bf00      	nop
 800ff5e:	e000      	b.n	800ff62 <tcp_process+0x7be>
      break;
 800ff60:	bf00      	nop
  }
  return ERR_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3724      	adds	r7, #36	; 0x24
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd90      	pop	{r4, r7, pc}
 800ff6c:	2000d120 	.word	0x2000d120
 800ff70:	2000d11c 	.word	0x2000d11c
 800ff74:	2000d150 	.word	0x2000d150
 800ff78:	2000d148 	.word	0x2000d148
 800ff7c:	2000d151 	.word	0x2000d151
 800ff80:	2000d118 	.word	0x2000d118

0800ff84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ff84:	b590      	push	{r4, r7, lr}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d106      	bne.n	800ffa2 <tcp_oos_insert_segment+0x1e>
 800ff94:	4b3b      	ldr	r3, [pc, #236]	; (8010084 <tcp_oos_insert_segment+0x100>)
 800ff96:	f240 421f 	movw	r2, #1055	; 0x41f
 800ff9a:	493b      	ldr	r1, [pc, #236]	; (8010088 <tcp_oos_insert_segment+0x104>)
 800ff9c:	483b      	ldr	r0, [pc, #236]	; (801008c <tcp_oos_insert_segment+0x108>)
 800ff9e:	f006 fe23 	bl	8016be8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	899b      	ldrh	r3, [r3, #12]
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fb f978 	bl	800b2a0 <lwip_htons>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d028      	beq.n	801000e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ffbc:	6838      	ldr	r0, [r7, #0]
 800ffbe:	f7fe f995 	bl	800e2ec <tcp_segs_free>
    next = NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	603b      	str	r3, [r7, #0]
 800ffc6:	e056      	b.n	8010076 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	899b      	ldrh	r3, [r3, #12]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fb f965 	bl	800b2a0 <lwip_htons>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	f003 0301 	and.w	r3, r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00d      	beq.n	800fffe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	899b      	ldrh	r3, [r3, #12]
 800ffe8:	b29c      	uxth	r4, r3
 800ffea:	2001      	movs	r0, #1
 800ffec:	f7fb f958 	bl	800b2a0 <lwip_htons>
 800fff0:	4603      	mov	r3, r0
 800fff2:	461a      	mov	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	4322      	orrs	r2, r4
 800fffa:	b292      	uxth	r2, r2
 800fffc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f7fe f984 	bl	800e316 <tcp_seg_free>
    while (next &&
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00e      	beq.n	8010032 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	891b      	ldrh	r3, [r3, #8]
 8010018:	461a      	mov	r2, r3
 801001a:	4b1d      	ldr	r3, [pc, #116]	; (8010090 <tcp_oos_insert_segment+0x10c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	441a      	add	r2, r3
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	8909      	ldrh	r1, [r1, #8]
 801002a:	440b      	add	r3, r1
 801002c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801002e:	2b00      	cmp	r3, #0
 8010030:	daca      	bge.n	800ffc8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d01e      	beq.n	8010076 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	891b      	ldrh	r3, [r3, #8]
 801003c:	461a      	mov	r2, r3
 801003e:	4b14      	ldr	r3, [pc, #80]	; (8010090 <tcp_oos_insert_segment+0x10c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	441a      	add	r2, r3
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801004c:	2b00      	cmp	r3, #0
 801004e:	dd12      	ble.n	8010076 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	b29a      	uxth	r2, r3
 8010058:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <tcp_oos_insert_segment+0x10c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	b29b      	uxth	r3, r3
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	b29a      	uxth	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	685a      	ldr	r2, [r3, #4]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	891b      	ldrh	r3, [r3, #8]
 801006e:	4619      	mov	r1, r3
 8010070:	4610      	mov	r0, r2
 8010072:	f7fc fb81 	bl	800c778 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	601a      	str	r2, [r3, #0]
}
 801007c:	bf00      	nop
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	bd90      	pop	{r4, r7, pc}
 8010084:	0801a2dc 	.word	0x0801a2dc
 8010088:	0801a59c 	.word	0x0801a59c
 801008c:	0801a328 	.word	0x0801a328
 8010090:	2000d144 	.word	0x2000d144

08010094 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010094:	b5b0      	push	{r4, r5, r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
 80100a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80100a2:	e03e      	b.n	8010122 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fc fd74 	bl	800cba0 <pbuf_clen>
 80100b8:	4603      	mov	r3, r0
 80100ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100c2:	8a7a      	ldrh	r2, [r7, #18]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d906      	bls.n	80100d6 <tcp_free_acked_segments+0x42>
 80100c8:	4b2a      	ldr	r3, [pc, #168]	; (8010174 <tcp_free_acked_segments+0xe0>)
 80100ca:	f240 4257 	movw	r2, #1111	; 0x457
 80100ce:	492a      	ldr	r1, [pc, #168]	; (8010178 <tcp_free_acked_segments+0xe4>)
 80100d0:	482a      	ldr	r0, [pc, #168]	; (801017c <tcp_free_acked_segments+0xe8>)
 80100d2:	f006 fd89 	bl	8016be8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80100dc:	8a7b      	ldrh	r3, [r7, #18]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	b29a      	uxth	r2, r3
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	891a      	ldrh	r2, [r3, #8]
 80100ec:	4b24      	ldr	r3, [pc, #144]	; (8010180 <tcp_free_acked_segments+0xec>)
 80100ee:	881b      	ldrh	r3, [r3, #0]
 80100f0:	4413      	add	r3, r2
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	4b22      	ldr	r3, [pc, #136]	; (8010180 <tcp_free_acked_segments+0xec>)
 80100f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80100f8:	6978      	ldr	r0, [r7, #20]
 80100fa:	f7fe f90c 	bl	800e316 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00c      	beq.n	8010122 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d109      	bne.n	8010122 <tcp_free_acked_segments+0x8e>
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <tcp_free_acked_segments+0x8e>
 8010114:	4b17      	ldr	r3, [pc, #92]	; (8010174 <tcp_free_acked_segments+0xe0>)
 8010116:	f240 4261 	movw	r2, #1121	; 0x461
 801011a:	491a      	ldr	r1, [pc, #104]	; (8010184 <tcp_free_acked_segments+0xf0>)
 801011c:	4817      	ldr	r0, [pc, #92]	; (801017c <tcp_free_acked_segments+0xe8>)
 801011e:	f006 fd63 	bl	8016be8 <iprintf>
  while (seg_list != NULL &&
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d020      	beq.n	801016a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	4618      	mov	r0, r3
 8010130:	f7fb f8cb 	bl	800b2ca <lwip_htonl>
 8010134:	4604      	mov	r4, r0
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	891b      	ldrh	r3, [r3, #8]
 801013a:	461d      	mov	r5, r3
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	899b      	ldrh	r3, [r3, #12]
 8010142:	b29b      	uxth	r3, r3
 8010144:	4618      	mov	r0, r3
 8010146:	f7fb f8ab 	bl	800b2a0 <lwip_htons>
 801014a:	4603      	mov	r3, r0
 801014c:	b2db      	uxtb	r3, r3
 801014e:	f003 0303 	and.w	r3, r3, #3
 8010152:	2b00      	cmp	r3, #0
 8010154:	d001      	beq.n	801015a <tcp_free_acked_segments+0xc6>
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <tcp_free_acked_segments+0xc8>
 801015a:	2300      	movs	r3, #0
 801015c:	442b      	add	r3, r5
 801015e:	18e2      	adds	r2, r4, r3
 8010160:	4b09      	ldr	r3, [pc, #36]	; (8010188 <tcp_free_acked_segments+0xf4>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010166:	2b00      	cmp	r3, #0
 8010168:	dd9c      	ble.n	80100a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801016a:	68bb      	ldr	r3, [r7, #8]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bdb0      	pop	{r4, r5, r7, pc}
 8010174:	0801a2dc 	.word	0x0801a2dc
 8010178:	0801a5c4 	.word	0x0801a5c4
 801017c:	0801a328 	.word	0x0801a328
 8010180:	2000d14c 	.word	0x2000d14c
 8010184:	0801a5ec 	.word	0x0801a5ec
 8010188:	2000d148 	.word	0x2000d148

0801018c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801018c:	b5b0      	push	{r4, r5, r7, lr}
 801018e:	b094      	sub	sp, #80	; 0x50
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010194:	2300      	movs	r3, #0
 8010196:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d106      	bne.n	80101ac <tcp_receive+0x20>
 801019e:	4b91      	ldr	r3, [pc, #580]	; (80103e4 <tcp_receive+0x258>)
 80101a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80101a4:	4990      	ldr	r1, [pc, #576]	; (80103e8 <tcp_receive+0x25c>)
 80101a6:	4891      	ldr	r0, [pc, #580]	; (80103ec <tcp_receive+0x260>)
 80101a8:	f006 fd1e 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d806      	bhi.n	80101c2 <tcp_receive+0x36>
 80101b4:	4b8b      	ldr	r3, [pc, #556]	; (80103e4 <tcp_receive+0x258>)
 80101b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80101ba:	498d      	ldr	r1, [pc, #564]	; (80103f0 <tcp_receive+0x264>)
 80101bc:	488b      	ldr	r0, [pc, #556]	; (80103ec <tcp_receive+0x260>)
 80101be:	f006 fd13 	bl	8016be8 <iprintf>

  if (flags & TCP_ACK) {
 80101c2:	4b8c      	ldr	r3, [pc, #560]	; (80103f4 <tcp_receive+0x268>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	f003 0310 	and.w	r3, r3, #16
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 8264 	beq.w	8010698 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101d6:	461a      	mov	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101dc:	4413      	add	r3, r2
 80101de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101e4:	4b84      	ldr	r3, [pc, #528]	; (80103f8 <tcp_receive+0x26c>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	db1b      	blt.n	8010226 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101f2:	4b81      	ldr	r3, [pc, #516]	; (80103f8 <tcp_receive+0x26c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d106      	bne.n	8010208 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101fe:	4b7f      	ldr	r3, [pc, #508]	; (80103fc <tcp_receive+0x270>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	2b00      	cmp	r3, #0
 8010206:	db0e      	blt.n	8010226 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801020c:	4b7b      	ldr	r3, [pc, #492]	; (80103fc <tcp_receive+0x270>)
 801020e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010210:	429a      	cmp	r2, r3
 8010212:	d125      	bne.n	8010260 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010214:	4b7a      	ldr	r3, [pc, #488]	; (8010400 <tcp_receive+0x274>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	89db      	ldrh	r3, [r3, #14]
 801021a:	b29a      	uxth	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010222:	429a      	cmp	r2, r3
 8010224:	d91c      	bls.n	8010260 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010226:	4b76      	ldr	r3, [pc, #472]	; (8010400 <tcp_receive+0x274>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	89db      	ldrh	r3, [r3, #14]
 801022c:	b29a      	uxth	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010240:	429a      	cmp	r2, r3
 8010242:	d205      	bcs.n	8010250 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010250:	4b69      	ldr	r3, [pc, #420]	; (80103f8 <tcp_receive+0x26c>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010258:	4b68      	ldr	r3, [pc, #416]	; (80103fc <tcp_receive+0x270>)
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010260:	4b66      	ldr	r3, [pc, #408]	; (80103fc <tcp_receive+0x270>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	2b00      	cmp	r3, #0
 801026c:	dc58      	bgt.n	8010320 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801026e:	4b65      	ldr	r3, [pc, #404]	; (8010404 <tcp_receive+0x278>)
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d14b      	bne.n	801030e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010280:	4413      	add	r3, r2
 8010282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010284:	429a      	cmp	r2, r3
 8010286:	d142      	bne.n	801030e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801028e:	2b00      	cmp	r3, #0
 8010290:	db3d      	blt.n	801030e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010296:	4b59      	ldr	r3, [pc, #356]	; (80103fc <tcp_receive+0x270>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	d137      	bne.n	801030e <tcp_receive+0x182>
              found_dupack = 1;
 801029e:	2301      	movs	r3, #1
 80102a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102a8:	2bff      	cmp	r3, #255	; 0xff
 80102aa:	d007      	beq.n	80102bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102b2:	3301      	adds	r3, #1
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d91b      	bls.n	80102fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d0:	4413      	add	r3, r2
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102da:	429a      	cmp	r2, r3
 80102dc:	d30a      	bcc.n	80102f4 <tcp_receive+0x168>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e8:	4413      	add	r3, r2
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80102f2:	e004      	b.n	80102fe <tcp_receive+0x172>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010304:	2b02      	cmp	r3, #2
 8010306:	d902      	bls.n	801030e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f002 fb45 	bl	8012998 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801030e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010310:	2b00      	cmp	r3, #0
 8010312:	f040 8161 	bne.w	80105d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801031e:	e15b      	b.n	80105d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010320:	4b36      	ldr	r3, [pc, #216]	; (80103fc <tcp_receive+0x270>)
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	3b01      	subs	r3, #1
 801032c:	2b00      	cmp	r3, #0
 801032e:	f2c0 814e 	blt.w	80105ce <tcp_receive+0x442>
 8010332:	4b32      	ldr	r3, [pc, #200]	; (80103fc <tcp_receive+0x270>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	2b00      	cmp	r3, #0
 801033e:	f300 8146 	bgt.w	80105ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	8b5b      	ldrh	r3, [r3, #26]
 8010346:	f003 0304 	and.w	r3, r3, #4
 801034a:	2b00      	cmp	r3, #0
 801034c:	d010      	beq.n	8010370 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	8b5b      	ldrh	r3, [r3, #26]
 8010352:	f023 0304 	bic.w	r3, r3, #4
 8010356:	b29a      	uxth	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801037e:	10db      	asrs	r3, r3, #3
 8010380:	b21b      	sxth	r3, r3
 8010382:	b29a      	uxth	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801038a:	b29b      	uxth	r3, r3
 801038c:	4413      	add	r3, r2
 801038e:	b29b      	uxth	r3, r3
 8010390:	b21a      	sxth	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010398:	4b18      	ldr	r3, [pc, #96]	; (80103fc <tcp_receive+0x270>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80103b0:	4b12      	ldr	r3, [pc, #72]	; (80103fc <tcp_receive+0x270>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b03      	cmp	r3, #3
 80103be:	f240 8097 	bls.w	80104f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d245      	bcs.n	801045e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8b5b      	ldrh	r3, [r3, #26]
 80103d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d014      	beq.n	8010408 <tcp_receive+0x27c>
 80103de:	2301      	movs	r3, #1
 80103e0:	e013      	b.n	801040a <tcp_receive+0x27e>
 80103e2:	bf00      	nop
 80103e4:	0801a2dc 	.word	0x0801a2dc
 80103e8:	0801a60c 	.word	0x0801a60c
 80103ec:	0801a328 	.word	0x0801a328
 80103f0:	0801a628 	.word	0x0801a628
 80103f4:	2000d150 	.word	0x2000d150
 80103f8:	2000d144 	.word	0x2000d144
 80103fc:	2000d148 	.word	0x2000d148
 8010400:	2000d134 	.word	0x2000d134
 8010404:	2000d14e 	.word	0x2000d14e
 8010408:	2302      	movs	r3, #2
 801040a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801040e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010412:	b29a      	uxth	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010418:	fb12 f303 	smulbb	r3, r2, r3
 801041c:	b29b      	uxth	r3, r3
 801041e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010420:	4293      	cmp	r3, r2
 8010422:	bf28      	it	cs
 8010424:	4613      	movcs	r3, r2
 8010426:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801042e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010430:	4413      	add	r3, r2
 8010432:	b29a      	uxth	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801043a:	429a      	cmp	r2, r3
 801043c:	d309      	bcc.n	8010452 <tcp_receive+0x2c6>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010444:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010446:	4413      	add	r3, r2
 8010448:	b29a      	uxth	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010450:	e04e      	b.n	80104f0 <tcp_receive+0x364>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010458:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801045c:	e048      	b.n	80104f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010466:	4413      	add	r3, r2
 8010468:	b29a      	uxth	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010470:	429a      	cmp	r2, r3
 8010472:	d309      	bcc.n	8010488 <tcp_receive+0x2fc>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801047a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801047c:	4413      	add	r3, r2
 801047e:	b29a      	uxth	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010486:	e004      	b.n	8010492 <tcp_receive+0x306>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801048e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801049e:	429a      	cmp	r2, r3
 80104a0:	d326      	bcc.n	80104f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104c2:	4413      	add	r3, r2
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d30a      	bcc.n	80104e6 <tcp_receive+0x35a>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104da:	4413      	add	r3, r2
 80104dc:	b29a      	uxth	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104e4:	e004      	b.n	80104f0 <tcp_receive+0x364>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f8:	4a98      	ldr	r2, [pc, #608]	; (801075c <tcp_receive+0x5d0>)
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff fdca 	bl	8010094 <tcp_free_acked_segments>
 8010500:	4602      	mov	r2, r0
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050e:	4a94      	ldr	r2, [pc, #592]	; (8010760 <tcp_receive+0x5d4>)
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff fdbf 	bl	8010094 <tcp_free_acked_segments>
 8010516:	4602      	mov	r2, r0
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010520:	2b00      	cmp	r3, #0
 8010522:	d104      	bne.n	801052e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801052a:	861a      	strh	r2, [r3, #48]	; 0x30
 801052c:	e002      	b.n	8010534 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d103      	bne.n	801054a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010550:	4b84      	ldr	r3, [pc, #528]	; (8010764 <tcp_receive+0x5d8>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	4413      	add	r3, r2
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	8b5b      	ldrh	r3, [r3, #26]
 8010562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010566:	2b00      	cmp	r3, #0
 8010568:	d035      	beq.n	80105d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801056e:	2b00      	cmp	r3, #0
 8010570:	d118      	bne.n	80105a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00c      	beq.n	8010594 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	4618      	mov	r0, r3
 8010588:	f7fa fe9f 	bl	800b2ca <lwip_htonl>
 801058c:	4603      	mov	r3, r0
 801058e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010590:	2b00      	cmp	r3, #0
 8010592:	dc20      	bgt.n	80105d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8b5b      	ldrh	r3, [r3, #26]
 8010598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105a2:	e018      	b.n	80105d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fa fe8a 	bl	800b2ca <lwip_htonl>
 80105b6:	4603      	mov	r3, r0
 80105b8:	1ae3      	subs	r3, r4, r3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	dc0b      	bgt.n	80105d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	8b5b      	ldrh	r3, [r3, #26]
 80105c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105cc:	e003      	b.n	80105d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f002 fbce 	bl	8012d70 <tcp_send_empty_ack>
 80105d4:	e000      	b.n	80105d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d05b      	beq.n	8010698 <tcp_receive+0x50c>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105e4:	4b60      	ldr	r3, [pc, #384]	; (8010768 <tcp_receive+0x5dc>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	da54      	bge.n	8010698 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80105ee:	4b5f      	ldr	r3, [pc, #380]	; (801076c <tcp_receive+0x5e0>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010602:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801060c:	10db      	asrs	r3, r3, #3
 801060e:	b21b      	sxth	r3, r3
 8010610:	b29b      	uxth	r3, r3
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	b29b      	uxth	r3, r3
 8010616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010620:	b29a      	uxth	r2, r3
 8010622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010626:	4413      	add	r3, r2
 8010628:	b29b      	uxth	r3, r3
 801062a:	b21a      	sxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010630:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010634:	2b00      	cmp	r3, #0
 8010636:	da05      	bge.n	8010644 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801063c:	425b      	negs	r3, r3
 801063e:	b29b      	uxth	r3, r3
 8010640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010644:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801064e:	109b      	asrs	r3, r3, #2
 8010650:	b21b      	sxth	r3, r3
 8010652:	b29b      	uxth	r3, r3
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	b29b      	uxth	r3, r3
 8010658:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010662:	b29a      	uxth	r2, r3
 8010664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010668:	4413      	add	r3, r2
 801066a:	b29b      	uxth	r3, r3
 801066c:	b21a      	sxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010678:	10db      	asrs	r3, r3, #3
 801067a:	b21b      	sxth	r3, r3
 801067c:	b29a      	uxth	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010684:	b29b      	uxth	r3, r3
 8010686:	4413      	add	r3, r2
 8010688:	b29b      	uxth	r3, r3
 801068a:	b21a      	sxth	r2, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2200      	movs	r2, #0
 8010696:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010698:	4b35      	ldr	r3, [pc, #212]	; (8010770 <tcp_receive+0x5e4>)
 801069a:	881b      	ldrh	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	f000 84e2 	beq.w	8011066 <tcp_receive+0xeda>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7d1b      	ldrb	r3, [r3, #20]
 80106a6:	2b06      	cmp	r3, #6
 80106a8:	f200 84dd 	bhi.w	8011066 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106b0:	4b30      	ldr	r3, [pc, #192]	; (8010774 <tcp_receive+0x5e8>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	3b01      	subs	r3, #1
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f2c0 808f 	blt.w	80107dc <tcp_receive+0x650>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106c2:	4b2b      	ldr	r3, [pc, #172]	; (8010770 <tcp_receive+0x5e4>)
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	4619      	mov	r1, r3
 80106c8:	4b2a      	ldr	r3, [pc, #168]	; (8010774 <tcp_receive+0x5e8>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	440b      	add	r3, r1
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	3301      	adds	r3, #1
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f300 8082 	bgt.w	80107dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80106d8:	4b27      	ldr	r3, [pc, #156]	; (8010778 <tcp_receive+0x5ec>)
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106e2:	4b24      	ldr	r3, [pc, #144]	; (8010774 <tcp_receive+0x5e8>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80106ea:	4b23      	ldr	r3, [pc, #140]	; (8010778 <tcp_receive+0x5ec>)
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d106      	bne.n	8010700 <tcp_receive+0x574>
 80106f2:	4b22      	ldr	r3, [pc, #136]	; (801077c <tcp_receive+0x5f0>)
 80106f4:	f240 5294 	movw	r2, #1428	; 0x594
 80106f8:	4921      	ldr	r1, [pc, #132]	; (8010780 <tcp_receive+0x5f4>)
 80106fa:	4822      	ldr	r0, [pc, #136]	; (8010784 <tcp_receive+0x5f8>)
 80106fc:	f006 fa74 	bl	8016be8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010702:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010706:	4293      	cmp	r3, r2
 8010708:	d906      	bls.n	8010718 <tcp_receive+0x58c>
 801070a:	4b1c      	ldr	r3, [pc, #112]	; (801077c <tcp_receive+0x5f0>)
 801070c:	f240 5295 	movw	r2, #1429	; 0x595
 8010710:	491d      	ldr	r1, [pc, #116]	; (8010788 <tcp_receive+0x5fc>)
 8010712:	481c      	ldr	r0, [pc, #112]	; (8010784 <tcp_receive+0x5f8>)
 8010714:	f006 fa68 	bl	8016be8 <iprintf>
      off = (u16_t)off32;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801071e:	4b16      	ldr	r3, [pc, #88]	; (8010778 <tcp_receive+0x5ec>)
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	891b      	ldrh	r3, [r3, #8]
 8010724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010728:	429a      	cmp	r2, r3
 801072a:	d906      	bls.n	801073a <tcp_receive+0x5ae>
 801072c:	4b13      	ldr	r3, [pc, #76]	; (801077c <tcp_receive+0x5f0>)
 801072e:	f240 5297 	movw	r2, #1431	; 0x597
 8010732:	4916      	ldr	r1, [pc, #88]	; (801078c <tcp_receive+0x600>)
 8010734:	4813      	ldr	r0, [pc, #76]	; (8010784 <tcp_receive+0x5f8>)
 8010736:	f006 fa57 	bl	8016be8 <iprintf>
      inseg.len -= off;
 801073a:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <tcp_receive+0x5ec>)
 801073c:	891a      	ldrh	r2, [r3, #8]
 801073e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	b29a      	uxth	r2, r3
 8010746:	4b0c      	ldr	r3, [pc, #48]	; (8010778 <tcp_receive+0x5ec>)
 8010748:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801074a:	4b0b      	ldr	r3, [pc, #44]	; (8010778 <tcp_receive+0x5ec>)
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	891a      	ldrh	r2, [r3, #8]
 8010750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010758:	e02a      	b.n	80107b0 <tcp_receive+0x624>
 801075a:	bf00      	nop
 801075c:	0801a644 	.word	0x0801a644
 8010760:	0801a64c 	.word	0x0801a64c
 8010764:	2000d14c 	.word	0x2000d14c
 8010768:	2000d148 	.word	0x2000d148
 801076c:	2000d10c 	.word	0x2000d10c
 8010770:	2000d14e 	.word	0x2000d14e
 8010774:	2000d144 	.word	0x2000d144
 8010778:	2000d124 	.word	0x2000d124
 801077c:	0801a2dc 	.word	0x0801a2dc
 8010780:	0801a654 	.word	0x0801a654
 8010784:	0801a328 	.word	0x0801a328
 8010788:	0801a664 	.word	0x0801a664
 801078c:	0801a674 	.word	0x0801a674
        off -= p->len;
 8010790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010792:	895b      	ldrh	r3, [r3, #10]
 8010794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801079e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80107a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107a6:	2200      	movs	r2, #0
 80107a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80107aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80107b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b2:	895b      	ldrh	r3, [r3, #10]
 80107b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d8e9      	bhi.n	8010790 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80107bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107c0:	4619      	mov	r1, r3
 80107c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80107c4:	f7fc f8d8 	bl	800c978 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107cc:	4a91      	ldr	r2, [pc, #580]	; (8010a14 <tcp_receive+0x888>)
 80107ce:	6013      	str	r3, [r2, #0]
 80107d0:	4b91      	ldr	r3, [pc, #580]	; (8010a18 <tcp_receive+0x88c>)
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	4a8f      	ldr	r2, [pc, #572]	; (8010a14 <tcp_receive+0x888>)
 80107d6:	6812      	ldr	r2, [r2, #0]
 80107d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80107da:	e00d      	b.n	80107f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80107dc:	4b8d      	ldr	r3, [pc, #564]	; (8010a14 <tcp_receive+0x888>)
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	da06      	bge.n	80107f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	8b5b      	ldrh	r3, [r3, #26]
 80107ee:	f043 0302 	orr.w	r3, r3, #2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107f8:	4b86      	ldr	r3, [pc, #536]	; (8010a14 <tcp_receive+0x888>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	f2c0 842a 	blt.w	801105c <tcp_receive+0xed0>
 8010808:	4b82      	ldr	r3, [pc, #520]	; (8010a14 <tcp_receive+0x888>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	6879      	ldr	r1, [r7, #4]
 8010812:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010814:	440b      	add	r3, r1
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	3301      	adds	r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	f300 841e 	bgt.w	801105c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010824:	4b7b      	ldr	r3, [pc, #492]	; (8010a14 <tcp_receive+0x888>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	429a      	cmp	r2, r3
 801082a:	f040 829a 	bne.w	8010d62 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801082e:	4b7a      	ldr	r3, [pc, #488]	; (8010a18 <tcp_receive+0x88c>)
 8010830:	891c      	ldrh	r4, [r3, #8]
 8010832:	4b79      	ldr	r3, [pc, #484]	; (8010a18 <tcp_receive+0x88c>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	899b      	ldrh	r3, [r3, #12]
 8010838:	b29b      	uxth	r3, r3
 801083a:	4618      	mov	r0, r3
 801083c:	f7fa fd30 	bl	800b2a0 <lwip_htons>
 8010840:	4603      	mov	r3, r0
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0303 	and.w	r3, r3, #3
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <tcp_receive+0x6c4>
 801084c:	2301      	movs	r3, #1
 801084e:	e000      	b.n	8010852 <tcp_receive+0x6c6>
 8010850:	2300      	movs	r3, #0
 8010852:	4423      	add	r3, r4
 8010854:	b29a      	uxth	r2, r3
 8010856:	4b71      	ldr	r3, [pc, #452]	; (8010a1c <tcp_receive+0x890>)
 8010858:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801085e:	4b6f      	ldr	r3, [pc, #444]	; (8010a1c <tcp_receive+0x890>)
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	429a      	cmp	r2, r3
 8010864:	d275      	bcs.n	8010952 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010866:	4b6c      	ldr	r3, [pc, #432]	; (8010a18 <tcp_receive+0x88c>)
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	b29b      	uxth	r3, r3
 801086e:	4618      	mov	r0, r3
 8010870:	f7fa fd16 	bl	800b2a0 <lwip_htons>
 8010874:	4603      	mov	r3, r0
 8010876:	b2db      	uxtb	r3, r3
 8010878:	f003 0301 	and.w	r3, r3, #1
 801087c:	2b00      	cmp	r3, #0
 801087e:	d01f      	beq.n	80108c0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010880:	4b65      	ldr	r3, [pc, #404]	; (8010a18 <tcp_receive+0x88c>)
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	899b      	ldrh	r3, [r3, #12]
 8010886:	b29b      	uxth	r3, r3
 8010888:	b21b      	sxth	r3, r3
 801088a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801088e:	b21c      	sxth	r4, r3
 8010890:	4b61      	ldr	r3, [pc, #388]	; (8010a18 <tcp_receive+0x88c>)
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	899b      	ldrh	r3, [r3, #12]
 8010896:	b29b      	uxth	r3, r3
 8010898:	4618      	mov	r0, r3
 801089a:	f7fa fd01 	bl	800b2a0 <lwip_htons>
 801089e:	4603      	mov	r3, r0
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fa fcf8 	bl	800b2a0 <lwip_htons>
 80108b0:	4603      	mov	r3, r0
 80108b2:	b21b      	sxth	r3, r3
 80108b4:	4323      	orrs	r3, r4
 80108b6:	b21a      	sxth	r2, r3
 80108b8:	4b57      	ldr	r3, [pc, #348]	; (8010a18 <tcp_receive+0x88c>)
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	b292      	uxth	r2, r2
 80108be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108c4:	4b54      	ldr	r3, [pc, #336]	; (8010a18 <tcp_receive+0x88c>)
 80108c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80108c8:	4b53      	ldr	r3, [pc, #332]	; (8010a18 <tcp_receive+0x88c>)
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	899b      	ldrh	r3, [r3, #12]
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fa fce5 	bl	800b2a0 <lwip_htons>
 80108d6:	4603      	mov	r3, r0
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	f003 0302 	and.w	r3, r3, #2
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d005      	beq.n	80108ee <tcp_receive+0x762>
            inseg.len -= 1;
 80108e2:	4b4d      	ldr	r3, [pc, #308]	; (8010a18 <tcp_receive+0x88c>)
 80108e4:	891b      	ldrh	r3, [r3, #8]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	4b4b      	ldr	r3, [pc, #300]	; (8010a18 <tcp_receive+0x88c>)
 80108ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80108ee:	4b4a      	ldr	r3, [pc, #296]	; (8010a18 <tcp_receive+0x88c>)
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	4a49      	ldr	r2, [pc, #292]	; (8010a18 <tcp_receive+0x88c>)
 80108f4:	8912      	ldrh	r2, [r2, #8]
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fb ff3d 	bl	800c778 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80108fe:	4b46      	ldr	r3, [pc, #280]	; (8010a18 <tcp_receive+0x88c>)
 8010900:	891c      	ldrh	r4, [r3, #8]
 8010902:	4b45      	ldr	r3, [pc, #276]	; (8010a18 <tcp_receive+0x88c>)
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	899b      	ldrh	r3, [r3, #12]
 8010908:	b29b      	uxth	r3, r3
 801090a:	4618      	mov	r0, r3
 801090c:	f7fa fcc8 	bl	800b2a0 <lwip_htons>
 8010910:	4603      	mov	r3, r0
 8010912:	b2db      	uxtb	r3, r3
 8010914:	f003 0303 	and.w	r3, r3, #3
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <tcp_receive+0x794>
 801091c:	2301      	movs	r3, #1
 801091e:	e000      	b.n	8010922 <tcp_receive+0x796>
 8010920:	2300      	movs	r3, #0
 8010922:	4423      	add	r3, r4
 8010924:	b29a      	uxth	r2, r3
 8010926:	4b3d      	ldr	r3, [pc, #244]	; (8010a1c <tcp_receive+0x890>)
 8010928:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801092a:	4b3c      	ldr	r3, [pc, #240]	; (8010a1c <tcp_receive+0x890>)
 801092c:	881b      	ldrh	r3, [r3, #0]
 801092e:	461a      	mov	r2, r3
 8010930:	4b38      	ldr	r3, [pc, #224]	; (8010a14 <tcp_receive+0x888>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	441a      	add	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093a:	6879      	ldr	r1, [r7, #4]
 801093c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801093e:	440b      	add	r3, r1
 8010940:	429a      	cmp	r2, r3
 8010942:	d006      	beq.n	8010952 <tcp_receive+0x7c6>
 8010944:	4b36      	ldr	r3, [pc, #216]	; (8010a20 <tcp_receive+0x894>)
 8010946:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801094a:	4936      	ldr	r1, [pc, #216]	; (8010a24 <tcp_receive+0x898>)
 801094c:	4836      	ldr	r0, [pc, #216]	; (8010a28 <tcp_receive+0x89c>)
 801094e:	f006 f94b 	bl	8016be8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010956:	2b00      	cmp	r3, #0
 8010958:	f000 80e7 	beq.w	8010b2a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801095c:	4b2e      	ldr	r3, [pc, #184]	; (8010a18 <tcp_receive+0x88c>)
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	899b      	ldrh	r3, [r3, #12]
 8010962:	b29b      	uxth	r3, r3
 8010964:	4618      	mov	r0, r3
 8010966:	f7fa fc9b 	bl	800b2a0 <lwip_htons>
 801096a:	4603      	mov	r3, r0
 801096c:	b2db      	uxtb	r3, r3
 801096e:	f003 0301 	and.w	r3, r3, #1
 8010972:	2b00      	cmp	r3, #0
 8010974:	d010      	beq.n	8010998 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010976:	e00a      	b.n	801098e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801097c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f7fd fcc4 	bl	800e316 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1f0      	bne.n	8010978 <tcp_receive+0x7ec>
 8010996:	e0c8      	b.n	8010b2a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801099c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801099e:	e052      	b.n	8010a46 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80109a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	899b      	ldrh	r3, [r3, #12]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fa fc79 	bl	800b2a0 <lwip_htons>
 80109ae:	4603      	mov	r3, r0
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	f003 0301 	and.w	r3, r3, #1
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d03d      	beq.n	8010a36 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80109ba:	4b17      	ldr	r3, [pc, #92]	; (8010a18 <tcp_receive+0x88c>)
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	899b      	ldrh	r3, [r3, #12]
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fa fc6c 	bl	800b2a0 <lwip_htons>
 80109c8:	4603      	mov	r3, r0
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d130      	bne.n	8010a36 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80109d4:	4b10      	ldr	r3, [pc, #64]	; (8010a18 <tcp_receive+0x88c>)
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	899b      	ldrh	r3, [r3, #12]
 80109da:	b29c      	uxth	r4, r3
 80109dc:	2001      	movs	r0, #1
 80109de:	f7fa fc5f 	bl	800b2a0 <lwip_htons>
 80109e2:	4603      	mov	r3, r0
 80109e4:	461a      	mov	r2, r3
 80109e6:	4b0c      	ldr	r3, [pc, #48]	; (8010a18 <tcp_receive+0x88c>)
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	4322      	orrs	r2, r4
 80109ec:	b292      	uxth	r2, r2
 80109ee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80109f0:	4b09      	ldr	r3, [pc, #36]	; (8010a18 <tcp_receive+0x88c>)
 80109f2:	891c      	ldrh	r4, [r3, #8]
 80109f4:	4b08      	ldr	r3, [pc, #32]	; (8010a18 <tcp_receive+0x88c>)
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	899b      	ldrh	r3, [r3, #12]
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fa fc4f 	bl	800b2a0 <lwip_htons>
 8010a02:	4603      	mov	r3, r0
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	f003 0303 	and.w	r3, r3, #3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00e      	beq.n	8010a2c <tcp_receive+0x8a0>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e00d      	b.n	8010a2e <tcp_receive+0x8a2>
 8010a12:	bf00      	nop
 8010a14:	2000d144 	.word	0x2000d144
 8010a18:	2000d124 	.word	0x2000d124
 8010a1c:	2000d14e 	.word	0x2000d14e
 8010a20:	0801a2dc 	.word	0x0801a2dc
 8010a24:	0801a684 	.word	0x0801a684
 8010a28:	0801a328 	.word	0x0801a328
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4423      	add	r3, r4
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	4b98      	ldr	r3, [pc, #608]	; (8010c94 <tcp_receive+0xb08>)
 8010a34:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a38:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010a40:	6938      	ldr	r0, [r7, #16]
 8010a42:	f7fd fc68 	bl	800e316 <tcp_seg_free>
            while (next &&
 8010a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00e      	beq.n	8010a6a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010a4c:	4b91      	ldr	r3, [pc, #580]	; (8010c94 <tcp_receive+0xb08>)
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	461a      	mov	r2, r3
 8010a52:	4b91      	ldr	r3, [pc, #580]	; (8010c98 <tcp_receive+0xb0c>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	441a      	add	r2, r3
 8010a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a60:	8909      	ldrh	r1, [r1, #8]
 8010a62:	440b      	add	r3, r1
 8010a64:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	da9a      	bge.n	80109a0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d059      	beq.n	8010b24 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010a70:	4b88      	ldr	r3, [pc, #544]	; (8010c94 <tcp_receive+0xb08>)
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	461a      	mov	r2, r3
 8010a76:	4b88      	ldr	r3, [pc, #544]	; (8010c98 <tcp_receive+0xb0c>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	441a      	add	r2, r3
 8010a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dd4d      	ble.n	8010b24 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	4b81      	ldr	r3, [pc, #516]	; (8010c98 <tcp_receive+0xb0c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	4b80      	ldr	r3, [pc, #512]	; (8010c9c <tcp_receive+0xb10>)
 8010a9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a9e:	4b7f      	ldr	r3, [pc, #508]	; (8010c9c <tcp_receive+0xb10>)
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	899b      	ldrh	r3, [r3, #12]
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fa fbfa 	bl	800b2a0 <lwip_htons>
 8010aac:	4603      	mov	r3, r0
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	f003 0302 	and.w	r3, r3, #2
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d005      	beq.n	8010ac4 <tcp_receive+0x938>
                inseg.len -= 1;
 8010ab8:	4b78      	ldr	r3, [pc, #480]	; (8010c9c <tcp_receive+0xb10>)
 8010aba:	891b      	ldrh	r3, [r3, #8]
 8010abc:	3b01      	subs	r3, #1
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	4b76      	ldr	r3, [pc, #472]	; (8010c9c <tcp_receive+0xb10>)
 8010ac2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010ac4:	4b75      	ldr	r3, [pc, #468]	; (8010c9c <tcp_receive+0xb10>)
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	4a74      	ldr	r2, [pc, #464]	; (8010c9c <tcp_receive+0xb10>)
 8010aca:	8912      	ldrh	r2, [r2, #8]
 8010acc:	4611      	mov	r1, r2
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fb fe52 	bl	800c778 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010ad4:	4b71      	ldr	r3, [pc, #452]	; (8010c9c <tcp_receive+0xb10>)
 8010ad6:	891c      	ldrh	r4, [r3, #8]
 8010ad8:	4b70      	ldr	r3, [pc, #448]	; (8010c9c <tcp_receive+0xb10>)
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	899b      	ldrh	r3, [r3, #12]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fa fbdd 	bl	800b2a0 <lwip_htons>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	f003 0303 	and.w	r3, r3, #3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <tcp_receive+0x96a>
 8010af2:	2301      	movs	r3, #1
 8010af4:	e000      	b.n	8010af8 <tcp_receive+0x96c>
 8010af6:	2300      	movs	r3, #0
 8010af8:	4423      	add	r3, r4
 8010afa:	b29a      	uxth	r2, r3
 8010afc:	4b65      	ldr	r3, [pc, #404]	; (8010c94 <tcp_receive+0xb08>)
 8010afe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010b00:	4b64      	ldr	r3, [pc, #400]	; (8010c94 <tcp_receive+0xb08>)
 8010b02:	881b      	ldrh	r3, [r3, #0]
 8010b04:	461a      	mov	r2, r3
 8010b06:	4b64      	ldr	r3, [pc, #400]	; (8010c98 <tcp_receive+0xb0c>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	441a      	add	r2, r3
 8010b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d006      	beq.n	8010b24 <tcp_receive+0x998>
 8010b16:	4b62      	ldr	r3, [pc, #392]	; (8010ca0 <tcp_receive+0xb14>)
 8010b18:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010b1c:	4961      	ldr	r1, [pc, #388]	; (8010ca4 <tcp_receive+0xb18>)
 8010b1e:	4862      	ldr	r0, [pc, #392]	; (8010ca8 <tcp_receive+0xb1c>)
 8010b20:	f006 f862 	bl	8016be8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b28:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010b2a:	4b5a      	ldr	r3, [pc, #360]	; (8010c94 <tcp_receive+0xb08>)
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4b59      	ldr	r3, [pc, #356]	; (8010c98 <tcp_receive+0xb0c>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	441a      	add	r2, r3
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b3e:	4b55      	ldr	r3, [pc, #340]	; (8010c94 <tcp_receive+0xb08>)
 8010b40:	881b      	ldrh	r3, [r3, #0]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d206      	bcs.n	8010b54 <tcp_receive+0x9c8>
 8010b46:	4b56      	ldr	r3, [pc, #344]	; (8010ca0 <tcp_receive+0xb14>)
 8010b48:	f240 6207 	movw	r2, #1543	; 0x607
 8010b4c:	4957      	ldr	r1, [pc, #348]	; (8010cac <tcp_receive+0xb20>)
 8010b4e:	4856      	ldr	r0, [pc, #344]	; (8010ca8 <tcp_receive+0xb1c>)
 8010b50:	f006 f84a 	bl	8016be8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b58:	4b4e      	ldr	r3, [pc, #312]	; (8010c94 <tcp_receive+0xb08>)
 8010b5a:	881b      	ldrh	r3, [r3, #0]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7fc fd99 	bl	800d69c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010b6a:	4b4c      	ldr	r3, [pc, #304]	; (8010c9c <tcp_receive+0xb10>)
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	891b      	ldrh	r3, [r3, #8]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d006      	beq.n	8010b82 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010b74:	4b49      	ldr	r3, [pc, #292]	; (8010c9c <tcp_receive+0xb10>)
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	4a4d      	ldr	r2, [pc, #308]	; (8010cb0 <tcp_receive+0xb24>)
 8010b7a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010b7c:	4b47      	ldr	r3, [pc, #284]	; (8010c9c <tcp_receive+0xb10>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b82:	4b46      	ldr	r3, [pc, #280]	; (8010c9c <tcp_receive+0xb10>)
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	899b      	ldrh	r3, [r3, #12]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fa fb88 	bl	800b2a0 <lwip_htons>
 8010b90:	4603      	mov	r3, r0
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	f003 0301 	and.w	r3, r3, #1
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f000 80b8 	beq.w	8010d0e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b9e:	4b45      	ldr	r3, [pc, #276]	; (8010cb4 <tcp_receive+0xb28>)
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	f043 0320 	orr.w	r3, r3, #32
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	4b42      	ldr	r3, [pc, #264]	; (8010cb4 <tcp_receive+0xb28>)
 8010baa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010bac:	e0af      	b.n	8010d0e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bb2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bb8:	68db      	ldr	r3, [r3, #12]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	4a36      	ldr	r2, [pc, #216]	; (8010c98 <tcp_receive+0xb0c>)
 8010bbe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	891b      	ldrh	r3, [r3, #8]
 8010bc4:	461c      	mov	r4, r3
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	899b      	ldrh	r3, [r3, #12]
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fa fb66 	bl	800b2a0 <lwip_htons>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f003 0303 	and.w	r3, r3, #3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <tcp_receive+0xa58>
 8010be0:	2301      	movs	r3, #1
 8010be2:	e000      	b.n	8010be6 <tcp_receive+0xa5a>
 8010be4:	2300      	movs	r3, #0
 8010be6:	191a      	adds	r2, r3, r4
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bec:	441a      	add	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bf6:	461c      	mov	r4, r3
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	891b      	ldrh	r3, [r3, #8]
 8010bfc:	461d      	mov	r5, r3
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	899b      	ldrh	r3, [r3, #12]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fa fb4a 	bl	800b2a0 <lwip_htons>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0303 	and.w	r3, r3, #3
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <tcp_receive+0xa90>
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e000      	b.n	8010c1e <tcp_receive+0xa92>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	442b      	add	r3, r5
 8010c20:	429c      	cmp	r4, r3
 8010c22:	d206      	bcs.n	8010c32 <tcp_receive+0xaa6>
 8010c24:	4b1e      	ldr	r3, [pc, #120]	; (8010ca0 <tcp_receive+0xb14>)
 8010c26:	f240 622b 	movw	r2, #1579	; 0x62b
 8010c2a:	4923      	ldr	r1, [pc, #140]	; (8010cb8 <tcp_receive+0xb2c>)
 8010c2c:	481e      	ldr	r0, [pc, #120]	; (8010ca8 <tcp_receive+0xb1c>)
 8010c2e:	f005 ffdb 	bl	8016be8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	891b      	ldrh	r3, [r3, #8]
 8010c36:	461c      	mov	r4, r3
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	899b      	ldrh	r3, [r3, #12]
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fa fb2d 	bl	800b2a0 <lwip_htons>
 8010c46:	4603      	mov	r3, r0
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	f003 0303 	and.w	r3, r3, #3
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d001      	beq.n	8010c56 <tcp_receive+0xaca>
 8010c52:	2301      	movs	r3, #1
 8010c54:	e000      	b.n	8010c58 <tcp_receive+0xacc>
 8010c56:	2300      	movs	r3, #0
 8010c58:	1919      	adds	r1, r3, r4
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c5e:	b28b      	uxth	r3, r1
 8010c60:	1ad3      	subs	r3, r2, r3
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7fc fd17 	bl	800d69c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	891b      	ldrh	r3, [r3, #8]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d028      	beq.n	8010cca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010c78:	4b0d      	ldr	r3, [pc, #52]	; (8010cb0 <tcp_receive+0xb24>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d01d      	beq.n	8010cbc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010c80:	4b0b      	ldr	r3, [pc, #44]	; (8010cb0 <tcp_receive+0xb24>)
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	4610      	mov	r0, r2
 8010c8c:	f7fb ffc8 	bl	800cc20 <pbuf_cat>
 8010c90:	e018      	b.n	8010cc4 <tcp_receive+0xb38>
 8010c92:	bf00      	nop
 8010c94:	2000d14e 	.word	0x2000d14e
 8010c98:	2000d144 	.word	0x2000d144
 8010c9c:	2000d124 	.word	0x2000d124
 8010ca0:	0801a2dc 	.word	0x0801a2dc
 8010ca4:	0801a6bc 	.word	0x0801a6bc
 8010ca8:	0801a328 	.word	0x0801a328
 8010cac:	0801a6f8 	.word	0x0801a6f8
 8010cb0:	2000d154 	.word	0x2000d154
 8010cb4:	2000d151 	.word	0x2000d151
 8010cb8:	0801a718 	.word	0x0801a718
            } else {
              recv_data = cseg->p;
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	4a70      	ldr	r2, [pc, #448]	; (8010e84 <tcp_receive+0xcf8>)
 8010cc2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	899b      	ldrh	r3, [r3, #12]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fa fae4 	bl	800b2a0 <lwip_htons>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d00d      	beq.n	8010d00 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010ce4:	4b68      	ldr	r3, [pc, #416]	; (8010e88 <tcp_receive+0xcfc>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	f043 0320 	orr.w	r3, r3, #32
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b66      	ldr	r3, [pc, #408]	; (8010e88 <tcp_receive+0xcfc>)
 8010cf0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	7d1b      	ldrb	r3, [r3, #20]
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	d102      	bne.n	8010d00 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2207      	movs	r2, #7
 8010cfe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010d08:	68b8      	ldr	r0, [r7, #8]
 8010d0a:	f7fd fb04 	bl	800e316 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d008      	beq.n	8010d28 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	685a      	ldr	r2, [r3, #4]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010d22:	429a      	cmp	r2, r3
 8010d24:	f43f af43 	beq.w	8010bae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	8b5b      	ldrh	r3, [r3, #26]
 8010d2c:	f003 0301 	and.w	r3, r3, #1
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00e      	beq.n	8010d52 <tcp_receive+0xbc6>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8b5b      	ldrh	r3, [r3, #26]
 8010d38:	f023 0301 	bic.w	r3, r3, #1
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	835a      	strh	r2, [r3, #26]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8b5b      	ldrh	r3, [r3, #26]
 8010d46:	f043 0302 	orr.w	r3, r3, #2
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d50:	e188      	b.n	8011064 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8b5b      	ldrh	r3, [r3, #26]
 8010d56:	f043 0301 	orr.w	r3, r3, #1
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d60:	e180      	b.n	8011064 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010d6a:	4848      	ldr	r0, [pc, #288]	; (8010e8c <tcp_receive+0xd00>)
 8010d6c:	f7fd faec 	bl	800e348 <tcp_seg_copy>
 8010d70:	4602      	mov	r2, r0
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	675a      	str	r2, [r3, #116]	; 0x74
 8010d76:	e16d      	b.n	8011054 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d82:	e157      	b.n	8011034 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	4b41      	ldr	r3, [pc, #260]	; (8010e90 <tcp_receive+0xd04>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d11d      	bne.n	8010dce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010d92:	4b3e      	ldr	r3, [pc, #248]	; (8010e8c <tcp_receive+0xd00>)
 8010d94:	891a      	ldrh	r2, [r3, #8]
 8010d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d98:	891b      	ldrh	r3, [r3, #8]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	f240 814f 	bls.w	801103e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010da0:	483a      	ldr	r0, [pc, #232]	; (8010e8c <tcp_receive+0xd00>)
 8010da2:	f7fd fad1 	bl	800e348 <tcp_seg_copy>
 8010da6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 8149 	beq.w	8011042 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d003      	beq.n	8010dbe <tcp_receive+0xc32>
                    prev->next = cseg;
 8010db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db8:	697a      	ldr	r2, [r7, #20]
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	e002      	b.n	8010dc4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	697a      	ldr	r2, [r7, #20]
 8010dc2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dc6:	6978      	ldr	r0, [r7, #20]
 8010dc8:	f7ff f8dc 	bl	800ff84 <tcp_oos_insert_segment>
                }
                break;
 8010dcc:	e139      	b.n	8011042 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d117      	bne.n	8010e04 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010dd4:	4b2e      	ldr	r3, [pc, #184]	; (8010e90 <tcp_receive+0xd04>)
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	da57      	bge.n	8010e94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010de4:	4829      	ldr	r0, [pc, #164]	; (8010e8c <tcp_receive+0xd00>)
 8010de6:	f7fd faaf 	bl	800e348 <tcp_seg_copy>
 8010dea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 8129 	beq.w	8011046 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	69ba      	ldr	r2, [r7, #24]
 8010df8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dfc:	69b8      	ldr	r0, [r7, #24]
 8010dfe:	f7ff f8c1 	bl	800ff84 <tcp_oos_insert_segment>
                  }
                  break;
 8010e02:	e120      	b.n	8011046 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010e04:	4b22      	ldr	r3, [pc, #136]	; (8010e90 <tcp_receive+0xd04>)
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	3b01      	subs	r3, #1
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	db3e      	blt.n	8010e94 <tcp_receive+0xd08>
 8010e16:	4b1e      	ldr	r3, [pc, #120]	; (8010e90 <tcp_receive+0xd04>)
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	3301      	adds	r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dc35      	bgt.n	8010e94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e28:	4818      	ldr	r0, [pc, #96]	; (8010e8c <tcp_receive+0xd00>)
 8010e2a:	f7fd fa8d 	bl	800e348 <tcp_seg_copy>
 8010e2e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f000 8109 	beq.w	801104a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e40:	8912      	ldrh	r2, [r2, #8]
 8010e42:	441a      	add	r2, r3
 8010e44:	4b12      	ldr	r3, [pc, #72]	; (8010e90 <tcp_receive+0xd04>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	dd12      	ble.n	8010e74 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010e4e:	4b10      	ldr	r3, [pc, #64]	; (8010e90 <tcp_receive+0xd04>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e62:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e6a:	891b      	ldrh	r3, [r3, #8]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	4610      	mov	r0, r2
 8010e70:	f7fb fc82 	bl	800c778 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e76:	69fa      	ldr	r2, [r7, #28]
 8010e78:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e7c:	69f8      	ldr	r0, [r7, #28]
 8010e7e:	f7ff f881 	bl	800ff84 <tcp_oos_insert_segment>
                  }
                  break;
 8010e82:	e0e2      	b.n	801104a <tcp_receive+0xebe>
 8010e84:	2000d154 	.word	0x2000d154
 8010e88:	2000d151 	.word	0x2000d151
 8010e8c:	2000d124 	.word	0x2000d124
 8010e90:	2000d144 	.word	0x2000d144
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e96:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f040 80c6 	bne.w	801102e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010ea2:	4b80      	ldr	r3, [pc, #512]	; (80110a4 <tcp_receive+0xf18>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f340 80bd 	ble.w	801102e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	899b      	ldrh	r3, [r3, #12]
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fa f9ef 	bl	800b2a0 <lwip_htons>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	f003 0301 	and.w	r3, r3, #1
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f040 80bf 	bne.w	801104e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010ed0:	4875      	ldr	r0, [pc, #468]	; (80110a8 <tcp_receive+0xf1c>)
 8010ed2:	f7fd fa39 	bl	800e348 <tcp_seg_copy>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eda:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 80b6 	beq.w	8011052 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010eee:	8912      	ldrh	r2, [r2, #8]
 8010ef0:	441a      	add	r2, r3
 8010ef2:	4b6c      	ldr	r3, [pc, #432]	; (80110a4 <tcp_receive+0xf18>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	dd12      	ble.n	8010f22 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010efc:	4b69      	ldr	r3, [pc, #420]	; (80110a4 <tcp_receive+0xf18>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	b29a      	uxth	r2, r3
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f10:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f14:	685a      	ldr	r2, [r3, #4]
 8010f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f18:	891b      	ldrh	r3, [r3, #8]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4610      	mov	r0, r2
 8010f1e:	f7fb fc2b 	bl	800c778 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010f22:	4b62      	ldr	r3, [pc, #392]	; (80110ac <tcp_receive+0xf20>)
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	461a      	mov	r2, r3
 8010f28:	4b5e      	ldr	r3, [pc, #376]	; (80110a4 <tcp_receive+0xf18>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	441a      	add	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f36:	440b      	add	r3, r1
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f340 8089 	ble.w	8011052 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	899b      	ldrh	r3, [r3, #12]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fa f9a8 	bl	800b2a0 <lwip_htons>
 8010f50:	4603      	mov	r3, r0
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d022      	beq.n	8010fa2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	899b      	ldrh	r3, [r3, #12]
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	b21b      	sxth	r3, r3
 8010f68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f6c:	b21c      	sxth	r4, r3
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	899b      	ldrh	r3, [r3, #12]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fa f991 	bl	800b2a0 <lwip_htons>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fa f988 	bl	800b2a0 <lwip_htons>
 8010f90:	4603      	mov	r3, r0
 8010f92:	b21b      	sxth	r3, r3
 8010f94:	4323      	orrs	r3, r4
 8010f96:	b21a      	sxth	r2, r3
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	b292      	uxth	r2, r2
 8010fa0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fac:	4413      	add	r3, r2
 8010fae:	b299      	uxth	r1, r3
 8010fb0:	4b3c      	ldr	r3, [pc, #240]	; (80110a4 <tcp_receive+0xf18>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	1a8a      	subs	r2, r1, r2
 8010fbc:	b292      	uxth	r2, r2
 8010fbe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	891b      	ldrh	r3, [r3, #8]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4610      	mov	r0, r2
 8010fd0:	f7fb fbd2 	bl	800c778 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	891c      	ldrh	r4, [r3, #8]
 8010fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	899b      	ldrh	r3, [r3, #12]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fa f95b 	bl	800b2a0 <lwip_htons>
 8010fea:	4603      	mov	r3, r0
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	f003 0303 	and.w	r3, r3, #3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <tcp_receive+0xe6e>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e000      	b.n	8010ffc <tcp_receive+0xe70>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	4423      	add	r3, r4
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	4b2a      	ldr	r3, [pc, #168]	; (80110ac <tcp_receive+0xf20>)
 8011002:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011004:	4b29      	ldr	r3, [pc, #164]	; (80110ac <tcp_receive+0xf20>)
 8011006:	881b      	ldrh	r3, [r3, #0]
 8011008:	461a      	mov	r2, r3
 801100a:	4b26      	ldr	r3, [pc, #152]	; (80110a4 <tcp_receive+0xf18>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	441a      	add	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011014:	6879      	ldr	r1, [r7, #4]
 8011016:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011018:	440b      	add	r3, r1
 801101a:	429a      	cmp	r2, r3
 801101c:	d019      	beq.n	8011052 <tcp_receive+0xec6>
 801101e:	4b24      	ldr	r3, [pc, #144]	; (80110b0 <tcp_receive+0xf24>)
 8011020:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011024:	4923      	ldr	r1, [pc, #140]	; (80110b4 <tcp_receive+0xf28>)
 8011026:	4824      	ldr	r0, [pc, #144]	; (80110b8 <tcp_receive+0xf2c>)
 8011028:	f005 fdde 	bl	8016be8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801102c:	e011      	b.n	8011052 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	63bb      	str	r3, [r7, #56]	; 0x38
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	2b00      	cmp	r3, #0
 8011038:	f47f aea4 	bne.w	8010d84 <tcp_receive+0xbf8>
 801103c:	e00a      	b.n	8011054 <tcp_receive+0xec8>
                break;
 801103e:	bf00      	nop
 8011040:	e008      	b.n	8011054 <tcp_receive+0xec8>
                break;
 8011042:	bf00      	nop
 8011044:	e006      	b.n	8011054 <tcp_receive+0xec8>
                  break;
 8011046:	bf00      	nop
 8011048:	e004      	b.n	8011054 <tcp_receive+0xec8>
                  break;
 801104a:	bf00      	nop
 801104c:	e002      	b.n	8011054 <tcp_receive+0xec8>
                  break;
 801104e:	bf00      	nop
 8011050:	e000      	b.n	8011054 <tcp_receive+0xec8>
                break;
 8011052:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f001 fe8b 	bl	8012d70 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801105a:	e003      	b.n	8011064 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f001 fe87 	bl	8012d70 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011062:	e01a      	b.n	801109a <tcp_receive+0xf0e>
 8011064:	e019      	b.n	801109a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011066:	4b0f      	ldr	r3, [pc, #60]	; (80110a4 <tcp_receive+0xf18>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	2b00      	cmp	r3, #0
 8011072:	db0a      	blt.n	801108a <tcp_receive+0xefe>
 8011074:	4b0b      	ldr	r3, [pc, #44]	; (80110a4 <tcp_receive+0xf18>)
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011080:	440b      	add	r3, r1
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	3301      	adds	r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	dd07      	ble.n	801109a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	8b5b      	ldrh	r3, [r3, #26]
 801108e:	f043 0302 	orr.w	r3, r3, #2
 8011092:	b29a      	uxth	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011098:	e7ff      	b.n	801109a <tcp_receive+0xf0e>
 801109a:	bf00      	nop
 801109c:	3750      	adds	r7, #80	; 0x50
 801109e:	46bd      	mov	sp, r7
 80110a0:	bdb0      	pop	{r4, r5, r7, pc}
 80110a2:	bf00      	nop
 80110a4:	2000d144 	.word	0x2000d144
 80110a8:	2000d124 	.word	0x2000d124
 80110ac:	2000d14e 	.word	0x2000d14e
 80110b0:	0801a2dc 	.word	0x0801a2dc
 80110b4:	0801a684 	.word	0x0801a684
 80110b8:	0801a328 	.word	0x0801a328

080110bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80110c2:	4b15      	ldr	r3, [pc, #84]	; (8011118 <tcp_get_next_optbyte+0x5c>)
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	1c5a      	adds	r2, r3, #1
 80110c8:	b291      	uxth	r1, r2
 80110ca:	4a13      	ldr	r2, [pc, #76]	; (8011118 <tcp_get_next_optbyte+0x5c>)
 80110cc:	8011      	strh	r1, [r2, #0]
 80110ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80110d0:	4b12      	ldr	r3, [pc, #72]	; (801111c <tcp_get_next_optbyte+0x60>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d004      	beq.n	80110e2 <tcp_get_next_optbyte+0x26>
 80110d8:	4b11      	ldr	r3, [pc, #68]	; (8011120 <tcp_get_next_optbyte+0x64>)
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	88fa      	ldrh	r2, [r7, #6]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d208      	bcs.n	80110f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80110e2:	4b10      	ldr	r3, [pc, #64]	; (8011124 <tcp_get_next_optbyte+0x68>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	3314      	adds	r3, #20
 80110e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80110ea:	88fb      	ldrh	r3, [r7, #6]
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	4413      	add	r3, r2
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	e00b      	b.n	801110c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80110f4:	88fb      	ldrh	r3, [r7, #6]
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	4b09      	ldr	r3, [pc, #36]	; (8011120 <tcp_get_next_optbyte+0x64>)
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011102:	4b06      	ldr	r3, [pc, #24]	; (801111c <tcp_get_next_optbyte+0x60>)
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	797b      	ldrb	r3, [r7, #5]
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801110c:	4618      	mov	r0, r3
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr
 8011118:	2000d140 	.word	0x2000d140
 801111c:	2000d13c 	.word	0x2000d13c
 8011120:	2000d13a 	.word	0x2000d13a
 8011124:	2000d134 	.word	0x2000d134

08011128 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <tcp_parseopt+0x1c>
 8011136:	4b32      	ldr	r3, [pc, #200]	; (8011200 <tcp_parseopt+0xd8>)
 8011138:	f240 727d 	movw	r2, #1917	; 0x77d
 801113c:	4931      	ldr	r1, [pc, #196]	; (8011204 <tcp_parseopt+0xdc>)
 801113e:	4832      	ldr	r0, [pc, #200]	; (8011208 <tcp_parseopt+0xe0>)
 8011140:	f005 fd52 	bl	8016be8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011144:	4b31      	ldr	r3, [pc, #196]	; (801120c <tcp_parseopt+0xe4>)
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d055      	beq.n	80111f8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801114c:	4b30      	ldr	r3, [pc, #192]	; (8011210 <tcp_parseopt+0xe8>)
 801114e:	2200      	movs	r2, #0
 8011150:	801a      	strh	r2, [r3, #0]
 8011152:	e045      	b.n	80111e0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011154:	f7ff ffb2 	bl	80110bc <tcp_get_next_optbyte>
 8011158:	4603      	mov	r3, r0
 801115a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801115c:	7bfb      	ldrb	r3, [r7, #15]
 801115e:	2b02      	cmp	r3, #2
 8011160:	d006      	beq.n	8011170 <tcp_parseopt+0x48>
 8011162:	2b02      	cmp	r3, #2
 8011164:	dc2b      	bgt.n	80111be <tcp_parseopt+0x96>
 8011166:	2b00      	cmp	r3, #0
 8011168:	d041      	beq.n	80111ee <tcp_parseopt+0xc6>
 801116a:	2b01      	cmp	r3, #1
 801116c:	d127      	bne.n	80111be <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801116e:	e037      	b.n	80111e0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011170:	f7ff ffa4 	bl	80110bc <tcp_get_next_optbyte>
 8011174:	4603      	mov	r3, r0
 8011176:	2b04      	cmp	r3, #4
 8011178:	d13b      	bne.n	80111f2 <tcp_parseopt+0xca>
 801117a:	4b25      	ldr	r3, [pc, #148]	; (8011210 <tcp_parseopt+0xe8>)
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	3301      	adds	r3, #1
 8011180:	4a22      	ldr	r2, [pc, #136]	; (801120c <tcp_parseopt+0xe4>)
 8011182:	8812      	ldrh	r2, [r2, #0]
 8011184:	4293      	cmp	r3, r2
 8011186:	da34      	bge.n	80111f2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011188:	f7ff ff98 	bl	80110bc <tcp_get_next_optbyte>
 801118c:	4603      	mov	r3, r0
 801118e:	b29b      	uxth	r3, r3
 8011190:	021b      	lsls	r3, r3, #8
 8011192:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011194:	f7ff ff92 	bl	80110bc <tcp_get_next_optbyte>
 8011198:	4603      	mov	r3, r0
 801119a:	b29a      	uxth	r2, r3
 801119c:	89bb      	ldrh	r3, [r7, #12]
 801119e:	4313      	orrs	r3, r2
 80111a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80111a2:	89bb      	ldrh	r3, [r7, #12]
 80111a4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80111a8:	d804      	bhi.n	80111b4 <tcp_parseopt+0x8c>
 80111aa:	89bb      	ldrh	r3, [r7, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d001      	beq.n	80111b4 <tcp_parseopt+0x8c>
 80111b0:	89ba      	ldrh	r2, [r7, #12]
 80111b2:	e001      	b.n	80111b8 <tcp_parseopt+0x90>
 80111b4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80111bc:	e010      	b.n	80111e0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80111be:	f7ff ff7d 	bl	80110bc <tcp_get_next_optbyte>
 80111c2:	4603      	mov	r3, r0
 80111c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80111c6:	7afb      	ldrb	r3, [r7, #11]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d914      	bls.n	80111f6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80111cc:	7afb      	ldrb	r3, [r7, #11]
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	4b0f      	ldr	r3, [pc, #60]	; (8011210 <tcp_parseopt+0xe8>)
 80111d2:	881b      	ldrh	r3, [r3, #0]
 80111d4:	4413      	add	r3, r2
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	3b02      	subs	r3, #2
 80111da:	b29a      	uxth	r2, r3
 80111dc:	4b0c      	ldr	r3, [pc, #48]	; (8011210 <tcp_parseopt+0xe8>)
 80111de:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111e0:	4b0b      	ldr	r3, [pc, #44]	; (8011210 <tcp_parseopt+0xe8>)
 80111e2:	881a      	ldrh	r2, [r3, #0]
 80111e4:	4b09      	ldr	r3, [pc, #36]	; (801120c <tcp_parseopt+0xe4>)
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d3b3      	bcc.n	8011154 <tcp_parseopt+0x2c>
 80111ec:	e004      	b.n	80111f8 <tcp_parseopt+0xd0>
          return;
 80111ee:	bf00      	nop
 80111f0:	e002      	b.n	80111f8 <tcp_parseopt+0xd0>
            return;
 80111f2:	bf00      	nop
 80111f4:	e000      	b.n	80111f8 <tcp_parseopt+0xd0>
            return;
 80111f6:	bf00      	nop
      }
    }
  }
}
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801a2dc 	.word	0x0801a2dc
 8011204:	0801a740 	.word	0x0801a740
 8011208:	0801a328 	.word	0x0801a328
 801120c:	2000d138 	.word	0x2000d138
 8011210:	2000d140 	.word	0x2000d140

08011214 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011214:	b480      	push	{r7}
 8011216:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011218:	4b05      	ldr	r3, [pc, #20]	; (8011230 <tcp_trigger_input_pcb_close+0x1c>)
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	f043 0310 	orr.w	r3, r3, #16
 8011220:	b2da      	uxtb	r2, r3
 8011222:	4b03      	ldr	r3, [pc, #12]	; (8011230 <tcp_trigger_input_pcb_close+0x1c>)
 8011224:	701a      	strb	r2, [r3, #0]
}
 8011226:	bf00      	nop
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr
 8011230:	2000d151 	.word	0x2000d151

08011234 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <tcp_route+0x28>
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	7a1b      	ldrb	r3, [r3, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d006      	beq.n	801125c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	7a1b      	ldrb	r3, [r3, #8]
 8011252:	4618      	mov	r0, r3
 8011254:	f7fb f888 	bl	800c368 <netif_get_by_index>
 8011258:	4603      	mov	r3, r0
 801125a:	e003      	b.n	8011264 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f003 fecb 	bl	8014ff8 <ip4_route>
 8011262:	4603      	mov	r3, r0
  }
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801126c:	b590      	push	{r4, r7, lr}
 801126e:	b087      	sub	sp, #28
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	603b      	str	r3, [r7, #0]
 8011278:	4613      	mov	r3, r2
 801127a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d105      	bne.n	801128e <tcp_create_segment+0x22>
 8011282:	4b44      	ldr	r3, [pc, #272]	; (8011394 <tcp_create_segment+0x128>)
 8011284:	22a3      	movs	r2, #163	; 0xa3
 8011286:	4944      	ldr	r1, [pc, #272]	; (8011398 <tcp_create_segment+0x12c>)
 8011288:	4844      	ldr	r0, [pc, #272]	; (801139c <tcp_create_segment+0x130>)
 801128a:	f005 fcad 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d105      	bne.n	80112a0 <tcp_create_segment+0x34>
 8011294:	4b3f      	ldr	r3, [pc, #252]	; (8011394 <tcp_create_segment+0x128>)
 8011296:	22a4      	movs	r2, #164	; 0xa4
 8011298:	4941      	ldr	r1, [pc, #260]	; (80113a0 <tcp_create_segment+0x134>)
 801129a:	4840      	ldr	r0, [pc, #256]	; (801139c <tcp_create_segment+0x130>)
 801129c:	f005 fca4 	bl	8016be8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80112a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f003 0304 	and.w	r3, r3, #4
 80112ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80112ae:	2003      	movs	r0, #3
 80112b0:	f7fa fcce 	bl	800bc50 <memp_malloc>
 80112b4:	6138      	str	r0, [r7, #16]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d104      	bne.n	80112c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80112bc:	68b8      	ldr	r0, [r7, #8]
 80112be:	f7fb fbe1 	bl	800ca84 <pbuf_free>
    return NULL;
 80112c2:	2300      	movs	r3, #0
 80112c4:	e061      	b.n	801138a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80112cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	2200      	movs	r2, #0
 80112d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	891a      	ldrh	r2, [r3, #8]
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d205      	bcs.n	80112f2 <tcp_create_segment+0x86>
 80112e6:	4b2b      	ldr	r3, [pc, #172]	; (8011394 <tcp_create_segment+0x128>)
 80112e8:	22b0      	movs	r2, #176	; 0xb0
 80112ea:	492e      	ldr	r1, [pc, #184]	; (80113a4 <tcp_create_segment+0x138>)
 80112ec:	482b      	ldr	r0, [pc, #172]	; (801139c <tcp_create_segment+0x130>)
 80112ee:	f005 fc7b 	bl	8016be8 <iprintf>
  seg->len = p->tot_len - optlen;
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	891a      	ldrh	r2, [r3, #8]
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011302:	2114      	movs	r1, #20
 8011304:	68b8      	ldr	r0, [r7, #8]
 8011306:	f7fb fb27 	bl	800c958 <pbuf_add_header>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d004      	beq.n	801131a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011310:	6938      	ldr	r0, [r7, #16]
 8011312:	f7fd f800 	bl	800e316 <tcp_seg_free>
    return NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	e037      	b.n	801138a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	685a      	ldr	r2, [r3, #4]
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	8ada      	ldrh	r2, [r3, #22]
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	68dc      	ldr	r4, [r3, #12]
 801132c:	4610      	mov	r0, r2
 801132e:	f7f9 ffb7 	bl	800b2a0 <lwip_htons>
 8011332:	4603      	mov	r3, r0
 8011334:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	8b1a      	ldrh	r2, [r3, #24]
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	68dc      	ldr	r4, [r3, #12]
 801133e:	4610      	mov	r0, r2
 8011340:	f7f9 ffae 	bl	800b2a0 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	68dc      	ldr	r4, [r3, #12]
 801134c:	6838      	ldr	r0, [r7, #0]
 801134e:	f7f9 ffbc 	bl	800b2ca <lwip_htonl>
 8011352:	4603      	mov	r3, r0
 8011354:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	089b      	lsrs	r3, r3, #2
 801135a:	b2db      	uxtb	r3, r3
 801135c:	b29b      	uxth	r3, r3
 801135e:	3305      	adds	r3, #5
 8011360:	b29b      	uxth	r3, r3
 8011362:	031b      	lsls	r3, r3, #12
 8011364:	b29a      	uxth	r2, r3
 8011366:	79fb      	ldrb	r3, [r7, #7]
 8011368:	b29b      	uxth	r3, r3
 801136a:	4313      	orrs	r3, r2
 801136c:	b29a      	uxth	r2, r3
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	68dc      	ldr	r4, [r3, #12]
 8011372:	4610      	mov	r0, r2
 8011374:	f7f9 ff94 	bl	800b2a0 <lwip_htons>
 8011378:	4603      	mov	r3, r0
 801137a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	2200      	movs	r2, #0
 8011382:	749a      	strb	r2, [r3, #18]
 8011384:	2200      	movs	r2, #0
 8011386:	74da      	strb	r2, [r3, #19]
  return seg;
 8011388:	693b      	ldr	r3, [r7, #16]
}
 801138a:	4618      	mov	r0, r3
 801138c:	371c      	adds	r7, #28
 801138e:	46bd      	mov	sp, r7
 8011390:	bd90      	pop	{r4, r7, pc}
 8011392:	bf00      	nop
 8011394:	0801a75c 	.word	0x0801a75c
 8011398:	0801a790 	.word	0x0801a790
 801139c:	0801a7b0 	.word	0x0801a7b0
 80113a0:	0801a7d8 	.word	0x0801a7d8
 80113a4:	0801a7fc 	.word	0x0801a7fc

080113a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	607b      	str	r3, [r7, #4]
 80113b0:	4603      	mov	r3, r0
 80113b2:	73fb      	strb	r3, [r7, #15]
 80113b4:	460b      	mov	r3, r1
 80113b6:	81bb      	strh	r3, [r7, #12]
 80113b8:	4613      	mov	r3, r2
 80113ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80113bc:	89bb      	ldrh	r3, [r7, #12]
 80113be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d105      	bne.n	80113d2 <tcp_pbuf_prealloc+0x2a>
 80113c6:	4b30      	ldr	r3, [pc, #192]	; (8011488 <tcp_pbuf_prealloc+0xe0>)
 80113c8:	22e8      	movs	r2, #232	; 0xe8
 80113ca:	4930      	ldr	r1, [pc, #192]	; (801148c <tcp_pbuf_prealloc+0xe4>)
 80113cc:	4830      	ldr	r0, [pc, #192]	; (8011490 <tcp_pbuf_prealloc+0xe8>)
 80113ce:	f005 fc0b 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80113d2:	6a3b      	ldr	r3, [r7, #32]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d105      	bne.n	80113e4 <tcp_pbuf_prealloc+0x3c>
 80113d8:	4b2b      	ldr	r3, [pc, #172]	; (8011488 <tcp_pbuf_prealloc+0xe0>)
 80113da:	22e9      	movs	r2, #233	; 0xe9
 80113dc:	492d      	ldr	r1, [pc, #180]	; (8011494 <tcp_pbuf_prealloc+0xec>)
 80113de:	482c      	ldr	r0, [pc, #176]	; (8011490 <tcp_pbuf_prealloc+0xe8>)
 80113e0:	f005 fc02 	bl	8016be8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80113e4:	89ba      	ldrh	r2, [r7, #12]
 80113e6:	897b      	ldrh	r3, [r7, #10]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d221      	bcs.n	8011430 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80113ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80113f0:	f003 0302 	and.w	r3, r3, #2
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d111      	bne.n	801141c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	8b5b      	ldrh	r3, [r3, #26]
 80113fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011400:	2b00      	cmp	r3, #0
 8011402:	d115      	bne.n	8011430 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011404:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011408:	2b00      	cmp	r3, #0
 801140a:	d007      	beq.n	801141c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801140c:	6a3b      	ldr	r3, [r7, #32]
 801140e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011410:	2b00      	cmp	r3, #0
 8011412:	d103      	bne.n	801141c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011414:	6a3b      	ldr	r3, [r7, #32]
 8011416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011418:	2b00      	cmp	r3, #0
 801141a:	d009      	beq.n	8011430 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801141c:	89bb      	ldrh	r3, [r7, #12]
 801141e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011422:	f023 0203 	bic.w	r2, r3, #3
 8011426:	897b      	ldrh	r3, [r7, #10]
 8011428:	4293      	cmp	r3, r2
 801142a:	bf28      	it	cs
 801142c:	4613      	movcs	r3, r2
 801142e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011430:	8af9      	ldrh	r1, [r7, #22]
 8011432:	7bfb      	ldrb	r3, [r7, #15]
 8011434:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011438:	4618      	mov	r0, r3
 801143a:	f7fb f83f 	bl	800c4bc <pbuf_alloc>
 801143e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011446:	2300      	movs	r3, #0
 8011448:	e019      	b.n	801147e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d006      	beq.n	8011460 <tcp_pbuf_prealloc+0xb8>
 8011452:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <tcp_pbuf_prealloc+0xe0>)
 8011454:	f240 120b 	movw	r2, #267	; 0x10b
 8011458:	490f      	ldr	r1, [pc, #60]	; (8011498 <tcp_pbuf_prealloc+0xf0>)
 801145a:	480d      	ldr	r0, [pc, #52]	; (8011490 <tcp_pbuf_prealloc+0xe8>)
 801145c:	f005 fbc4 	bl	8016be8 <iprintf>
  *oversize = p->len - length;
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	895a      	ldrh	r2, [r3, #10]
 8011464:	89bb      	ldrh	r3, [r7, #12]
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	b29a      	uxth	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	89ba      	ldrh	r2, [r7, #12]
 8011472:	811a      	strh	r2, [r3, #8]
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	891a      	ldrh	r2, [r3, #8]
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	815a      	strh	r2, [r3, #10]
  return p;
 801147c:	693b      	ldr	r3, [r7, #16]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3718      	adds	r7, #24
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	0801a75c 	.word	0x0801a75c
 801148c:	0801a814 	.word	0x0801a814
 8011490:	0801a7b0 	.word	0x0801a7b0
 8011494:	0801a838 	.word	0x0801a838
 8011498:	0801a858 	.word	0x0801a858

0801149c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	460b      	mov	r3, r1
 80114a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_write_checks+0x20>
 80114ae:	4b33      	ldr	r3, [pc, #204]	; (801157c <tcp_write_checks+0xe0>)
 80114b0:	f240 1233 	movw	r2, #307	; 0x133
 80114b4:	4932      	ldr	r1, [pc, #200]	; (8011580 <tcp_write_checks+0xe4>)
 80114b6:	4833      	ldr	r0, [pc, #204]	; (8011584 <tcp_write_checks+0xe8>)
 80114b8:	f005 fb96 	bl	8016be8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	7d1b      	ldrb	r3, [r3, #20]
 80114c0:	2b04      	cmp	r3, #4
 80114c2:	d00e      	beq.n	80114e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80114c8:	2b07      	cmp	r3, #7
 80114ca:	d00a      	beq.n	80114e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d006      	beq.n	80114e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80114d8:	2b03      	cmp	r3, #3
 80114da:	d002      	beq.n	80114e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80114dc:	f06f 030a 	mvn.w	r3, #10
 80114e0:	e048      	b.n	8011574 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80114e2:	887b      	ldrh	r3, [r7, #2]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d101      	bne.n	80114ec <tcp_write_checks+0x50>
    return ERR_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	e043      	b.n	8011574 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80114f2:	887a      	ldrh	r2, [r7, #2]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d909      	bls.n	801150c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	8b5b      	ldrh	r3, [r3, #26]
 80114fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011500:	b29a      	uxth	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011506:	f04f 33ff 	mov.w	r3, #4294967295
 801150a:	e033      	b.n	8011574 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011512:	2b08      	cmp	r3, #8
 8011514:	d909      	bls.n	801152a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	8b5b      	ldrh	r3, [r3, #26]
 801151a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801151e:	b29a      	uxth	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
 8011528:	e024      	b.n	8011574 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00f      	beq.n	8011554 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011538:	2b00      	cmp	r3, #0
 801153a:	d11a      	bne.n	8011572 <tcp_write_checks+0xd6>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011540:	2b00      	cmp	r3, #0
 8011542:	d116      	bne.n	8011572 <tcp_write_checks+0xd6>
 8011544:	4b0d      	ldr	r3, [pc, #52]	; (801157c <tcp_write_checks+0xe0>)
 8011546:	f240 1255 	movw	r2, #341	; 0x155
 801154a:	490f      	ldr	r1, [pc, #60]	; (8011588 <tcp_write_checks+0xec>)
 801154c:	480d      	ldr	r0, [pc, #52]	; (8011584 <tcp_write_checks+0xe8>)
 801154e:	f005 fb4b 	bl	8016be8 <iprintf>
 8011552:	e00e      	b.n	8011572 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011558:	2b00      	cmp	r3, #0
 801155a:	d103      	bne.n	8011564 <tcp_write_checks+0xc8>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011560:	2b00      	cmp	r3, #0
 8011562:	d006      	beq.n	8011572 <tcp_write_checks+0xd6>
 8011564:	4b05      	ldr	r3, [pc, #20]	; (801157c <tcp_write_checks+0xe0>)
 8011566:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801156a:	4908      	ldr	r1, [pc, #32]	; (801158c <tcp_write_checks+0xf0>)
 801156c:	4805      	ldr	r0, [pc, #20]	; (8011584 <tcp_write_checks+0xe8>)
 801156e:	f005 fb3b 	bl	8016be8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	0801a75c 	.word	0x0801a75c
 8011580:	0801a86c 	.word	0x0801a86c
 8011584:	0801a7b0 	.word	0x0801a7b0
 8011588:	0801a88c 	.word	0x0801a88c
 801158c:	0801a8c8 	.word	0x0801a8c8

08011590 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b09b      	sub	sp, #108	; 0x6c
 8011594:	af04      	add	r7, sp, #16
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	4611      	mov	r1, r2
 801159c:	461a      	mov	r2, r3
 801159e:	460b      	mov	r3, r1
 80115a0:	80fb      	strh	r3, [r7, #6]
 80115a2:	4613      	mov	r3, r2
 80115a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80115a6:	2300      	movs	r3, #0
 80115a8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	653b      	str	r3, [r7, #80]	; 0x50
 80115ae:	2300      	movs	r3, #0
 80115b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115b2:	2300      	movs	r3, #0
 80115b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80115b6:	2300      	movs	r3, #0
 80115b8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80115ba:	2300      	movs	r3, #0
 80115bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80115ca:	2300      	movs	r3, #0
 80115cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80115ce:	2300      	movs	r3, #0
 80115d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d109      	bne.n	80115ec <tcp_write+0x5c>
 80115d8:	4ba4      	ldr	r3, [pc, #656]	; (801186c <tcp_write+0x2dc>)
 80115da:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80115de:	49a4      	ldr	r1, [pc, #656]	; (8011870 <tcp_write+0x2e0>)
 80115e0:	48a4      	ldr	r0, [pc, #656]	; (8011874 <tcp_write+0x2e4>)
 80115e2:	f005 fb01 	bl	8016be8 <iprintf>
 80115e6:	f06f 030f 	mvn.w	r3, #15
 80115ea:	e32a      	b.n	8011c42 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80115f2:	085b      	lsrs	r3, r3, #1
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115fa:	4293      	cmp	r3, r2
 80115fc:	bf28      	it	cs
 80115fe:	4613      	movcs	r3, r2
 8011600:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <tcp_write+0x7e>
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801160c:	e000      	b.n	8011610 <tcp_write+0x80>
 801160e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011610:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d109      	bne.n	801162c <tcp_write+0x9c>
 8011618:	4b94      	ldr	r3, [pc, #592]	; (801186c <tcp_write+0x2dc>)
 801161a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801161e:	4996      	ldr	r1, [pc, #600]	; (8011878 <tcp_write+0x2e8>)
 8011620:	4894      	ldr	r0, [pc, #592]	; (8011874 <tcp_write+0x2e4>)
 8011622:	f005 fae1 	bl	8016be8 <iprintf>
 8011626:	f06f 030f 	mvn.w	r3, #15
 801162a:	e30a      	b.n	8011c42 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801162c:	88fb      	ldrh	r3, [r7, #6]
 801162e:	4619      	mov	r1, r3
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	f7ff ff33 	bl	801149c <tcp_write_checks>
 8011636:	4603      	mov	r3, r0
 8011638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801163c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <tcp_write+0xba>
    return err;
 8011644:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011648:	e2fb      	b.n	8011c42 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011650:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011654:	2300      	movs	r3, #0
 8011656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165e:	2b00      	cmp	r3, #0
 8011660:	f000 80f6 	beq.w	8011850 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011668:	653b      	str	r3, [r7, #80]	; 0x50
 801166a:	e002      	b.n	8011672 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801166c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1f8      	bne.n	801166c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801167a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167c:	7a9b      	ldrb	r3, [r3, #10]
 801167e:	009b      	lsls	r3, r3, #2
 8011680:	b29b      	uxth	r3, r3
 8011682:	f003 0304 	and.w	r3, r3, #4
 8011686:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801168a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168c:	891b      	ldrh	r3, [r3, #8]
 801168e:	4619      	mov	r1, r3
 8011690:	8c3b      	ldrh	r3, [r7, #32]
 8011692:	440b      	add	r3, r1
 8011694:	429a      	cmp	r2, r3
 8011696:	da06      	bge.n	80116a6 <tcp_write+0x116>
 8011698:	4b74      	ldr	r3, [pc, #464]	; (801186c <tcp_write+0x2dc>)
 801169a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801169e:	4977      	ldr	r1, [pc, #476]	; (801187c <tcp_write+0x2ec>)
 80116a0:	4874      	ldr	r0, [pc, #464]	; (8011874 <tcp_write+0x2e4>)
 80116a2:	f005 faa1 	bl	8016be8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80116a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a8:	891a      	ldrh	r2, [r3, #8]
 80116aa:	8c3b      	ldrh	r3, [r7, #32]
 80116ac:	4413      	add	r3, r2
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80116be:	8a7b      	ldrh	r3, [r7, #18]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d026      	beq.n	8011712 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80116c4:	8a7b      	ldrh	r3, [r7, #18]
 80116c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d206      	bcs.n	80116da <tcp_write+0x14a>
 80116cc:	4b67      	ldr	r3, [pc, #412]	; (801186c <tcp_write+0x2dc>)
 80116ce:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80116d2:	496b      	ldr	r1, [pc, #428]	; (8011880 <tcp_write+0x2f0>)
 80116d4:	4867      	ldr	r0, [pc, #412]	; (8011874 <tcp_write+0x2e4>)
 80116d6:	f005 fa87 	bl	8016be8 <iprintf>
      seg = last_unsent;
 80116da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116dc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80116de:	8a7b      	ldrh	r3, [r7, #18]
 80116e0:	88fa      	ldrh	r2, [r7, #6]
 80116e2:	4293      	cmp	r3, r2
 80116e4:	bf28      	it	cs
 80116e6:	4613      	movcs	r3, r2
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80116ec:	4293      	cmp	r3, r2
 80116ee:	bf28      	it	cs
 80116f0:	4613      	movcs	r3, r2
 80116f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80116f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116fa:	4413      	add	r3, r2
 80116fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011700:	8a7a      	ldrh	r2, [r7, #18]
 8011702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	b29b      	uxth	r3, r3
 8011708:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801170a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801170c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011712:	8a7b      	ldrh	r3, [r7, #18]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <tcp_write+0x1a0>
 8011718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801171c:	88fb      	ldrh	r3, [r7, #6]
 801171e:	429a      	cmp	r2, r3
 8011720:	d006      	beq.n	8011730 <tcp_write+0x1a0>
 8011722:	4b52      	ldr	r3, [pc, #328]	; (801186c <tcp_write+0x2dc>)
 8011724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011728:	4956      	ldr	r1, [pc, #344]	; (8011884 <tcp_write+0x2f4>)
 801172a:	4852      	ldr	r0, [pc, #328]	; (8011874 <tcp_write+0x2e4>)
 801172c:	f005 fa5c 	bl	8016be8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	429a      	cmp	r2, r3
 8011738:	f080 8167 	bcs.w	8011a0a <tcp_write+0x47a>
 801173c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801173e:	2b00      	cmp	r3, #0
 8011740:	f000 8163 	beq.w	8011a0a <tcp_write+0x47a>
 8011744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011746:	891b      	ldrh	r3, [r3, #8]
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 815e 	beq.w	8011a0a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801174e:	88fa      	ldrh	r2, [r7, #6]
 8011750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011754:	1ad2      	subs	r2, r2, r3
 8011756:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011758:	4293      	cmp	r3, r2
 801175a:	bfa8      	it	ge
 801175c:	4613      	movge	r3, r2
 801175e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011762:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011764:	797b      	ldrb	r3, [r7, #5]
 8011766:	f003 0301 	and.w	r3, r3, #1
 801176a:	2b00      	cmp	r3, #0
 801176c:	d027      	beq.n	80117be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801176e:	f107 0012 	add.w	r0, r7, #18
 8011772:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011774:	8bf9      	ldrh	r1, [r7, #30]
 8011776:	2301      	movs	r3, #1
 8011778:	9302      	str	r3, [sp, #8]
 801177a:	797b      	ldrb	r3, [r7, #5]
 801177c:	9301      	str	r3, [sp, #4]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	4603      	mov	r3, r0
 8011784:	2000      	movs	r0, #0
 8011786:	f7ff fe0f 	bl	80113a8 <tcp_pbuf_prealloc>
 801178a:	6578      	str	r0, [r7, #84]	; 0x54
 801178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801178e:	2b00      	cmp	r3, #0
 8011790:	f000 8225 	beq.w	8011bde <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011796:	6858      	ldr	r0, [r3, #4]
 8011798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	4413      	add	r3, r2
 80117a0:	8bfa      	ldrh	r2, [r7, #30]
 80117a2:	4619      	mov	r1, r3
 80117a4:	f005 fbe1 	bl	8016f6a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80117a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117aa:	f7fb f9f9 	bl	800cba0 <pbuf_clen>
 80117ae:	4603      	mov	r3, r0
 80117b0:	461a      	mov	r2, r3
 80117b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80117b6:	4413      	add	r3, r2
 80117b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80117bc:	e041      	b.n	8011842 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80117be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	637b      	str	r3, [r7, #52]	; 0x34
 80117c4:	e002      	b.n	80117cc <tcp_write+0x23c>
 80117c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	637b      	str	r3, [r7, #52]	; 0x34
 80117cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1f8      	bne.n	80117c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80117d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d6:	7b1b      	ldrb	r3, [r3, #12]
 80117d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d115      	bne.n	801180c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80117e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117e6:	8952      	ldrh	r2, [r2, #10]
 80117e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80117ea:	68ba      	ldr	r2, [r7, #8]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d10d      	bne.n	801180c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80117f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d006      	beq.n	8011806 <tcp_write+0x276>
 80117f8:	4b1c      	ldr	r3, [pc, #112]	; (801186c <tcp_write+0x2dc>)
 80117fa:	f240 2231 	movw	r2, #561	; 0x231
 80117fe:	4922      	ldr	r1, [pc, #136]	; (8011888 <tcp_write+0x2f8>)
 8011800:	481c      	ldr	r0, [pc, #112]	; (8011874 <tcp_write+0x2e4>)
 8011802:	f005 f9f1 	bl	8016be8 <iprintf>
          extendlen = seglen;
 8011806:	8bfb      	ldrh	r3, [r7, #30]
 8011808:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801180a:	e01a      	b.n	8011842 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801180c:	8bfb      	ldrh	r3, [r7, #30]
 801180e:	2201      	movs	r2, #1
 8011810:	4619      	mov	r1, r3
 8011812:	2000      	movs	r0, #0
 8011814:	f7fa fe52 	bl	800c4bc <pbuf_alloc>
 8011818:	6578      	str	r0, [r7, #84]	; 0x54
 801181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801181c:	2b00      	cmp	r3, #0
 801181e:	f000 81e0 	beq.w	8011be2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011822:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	441a      	add	r2, r3
 801182a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801182c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801182e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011830:	f7fb f9b6 	bl	800cba0 <pbuf_clen>
 8011834:	4603      	mov	r3, r0
 8011836:	461a      	mov	r2, r3
 8011838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801183c:	4413      	add	r3, r2
 801183e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011846:	8bfb      	ldrh	r3, [r7, #30]
 8011848:	4413      	add	r3, r2
 801184a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801184e:	e0dc      	b.n	8011a0a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 80d7 	beq.w	8011a0a <tcp_write+0x47a>
 801185c:	4b03      	ldr	r3, [pc, #12]	; (801186c <tcp_write+0x2dc>)
 801185e:	f240 224a 	movw	r2, #586	; 0x24a
 8011862:	490a      	ldr	r1, [pc, #40]	; (801188c <tcp_write+0x2fc>)
 8011864:	4803      	ldr	r0, [pc, #12]	; (8011874 <tcp_write+0x2e4>)
 8011866:	f005 f9bf 	bl	8016be8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801186a:	e0ce      	b.n	8011a0a <tcp_write+0x47a>
 801186c:	0801a75c 	.word	0x0801a75c
 8011870:	0801a8fc 	.word	0x0801a8fc
 8011874:	0801a7b0 	.word	0x0801a7b0
 8011878:	0801a914 	.word	0x0801a914
 801187c:	0801a948 	.word	0x0801a948
 8011880:	0801a960 	.word	0x0801a960
 8011884:	0801a980 	.word	0x0801a980
 8011888:	0801a9a0 	.word	0x0801a9a0
 801188c:	0801a9cc 	.word	0x0801a9cc
    struct pbuf *p;
    u16_t left = len - pos;
 8011890:	88fa      	ldrh	r2, [r7, #6]
 8011892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801189a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801189e:	b29b      	uxth	r3, r3
 80118a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80118a6:	8b7a      	ldrh	r2, [r7, #26]
 80118a8:	8bbb      	ldrh	r3, [r7, #28]
 80118aa:	4293      	cmp	r3, r2
 80118ac:	bf28      	it	cs
 80118ae:	4613      	movcs	r3, r2
 80118b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80118b2:	797b      	ldrb	r3, [r7, #5]
 80118b4:	f003 0301 	and.w	r3, r3, #1
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d036      	beq.n	801192a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80118bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	8b3b      	ldrh	r3, [r7, #24]
 80118c4:	4413      	add	r3, r2
 80118c6:	b299      	uxth	r1, r3
 80118c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bf0c      	ite	eq
 80118ce:	2301      	moveq	r3, #1
 80118d0:	2300      	movne	r3, #0
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	f107 0012 	add.w	r0, r7, #18
 80118d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80118da:	9302      	str	r3, [sp, #8]
 80118dc:	797b      	ldrb	r3, [r7, #5]
 80118de:	9301      	str	r3, [sp, #4]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	9300      	str	r3, [sp, #0]
 80118e4:	4603      	mov	r3, r0
 80118e6:	2036      	movs	r0, #54	; 0x36
 80118e8:	f7ff fd5e 	bl	80113a8 <tcp_pbuf_prealloc>
 80118ec:	6338      	str	r0, [r7, #48]	; 0x30
 80118ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 8178 	beq.w	8011be6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	895b      	ldrh	r3, [r3, #10]
 80118fa:	8b3a      	ldrh	r2, [r7, #24]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d906      	bls.n	801190e <tcp_write+0x37e>
 8011900:	4b8c      	ldr	r3, [pc, #560]	; (8011b34 <tcp_write+0x5a4>)
 8011902:	f240 2266 	movw	r2, #614	; 0x266
 8011906:	498c      	ldr	r1, [pc, #560]	; (8011b38 <tcp_write+0x5a8>)
 8011908:	488c      	ldr	r0, [pc, #560]	; (8011b3c <tcp_write+0x5ac>)
 801190a:	f005 f96d 	bl	8016be8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	685a      	ldr	r2, [r3, #4]
 8011912:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011916:	18d0      	adds	r0, r2, r3
 8011918:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	4413      	add	r3, r2
 8011920:	8b3a      	ldrh	r2, [r7, #24]
 8011922:	4619      	mov	r1, r3
 8011924:	f005 fb21 	bl	8016f6a <memcpy>
 8011928:	e02f      	b.n	801198a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801192a:	8a7b      	ldrh	r3, [r7, #18]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d006      	beq.n	801193e <tcp_write+0x3ae>
 8011930:	4b80      	ldr	r3, [pc, #512]	; (8011b34 <tcp_write+0x5a4>)
 8011932:	f240 2271 	movw	r2, #625	; 0x271
 8011936:	4982      	ldr	r1, [pc, #520]	; (8011b40 <tcp_write+0x5b0>)
 8011938:	4880      	ldr	r0, [pc, #512]	; (8011b3c <tcp_write+0x5ac>)
 801193a:	f005 f955 	bl	8016be8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801193e:	8b3b      	ldrh	r3, [r7, #24]
 8011940:	2201      	movs	r2, #1
 8011942:	4619      	mov	r1, r3
 8011944:	2036      	movs	r0, #54	; 0x36
 8011946:	f7fa fdb9 	bl	800c4bc <pbuf_alloc>
 801194a:	6178      	str	r0, [r7, #20]
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 814b 	beq.w	8011bea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011958:	68ba      	ldr	r2, [r7, #8]
 801195a:	441a      	add	r2, r3
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011964:	b29b      	uxth	r3, r3
 8011966:	f44f 7220 	mov.w	r2, #640	; 0x280
 801196a:	4619      	mov	r1, r3
 801196c:	2036      	movs	r0, #54	; 0x36
 801196e:	f7fa fda5 	bl	800c4bc <pbuf_alloc>
 8011972:	6338      	str	r0, [r7, #48]	; 0x30
 8011974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011976:	2b00      	cmp	r3, #0
 8011978:	d103      	bne.n	8011982 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801197a:	6978      	ldr	r0, [r7, #20]
 801197c:	f7fb f882 	bl	800ca84 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011980:	e136      	b.n	8011bf0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011982:	6979      	ldr	r1, [r7, #20]
 8011984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011986:	f7fb f94b 	bl	800cc20 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801198a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801198c:	f7fb f908 	bl	800cba0 <pbuf_clen>
 8011990:	4603      	mov	r3, r0
 8011992:	461a      	mov	r2, r3
 8011994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011998:	4413      	add	r3, r2
 801199a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801199e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119a2:	2b09      	cmp	r3, #9
 80119a4:	d903      	bls.n	80119ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80119a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119a8:	f7fb f86c 	bl	800ca84 <pbuf_free>
      goto memerr;
 80119ac:	e120      	b.n	8011bf0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80119b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119b6:	441a      	add	r2, r3
 80119b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	4613      	mov	r3, r2
 80119c0:	2200      	movs	r2, #0
 80119c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119c4:	68f8      	ldr	r0, [r7, #12]
 80119c6:	f7ff fc51 	bl	801126c <tcp_create_segment>
 80119ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 80119cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	f000 810d 	beq.w	8011bee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80119d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <tcp_write+0x450>
      queue = seg;
 80119da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119dc:	647b      	str	r3, [r7, #68]	; 0x44
 80119de:	e00c      	b.n	80119fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80119e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d106      	bne.n	80119f4 <tcp_write+0x464>
 80119e6:	4b53      	ldr	r3, [pc, #332]	; (8011b34 <tcp_write+0x5a4>)
 80119e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80119ec:	4955      	ldr	r1, [pc, #340]	; (8011b44 <tcp_write+0x5b4>)
 80119ee:	4853      	ldr	r0, [pc, #332]	; (8011b3c <tcp_write+0x5ac>)
 80119f0:	f005 f8fa 	bl	8016be8 <iprintf>
      prev_seg->next = seg;
 80119f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80119fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119fc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80119fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a02:	8b3b      	ldrh	r3, [r7, #24]
 8011a04:	4413      	add	r3, r2
 8011a06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011a0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a0e:	88fb      	ldrh	r3, [r7, #6]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	f4ff af3d 	bcc.w	8011890 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011a16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d02c      	beq.n	8011a76 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a22:	e01e      	b.n	8011a62 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a26:	891a      	ldrh	r2, [r3, #8]
 8011a28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a2a:	4413      	add	r3, r2
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a30:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d110      	bne.n	8011a5c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a40:	8952      	ldrh	r2, [r2, #10]
 8011a42:	4413      	add	r3, r2
 8011a44:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011a46:	68b9      	ldr	r1, [r7, #8]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f005 fa8e 	bl	8016f6a <memcpy>
        p->len += oversize_used;
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	895a      	ldrh	r2, [r3, #10]
 8011a52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a54:	4413      	add	r3, r2
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1dd      	bne.n	8011a24 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a6a:	891a      	ldrh	r2, [r3, #8]
 8011a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a6e:	4413      	add	r3, r2
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a74:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011a76:	8a7a      	ldrh	r2, [r7, #18]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d018      	beq.n	8011ab6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d106      	bne.n	8011a98 <tcp_write+0x508>
 8011a8a:	4b2a      	ldr	r3, [pc, #168]	; (8011b34 <tcp_write+0x5a4>)
 8011a8c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011a90:	492d      	ldr	r1, [pc, #180]	; (8011b48 <tcp_write+0x5b8>)
 8011a92:	482a      	ldr	r0, [pc, #168]	; (8011b3c <tcp_write+0x5ac>)
 8011a94:	f005 f8a8 	bl	8016be8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fb f8be 	bl	800cc20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa6:	891a      	ldrh	r2, [r3, #8]
 8011aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aaa:	891b      	ldrh	r3, [r3, #8]
 8011aac:	4413      	add	r3, r2
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ab2:	811a      	strh	r2, [r3, #8]
 8011ab4:	e037      	b.n	8011b26 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011ab6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d034      	beq.n	8011b26 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d003      	beq.n	8011aca <tcp_write+0x53a>
 8011ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d106      	bne.n	8011ad8 <tcp_write+0x548>
 8011aca:	4b1a      	ldr	r3, [pc, #104]	; (8011b34 <tcp_write+0x5a4>)
 8011acc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011ad0:	491e      	ldr	r1, [pc, #120]	; (8011b4c <tcp_write+0x5bc>)
 8011ad2:	481a      	ldr	r0, [pc, #104]	; (8011b3c <tcp_write+0x5ac>)
 8011ad4:	f005 f888 	bl	8016be8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ade:	e009      	b.n	8011af4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae2:	891a      	ldrh	r2, [r3, #8]
 8011ae4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ae6:	4413      	add	r3, r2
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8011af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1f1      	bne.n	8011ae0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	891a      	ldrh	r2, [r3, #8]
 8011b00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b02:	4413      	add	r3, r2
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b08:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0c:	895a      	ldrh	r2, [r3, #10]
 8011b0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b10:	4413      	add	r3, r2
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b16:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b1a:	891a      	ldrh	r2, [r3, #8]
 8011b1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b1e:	4413      	add	r3, r2
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b24:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d111      	bne.n	8011b50 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b30:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b32:	e010      	b.n	8011b56 <tcp_write+0x5c6>
 8011b34:	0801a75c 	.word	0x0801a75c
 8011b38:	0801a9fc 	.word	0x0801a9fc
 8011b3c:	0801a7b0 	.word	0x0801a7b0
 8011b40:	0801aa3c 	.word	0x0801aa3c
 8011b44:	0801aa4c 	.word	0x0801aa4c
 8011b48:	0801aa60 	.word	0x0801aa60
 8011b4c:	0801aa98 	.word	0x0801aa98
  } else {
    last_unsent->next = queue;
 8011b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b54:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b5a:	88fb      	ldrh	r3, [r7, #6]
 8011b5c:	441a      	add	r2, r3
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011b68:	88fb      	ldrh	r3, [r7, #6]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011b7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00e      	beq.n	8011ba6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <tcp_write+0x616>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d106      	bne.n	8011ba6 <tcp_write+0x616>
 8011b98:	4b2c      	ldr	r3, [pc, #176]	; (8011c4c <tcp_write+0x6bc>)
 8011b9a:	f240 3212 	movw	r2, #786	; 0x312
 8011b9e:	492c      	ldr	r1, [pc, #176]	; (8011c50 <tcp_write+0x6c0>)
 8011ba0:	482c      	ldr	r0, [pc, #176]	; (8011c54 <tcp_write+0x6c4>)
 8011ba2:	f005 f821 	bl	8016be8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d016      	beq.n	8011bda <tcp_write+0x64a>
 8011bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d012      	beq.n	8011bda <tcp_write+0x64a>
 8011bb4:	797b      	ldrb	r3, [r7, #5]
 8011bb6:	f003 0302 	and.w	r3, r3, #2
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d10d      	bne.n	8011bda <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	899b      	ldrh	r3, [r3, #12]
 8011bc4:	b29c      	uxth	r4, r3
 8011bc6:	2008      	movs	r0, #8
 8011bc8:	f7f9 fb6a 	bl	800b2a0 <lwip_htons>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	4322      	orrs	r2, r4
 8011bd6:	b292      	uxth	r2, r2
 8011bd8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	e031      	b.n	8011c42 <tcp_write+0x6b2>
          goto memerr;
 8011bde:	bf00      	nop
 8011be0:	e006      	b.n	8011bf0 <tcp_write+0x660>
            goto memerr;
 8011be2:	bf00      	nop
 8011be4:	e004      	b.n	8011bf0 <tcp_write+0x660>
        goto memerr;
 8011be6:	bf00      	nop
 8011be8:	e002      	b.n	8011bf0 <tcp_write+0x660>
        goto memerr;
 8011bea:	bf00      	nop
 8011bec:	e000      	b.n	8011bf0 <tcp_write+0x660>
      goto memerr;
 8011bee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	8b5b      	ldrh	r3, [r3, #26]
 8011bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011c04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c06:	f7fa ff3d 	bl	800ca84 <pbuf_free>
  }
  if (queue != NULL) {
 8011c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011c10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c12:	f7fc fb6b 	bl	800e2ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00e      	beq.n	8011c3e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10a      	bne.n	8011c3e <tcp_write+0x6ae>
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d106      	bne.n	8011c3e <tcp_write+0x6ae>
 8011c30:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <tcp_write+0x6bc>)
 8011c32:	f240 3227 	movw	r2, #807	; 0x327
 8011c36:	4906      	ldr	r1, [pc, #24]	; (8011c50 <tcp_write+0x6c0>)
 8011c38:	4806      	ldr	r0, [pc, #24]	; (8011c54 <tcp_write+0x6c4>)
 8011c3a:	f004 ffd5 	bl	8016be8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	375c      	adds	r7, #92	; 0x5c
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd90      	pop	{r4, r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	0801a75c 	.word	0x0801a75c
 8011c50:	0801aad0 	.word	0x0801aad0
 8011c54:	0801a7b0 	.word	0x0801a7b0

08011c58 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011c58:	b590      	push	{r4, r7, lr}
 8011c5a:	b08b      	sub	sp, #44	; 0x2c
 8011c5c:	af02      	add	r7, sp, #8
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	460b      	mov	r3, r1
 8011c62:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	61fb      	str	r3, [r7, #28]
 8011c68:	2300      	movs	r3, #0
 8011c6a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d106      	bne.n	8011c84 <tcp_split_unsent_seg+0x2c>
 8011c76:	4b95      	ldr	r3, [pc, #596]	; (8011ecc <tcp_split_unsent_seg+0x274>)
 8011c78:	f240 324b 	movw	r2, #843	; 0x34b
 8011c7c:	4994      	ldr	r1, [pc, #592]	; (8011ed0 <tcp_split_unsent_seg+0x278>)
 8011c7e:	4895      	ldr	r0, [pc, #596]	; (8011ed4 <tcp_split_unsent_seg+0x27c>)
 8011c80:	f004 ffb2 	bl	8016be8 <iprintf>

  useg = pcb->unsent;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c88:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d102      	bne.n	8011c96 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011c90:	f04f 33ff 	mov.w	r3, #4294967295
 8011c94:	e116      	b.n	8011ec4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011c96:	887b      	ldrh	r3, [r7, #2]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d109      	bne.n	8011cb0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011c9c:	4b8b      	ldr	r3, [pc, #556]	; (8011ecc <tcp_split_unsent_seg+0x274>)
 8011c9e:	f240 3253 	movw	r2, #851	; 0x353
 8011ca2:	498d      	ldr	r1, [pc, #564]	; (8011ed8 <tcp_split_unsent_seg+0x280>)
 8011ca4:	488b      	ldr	r0, [pc, #556]	; (8011ed4 <tcp_split_unsent_seg+0x27c>)
 8011ca6:	f004 ff9f 	bl	8016be8 <iprintf>
    return ERR_VAL;
 8011caa:	f06f 0305 	mvn.w	r3, #5
 8011cae:	e109      	b.n	8011ec4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	887a      	ldrh	r2, [r7, #2]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d301      	bcc.n	8011cbe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	e102      	b.n	8011ec4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cc2:	887a      	ldrh	r2, [r7, #2]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d906      	bls.n	8011cd6 <tcp_split_unsent_seg+0x7e>
 8011cc8:	4b80      	ldr	r3, [pc, #512]	; (8011ecc <tcp_split_unsent_seg+0x274>)
 8011cca:	f240 325b 	movw	r2, #859	; 0x35b
 8011cce:	4983      	ldr	r1, [pc, #524]	; (8011edc <tcp_split_unsent_seg+0x284>)
 8011cd0:	4880      	ldr	r0, [pc, #512]	; (8011ed4 <tcp_split_unsent_seg+0x27c>)
 8011cd2:	f004 ff89 	bl	8016be8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	891b      	ldrh	r3, [r3, #8]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_split_unsent_seg+0x94>
 8011cde:	4b7b      	ldr	r3, [pc, #492]	; (8011ecc <tcp_split_unsent_seg+0x274>)
 8011ce0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011ce4:	497e      	ldr	r1, [pc, #504]	; (8011ee0 <tcp_split_unsent_seg+0x288>)
 8011ce6:	487b      	ldr	r0, [pc, #492]	; (8011ed4 <tcp_split_unsent_seg+0x27c>)
 8011ce8:	f004 ff7e 	bl	8016be8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	7a9b      	ldrb	r3, [r3, #10]
 8011cf0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	f003 0304 	and.w	r3, r3, #4
 8011cfc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	891a      	ldrh	r2, [r3, #8]
 8011d02:	887b      	ldrh	r3, [r7, #2]
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011d08:	7bbb      	ldrb	r3, [r7, #14]
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	89bb      	ldrh	r3, [r7, #12]
 8011d0e:	4413      	add	r3, r2
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d16:	4619      	mov	r1, r3
 8011d18:	2036      	movs	r0, #54	; 0x36
 8011d1a:	f7fa fbcf 	bl	800c4bc <pbuf_alloc>
 8011d1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f000 80b7 	beq.w	8011e96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	891a      	ldrh	r2, [r3, #8]
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	891b      	ldrh	r3, [r3, #8]
 8011d32:	1ad3      	subs	r3, r2, r3
 8011d34:	b29a      	uxth	r2, r3
 8011d36:	887b      	ldrh	r3, [r7, #2]
 8011d38:	4413      	add	r3, r2
 8011d3a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	6858      	ldr	r0, [r3, #4]
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	685a      	ldr	r2, [r3, #4]
 8011d44:	7bbb      	ldrb	r3, [r7, #14]
 8011d46:	18d1      	adds	r1, r2, r3
 8011d48:	897b      	ldrh	r3, [r7, #10]
 8011d4a:	89ba      	ldrh	r2, [r7, #12]
 8011d4c:	f7fb f8a0 	bl	800ce90 <pbuf_copy_partial>
 8011d50:	4603      	mov	r3, r0
 8011d52:	461a      	mov	r2, r3
 8011d54:	89bb      	ldrh	r3, [r7, #12]
 8011d56:	4293      	cmp	r3, r2
 8011d58:	f040 809f 	bne.w	8011e9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	899b      	ldrh	r3, [r3, #12]
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7f9 fa9b 	bl	800b2a0 <lwip_htons>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	b2db      	uxtb	r3, r3
 8011d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d72:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011d74:	2300      	movs	r3, #0
 8011d76:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011d78:	7efb      	ldrb	r3, [r7, #27]
 8011d7a:	f003 0308 	and.w	r3, r3, #8
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d007      	beq.n	8011d92 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011d82:	7efb      	ldrb	r3, [r7, #27]
 8011d84:	f023 0308 	bic.w	r3, r3, #8
 8011d88:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011d8a:	7ebb      	ldrb	r3, [r7, #26]
 8011d8c:	f043 0308 	orr.w	r3, r3, #8
 8011d90:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011d92:	7efb      	ldrb	r3, [r7, #27]
 8011d94:	f003 0301 	and.w	r3, r3, #1
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d007      	beq.n	8011dac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011d9c:	7efb      	ldrb	r3, [r7, #27]
 8011d9e:	f023 0301 	bic.w	r3, r3, #1
 8011da2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011da4:	7ebb      	ldrb	r3, [r7, #26]
 8011da6:	f043 0301 	orr.w	r3, r3, #1
 8011daa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7f9 fa89 	bl	800b2ca <lwip_htonl>
 8011db8:	4602      	mov	r2, r0
 8011dba:	887b      	ldrh	r3, [r7, #2]
 8011dbc:	18d1      	adds	r1, r2, r3
 8011dbe:	7eba      	ldrb	r2, [r7, #26]
 8011dc0:	7bfb      	ldrb	r3, [r7, #15]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	6939      	ldr	r1, [r7, #16]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff fa4f 	bl	801126c <tcp_create_segment>
 8011dce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d063      	beq.n	8011e9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7fa fee0 	bl	800cba0 <pbuf_clen>
 8011de0:	4603      	mov	r3, r0
 8011de2:	461a      	mov	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	6858      	ldr	r0, [r3, #4]
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	891a      	ldrh	r2, [r3, #8]
 8011dfe:	89bb      	ldrh	r3, [r7, #12]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	4619      	mov	r1, r3
 8011e06:	f7fa fcb7 	bl	800c778 <pbuf_realloc>
  useg->len -= remainder;
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	891a      	ldrh	r2, [r3, #8]
 8011e0e:	89bb      	ldrh	r3, [r7, #12]
 8011e10:	1ad3      	subs	r3, r2, r3
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29c      	uxth	r4, r3
 8011e20:	7efb      	ldrb	r3, [r7, #27]
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7f9 fa3b 	bl	800b2a0 <lwip_htons>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	4322      	orrs	r2, r4
 8011e34:	b292      	uxth	r2, r2
 8011e36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7fa feaf 	bl	800cba0 <pbuf_clen>
 8011e42:	4603      	mov	r3, r0
 8011e44:	461a      	mov	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e4c:	4413      	add	r3, r2
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fa fea0 	bl	800cba0 <pbuf_clen>
 8011e60:	4603      	mov	r3, r0
 8011e62:	461a      	mov	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e6a:	4413      	add	r3, r2
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	69fa      	ldr	r2, [r7, #28]
 8011e80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d103      	bne.n	8011e92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011e92:	2300      	movs	r3, #0
 8011e94:	e016      	b.n	8011ec4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011e96:	bf00      	nop
 8011e98:	e002      	b.n	8011ea0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e9a:	bf00      	nop
 8011e9c:	e000      	b.n	8011ea0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d006      	beq.n	8011eb4 <tcp_split_unsent_seg+0x25c>
 8011ea6:	4b09      	ldr	r3, [pc, #36]	; (8011ecc <tcp_split_unsent_seg+0x274>)
 8011ea8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011eac:	490d      	ldr	r1, [pc, #52]	; (8011ee4 <tcp_split_unsent_seg+0x28c>)
 8011eae:	4809      	ldr	r0, [pc, #36]	; (8011ed4 <tcp_split_unsent_seg+0x27c>)
 8011eb0:	f004 fe9a 	bl	8016be8 <iprintf>
  if (p != NULL) {
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011eba:	6938      	ldr	r0, [r7, #16]
 8011ebc:	f7fa fde2 	bl	800ca84 <pbuf_free>
  }

  return ERR_MEM;
 8011ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3724      	adds	r7, #36	; 0x24
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd90      	pop	{r4, r7, pc}
 8011ecc:	0801a75c 	.word	0x0801a75c
 8011ed0:	0801aaf0 	.word	0x0801aaf0
 8011ed4:	0801a7b0 	.word	0x0801a7b0
 8011ed8:	0801ab14 	.word	0x0801ab14
 8011edc:	0801ab38 	.word	0x0801ab38
 8011ee0:	0801ab48 	.word	0x0801ab48
 8011ee4:	0801ab58 	.word	0x0801ab58

08011ee8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011ee8:	b590      	push	{r4, r7, lr}
 8011eea:	b085      	sub	sp, #20
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <tcp_send_fin+0x1c>
 8011ef6:	4b21      	ldr	r3, [pc, #132]	; (8011f7c <tcp_send_fin+0x94>)
 8011ef8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011efc:	4920      	ldr	r1, [pc, #128]	; (8011f80 <tcp_send_fin+0x98>)
 8011efe:	4821      	ldr	r0, [pc, #132]	; (8011f84 <tcp_send_fin+0x9c>)
 8011f00:	f004 fe72 	bl	8016be8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d02e      	beq.n	8011f6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f10:	60fb      	str	r3, [r7, #12]
 8011f12:	e002      	b.n	8011f1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1f8      	bne.n	8011f14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	899b      	ldrh	r3, [r3, #12]
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f9 f9b8 	bl	800b2a0 <lwip_htons>
 8011f30:	4603      	mov	r3, r0
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 0307 	and.w	r3, r3, #7
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d116      	bne.n	8011f6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	899b      	ldrh	r3, [r3, #12]
 8011f42:	b29c      	uxth	r4, r3
 8011f44:	2001      	movs	r0, #1
 8011f46:	f7f9 f9ab 	bl	800b2a0 <lwip_htons>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	4322      	orrs	r2, r4
 8011f54:	b292      	uxth	r2, r2
 8011f56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	8b5b      	ldrh	r3, [r3, #26]
 8011f5c:	f043 0320 	orr.w	r3, r3, #32
 8011f60:	b29a      	uxth	r2, r3
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e004      	b.n	8011f74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 f80b 	bl	8011f88 <tcp_enqueue_flags>
 8011f72:	4603      	mov	r3, r0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd90      	pop	{r4, r7, pc}
 8011f7c:	0801a75c 	.word	0x0801a75c
 8011f80:	0801ab64 	.word	0x0801ab64
 8011f84:	0801a7b0 	.word	0x0801a7b0

08011f88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b08a      	sub	sp, #40	; 0x28
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011f94:	2300      	movs	r3, #0
 8011f96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011f9c:	78fb      	ldrb	r3, [r7, #3]
 8011f9e:	f003 0303 	and.w	r3, r3, #3
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <tcp_enqueue_flags+0x2c>
 8011fa6:	4b67      	ldr	r3, [pc, #412]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 8011fa8:	f240 4211 	movw	r2, #1041	; 0x411
 8011fac:	4966      	ldr	r1, [pc, #408]	; (8012148 <tcp_enqueue_flags+0x1c0>)
 8011fae:	4867      	ldr	r0, [pc, #412]	; (801214c <tcp_enqueue_flags+0x1c4>)
 8011fb0:	f004 fe1a 	bl	8016be8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <tcp_enqueue_flags+0x40>
 8011fba:	4b62      	ldr	r3, [pc, #392]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 8011fbc:	f240 4213 	movw	r2, #1043	; 0x413
 8011fc0:	4963      	ldr	r1, [pc, #396]	; (8012150 <tcp_enqueue_flags+0x1c8>)
 8011fc2:	4862      	ldr	r0, [pc, #392]	; (801214c <tcp_enqueue_flags+0x1c4>)
 8011fc4:	f004 fe10 	bl	8016be8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	f003 0302 	and.w	r3, r3, #2
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011fd6:	7ffb      	ldrb	r3, [r7, #31]
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	b2db      	uxtb	r3, r3
 8011fdc:	f003 0304 	and.w	r3, r3, #4
 8011fe0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011fe2:	7dfb      	ldrb	r3, [r7, #23]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fea:	4619      	mov	r1, r3
 8011fec:	2036      	movs	r0, #54	; 0x36
 8011fee:	f7fa fa65 	bl	800c4bc <pbuf_alloc>
 8011ff2:	6138      	str	r0, [r7, #16]
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d109      	bne.n	801200e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	8b5b      	ldrh	r3, [r3, #26]
 8011ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012002:	b29a      	uxth	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012008:	f04f 33ff 	mov.w	r3, #4294967295
 801200c:	e095      	b.n	801213a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	895a      	ldrh	r2, [r3, #10]
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	b29b      	uxth	r3, r3
 8012016:	429a      	cmp	r2, r3
 8012018:	d206      	bcs.n	8012028 <tcp_enqueue_flags+0xa0>
 801201a:	4b4a      	ldr	r3, [pc, #296]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 801201c:	f240 4239 	movw	r2, #1081	; 0x439
 8012020:	494c      	ldr	r1, [pc, #304]	; (8012154 <tcp_enqueue_flags+0x1cc>)
 8012022:	484a      	ldr	r0, [pc, #296]	; (801214c <tcp_enqueue_flags+0x1c4>)
 8012024:	f004 fde0 	bl	8016be8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801202c:	78fa      	ldrb	r2, [r7, #3]
 801202e:	7ffb      	ldrb	r3, [r7, #31]
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	460b      	mov	r3, r1
 8012034:	6939      	ldr	r1, [r7, #16]
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ff f918 	bl	801126c <tcp_create_segment>
 801203c:	60f8      	str	r0, [r7, #12]
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d109      	bne.n	8012058 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8b5b      	ldrh	r3, [r3, #26]
 8012048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801204c:	b29a      	uxth	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	e070      	b.n	801213a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	f003 0303 	and.w	r3, r3, #3
 8012060:	2b00      	cmp	r3, #0
 8012062:	d006      	beq.n	8012072 <tcp_enqueue_flags+0xea>
 8012064:	4b37      	ldr	r3, [pc, #220]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 8012066:	f240 4242 	movw	r2, #1090	; 0x442
 801206a:	493b      	ldr	r1, [pc, #236]	; (8012158 <tcp_enqueue_flags+0x1d0>)
 801206c:	4837      	ldr	r0, [pc, #220]	; (801214c <tcp_enqueue_flags+0x1c4>)
 801206e:	f004 fdbb 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	891b      	ldrh	r3, [r3, #8]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d006      	beq.n	8012088 <tcp_enqueue_flags+0x100>
 801207a:	4b32      	ldr	r3, [pc, #200]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 801207c:	f240 4243 	movw	r2, #1091	; 0x443
 8012080:	4936      	ldr	r1, [pc, #216]	; (801215c <tcp_enqueue_flags+0x1d4>)
 8012082:	4832      	ldr	r0, [pc, #200]	; (801214c <tcp_enqueue_flags+0x1c4>)
 8012084:	f004 fdb0 	bl	8016be8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801208c:	2b00      	cmp	r3, #0
 801208e:	d103      	bne.n	8012098 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	66da      	str	r2, [r3, #108]	; 0x6c
 8012096:	e00d      	b.n	80120b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801209c:	61bb      	str	r3, [r7, #24]
 801209e:	e002      	b.n	80120a6 <tcp_enqueue_flags+0x11e>
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	61bb      	str	r3, [r7, #24]
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1f8      	bne.n	80120a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80120bc:	78fb      	ldrb	r3, [r7, #3]
 80120be:	f003 0302 	and.w	r3, r3, #2
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d104      	bne.n	80120d0 <tcp_enqueue_flags+0x148>
 80120c6:	78fb      	ldrb	r3, [r7, #3]
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d004      	beq.n	80120da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80120da:	78fb      	ldrb	r3, [r7, #3]
 80120dc:	f003 0301 	and.w	r3, r3, #1
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d006      	beq.n	80120f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	8b5b      	ldrh	r3, [r3, #26]
 80120e8:	f043 0320 	orr.w	r3, r3, #32
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fa fd52 	bl	800cba0 <pbuf_clen>
 80120fc:	4603      	mov	r3, r0
 80120fe:	461a      	mov	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012106:	4413      	add	r3, r2
 8012108:	b29a      	uxth	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00e      	beq.n	8012138 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801211e:	2b00      	cmp	r3, #0
 8012120:	d10a      	bne.n	8012138 <tcp_enqueue_flags+0x1b0>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <tcp_enqueue_flags+0x1b0>
 801212a:	4b06      	ldr	r3, [pc, #24]	; (8012144 <tcp_enqueue_flags+0x1bc>)
 801212c:	f240 4265 	movw	r2, #1125	; 0x465
 8012130:	490b      	ldr	r1, [pc, #44]	; (8012160 <tcp_enqueue_flags+0x1d8>)
 8012132:	4806      	ldr	r0, [pc, #24]	; (801214c <tcp_enqueue_flags+0x1c4>)
 8012134:	f004 fd58 	bl	8016be8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	3720      	adds	r7, #32
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	0801a75c 	.word	0x0801a75c
 8012148:	0801ab80 	.word	0x0801ab80
 801214c:	0801a7b0 	.word	0x0801a7b0
 8012150:	0801abd8 	.word	0x0801abd8
 8012154:	0801abf8 	.word	0x0801abf8
 8012158:	0801ac34 	.word	0x0801ac34
 801215c:	0801ac4c 	.word	0x0801ac4c
 8012160:	0801ac78 	.word	0x0801ac78

08012164 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012164:	b5b0      	push	{r4, r5, r7, lr}
 8012166:	b08a      	sub	sp, #40	; 0x28
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d106      	bne.n	8012180 <tcp_output+0x1c>
 8012172:	4b8a      	ldr	r3, [pc, #552]	; (801239c <tcp_output+0x238>)
 8012174:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012178:	4989      	ldr	r1, [pc, #548]	; (80123a0 <tcp_output+0x23c>)
 801217a:	488a      	ldr	r0, [pc, #552]	; (80123a4 <tcp_output+0x240>)
 801217c:	f004 fd34 	bl	8016be8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	7d1b      	ldrb	r3, [r3, #20]
 8012184:	2b01      	cmp	r3, #1
 8012186:	d106      	bne.n	8012196 <tcp_output+0x32>
 8012188:	4b84      	ldr	r3, [pc, #528]	; (801239c <tcp_output+0x238>)
 801218a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801218e:	4986      	ldr	r1, [pc, #536]	; (80123a8 <tcp_output+0x244>)
 8012190:	4884      	ldr	r0, [pc, #528]	; (80123a4 <tcp_output+0x240>)
 8012192:	f004 fd29 	bl	8016be8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012196:	4b85      	ldr	r3, [pc, #532]	; (80123ac <tcp_output+0x248>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	429a      	cmp	r2, r3
 801219e:	d101      	bne.n	80121a4 <tcp_output+0x40>
    return ERR_OK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	e1ce      	b.n	8012542 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121b0:	4293      	cmp	r3, r2
 80121b2:	bf28      	it	cs
 80121b4:	4613      	movcs	r3, r2
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d10b      	bne.n	80121de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f003 0302 	and.w	r3, r3, #2
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f000 81aa 	beq.w	8012528 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 fdcb 	bl	8012d70 <tcp_send_empty_ack>
 80121da:	4603      	mov	r3, r0
 80121dc:	e1b1      	b.n	8012542 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80121de:	6879      	ldr	r1, [r7, #4]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3304      	adds	r3, #4
 80121e4:	461a      	mov	r2, r3
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f7ff f824 	bl	8011234 <tcp_route>
 80121ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d102      	bne.n	80121fa <tcp_output+0x96>
    return ERR_RTE;
 80121f4:	f06f 0303 	mvn.w	r3, #3
 80121f8:	e1a3      	b.n	8012542 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d003      	beq.n	8012208 <tcp_output+0xa4>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d111      	bne.n	801222c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d002      	beq.n	8012214 <tcp_output+0xb0>
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	3304      	adds	r3, #4
 8012212:	e000      	b.n	8012216 <tcp_output+0xb2>
 8012214:	2300      	movs	r3, #0
 8012216:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d102      	bne.n	8012224 <tcp_output+0xc0>
      return ERR_RTE;
 801221e:	f06f 0303 	mvn.w	r3, #3
 8012222:	e18e      	b.n	8012542 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	4618      	mov	r0, r3
 8012234:	f7f9 f849 	bl	800b2ca <lwip_htonl>
 8012238:	4602      	mov	r2, r0
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012242:	8912      	ldrh	r2, [r2, #8]
 8012244:	4413      	add	r3, r2
 8012246:	69ba      	ldr	r2, [r7, #24]
 8012248:	429a      	cmp	r2, r3
 801224a:	d227      	bcs.n	801229c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012252:	461a      	mov	r2, r3
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	4293      	cmp	r3, r2
 8012258:	d114      	bne.n	8012284 <tcp_output+0x120>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801225e:	2b00      	cmp	r3, #0
 8012260:	d110      	bne.n	8012284 <tcp_output+0x120>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012268:	2b00      	cmp	r3, #0
 801226a:	d10b      	bne.n	8012284 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2201      	movs	r2, #1
 8012278:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2200      	movs	r2, #0
 8012280:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	8b5b      	ldrh	r3, [r3, #26]
 8012288:	f003 0302 	and.w	r3, r3, #2
 801228c:	2b00      	cmp	r3, #0
 801228e:	f000 814d 	beq.w	801252c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 fd6c 	bl	8012d70 <tcp_send_empty_ack>
 8012298:	4603      	mov	r3, r0
 801229a:	e152      	b.n	8012542 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	f000 811c 	beq.w	80124ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80122b2:	e002      	b.n	80122ba <tcp_output+0x156>
 80122b4:	6a3b      	ldr	r3, [r7, #32]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	623b      	str	r3, [r7, #32]
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1f8      	bne.n	80122b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80122c2:	e112      	b.n	80124ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	899b      	ldrh	r3, [r3, #12]
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7f8 ffe7 	bl	800b2a0 <lwip_htons>
 80122d2:	4603      	mov	r3, r0
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	f003 0304 	and.w	r3, r3, #4
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d006      	beq.n	80122ec <tcp_output+0x188>
 80122de:	4b2f      	ldr	r3, [pc, #188]	; (801239c <tcp_output+0x238>)
 80122e0:	f240 5236 	movw	r2, #1334	; 0x536
 80122e4:	4932      	ldr	r1, [pc, #200]	; (80123b0 <tcp_output+0x24c>)
 80122e6:	482f      	ldr	r0, [pc, #188]	; (80123a4 <tcp_output+0x240>)
 80122e8:	f004 fc7e 	bl	8016be8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d01f      	beq.n	8012334 <tcp_output+0x1d0>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	8b5b      	ldrh	r3, [r3, #26]
 80122f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d119      	bne.n	8012334 <tcp_output+0x1d0>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012304:	2b00      	cmp	r3, #0
 8012306:	d00b      	beq.n	8012320 <tcp_output+0x1bc>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d110      	bne.n	8012334 <tcp_output+0x1d0>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012316:	891a      	ldrh	r2, [r3, #8]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801231c:	429a      	cmp	r2, r3
 801231e:	d209      	bcs.n	8012334 <tcp_output+0x1d0>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012326:	2b00      	cmp	r3, #0
 8012328:	d004      	beq.n	8012334 <tcp_output+0x1d0>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012330:	2b08      	cmp	r3, #8
 8012332:	d901      	bls.n	8012338 <tcp_output+0x1d4>
 8012334:	2301      	movs	r3, #1
 8012336:	e000      	b.n	801233a <tcp_output+0x1d6>
 8012338:	2300      	movs	r3, #0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8b5b      	ldrh	r3, [r3, #26]
 8012342:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012346:	2b00      	cmp	r3, #0
 8012348:	f000 80e4 	beq.w	8012514 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	7d1b      	ldrb	r3, [r3, #20]
 8012350:	2b02      	cmp	r3, #2
 8012352:	d00d      	beq.n	8012370 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	899b      	ldrh	r3, [r3, #12]
 801235a:	b29c      	uxth	r4, r3
 801235c:	2010      	movs	r0, #16
 801235e:	f7f8 ff9f 	bl	800b2a0 <lwip_htons>
 8012362:	4603      	mov	r3, r0
 8012364:	461a      	mov	r2, r3
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	4322      	orrs	r2, r4
 801236c:	b292      	uxth	r2, r2
 801236e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012370:	697a      	ldr	r2, [r7, #20]
 8012372:	6879      	ldr	r1, [r7, #4]
 8012374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012376:	f000 f909 	bl	801258c <tcp_output_segment>
 801237a:	4603      	mov	r3, r0
 801237c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d016      	beq.n	80123b4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	8b5b      	ldrh	r3, [r3, #26]
 801238a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801238e:	b29a      	uxth	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	835a      	strh	r2, [r3, #26]
      return err;
 8012394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012398:	e0d3      	b.n	8012542 <tcp_output+0x3de>
 801239a:	bf00      	nop
 801239c:	0801a75c 	.word	0x0801a75c
 80123a0:	0801aca0 	.word	0x0801aca0
 80123a4:	0801a7b0 	.word	0x0801a7b0
 80123a8:	0801acb8 	.word	0x0801acb8
 80123ac:	2000d158 	.word	0x2000d158
 80123b0:	0801ace0 	.word	0x0801ace0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80123b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	7d1b      	ldrb	r3, [r3, #20]
 80123c0:	2b02      	cmp	r3, #2
 80123c2:	d006      	beq.n	80123d2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	8b5b      	ldrh	r3, [r3, #26]
 80123c8:	f023 0303 	bic.w	r3, r3, #3
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f8 ff76 	bl	800b2ca <lwip_htonl>
 80123de:	4604      	mov	r4, r0
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e2:	891b      	ldrh	r3, [r3, #8]
 80123e4:	461d      	mov	r5, r3
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	899b      	ldrh	r3, [r3, #12]
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7f8 ff56 	bl	800b2a0 <lwip_htons>
 80123f4:	4603      	mov	r3, r0
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	f003 0303 	and.w	r3, r3, #3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <tcp_output+0x2a0>
 8012400:	2301      	movs	r3, #1
 8012402:	e000      	b.n	8012406 <tcp_output+0x2a2>
 8012404:	2300      	movs	r3, #0
 8012406:	442b      	add	r3, r5
 8012408:	4423      	add	r3, r4
 801240a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	2b00      	cmp	r3, #0
 8012416:	da02      	bge.n	801241e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	891b      	ldrh	r3, [r3, #8]
 8012422:	461c      	mov	r4, r3
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	899b      	ldrh	r3, [r3, #12]
 801242a:	b29b      	uxth	r3, r3
 801242c:	4618      	mov	r0, r3
 801242e:	f7f8 ff37 	bl	800b2a0 <lwip_htons>
 8012432:	4603      	mov	r3, r0
 8012434:	b2db      	uxtb	r3, r3
 8012436:	f003 0303 	and.w	r3, r3, #3
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <tcp_output+0x2de>
 801243e:	2301      	movs	r3, #1
 8012440:	e000      	b.n	8012444 <tcp_output+0x2e0>
 8012442:	2300      	movs	r3, #0
 8012444:	4423      	add	r3, r4
 8012446:	2b00      	cmp	r3, #0
 8012448:	d049      	beq.n	80124de <tcp_output+0x37a>
      seg->next = NULL;
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	2200      	movs	r2, #0
 801244e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012454:	2b00      	cmp	r3, #0
 8012456:	d105      	bne.n	8012464 <tcp_output+0x300>
        pcb->unacked = seg;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801245c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	623b      	str	r3, [r7, #32]
 8012462:	e03f      	b.n	80124e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	4618      	mov	r0, r3
 801246c:	f7f8 ff2d 	bl	800b2ca <lwip_htonl>
 8012470:	4604      	mov	r4, r0
 8012472:	6a3b      	ldr	r3, [r7, #32]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	f7f8 ff26 	bl	800b2ca <lwip_htonl>
 801247e:	4603      	mov	r3, r0
 8012480:	1ae3      	subs	r3, r4, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	da24      	bge.n	80124d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	3370      	adds	r3, #112	; 0x70
 801248a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801248c:	e002      	b.n	8012494 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d011      	beq.n	80124c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7f8 ff10 	bl	800b2ca <lwip_htonl>
 80124aa:	4604      	mov	r4, r0
 80124ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7f8 ff09 	bl	800b2ca <lwip_htonl>
 80124b8:	4603      	mov	r3, r0
 80124ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80124bc:	2b00      	cmp	r3, #0
 80124be:	dbe6      	blt.n	801248e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	e009      	b.n	80124e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80124d0:	6a3b      	ldr	r3, [r7, #32]
 80124d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80124d6:	6a3b      	ldr	r3, [r7, #32]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	623b      	str	r3, [r7, #32]
 80124dc:	e002      	b.n	80124e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80124de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124e0:	f7fb ff19 	bl	800e316 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d012      	beq.n	8012516 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7f8 fee7 	bl	800b2ca <lwip_htonl>
 80124fc:	4602      	mov	r2, r0
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012506:	8912      	ldrh	r2, [r2, #8]
 8012508:	4413      	add	r3, r2
  while (seg != NULL &&
 801250a:	69ba      	ldr	r2, [r7, #24]
 801250c:	429a      	cmp	r2, r3
 801250e:	f4bf aed9 	bcs.w	80122c4 <tcp_output+0x160>
 8012512:	e000      	b.n	8012516 <tcp_output+0x3b2>
      break;
 8012514:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801251a:	2b00      	cmp	r3, #0
 801251c:	d108      	bne.n	8012530 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012526:	e004      	b.n	8012532 <tcp_output+0x3ce>
    goto output_done;
 8012528:	bf00      	nop
 801252a:	e002      	b.n	8012532 <tcp_output+0x3ce>
    goto output_done;
 801252c:	bf00      	nop
 801252e:	e000      	b.n	8012532 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012530:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	8b5b      	ldrh	r3, [r3, #26]
 8012536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801253a:	b29a      	uxth	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012540:	2300      	movs	r3, #0
}
 8012542:	4618      	mov	r0, r3
 8012544:	3728      	adds	r7, #40	; 0x28
 8012546:	46bd      	mov	sp, r7
 8012548:	bdb0      	pop	{r4, r5, r7, pc}
 801254a:	bf00      	nop

0801254c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d106      	bne.n	8012568 <tcp_output_segment_busy+0x1c>
 801255a:	4b09      	ldr	r3, [pc, #36]	; (8012580 <tcp_output_segment_busy+0x34>)
 801255c:	f240 529a 	movw	r2, #1434	; 0x59a
 8012560:	4908      	ldr	r1, [pc, #32]	; (8012584 <tcp_output_segment_busy+0x38>)
 8012562:	4809      	ldr	r0, [pc, #36]	; (8012588 <tcp_output_segment_busy+0x3c>)
 8012564:	f004 fb40 	bl	8016be8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	7b9b      	ldrb	r3, [r3, #14]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d001      	beq.n	8012576 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012572:	2301      	movs	r3, #1
 8012574:	e000      	b.n	8012578 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	0801a75c 	.word	0x0801a75c
 8012584:	0801acf8 	.word	0x0801acf8
 8012588:	0801a7b0 	.word	0x0801a7b0

0801258c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801258c:	b5b0      	push	{r4, r5, r7, lr}
 801258e:	b08c      	sub	sp, #48	; 0x30
 8012590:	af04      	add	r7, sp, #16
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	60b9      	str	r1, [r7, #8]
 8012596:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d106      	bne.n	80125ac <tcp_output_segment+0x20>
 801259e:	4b64      	ldr	r3, [pc, #400]	; (8012730 <tcp_output_segment+0x1a4>)
 80125a0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80125a4:	4963      	ldr	r1, [pc, #396]	; (8012734 <tcp_output_segment+0x1a8>)
 80125a6:	4864      	ldr	r0, [pc, #400]	; (8012738 <tcp_output_segment+0x1ac>)
 80125a8:	f004 fb1e 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d106      	bne.n	80125c0 <tcp_output_segment+0x34>
 80125b2:	4b5f      	ldr	r3, [pc, #380]	; (8012730 <tcp_output_segment+0x1a4>)
 80125b4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80125b8:	4960      	ldr	r1, [pc, #384]	; (801273c <tcp_output_segment+0x1b0>)
 80125ba:	485f      	ldr	r0, [pc, #380]	; (8012738 <tcp_output_segment+0x1ac>)
 80125bc:	f004 fb14 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d106      	bne.n	80125d4 <tcp_output_segment+0x48>
 80125c6:	4b5a      	ldr	r3, [pc, #360]	; (8012730 <tcp_output_segment+0x1a4>)
 80125c8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80125cc:	495c      	ldr	r1, [pc, #368]	; (8012740 <tcp_output_segment+0x1b4>)
 80125ce:	485a      	ldr	r0, [pc, #360]	; (8012738 <tcp_output_segment+0x1ac>)
 80125d0:	f004 fb0a 	bl	8016be8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7ff ffb9 	bl	801254c <tcp_output_segment_busy>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d001      	beq.n	80125e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80125e0:	2300      	movs	r3, #0
 80125e2:	e0a1      	b.n	8012728 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68dc      	ldr	r4, [r3, #12]
 80125ec:	4610      	mov	r0, r2
 80125ee:	f7f8 fe6c 	bl	800b2ca <lwip_htonl>
 80125f2:	4603      	mov	r3, r0
 80125f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	68dc      	ldr	r4, [r3, #12]
 80125fe:	4610      	mov	r0, r2
 8012600:	f7f8 fe4e 	bl	800b2a0 <lwip_htons>
 8012604:	4603      	mov	r3, r0
 8012606:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012610:	441a      	add	r2, r3
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	3314      	adds	r3, #20
 801261c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	7a9b      	ldrb	r3, [r3, #10]
 8012622:	f003 0301 	and.w	r3, r3, #1
 8012626:	2b00      	cmp	r3, #0
 8012628:	d015      	beq.n	8012656 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	3304      	adds	r3, #4
 801262e:	461a      	mov	r2, r3
 8012630:	6879      	ldr	r1, [r7, #4]
 8012632:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012636:	f7fc fa33 	bl	800eaa0 <tcp_eff_send_mss_netif>
 801263a:	4603      	mov	r3, r0
 801263c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801263e:	8b7b      	ldrh	r3, [r7, #26]
 8012640:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012644:	4618      	mov	r0, r3
 8012646:	f7f8 fe40 	bl	800b2ca <lwip_htonl>
 801264a:	4602      	mov	r2, r0
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	3304      	adds	r3, #4
 8012654:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801265c:	2b00      	cmp	r3, #0
 801265e:	da02      	bge.n	8012666 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	2200      	movs	r2, #0
 8012664:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801266a:	2b00      	cmp	r3, #0
 801266c:	d10c      	bne.n	8012688 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801266e:	4b35      	ldr	r3, [pc, #212]	; (8012744 <tcp_output_segment+0x1b8>)
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	4618      	mov	r0, r3
 801267e:	f7f8 fe24 	bl	800b2ca <lwip_htonl>
 8012682:	4602      	mov	r2, r0
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	68da      	ldr	r2, [r3, #12]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	8959      	ldrh	r1, [r3, #10]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	8b3a      	ldrh	r2, [r7, #24]
 80126a2:	1a8a      	subs	r2, r1, r2
 80126a4:	b292      	uxth	r2, r2
 80126a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	8919      	ldrh	r1, [r3, #8]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	8b3a      	ldrh	r2, [r7, #24]
 80126b4:	1a8a      	subs	r2, r1, r2
 80126b6:	b292      	uxth	r2, r2
 80126b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	68d2      	ldr	r2, [r2, #12]
 80126c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	2200      	movs	r2, #0
 80126ca:	741a      	strb	r2, [r3, #16]
 80126cc:	2200      	movs	r2, #0
 80126ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	68da      	ldr	r2, [r3, #12]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	7a9b      	ldrb	r3, [r3, #10]
 80126d8:	f003 0301 	and.w	r3, r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <tcp_output_segment+0x158>
 80126e0:	2318      	movs	r3, #24
 80126e2:	e000      	b.n	80126e6 <tcp_output_segment+0x15a>
 80126e4:	2314      	movs	r3, #20
 80126e6:	4413      	add	r3, r2
 80126e8:	69fa      	ldr	r2, [r7, #28]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d006      	beq.n	80126fc <tcp_output_segment+0x170>
 80126ee:	4b10      	ldr	r3, [pc, #64]	; (8012730 <tcp_output_segment+0x1a4>)
 80126f0:	f240 621c 	movw	r2, #1564	; 0x61c
 80126f4:	4914      	ldr	r1, [pc, #80]	; (8012748 <tcp_output_segment+0x1bc>)
 80126f6:	4810      	ldr	r0, [pc, #64]	; (8012738 <tcp_output_segment+0x1ac>)
 80126f8:	f004 fa76 	bl	8016be8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	6858      	ldr	r0, [r3, #4]
 8012700:	68b9      	ldr	r1, [r7, #8]
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	1d1c      	adds	r4, r3, #4
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	7add      	ldrb	r5, [r3, #11]
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	7a9b      	ldrb	r3, [r3, #10]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	9202      	str	r2, [sp, #8]
 8012712:	2206      	movs	r2, #6
 8012714:	9201      	str	r2, [sp, #4]
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	462b      	mov	r3, r5
 801271a:	4622      	mov	r2, r4
 801271c:	f002 fe2a 	bl	8015374 <ip4_output_if>
 8012720:	4603      	mov	r3, r0
 8012722:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3720      	adds	r7, #32
 801272c:	46bd      	mov	sp, r7
 801272e:	bdb0      	pop	{r4, r5, r7, pc}
 8012730:	0801a75c 	.word	0x0801a75c
 8012734:	0801ad20 	.word	0x0801ad20
 8012738:	0801a7b0 	.word	0x0801a7b0
 801273c:	0801ad40 	.word	0x0801ad40
 8012740:	0801ad60 	.word	0x0801ad60
 8012744:	2000d10c 	.word	0x2000d10c
 8012748:	0801ad84 	.word	0x0801ad84

0801274c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801274c:	b5b0      	push	{r4, r5, r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d106      	bne.n	8012768 <tcp_rexmit_rto_prepare+0x1c>
 801275a:	4b31      	ldr	r3, [pc, #196]	; (8012820 <tcp_rexmit_rto_prepare+0xd4>)
 801275c:	f240 6263 	movw	r2, #1635	; 0x663
 8012760:	4930      	ldr	r1, [pc, #192]	; (8012824 <tcp_rexmit_rto_prepare+0xd8>)
 8012762:	4831      	ldr	r0, [pc, #196]	; (8012828 <tcp_rexmit_rto_prepare+0xdc>)
 8012764:	f004 fa40 	bl	8016be8 <iprintf>

  if (pcb->unacked == NULL) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801276c:	2b00      	cmp	r3, #0
 801276e:	d102      	bne.n	8012776 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012770:	f06f 0305 	mvn.w	r3, #5
 8012774:	e050      	b.n	8012818 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	e00b      	b.n	8012796 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801277e:	68f8      	ldr	r0, [r7, #12]
 8012780:	f7ff fee4 	bl	801254c <tcp_output_segment_busy>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801278a:	f06f 0305 	mvn.w	r3, #5
 801278e:	e043      	b.n	8012818 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60fb      	str	r3, [r7, #12]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d1ef      	bne.n	801277e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f7ff fed4 	bl	801254c <tcp_output_segment_busy>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d002      	beq.n	80127b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80127aa:	f06f 0305 	mvn.w	r3, #5
 80127ae:	e033      	b.n	8012818 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2200      	movs	r2, #0
 80127c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	8b5b      	ldrh	r3, [r3, #26]
 80127ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f8 fd75 	bl	800b2ca <lwip_htonl>
 80127e0:	4604      	mov	r4, r0
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	891b      	ldrh	r3, [r3, #8]
 80127e6:	461d      	mov	r5, r3
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f8 fd55 	bl	800b2a0 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	f003 0303 	and.w	r3, r3, #3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d001      	beq.n	8012806 <tcp_rexmit_rto_prepare+0xba>
 8012802:	2301      	movs	r3, #1
 8012804:	e000      	b.n	8012808 <tcp_rexmit_rto_prepare+0xbc>
 8012806:	2300      	movs	r3, #0
 8012808:	442b      	add	r3, r5
 801280a:	18e2      	adds	r2, r4, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2200      	movs	r2, #0
 8012814:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012816:	2300      	movs	r3, #0
}
 8012818:	4618      	mov	r0, r3
 801281a:	3710      	adds	r7, #16
 801281c:	46bd      	mov	sp, r7
 801281e:	bdb0      	pop	{r4, r5, r7, pc}
 8012820:	0801a75c 	.word	0x0801a75c
 8012824:	0801ad98 	.word	0x0801ad98
 8012828:	0801a7b0 	.word	0x0801a7b0

0801282c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d106      	bne.n	8012848 <tcp_rexmit_rto_commit+0x1c>
 801283a:	4b0d      	ldr	r3, [pc, #52]	; (8012870 <tcp_rexmit_rto_commit+0x44>)
 801283c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012840:	490c      	ldr	r1, [pc, #48]	; (8012874 <tcp_rexmit_rto_commit+0x48>)
 8012842:	480d      	ldr	r0, [pc, #52]	; (8012878 <tcp_rexmit_rto_commit+0x4c>)
 8012844:	f004 f9d0 	bl	8016be8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801284e:	2bff      	cmp	r3, #255	; 0xff
 8012850:	d007      	beq.n	8012862 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012858:	3301      	adds	r3, #1
 801285a:	b2da      	uxtb	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff fc7e 	bl	8012164 <tcp_output>
}
 8012868:	bf00      	nop
 801286a:	3708      	adds	r7, #8
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	0801a75c 	.word	0x0801a75c
 8012874:	0801adbc 	.word	0x0801adbc
 8012878:	0801a7b0 	.word	0x0801a7b0

0801287c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <tcp_rexmit_rto+0x1c>
 801288a:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <tcp_rexmit_rto+0x38>)
 801288c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012890:	4909      	ldr	r1, [pc, #36]	; (80128b8 <tcp_rexmit_rto+0x3c>)
 8012892:	480a      	ldr	r0, [pc, #40]	; (80128bc <tcp_rexmit_rto+0x40>)
 8012894:	f004 f9a8 	bl	8016be8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f7ff ff57 	bl	801274c <tcp_rexmit_rto_prepare>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d102      	bne.n	80128aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7ff ffc1 	bl	801282c <tcp_rexmit_rto_commit>
  }
}
 80128aa:	bf00      	nop
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	0801a75c 	.word	0x0801a75c
 80128b8:	0801ade0 	.word	0x0801ade0
 80128bc:	0801a7b0 	.word	0x0801a7b0

080128c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80128c0:	b590      	push	{r4, r7, lr}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <tcp_rexmit+0x1c>
 80128ce:	4b2f      	ldr	r3, [pc, #188]	; (801298c <tcp_rexmit+0xcc>)
 80128d0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80128d4:	492e      	ldr	r1, [pc, #184]	; (8012990 <tcp_rexmit+0xd0>)
 80128d6:	482f      	ldr	r0, [pc, #188]	; (8012994 <tcp_rexmit+0xd4>)
 80128d8:	f004 f986 	bl	8016be8 <iprintf>

  if (pcb->unacked == NULL) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d102      	bne.n	80128ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80128e4:	f06f 0305 	mvn.w	r3, #5
 80128e8:	e04c      	b.n	8012984 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80128f0:	68b8      	ldr	r0, [r7, #8]
 80128f2:	f7ff fe2b 	bl	801254c <tcp_output_segment_busy>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d002      	beq.n	8012902 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80128fc:	f06f 0305 	mvn.w	r3, #5
 8012900:	e040      	b.n	8012984 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	336c      	adds	r3, #108	; 0x6c
 801290e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012910:	e002      	b.n	8012918 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d011      	beq.n	8012944 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	4618      	mov	r0, r3
 801292a:	f7f8 fcce 	bl	800b2ca <lwip_htonl>
 801292e:	4604      	mov	r4, r0
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	4618      	mov	r0, r3
 8012938:	f7f8 fcc7 	bl	800b2ca <lwip_htonl>
 801293c:	4603      	mov	r3, r0
 801293e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012940:	2b00      	cmp	r3, #0
 8012942:	dbe6      	blt.n	8012912 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d103      	bne.n	8012962 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012968:	2bff      	cmp	r3, #255	; 0xff
 801296a:	d007      	beq.n	801297c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012972:	3301      	adds	r3, #1
 8012974:	b2da      	uxtb	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2200      	movs	r2, #0
 8012980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012982:	2300      	movs	r3, #0
}
 8012984:	4618      	mov	r0, r3
 8012986:	3714      	adds	r7, #20
 8012988:	46bd      	mov	sp, r7
 801298a:	bd90      	pop	{r4, r7, pc}
 801298c:	0801a75c 	.word	0x0801a75c
 8012990:	0801adfc 	.word	0x0801adfc
 8012994:	0801a7b0 	.word	0x0801a7b0

08012998 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d106      	bne.n	80129b4 <tcp_rexmit_fast+0x1c>
 80129a6:	4b2a      	ldr	r3, [pc, #168]	; (8012a50 <tcp_rexmit_fast+0xb8>)
 80129a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80129ac:	4929      	ldr	r1, [pc, #164]	; (8012a54 <tcp_rexmit_fast+0xbc>)
 80129ae:	482a      	ldr	r0, [pc, #168]	; (8012a58 <tcp_rexmit_fast+0xc0>)
 80129b0:	f004 f91a 	bl	8016be8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d044      	beq.n	8012a46 <tcp_rexmit_fast+0xae>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	8b5b      	ldrh	r3, [r3, #26]
 80129c0:	f003 0304 	and.w	r3, r3, #4
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d13e      	bne.n	8012a46 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7ff ff79 	bl	80128c0 <tcp_rexmit>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d138      	bne.n	8012a46 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129e0:	4293      	cmp	r3, r2
 80129e2:	bf28      	it	cs
 80129e4:	4613      	movcs	r3, r2
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	0fda      	lsrs	r2, r3, #31
 80129ea:	4413      	add	r3, r2
 80129ec:	105b      	asrs	r3, r3, #1
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80129fc:	461a      	mov	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d206      	bcs.n	8012a16 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	b29a      	uxth	r2, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a20:	4619      	mov	r1, r3
 8012a22:	0049      	lsls	r1, r1, #1
 8012a24:	440b      	add	r3, r1
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4413      	add	r3, r2
 8012a2a:	b29a      	uxth	r2, r3
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	8b5b      	ldrh	r3, [r3, #26]
 8012a36:	f043 0304 	orr.w	r3, r3, #4
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012a46:	bf00      	nop
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	0801a75c 	.word	0x0801a75c
 8012a54:	0801ae14 	.word	0x0801ae14
 8012a58:	0801a7b0 	.word	0x0801a7b0

08012a5c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b086      	sub	sp, #24
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	607b      	str	r3, [r7, #4]
 8012a66:	460b      	mov	r3, r1
 8012a68:	817b      	strh	r3, [r7, #10]
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012a6e:	897a      	ldrh	r2, [r7, #10]
 8012a70:	893b      	ldrh	r3, [r7, #8]
 8012a72:	4413      	add	r3, r2
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	3314      	adds	r3, #20
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a7e:	4619      	mov	r1, r3
 8012a80:	2022      	movs	r0, #34	; 0x22
 8012a82:	f7f9 fd1b 	bl	800c4bc <pbuf_alloc>
 8012a86:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d04d      	beq.n	8012b2a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012a8e:	897b      	ldrh	r3, [r7, #10]
 8012a90:	3313      	adds	r3, #19
 8012a92:	697a      	ldr	r2, [r7, #20]
 8012a94:	8952      	ldrh	r2, [r2, #10]
 8012a96:	4293      	cmp	r3, r2
 8012a98:	db06      	blt.n	8012aa8 <tcp_output_alloc_header_common+0x4c>
 8012a9a:	4b26      	ldr	r3, [pc, #152]	; (8012b34 <tcp_output_alloc_header_common+0xd8>)
 8012a9c:	f240 7223 	movw	r2, #1827	; 0x723
 8012aa0:	4925      	ldr	r1, [pc, #148]	; (8012b38 <tcp_output_alloc_header_common+0xdc>)
 8012aa2:	4826      	ldr	r0, [pc, #152]	; (8012b3c <tcp_output_alloc_header_common+0xe0>)
 8012aa4:	f004 f8a0 	bl	8016be8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012aae:	8c3b      	ldrh	r3, [r7, #32]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f8 fbf5 	bl	800b2a0 <lwip_htons>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	461a      	mov	r2, r3
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f8 fbed 	bl	800b2a0 <lwip_htons>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	461a      	mov	r2, r3
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7f8 fbf8 	bl	800b2ca <lwip_htonl>
 8012ada:	4602      	mov	r2, r0
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ae0:	897b      	ldrh	r3, [r7, #10]
 8012ae2:	089b      	lsrs	r3, r3, #2
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	3305      	adds	r3, #5
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	031b      	lsls	r3, r3, #12
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4313      	orrs	r3, r2
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f8 fbd1 	bl	800b2a0 <lwip_htons>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012b06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7f8 fbc9 	bl	800b2a0 <lwip_htons>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	741a      	strb	r2, [r3, #16]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	2200      	movs	r2, #0
 8012b24:	749a      	strb	r2, [r3, #18]
 8012b26:	2200      	movs	r2, #0
 8012b28:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012b2a:	697b      	ldr	r3, [r7, #20]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	0801a75c 	.word	0x0801a75c
 8012b38:	0801ae34 	.word	0x0801ae34
 8012b3c:	0801a7b0 	.word	0x0801a7b0

08012b40 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012b40:	b5b0      	push	{r4, r5, r7, lr}
 8012b42:	b08a      	sub	sp, #40	; 0x28
 8012b44:	af04      	add	r7, sp, #16
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	607b      	str	r3, [r7, #4]
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	817b      	strh	r3, [r7, #10]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d106      	bne.n	8012b66 <tcp_output_alloc_header+0x26>
 8012b58:	4b15      	ldr	r3, [pc, #84]	; (8012bb0 <tcp_output_alloc_header+0x70>)
 8012b5a:	f240 7242 	movw	r2, #1858	; 0x742
 8012b5e:	4915      	ldr	r1, [pc, #84]	; (8012bb4 <tcp_output_alloc_header+0x74>)
 8012b60:	4815      	ldr	r0, [pc, #84]	; (8012bb8 <tcp_output_alloc_header+0x78>)
 8012b62:	f004 f841 	bl	8016be8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	8adb      	ldrh	r3, [r3, #22]
 8012b6e:	68fa      	ldr	r2, [r7, #12]
 8012b70:	8b12      	ldrh	r2, [r2, #24]
 8012b72:	68f9      	ldr	r1, [r7, #12]
 8012b74:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012b76:	893d      	ldrh	r5, [r7, #8]
 8012b78:	897c      	ldrh	r4, [r7, #10]
 8012b7a:	9103      	str	r1, [sp, #12]
 8012b7c:	2110      	movs	r1, #16
 8012b7e:	9102      	str	r1, [sp, #8]
 8012b80:	9201      	str	r2, [sp, #4]
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	462a      	mov	r2, r5
 8012b88:	4621      	mov	r1, r4
 8012b8a:	f7ff ff67 	bl	8012a5c <tcp_output_alloc_header_common>
 8012b8e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d006      	beq.n	8012ba4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b9e:	441a      	add	r2, r3
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012ba4:	697b      	ldr	r3, [r7, #20]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3718      	adds	r7, #24
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bdb0      	pop	{r4, r5, r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	0801a75c 	.word	0x0801a75c
 8012bb4:	0801ae64 	.word	0x0801ae64
 8012bb8:	0801a7b0 	.word	0x0801a7b0

08012bbc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b088      	sub	sp, #32
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	4611      	mov	r1, r2
 8012bc8:	461a      	mov	r2, r3
 8012bca:	460b      	mov	r3, r1
 8012bcc:	71fb      	strb	r3, [r7, #7]
 8012bce:	4613      	mov	r3, r2
 8012bd0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <tcp_output_fill_options+0x2e>
 8012bdc:	4b12      	ldr	r3, [pc, #72]	; (8012c28 <tcp_output_fill_options+0x6c>)
 8012bde:	f240 7256 	movw	r2, #1878	; 0x756
 8012be2:	4912      	ldr	r1, [pc, #72]	; (8012c2c <tcp_output_fill_options+0x70>)
 8012be4:	4812      	ldr	r0, [pc, #72]	; (8012c30 <tcp_output_fill_options+0x74>)
 8012be6:	f003 ffff 	bl	8016be8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	3314      	adds	r3, #20
 8012bf4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012bf6:	8bfb      	ldrh	r3, [r7, #30]
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	79fb      	ldrb	r3, [r7, #7]
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	f003 0304 	and.w	r3, r3, #4
 8012c04:	4413      	add	r3, r2
 8012c06:	3314      	adds	r3, #20
 8012c08:	69ba      	ldr	r2, [r7, #24]
 8012c0a:	4413      	add	r3, r2
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d006      	beq.n	8012c20 <tcp_output_fill_options+0x64>
 8012c12:	4b05      	ldr	r3, [pc, #20]	; (8012c28 <tcp_output_fill_options+0x6c>)
 8012c14:	f240 7275 	movw	r2, #1909	; 0x775
 8012c18:	4906      	ldr	r1, [pc, #24]	; (8012c34 <tcp_output_fill_options+0x78>)
 8012c1a:	4805      	ldr	r0, [pc, #20]	; (8012c30 <tcp_output_fill_options+0x74>)
 8012c1c:	f003 ffe4 	bl	8016be8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012c20:	bf00      	nop
 8012c22:	3720      	adds	r7, #32
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	0801a75c 	.word	0x0801a75c
 8012c2c:	0801ae8c 	.word	0x0801ae8c
 8012c30:	0801a7b0 	.word	0x0801a7b0
 8012c34:	0801ad84 	.word	0x0801ad84

08012c38 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08a      	sub	sp, #40	; 0x28
 8012c3c:	af04      	add	r7, sp, #16
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
 8012c44:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d106      	bne.n	8012c5a <tcp_output_control_segment+0x22>
 8012c4c:	4b1c      	ldr	r3, [pc, #112]	; (8012cc0 <tcp_output_control_segment+0x88>)
 8012c4e:	f240 7287 	movw	r2, #1927	; 0x787
 8012c52:	491c      	ldr	r1, [pc, #112]	; (8012cc4 <tcp_output_control_segment+0x8c>)
 8012c54:	481c      	ldr	r0, [pc, #112]	; (8012cc8 <tcp_output_control_segment+0x90>)
 8012c56:	f003 ffc7 	bl	8016be8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	6879      	ldr	r1, [r7, #4]
 8012c5e:	68f8      	ldr	r0, [r7, #12]
 8012c60:	f7fe fae8 	bl	8011234 <tcp_route>
 8012c64:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d102      	bne.n	8012c72 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012c6c:	23fc      	movs	r3, #252	; 0xfc
 8012c6e:	75fb      	strb	r3, [r7, #23]
 8012c70:	e01c      	b.n	8012cac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d006      	beq.n	8012c86 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	7adb      	ldrb	r3, [r3, #11]
 8012c7c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	7a9b      	ldrb	r3, [r3, #10]
 8012c82:	757b      	strb	r3, [r7, #21]
 8012c84:	e003      	b.n	8012c8e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012c86:	23ff      	movs	r3, #255	; 0xff
 8012c88:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012c8e:	7dba      	ldrb	r2, [r7, #22]
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	9302      	str	r3, [sp, #8]
 8012c94:	2306      	movs	r3, #6
 8012c96:	9301      	str	r3, [sp, #4]
 8012c98:	7d7b      	ldrb	r3, [r7, #21]
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	683a      	ldr	r2, [r7, #0]
 8012ca0:	6879      	ldr	r1, [r7, #4]
 8012ca2:	68b8      	ldr	r0, [r7, #8]
 8012ca4:	f002 fb66 	bl	8015374 <ip4_output_if>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012cac:	68b8      	ldr	r0, [r7, #8]
 8012cae:	f7f9 fee9 	bl	800ca84 <pbuf_free>
  return err;
 8012cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3718      	adds	r7, #24
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	0801a75c 	.word	0x0801a75c
 8012cc4:	0801aeb4 	.word	0x0801aeb4
 8012cc8:	0801a7b0 	.word	0x0801a7b0

08012ccc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b08b      	sub	sp, #44	; 0x2c
 8012cd0:	af04      	add	r7, sp, #16
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d106      	bne.n	8012cee <tcp_rst+0x22>
 8012ce0:	4b1f      	ldr	r3, [pc, #124]	; (8012d60 <tcp_rst+0x94>)
 8012ce2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012ce6:	491f      	ldr	r1, [pc, #124]	; (8012d64 <tcp_rst+0x98>)
 8012ce8:	481f      	ldr	r0, [pc, #124]	; (8012d68 <tcp_rst+0x9c>)
 8012cea:	f003 ff7d 	bl	8016be8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d106      	bne.n	8012d02 <tcp_rst+0x36>
 8012cf4:	4b1a      	ldr	r3, [pc, #104]	; (8012d60 <tcp_rst+0x94>)
 8012cf6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012cfa:	491c      	ldr	r1, [pc, #112]	; (8012d6c <tcp_rst+0xa0>)
 8012cfc:	481a      	ldr	r0, [pc, #104]	; (8012d68 <tcp_rst+0x9c>)
 8012cfe:	f003 ff73 	bl	8016be8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d02:	2300      	movs	r3, #0
 8012d04:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012d06:	f246 0308 	movw	r3, #24584	; 0x6008
 8012d0a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
 8012d0e:	b29c      	uxth	r4, r3
 8012d10:	68b8      	ldr	r0, [r7, #8]
 8012d12:	f7f8 fada 	bl	800b2ca <lwip_htonl>
 8012d16:	4602      	mov	r2, r0
 8012d18:	8abb      	ldrh	r3, [r7, #20]
 8012d1a:	9303      	str	r3, [sp, #12]
 8012d1c:	2314      	movs	r3, #20
 8012d1e:	9302      	str	r3, [sp, #8]
 8012d20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012d22:	9301      	str	r3, [sp, #4]
 8012d24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d26:	9300      	str	r3, [sp, #0]
 8012d28:	4613      	mov	r3, r2
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	4621      	mov	r1, r4
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7ff fe94 	bl	8012a5c <tcp_output_alloc_header_common>
 8012d34:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00c      	beq.n	8012d56 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d3c:	7dfb      	ldrb	r3, [r7, #23]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	6939      	ldr	r1, [r7, #16]
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f7ff ff3a 	bl	8012bbc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4a:	683a      	ldr	r2, [r7, #0]
 8012d4c:	6939      	ldr	r1, [r7, #16]
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f7ff ff72 	bl	8012c38 <tcp_output_control_segment>
 8012d54:	e000      	b.n	8012d58 <tcp_rst+0x8c>
    return;
 8012d56:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012d58:	371c      	adds	r7, #28
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd90      	pop	{r4, r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	0801a75c 	.word	0x0801a75c
 8012d64:	0801aee0 	.word	0x0801aee0
 8012d68:	0801a7b0 	.word	0x0801a7b0
 8012d6c:	0801aefc 	.word	0x0801aefc

08012d70 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012d70:	b590      	push	{r4, r7, lr}
 8012d72:	b087      	sub	sp, #28
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d106      	bne.n	8012d94 <tcp_send_empty_ack+0x24>
 8012d86:	4b28      	ldr	r3, [pc, #160]	; (8012e28 <tcp_send_empty_ack+0xb8>)
 8012d88:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012d8c:	4927      	ldr	r1, [pc, #156]	; (8012e2c <tcp_send_empty_ack+0xbc>)
 8012d8e:	4828      	ldr	r0, [pc, #160]	; (8012e30 <tcp_send_empty_ack+0xc0>)
 8012d90:	f003 ff2a 	bl	8016be8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	009b      	lsls	r3, r3, #2
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	f003 0304 	and.w	r3, r3, #4
 8012d9e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012da0:	7d7b      	ldrb	r3, [r7, #21]
 8012da2:	b29c      	uxth	r4, r3
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7f8 fa8e 	bl	800b2ca <lwip_htonl>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2200      	movs	r2, #0
 8012db2:	4621      	mov	r1, r4
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff fec3 	bl	8012b40 <tcp_output_alloc_header>
 8012dba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d109      	bne.n	8012dd6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8b5b      	ldrh	r3, [r3, #26]
 8012dc6:	f043 0303 	orr.w	r3, r3, #3
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012dd0:	f06f 0301 	mvn.w	r3, #1
 8012dd4:	e023      	b.n	8012e1e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012dd6:	7dbb      	ldrb	r3, [r7, #22]
 8012dd8:	7dfa      	ldrb	r2, [r7, #23]
 8012dda:	6939      	ldr	r1, [r7, #16]
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7ff feed 	bl	8012bbc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	3304      	adds	r3, #4
 8012de8:	6939      	ldr	r1, [r7, #16]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff ff24 	bl	8012c38 <tcp_output_control_segment>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d007      	beq.n	8012e0c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	8b5b      	ldrh	r3, [r3, #26]
 8012e00:	f043 0303 	orr.w	r3, r3, #3
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	835a      	strh	r2, [r3, #26]
 8012e0a:	e006      	b.n	8012e1a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	8b5b      	ldrh	r3, [r3, #26]
 8012e10:	f023 0303 	bic.w	r3, r3, #3
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	371c      	adds	r7, #28
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd90      	pop	{r4, r7, pc}
 8012e26:	bf00      	nop
 8012e28:	0801a75c 	.word	0x0801a75c
 8012e2c:	0801af18 	.word	0x0801af18
 8012e30:	0801a7b0 	.word	0x0801a7b0

08012e34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b087      	sub	sp, #28
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d106      	bne.n	8012e54 <tcp_keepalive+0x20>
 8012e46:	4b18      	ldr	r3, [pc, #96]	; (8012ea8 <tcp_keepalive+0x74>)
 8012e48:	f640 0224 	movw	r2, #2084	; 0x824
 8012e4c:	4917      	ldr	r1, [pc, #92]	; (8012eac <tcp_keepalive+0x78>)
 8012e4e:	4818      	ldr	r0, [pc, #96]	; (8012eb0 <tcp_keepalive+0x7c>)
 8012e50:	f003 feca 	bl	8016be8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012e54:	7dfb      	ldrb	r3, [r7, #23]
 8012e56:	b29c      	uxth	r4, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e5c:	3b01      	subs	r3, #1
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f8 fa33 	bl	800b2ca <lwip_htonl>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2200      	movs	r2, #0
 8012e68:	4621      	mov	r1, r4
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7ff fe68 	bl	8012b40 <tcp_output_alloc_header>
 8012e70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d102      	bne.n	8012e7e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012e78:	f04f 33ff 	mov.w	r3, #4294967295
 8012e7c:	e010      	b.n	8012ea0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e7e:	7dfb      	ldrb	r3, [r7, #23]
 8012e80:	2200      	movs	r2, #0
 8012e82:	6939      	ldr	r1, [r7, #16]
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7ff fe99 	bl	8012bbc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	3304      	adds	r3, #4
 8012e90:	6939      	ldr	r1, [r7, #16]
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7ff fed0 	bl	8012c38 <tcp_output_control_segment>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	371c      	adds	r7, #28
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd90      	pop	{r4, r7, pc}
 8012ea8:	0801a75c 	.word	0x0801a75c
 8012eac:	0801af38 	.word	0x0801af38
 8012eb0:	0801a7b0 	.word	0x0801a7b0

08012eb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012eb4:	b590      	push	{r4, r7, lr}
 8012eb6:	b08b      	sub	sp, #44	; 0x2c
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <tcp_zero_window_probe+0x22>
 8012ec8:	4b4c      	ldr	r3, [pc, #304]	; (8012ffc <tcp_zero_window_probe+0x148>)
 8012eca:	f640 024f 	movw	r2, #2127	; 0x84f
 8012ece:	494c      	ldr	r1, [pc, #304]	; (8013000 <tcp_zero_window_probe+0x14c>)
 8012ed0:	484c      	ldr	r0, [pc, #304]	; (8013004 <tcp_zero_window_probe+0x150>)
 8012ed2:	f003 fe89 	bl	8016be8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eda:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012edc:	6a3b      	ldr	r3, [r7, #32]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d101      	bne.n	8012ee6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e086      	b.n	8012ff4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012eec:	2bff      	cmp	r3, #255	; 0xff
 8012eee:	d007      	beq.n	8012f00 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f00:	6a3b      	ldr	r3, [r7, #32]
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	899b      	ldrh	r3, [r3, #12]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7f8 f9c9 	bl	800b2a0 <lwip_htons>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	f003 0301 	and.w	r3, r3, #1
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d005      	beq.n	8012f26 <tcp_zero_window_probe+0x72>
 8012f1a:	6a3b      	ldr	r3, [r7, #32]
 8012f1c:	891b      	ldrh	r3, [r3, #8]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <tcp_zero_window_probe+0x72>
 8012f22:	2301      	movs	r3, #1
 8012f24:	e000      	b.n	8012f28 <tcp_zero_window_probe+0x74>
 8012f26:	2300      	movs	r3, #0
 8012f28:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012f2a:	7ffb      	ldrb	r3, [r7, #31]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	bf0c      	ite	eq
 8012f30:	2301      	moveq	r3, #1
 8012f32:	2300      	movne	r3, #0
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f3c:	b299      	uxth	r1, r3
 8012f3e:	6a3b      	ldr	r3, [r7, #32]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	8bba      	ldrh	r2, [r7, #28]
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f7ff fdfa 	bl	8012b40 <tcp_output_alloc_header>
 8012f4c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d102      	bne.n	8012f5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012f54:	f04f 33ff 	mov.w	r3, #4294967295
 8012f58:	e04c      	b.n	8012ff4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012f60:	7ffb      	ldrb	r3, [r7, #31]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d011      	beq.n	8012f8a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	899b      	ldrh	r3, [r3, #12]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	b21b      	sxth	r3, r3
 8012f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f72:	b21c      	sxth	r4, r3
 8012f74:	2011      	movs	r0, #17
 8012f76:	f7f8 f993 	bl	800b2a0 <lwip_htons>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	b21b      	sxth	r3, r3
 8012f7e:	4323      	orrs	r3, r4
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	819a      	strh	r2, [r3, #12]
 8012f88:	e010      	b.n	8012fac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	3314      	adds	r3, #20
 8012f90:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012f92:	6a3b      	ldr	r3, [r7, #32]
 8012f94:	6858      	ldr	r0, [r3, #4]
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	891a      	ldrh	r2, [r3, #8]
 8012f9c:	6a3b      	ldr	r3, [r7, #32]
 8012f9e:	891b      	ldrh	r3, [r3, #8]
 8012fa0:	1ad3      	subs	r3, r2, r3
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	6939      	ldr	r1, [r7, #16]
 8012fa8:	f7f9 ff72 	bl	800ce90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7f8 f989 	bl	800b2ca <lwip_htonl>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	3301      	adds	r3, #1
 8012fbc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	1ad3      	subs	r3, r2, r3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	da02      	bge.n	8012fd0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	69b9      	ldr	r1, [r7, #24]
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f7ff fdef 	bl	8012bbc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	69b9      	ldr	r1, [r7, #24]
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7ff fe26 	bl	8012c38 <tcp_output_control_segment>
 8012fec:	4603      	mov	r3, r0
 8012fee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ff0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	372c      	adds	r7, #44	; 0x2c
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd90      	pop	{r4, r7, pc}
 8012ffc:	0801a75c 	.word	0x0801a75c
 8013000:	0801af54 	.word	0x0801af54
 8013004:	0801a7b0 	.word	0x0801a7b0

08013008 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013010:	f7fa f82c 	bl	800d06c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013014:	4b0a      	ldr	r3, [pc, #40]	; (8013040 <tcpip_tcp_timer+0x38>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d103      	bne.n	8013024 <tcpip_tcp_timer+0x1c>
 801301c:	4b09      	ldr	r3, [pc, #36]	; (8013044 <tcpip_tcp_timer+0x3c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d005      	beq.n	8013030 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013024:	2200      	movs	r2, #0
 8013026:	4908      	ldr	r1, [pc, #32]	; (8013048 <tcpip_tcp_timer+0x40>)
 8013028:	20fa      	movs	r0, #250	; 0xfa
 801302a:	f000 f8f3 	bl	8013214 <sys_timeout>
 801302e:	e003      	b.n	8013038 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013030:	4b06      	ldr	r3, [pc, #24]	; (801304c <tcpip_tcp_timer+0x44>)
 8013032:	2200      	movs	r2, #0
 8013034:	601a      	str	r2, [r3, #0]
  }
}
 8013036:	bf00      	nop
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	2000d118 	.word	0x2000d118
 8013044:	2000d11c 	.word	0x2000d11c
 8013048:	08013009 	.word	0x08013009
 801304c:	2000d164 	.word	0x2000d164

08013050 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013054:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <tcp_timer_needed+0x30>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10f      	bne.n	801307c <tcp_timer_needed+0x2c>
 801305c:	4b09      	ldr	r3, [pc, #36]	; (8013084 <tcp_timer_needed+0x34>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d103      	bne.n	801306c <tcp_timer_needed+0x1c>
 8013064:	4b08      	ldr	r3, [pc, #32]	; (8013088 <tcp_timer_needed+0x38>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d007      	beq.n	801307c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801306c:	4b04      	ldr	r3, [pc, #16]	; (8013080 <tcp_timer_needed+0x30>)
 801306e:	2201      	movs	r2, #1
 8013070:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013072:	2200      	movs	r2, #0
 8013074:	4905      	ldr	r1, [pc, #20]	; (801308c <tcp_timer_needed+0x3c>)
 8013076:	20fa      	movs	r0, #250	; 0xfa
 8013078:	f000 f8cc 	bl	8013214 <sys_timeout>
  }
}
 801307c:	bf00      	nop
 801307e:	bd80      	pop	{r7, pc}
 8013080:	2000d164 	.word	0x2000d164
 8013084:	2000d118 	.word	0x2000d118
 8013088:	2000d11c 	.word	0x2000d11c
 801308c:	08013009 	.word	0x08013009

08013090 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801309c:	200a      	movs	r0, #10
 801309e:	f7f8 fdd7 	bl	800bc50 <memp_malloc>
 80130a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d109      	bne.n	80130be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d151      	bne.n	8013154 <sys_timeout_abs+0xc4>
 80130b0:	4b2a      	ldr	r3, [pc, #168]	; (801315c <sys_timeout_abs+0xcc>)
 80130b2:	22be      	movs	r2, #190	; 0xbe
 80130b4:	492a      	ldr	r1, [pc, #168]	; (8013160 <sys_timeout_abs+0xd0>)
 80130b6:	482b      	ldr	r0, [pc, #172]	; (8013164 <sys_timeout_abs+0xd4>)
 80130b8:	f003 fd96 	bl	8016be8 <iprintf>
    return;
 80130bc:	e04a      	b.n	8013154 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2200      	movs	r2, #0
 80130c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	68ba      	ldr	r2, [r7, #8]
 80130c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80130d6:	4b24      	ldr	r3, [pc, #144]	; (8013168 <sys_timeout_abs+0xd8>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d103      	bne.n	80130e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80130de:	4a22      	ldr	r2, [pc, #136]	; (8013168 <sys_timeout_abs+0xd8>)
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	6013      	str	r3, [r2, #0]
    return;
 80130e4:	e037      	b.n	8013156 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	685a      	ldr	r2, [r3, #4]
 80130ea:	4b1f      	ldr	r3, [pc, #124]	; (8013168 <sys_timeout_abs+0xd8>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	1ad3      	subs	r3, r2, r3
 80130f2:	0fdb      	lsrs	r3, r3, #31
 80130f4:	f003 0301 	and.w	r3, r3, #1
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d007      	beq.n	801310e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80130fe:	4b1a      	ldr	r3, [pc, #104]	; (8013168 <sys_timeout_abs+0xd8>)
 8013100:	681a      	ldr	r2, [r3, #0]
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013106:	4a18      	ldr	r2, [pc, #96]	; (8013168 <sys_timeout_abs+0xd8>)
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	6013      	str	r3, [r2, #0]
 801310c:	e023      	b.n	8013156 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801310e:	4b16      	ldr	r3, [pc, #88]	; (8013168 <sys_timeout_abs+0xd8>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	617b      	str	r3, [r7, #20]
 8013114:	e01a      	b.n	801314c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d00b      	beq.n	8013136 <sys_timeout_abs+0xa6>
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	685a      	ldr	r2, [r3, #4]
 8013122:	697b      	ldr	r3, [r7, #20]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	0fdb      	lsrs	r3, r3, #31
 801312c:	f003 0301 	and.w	r3, r3, #1
 8013130:	b2db      	uxtb	r3, r3
 8013132:	2b00      	cmp	r3, #0
 8013134:	d007      	beq.n	8013146 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	693a      	ldr	r2, [r7, #16]
 8013142:	601a      	str	r2, [r3, #0]
        break;
 8013144:	e007      	b.n	8013156 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	617b      	str	r3, [r7, #20]
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d1e1      	bne.n	8013116 <sys_timeout_abs+0x86>
 8013152:	e000      	b.n	8013156 <sys_timeout_abs+0xc6>
    return;
 8013154:	bf00      	nop
      }
    }
  }
}
 8013156:	3718      	adds	r7, #24
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	0801af78 	.word	0x0801af78
 8013160:	0801afac 	.word	0x0801afac
 8013164:	0801afec 	.word	0x0801afec
 8013168:	2000d15c 	.word	0x2000d15c

0801316c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	4798      	blx	r3

  now = sys_now();
 801317e:	f7f2 f977 	bl	8005470 <sys_now>
 8013182:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	4b0f      	ldr	r3, [pc, #60]	; (80131c8 <lwip_cyclic_timer+0x5c>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4413      	add	r3, r2
 801318e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013190:	68fa      	ldr	r2, [r7, #12]
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	0fdb      	lsrs	r3, r3, #31
 8013198:	f003 0301 	and.w	r3, r3, #1
 801319c:	b2db      	uxtb	r3, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d009      	beq.n	80131b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	4413      	add	r3, r2
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	4907      	ldr	r1, [pc, #28]	; (80131cc <lwip_cyclic_timer+0x60>)
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff ff6e 	bl	8013090 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80131b4:	e004      	b.n	80131c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	4904      	ldr	r1, [pc, #16]	; (80131cc <lwip_cyclic_timer+0x60>)
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	f7ff ff68 	bl	8013090 <sys_timeout_abs>
}
 80131c0:	bf00      	nop
 80131c2:	3718      	adds	r7, #24
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	2000d160 	.word	0x2000d160
 80131cc:	0801316d 	.word	0x0801316d

080131d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80131d6:	2301      	movs	r3, #1
 80131d8:	607b      	str	r3, [r7, #4]
 80131da:	e00e      	b.n	80131fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80131dc:	4a0b      	ldr	r2, [pc, #44]	; (801320c <sys_timeouts_init+0x3c>)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	00db      	lsls	r3, r3, #3
 80131e8:	4a08      	ldr	r2, [pc, #32]	; (801320c <sys_timeouts_init+0x3c>)
 80131ea:	4413      	add	r3, r2
 80131ec:	461a      	mov	r2, r3
 80131ee:	4908      	ldr	r1, [pc, #32]	; (8013210 <sys_timeouts_init+0x40>)
 80131f0:	f000 f810 	bl	8013214 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	3301      	adds	r3, #1
 80131f8:	607b      	str	r3, [r7, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2b02      	cmp	r3, #2
 80131fe:	d9ed      	bls.n	80131dc <sys_timeouts_init+0xc>
  }
}
 8013200:	bf00      	nop
 8013202:	bf00      	nop
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	0801bc5c 	.word	0x0801bc5c
 8013210:	0801316d 	.word	0x0801316d

08013214 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	60f8      	str	r0, [r7, #12]
 801321c:	60b9      	str	r1, [r7, #8]
 801321e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013226:	d306      	bcc.n	8013236 <sys_timeout+0x22>
 8013228:	4b0a      	ldr	r3, [pc, #40]	; (8013254 <sys_timeout+0x40>)
 801322a:	f240 1229 	movw	r2, #297	; 0x129
 801322e:	490a      	ldr	r1, [pc, #40]	; (8013258 <sys_timeout+0x44>)
 8013230:	480a      	ldr	r0, [pc, #40]	; (801325c <sys_timeout+0x48>)
 8013232:	f003 fcd9 	bl	8016be8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013236:	f7f2 f91b 	bl	8005470 <sys_now>
 801323a:	4602      	mov	r2, r0
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	4413      	add	r3, r2
 8013240:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	68b9      	ldr	r1, [r7, #8]
 8013246:	6978      	ldr	r0, [r7, #20]
 8013248:	f7ff ff22 	bl	8013090 <sys_timeout_abs>
#endif
}
 801324c:	bf00      	nop
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	0801af78 	.word	0x0801af78
 8013258:	0801b014 	.word	0x0801b014
 801325c:	0801afec 	.word	0x0801afec

08013260 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013266:	f7f2 f903 	bl	8005470 <sys_now>
 801326a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801326c:	4b17      	ldr	r3, [pc, #92]	; (80132cc <sys_check_timeouts+0x6c>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d022      	beq.n	80132be <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	0fdb      	lsrs	r3, r3, #31
 8013282:	f003 0301 	and.w	r3, r3, #1
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b00      	cmp	r3, #0
 801328a:	d11a      	bne.n	80132c2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a0e      	ldr	r2, [pc, #56]	; (80132cc <sys_check_timeouts+0x6c>)
 8013292:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	68db      	ldr	r3, [r3, #12]
 801329e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	4a0a      	ldr	r2, [pc, #40]	; (80132d0 <sys_check_timeouts+0x70>)
 80132a6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80132a8:	68b9      	ldr	r1, [r7, #8]
 80132aa:	200a      	movs	r0, #10
 80132ac:	f7f8 fd46 	bl	800bd3c <memp_free>
    if (handler != NULL) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d0da      	beq.n	801326c <sys_check_timeouts+0xc>
      handler(arg);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6838      	ldr	r0, [r7, #0]
 80132ba:	4798      	blx	r3
  do {
 80132bc:	e7d6      	b.n	801326c <sys_check_timeouts+0xc>
      return;
 80132be:	bf00      	nop
 80132c0:	e000      	b.n	80132c4 <sys_check_timeouts+0x64>
      return;
 80132c2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	2000d15c 	.word	0x2000d15c
 80132d0:	2000d160 	.word	0x2000d160

080132d4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80132da:	4b16      	ldr	r3, [pc, #88]	; (8013334 <sys_timeouts_sleeptime+0x60>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d102      	bne.n	80132e8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80132e2:	f04f 33ff 	mov.w	r3, #4294967295
 80132e6:	e020      	b.n	801332a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80132e8:	f7f2 f8c2 	bl	8005470 <sys_now>
 80132ec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80132ee:	4b11      	ldr	r3, [pc, #68]	; (8013334 <sys_timeouts_sleeptime+0x60>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	685a      	ldr	r2, [r3, #4]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	1ad3      	subs	r3, r2, r3
 80132f8:	0fdb      	lsrs	r3, r3, #31
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013304:	2300      	movs	r3, #0
 8013306:	e010      	b.n	801332a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <sys_timeouts_sleeptime+0x60>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	685a      	ldr	r2, [r3, #4]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	2b00      	cmp	r3, #0
 8013318:	da06      	bge.n	8013328 <sys_timeouts_sleeptime+0x54>
 801331a:	4b07      	ldr	r3, [pc, #28]	; (8013338 <sys_timeouts_sleeptime+0x64>)
 801331c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013320:	4906      	ldr	r1, [pc, #24]	; (801333c <sys_timeouts_sleeptime+0x68>)
 8013322:	4807      	ldr	r0, [pc, #28]	; (8013340 <sys_timeouts_sleeptime+0x6c>)
 8013324:	f003 fc60 	bl	8016be8 <iprintf>
    return ret;
 8013328:	683b      	ldr	r3, [r7, #0]
  }
}
 801332a:	4618      	mov	r0, r3
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	2000d15c 	.word	0x2000d15c
 8013338:	0801af78 	.word	0x0801af78
 801333c:	0801b04c 	.word	0x0801b04c
 8013340:	0801afec 	.word	0x0801afec

08013344 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013348:	f003 fb4e 	bl	80169e8 <rand>
 801334c:	4603      	mov	r3, r0
 801334e:	b29b      	uxth	r3, r3
 8013350:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013354:	b29b      	uxth	r3, r3
 8013356:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801335a:	b29a      	uxth	r2, r3
 801335c:	4b01      	ldr	r3, [pc, #4]	; (8013364 <udp_init+0x20>)
 801335e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013360:	bf00      	nop
 8013362:	bd80      	pop	{r7, pc}
 8013364:	2000002c 	.word	0x2000002c

08013368 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801336e:	2300      	movs	r3, #0
 8013370:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013372:	4b17      	ldr	r3, [pc, #92]	; (80133d0 <udp_new_port+0x68>)
 8013374:	881b      	ldrh	r3, [r3, #0]
 8013376:	1c5a      	adds	r2, r3, #1
 8013378:	b291      	uxth	r1, r2
 801337a:	4a15      	ldr	r2, [pc, #84]	; (80133d0 <udp_new_port+0x68>)
 801337c:	8011      	strh	r1, [r2, #0]
 801337e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013382:	4293      	cmp	r3, r2
 8013384:	d103      	bne.n	801338e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013386:	4b12      	ldr	r3, [pc, #72]	; (80133d0 <udp_new_port+0x68>)
 8013388:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801338c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801338e:	4b11      	ldr	r3, [pc, #68]	; (80133d4 <udp_new_port+0x6c>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	603b      	str	r3, [r7, #0]
 8013394:	e011      	b.n	80133ba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	8a5a      	ldrh	r2, [r3, #18]
 801339a:	4b0d      	ldr	r3, [pc, #52]	; (80133d0 <udp_new_port+0x68>)
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d108      	bne.n	80133b4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80133a2:	88fb      	ldrh	r3, [r7, #6]
 80133a4:	3301      	adds	r3, #1
 80133a6:	80fb      	strh	r3, [r7, #6]
 80133a8:	88fb      	ldrh	r3, [r7, #6]
 80133aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80133ae:	d3e0      	bcc.n	8013372 <udp_new_port+0xa>
        return 0;
 80133b0:	2300      	movs	r3, #0
 80133b2:	e007      	b.n	80133c4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	603b      	str	r3, [r7, #0]
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1ea      	bne.n	8013396 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80133c0:	4b03      	ldr	r3, [pc, #12]	; (80133d0 <udp_new_port+0x68>)
 80133c2:	881b      	ldrh	r3, [r3, #0]
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	370c      	adds	r7, #12
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr
 80133d0:	2000002c 	.word	0x2000002c
 80133d4:	2000d168 	.word	0x2000d168

080133d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	60f8      	str	r0, [r7, #12]
 80133e0:	60b9      	str	r1, [r7, #8]
 80133e2:	4613      	mov	r3, r2
 80133e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d105      	bne.n	80133f8 <udp_input_local_match+0x20>
 80133ec:	4b27      	ldr	r3, [pc, #156]	; (801348c <udp_input_local_match+0xb4>)
 80133ee:	2287      	movs	r2, #135	; 0x87
 80133f0:	4927      	ldr	r1, [pc, #156]	; (8013490 <udp_input_local_match+0xb8>)
 80133f2:	4828      	ldr	r0, [pc, #160]	; (8013494 <udp_input_local_match+0xbc>)
 80133f4:	f003 fbf8 	bl	8016be8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d105      	bne.n	801340a <udp_input_local_match+0x32>
 80133fe:	4b23      	ldr	r3, [pc, #140]	; (801348c <udp_input_local_match+0xb4>)
 8013400:	2288      	movs	r2, #136	; 0x88
 8013402:	4925      	ldr	r1, [pc, #148]	; (8013498 <udp_input_local_match+0xc0>)
 8013404:	4823      	ldr	r0, [pc, #140]	; (8013494 <udp_input_local_match+0xbc>)
 8013406:	f003 fbef 	bl	8016be8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	7a1b      	ldrb	r3, [r3, #8]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00b      	beq.n	801342a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	7a1a      	ldrb	r2, [r3, #8]
 8013416:	4b21      	ldr	r3, [pc, #132]	; (801349c <udp_input_local_match+0xc4>)
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801341e:	3301      	adds	r3, #1
 8013420:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013422:	429a      	cmp	r2, r3
 8013424:	d001      	beq.n	801342a <udp_input_local_match+0x52>
    return 0;
 8013426:	2300      	movs	r3, #0
 8013428:	e02b      	b.n	8013482 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d018      	beq.n	8013462 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d013      	beq.n	801345e <udp_input_local_match+0x86>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d00f      	beq.n	801345e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801343e:	4b17      	ldr	r3, [pc, #92]	; (801349c <udp_input_local_match+0xc4>)
 8013440:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013446:	d00a      	beq.n	801345e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	4b13      	ldr	r3, [pc, #76]	; (801349c <udp_input_local_match+0xc4>)
 801344e:	695b      	ldr	r3, [r3, #20]
 8013450:	405a      	eors	r2, r3
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	3308      	adds	r3, #8
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801345a:	2b00      	cmp	r3, #0
 801345c:	d110      	bne.n	8013480 <udp_input_local_match+0xa8>
          return 1;
 801345e:	2301      	movs	r3, #1
 8013460:	e00f      	b.n	8013482 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d009      	beq.n	801347c <udp_input_local_match+0xa4>
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <udp_input_local_match+0xa4>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	4b09      	ldr	r3, [pc, #36]	; (801349c <udp_input_local_match+0xc4>)
 8013476:	695b      	ldr	r3, [r3, #20]
 8013478:	429a      	cmp	r2, r3
 801347a:	d101      	bne.n	8013480 <udp_input_local_match+0xa8>
        return 1;
 801347c:	2301      	movs	r3, #1
 801347e:	e000      	b.n	8013482 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013480:	2300      	movs	r3, #0
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	0801b060 	.word	0x0801b060
 8013490:	0801b090 	.word	0x0801b090
 8013494:	0801b0b4 	.word	0x0801b0b4
 8013498:	0801b0dc 	.word	0x0801b0dc
 801349c:	200099b8 	.word	0x200099b8

080134a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80134a0:	b590      	push	{r4, r7, lr}
 80134a2:	b08d      	sub	sp, #52	; 0x34
 80134a4:	af02      	add	r7, sp, #8
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80134aa:	2300      	movs	r3, #0
 80134ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d105      	bne.n	80134c0 <udp_input+0x20>
 80134b4:	4b7c      	ldr	r3, [pc, #496]	; (80136a8 <udp_input+0x208>)
 80134b6:	22cf      	movs	r2, #207	; 0xcf
 80134b8:	497c      	ldr	r1, [pc, #496]	; (80136ac <udp_input+0x20c>)
 80134ba:	487d      	ldr	r0, [pc, #500]	; (80136b0 <udp_input+0x210>)
 80134bc:	f003 fb94 	bl	8016be8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d105      	bne.n	80134d2 <udp_input+0x32>
 80134c6:	4b78      	ldr	r3, [pc, #480]	; (80136a8 <udp_input+0x208>)
 80134c8:	22d0      	movs	r2, #208	; 0xd0
 80134ca:	497a      	ldr	r1, [pc, #488]	; (80136b4 <udp_input+0x214>)
 80134cc:	4878      	ldr	r0, [pc, #480]	; (80136b0 <udp_input+0x210>)
 80134ce:	f003 fb8b 	bl	8016be8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	895b      	ldrh	r3, [r3, #10]
 80134d6:	2b07      	cmp	r3, #7
 80134d8:	d803      	bhi.n	80134e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7f9 fad2 	bl	800ca84 <pbuf_free>
    goto end;
 80134e0:	e0de      	b.n	80136a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80134e8:	4b73      	ldr	r3, [pc, #460]	; (80136b8 <udp_input+0x218>)
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	4a72      	ldr	r2, [pc, #456]	; (80136b8 <udp_input+0x218>)
 80134ee:	6812      	ldr	r2, [r2, #0]
 80134f0:	4611      	mov	r1, r2
 80134f2:	4618      	mov	r0, r3
 80134f4:	f002 f816 	bl	8015524 <ip4_addr_isbroadcast_u32>
 80134f8:	4603      	mov	r3, r0
 80134fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	881b      	ldrh	r3, [r3, #0]
 8013500:	b29b      	uxth	r3, r3
 8013502:	4618      	mov	r0, r3
 8013504:	f7f7 fecc 	bl	800b2a0 <lwip_htons>
 8013508:	4603      	mov	r3, r0
 801350a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	885b      	ldrh	r3, [r3, #2]
 8013510:	b29b      	uxth	r3, r3
 8013512:	4618      	mov	r0, r3
 8013514:	f7f7 fec4 	bl	800b2a0 <lwip_htons>
 8013518:	4603      	mov	r3, r0
 801351a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801351c:	2300      	movs	r3, #0
 801351e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013524:	2300      	movs	r3, #0
 8013526:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013528:	4b64      	ldr	r3, [pc, #400]	; (80136bc <udp_input+0x21c>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	627b      	str	r3, [r7, #36]	; 0x24
 801352e:	e054      	b.n	80135da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013532:	8a5b      	ldrh	r3, [r3, #18]
 8013534:	89fa      	ldrh	r2, [r7, #14]
 8013536:	429a      	cmp	r2, r3
 8013538:	d14a      	bne.n	80135d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801353a:	7cfb      	ldrb	r3, [r7, #19]
 801353c:	461a      	mov	r2, r3
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013542:	f7ff ff49 	bl	80133d8 <udp_input_local_match>
 8013546:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013548:	2b00      	cmp	r3, #0
 801354a:	d041      	beq.n	80135d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354e:	7c1b      	ldrb	r3, [r3, #16]
 8013550:	f003 0304 	and.w	r3, r3, #4
 8013554:	2b00      	cmp	r3, #0
 8013556:	d11d      	bne.n	8013594 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013558:	69fb      	ldr	r3, [r7, #28]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d102      	bne.n	8013564 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	61fb      	str	r3, [r7, #28]
 8013562:	e017      	b.n	8013594 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013564:	7cfb      	ldrb	r3, [r7, #19]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d014      	beq.n	8013594 <udp_input+0xf4>
 801356a:	4b53      	ldr	r3, [pc, #332]	; (80136b8 <udp_input+0x218>)
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013572:	d10f      	bne.n	8013594 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013574:	69fb      	ldr	r3, [r7, #28]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	3304      	adds	r3, #4
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	429a      	cmp	r2, r3
 8013580:	d008      	beq.n	8013594 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	3304      	adds	r3, #4
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	429a      	cmp	r2, r3
 801358e:	d101      	bne.n	8013594 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013592:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013596:	8a9b      	ldrh	r3, [r3, #20]
 8013598:	8a3a      	ldrh	r2, [r7, #16]
 801359a:	429a      	cmp	r2, r3
 801359c:	d118      	bne.n	80135d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d005      	beq.n	80135b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80135a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	4b43      	ldr	r3, [pc, #268]	; (80136b8 <udp_input+0x218>)
 80135ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d10e      	bne.n	80135d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d014      	beq.n	80135e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80135b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	6a3b      	ldr	r3, [r7, #32]
 80135be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80135c0:	4b3e      	ldr	r3, [pc, #248]	; (80136bc <udp_input+0x21c>)
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80135c8:	4a3c      	ldr	r2, [pc, #240]	; (80136bc <udp_input+0x21c>)
 80135ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80135ce:	e008      	b.n	80135e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80135d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	627b      	str	r3, [r7, #36]	; 0x24
 80135da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1a7      	bne.n	8013530 <udp_input+0x90>
 80135e0:	e000      	b.n	80135e4 <udp_input+0x144>
        break;
 80135e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80135e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d101      	bne.n	80135ee <udp_input+0x14e>
    pcb = uncon_pcb;
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80135ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <udp_input+0x15a>
    for_us = 1;
 80135f4:	2301      	movs	r3, #1
 80135f6:	76fb      	strb	r3, [r7, #27]
 80135f8:	e00a      	b.n	8013610 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	3304      	adds	r3, #4
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	4b2d      	ldr	r3, [pc, #180]	; (80136b8 <udp_input+0x218>)
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	429a      	cmp	r2, r3
 8013606:	bf0c      	ite	eq
 8013608:	2301      	moveq	r3, #1
 801360a:	2300      	movne	r3, #0
 801360c:	b2db      	uxtb	r3, r3
 801360e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013610:	7efb      	ldrb	r3, [r7, #27]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d041      	beq.n	801369a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013616:	2108      	movs	r1, #8
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f7f9 f9ad 	bl	800c978 <pbuf_remove_header>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d00a      	beq.n	801363a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013624:	4b20      	ldr	r3, [pc, #128]	; (80136a8 <udp_input+0x208>)
 8013626:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801362a:	4925      	ldr	r1, [pc, #148]	; (80136c0 <udp_input+0x220>)
 801362c:	4820      	ldr	r0, [pc, #128]	; (80136b0 <udp_input+0x210>)
 801362e:	f003 fadb 	bl	8016be8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7f9 fa26 	bl	800ca84 <pbuf_free>
      goto end;
 8013638:	e032      	b.n	80136a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363c:	2b00      	cmp	r3, #0
 801363e:	d012      	beq.n	8013666 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013642:	699b      	ldr	r3, [r3, #24]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d00a      	beq.n	801365e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364a:	699c      	ldr	r4, [r3, #24]
 801364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364e:	69d8      	ldr	r0, [r3, #28]
 8013650:	8a3b      	ldrh	r3, [r7, #16]
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	4b1b      	ldr	r3, [pc, #108]	; (80136c4 <udp_input+0x224>)
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801365a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801365c:	e021      	b.n	80136a2 <udp_input+0x202>
        pbuf_free(p);
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f7f9 fa10 	bl	800ca84 <pbuf_free>
        goto end;
 8013664:	e01c      	b.n	80136a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013666:	7cfb      	ldrb	r3, [r7, #19]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d112      	bne.n	8013692 <udp_input+0x1f2>
 801366c:	4b12      	ldr	r3, [pc, #72]	; (80136b8 <udp_input+0x218>)
 801366e:	695b      	ldr	r3, [r3, #20]
 8013670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013674:	2be0      	cmp	r3, #224	; 0xe0
 8013676:	d00c      	beq.n	8013692 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013678:	4b0f      	ldr	r3, [pc, #60]	; (80136b8 <udp_input+0x218>)
 801367a:	899b      	ldrh	r3, [r3, #12]
 801367c:	3308      	adds	r3, #8
 801367e:	b29b      	uxth	r3, r3
 8013680:	b21b      	sxth	r3, r3
 8013682:	4619      	mov	r1, r3
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7f9 f9ea 	bl	800ca5e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801368a:	2103      	movs	r1, #3
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f001 fc29 	bl	8014ee4 <icmp_dest_unreach>
      pbuf_free(p);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7f9 f9f6 	bl	800ca84 <pbuf_free>
  return;
 8013698:	e003      	b.n	80136a2 <udp_input+0x202>
    pbuf_free(p);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7f9 f9f2 	bl	800ca84 <pbuf_free>
  return;
 80136a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80136a2:	372c      	adds	r7, #44	; 0x2c
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd90      	pop	{r4, r7, pc}
 80136a8:	0801b060 	.word	0x0801b060
 80136ac:	0801b104 	.word	0x0801b104
 80136b0:	0801b0b4 	.word	0x0801b0b4
 80136b4:	0801b11c 	.word	0x0801b11c
 80136b8:	200099b8 	.word	0x200099b8
 80136bc:	2000d168 	.word	0x2000d168
 80136c0:	0801b138 	.word	0x0801b138
 80136c4:	200099c8 	.word	0x200099c8

080136c8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d109      	bne.n	80136ec <udp_send+0x24>
 80136d8:	4b11      	ldr	r3, [pc, #68]	; (8013720 <udp_send+0x58>)
 80136da:	f240 12d5 	movw	r2, #469	; 0x1d5
 80136de:	4911      	ldr	r1, [pc, #68]	; (8013724 <udp_send+0x5c>)
 80136e0:	4811      	ldr	r0, [pc, #68]	; (8013728 <udp_send+0x60>)
 80136e2:	f003 fa81 	bl	8016be8 <iprintf>
 80136e6:	f06f 030f 	mvn.w	r3, #15
 80136ea:	e015      	b.n	8013718 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d109      	bne.n	8013706 <udp_send+0x3e>
 80136f2:	4b0b      	ldr	r3, [pc, #44]	; (8013720 <udp_send+0x58>)
 80136f4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80136f8:	490c      	ldr	r1, [pc, #48]	; (801372c <udp_send+0x64>)
 80136fa:	480b      	ldr	r0, [pc, #44]	; (8013728 <udp_send+0x60>)
 80136fc:	f003 fa74 	bl	8016be8 <iprintf>
 8013700:	f06f 030f 	mvn.w	r3, #15
 8013704:	e008      	b.n	8013718 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	1d1a      	adds	r2, r3, #4
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	8a9b      	ldrh	r3, [r3, #20]
 801370e:	6839      	ldr	r1, [r7, #0]
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 f80d 	bl	8013730 <udp_sendto>
 8013716:	4603      	mov	r3, r0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3708      	adds	r7, #8
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	0801b060 	.word	0x0801b060
 8013724:	0801b154 	.word	0x0801b154
 8013728:	0801b0b4 	.word	0x0801b0b4
 801372c:	0801b16c 	.word	0x0801b16c

08013730 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b088      	sub	sp, #32
 8013734:	af02      	add	r7, sp, #8
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
 801373c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d109      	bne.n	8013758 <udp_sendto+0x28>
 8013744:	4b23      	ldr	r3, [pc, #140]	; (80137d4 <udp_sendto+0xa4>)
 8013746:	f44f 7206 	mov.w	r2, #536	; 0x218
 801374a:	4923      	ldr	r1, [pc, #140]	; (80137d8 <udp_sendto+0xa8>)
 801374c:	4823      	ldr	r0, [pc, #140]	; (80137dc <udp_sendto+0xac>)
 801374e:	f003 fa4b 	bl	8016be8 <iprintf>
 8013752:	f06f 030f 	mvn.w	r3, #15
 8013756:	e038      	b.n	80137ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d109      	bne.n	8013772 <udp_sendto+0x42>
 801375e:	4b1d      	ldr	r3, [pc, #116]	; (80137d4 <udp_sendto+0xa4>)
 8013760:	f240 2219 	movw	r2, #537	; 0x219
 8013764:	491e      	ldr	r1, [pc, #120]	; (80137e0 <udp_sendto+0xb0>)
 8013766:	481d      	ldr	r0, [pc, #116]	; (80137dc <udp_sendto+0xac>)
 8013768:	f003 fa3e 	bl	8016be8 <iprintf>
 801376c:	f06f 030f 	mvn.w	r3, #15
 8013770:	e02b      	b.n	80137ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d109      	bne.n	801378c <udp_sendto+0x5c>
 8013778:	4b16      	ldr	r3, [pc, #88]	; (80137d4 <udp_sendto+0xa4>)
 801377a:	f240 221a 	movw	r2, #538	; 0x21a
 801377e:	4919      	ldr	r1, [pc, #100]	; (80137e4 <udp_sendto+0xb4>)
 8013780:	4816      	ldr	r0, [pc, #88]	; (80137dc <udp_sendto+0xac>)
 8013782:	f003 fa31 	bl	8016be8 <iprintf>
 8013786:	f06f 030f 	mvn.w	r3, #15
 801378a:	e01e      	b.n	80137ca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	7a1b      	ldrb	r3, [r3, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d006      	beq.n	80137a2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	7a1b      	ldrb	r3, [r3, #8]
 8013798:	4618      	mov	r0, r3
 801379a:	f7f8 fde5 	bl	800c368 <netif_get_by_index>
 801379e:	6178      	str	r0, [r7, #20]
 80137a0:	e003      	b.n	80137aa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f001 fc28 	bl	8014ff8 <ip4_route>
 80137a8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d102      	bne.n	80137b6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80137b0:	f06f 0303 	mvn.w	r3, #3
 80137b4:	e009      	b.n	80137ca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80137b6:	887a      	ldrh	r2, [r7, #2]
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	4613      	mov	r3, r2
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	68b9      	ldr	r1, [r7, #8]
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	f000 f810 	bl	80137e8 <udp_sendto_if>
 80137c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	0801b060 	.word	0x0801b060
 80137d8:	0801b184 	.word	0x0801b184
 80137dc:	0801b0b4 	.word	0x0801b0b4
 80137e0:	0801b19c 	.word	0x0801b19c
 80137e4:	0801b1b8 	.word	0x0801b1b8

080137e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b088      	sub	sp, #32
 80137ec:	af02      	add	r7, sp, #8
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d109      	bne.n	8013810 <udp_sendto_if+0x28>
 80137fc:	4b2e      	ldr	r3, [pc, #184]	; (80138b8 <udp_sendto_if+0xd0>)
 80137fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013802:	492e      	ldr	r1, [pc, #184]	; (80138bc <udp_sendto_if+0xd4>)
 8013804:	482e      	ldr	r0, [pc, #184]	; (80138c0 <udp_sendto_if+0xd8>)
 8013806:	f003 f9ef 	bl	8016be8 <iprintf>
 801380a:	f06f 030f 	mvn.w	r3, #15
 801380e:	e04f      	b.n	80138b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d109      	bne.n	801382a <udp_sendto_if+0x42>
 8013816:	4b28      	ldr	r3, [pc, #160]	; (80138b8 <udp_sendto_if+0xd0>)
 8013818:	f240 2281 	movw	r2, #641	; 0x281
 801381c:	4929      	ldr	r1, [pc, #164]	; (80138c4 <udp_sendto_if+0xdc>)
 801381e:	4828      	ldr	r0, [pc, #160]	; (80138c0 <udp_sendto_if+0xd8>)
 8013820:	f003 f9e2 	bl	8016be8 <iprintf>
 8013824:	f06f 030f 	mvn.w	r3, #15
 8013828:	e042      	b.n	80138b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d109      	bne.n	8013844 <udp_sendto_if+0x5c>
 8013830:	4b21      	ldr	r3, [pc, #132]	; (80138b8 <udp_sendto_if+0xd0>)
 8013832:	f240 2282 	movw	r2, #642	; 0x282
 8013836:	4924      	ldr	r1, [pc, #144]	; (80138c8 <udp_sendto_if+0xe0>)
 8013838:	4821      	ldr	r0, [pc, #132]	; (80138c0 <udp_sendto_if+0xd8>)
 801383a:	f003 f9d5 	bl	8016be8 <iprintf>
 801383e:	f06f 030f 	mvn.w	r3, #15
 8013842:	e035      	b.n	80138b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013844:	6a3b      	ldr	r3, [r7, #32]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d109      	bne.n	801385e <udp_sendto_if+0x76>
 801384a:	4b1b      	ldr	r3, [pc, #108]	; (80138b8 <udp_sendto_if+0xd0>)
 801384c:	f240 2283 	movw	r2, #643	; 0x283
 8013850:	491e      	ldr	r1, [pc, #120]	; (80138cc <udp_sendto_if+0xe4>)
 8013852:	481b      	ldr	r0, [pc, #108]	; (80138c0 <udp_sendto_if+0xd8>)
 8013854:	f003 f9c8 	bl	8016be8 <iprintf>
 8013858:	f06f 030f 	mvn.w	r3, #15
 801385c:	e028      	b.n	80138b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d009      	beq.n	8013878 <udp_sendto_if+0x90>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d005      	beq.n	8013878 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013874:	2be0      	cmp	r3, #224	; 0xe0
 8013876:	d103      	bne.n	8013880 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013878:	6a3b      	ldr	r3, [r7, #32]
 801387a:	3304      	adds	r3, #4
 801387c:	617b      	str	r3, [r7, #20]
 801387e:	e00b      	b.n	8013898 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	6a3b      	ldr	r3, [r7, #32]
 8013886:	3304      	adds	r3, #4
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	429a      	cmp	r2, r3
 801388c:	d002      	beq.n	8013894 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801388e:	f06f 0303 	mvn.w	r3, #3
 8013892:	e00d      	b.n	80138b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013898:	887a      	ldrh	r2, [r7, #2]
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	6a3b      	ldr	r3, [r7, #32]
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	4613      	mov	r3, r2
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	68b9      	ldr	r1, [r7, #8]
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f000 f811 	bl	80138d0 <udp_sendto_if_src>
 80138ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	0801b060 	.word	0x0801b060
 80138bc:	0801b1d4 	.word	0x0801b1d4
 80138c0:	0801b0b4 	.word	0x0801b0b4
 80138c4:	0801b1f0 	.word	0x0801b1f0
 80138c8:	0801b20c 	.word	0x0801b20c
 80138cc:	0801b22c 	.word	0x0801b22c

080138d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08c      	sub	sp, #48	; 0x30
 80138d4:	af04      	add	r7, sp, #16
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
 80138dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d109      	bne.n	80138f8 <udp_sendto_if_src+0x28>
 80138e4:	4b65      	ldr	r3, [pc, #404]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 80138e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80138ea:	4965      	ldr	r1, [pc, #404]	; (8013a80 <udp_sendto_if_src+0x1b0>)
 80138ec:	4865      	ldr	r0, [pc, #404]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 80138ee:	f003 f97b 	bl	8016be8 <iprintf>
 80138f2:	f06f 030f 	mvn.w	r3, #15
 80138f6:	e0bc      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d109      	bne.n	8013912 <udp_sendto_if_src+0x42>
 80138fe:	4b5f      	ldr	r3, [pc, #380]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 8013900:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013904:	4960      	ldr	r1, [pc, #384]	; (8013a88 <udp_sendto_if_src+0x1b8>)
 8013906:	485f      	ldr	r0, [pc, #380]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 8013908:	f003 f96e 	bl	8016be8 <iprintf>
 801390c:	f06f 030f 	mvn.w	r3, #15
 8013910:	e0af      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d109      	bne.n	801392c <udp_sendto_if_src+0x5c>
 8013918:	4b58      	ldr	r3, [pc, #352]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 801391a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801391e:	495b      	ldr	r1, [pc, #364]	; (8013a8c <udp_sendto_if_src+0x1bc>)
 8013920:	4858      	ldr	r0, [pc, #352]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 8013922:	f003 f961 	bl	8016be8 <iprintf>
 8013926:	f06f 030f 	mvn.w	r3, #15
 801392a:	e0a2      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801392e:	2b00      	cmp	r3, #0
 8013930:	d109      	bne.n	8013946 <udp_sendto_if_src+0x76>
 8013932:	4b52      	ldr	r3, [pc, #328]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 8013934:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013938:	4955      	ldr	r1, [pc, #340]	; (8013a90 <udp_sendto_if_src+0x1c0>)
 801393a:	4852      	ldr	r0, [pc, #328]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 801393c:	f003 f954 	bl	8016be8 <iprintf>
 8013940:	f06f 030f 	mvn.w	r3, #15
 8013944:	e095      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013948:	2b00      	cmp	r3, #0
 801394a:	d109      	bne.n	8013960 <udp_sendto_if_src+0x90>
 801394c:	4b4b      	ldr	r3, [pc, #300]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 801394e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013952:	4950      	ldr	r1, [pc, #320]	; (8013a94 <udp_sendto_if_src+0x1c4>)
 8013954:	484b      	ldr	r0, [pc, #300]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 8013956:	f003 f947 	bl	8016be8 <iprintf>
 801395a:	f06f 030f 	mvn.w	r3, #15
 801395e:	e088      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	8a5b      	ldrh	r3, [r3, #18]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10f      	bne.n	8013988 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013968:	68f9      	ldr	r1, [r7, #12]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	8a5b      	ldrh	r3, [r3, #18]
 801396e:	461a      	mov	r2, r3
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f000 f893 	bl	8013a9c <udp_bind>
 8013976:	4603      	mov	r3, r0
 8013978:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801397a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d002      	beq.n	8013988 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013982:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013986:	e074      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	891b      	ldrh	r3, [r3, #8]
 801398c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013990:	4293      	cmp	r3, r2
 8013992:	d902      	bls.n	801399a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013994:	f04f 33ff 	mov.w	r3, #4294967295
 8013998:	e06b      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801399a:	2108      	movs	r1, #8
 801399c:	68b8      	ldr	r0, [r7, #8]
 801399e:	f7f8 ffdb 	bl	800c958 <pbuf_add_header>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d015      	beq.n	80139d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80139a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139ac:	2108      	movs	r1, #8
 80139ae:	2022      	movs	r0, #34	; 0x22
 80139b0:	f7f8 fd84 	bl	800c4bc <pbuf_alloc>
 80139b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d102      	bne.n	80139c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80139bc:	f04f 33ff 	mov.w	r3, #4294967295
 80139c0:	e057      	b.n	8013a72 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	891b      	ldrh	r3, [r3, #8]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d006      	beq.n	80139d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80139ca:	68b9      	ldr	r1, [r7, #8]
 80139cc:	69f8      	ldr	r0, [r7, #28]
 80139ce:	f7f9 f97d 	bl	800cccc <pbuf_chain>
 80139d2:	e001      	b.n	80139d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	895b      	ldrh	r3, [r3, #10]
 80139dc:	2b07      	cmp	r3, #7
 80139de:	d806      	bhi.n	80139ee <udp_sendto_if_src+0x11e>
 80139e0:	4b26      	ldr	r3, [pc, #152]	; (8013a7c <udp_sendto_if_src+0x1ac>)
 80139e2:	f240 320d 	movw	r2, #781	; 0x30d
 80139e6:	492c      	ldr	r1, [pc, #176]	; (8013a98 <udp_sendto_if_src+0x1c8>)
 80139e8:	4826      	ldr	r0, [pc, #152]	; (8013a84 <udp_sendto_if_src+0x1b4>)
 80139ea:	f003 f8fd 	bl	8016be8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	8a5b      	ldrh	r3, [r3, #18]
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7f7 fc51 	bl	800b2a0 <lwip_htons>
 80139fe:	4603      	mov	r3, r0
 8013a00:	461a      	mov	r2, r3
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013a06:	887b      	ldrh	r3, [r7, #2]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7f7 fc49 	bl	800b2a0 <lwip_htons>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	461a      	mov	r2, r3
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	719a      	strb	r2, [r3, #6]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	891b      	ldrh	r3, [r3, #8]
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f7 fc3b 	bl	800b2a0 <lwip_htons>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013a32:	2311      	movs	r3, #17
 8013a34:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	7adb      	ldrb	r3, [r3, #11]
 8013a3a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	7a9b      	ldrb	r3, [r3, #10]
 8013a40:	7cb9      	ldrb	r1, [r7, #18]
 8013a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a44:	9202      	str	r2, [sp, #8]
 8013a46:	7cfa      	ldrb	r2, [r7, #19]
 8013a48:	9201      	str	r2, [sp, #4]
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	687a      	ldr	r2, [r7, #4]
 8013a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a52:	69f8      	ldr	r0, [r7, #28]
 8013a54:	f001 fcb8 	bl	80153c8 <ip4_output_if_src>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013a5c:	69fa      	ldr	r2, [r7, #28]
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d004      	beq.n	8013a6e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013a64:	69f8      	ldr	r0, [r7, #28]
 8013a66:	f7f9 f80d 	bl	800ca84 <pbuf_free>
    q = NULL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013a6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3720      	adds	r7, #32
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	0801b060 	.word	0x0801b060
 8013a80:	0801b24c 	.word	0x0801b24c
 8013a84:	0801b0b4 	.word	0x0801b0b4
 8013a88:	0801b26c 	.word	0x0801b26c
 8013a8c:	0801b28c 	.word	0x0801b28c
 8013a90:	0801b2b0 	.word	0x0801b2b0
 8013a94:	0801b2d4 	.word	0x0801b2d4
 8013a98:	0801b2f8 	.word	0x0801b2f8

08013a9c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013ab0:	4b39      	ldr	r3, [pc, #228]	; (8013b98 <udp_bind+0xfc>)
 8013ab2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d109      	bne.n	8013ace <udp_bind+0x32>
 8013aba:	4b38      	ldr	r3, [pc, #224]	; (8013b9c <udp_bind+0x100>)
 8013abc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013ac0:	4937      	ldr	r1, [pc, #220]	; (8013ba0 <udp_bind+0x104>)
 8013ac2:	4838      	ldr	r0, [pc, #224]	; (8013ba4 <udp_bind+0x108>)
 8013ac4:	f003 f890 	bl	8016be8 <iprintf>
 8013ac8:	f06f 030f 	mvn.w	r3, #15
 8013acc:	e060      	b.n	8013b90 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ad2:	4b35      	ldr	r3, [pc, #212]	; (8013ba8 <udp_bind+0x10c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	e009      	b.n	8013aee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d102      	bne.n	8013ae8 <udp_bind+0x4c>
      rebind = 1;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8013ae6:	e005      	b.n	8013af4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d1f2      	bne.n	8013ada <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013af4:	88fb      	ldrh	r3, [r7, #6]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d109      	bne.n	8013b0e <udp_bind+0x72>
    port = udp_new_port();
 8013afa:	f7ff fc35 	bl	8013368 <udp_new_port>
 8013afe:	4603      	mov	r3, r0
 8013b00:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013b02:	88fb      	ldrh	r3, [r7, #6]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d12c      	bne.n	8013b62 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013b08:	f06f 0307 	mvn.w	r3, #7
 8013b0c:	e040      	b.n	8013b90 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b0e:	4b26      	ldr	r3, [pc, #152]	; (8013ba8 <udp_bind+0x10c>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	e022      	b.n	8013b5c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013b16:	68fa      	ldr	r2, [r7, #12]
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d01b      	beq.n	8013b56 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	8a5b      	ldrh	r3, [r3, #18]
 8013b22:	88fa      	ldrh	r2, [r7, #6]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d116      	bne.n	8013b56 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	681a      	ldr	r2, [r3, #0]
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d00d      	beq.n	8013b50 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00a      	beq.n	8013b50 <udp_bind+0xb4>
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d006      	beq.n	8013b50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b42:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d102      	bne.n	8013b56 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013b50:	f06f 0307 	mvn.w	r3, #7
 8013b54:	e01c      	b.n	8013b90 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	617b      	str	r3, [r7, #20]
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d1d9      	bne.n	8013b16 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <udp_bind+0xd2>
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	e000      	b.n	8013b70 <udp_bind+0xd4>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	88fa      	ldrh	r2, [r7, #6]
 8013b78:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013b7a:	7cfb      	ldrb	r3, [r7, #19]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d106      	bne.n	8013b8e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013b80:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <udp_bind+0x10c>)
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013b88:	4a07      	ldr	r2, [pc, #28]	; (8013ba8 <udp_bind+0x10c>)
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013b8e:	2300      	movs	r3, #0
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	0801bc74 	.word	0x0801bc74
 8013b9c:	0801b060 	.word	0x0801b060
 8013ba0:	0801b328 	.word	0x0801b328
 8013ba4:	0801b0b4 	.word	0x0801b0b4
 8013ba8:	2000d168 	.word	0x2000d168

08013bac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d109      	bne.n	8013bd4 <udp_connect+0x28>
 8013bc0:	4b2c      	ldr	r3, [pc, #176]	; (8013c74 <udp_connect+0xc8>)
 8013bc2:	f240 4235 	movw	r2, #1077	; 0x435
 8013bc6:	492c      	ldr	r1, [pc, #176]	; (8013c78 <udp_connect+0xcc>)
 8013bc8:	482c      	ldr	r0, [pc, #176]	; (8013c7c <udp_connect+0xd0>)
 8013bca:	f003 f80d 	bl	8016be8 <iprintf>
 8013bce:	f06f 030f 	mvn.w	r3, #15
 8013bd2:	e04b      	b.n	8013c6c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d109      	bne.n	8013bee <udp_connect+0x42>
 8013bda:	4b26      	ldr	r3, [pc, #152]	; (8013c74 <udp_connect+0xc8>)
 8013bdc:	f240 4236 	movw	r2, #1078	; 0x436
 8013be0:	4927      	ldr	r1, [pc, #156]	; (8013c80 <udp_connect+0xd4>)
 8013be2:	4826      	ldr	r0, [pc, #152]	; (8013c7c <udp_connect+0xd0>)
 8013be4:	f003 f800 	bl	8016be8 <iprintf>
 8013be8:	f06f 030f 	mvn.w	r3, #15
 8013bec:	e03e      	b.n	8013c6c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	8a5b      	ldrh	r3, [r3, #18]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d10f      	bne.n	8013c16 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013bf6:	68f9      	ldr	r1, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	8a5b      	ldrh	r3, [r3, #18]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f7ff ff4c 	bl	8013a9c <udp_bind>
 8013c04:	4603      	mov	r3, r0
 8013c06:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013c08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <udp_connect+0x6a>
      return err;
 8013c10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c14:	e02a      	b.n	8013c6c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d002      	beq.n	8013c22 <udp_connect+0x76>
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	e000      	b.n	8013c24 <udp_connect+0x78>
 8013c22:	2300      	movs	r3, #0
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	88fa      	ldrh	r2, [r7, #6]
 8013c2c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	7c1b      	ldrb	r3, [r3, #16]
 8013c32:	f043 0304 	orr.w	r3, r3, #4
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c3c:	4b11      	ldr	r3, [pc, #68]	; (8013c84 <udp_connect+0xd8>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	617b      	str	r3, [r7, #20]
 8013c42:	e008      	b.n	8013c56 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d101      	bne.n	8013c50 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	e00d      	b.n	8013c6c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	617b      	str	r3, [r7, #20]
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d1f3      	bne.n	8013c44 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013c5c:	4b09      	ldr	r3, [pc, #36]	; (8013c84 <udp_connect+0xd8>)
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013c64:	4a07      	ldr	r2, [pc, #28]	; (8013c84 <udp_connect+0xd8>)
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0801b060 	.word	0x0801b060
 8013c78:	0801b340 	.word	0x0801b340
 8013c7c:	0801b0b4 	.word	0x0801b0b4
 8013c80:	0801b35c 	.word	0x0801b35c
 8013c84:	2000d168 	.word	0x2000d168

08013c88 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d107      	bne.n	8013ca6 <udp_disconnect+0x1e>
 8013c96:	4b0d      	ldr	r3, [pc, #52]	; (8013ccc <udp_disconnect+0x44>)
 8013c98:	f240 426a 	movw	r2, #1130	; 0x46a
 8013c9c:	490c      	ldr	r1, [pc, #48]	; (8013cd0 <udp_disconnect+0x48>)
 8013c9e:	480d      	ldr	r0, [pc, #52]	; (8013cd4 <udp_disconnect+0x4c>)
 8013ca0:	f002 ffa2 	bl	8016be8 <iprintf>
 8013ca4:	e00f      	b.n	8013cc6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	7c1b      	ldrb	r3, [r3, #16]
 8013cbc:	f023 0304 	bic.w	r3, r3, #4
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	741a      	strb	r2, [r3, #16]
}
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	0801b060 	.word	0x0801b060
 8013cd0:	0801b378 	.word	0x0801b378
 8013cd4:	0801b0b4 	.word	0x0801b0b4

08013cd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d107      	bne.n	8013cfa <udp_recv+0x22>
 8013cea:	4b08      	ldr	r3, [pc, #32]	; (8013d0c <udp_recv+0x34>)
 8013cec:	f240 428a 	movw	r2, #1162	; 0x48a
 8013cf0:	4907      	ldr	r1, [pc, #28]	; (8013d10 <udp_recv+0x38>)
 8013cf2:	4808      	ldr	r0, [pc, #32]	; (8013d14 <udp_recv+0x3c>)
 8013cf4:	f002 ff78 	bl	8016be8 <iprintf>
 8013cf8:	e005      	b.n	8013d06 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	61da      	str	r2, [r3, #28]
}
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	0801b060 	.word	0x0801b060
 8013d10:	0801b394 	.word	0x0801b394
 8013d14:	0801b0b4 	.word	0x0801b0b4

08013d18 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b084      	sub	sp, #16
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d107      	bne.n	8013d36 <udp_remove+0x1e>
 8013d26:	4b19      	ldr	r3, [pc, #100]	; (8013d8c <udp_remove+0x74>)
 8013d28:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013d2c:	4918      	ldr	r1, [pc, #96]	; (8013d90 <udp_remove+0x78>)
 8013d2e:	4819      	ldr	r0, [pc, #100]	; (8013d94 <udp_remove+0x7c>)
 8013d30:	f002 ff5a 	bl	8016be8 <iprintf>
 8013d34:	e026      	b.n	8013d84 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013d36:	4b18      	ldr	r3, [pc, #96]	; (8013d98 <udp_remove+0x80>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d105      	bne.n	8013d4c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013d40:	4b15      	ldr	r3, [pc, #84]	; (8013d98 <udp_remove+0x80>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	4a14      	ldr	r2, [pc, #80]	; (8013d98 <udp_remove+0x80>)
 8013d48:	6013      	str	r3, [r2, #0]
 8013d4a:	e017      	b.n	8013d7c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013d4c:	4b12      	ldr	r3, [pc, #72]	; (8013d98 <udp_remove+0x80>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	60fb      	str	r3, [r7, #12]
 8013d52:	e010      	b.n	8013d76 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d009      	beq.n	8013d70 <udp_remove+0x58>
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d104      	bne.n	8013d70 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	68da      	ldr	r2, [r3, #12]
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	60da      	str	r2, [r3, #12]
        break;
 8013d6e:	e005      	b.n	8013d7c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	60fb      	str	r3, [r7, #12]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d1eb      	bne.n	8013d54 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013d7c:	6879      	ldr	r1, [r7, #4]
 8013d7e:	2000      	movs	r0, #0
 8013d80:	f7f7 ffdc 	bl	800bd3c <memp_free>
}
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	0801b060 	.word	0x0801b060
 8013d90:	0801b3ac 	.word	0x0801b3ac
 8013d94:	0801b0b4 	.word	0x0801b0b4
 8013d98:	2000d168 	.word	0x2000d168

08013d9c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013da2:	2000      	movs	r0, #0
 8013da4:	f7f7 ff54 	bl	800bc50 <memp_malloc>
 8013da8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d007      	beq.n	8013dc0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013db0:	2220      	movs	r2, #32
 8013db2:	2100      	movs	r1, #0
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f002 ffea 	bl	8016d8e <memset>
    pcb->ttl = UDP_TTL;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	22ff      	movs	r2, #255	; 0xff
 8013dbe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013dc0:	687b      	ldr	r3, [r7, #4]
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b084      	sub	sp, #16
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013dd4:	f7ff ffe2 	bl	8013d9c <udp_new>
 8013dd8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013dda:	68fb      	ldr	r3, [r7, #12]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3710      	adds	r7, #16
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b085      	sub	sp, #20
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d01e      	beq.n	8013e32 <udp_netif_ip_addr_changed+0x4e>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d01a      	beq.n	8013e32 <udp_netif_ip_addr_changed+0x4e>
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d017      	beq.n	8013e32 <udp_netif_ip_addr_changed+0x4e>
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d013      	beq.n	8013e32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e0a:	4b0d      	ldr	r3, [pc, #52]	; (8013e40 <udp_netif_ip_addr_changed+0x5c>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	60fb      	str	r3, [r7, #12]
 8013e10:	e00c      	b.n	8013e2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d103      	bne.n	8013e26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	68db      	ldr	r3, [r3, #12]
 8013e2a:	60fb      	str	r3, [r7, #12]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1ef      	bne.n	8013e12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013e32:	bf00      	nop
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	2000d168 	.word	0x2000d168

08013e44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e4c:	4915      	ldr	r1, [pc, #84]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d013      	beq.n	8013e88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e60:	4910      	ldr	r1, [pc, #64]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	4613      	mov	r3, r2
 8013e66:	005b      	lsls	r3, r3, #1
 8013e68:	4413      	add	r3, r2
 8013e6a:	00db      	lsls	r3, r3, #3
 8013e6c:	440b      	add	r3, r1
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7f8 fe07 	bl	800ca84 <pbuf_free>
    arp_table[i].q = NULL;
 8013e76:	490b      	ldr	r1, [pc, #44]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	005b      	lsls	r3, r3, #1
 8013e7e:	4413      	add	r3, r2
 8013e80:	00db      	lsls	r3, r3, #3
 8013e82:	440b      	add	r3, r1
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e88:	4906      	ldr	r1, [pc, #24]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	440b      	add	r3, r1
 8013e96:	3314      	adds	r3, #20
 8013e98:	2200      	movs	r2, #0
 8013e9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e9c:	bf00      	nop
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	2000d16c 	.word	0x2000d16c

08013ea8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013eae:	2300      	movs	r3, #0
 8013eb0:	607b      	str	r3, [r7, #4]
 8013eb2:	e096      	b.n	8013fe2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013eb4:	494f      	ldr	r1, [pc, #316]	; (8013ff4 <etharp_tmr+0x14c>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3314      	adds	r3, #20
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ec8:	78fb      	ldrb	r3, [r7, #3]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f000 8086 	beq.w	8013fdc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013ed0:	4948      	ldr	r1, [pc, #288]	; (8013ff4 <etharp_tmr+0x14c>)
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	440b      	add	r3, r1
 8013ede:	3312      	adds	r3, #18
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	b298      	uxth	r0, r3
 8013ee6:	4943      	ldr	r1, [pc, #268]	; (8013ff4 <etharp_tmr+0x14c>)
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	4613      	mov	r3, r2
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	4413      	add	r3, r2
 8013ef0:	00db      	lsls	r3, r3, #3
 8013ef2:	440b      	add	r3, r1
 8013ef4:	3312      	adds	r3, #18
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013efa:	493e      	ldr	r1, [pc, #248]	; (8013ff4 <etharp_tmr+0x14c>)
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	4613      	mov	r3, r2
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	4413      	add	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	440b      	add	r3, r1
 8013f08:	3312      	adds	r3, #18
 8013f0a:	881b      	ldrh	r3, [r3, #0]
 8013f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013f10:	d215      	bcs.n	8013f3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f12:	4938      	ldr	r1, [pc, #224]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3314      	adds	r3, #20
 8013f22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d10e      	bne.n	8013f46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f28:	4932      	ldr	r1, [pc, #200]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	440b      	add	r3, r1
 8013f36:	3312      	adds	r3, #18
 8013f38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	d903      	bls.n	8013f46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff ff80 	bl	8013e44 <etharp_free_entry>
 8013f44:	e04a      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f46:	492b      	ldr	r1, [pc, #172]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	4413      	add	r3, r2
 8013f50:	00db      	lsls	r3, r3, #3
 8013f52:	440b      	add	r3, r1
 8013f54:	3314      	adds	r3, #20
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	2b03      	cmp	r3, #3
 8013f5a:	d10a      	bne.n	8013f72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f5c:	4925      	ldr	r1, [pc, #148]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	4613      	mov	r3, r2
 8013f62:	005b      	lsls	r3, r3, #1
 8013f64:	4413      	add	r3, r2
 8013f66:	00db      	lsls	r3, r3, #3
 8013f68:	440b      	add	r3, r1
 8013f6a:	3314      	adds	r3, #20
 8013f6c:	2204      	movs	r2, #4
 8013f6e:	701a      	strb	r2, [r3, #0]
 8013f70:	e034      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f72:	4920      	ldr	r1, [pc, #128]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	440b      	add	r3, r1
 8013f80:	3314      	adds	r3, #20
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	2b04      	cmp	r3, #4
 8013f86:	d10a      	bne.n	8013f9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f88:	491a      	ldr	r1, [pc, #104]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	440b      	add	r3, r1
 8013f96:	3314      	adds	r3, #20
 8013f98:	2202      	movs	r2, #2
 8013f9a:	701a      	strb	r2, [r3, #0]
 8013f9c:	e01e      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f9e:	4915      	ldr	r1, [pc, #84]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	3314      	adds	r3, #20
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d113      	bne.n	8013fdc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013fb4:	490f      	ldr	r1, [pc, #60]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4413      	add	r3, r2
 8013fbe:	00db      	lsls	r3, r3, #3
 8013fc0:	440b      	add	r3, r1
 8013fc2:	3308      	adds	r3, #8
 8013fc4:	6818      	ldr	r0, [r3, #0]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	4613      	mov	r3, r2
 8013fca:	005b      	lsls	r3, r3, #1
 8013fcc:	4413      	add	r3, r2
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	4a08      	ldr	r2, [pc, #32]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fd2:	4413      	add	r3, r2
 8013fd4:	3304      	adds	r3, #4
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	f000 fe6e 	bl	8014cb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	607b      	str	r3, [r7, #4]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b09      	cmp	r3, #9
 8013fe6:	f77f af65 	ble.w	8013eb4 <etharp_tmr+0xc>
      }
    }
  }
}
 8013fea:	bf00      	nop
 8013fec:	bf00      	nop
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	2000d16c 	.word	0x2000d16c

08013ff8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	460b      	mov	r3, r1
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014006:	230a      	movs	r3, #10
 8014008:	84fb      	strh	r3, [r7, #38]	; 0x26
 801400a:	230a      	movs	r3, #10
 801400c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801400e:	230a      	movs	r3, #10
 8014010:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014016:	230a      	movs	r3, #10
 8014018:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801401a:	2300      	movs	r3, #0
 801401c:	83bb      	strh	r3, [r7, #28]
 801401e:	2300      	movs	r3, #0
 8014020:	837b      	strh	r3, [r7, #26]
 8014022:	2300      	movs	r3, #0
 8014024:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014026:	2300      	movs	r3, #0
 8014028:	843b      	strh	r3, [r7, #32]
 801402a:	e0ae      	b.n	801418a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801402c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014030:	49a6      	ldr	r1, [pc, #664]	; (80142cc <etharp_find_entry+0x2d4>)
 8014032:	4613      	mov	r3, r2
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
 8014038:	00db      	lsls	r3, r3, #3
 801403a:	440b      	add	r3, r1
 801403c:	3314      	adds	r3, #20
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014046:	2b0a      	cmp	r3, #10
 8014048:	d105      	bne.n	8014056 <etharp_find_entry+0x5e>
 801404a:	7dfb      	ldrb	r3, [r7, #23]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014050:	8c3b      	ldrh	r3, [r7, #32]
 8014052:	847b      	strh	r3, [r7, #34]	; 0x22
 8014054:	e095      	b.n	8014182 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014056:	7dfb      	ldrb	r3, [r7, #23]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f000 8092 	beq.w	8014182 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801405e:	7dfb      	ldrb	r3, [r7, #23]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d009      	beq.n	8014078 <etharp_find_entry+0x80>
 8014064:	7dfb      	ldrb	r3, [r7, #23]
 8014066:	2b01      	cmp	r3, #1
 8014068:	d806      	bhi.n	8014078 <etharp_find_entry+0x80>
 801406a:	4b99      	ldr	r3, [pc, #612]	; (80142d0 <etharp_find_entry+0x2d8>)
 801406c:	f240 1223 	movw	r2, #291	; 0x123
 8014070:	4998      	ldr	r1, [pc, #608]	; (80142d4 <etharp_find_entry+0x2dc>)
 8014072:	4899      	ldr	r0, [pc, #612]	; (80142d8 <etharp_find_entry+0x2e0>)
 8014074:	f002 fdb8 	bl	8016be8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d020      	beq.n	80140c0 <etharp_find_entry+0xc8>
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6819      	ldr	r1, [r3, #0]
 8014082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014086:	4891      	ldr	r0, [pc, #580]	; (80142cc <etharp_find_entry+0x2d4>)
 8014088:	4613      	mov	r3, r2
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	4413      	add	r3, r2
 801408e:	00db      	lsls	r3, r3, #3
 8014090:	4403      	add	r3, r0
 8014092:	3304      	adds	r3, #4
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	4299      	cmp	r1, r3
 8014098:	d112      	bne.n	80140c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00c      	beq.n	80140ba <etharp_find_entry+0xc2>
 80140a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140a4:	4989      	ldr	r1, [pc, #548]	; (80142cc <etharp_find_entry+0x2d4>)
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	3308      	adds	r3, #8
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d102      	bne.n	80140c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80140ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140be:	e100      	b.n	80142c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80140c0:	7dfb      	ldrb	r3, [r7, #23]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d140      	bne.n	8014148 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80140c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ca:	4980      	ldr	r1, [pc, #512]	; (80142cc <etharp_find_entry+0x2d4>)
 80140cc:	4613      	mov	r3, r2
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	4413      	add	r3, r2
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	440b      	add	r3, r1
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d01a      	beq.n	8014112 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80140dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e0:	497a      	ldr	r1, [pc, #488]	; (80142cc <etharp_find_entry+0x2d4>)
 80140e2:	4613      	mov	r3, r2
 80140e4:	005b      	lsls	r3, r3, #1
 80140e6:	4413      	add	r3, r2
 80140e8:	00db      	lsls	r3, r3, #3
 80140ea:	440b      	add	r3, r1
 80140ec:	3312      	adds	r3, #18
 80140ee:	881b      	ldrh	r3, [r3, #0]
 80140f0:	8bba      	ldrh	r2, [r7, #28]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d845      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_queue = i;
 80140f6:	8c3b      	ldrh	r3, [r7, #32]
 80140f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80140fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140fe:	4973      	ldr	r1, [pc, #460]	; (80142cc <etharp_find_entry+0x2d4>)
 8014100:	4613      	mov	r3, r2
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	4413      	add	r3, r2
 8014106:	00db      	lsls	r3, r3, #3
 8014108:	440b      	add	r3, r1
 801410a:	3312      	adds	r3, #18
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	83bb      	strh	r3, [r7, #28]
 8014110:	e037      	b.n	8014182 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014116:	496d      	ldr	r1, [pc, #436]	; (80142cc <etharp_find_entry+0x2d4>)
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3312      	adds	r3, #18
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	8b7a      	ldrh	r2, [r7, #26]
 8014128:	429a      	cmp	r2, r3
 801412a:	d82a      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_pending = i;
 801412c:	8c3b      	ldrh	r3, [r7, #32]
 801412e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014134:	4965      	ldr	r1, [pc, #404]	; (80142cc <etharp_find_entry+0x2d4>)
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	3312      	adds	r3, #18
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	837b      	strh	r3, [r7, #26]
 8014146:	e01c      	b.n	8014182 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014148:	7dfb      	ldrb	r3, [r7, #23]
 801414a:	2b01      	cmp	r3, #1
 801414c:	d919      	bls.n	8014182 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801414e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014152:	495e      	ldr	r1, [pc, #376]	; (80142cc <etharp_find_entry+0x2d4>)
 8014154:	4613      	mov	r3, r2
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	4413      	add	r3, r2
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	440b      	add	r3, r1
 801415e:	3312      	adds	r3, #18
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	8b3a      	ldrh	r2, [r7, #24]
 8014164:	429a      	cmp	r2, r3
 8014166:	d80c      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_stable = i;
 8014168:	8c3b      	ldrh	r3, [r7, #32]
 801416a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801416c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014170:	4956      	ldr	r1, [pc, #344]	; (80142cc <etharp_find_entry+0x2d4>)
 8014172:	4613      	mov	r3, r2
 8014174:	005b      	lsls	r3, r3, #1
 8014176:	4413      	add	r3, r2
 8014178:	00db      	lsls	r3, r3, #3
 801417a:	440b      	add	r3, r1
 801417c:	3312      	adds	r3, #18
 801417e:	881b      	ldrh	r3, [r3, #0]
 8014180:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014182:	8c3b      	ldrh	r3, [r7, #32]
 8014184:	3301      	adds	r3, #1
 8014186:	b29b      	uxth	r3, r3
 8014188:	843b      	strh	r3, [r7, #32]
 801418a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801418e:	2b09      	cmp	r3, #9
 8014190:	f77f af4c 	ble.w	801402c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014194:	7afb      	ldrb	r3, [r7, #11]
 8014196:	f003 0302 	and.w	r3, r3, #2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d108      	bne.n	80141b0 <etharp_find_entry+0x1b8>
 801419e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141a2:	2b0a      	cmp	r3, #10
 80141a4:	d107      	bne.n	80141b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141a6:	7afb      	ldrb	r3, [r7, #11]
 80141a8:	f003 0301 	and.w	r3, r3, #1
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d102      	bne.n	80141b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141b0:	f04f 33ff 	mov.w	r3, #4294967295
 80141b4:	e085      	b.n	80142c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80141b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141ba:	2b09      	cmp	r3, #9
 80141bc:	dc02      	bgt.n	80141c4 <etharp_find_entry+0x1cc>
    i = empty;
 80141be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141c0:	843b      	strh	r3, [r7, #32]
 80141c2:	e039      	b.n	8014238 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80141c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80141c8:	2b09      	cmp	r3, #9
 80141ca:	dc14      	bgt.n	80141f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80141cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80141d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d4:	493d      	ldr	r1, [pc, #244]	; (80142cc <etharp_find_entry+0x2d4>)
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	440b      	add	r3, r1
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d018      	beq.n	8014218 <etharp_find_entry+0x220>
 80141e6:	4b3a      	ldr	r3, [pc, #232]	; (80142d0 <etharp_find_entry+0x2d8>)
 80141e8:	f240 126d 	movw	r2, #365	; 0x16d
 80141ec:	493b      	ldr	r1, [pc, #236]	; (80142dc <etharp_find_entry+0x2e4>)
 80141ee:	483a      	ldr	r0, [pc, #232]	; (80142d8 <etharp_find_entry+0x2e0>)
 80141f0:	f002 fcfa 	bl	8016be8 <iprintf>
 80141f4:	e010      	b.n	8014218 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80141f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80141fa:	2b09      	cmp	r3, #9
 80141fc:	dc02      	bgt.n	8014204 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80141fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014200:	843b      	strh	r3, [r7, #32]
 8014202:	e009      	b.n	8014218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014204:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014208:	2b09      	cmp	r3, #9
 801420a:	dc02      	bgt.n	8014212 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801420c:	8bfb      	ldrh	r3, [r7, #30]
 801420e:	843b      	strh	r3, [r7, #32]
 8014210:	e002      	b.n	8014218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014212:	f04f 33ff 	mov.w	r3, #4294967295
 8014216:	e054      	b.n	80142c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014218:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801421c:	2b09      	cmp	r3, #9
 801421e:	dd06      	ble.n	801422e <etharp_find_entry+0x236>
 8014220:	4b2b      	ldr	r3, [pc, #172]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014222:	f240 127f 	movw	r2, #383	; 0x17f
 8014226:	492e      	ldr	r1, [pc, #184]	; (80142e0 <etharp_find_entry+0x2e8>)
 8014228:	482b      	ldr	r0, [pc, #172]	; (80142d8 <etharp_find_entry+0x2e0>)
 801422a:	f002 fcdd 	bl	8016be8 <iprintf>
    etharp_free_entry(i);
 801422e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014232:	4618      	mov	r0, r3
 8014234:	f7ff fe06 	bl	8013e44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014238:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801423c:	2b09      	cmp	r3, #9
 801423e:	dd06      	ble.n	801424e <etharp_find_entry+0x256>
 8014240:	4b23      	ldr	r3, [pc, #140]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014242:	f240 1283 	movw	r2, #387	; 0x183
 8014246:	4926      	ldr	r1, [pc, #152]	; (80142e0 <etharp_find_entry+0x2e8>)
 8014248:	4823      	ldr	r0, [pc, #140]	; (80142d8 <etharp_find_entry+0x2e0>)
 801424a:	f002 fccd 	bl	8016be8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801424e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014252:	491e      	ldr	r1, [pc, #120]	; (80142cc <etharp_find_entry+0x2d4>)
 8014254:	4613      	mov	r3, r2
 8014256:	005b      	lsls	r3, r3, #1
 8014258:	4413      	add	r3, r2
 801425a:	00db      	lsls	r3, r3, #3
 801425c:	440b      	add	r3, r1
 801425e:	3314      	adds	r3, #20
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d006      	beq.n	8014274 <etharp_find_entry+0x27c>
 8014266:	4b1a      	ldr	r3, [pc, #104]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014268:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801426c:	491d      	ldr	r1, [pc, #116]	; (80142e4 <etharp_find_entry+0x2ec>)
 801426e:	481a      	ldr	r0, [pc, #104]	; (80142d8 <etharp_find_entry+0x2e0>)
 8014270:	f002 fcba 	bl	8016be8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00b      	beq.n	8014292 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801427a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6819      	ldr	r1, [r3, #0]
 8014282:	4812      	ldr	r0, [pc, #72]	; (80142cc <etharp_find_entry+0x2d4>)
 8014284:	4613      	mov	r3, r2
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	4413      	add	r3, r2
 801428a:	00db      	lsls	r3, r3, #3
 801428c:	4403      	add	r3, r0
 801428e:	3304      	adds	r3, #4
 8014290:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014296:	490d      	ldr	r1, [pc, #52]	; (80142cc <etharp_find_entry+0x2d4>)
 8014298:	4613      	mov	r3, r2
 801429a:	005b      	lsls	r3, r3, #1
 801429c:	4413      	add	r3, r2
 801429e:	00db      	lsls	r3, r3, #3
 80142a0:	440b      	add	r3, r1
 80142a2:	3312      	adds	r3, #18
 80142a4:	2200      	movs	r2, #0
 80142a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ac:	4907      	ldr	r1, [pc, #28]	; (80142cc <etharp_find_entry+0x2d4>)
 80142ae:	4613      	mov	r3, r2
 80142b0:	005b      	lsls	r3, r3, #1
 80142b2:	4413      	add	r3, r2
 80142b4:	00db      	lsls	r3, r3, #3
 80142b6:	440b      	add	r3, r1
 80142b8:	3308      	adds	r3, #8
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3728      	adds	r7, #40	; 0x28
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	2000d16c 	.word	0x2000d16c
 80142d0:	0801b3c4 	.word	0x0801b3c4
 80142d4:	0801b3fc 	.word	0x0801b3fc
 80142d8:	0801b43c 	.word	0x0801b43c
 80142dc:	0801b464 	.word	0x0801b464
 80142e0:	0801b47c 	.word	0x0801b47c
 80142e4:	0801b490 	.word	0x0801b490

080142e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
 80142f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80142fc:	2b06      	cmp	r3, #6
 80142fe:	d006      	beq.n	801430e <etharp_update_arp_entry+0x26>
 8014300:	4b48      	ldr	r3, [pc, #288]	; (8014424 <etharp_update_arp_entry+0x13c>)
 8014302:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014306:	4948      	ldr	r1, [pc, #288]	; (8014428 <etharp_update_arp_entry+0x140>)
 8014308:	4848      	ldr	r0, [pc, #288]	; (801442c <etharp_update_arp_entry+0x144>)
 801430a:	f002 fc6d 	bl	8016be8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d012      	beq.n	801433a <etharp_update_arp_entry+0x52>
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00e      	beq.n	801433a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	68f9      	ldr	r1, [r7, #12]
 8014322:	4618      	mov	r0, r3
 8014324:	f001 f8fe 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8014328:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801432a:	2b00      	cmp	r3, #0
 801432c:	d105      	bne.n	801433a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014336:	2be0      	cmp	r3, #224	; 0xe0
 8014338:	d102      	bne.n	8014340 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801433a:	f06f 030f 	mvn.w	r3, #15
 801433e:	e06c      	b.n	801441a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014340:	78fb      	ldrb	r3, [r7, #3]
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	4619      	mov	r1, r3
 8014346:	68b8      	ldr	r0, [r7, #8]
 8014348:	f7ff fe56 	bl	8013ff8 <etharp_find_entry>
 801434c:	4603      	mov	r3, r0
 801434e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014354:	2b00      	cmp	r3, #0
 8014356:	da02      	bge.n	801435e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014358:	8afb      	ldrh	r3, [r7, #22]
 801435a:	b25b      	sxtb	r3, r3
 801435c:	e05d      	b.n	801441a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801435e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014362:	4933      	ldr	r1, [pc, #204]	; (8014430 <etharp_update_arp_entry+0x148>)
 8014364:	4613      	mov	r3, r2
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	440b      	add	r3, r1
 801436e:	3314      	adds	r3, #20
 8014370:	2202      	movs	r2, #2
 8014372:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014378:	492d      	ldr	r1, [pc, #180]	; (8014430 <etharp_update_arp_entry+0x148>)
 801437a:	4613      	mov	r3, r2
 801437c:	005b      	lsls	r3, r3, #1
 801437e:	4413      	add	r3, r2
 8014380:	00db      	lsls	r3, r3, #3
 8014382:	440b      	add	r3, r1
 8014384:	3308      	adds	r3, #8
 8014386:	68fa      	ldr	r2, [r7, #12]
 8014388:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801438a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801438e:	4613      	mov	r3, r2
 8014390:	005b      	lsls	r3, r3, #1
 8014392:	4413      	add	r3, r2
 8014394:	00db      	lsls	r3, r3, #3
 8014396:	3308      	adds	r3, #8
 8014398:	4a25      	ldr	r2, [pc, #148]	; (8014430 <etharp_update_arp_entry+0x148>)
 801439a:	4413      	add	r3, r2
 801439c:	3304      	adds	r3, #4
 801439e:	2206      	movs	r2, #6
 80143a0:	6879      	ldr	r1, [r7, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f002 fde1 	bl	8016f6a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ac:	4920      	ldr	r1, [pc, #128]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	440b      	add	r3, r1
 80143b8:	3312      	adds	r3, #18
 80143ba:	2200      	movs	r2, #0
 80143bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143c2:	491b      	ldr	r1, [pc, #108]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143c4:	4613      	mov	r3, r2
 80143c6:	005b      	lsls	r3, r3, #1
 80143c8:	4413      	add	r3, r2
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	440b      	add	r3, r1
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d021      	beq.n	8014418 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80143d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143d8:	4915      	ldr	r1, [pc, #84]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80143e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ec:	4910      	ldr	r1, [pc, #64]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143ee:	4613      	mov	r3, r2
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4413      	add	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	2200      	movs	r2, #0
 80143fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014406:	9300      	str	r3, [sp, #0]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6939      	ldr	r1, [r7, #16]
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f002 f8c1 	bl	8016594 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014412:	6938      	ldr	r0, [r7, #16]
 8014414:	f7f8 fb36 	bl	800ca84 <pbuf_free>
  }
  return ERR_OK;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3718      	adds	r7, #24
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	0801b3c4 	.word	0x0801b3c4
 8014428:	0801b4bc 	.word	0x0801b4bc
 801442c:	0801b43c 	.word	0x0801b43c
 8014430:	2000d16c 	.word	0x2000d16c

08014434 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801443c:	2300      	movs	r3, #0
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	e01e      	b.n	8014480 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014442:	4913      	ldr	r1, [pc, #76]	; (8014490 <etharp_cleanup_netif+0x5c>)
 8014444:	68fa      	ldr	r2, [r7, #12]
 8014446:	4613      	mov	r3, r2
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4413      	add	r3, r2
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	440b      	add	r3, r1
 8014450:	3314      	adds	r3, #20
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014456:	7afb      	ldrb	r3, [r7, #11]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <etharp_cleanup_netif+0x46>
 801445c:	490c      	ldr	r1, [pc, #48]	; (8014490 <etharp_cleanup_netif+0x5c>)
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	4613      	mov	r3, r2
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	4413      	add	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	440b      	add	r3, r1
 801446a:	3308      	adds	r3, #8
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	429a      	cmp	r2, r3
 8014472:	d102      	bne.n	801447a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f7ff fce5 	bl	8013e44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	3301      	adds	r3, #1
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2b09      	cmp	r3, #9
 8014484:	dddd      	ble.n	8014442 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014486:	bf00      	nop
 8014488:	bf00      	nop
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	2000d16c 	.word	0x2000d16c

08014494 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014494:	b5b0      	push	{r4, r5, r7, lr}
 8014496:	b08a      	sub	sp, #40	; 0x28
 8014498:	af04      	add	r7, sp, #16
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d107      	bne.n	80144b4 <etharp_input+0x20>
 80144a4:	4b3d      	ldr	r3, [pc, #244]	; (801459c <etharp_input+0x108>)
 80144a6:	f240 228a 	movw	r2, #650	; 0x28a
 80144aa:	493d      	ldr	r1, [pc, #244]	; (80145a0 <etharp_input+0x10c>)
 80144ac:	483d      	ldr	r0, [pc, #244]	; (80145a4 <etharp_input+0x110>)
 80144ae:	f002 fb9b 	bl	8016be8 <iprintf>
 80144b2:	e06f      	b.n	8014594 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	881b      	ldrh	r3, [r3, #0]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144c4:	d10c      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144ca:	2b06      	cmp	r3, #6
 80144cc:	d108      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144d2:	2b04      	cmp	r3, #4
 80144d4:	d104      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	885b      	ldrh	r3, [r3, #2]
 80144da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144dc:	2b08      	cmp	r3, #8
 80144de:	d003      	beq.n	80144e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7f8 facf 	bl	800ca84 <pbuf_free>
    return;
 80144e6:	e055      	b.n	8014594 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	330e      	adds	r3, #14
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	3318      	adds	r3, #24
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	3304      	adds	r3, #4
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d102      	bne.n	8014508 <etharp_input+0x74>
    for_us = 0;
 8014502:	2300      	movs	r3, #0
 8014504:	75fb      	strb	r3, [r7, #23]
 8014506:	e009      	b.n	801451c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	3304      	adds	r3, #4
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	429a      	cmp	r2, r3
 8014512:	bf0c      	ite	eq
 8014514:	2301      	moveq	r3, #1
 8014516:	2300      	movne	r3, #0
 8014518:	b2db      	uxtb	r3, r3
 801451a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f103 0208 	add.w	r2, r3, #8
 8014522:	7dfb      	ldrb	r3, [r7, #23]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <etharp_input+0x98>
 8014528:	2301      	movs	r3, #1
 801452a:	e000      	b.n	801452e <etharp_input+0x9a>
 801452c:	2302      	movs	r3, #2
 801452e:	f107 010c 	add.w	r1, r7, #12
 8014532:	6838      	ldr	r0, [r7, #0]
 8014534:	f7ff fed8 	bl	80142e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	88db      	ldrh	r3, [r3, #6]
 801453c:	b29b      	uxth	r3, r3
 801453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014542:	d003      	beq.n	801454c <etharp_input+0xb8>
 8014544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014548:	d01e      	beq.n	8014588 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801454a:	e020      	b.n	801458e <etharp_input+0xfa>
      if (for_us) {
 801454c:	7dfb      	ldrb	r3, [r7, #23]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d01c      	beq.n	801458c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014568:	693a      	ldr	r2, [r7, #16]
 801456a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801456c:	2102      	movs	r1, #2
 801456e:	9103      	str	r1, [sp, #12]
 8014570:	f107 010c 	add.w	r1, r7, #12
 8014574:	9102      	str	r1, [sp, #8]
 8014576:	9201      	str	r2, [sp, #4]
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	462b      	mov	r3, r5
 801457c:	4622      	mov	r2, r4
 801457e:	4601      	mov	r1, r0
 8014580:	6838      	ldr	r0, [r7, #0]
 8014582:	f000 faeb 	bl	8014b5c <etharp_raw>
      break;
 8014586:	e001      	b.n	801458c <etharp_input+0xf8>
      break;
 8014588:	bf00      	nop
 801458a:	e000      	b.n	801458e <etharp_input+0xfa>
      break;
 801458c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7f8 fa78 	bl	800ca84 <pbuf_free>
}
 8014594:	3718      	adds	r7, #24
 8014596:	46bd      	mov	sp, r7
 8014598:	bdb0      	pop	{r4, r5, r7, pc}
 801459a:	bf00      	nop
 801459c:	0801b3c4 	.word	0x0801b3c4
 80145a0:	0801b514 	.word	0x0801b514
 80145a4:	0801b43c 	.word	0x0801b43c

080145a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af02      	add	r7, sp, #8
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	4613      	mov	r3, r2
 80145b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80145b6:	79fa      	ldrb	r2, [r7, #7]
 80145b8:	4944      	ldr	r1, [pc, #272]	; (80146cc <etharp_output_to_arp_index+0x124>)
 80145ba:	4613      	mov	r3, r2
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4413      	add	r3, r2
 80145c0:	00db      	lsls	r3, r3, #3
 80145c2:	440b      	add	r3, r1
 80145c4:	3314      	adds	r3, #20
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	2b01      	cmp	r3, #1
 80145ca:	d806      	bhi.n	80145da <etharp_output_to_arp_index+0x32>
 80145cc:	4b40      	ldr	r3, [pc, #256]	; (80146d0 <etharp_output_to_arp_index+0x128>)
 80145ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80145d2:	4940      	ldr	r1, [pc, #256]	; (80146d4 <etharp_output_to_arp_index+0x12c>)
 80145d4:	4840      	ldr	r0, [pc, #256]	; (80146d8 <etharp_output_to_arp_index+0x130>)
 80145d6:	f002 fb07 	bl	8016be8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80145da:	79fa      	ldrb	r2, [r7, #7]
 80145dc:	493b      	ldr	r1, [pc, #236]	; (80146cc <etharp_output_to_arp_index+0x124>)
 80145de:	4613      	mov	r3, r2
 80145e0:	005b      	lsls	r3, r3, #1
 80145e2:	4413      	add	r3, r2
 80145e4:	00db      	lsls	r3, r3, #3
 80145e6:	440b      	add	r3, r1
 80145e8:	3314      	adds	r3, #20
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b02      	cmp	r3, #2
 80145ee:	d153      	bne.n	8014698 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80145f0:	79fa      	ldrb	r2, [r7, #7]
 80145f2:	4936      	ldr	r1, [pc, #216]	; (80146cc <etharp_output_to_arp_index+0x124>)
 80145f4:	4613      	mov	r3, r2
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	4413      	add	r3, r2
 80145fa:	00db      	lsls	r3, r3, #3
 80145fc:	440b      	add	r3, r1
 80145fe:	3312      	adds	r3, #18
 8014600:	881b      	ldrh	r3, [r3, #0]
 8014602:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014606:	d919      	bls.n	801463c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014608:	79fa      	ldrb	r2, [r7, #7]
 801460a:	4613      	mov	r3, r2
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	4413      	add	r3, r2
 8014610:	00db      	lsls	r3, r3, #3
 8014612:	4a2e      	ldr	r2, [pc, #184]	; (80146cc <etharp_output_to_arp_index+0x124>)
 8014614:	4413      	add	r3, r2
 8014616:	3304      	adds	r3, #4
 8014618:	4619      	mov	r1, r3
 801461a:	68f8      	ldr	r0, [r7, #12]
 801461c:	f000 fb4c 	bl	8014cb8 <etharp_request>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d138      	bne.n	8014698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014626:	79fa      	ldrb	r2, [r7, #7]
 8014628:	4928      	ldr	r1, [pc, #160]	; (80146cc <etharp_output_to_arp_index+0x124>)
 801462a:	4613      	mov	r3, r2
 801462c:	005b      	lsls	r3, r3, #1
 801462e:	4413      	add	r3, r2
 8014630:	00db      	lsls	r3, r3, #3
 8014632:	440b      	add	r3, r1
 8014634:	3314      	adds	r3, #20
 8014636:	2203      	movs	r2, #3
 8014638:	701a      	strb	r2, [r3, #0]
 801463a:	e02d      	b.n	8014698 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801463c:	79fa      	ldrb	r2, [r7, #7]
 801463e:	4923      	ldr	r1, [pc, #140]	; (80146cc <etharp_output_to_arp_index+0x124>)
 8014640:	4613      	mov	r3, r2
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	440b      	add	r3, r1
 801464a:	3312      	adds	r3, #18
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014652:	d321      	bcc.n	8014698 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014654:	79fa      	ldrb	r2, [r7, #7]
 8014656:	4613      	mov	r3, r2
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	4413      	add	r3, r2
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	4a1b      	ldr	r2, [pc, #108]	; (80146cc <etharp_output_to_arp_index+0x124>)
 8014660:	4413      	add	r3, r2
 8014662:	1d19      	adds	r1, r3, #4
 8014664:	79fa      	ldrb	r2, [r7, #7]
 8014666:	4613      	mov	r3, r2
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	4413      	add	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	3308      	adds	r3, #8
 8014670:	4a16      	ldr	r2, [pc, #88]	; (80146cc <etharp_output_to_arp_index+0x124>)
 8014672:	4413      	add	r3, r2
 8014674:	3304      	adds	r3, #4
 8014676:	461a      	mov	r2, r3
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 fafb 	bl	8014c74 <etharp_request_dst>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d109      	bne.n	8014698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014684:	79fa      	ldrb	r2, [r7, #7]
 8014686:	4911      	ldr	r1, [pc, #68]	; (80146cc <etharp_output_to_arp_index+0x124>)
 8014688:	4613      	mov	r3, r2
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	4413      	add	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	440b      	add	r3, r1
 8014692:	3314      	adds	r3, #20
 8014694:	2203      	movs	r2, #3
 8014696:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801469e:	79fa      	ldrb	r2, [r7, #7]
 80146a0:	4613      	mov	r3, r2
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	4413      	add	r3, r2
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	3308      	adds	r3, #8
 80146aa:	4a08      	ldr	r2, [pc, #32]	; (80146cc <etharp_output_to_arp_index+0x124>)
 80146ac:	4413      	add	r3, r2
 80146ae:	3304      	adds	r3, #4
 80146b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146b4:	9200      	str	r2, [sp, #0]
 80146b6:	460a      	mov	r2, r1
 80146b8:	68b9      	ldr	r1, [r7, #8]
 80146ba:	68f8      	ldr	r0, [r7, #12]
 80146bc:	f001 ff6a 	bl	8016594 <ethernet_output>
 80146c0:	4603      	mov	r3, r0
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3710      	adds	r7, #16
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	2000d16c 	.word	0x2000d16c
 80146d0:	0801b3c4 	.word	0x0801b3c4
 80146d4:	0801b534 	.word	0x0801b534
 80146d8:	0801b43c 	.word	0x0801b43c

080146dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af02      	add	r7, sp, #8
 80146e2:	60f8      	str	r0, [r7, #12]
 80146e4:	60b9      	str	r1, [r7, #8]
 80146e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <etharp_output+0x24>
 80146f2:	4b73      	ldr	r3, [pc, #460]	; (80148c0 <etharp_output+0x1e4>)
 80146f4:	f240 321e 	movw	r2, #798	; 0x31e
 80146f8:	4972      	ldr	r1, [pc, #456]	; (80148c4 <etharp_output+0x1e8>)
 80146fa:	4873      	ldr	r0, [pc, #460]	; (80148c8 <etharp_output+0x1ec>)
 80146fc:	f002 fa74 	bl	8016be8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d106      	bne.n	8014714 <etharp_output+0x38>
 8014706:	4b6e      	ldr	r3, [pc, #440]	; (80148c0 <etharp_output+0x1e4>)
 8014708:	f240 321f 	movw	r2, #799	; 0x31f
 801470c:	496f      	ldr	r1, [pc, #444]	; (80148cc <etharp_output+0x1f0>)
 801470e:	486e      	ldr	r0, [pc, #440]	; (80148c8 <etharp_output+0x1ec>)
 8014710:	f002 fa6a 	bl	8016be8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d106      	bne.n	8014728 <etharp_output+0x4c>
 801471a:	4b69      	ldr	r3, [pc, #420]	; (80148c0 <etharp_output+0x1e4>)
 801471c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014720:	496b      	ldr	r1, [pc, #428]	; (80148d0 <etharp_output+0x1f4>)
 8014722:	4869      	ldr	r0, [pc, #420]	; (80148c8 <etharp_output+0x1ec>)
 8014724:	f002 fa60 	bl	8016be8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	68f9      	ldr	r1, [r7, #12]
 801472e:	4618      	mov	r0, r3
 8014730:	f000 fef8 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8014734:	4603      	mov	r3, r0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d002      	beq.n	8014740 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801473a:	4b66      	ldr	r3, [pc, #408]	; (80148d4 <etharp_output+0x1f8>)
 801473c:	61fb      	str	r3, [r7, #28]
 801473e:	e0af      	b.n	80148a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014748:	2be0      	cmp	r3, #224	; 0xe0
 801474a:	d118      	bne.n	801477e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801474c:	2301      	movs	r3, #1
 801474e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014750:	2300      	movs	r3, #0
 8014752:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014754:	235e      	movs	r3, #94	; 0x5e
 8014756:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	3301      	adds	r3, #1
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014762:	b2db      	uxtb	r3, r3
 8014764:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	3302      	adds	r3, #2
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	3303      	adds	r3, #3
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014776:	f107 0310 	add.w	r3, r7, #16
 801477a:	61fb      	str	r3, [r7, #28]
 801477c:	e090      	b.n	80148a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	3304      	adds	r3, #4
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	405a      	eors	r2, r3
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	3308      	adds	r3, #8
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	4013      	ands	r3, r2
 8014792:	2b00      	cmp	r3, #0
 8014794:	d012      	beq.n	80147bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801479c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d00b      	beq.n	80147bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	330c      	adds	r3, #12
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d003      	beq.n	80147b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	330c      	adds	r3, #12
 80147b2:	61bb      	str	r3, [r7, #24]
 80147b4:	e002      	b.n	80147bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147b6:	f06f 0303 	mvn.w	r3, #3
 80147ba:	e07d      	b.n	80148b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147bc:	4b46      	ldr	r3, [pc, #280]	; (80148d8 <etharp_output+0x1fc>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	4619      	mov	r1, r3
 80147c2:	4a46      	ldr	r2, [pc, #280]	; (80148dc <etharp_output+0x200>)
 80147c4:	460b      	mov	r3, r1
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	440b      	add	r3, r1
 80147ca:	00db      	lsls	r3, r3, #3
 80147cc:	4413      	add	r3, r2
 80147ce:	3314      	adds	r3, #20
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d925      	bls.n	8014822 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147d6:	4b40      	ldr	r3, [pc, #256]	; (80148d8 <etharp_output+0x1fc>)
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	4619      	mov	r1, r3
 80147dc:	4a3f      	ldr	r2, [pc, #252]	; (80148dc <etharp_output+0x200>)
 80147de:	460b      	mov	r3, r1
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	440b      	add	r3, r1
 80147e4:	00db      	lsls	r3, r3, #3
 80147e6:	4413      	add	r3, r2
 80147e8:	3308      	adds	r3, #8
 80147ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d117      	bne.n	8014822 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	4b38      	ldr	r3, [pc, #224]	; (80148d8 <etharp_output+0x1fc>)
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	4618      	mov	r0, r3
 80147fc:	4937      	ldr	r1, [pc, #220]	; (80148dc <etharp_output+0x200>)
 80147fe:	4603      	mov	r3, r0
 8014800:	005b      	lsls	r3, r3, #1
 8014802:	4403      	add	r3, r0
 8014804:	00db      	lsls	r3, r3, #3
 8014806:	440b      	add	r3, r1
 8014808:	3304      	adds	r3, #4
 801480a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801480c:	429a      	cmp	r2, r3
 801480e:	d108      	bne.n	8014822 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014810:	4b31      	ldr	r3, [pc, #196]	; (80148d8 <etharp_output+0x1fc>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	461a      	mov	r2, r3
 8014816:	68b9      	ldr	r1, [r7, #8]
 8014818:	68f8      	ldr	r0, [r7, #12]
 801481a:	f7ff fec5 	bl	80145a8 <etharp_output_to_arp_index>
 801481e:	4603      	mov	r3, r0
 8014820:	e04a      	b.n	80148b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014822:	2300      	movs	r3, #0
 8014824:	75fb      	strb	r3, [r7, #23]
 8014826:	e031      	b.n	801488c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014828:	7dfa      	ldrb	r2, [r7, #23]
 801482a:	492c      	ldr	r1, [pc, #176]	; (80148dc <etharp_output+0x200>)
 801482c:	4613      	mov	r3, r2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	4413      	add	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	440b      	add	r3, r1
 8014836:	3314      	adds	r3, #20
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b01      	cmp	r3, #1
 801483c:	d923      	bls.n	8014886 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801483e:	7dfa      	ldrb	r2, [r7, #23]
 8014840:	4926      	ldr	r1, [pc, #152]	; (80148dc <etharp_output+0x200>)
 8014842:	4613      	mov	r3, r2
 8014844:	005b      	lsls	r3, r3, #1
 8014846:	4413      	add	r3, r2
 8014848:	00db      	lsls	r3, r3, #3
 801484a:	440b      	add	r3, r1
 801484c:	3308      	adds	r3, #8
 801484e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014850:	68fa      	ldr	r2, [r7, #12]
 8014852:	429a      	cmp	r2, r3
 8014854:	d117      	bne.n	8014886 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	7dfa      	ldrb	r2, [r7, #23]
 801485c:	481f      	ldr	r0, [pc, #124]	; (80148dc <etharp_output+0x200>)
 801485e:	4613      	mov	r3, r2
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	4403      	add	r3, r0
 8014868:	3304      	adds	r3, #4
 801486a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801486c:	4299      	cmp	r1, r3
 801486e:	d10a      	bne.n	8014886 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014870:	4a19      	ldr	r2, [pc, #100]	; (80148d8 <etharp_output+0x1fc>)
 8014872:	7dfb      	ldrb	r3, [r7, #23]
 8014874:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014876:	7dfb      	ldrb	r3, [r7, #23]
 8014878:	461a      	mov	r2, r3
 801487a:	68b9      	ldr	r1, [r7, #8]
 801487c:	68f8      	ldr	r0, [r7, #12]
 801487e:	f7ff fe93 	bl	80145a8 <etharp_output_to_arp_index>
 8014882:	4603      	mov	r3, r0
 8014884:	e018      	b.n	80148b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	3301      	adds	r3, #1
 801488a:	75fb      	strb	r3, [r7, #23]
 801488c:	7dfb      	ldrb	r3, [r7, #23]
 801488e:	2b09      	cmp	r3, #9
 8014890:	d9ca      	bls.n	8014828 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	69b9      	ldr	r1, [r7, #24]
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	f000 f822 	bl	80148e0 <etharp_query>
 801489c:	4603      	mov	r3, r0
 801489e:	e00b      	b.n	80148b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80148a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	68b9      	ldr	r1, [r7, #8]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f001 fe6f 	bl	8016594 <ethernet_output>
 80148b6:	4603      	mov	r3, r0
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3720      	adds	r7, #32
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	0801b3c4 	.word	0x0801b3c4
 80148c4:	0801b514 	.word	0x0801b514
 80148c8:	0801b43c 	.word	0x0801b43c
 80148cc:	0801b564 	.word	0x0801b564
 80148d0:	0801b504 	.word	0x0801b504
 80148d4:	0801bc78 	.word	0x0801bc78
 80148d8:	2000d25c 	.word	0x2000d25c
 80148dc:	2000d16c 	.word	0x2000d16c

080148e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b08c      	sub	sp, #48	; 0x30
 80148e4:	af02      	add	r7, sp, #8
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	3326      	adds	r3, #38	; 0x26
 80148f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80148f2:	23ff      	movs	r3, #255	; 0xff
 80148f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	68f9      	ldr	r1, [r7, #12]
 8014902:	4618      	mov	r0, r3
 8014904:	f000 fe0e 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10c      	bne.n	8014928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014916:	2be0      	cmp	r3, #224	; 0xe0
 8014918:	d006      	beq.n	8014928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d003      	beq.n	8014928 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d102      	bne.n	801492e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014928:	f06f 030f 	mvn.w	r3, #15
 801492c:	e101      	b.n	8014b32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801492e:	68fa      	ldr	r2, [r7, #12]
 8014930:	2101      	movs	r1, #1
 8014932:	68b8      	ldr	r0, [r7, #8]
 8014934:	f7ff fb60 	bl	8013ff8 <etharp_find_entry>
 8014938:	4603      	mov	r3, r0
 801493a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801493c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014940:	2b00      	cmp	r3, #0
 8014942:	da02      	bge.n	801494a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014944:	8a7b      	ldrh	r3, [r7, #18]
 8014946:	b25b      	sxtb	r3, r3
 8014948:	e0f3      	b.n	8014b32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801494a:	8a7b      	ldrh	r3, [r7, #18]
 801494c:	2b7e      	cmp	r3, #126	; 0x7e
 801494e:	d906      	bls.n	801495e <etharp_query+0x7e>
 8014950:	4b7a      	ldr	r3, [pc, #488]	; (8014b3c <etharp_query+0x25c>)
 8014952:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014956:	497a      	ldr	r1, [pc, #488]	; (8014b40 <etharp_query+0x260>)
 8014958:	487a      	ldr	r0, [pc, #488]	; (8014b44 <etharp_query+0x264>)
 801495a:	f002 f945 	bl	8016be8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801495e:	8a7b      	ldrh	r3, [r7, #18]
 8014960:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014962:	7c7a      	ldrb	r2, [r7, #17]
 8014964:	4978      	ldr	r1, [pc, #480]	; (8014b48 <etharp_query+0x268>)
 8014966:	4613      	mov	r3, r2
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	4413      	add	r3, r2
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	440b      	add	r3, r1
 8014970:	3314      	adds	r3, #20
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d115      	bne.n	80149a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014978:	2301      	movs	r3, #1
 801497a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801497c:	7c7a      	ldrb	r2, [r7, #17]
 801497e:	4972      	ldr	r1, [pc, #456]	; (8014b48 <etharp_query+0x268>)
 8014980:	4613      	mov	r3, r2
 8014982:	005b      	lsls	r3, r3, #1
 8014984:	4413      	add	r3, r2
 8014986:	00db      	lsls	r3, r3, #3
 8014988:	440b      	add	r3, r1
 801498a:	3314      	adds	r3, #20
 801498c:	2201      	movs	r2, #1
 801498e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014990:	7c7a      	ldrb	r2, [r7, #17]
 8014992:	496d      	ldr	r1, [pc, #436]	; (8014b48 <etharp_query+0x268>)
 8014994:	4613      	mov	r3, r2
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	3308      	adds	r3, #8
 80149a0:	68fa      	ldr	r2, [r7, #12]
 80149a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149a4:	7c7a      	ldrb	r2, [r7, #17]
 80149a6:	4968      	ldr	r1, [pc, #416]	; (8014b48 <etharp_query+0x268>)
 80149a8:	4613      	mov	r3, r2
 80149aa:	005b      	lsls	r3, r3, #1
 80149ac:	4413      	add	r3, r2
 80149ae:	00db      	lsls	r3, r3, #3
 80149b0:	440b      	add	r3, r1
 80149b2:	3314      	adds	r3, #20
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d011      	beq.n	80149de <etharp_query+0xfe>
 80149ba:	7c7a      	ldrb	r2, [r7, #17]
 80149bc:	4962      	ldr	r1, [pc, #392]	; (8014b48 <etharp_query+0x268>)
 80149be:	4613      	mov	r3, r2
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	4413      	add	r3, r2
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	440b      	add	r3, r1
 80149c8:	3314      	adds	r3, #20
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d806      	bhi.n	80149de <etharp_query+0xfe>
 80149d0:	4b5a      	ldr	r3, [pc, #360]	; (8014b3c <etharp_query+0x25c>)
 80149d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80149d6:	495d      	ldr	r1, [pc, #372]	; (8014b4c <etharp_query+0x26c>)
 80149d8:	485a      	ldr	r0, [pc, #360]	; (8014b44 <etharp_query+0x264>)
 80149da:	f002 f905 	bl	8016be8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d102      	bne.n	80149ea <etharp_query+0x10a>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d10c      	bne.n	8014a04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80149ea:	68b9      	ldr	r1, [r7, #8]
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f000 f963 	bl	8014cb8 <etharp_request>
 80149f2:	4603      	mov	r3, r0
 80149f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d102      	bne.n	8014a04 <etharp_query+0x124>
      return result;
 80149fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a02:	e096      	b.n	8014b32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d106      	bne.n	8014a18 <etharp_query+0x138>
 8014a0a:	4b4c      	ldr	r3, [pc, #304]	; (8014b3c <etharp_query+0x25c>)
 8014a0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014a10:	494f      	ldr	r1, [pc, #316]	; (8014b50 <etharp_query+0x270>)
 8014a12:	484c      	ldr	r0, [pc, #304]	; (8014b44 <etharp_query+0x264>)
 8014a14:	f002 f8e8 	bl	8016be8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a18:	7c7a      	ldrb	r2, [r7, #17]
 8014a1a:	494b      	ldr	r1, [pc, #300]	; (8014b48 <etharp_query+0x268>)
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	005b      	lsls	r3, r3, #1
 8014a20:	4413      	add	r3, r2
 8014a22:	00db      	lsls	r3, r3, #3
 8014a24:	440b      	add	r3, r1
 8014a26:	3314      	adds	r3, #20
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d917      	bls.n	8014a5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a2e:	4a49      	ldr	r2, [pc, #292]	; (8014b54 <etharp_query+0x274>)
 8014a30:	7c7b      	ldrb	r3, [r7, #17]
 8014a32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a34:	7c7a      	ldrb	r2, [r7, #17]
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	3308      	adds	r3, #8
 8014a40:	4a41      	ldr	r2, [pc, #260]	; (8014b48 <etharp_query+0x268>)
 8014a42:	4413      	add	r3, r2
 8014a44:	3304      	adds	r3, #4
 8014a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a4a:	9200      	str	r2, [sp, #0]
 8014a4c:	697a      	ldr	r2, [r7, #20]
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	f001 fd9f 	bl	8016594 <ethernet_output>
 8014a56:	4603      	mov	r3, r0
 8014a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a5c:	e067      	b.n	8014b2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a5e:	7c7a      	ldrb	r2, [r7, #17]
 8014a60:	4939      	ldr	r1, [pc, #228]	; (8014b48 <etharp_query+0x268>)
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	440b      	add	r3, r1
 8014a6c:	3314      	adds	r3, #20
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d15c      	bne.n	8014b2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a7c:	e01c      	b.n	8014ab8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	895a      	ldrh	r2, [r3, #10]
 8014a82:	69fb      	ldr	r3, [r7, #28]
 8014a84:	891b      	ldrh	r3, [r3, #8]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d10a      	bne.n	8014aa0 <etharp_query+0x1c0>
 8014a8a:	69fb      	ldr	r3, [r7, #28]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d006      	beq.n	8014aa0 <etharp_query+0x1c0>
 8014a92:	4b2a      	ldr	r3, [pc, #168]	; (8014b3c <etharp_query+0x25c>)
 8014a94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014a98:	492f      	ldr	r1, [pc, #188]	; (8014b58 <etharp_query+0x278>)
 8014a9a:	482a      	ldr	r0, [pc, #168]	; (8014b44 <etharp_query+0x264>)
 8014a9c:	f002 f8a4 	bl	8016be8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	7b1b      	ldrb	r3, [r3, #12]
 8014aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d002      	beq.n	8014ab2 <etharp_query+0x1d2>
        copy_needed = 1;
 8014aac:	2301      	movs	r3, #1
 8014aae:	61bb      	str	r3, [r7, #24]
        break;
 8014ab0:	e005      	b.n	8014abe <etharp_query+0x1de>
      }
      p = p->next;
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1df      	bne.n	8014a7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d007      	beq.n	8014ad4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014aca:	200e      	movs	r0, #14
 8014acc:	f7f8 fa52 	bl	800cf74 <pbuf_clone>
 8014ad0:	61f8      	str	r0, [r7, #28]
 8014ad2:	e004      	b.n	8014ade <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ad8:	69f8      	ldr	r0, [r7, #28]
 8014ada:	f7f8 f879 	bl	800cbd0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d021      	beq.n	8014b28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014ae4:	7c7a      	ldrb	r2, [r7, #17]
 8014ae6:	4918      	ldr	r1, [pc, #96]	; (8014b48 <etharp_query+0x268>)
 8014ae8:	4613      	mov	r3, r2
 8014aea:	005b      	lsls	r3, r3, #1
 8014aec:	4413      	add	r3, r2
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	440b      	add	r3, r1
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d00a      	beq.n	8014b0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014af8:	7c7a      	ldrb	r2, [r7, #17]
 8014afa:	4913      	ldr	r1, [pc, #76]	; (8014b48 <etharp_query+0x268>)
 8014afc:	4613      	mov	r3, r2
 8014afe:	005b      	lsls	r3, r3, #1
 8014b00:	4413      	add	r3, r2
 8014b02:	00db      	lsls	r3, r3, #3
 8014b04:	440b      	add	r3, r1
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7f7 ffbb 	bl	800ca84 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b0e:	7c7a      	ldrb	r2, [r7, #17]
 8014b10:	490d      	ldr	r1, [pc, #52]	; (8014b48 <etharp_query+0x268>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	69fa      	ldr	r2, [r7, #28]
 8014b1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b20:	2300      	movs	r3, #0
 8014b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b26:	e002      	b.n	8014b2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b28:	23ff      	movs	r3, #255	; 0xff
 8014b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3728      	adds	r7, #40	; 0x28
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	0801b3c4 	.word	0x0801b3c4
 8014b40:	0801b570 	.word	0x0801b570
 8014b44:	0801b43c 	.word	0x0801b43c
 8014b48:	2000d16c 	.word	0x2000d16c
 8014b4c:	0801b580 	.word	0x0801b580
 8014b50:	0801b564 	.word	0x0801b564
 8014b54:	2000d25c 	.word	0x2000d25c
 8014b58:	0801b5a8 	.word	0x0801b5a8

08014b5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b08a      	sub	sp, #40	; 0x28
 8014b60:	af02      	add	r7, sp, #8
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	607a      	str	r2, [r7, #4]
 8014b68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d106      	bne.n	8014b82 <etharp_raw+0x26>
 8014b74:	4b3a      	ldr	r3, [pc, #232]	; (8014c60 <etharp_raw+0x104>)
 8014b76:	f240 4257 	movw	r2, #1111	; 0x457
 8014b7a:	493a      	ldr	r1, [pc, #232]	; (8014c64 <etharp_raw+0x108>)
 8014b7c:	483a      	ldr	r0, [pc, #232]	; (8014c68 <etharp_raw+0x10c>)
 8014b7e:	f002 f833 	bl	8016be8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b86:	211c      	movs	r1, #28
 8014b88:	200e      	movs	r0, #14
 8014b8a:	f7f7 fc97 	bl	800c4bc <pbuf_alloc>
 8014b8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b90:	69bb      	ldr	r3, [r7, #24]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d102      	bne.n	8014b9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b96:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9a:	e05d      	b.n	8014c58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	895b      	ldrh	r3, [r3, #10]
 8014ba0:	2b1b      	cmp	r3, #27
 8014ba2:	d806      	bhi.n	8014bb2 <etharp_raw+0x56>
 8014ba4:	4b2e      	ldr	r3, [pc, #184]	; (8014c60 <etharp_raw+0x104>)
 8014ba6:	f240 4262 	movw	r2, #1122	; 0x462
 8014baa:	4930      	ldr	r1, [pc, #192]	; (8014c6c <etharp_raw+0x110>)
 8014bac:	482e      	ldr	r0, [pc, #184]	; (8014c68 <etharp_raw+0x10c>)
 8014bae:	f002 f81b 	bl	8016be8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014bb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f6 fb70 	bl	800b2a0 <lwip_htons>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bce:	2b06      	cmp	r3, #6
 8014bd0:	d006      	beq.n	8014be0 <etharp_raw+0x84>
 8014bd2:	4b23      	ldr	r3, [pc, #140]	; (8014c60 <etharp_raw+0x104>)
 8014bd4:	f240 4269 	movw	r2, #1129	; 0x469
 8014bd8:	4925      	ldr	r1, [pc, #148]	; (8014c70 <etharp_raw+0x114>)
 8014bda:	4823      	ldr	r0, [pc, #140]	; (8014c68 <etharp_raw+0x10c>)
 8014bdc:	f002 f804 	bl	8016be8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	3308      	adds	r3, #8
 8014be4:	2206      	movs	r2, #6
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f002 f9be 	bl	8016f6a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	3312      	adds	r3, #18
 8014bf2:	2206      	movs	r2, #6
 8014bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f002 f9b7 	bl	8016f6a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	330e      	adds	r3, #14
 8014c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c02:	6812      	ldr	r2, [r2, #0]
 8014c04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c06:	697b      	ldr	r3, [r7, #20]
 8014c08:	3318      	adds	r3, #24
 8014c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c0c:	6812      	ldr	r2, [r2, #0]
 8014c0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	2200      	movs	r2, #0
 8014c14:	701a      	strb	r2, [r3, #0]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f042 0201 	orr.w	r2, r2, #1
 8014c1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f042 0208 	orr.w	r2, r2, #8
 8014c26:	709a      	strb	r2, [r3, #2]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	2206      	movs	r2, #6
 8014c30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	2204      	movs	r2, #4
 8014c36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c38:	f640 0306 	movw	r3, #2054	; 0x806
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	69b9      	ldr	r1, [r7, #24]
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f001 fca5 	bl	8016594 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c4a:	69b8      	ldr	r0, [r7, #24]
 8014c4c:	f7f7 ff1a 	bl	800ca84 <pbuf_free>
  p = NULL;
 8014c50:	2300      	movs	r3, #0
 8014c52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3720      	adds	r7, #32
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	0801b3c4 	.word	0x0801b3c4
 8014c64:	0801b514 	.word	0x0801b514
 8014c68:	0801b43c 	.word	0x0801b43c
 8014c6c:	0801b5c4 	.word	0x0801b5c4
 8014c70:	0801b5f8 	.word	0x0801b5f8

08014c74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b088      	sub	sp, #32
 8014c78:	af04      	add	r7, sp, #16
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c90:	2201      	movs	r2, #1
 8014c92:	9203      	str	r2, [sp, #12]
 8014c94:	68ba      	ldr	r2, [r7, #8]
 8014c96:	9202      	str	r2, [sp, #8]
 8014c98:	4a06      	ldr	r2, [pc, #24]	; (8014cb4 <etharp_request_dst+0x40>)
 8014c9a:	9201      	str	r2, [sp, #4]
 8014c9c:	9300      	str	r3, [sp, #0]
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f7ff ff5a 	bl	8014b5c <etharp_raw>
 8014ca8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3710      	adds	r7, #16
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	0801bc80 	.word	0x0801bc80

08014cb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014cc2:	4a05      	ldr	r2, [pc, #20]	; (8014cd8 <etharp_request+0x20>)
 8014cc4:	6839      	ldr	r1, [r7, #0]
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f7ff ffd4 	bl	8014c74 <etharp_request_dst>
 8014ccc:	4603      	mov	r3, r0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	0801bc78 	.word	0x0801bc78

08014cdc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b08e      	sub	sp, #56	; 0x38
 8014ce0:	af04      	add	r7, sp, #16
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ce6:	4b79      	ldr	r3, [pc, #484]	; (8014ecc <icmp_input+0x1f0>)
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	f003 030f 	and.w	r3, r3, #15
 8014cf4:	b2db      	uxtb	r3, r3
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cfe:	2b13      	cmp	r3, #19
 8014d00:	f240 80cd 	bls.w	8014e9e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	895b      	ldrh	r3, [r3, #10]
 8014d08:	2b03      	cmp	r3, #3
 8014d0a:	f240 80ca 	bls.w	8014ea2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f000 80b7 	beq.w	8014e90 <icmp_input+0x1b4>
 8014d22:	2b08      	cmp	r3, #8
 8014d24:	f040 80b7 	bne.w	8014e96 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014d28:	4b69      	ldr	r3, [pc, #420]	; (8014ed0 <icmp_input+0x1f4>)
 8014d2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d2c:	4b67      	ldr	r3, [pc, #412]	; (8014ecc <icmp_input+0x1f0>)
 8014d2e:	695b      	ldr	r3, [r3, #20]
 8014d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d34:	2be0      	cmp	r3, #224	; 0xe0
 8014d36:	f000 80bb 	beq.w	8014eb0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014d3a:	4b64      	ldr	r3, [pc, #400]	; (8014ecc <icmp_input+0x1f0>)
 8014d3c:	695b      	ldr	r3, [r3, #20]
 8014d3e:	4a63      	ldr	r2, [pc, #396]	; (8014ecc <icmp_input+0x1f0>)
 8014d40:	6812      	ldr	r2, [r2, #0]
 8014d42:	4611      	mov	r1, r2
 8014d44:	4618      	mov	r0, r3
 8014d46:	f000 fbed 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	f040 80b1 	bne.w	8014eb4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	891b      	ldrh	r3, [r3, #8]
 8014d56:	2b07      	cmp	r3, #7
 8014d58:	f240 80a5 	bls.w	8014ea6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d5e:	330e      	adds	r3, #14
 8014d60:	4619      	mov	r1, r3
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f7f7 fdf8 	bl	800c958 <pbuf_add_header>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d04b      	beq.n	8014e06 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	891a      	ldrh	r2, [r3, #8]
 8014d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d74:	4413      	add	r3, r2
 8014d76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	891b      	ldrh	r3, [r3, #8]
 8014d7c:	8b7a      	ldrh	r2, [r7, #26]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	f0c0 809a 	bcc.w	8014eb8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014d84:	8b7b      	ldrh	r3, [r7, #26]
 8014d86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	200e      	movs	r0, #14
 8014d8e:	f7f7 fb95 	bl	800c4bc <pbuf_alloc>
 8014d92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f000 8090 	beq.w	8014ebc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	895b      	ldrh	r3, [r3, #10]
 8014da0:	461a      	mov	r2, r3
 8014da2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014da4:	3308      	adds	r3, #8
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d203      	bcs.n	8014db2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014daa:	6978      	ldr	r0, [r7, #20]
 8014dac:	f7f7 fe6a 	bl	800ca84 <pbuf_free>
          goto icmperr;
 8014db0:	e085      	b.n	8014ebe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f002 f8d5 	bl	8016f6a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	6978      	ldr	r0, [r7, #20]
 8014dc6:	f7f7 fdd7 	bl	800c978 <pbuf_remove_header>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d009      	beq.n	8014de4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014dd0:	4b40      	ldr	r3, [pc, #256]	; (8014ed4 <icmp_input+0x1f8>)
 8014dd2:	22b6      	movs	r2, #182	; 0xb6
 8014dd4:	4940      	ldr	r1, [pc, #256]	; (8014ed8 <icmp_input+0x1fc>)
 8014dd6:	4841      	ldr	r0, [pc, #260]	; (8014edc <icmp_input+0x200>)
 8014dd8:	f001 ff06 	bl	8016be8 <iprintf>
          pbuf_free(r);
 8014ddc:	6978      	ldr	r0, [r7, #20]
 8014dde:	f7f7 fe51 	bl	800ca84 <pbuf_free>
          goto icmperr;
 8014de2:	e06c      	b.n	8014ebe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	6978      	ldr	r0, [r7, #20]
 8014de8:	f7f7 ff80 	bl	800ccec <pbuf_copy>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d003      	beq.n	8014dfa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014df2:	6978      	ldr	r0, [r7, #20]
 8014df4:	f7f7 fe46 	bl	800ca84 <pbuf_free>
          goto icmperr;
 8014df8:	e061      	b.n	8014ebe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7f7 fe42 	bl	800ca84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	607b      	str	r3, [r7, #4]
 8014e04:	e00f      	b.n	8014e26 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e08:	330e      	adds	r3, #14
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f7f7 fdb3 	bl	800c978 <pbuf_remove_header>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d006      	beq.n	8014e26 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e18:	4b2e      	ldr	r3, [pc, #184]	; (8014ed4 <icmp_input+0x1f8>)
 8014e1a:	22c7      	movs	r2, #199	; 0xc7
 8014e1c:	4930      	ldr	r1, [pc, #192]	; (8014ee0 <icmp_input+0x204>)
 8014e1e:	482f      	ldr	r0, [pc, #188]	; (8014edc <icmp_input+0x200>)
 8014e20:	f001 fee2 	bl	8016be8 <iprintf>
          goto icmperr;
 8014e24:	e04b      	b.n	8014ebe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e2e:	4619      	mov	r1, r3
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7f7 fd91 	bl	800c958 <pbuf_add_header>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d12b      	bne.n	8014e94 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e42:	69fb      	ldr	r3, [r7, #28]
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e4a:	4b20      	ldr	r3, [pc, #128]	; (8014ecc <icmp_input+0x1f0>)
 8014e4c:	691a      	ldr	r2, [r3, #16]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	2200      	movs	r2, #0
 8014e56:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	709a      	strb	r2, [r3, #2]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	22ff      	movs	r2, #255	; 0xff
 8014e66:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	729a      	strb	r2, [r3, #10]
 8014e6e:	2200      	movs	r2, #0
 8014e70:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	9302      	str	r3, [sp, #8]
 8014e76:	2301      	movs	r3, #1
 8014e78:	9301      	str	r3, [sp, #4]
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	9300      	str	r3, [sp, #0]
 8014e7e:	23ff      	movs	r3, #255	; 0xff
 8014e80:	2200      	movs	r2, #0
 8014e82:	69f9      	ldr	r1, [r7, #28]
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f000 fa75 	bl	8015374 <ip4_output_if>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e8e:	e001      	b.n	8014e94 <icmp_input+0x1b8>
      break;
 8014e90:	bf00      	nop
 8014e92:	e000      	b.n	8014e96 <icmp_input+0x1ba>
      break;
 8014e94:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7f7 fdf4 	bl	800ca84 <pbuf_free>
  return;
 8014e9c:	e013      	b.n	8014ec6 <icmp_input+0x1ea>
    goto lenerr;
 8014e9e:	bf00      	nop
 8014ea0:	e002      	b.n	8014ea8 <icmp_input+0x1cc>
    goto lenerr;
 8014ea2:	bf00      	nop
 8014ea4:	e000      	b.n	8014ea8 <icmp_input+0x1cc>
        goto lenerr;
 8014ea6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7f7 fdeb 	bl	800ca84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014eae:	e00a      	b.n	8014ec6 <icmp_input+0x1ea>
        goto icmperr;
 8014eb0:	bf00      	nop
 8014eb2:	e004      	b.n	8014ebe <icmp_input+0x1e2>
        goto icmperr;
 8014eb4:	bf00      	nop
 8014eb6:	e002      	b.n	8014ebe <icmp_input+0x1e2>
          goto icmperr;
 8014eb8:	bf00      	nop
 8014eba:	e000      	b.n	8014ebe <icmp_input+0x1e2>
          goto icmperr;
 8014ebc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7f7 fde0 	bl	800ca84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ec4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ec6:	3728      	adds	r7, #40	; 0x28
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	200099b8 	.word	0x200099b8
 8014ed0:	200099cc 	.word	0x200099cc
 8014ed4:	0801b63c 	.word	0x0801b63c
 8014ed8:	0801b674 	.word	0x0801b674
 8014edc:	0801b6ac 	.word	0x0801b6ac
 8014ee0:	0801b6d4 	.word	0x0801b6d4

08014ee4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	460b      	mov	r3, r1
 8014eee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014ef0:	78fb      	ldrb	r3, [r7, #3]
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	2103      	movs	r1, #3
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f000 f814 	bl	8014f24 <icmp_send_response>
}
 8014efc:	bf00      	nop
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f10:	78fb      	ldrb	r3, [r7, #3]
 8014f12:	461a      	mov	r2, r3
 8014f14:	210b      	movs	r1, #11
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 f804 	bl	8014f24 <icmp_send_response>
}
 8014f1c:	bf00      	nop
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b08c      	sub	sp, #48	; 0x30
 8014f28:	af04      	add	r7, sp, #16
 8014f2a:	6078      	str	r0, [r7, #4]
 8014f2c:	460b      	mov	r3, r1
 8014f2e:	70fb      	strb	r3, [r7, #3]
 8014f30:	4613      	mov	r3, r2
 8014f32:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f38:	2124      	movs	r1, #36	; 0x24
 8014f3a:	2022      	movs	r0, #34	; 0x22
 8014f3c:	f7f7 fabe 	bl	800c4bc <pbuf_alloc>
 8014f40:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d04c      	beq.n	8014fe2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	895b      	ldrh	r3, [r3, #10]
 8014f4c:	2b23      	cmp	r3, #35	; 0x23
 8014f4e:	d806      	bhi.n	8014f5e <icmp_send_response+0x3a>
 8014f50:	4b26      	ldr	r3, [pc, #152]	; (8014fec <icmp_send_response+0xc8>)
 8014f52:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014f56:	4926      	ldr	r1, [pc, #152]	; (8014ff0 <icmp_send_response+0xcc>)
 8014f58:	4826      	ldr	r0, [pc, #152]	; (8014ff4 <icmp_send_response+0xd0>)
 8014f5a:	f001 fe45 	bl	8016be8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	78fa      	ldrb	r2, [r7, #3]
 8014f6e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	78ba      	ldrb	r2, [r7, #2]
 8014f74:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	711a      	strb	r2, [r3, #4]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	2200      	movs	r2, #0
 8014f84:	719a      	strb	r2, [r3, #6]
 8014f86:	2200      	movs	r2, #0
 8014f88:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	f103 0008 	add.w	r0, r3, #8
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	221c      	movs	r2, #28
 8014f98:	4619      	mov	r1, r3
 8014f9a:	f001 ffe6 	bl	8016f6a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014fa4:	f107 030c 	add.w	r3, r7, #12
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f000 f825 	bl	8014ff8 <ip4_route>
 8014fae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d011      	beq.n	8014fda <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	709a      	strb	r2, [r3, #2]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014fc0:	f107 020c 	add.w	r2, r7, #12
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	9302      	str	r3, [sp, #8]
 8014fc8:	2301      	movs	r3, #1
 8014fca:	9301      	str	r3, [sp, #4]
 8014fcc:	2300      	movs	r3, #0
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	23ff      	movs	r3, #255	; 0xff
 8014fd2:	2100      	movs	r1, #0
 8014fd4:	69f8      	ldr	r0, [r7, #28]
 8014fd6:	f000 f9cd 	bl	8015374 <ip4_output_if>
  }
  pbuf_free(q);
 8014fda:	69f8      	ldr	r0, [r7, #28]
 8014fdc:	f7f7 fd52 	bl	800ca84 <pbuf_free>
 8014fe0:	e000      	b.n	8014fe4 <icmp_send_response+0xc0>
    return;
 8014fe2:	bf00      	nop
}
 8014fe4:	3720      	adds	r7, #32
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	0801b63c 	.word	0x0801b63c
 8014ff0:	0801b708 	.word	0x0801b708
 8014ff4:	0801b6ac 	.word	0x0801b6ac

08014ff8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	b085      	sub	sp, #20
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015000:	4b33      	ldr	r3, [pc, #204]	; (80150d0 <ip4_route+0xd8>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	60fb      	str	r3, [r7, #12]
 8015006:	e036      	b.n	8015076 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801500e:	f003 0301 	and.w	r3, r3, #1
 8015012:	b2db      	uxtb	r3, r3
 8015014:	2b00      	cmp	r3, #0
 8015016:	d02b      	beq.n	8015070 <ip4_route+0x78>
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801501e:	089b      	lsrs	r3, r3, #2
 8015020:	f003 0301 	and.w	r3, r3, #1
 8015024:	b2db      	uxtb	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d022      	beq.n	8015070 <ip4_route+0x78>
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	3304      	adds	r3, #4
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d01d      	beq.n	8015070 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3304      	adds	r3, #4
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	405a      	eors	r2, r3
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	3308      	adds	r3, #8
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	4013      	ands	r3, r2
 8015048:	2b00      	cmp	r3, #0
 801504a:	d101      	bne.n	8015050 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	e038      	b.n	80150c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015056:	f003 0302 	and.w	r3, r3, #2
 801505a:	2b00      	cmp	r3, #0
 801505c:	d108      	bne.n	8015070 <ip4_route+0x78>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	330c      	adds	r3, #12
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	429a      	cmp	r2, r3
 801506a:	d101      	bne.n	8015070 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	e028      	b.n	80150c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	60fb      	str	r3, [r7, #12]
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d1c5      	bne.n	8015008 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801507c:	4b15      	ldr	r3, [pc, #84]	; (80150d4 <ip4_route+0xdc>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d01a      	beq.n	80150ba <ip4_route+0xc2>
 8015084:	4b13      	ldr	r3, [pc, #76]	; (80150d4 <ip4_route+0xdc>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801508c:	f003 0301 	and.w	r3, r3, #1
 8015090:	2b00      	cmp	r3, #0
 8015092:	d012      	beq.n	80150ba <ip4_route+0xc2>
 8015094:	4b0f      	ldr	r3, [pc, #60]	; (80150d4 <ip4_route+0xdc>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801509c:	f003 0304 	and.w	r3, r3, #4
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d00a      	beq.n	80150ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150a4:	4b0b      	ldr	r3, [pc, #44]	; (80150d4 <ip4_route+0xdc>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	3304      	adds	r3, #4
 80150aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d004      	beq.n	80150ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	b2db      	uxtb	r3, r3
 80150b6:	2b7f      	cmp	r3, #127	; 0x7f
 80150b8:	d101      	bne.n	80150be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80150ba:	2300      	movs	r3, #0
 80150bc:	e001      	b.n	80150c2 <ip4_route+0xca>
  }

  return netif_default;
 80150be:	4b05      	ldr	r3, [pc, #20]	; (80150d4 <ip4_route+0xdc>)
 80150c0:	681b      	ldr	r3, [r3, #0]
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3714      	adds	r7, #20
 80150c6:	46bd      	mov	sp, r7
 80150c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150cc:	4770      	bx	lr
 80150ce:	bf00      	nop
 80150d0:	2000d100 	.word	0x2000d100
 80150d4:	2000d104 	.word	0x2000d104

080150d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150e6:	f003 0301 	and.w	r3, r3, #1
 80150ea:	b2db      	uxtb	r3, r3
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d016      	beq.n	801511e <ip4_input_accept+0x46>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	3304      	adds	r3, #4
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d011      	beq.n	801511e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80150fa:	4b0b      	ldr	r3, [pc, #44]	; (8015128 <ip4_input_accept+0x50>)
 80150fc:	695a      	ldr	r2, [r3, #20]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	3304      	adds	r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	429a      	cmp	r2, r3
 8015106:	d008      	beq.n	801511a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015108:	4b07      	ldr	r3, [pc, #28]	; (8015128 <ip4_input_accept+0x50>)
 801510a:	695b      	ldr	r3, [r3, #20]
 801510c:	6879      	ldr	r1, [r7, #4]
 801510e:	4618      	mov	r0, r3
 8015110:	f000 fa08 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8015114:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015116:	2b00      	cmp	r3, #0
 8015118:	d001      	beq.n	801511e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801511a:	2301      	movs	r3, #1
 801511c:	e000      	b.n	8015120 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801511e:	2300      	movs	r3, #0
}
 8015120:	4618      	mov	r0, r3
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	200099b8 	.word	0x200099b8

0801512c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b086      	sub	sp, #24
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	091b      	lsrs	r3, r3, #4
 8015142:	b2db      	uxtb	r3, r3
 8015144:	2b04      	cmp	r3, #4
 8015146:	d004      	beq.n	8015152 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f7f7 fc9b 	bl	800ca84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801514e:	2300      	movs	r3, #0
 8015150:	e107      	b.n	8015362 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	f003 030f 	and.w	r3, r3, #15
 801515a:	b2db      	uxtb	r3, r3
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	b2db      	uxtb	r3, r3
 8015160:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	885b      	ldrh	r3, [r3, #2]
 8015166:	b29b      	uxth	r3, r3
 8015168:	4618      	mov	r0, r3
 801516a:	f7f6 f899 	bl	800b2a0 <lwip_htons>
 801516e:	4603      	mov	r3, r0
 8015170:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	891b      	ldrh	r3, [r3, #8]
 8015176:	89ba      	ldrh	r2, [r7, #12]
 8015178:	429a      	cmp	r2, r3
 801517a:	d204      	bcs.n	8015186 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801517c:	89bb      	ldrh	r3, [r7, #12]
 801517e:	4619      	mov	r1, r3
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7f7 faf9 	bl	800c778 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	895b      	ldrh	r3, [r3, #10]
 801518a:	89fa      	ldrh	r2, [r7, #14]
 801518c:	429a      	cmp	r2, r3
 801518e:	d807      	bhi.n	80151a0 <ip4_input+0x74>
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	891b      	ldrh	r3, [r3, #8]
 8015194:	89ba      	ldrh	r2, [r7, #12]
 8015196:	429a      	cmp	r2, r3
 8015198:	d802      	bhi.n	80151a0 <ip4_input+0x74>
 801519a:	89fb      	ldrh	r3, [r7, #14]
 801519c:	2b13      	cmp	r3, #19
 801519e:	d804      	bhi.n	80151aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f7f7 fc6f 	bl	800ca84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	e0db      	b.n	8015362 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	691b      	ldr	r3, [r3, #16]
 80151ae:	4a6f      	ldr	r2, [pc, #444]	; (801536c <ip4_input+0x240>)
 80151b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	4a6d      	ldr	r2, [pc, #436]	; (801536c <ip4_input+0x240>)
 80151b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151ba:	4b6c      	ldr	r3, [pc, #432]	; (801536c <ip4_input+0x240>)
 80151bc:	695b      	ldr	r3, [r3, #20]
 80151be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151c2:	2be0      	cmp	r3, #224	; 0xe0
 80151c4:	d112      	bne.n	80151ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151cc:	f003 0301 	and.w	r3, r3, #1
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d007      	beq.n	80151e6 <ip4_input+0xba>
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	3304      	adds	r3, #4
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <ip4_input+0xba>
      netif = inp;
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	613b      	str	r3, [r7, #16]
 80151e4:	e02a      	b.n	801523c <ip4_input+0x110>
    } else {
      netif = NULL;
 80151e6:	2300      	movs	r3, #0
 80151e8:	613b      	str	r3, [r7, #16]
 80151ea:	e027      	b.n	801523c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80151ec:	6838      	ldr	r0, [r7, #0]
 80151ee:	f7ff ff73 	bl	80150d8 <ip4_input_accept>
 80151f2:	4603      	mov	r3, r0
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d002      	beq.n	80151fe <ip4_input+0xd2>
      netif = inp;
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	613b      	str	r3, [r7, #16]
 80151fc:	e01e      	b.n	801523c <ip4_input+0x110>
    } else {
      netif = NULL;
 80151fe:	2300      	movs	r3, #0
 8015200:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015202:	4b5a      	ldr	r3, [pc, #360]	; (801536c <ip4_input+0x240>)
 8015204:	695b      	ldr	r3, [r3, #20]
 8015206:	b2db      	uxtb	r3, r3
 8015208:	2b7f      	cmp	r3, #127	; 0x7f
 801520a:	d017      	beq.n	801523c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801520c:	4b58      	ldr	r3, [pc, #352]	; (8015370 <ip4_input+0x244>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	613b      	str	r3, [r7, #16]
 8015212:	e00e      	b.n	8015232 <ip4_input+0x106>
          if (netif == inp) {
 8015214:	693a      	ldr	r2, [r7, #16]
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	429a      	cmp	r2, r3
 801521a:	d006      	beq.n	801522a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801521c:	6938      	ldr	r0, [r7, #16]
 801521e:	f7ff ff5b 	bl	80150d8 <ip4_input_accept>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d108      	bne.n	801523a <ip4_input+0x10e>
 8015228:	e000      	b.n	801522c <ip4_input+0x100>
            continue;
 801522a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	613b      	str	r3, [r7, #16]
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d1ed      	bne.n	8015214 <ip4_input+0xe8>
 8015238:	e000      	b.n	801523c <ip4_input+0x110>
            break;
 801523a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801523c:	4b4b      	ldr	r3, [pc, #300]	; (801536c <ip4_input+0x240>)
 801523e:	691b      	ldr	r3, [r3, #16]
 8015240:	6839      	ldr	r1, [r7, #0]
 8015242:	4618      	mov	r0, r3
 8015244:	f000 f96e 	bl	8015524 <ip4_addr_isbroadcast_u32>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	d105      	bne.n	801525a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801524e:	4b47      	ldr	r3, [pc, #284]	; (801536c <ip4_input+0x240>)
 8015250:	691b      	ldr	r3, [r3, #16]
 8015252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015256:	2be0      	cmp	r3, #224	; 0xe0
 8015258:	d104      	bne.n	8015264 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7f7 fc12 	bl	800ca84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015260:	2300      	movs	r3, #0
 8015262:	e07e      	b.n	8015362 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015264:	693b      	ldr	r3, [r7, #16]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d104      	bne.n	8015274 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7f7 fc0a 	bl	800ca84 <pbuf_free>
    return ERR_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	e076      	b.n	8015362 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	88db      	ldrh	r3, [r3, #6]
 8015278:	b29b      	uxth	r3, r3
 801527a:	461a      	mov	r2, r3
 801527c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015280:	4013      	ands	r3, r2
 8015282:	2b00      	cmp	r3, #0
 8015284:	d00b      	beq.n	801529e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f000 fdbc 	bl	8015e04 <ip4_reass>
 801528c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d101      	bne.n	8015298 <ip4_input+0x16c>
      return ERR_OK;
 8015294:	2300      	movs	r3, #0
 8015296:	e064      	b.n	8015362 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801529e:	4a33      	ldr	r2, [pc, #204]	; (801536c <ip4_input+0x240>)
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80152a4:	4a31      	ldr	r2, [pc, #196]	; (801536c <ip4_input+0x240>)
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80152aa:	4a30      	ldr	r2, [pc, #192]	; (801536c <ip4_input+0x240>)
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	f003 030f 	and.w	r3, r3, #15
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	b29a      	uxth	r2, r3
 80152c0:	4b2a      	ldr	r3, [pc, #168]	; (801536c <ip4_input+0x240>)
 80152c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80152c4:	89fb      	ldrh	r3, [r7, #14]
 80152c6:	4619      	mov	r1, r3
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f7f7 fb55 	bl	800c978 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	7a5b      	ldrb	r3, [r3, #9]
 80152d2:	2b11      	cmp	r3, #17
 80152d4:	d006      	beq.n	80152e4 <ip4_input+0x1b8>
 80152d6:	2b11      	cmp	r3, #17
 80152d8:	dc13      	bgt.n	8015302 <ip4_input+0x1d6>
 80152da:	2b01      	cmp	r3, #1
 80152dc:	d00c      	beq.n	80152f8 <ip4_input+0x1cc>
 80152de:	2b06      	cmp	r3, #6
 80152e0:	d005      	beq.n	80152ee <ip4_input+0x1c2>
 80152e2:	e00e      	b.n	8015302 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80152e4:	6839      	ldr	r1, [r7, #0]
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f7fe f8da 	bl	80134a0 <udp_input>
        break;
 80152ec:	e026      	b.n	801533c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80152ee:	6839      	ldr	r1, [r7, #0]
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7f9 fc93 	bl	800ec1c <tcp_input>
        break;
 80152f6:	e021      	b.n	801533c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80152f8:	6839      	ldr	r1, [r7, #0]
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f7ff fcee 	bl	8014cdc <icmp_input>
        break;
 8015300:	e01c      	b.n	801533c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015302:	4b1a      	ldr	r3, [pc, #104]	; (801536c <ip4_input+0x240>)
 8015304:	695b      	ldr	r3, [r3, #20]
 8015306:	6939      	ldr	r1, [r7, #16]
 8015308:	4618      	mov	r0, r3
 801530a:	f000 f90b 	bl	8015524 <ip4_addr_isbroadcast_u32>
 801530e:	4603      	mov	r3, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	d10f      	bne.n	8015334 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015314:	4b15      	ldr	r3, [pc, #84]	; (801536c <ip4_input+0x240>)
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801531c:	2be0      	cmp	r3, #224	; 0xe0
 801531e:	d009      	beq.n	8015334 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015324:	4619      	mov	r1, r3
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7f7 fb99 	bl	800ca5e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801532c:	2102      	movs	r1, #2
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f7ff fdd8 	bl	8014ee4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f7 fba5 	bl	800ca84 <pbuf_free>
        break;
 801533a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801533c:	4b0b      	ldr	r3, [pc, #44]	; (801536c <ip4_input+0x240>)
 801533e:	2200      	movs	r2, #0
 8015340:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015342:	4b0a      	ldr	r3, [pc, #40]	; (801536c <ip4_input+0x240>)
 8015344:	2200      	movs	r2, #0
 8015346:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015348:	4b08      	ldr	r3, [pc, #32]	; (801536c <ip4_input+0x240>)
 801534a:	2200      	movs	r2, #0
 801534c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801534e:	4b07      	ldr	r3, [pc, #28]	; (801536c <ip4_input+0x240>)
 8015350:	2200      	movs	r2, #0
 8015352:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015354:	4b05      	ldr	r3, [pc, #20]	; (801536c <ip4_input+0x240>)
 8015356:	2200      	movs	r2, #0
 8015358:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801535a:	4b04      	ldr	r3, [pc, #16]	; (801536c <ip4_input+0x240>)
 801535c:	2200      	movs	r2, #0
 801535e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015360:	2300      	movs	r3, #0
}
 8015362:	4618      	mov	r0, r3
 8015364:	3718      	adds	r7, #24
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	200099b8 	.word	0x200099b8
 8015370:	2000d100 	.word	0x2000d100

08015374 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08a      	sub	sp, #40	; 0x28
 8015378:	af04      	add	r7, sp, #16
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
 8015380:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d009      	beq.n	80153a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d003      	beq.n	801539a <ip4_output_if+0x26>
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d102      	bne.n	80153a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539c:	3304      	adds	r3, #4
 801539e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80153a0:	78fa      	ldrb	r2, [r7, #3]
 80153a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a4:	9302      	str	r3, [sp, #8]
 80153a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80153aa:	9301      	str	r3, [sp, #4]
 80153ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	4613      	mov	r3, r2
 80153b4:	687a      	ldr	r2, [r7, #4]
 80153b6:	6979      	ldr	r1, [r7, #20]
 80153b8:	68f8      	ldr	r0, [r7, #12]
 80153ba:	f000 f805 	bl	80153c8 <ip4_output_if_src>
 80153be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3718      	adds	r7, #24
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b088      	sub	sp, #32
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	60f8      	str	r0, [r7, #12]
 80153d0:	60b9      	str	r1, [r7, #8]
 80153d2:	607a      	str	r2, [r7, #4]
 80153d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	7b9b      	ldrb	r3, [r3, #14]
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d006      	beq.n	80153ec <ip4_output_if_src+0x24>
 80153de:	4b4b      	ldr	r3, [pc, #300]	; (801550c <ip4_output_if_src+0x144>)
 80153e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80153e4:	494a      	ldr	r1, [pc, #296]	; (8015510 <ip4_output_if_src+0x148>)
 80153e6:	484b      	ldr	r0, [pc, #300]	; (8015514 <ip4_output_if_src+0x14c>)
 80153e8:	f001 fbfe 	bl	8016be8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d060      	beq.n	80154b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80153f2:	2314      	movs	r3, #20
 80153f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80153f6:	2114      	movs	r1, #20
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f7f7 faad 	bl	800c958 <pbuf_add_header>
 80153fe:	4603      	mov	r3, r0
 8015400:	2b00      	cmp	r3, #0
 8015402:	d002      	beq.n	801540a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015404:	f06f 0301 	mvn.w	r3, #1
 8015408:	e07c      	b.n	8015504 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	685b      	ldr	r3, [r3, #4]
 801540e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	895b      	ldrh	r3, [r3, #10]
 8015414:	2b13      	cmp	r3, #19
 8015416:	d806      	bhi.n	8015426 <ip4_output_if_src+0x5e>
 8015418:	4b3c      	ldr	r3, [pc, #240]	; (801550c <ip4_output_if_src+0x144>)
 801541a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801541e:	493e      	ldr	r1, [pc, #248]	; (8015518 <ip4_output_if_src+0x150>)
 8015420:	483c      	ldr	r0, [pc, #240]	; (8015514 <ip4_output_if_src+0x14c>)
 8015422:	f001 fbe1 	bl	8016be8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	78fa      	ldrb	r2, [r7, #3]
 801542a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015432:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	69fb      	ldr	r3, [r7, #28]
 801543a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801543c:	8b7b      	ldrh	r3, [r7, #26]
 801543e:	089b      	lsrs	r3, r3, #2
 8015440:	b29b      	uxth	r3, r3
 8015442:	b2db      	uxtb	r3, r3
 8015444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015448:	b2da      	uxtb	r2, r3
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801544e:	69fb      	ldr	r3, [r7, #28]
 8015450:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015454:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	891b      	ldrh	r3, [r3, #8]
 801545a:	4618      	mov	r0, r3
 801545c:	f7f5 ff20 	bl	800b2a0 <lwip_htons>
 8015460:	4603      	mov	r3, r0
 8015462:	461a      	mov	r2, r3
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	2200      	movs	r2, #0
 801546c:	719a      	strb	r2, [r3, #6]
 801546e:	2200      	movs	r2, #0
 8015470:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015472:	4b2a      	ldr	r3, [pc, #168]	; (801551c <ip4_output_if_src+0x154>)
 8015474:	881b      	ldrh	r3, [r3, #0]
 8015476:	4618      	mov	r0, r3
 8015478:	f7f5 ff12 	bl	800b2a0 <lwip_htons>
 801547c:	4603      	mov	r3, r0
 801547e:	461a      	mov	r2, r3
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015484:	4b25      	ldr	r3, [pc, #148]	; (801551c <ip4_output_if_src+0x154>)
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	3301      	adds	r3, #1
 801548a:	b29a      	uxth	r2, r3
 801548c:	4b23      	ldr	r3, [pc, #140]	; (801551c <ip4_output_if_src+0x154>)
 801548e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d104      	bne.n	80154a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015496:	4b22      	ldr	r3, [pc, #136]	; (8015520 <ip4_output_if_src+0x158>)
 8015498:	681a      	ldr	r2, [r3, #0]
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	60da      	str	r2, [r3, #12]
 801549e:	e003      	b.n	80154a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	2200      	movs	r2, #0
 80154ac:	729a      	strb	r2, [r3, #10]
 80154ae:	2200      	movs	r2, #0
 80154b0:	72da      	strb	r2, [r3, #11]
 80154b2:	e00f      	b.n	80154d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	895b      	ldrh	r3, [r3, #10]
 80154b8:	2b13      	cmp	r3, #19
 80154ba:	d802      	bhi.n	80154c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154bc:	f06f 0301 	mvn.w	r3, #1
 80154c0:	e020      	b.n	8015504 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	691b      	ldr	r3, [r3, #16]
 80154cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80154ce:	f107 0314 	add.w	r3, r7, #20
 80154d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80154d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d00c      	beq.n	80154f6 <ip4_output_if_src+0x12e>
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	891a      	ldrh	r2, [r3, #8]
 80154e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d906      	bls.n	80154f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80154e8:	687a      	ldr	r2, [r7, #4]
 80154ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f000 fe7d 	bl	80161ec <ip4_frag>
 80154f2:	4603      	mov	r3, r0
 80154f4:	e006      	b.n	8015504 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80154f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f8:	695b      	ldr	r3, [r3, #20]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	68f9      	ldr	r1, [r7, #12]
 80154fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015500:	4798      	blx	r3
 8015502:	4603      	mov	r3, r0
}
 8015504:	4618      	mov	r0, r3
 8015506:	3720      	adds	r7, #32
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	0801b734 	.word	0x0801b734
 8015510:	0801b768 	.word	0x0801b768
 8015514:	0801b774 	.word	0x0801b774
 8015518:	0801b79c 	.word	0x0801b79c
 801551c:	2000d25e 	.word	0x2000d25e
 8015520:	0801bc74 	.word	0x0801bc74

08015524 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015524:	b480      	push	{r7}
 8015526:	b085      	sub	sp, #20
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015538:	d002      	beq.n	8015540 <ip4_addr_isbroadcast_u32+0x1c>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d101      	bne.n	8015544 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015540:	2301      	movs	r3, #1
 8015542:	e02a      	b.n	801559a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801554a:	f003 0302 	and.w	r3, r3, #2
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015552:	2300      	movs	r3, #0
 8015554:	e021      	b.n	801559a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	3304      	adds	r3, #4
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	429a      	cmp	r2, r3
 8015560:	d101      	bne.n	8015566 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015562:	2300      	movs	r3, #0
 8015564:	e019      	b.n	801559a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	3304      	adds	r3, #4
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	405a      	eors	r2, r3
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	3308      	adds	r3, #8
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	4013      	ands	r3, r2
 8015578:	2b00      	cmp	r3, #0
 801557a:	d10d      	bne.n	8015598 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	3308      	adds	r3, #8
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	43da      	mvns	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	3308      	adds	r3, #8
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015590:	429a      	cmp	r2, r3
 8015592:	d101      	bne.n	8015598 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015594:	2301      	movs	r3, #1
 8015596:	e000      	b.n	801559a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015598:	2300      	movs	r3, #0
  }
}
 801559a:	4618      	mov	r0, r3
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
	...

080155a8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08a      	sub	sp, #40	; 0x28
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80155b2:	f107 030c 	add.w	r3, r7, #12
 80155b6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80155c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155c4:	3301      	adds	r3, #1
 80155c6:	4a89      	ldr	r2, [pc, #548]	; (80157ec <ip4addr_aton+0x244>)
 80155c8:	4413      	add	r3, r2
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	f003 0304 	and.w	r3, r3, #4
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d101      	bne.n	80155d8 <ip4addr_aton+0x30>
      return 0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	e105      	b.n	80157e4 <ip4addr_aton+0x23c>
    }
    val = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80155dc:	230a      	movs	r3, #10
 80155de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80155e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155e6:	2b30      	cmp	r3, #48	; 0x30
 80155e8:	d11c      	bne.n	8015624 <ip4addr_aton+0x7c>
      c = *++cp;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	3301      	adds	r3, #1
 80155ee:	607b      	str	r3, [r7, #4]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 80155f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155fc:	2b78      	cmp	r3, #120	; 0x78
 80155fe:	d003      	beq.n	8015608 <ip4addr_aton+0x60>
 8015600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015604:	2b58      	cmp	r3, #88	; 0x58
 8015606:	d10a      	bne.n	801561e <ip4addr_aton+0x76>
        base = 16;
 8015608:	2310      	movs	r3, #16
 801560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	3301      	adds	r3, #1
 8015612:	607b      	str	r3, [r7, #4]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801561c:	e002      	b.n	8015624 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801561e:	2308      	movs	r3, #8
 8015620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8015624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015628:	3301      	adds	r3, #1
 801562a:	4a70      	ldr	r2, [pc, #448]	; (80157ec <ip4addr_aton+0x244>)
 801562c:	4413      	add	r3, r2
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	f003 0304 	and.w	r3, r3, #4
 8015634:	2b00      	cmp	r3, #0
 8015636:	d011      	beq.n	801565c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8015638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801563e:	fb03 f202 	mul.w	r2, r3, r2
 8015642:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015646:	4413      	add	r3, r2
 8015648:	3b30      	subs	r3, #48	; 0x30
 801564a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	3301      	adds	r3, #1
 8015650:	607b      	str	r3, [r7, #4]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801565a:	e7e3      	b.n	8015624 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801565c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015660:	2b10      	cmp	r3, #16
 8015662:	d127      	bne.n	80156b4 <ip4addr_aton+0x10c>
 8015664:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015668:	3301      	adds	r3, #1
 801566a:	4a60      	ldr	r2, [pc, #384]	; (80157ec <ip4addr_aton+0x244>)
 801566c:	4413      	add	r3, r2
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015674:	2b00      	cmp	r3, #0
 8015676:	d01d      	beq.n	80156b4 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8015678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567a:	011b      	lsls	r3, r3, #4
 801567c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015680:	f102 010a 	add.w	r1, r2, #10
 8015684:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015688:	3201      	adds	r2, #1
 801568a:	4858      	ldr	r0, [pc, #352]	; (80157ec <ip4addr_aton+0x244>)
 801568c:	4402      	add	r2, r0
 801568e:	7812      	ldrb	r2, [r2, #0]
 8015690:	f002 0203 	and.w	r2, r2, #3
 8015694:	2a02      	cmp	r2, #2
 8015696:	d101      	bne.n	801569c <ip4addr_aton+0xf4>
 8015698:	2261      	movs	r2, #97	; 0x61
 801569a:	e000      	b.n	801569e <ip4addr_aton+0xf6>
 801569c:	2241      	movs	r2, #65	; 0x41
 801569e:	1a8a      	subs	r2, r1, r2
 80156a0:	4313      	orrs	r3, r2
 80156a2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3301      	adds	r3, #1
 80156a8:	607b      	str	r3, [r7, #4]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80156b2:	e7b7      	b.n	8015624 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80156b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156b8:	2b2e      	cmp	r3, #46	; 0x2e
 80156ba:	d114      	bne.n	80156e6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80156bc:	f107 030c 	add.w	r3, r7, #12
 80156c0:	330c      	adds	r3, #12
 80156c2:	69fa      	ldr	r2, [r7, #28]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d301      	bcc.n	80156cc <ip4addr_aton+0x124>
        return 0;
 80156c8:	2300      	movs	r3, #0
 80156ca:	e08b      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	1d1a      	adds	r2, r3, #4
 80156d0:	61fa      	str	r2, [r7, #28]
 80156d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156d4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	3301      	adds	r3, #1
 80156da:	607b      	str	r3, [r7, #4]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80156e4:	e76c      	b.n	80155c0 <ip4addr_aton+0x18>
    } else {
      break;
 80156e6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80156e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00b      	beq.n	8015708 <ip4addr_aton+0x160>
 80156f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156f4:	3301      	adds	r3, #1
 80156f6:	4a3d      	ldr	r2, [pc, #244]	; (80157ec <ip4addr_aton+0x244>)
 80156f8:	4413      	add	r3, r2
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	f003 0308 	and.w	r3, r3, #8
 8015700:	2b00      	cmp	r3, #0
 8015702:	d101      	bne.n	8015708 <ip4addr_aton+0x160>
    return 0;
 8015704:	2300      	movs	r3, #0
 8015706:	e06d      	b.n	80157e4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015708:	f107 030c 	add.w	r3, r7, #12
 801570c:	69fa      	ldr	r2, [r7, #28]
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	109b      	asrs	r3, r3, #2
 8015712:	3301      	adds	r3, #1
 8015714:	2b04      	cmp	r3, #4
 8015716:	d853      	bhi.n	80157c0 <ip4addr_aton+0x218>
 8015718:	a201      	add	r2, pc, #4	; (adr r2, 8015720 <ip4addr_aton+0x178>)
 801571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801571e:	bf00      	nop
 8015720:	08015735 	.word	0x08015735
 8015724:	080157cf 	.word	0x080157cf
 8015728:	08015739 	.word	0x08015739
 801572c:	0801575b 	.word	0x0801575b
 8015730:	08015789 	.word	0x08015789

    case 0:
      return 0;       /* initial nondigit */
 8015734:	2300      	movs	r3, #0
 8015736:	e055      	b.n	80157e4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801573e:	d301      	bcc.n	8015744 <ip4addr_aton+0x19c>
        return 0;
 8015740:	2300      	movs	r3, #0
 8015742:	e04f      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2bff      	cmp	r3, #255	; 0xff
 8015748:	d901      	bls.n	801574e <ip4addr_aton+0x1a6>
        return 0;
 801574a:	2300      	movs	r3, #0
 801574c:	e04a      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	061b      	lsls	r3, r3, #24
 8015752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015754:	4313      	orrs	r3, r2
 8015756:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015758:	e03a      	b.n	80157d0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015760:	d301      	bcc.n	8015766 <ip4addr_aton+0x1be>
        return 0;
 8015762:	2300      	movs	r3, #0
 8015764:	e03e      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2bff      	cmp	r3, #255	; 0xff
 801576a:	d802      	bhi.n	8015772 <ip4addr_aton+0x1ca>
 801576c:	693b      	ldr	r3, [r7, #16]
 801576e:	2bff      	cmp	r3, #255	; 0xff
 8015770:	d901      	bls.n	8015776 <ip4addr_aton+0x1ce>
        return 0;
 8015772:	2300      	movs	r3, #0
 8015774:	e036      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	061a      	lsls	r2, r3, #24
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	041b      	lsls	r3, r3, #16
 801577e:	4313      	orrs	r3, r2
 8015780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015782:	4313      	orrs	r3, r2
 8015784:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015786:	e023      	b.n	80157d0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8015788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578a:	2bff      	cmp	r3, #255	; 0xff
 801578c:	d901      	bls.n	8015792 <ip4addr_aton+0x1ea>
        return 0;
 801578e:	2300      	movs	r3, #0
 8015790:	e028      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2bff      	cmp	r3, #255	; 0xff
 8015796:	d805      	bhi.n	80157a4 <ip4addr_aton+0x1fc>
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	2bff      	cmp	r3, #255	; 0xff
 801579c:	d802      	bhi.n	80157a4 <ip4addr_aton+0x1fc>
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	2bff      	cmp	r3, #255	; 0xff
 80157a2:	d901      	bls.n	80157a8 <ip4addr_aton+0x200>
        return 0;
 80157a4:	2300      	movs	r3, #0
 80157a6:	e01d      	b.n	80157e4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	061a      	lsls	r2, r3, #24
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	041b      	lsls	r3, r3, #16
 80157b0:	431a      	orrs	r2, r3
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	021b      	lsls	r3, r3, #8
 80157b6:	4313      	orrs	r3, r2
 80157b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157ba:	4313      	orrs	r3, r2
 80157bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80157be:	e007      	b.n	80157d0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80157c0:	4b0b      	ldr	r3, [pc, #44]	; (80157f0 <ip4addr_aton+0x248>)
 80157c2:	22f9      	movs	r2, #249	; 0xf9
 80157c4:	490b      	ldr	r1, [pc, #44]	; (80157f4 <ip4addr_aton+0x24c>)
 80157c6:	480c      	ldr	r0, [pc, #48]	; (80157f8 <ip4addr_aton+0x250>)
 80157c8:	f001 fa0e 	bl	8016be8 <iprintf>
      break;
 80157cc:	e000      	b.n	80157d0 <ip4addr_aton+0x228>
      break;
 80157ce:	bf00      	nop
  }
  if (addr) {
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d005      	beq.n	80157e2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80157d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157d8:	f7f5 fd77 	bl	800b2ca <lwip_htonl>
 80157dc:	4602      	mov	r2, r0
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80157e2:	2301      	movs	r3, #1
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3728      	adds	r7, #40	; 0x28
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	0801bcff 	.word	0x0801bcff
 80157f0:	0801b7cc 	.word	0x0801b7cc
 80157f4:	0801b808 	.word	0x0801b808
 80157f8:	0801b814 	.word	0x0801b814

080157fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015802:	2300      	movs	r3, #0
 8015804:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015806:	4b12      	ldr	r3, [pc, #72]	; (8015850 <ip_reass_tmr+0x54>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801580c:	e018      	b.n	8015840 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	7fdb      	ldrb	r3, [r3, #31]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d00b      	beq.n	801582e <ip_reass_tmr+0x32>
      r->timer--;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	7fdb      	ldrb	r3, [r3, #31]
 801581a:	3b01      	subs	r3, #1
 801581c:	b2da      	uxtb	r2, r3
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	60fb      	str	r3, [r7, #12]
 801582c:	e008      	b.n	8015840 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015838:	68b9      	ldr	r1, [r7, #8]
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f000 f80a 	bl	8015854 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1e3      	bne.n	801580e <ip_reass_tmr+0x12>
    }
  }
}
 8015846:	bf00      	nop
 8015848:	bf00      	nop
 801584a:	3710      	adds	r7, #16
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}
 8015850:	2000d260 	.word	0x2000d260

08015854 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b088      	sub	sp, #32
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801585e:	2300      	movs	r3, #0
 8015860:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015862:	683a      	ldr	r2, [r7, #0]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	429a      	cmp	r2, r3
 8015868:	d105      	bne.n	8015876 <ip_reass_free_complete_datagram+0x22>
 801586a:	4b45      	ldr	r3, [pc, #276]	; (8015980 <ip_reass_free_complete_datagram+0x12c>)
 801586c:	22ab      	movs	r2, #171	; 0xab
 801586e:	4945      	ldr	r1, [pc, #276]	; (8015984 <ip_reass_free_complete_datagram+0x130>)
 8015870:	4845      	ldr	r0, [pc, #276]	; (8015988 <ip_reass_free_complete_datagram+0x134>)
 8015872:	f001 f9b9 	bl	8016be8 <iprintf>
  if (prev != NULL) {
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d00a      	beq.n	8015892 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	429a      	cmp	r2, r3
 8015884:	d005      	beq.n	8015892 <ip_reass_free_complete_datagram+0x3e>
 8015886:	4b3e      	ldr	r3, [pc, #248]	; (8015980 <ip_reass_free_complete_datagram+0x12c>)
 8015888:	22ad      	movs	r2, #173	; 0xad
 801588a:	4940      	ldr	r1, [pc, #256]	; (801598c <ip_reass_free_complete_datagram+0x138>)
 801588c:	483e      	ldr	r0, [pc, #248]	; (8015988 <ip_reass_free_complete_datagram+0x134>)
 801588e:	f001 f9ab 	bl	8016be8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	889b      	ldrh	r3, [r3, #4]
 801589e:	b29b      	uxth	r3, r3
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d12a      	bne.n	80158fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	6858      	ldr	r0, [r3, #4]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	3308      	adds	r3, #8
 80158ba:	2214      	movs	r2, #20
 80158bc:	4619      	mov	r1, r3
 80158be:	f001 fb54 	bl	8016f6a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80158c2:	2101      	movs	r1, #1
 80158c4:	69b8      	ldr	r0, [r7, #24]
 80158c6:	f7ff fb1d 	bl	8014f04 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80158ca:	69b8      	ldr	r0, [r7, #24]
 80158cc:	f7f7 f968 	bl	800cba0 <pbuf_clen>
 80158d0:	4603      	mov	r3, r0
 80158d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80158d4:	8bfa      	ldrh	r2, [r7, #30]
 80158d6:	8a7b      	ldrh	r3, [r7, #18]
 80158d8:	4413      	add	r3, r2
 80158da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158de:	db05      	blt.n	80158ec <ip_reass_free_complete_datagram+0x98>
 80158e0:	4b27      	ldr	r3, [pc, #156]	; (8015980 <ip_reass_free_complete_datagram+0x12c>)
 80158e2:	22bc      	movs	r2, #188	; 0xbc
 80158e4:	492a      	ldr	r1, [pc, #168]	; (8015990 <ip_reass_free_complete_datagram+0x13c>)
 80158e6:	4828      	ldr	r0, [pc, #160]	; (8015988 <ip_reass_free_complete_datagram+0x134>)
 80158e8:	f001 f97e 	bl	8016be8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80158ec:	8bfa      	ldrh	r2, [r7, #30]
 80158ee:	8a7b      	ldrh	r3, [r7, #18]
 80158f0:	4413      	add	r3, r2
 80158f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80158f4:	69b8      	ldr	r0, [r7, #24]
 80158f6:	f7f7 f8c5 	bl	800ca84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015900:	e01f      	b.n	8015942 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015902:	69bb      	ldr	r3, [r7, #24]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015908:	69bb      	ldr	r3, [r7, #24]
 801590a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f7f7 f944 	bl	800cba0 <pbuf_clen>
 8015918:	4603      	mov	r3, r0
 801591a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801591c:	8bfa      	ldrh	r2, [r7, #30]
 801591e:	8a7b      	ldrh	r3, [r7, #18]
 8015920:	4413      	add	r3, r2
 8015922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015926:	db05      	blt.n	8015934 <ip_reass_free_complete_datagram+0xe0>
 8015928:	4b15      	ldr	r3, [pc, #84]	; (8015980 <ip_reass_free_complete_datagram+0x12c>)
 801592a:	22cc      	movs	r2, #204	; 0xcc
 801592c:	4918      	ldr	r1, [pc, #96]	; (8015990 <ip_reass_free_complete_datagram+0x13c>)
 801592e:	4816      	ldr	r0, [pc, #88]	; (8015988 <ip_reass_free_complete_datagram+0x134>)
 8015930:	f001 f95a 	bl	8016be8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015934:	8bfa      	ldrh	r2, [r7, #30]
 8015936:	8a7b      	ldrh	r3, [r7, #18]
 8015938:	4413      	add	r3, r2
 801593a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f7f7 f8a1 	bl	800ca84 <pbuf_free>
  while (p != NULL) {
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d1dc      	bne.n	8015902 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f000 f8c2 	bl	8015ad4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015950:	4b10      	ldr	r3, [pc, #64]	; (8015994 <ip_reass_free_complete_datagram+0x140>)
 8015952:	881b      	ldrh	r3, [r3, #0]
 8015954:	8bfa      	ldrh	r2, [r7, #30]
 8015956:	429a      	cmp	r2, r3
 8015958:	d905      	bls.n	8015966 <ip_reass_free_complete_datagram+0x112>
 801595a:	4b09      	ldr	r3, [pc, #36]	; (8015980 <ip_reass_free_complete_datagram+0x12c>)
 801595c:	22d2      	movs	r2, #210	; 0xd2
 801595e:	490e      	ldr	r1, [pc, #56]	; (8015998 <ip_reass_free_complete_datagram+0x144>)
 8015960:	4809      	ldr	r0, [pc, #36]	; (8015988 <ip_reass_free_complete_datagram+0x134>)
 8015962:	f001 f941 	bl	8016be8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015966:	4b0b      	ldr	r3, [pc, #44]	; (8015994 <ip_reass_free_complete_datagram+0x140>)
 8015968:	881a      	ldrh	r2, [r3, #0]
 801596a:	8bfb      	ldrh	r3, [r7, #30]
 801596c:	1ad3      	subs	r3, r2, r3
 801596e:	b29a      	uxth	r2, r3
 8015970:	4b08      	ldr	r3, [pc, #32]	; (8015994 <ip_reass_free_complete_datagram+0x140>)
 8015972:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015974:	8bfb      	ldrh	r3, [r7, #30]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3720      	adds	r7, #32
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	0801b83c 	.word	0x0801b83c
 8015984:	0801b878 	.word	0x0801b878
 8015988:	0801b884 	.word	0x0801b884
 801598c:	0801b8ac 	.word	0x0801b8ac
 8015990:	0801b8c0 	.word	0x0801b8c0
 8015994:	2000d264 	.word	0x2000d264
 8015998:	0801b8e0 	.word	0x0801b8e0

0801599c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b08a      	sub	sp, #40	; 0x28
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80159a6:	2300      	movs	r3, #0
 80159a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80159aa:	2300      	movs	r3, #0
 80159ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80159ae:	2300      	movs	r3, #0
 80159b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80159b2:	2300      	movs	r3, #0
 80159b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80159ba:	4b28      	ldr	r3, [pc, #160]	; (8015a5c <ip_reass_remove_oldest_datagram+0xc0>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159c0:	e030      	b.n	8015a24 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80159c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c4:	695a      	ldr	r2, [r3, #20]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d10c      	bne.n	80159e8 <ip_reass_remove_oldest_datagram+0x4c>
 80159ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d0:	699a      	ldr	r2, [r3, #24]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d106      	bne.n	80159e8 <ip_reass_remove_oldest_datagram+0x4c>
 80159da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159dc:	899a      	ldrh	r2, [r3, #12]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	889b      	ldrh	r3, [r3, #4]
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d014      	beq.n	8015a12 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	3301      	adds	r3, #1
 80159ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80159ee:	6a3b      	ldr	r3, [r7, #32]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d104      	bne.n	80159fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	61bb      	str	r3, [r7, #24]
 80159fc:	e009      	b.n	8015a12 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80159fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a00:	7fda      	ldrb	r2, [r3, #31]
 8015a02:	6a3b      	ldr	r3, [r7, #32]
 8015a04:	7fdb      	ldrb	r3, [r3, #31]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d803      	bhi.n	8015a12 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a0e:	69fb      	ldr	r3, [r7, #28]
 8015a10:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a1c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d1cb      	bne.n	80159c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015a2a:	6a3b      	ldr	r3, [r7, #32]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d008      	beq.n	8015a42 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015a30:	69b9      	ldr	r1, [r7, #24]
 8015a32:	6a38      	ldr	r0, [r7, #32]
 8015a34:	f7ff ff0e 	bl	8015854 <ip_reass_free_complete_datagram>
 8015a38:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015a3a:	697a      	ldr	r2, [r7, #20]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	4413      	add	r3, r2
 8015a40:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015a42:	697a      	ldr	r2, [r7, #20]
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	da02      	bge.n	8015a50 <ip_reass_remove_oldest_datagram+0xb4>
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	dcac      	bgt.n	80159aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015a50:	697b      	ldr	r3, [r7, #20]
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3728      	adds	r7, #40	; 0x28
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	2000d260 	.word	0x2000d260

08015a60 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b084      	sub	sp, #16
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a6a:	2004      	movs	r0, #4
 8015a6c:	f7f6 f8f0 	bl	800bc50 <memp_malloc>
 8015a70:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d110      	bne.n	8015a9a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015a78:	6839      	ldr	r1, [r7, #0]
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7ff ff8e 	bl	801599c <ip_reass_remove_oldest_datagram>
 8015a80:	4602      	mov	r2, r0
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	4293      	cmp	r3, r2
 8015a86:	dc03      	bgt.n	8015a90 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a88:	2004      	movs	r0, #4
 8015a8a:	f7f6 f8e1 	bl	800bc50 <memp_malloc>
 8015a8e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d101      	bne.n	8015a9a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e016      	b.n	8015ac8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015a9a:	2220      	movs	r2, #32
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	68f8      	ldr	r0, [r7, #12]
 8015aa0:	f001 f975 	bl	8016d8e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	220f      	movs	r2, #15
 8015aa8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015aaa:	4b09      	ldr	r3, [pc, #36]	; (8015ad0 <ip_reass_enqueue_new_datagram+0x70>)
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015ab2:	4a07      	ldr	r2, [pc, #28]	; (8015ad0 <ip_reass_enqueue_new_datagram+0x70>)
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	3308      	adds	r3, #8
 8015abc:	2214      	movs	r2, #20
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f001 fa52 	bl	8016f6a <memcpy>
  return ipr;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	2000d260 	.word	0x2000d260

08015ad4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b082      	sub	sp, #8
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
 8015adc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ade:	4b10      	ldr	r3, [pc, #64]	; (8015b20 <ip_reass_dequeue_datagram+0x4c>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d104      	bne.n	8015af2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4a0c      	ldr	r2, [pc, #48]	; (8015b20 <ip_reass_dequeue_datagram+0x4c>)
 8015aee:	6013      	str	r3, [r2, #0]
 8015af0:	e00d      	b.n	8015b0e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d106      	bne.n	8015b06 <ip_reass_dequeue_datagram+0x32>
 8015af8:	4b0a      	ldr	r3, [pc, #40]	; (8015b24 <ip_reass_dequeue_datagram+0x50>)
 8015afa:	f240 1245 	movw	r2, #325	; 0x145
 8015afe:	490a      	ldr	r1, [pc, #40]	; (8015b28 <ip_reass_dequeue_datagram+0x54>)
 8015b00:	480a      	ldr	r0, [pc, #40]	; (8015b2c <ip_reass_dequeue_datagram+0x58>)
 8015b02:	f001 f871 	bl	8016be8 <iprintf>
    prev->next = ipr->next;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b0e:	6879      	ldr	r1, [r7, #4]
 8015b10:	2004      	movs	r0, #4
 8015b12:	f7f6 f913 	bl	800bd3c <memp_free>
}
 8015b16:	bf00      	nop
 8015b18:	3708      	adds	r7, #8
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	2000d260 	.word	0x2000d260
 8015b24:	0801b83c 	.word	0x0801b83c
 8015b28:	0801b904 	.word	0x0801b904
 8015b2c:	0801b884 	.word	0x0801b884

08015b30 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b08c      	sub	sp, #48	; 0x30
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015b40:	2301      	movs	r3, #1
 8015b42:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	885b      	ldrh	r3, [r3, #2]
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f5 fba5 	bl	800b2a0 <lwip_htons>
 8015b56:	4603      	mov	r3, r0
 8015b58:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	f003 030f 	and.w	r3, r3, #15
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b68:	7e7b      	ldrb	r3, [r7, #25]
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	8b7a      	ldrh	r2, [r7, #26]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d202      	bcs.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b72:	f04f 33ff 	mov.w	r3, #4294967295
 8015b76:	e135      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015b78:	7e7b      	ldrb	r3, [r7, #25]
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	8b7a      	ldrh	r2, [r7, #26]
 8015b7e:	1ad3      	subs	r3, r2, r3
 8015b80:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	88db      	ldrh	r3, [r3, #6]
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7f5 fb89 	bl	800b2a0 <lwip_htons>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	701a      	strb	r2, [r3, #0]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	705a      	strb	r2, [r3, #1]
 8015baa:	2200      	movs	r2, #0
 8015bac:	709a      	strb	r2, [r3, #2]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb4:	8afa      	ldrh	r2, [r7, #22]
 8015bb6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015bb8:	8afa      	ldrh	r2, [r7, #22]
 8015bba:	8b7b      	ldrh	r3, [r7, #26]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	b29a      	uxth	r2, r3
 8015bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc6:	88db      	ldrh	r3, [r3, #6]
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	8afa      	ldrh	r2, [r7, #22]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d902      	bls.n	8015bd6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015bd4:	e106      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	627b      	str	r3, [r7, #36]	; 0x24
 8015bdc:	e068      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be6:	889b      	ldrh	r3, [r3, #4]
 8015be8:	b29a      	uxth	r2, r3
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	889b      	ldrh	r3, [r3, #4]
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d235      	bcs.n	8015c60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d020      	beq.n	8015c42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c02:	889b      	ldrh	r3, [r3, #4]
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c08:	88db      	ldrh	r3, [r3, #6]
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d307      	bcc.n	8015c20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c12:	88db      	ldrh	r3, [r3, #6]
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	889b      	ldrh	r3, [r3, #4]
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d902      	bls.n	8015c26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c20:	f04f 33ff 	mov.w	r3, #4294967295
 8015c24:	e0de      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c28:	68ba      	ldr	r2, [r7, #8]
 8015c2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2e:	88db      	ldrh	r3, [r3, #6]
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c34:	889b      	ldrh	r3, [r3, #4]
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d03d      	beq.n	8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015c40:	e03a      	b.n	8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c44:	88db      	ldrh	r3, [r3, #6]
 8015c46:	b29a      	uxth	r2, r3
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	889b      	ldrh	r3, [r3, #4]
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d902      	bls.n	8015c58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c52:	f04f 33ff 	mov.w	r3, #4294967295
 8015c56:	e0c5      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	68ba      	ldr	r2, [r7, #8]
 8015c5c:	605a      	str	r2, [r3, #4]
      break;
 8015c5e:	e02b      	b.n	8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c62:	889b      	ldrh	r3, [r3, #4]
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d102      	bne.n	8015c76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c70:	f04f 33ff 	mov.w	r3, #4294967295
 8015c74:	e0b6      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c78:	889b      	ldrh	r3, [r3, #4]
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	88db      	ldrh	r3, [r3, #6]
 8015c80:	b29b      	uxth	r3, r3
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d202      	bcs.n	8015c8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c86:	f04f 33ff 	mov.w	r3, #4294967295
 8015c8a:	e0ab      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d009      	beq.n	8015ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c94:	88db      	ldrh	r3, [r3, #6]
 8015c96:	b29a      	uxth	r2, r3
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	889b      	ldrh	r3, [r3, #4]
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d001      	beq.n	8015ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d193      	bne.n	8015bde <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015cb6:	e000      	b.n	8015cba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015cb8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d12d      	bne.n	8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d01c      	beq.n	8015d00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cce:	889b      	ldrh	r3, [r3, #4]
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d906      	bls.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015cd6:	4b45      	ldr	r3, [pc, #276]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cd8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015cdc:	4944      	ldr	r1, [pc, #272]	; (8015df0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015cde:	4845      	ldr	r0, [pc, #276]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ce0:	f000 ff82 	bl	8016be8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce6:	68ba      	ldr	r2, [r7, #8]
 8015ce8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cec:	88db      	ldrh	r3, [r3, #6]
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf2:	889b      	ldrh	r3, [r3, #4]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d010      	beq.n	8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	623b      	str	r3, [r7, #32]
 8015cfe:	e00d      	b.n	8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d006      	beq.n	8015d16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d08:	4b38      	ldr	r3, [pc, #224]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d0a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015d0e:	493a      	ldr	r1, [pc, #232]	; (8015df8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d10:	4838      	ldr	r0, [pc, #224]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d12:	f000 ff69 	bl	8016be8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d105      	bne.n	8015d2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	7f9b      	ldrb	r3, [r3, #30]
 8015d26:	f003 0301 	and.w	r3, r3, #1
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d059      	beq.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015d2e:	6a3b      	ldr	r3, [r7, #32]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d04f      	beq.n	8015dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	889b      	ldrh	r3, [r3, #4]
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d002      	beq.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	623b      	str	r3, [r7, #32]
 8015d4e:	e041      	b.n	8015dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d5a:	e012      	b.n	8015d82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d64:	88db      	ldrh	r3, [r3, #6]
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6a:	889b      	ldrh	r3, [r3, #4]
 8015d6c:	b29b      	uxth	r3, r3
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d002      	beq.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	623b      	str	r3, [r7, #32]
            break;
 8015d76:	e007      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d1e9      	bne.n	8015d5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015d88:	6a3b      	ldr	r3, [r7, #32]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d022      	beq.n	8015dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d106      	bne.n	8015da4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015d96:	4b15      	ldr	r3, [pc, #84]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d98:	f240 12df 	movw	r2, #479	; 0x1df
 8015d9c:	4917      	ldr	r1, [pc, #92]	; (8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d9e:	4815      	ldr	r0, [pc, #84]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015da0:	f000 ff22 	bl	8016be8 <iprintf>
          LWIP_ASSERT("sanity check",
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d106      	bne.n	8015dbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015db0:	4b0e      	ldr	r3, [pc, #56]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015db2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015db6:	4911      	ldr	r1, [pc, #68]	; (8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015db8:	480e      	ldr	r0, [pc, #56]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dba:	f000 ff15 	bl	8016be8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d006      	beq.n	8015dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015dc6:	4b09      	ldr	r3, [pc, #36]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dc8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015dcc:	490c      	ldr	r1, [pc, #48]	; (8015e00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015dce:	4809      	ldr	r0, [pc, #36]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dd0:	f000 ff0a 	bl	8016be8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bf14      	ite	ne
 8015dda:	2301      	movne	r3, #1
 8015ddc:	2300      	moveq	r3, #0
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	e000      	b.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015de2:	2300      	movs	r3, #0
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3730      	adds	r7, #48	; 0x30
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	0801b83c 	.word	0x0801b83c
 8015df0:	0801b920 	.word	0x0801b920
 8015df4:	0801b884 	.word	0x0801b884
 8015df8:	0801b940 	.word	0x0801b940
 8015dfc:	0801b978 	.word	0x0801b978
 8015e00:	0801b988 	.word	0x0801b988

08015e04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b08e      	sub	sp, #56	; 0x38
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	f003 030f 	and.w	r3, r3, #15
 8015e1a:	b2db      	uxtb	r3, r3
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	2b14      	cmp	r3, #20
 8015e22:	f040 8171 	bne.w	8016108 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e28:	88db      	ldrh	r3, [r3, #6]
 8015e2a:	b29b      	uxth	r3, r3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7f5 fa37 	bl	800b2a0 <lwip_htons>
 8015e32:	4603      	mov	r3, r0
 8015e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e40:	885b      	ldrh	r3, [r3, #2]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f5 fa2b 	bl	800b2a0 <lwip_htons>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	f003 030f 	and.w	r3, r3, #15
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e66:	429a      	cmp	r2, r3
 8015e68:	f0c0 8150 	bcc.w	801610c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e74:	1ad3      	subs	r3, r2, r3
 8015e76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f7f6 fe91 	bl	800cba0 <pbuf_clen>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015e82:	4b8c      	ldr	r3, [pc, #560]	; (80160b4 <ip4_reass+0x2b0>)
 8015e84:	881b      	ldrh	r3, [r3, #0]
 8015e86:	461a      	mov	r2, r3
 8015e88:	8c3b      	ldrh	r3, [r7, #32]
 8015e8a:	4413      	add	r3, r2
 8015e8c:	2b0a      	cmp	r3, #10
 8015e8e:	dd10      	ble.n	8015eb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e90:	8c3b      	ldrh	r3, [r7, #32]
 8015e92:	4619      	mov	r1, r3
 8015e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e96:	f7ff fd81 	bl	801599c <ip_reass_remove_oldest_datagram>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	f000 8137 	beq.w	8016110 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ea2:	4b84      	ldr	r3, [pc, #528]	; (80160b4 <ip4_reass+0x2b0>)
 8015ea4:	881b      	ldrh	r3, [r3, #0]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	8c3b      	ldrh	r3, [r7, #32]
 8015eaa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015eac:	2b0a      	cmp	r3, #10
 8015eae:	f300 812f 	bgt.w	8016110 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015eb2:	4b81      	ldr	r3, [pc, #516]	; (80160b8 <ip4_reass+0x2b4>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8015eb8:	e015      	b.n	8015ee6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ebc:	695a      	ldr	r2, [r3, #20]
 8015ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec0:	68db      	ldr	r3, [r3, #12]
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d10c      	bne.n	8015ee0 <ip4_reass+0xdc>
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec8:	699a      	ldr	r2, [r3, #24]
 8015eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ecc:	691b      	ldr	r3, [r3, #16]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d106      	bne.n	8015ee0 <ip4_reass+0xdc>
 8015ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed4:	899a      	ldrh	r2, [r3, #12]
 8015ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed8:	889b      	ldrh	r3, [r3, #4]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d006      	beq.n	8015eee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d1e6      	bne.n	8015eba <ip4_reass+0xb6>
 8015eec:	e000      	b.n	8015ef0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015eee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d109      	bne.n	8015f0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015ef6:	8c3b      	ldrh	r3, [r7, #32]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015efc:	f7ff fdb0 	bl	8015a60 <ip_reass_enqueue_new_datagram>
 8015f00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d11c      	bne.n	8015f42 <ip4_reass+0x13e>
      goto nullreturn;
 8015f08:	e105      	b.n	8016116 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0c:	88db      	ldrh	r3, [r3, #6]
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7f5 f9c5 	bl	800b2a0 <lwip_htons>
 8015f16:	4603      	mov	r3, r0
 8015f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d110      	bne.n	8015f42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f22:	89db      	ldrh	r3, [r3, #14]
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f5 f9bb 	bl	800b2a0 <lwip_htons>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d006      	beq.n	8015f42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f36:	3308      	adds	r3, #8
 8015f38:	2214      	movs	r2, #20
 8015f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f001 f814 	bl	8016f6a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f44:	88db      	ldrh	r3, [r3, #6]
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	f003 0320 	and.w	r3, r3, #32
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	bf0c      	ite	eq
 8015f50:	2301      	moveq	r3, #1
 8015f52:	2300      	movne	r3, #0
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015f58:	69fb      	ldr	r3, [r7, #28]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d00e      	beq.n	8015f7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f62:	4413      	add	r3, r2
 8015f64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015f66:	8b7a      	ldrh	r2, [r7, #26]
 8015f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	f0c0 80a0 	bcc.w	80160b0 <ip4_reass+0x2ac>
 8015f70:	8b7b      	ldrh	r3, [r7, #26]
 8015f72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015f76:	4293      	cmp	r3, r2
 8015f78:	f200 809a 	bhi.w	80160b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015f7c:	69fa      	ldr	r2, [r7, #28]
 8015f7e:	6879      	ldr	r1, [r7, #4]
 8015f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f82:	f7ff fdd5 	bl	8015b30 <ip_reass_chain_frag_into_datagram_and_validate>
 8015f86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f8e:	f000 809b 	beq.w	80160c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015f92:	4b48      	ldr	r3, [pc, #288]	; (80160b4 <ip4_reass+0x2b0>)
 8015f94:	881a      	ldrh	r2, [r3, #0]
 8015f96:	8c3b      	ldrh	r3, [r7, #32]
 8015f98:	4413      	add	r3, r2
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	4b45      	ldr	r3, [pc, #276]	; (80160b4 <ip4_reass+0x2b0>)
 8015f9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015fa0:	69fb      	ldr	r3, [r7, #28]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d00d      	beq.n	8015fc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015faa:	4413      	add	r3, r2
 8015fac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb0:	8a7a      	ldrh	r2, [r7, #18]
 8015fb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb6:	7f9b      	ldrb	r3, [r3, #30]
 8015fb8:	f043 0301 	orr.w	r3, r3, #1
 8015fbc:	b2da      	uxtb	r2, r3
 8015fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	d171      	bne.n	80160ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fca:	8b9b      	ldrh	r3, [r3, #28]
 8015fcc:	3314      	adds	r3, #20
 8015fce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe4:	3308      	adds	r3, #8
 8015fe6:	2214      	movs	r2, #20
 8015fe8:	4619      	mov	r1, r3
 8015fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fec:	f000 ffbd 	bl	8016f6a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015ff0:	8a3b      	ldrh	r3, [r7, #16]
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7f5 f954 	bl	800b2a0 <lwip_htons>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016002:	2200      	movs	r2, #0
 8016004:	719a      	strb	r2, [r3, #6]
 8016006:	2200      	movs	r2, #0
 8016008:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801600c:	2200      	movs	r2, #0
 801600e:	729a      	strb	r2, [r3, #10]
 8016010:	2200      	movs	r2, #0
 8016012:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801601a:	e00d      	b.n	8016038 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016022:	2114      	movs	r1, #20
 8016024:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016026:	f7f6 fca7 	bl	800c978 <pbuf_remove_header>
      pbuf_cat(p, r);
 801602a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f7f6 fdf7 	bl	800cc20 <pbuf_cat>
      r = iprh->next_pbuf;
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801603a:	2b00      	cmp	r3, #0
 801603c:	d1ee      	bne.n	801601c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801603e:	4b1e      	ldr	r3, [pc, #120]	; (80160b8 <ip4_reass+0x2b4>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016044:	429a      	cmp	r2, r3
 8016046:	d102      	bne.n	801604e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016048:	2300      	movs	r3, #0
 801604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801604c:	e010      	b.n	8016070 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801604e:	4b1a      	ldr	r3, [pc, #104]	; (80160b8 <ip4_reass+0x2b4>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016054:	e007      	b.n	8016066 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801605c:	429a      	cmp	r2, r3
 801605e:	d006      	beq.n	801606e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1f4      	bne.n	8016056 <ip4_reass+0x252>
 801606c:	e000      	b.n	8016070 <ip4_reass+0x26c>
          break;
 801606e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016074:	f7ff fd2e 	bl	8015ad4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7f6 fd91 	bl	800cba0 <pbuf_clen>
 801607e:	4603      	mov	r3, r0
 8016080:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016082:	4b0c      	ldr	r3, [pc, #48]	; (80160b4 <ip4_reass+0x2b0>)
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	8c3a      	ldrh	r2, [r7, #32]
 8016088:	429a      	cmp	r2, r3
 801608a:	d906      	bls.n	801609a <ip4_reass+0x296>
 801608c:	4b0b      	ldr	r3, [pc, #44]	; (80160bc <ip4_reass+0x2b8>)
 801608e:	f240 229b 	movw	r2, #667	; 0x29b
 8016092:	490b      	ldr	r1, [pc, #44]	; (80160c0 <ip4_reass+0x2bc>)
 8016094:	480b      	ldr	r0, [pc, #44]	; (80160c4 <ip4_reass+0x2c0>)
 8016096:	f000 fda7 	bl	8016be8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801609a:	4b06      	ldr	r3, [pc, #24]	; (80160b4 <ip4_reass+0x2b0>)
 801609c:	881a      	ldrh	r2, [r3, #0]
 801609e:	8c3b      	ldrh	r3, [r7, #32]
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	4b03      	ldr	r3, [pc, #12]	; (80160b4 <ip4_reass+0x2b0>)
 80160a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	e038      	b.n	801611e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80160ac:	2300      	movs	r3, #0
 80160ae:	e036      	b.n	801611e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80160b0:	bf00      	nop
 80160b2:	e00a      	b.n	80160ca <ip4_reass+0x2c6>
 80160b4:	2000d264 	.word	0x2000d264
 80160b8:	2000d260 	.word	0x2000d260
 80160bc:	0801b83c 	.word	0x0801b83c
 80160c0:	0801b9ac 	.word	0x0801b9ac
 80160c4:	0801b884 	.word	0x0801b884
    goto nullreturn_ipr;
 80160c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d106      	bne.n	80160de <ip4_reass+0x2da>
 80160d0:	4b15      	ldr	r3, [pc, #84]	; (8016128 <ip4_reass+0x324>)
 80160d2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80160d6:	4915      	ldr	r1, [pc, #84]	; (801612c <ip4_reass+0x328>)
 80160d8:	4815      	ldr	r0, [pc, #84]	; (8016130 <ip4_reass+0x32c>)
 80160da:	f000 fd85 	bl	8016be8 <iprintf>
  if (ipr->p == NULL) {
 80160de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d116      	bne.n	8016114 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80160e6:	4b13      	ldr	r3, [pc, #76]	; (8016134 <ip4_reass+0x330>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d006      	beq.n	80160fe <ip4_reass+0x2fa>
 80160f0:	4b0d      	ldr	r3, [pc, #52]	; (8016128 <ip4_reass+0x324>)
 80160f2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80160f6:	4910      	ldr	r1, [pc, #64]	; (8016138 <ip4_reass+0x334>)
 80160f8:	480d      	ldr	r0, [pc, #52]	; (8016130 <ip4_reass+0x32c>)
 80160fa:	f000 fd75 	bl	8016be8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80160fe:	2100      	movs	r1, #0
 8016100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016102:	f7ff fce7 	bl	8015ad4 <ip_reass_dequeue_datagram>
 8016106:	e006      	b.n	8016116 <ip4_reass+0x312>
    goto nullreturn;
 8016108:	bf00      	nop
 801610a:	e004      	b.n	8016116 <ip4_reass+0x312>
    goto nullreturn;
 801610c:	bf00      	nop
 801610e:	e002      	b.n	8016116 <ip4_reass+0x312>
      goto nullreturn;
 8016110:	bf00      	nop
 8016112:	e000      	b.n	8016116 <ip4_reass+0x312>
  }

nullreturn:
 8016114:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7f6 fcb4 	bl	800ca84 <pbuf_free>
  return NULL;
 801611c:	2300      	movs	r3, #0
}
 801611e:	4618      	mov	r0, r3
 8016120:	3738      	adds	r7, #56	; 0x38
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	0801b83c 	.word	0x0801b83c
 801612c:	0801b9c8 	.word	0x0801b9c8
 8016130:	0801b884 	.word	0x0801b884
 8016134:	2000d260 	.word	0x2000d260
 8016138:	0801b9d4 	.word	0x0801b9d4

0801613c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016140:	2005      	movs	r0, #5
 8016142:	f7f5 fd85 	bl	800bc50 <memp_malloc>
 8016146:	4603      	mov	r3, r0
}
 8016148:	4618      	mov	r0, r3
 801614a:	bd80      	pop	{r7, pc}

0801614c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b082      	sub	sp, #8
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d106      	bne.n	8016168 <ip_frag_free_pbuf_custom_ref+0x1c>
 801615a:	4b07      	ldr	r3, [pc, #28]	; (8016178 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801615c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016160:	4906      	ldr	r1, [pc, #24]	; (801617c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016162:	4807      	ldr	r0, [pc, #28]	; (8016180 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016164:	f000 fd40 	bl	8016be8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016168:	6879      	ldr	r1, [r7, #4]
 801616a:	2005      	movs	r0, #5
 801616c:	f7f5 fde6 	bl	800bd3c <memp_free>
}
 8016170:	bf00      	nop
 8016172:	3708      	adds	r7, #8
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	0801b83c 	.word	0x0801b83c
 801617c:	0801b9f4 	.word	0x0801b9f4
 8016180:	0801b884 	.word	0x0801b884

08016184 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b084      	sub	sp, #16
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d106      	bne.n	80161a4 <ipfrag_free_pbuf_custom+0x20>
 8016196:	4b11      	ldr	r3, [pc, #68]	; (80161dc <ipfrag_free_pbuf_custom+0x58>)
 8016198:	f240 22ce 	movw	r2, #718	; 0x2ce
 801619c:	4910      	ldr	r1, [pc, #64]	; (80161e0 <ipfrag_free_pbuf_custom+0x5c>)
 801619e:	4811      	ldr	r0, [pc, #68]	; (80161e4 <ipfrag_free_pbuf_custom+0x60>)
 80161a0:	f000 fd22 	bl	8016be8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d006      	beq.n	80161ba <ipfrag_free_pbuf_custom+0x36>
 80161ac:	4b0b      	ldr	r3, [pc, #44]	; (80161dc <ipfrag_free_pbuf_custom+0x58>)
 80161ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80161b2:	490d      	ldr	r1, [pc, #52]	; (80161e8 <ipfrag_free_pbuf_custom+0x64>)
 80161b4:	480b      	ldr	r0, [pc, #44]	; (80161e4 <ipfrag_free_pbuf_custom+0x60>)
 80161b6:	f000 fd17 	bl	8016be8 <iprintf>
  if (pcr->original != NULL) {
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	695b      	ldr	r3, [r3, #20]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d004      	beq.n	80161cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	695b      	ldr	r3, [r3, #20]
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7f6 fc5c 	bl	800ca84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80161cc:	68f8      	ldr	r0, [r7, #12]
 80161ce:	f7ff ffbd 	bl	801614c <ip_frag_free_pbuf_custom_ref>
}
 80161d2:	bf00      	nop
 80161d4:	3710      	adds	r7, #16
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	0801b83c 	.word	0x0801b83c
 80161e0:	0801ba00 	.word	0x0801ba00
 80161e4:	0801b884 	.word	0x0801b884
 80161e8:	0801ba0c 	.word	0x0801ba0c

080161ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b094      	sub	sp, #80	; 0x50
 80161f0:	af02      	add	r7, sp, #8
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016202:	3b14      	subs	r3, #20
 8016204:	2b00      	cmp	r3, #0
 8016206:	da00      	bge.n	801620a <ip4_frag+0x1e>
 8016208:	3307      	adds	r3, #7
 801620a:	10db      	asrs	r3, r3, #3
 801620c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801620e:	2314      	movs	r3, #20
 8016210:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801621a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f003 030f 	and.w	r3, r3, #15
 8016224:	b2db      	uxtb	r3, r3
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b14      	cmp	r3, #20
 801622c:	d002      	beq.n	8016234 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801622e:	f06f 0305 	mvn.w	r3, #5
 8016232:	e110      	b.n	8016456 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	895b      	ldrh	r3, [r3, #10]
 8016238:	2b13      	cmp	r3, #19
 801623a:	d809      	bhi.n	8016250 <ip4_frag+0x64>
 801623c:	4b88      	ldr	r3, [pc, #544]	; (8016460 <ip4_frag+0x274>)
 801623e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016242:	4988      	ldr	r1, [pc, #544]	; (8016464 <ip4_frag+0x278>)
 8016244:	4888      	ldr	r0, [pc, #544]	; (8016468 <ip4_frag+0x27c>)
 8016246:	f000 fccf 	bl	8016be8 <iprintf>
 801624a:	f06f 0305 	mvn.w	r3, #5
 801624e:	e102      	b.n	8016456 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016252:	88db      	ldrh	r3, [r3, #6]
 8016254:	b29b      	uxth	r3, r3
 8016256:	4618      	mov	r0, r3
 8016258:	f7f5 f822 	bl	800b2a0 <lwip_htons>
 801625c:	4603      	mov	r3, r0
 801625e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016262:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016266:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801626a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801626c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016270:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	891b      	ldrh	r3, [r3, #8]
 8016276:	3b14      	subs	r3, #20
 8016278:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801627c:	e0e1      	b.n	8016442 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801627e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	b29b      	uxth	r3, r3
 8016284:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016288:	4293      	cmp	r3, r2
 801628a:	bf28      	it	cs
 801628c:	4613      	movcs	r3, r2
 801628e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016290:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016294:	2114      	movs	r1, #20
 8016296:	200e      	movs	r0, #14
 8016298:	f7f6 f910 	bl	800c4bc <pbuf_alloc>
 801629c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f000 80d5 	beq.w	8016450 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80162a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a8:	895b      	ldrh	r3, [r3, #10]
 80162aa:	2b13      	cmp	r3, #19
 80162ac:	d806      	bhi.n	80162bc <ip4_frag+0xd0>
 80162ae:	4b6c      	ldr	r3, [pc, #432]	; (8016460 <ip4_frag+0x274>)
 80162b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80162b4:	496d      	ldr	r1, [pc, #436]	; (801646c <ip4_frag+0x280>)
 80162b6:	486c      	ldr	r0, [pc, #432]	; (8016468 <ip4_frag+0x27c>)
 80162b8:	f000 fc96 	bl	8016be8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80162bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	2214      	movs	r2, #20
 80162c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162c4:	4618      	mov	r0, r3
 80162c6:	f000 fe50 	bl	8016f6a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80162ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80162d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80162d6:	e064      	b.n	80163a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	895a      	ldrh	r2, [r3, #10]
 80162dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162de:	1ad3      	subs	r3, r2, r3
 80162e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	895b      	ldrh	r3, [r3, #10]
 80162e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d906      	bls.n	80162fa <ip4_frag+0x10e>
 80162ec:	4b5c      	ldr	r3, [pc, #368]	; (8016460 <ip4_frag+0x274>)
 80162ee:	f240 322d 	movw	r2, #813	; 0x32d
 80162f2:	495f      	ldr	r1, [pc, #380]	; (8016470 <ip4_frag+0x284>)
 80162f4:	485c      	ldr	r0, [pc, #368]	; (8016468 <ip4_frag+0x27c>)
 80162f6:	f000 fc77 	bl	8016be8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80162fa:	8bfa      	ldrh	r2, [r7, #30]
 80162fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016300:	4293      	cmp	r3, r2
 8016302:	bf28      	it	cs
 8016304:	4613      	movcs	r3, r2
 8016306:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801630a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801630e:	2b00      	cmp	r3, #0
 8016310:	d105      	bne.n	801631e <ip4_frag+0x132>
        poff = 0;
 8016312:	2300      	movs	r3, #0
 8016314:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	60fb      	str	r3, [r7, #12]
        continue;
 801631c:	e041      	b.n	80163a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801631e:	f7ff ff0d 	bl	801613c <ip_frag_alloc_pbuf_custom_ref>
 8016322:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016324:	69bb      	ldr	r3, [r7, #24]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d103      	bne.n	8016332 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801632a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801632c:	f7f6 fbaa 	bl	800ca84 <pbuf_free>
        goto memerr;
 8016330:	e08f      	b.n	8016452 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016332:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016338:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801633a:	4413      	add	r3, r2
 801633c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016340:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016344:	9201      	str	r2, [sp, #4]
 8016346:	9300      	str	r3, [sp, #0]
 8016348:	4603      	mov	r3, r0
 801634a:	2241      	movs	r2, #65	; 0x41
 801634c:	2000      	movs	r0, #0
 801634e:	f7f6 f9df 	bl	800c710 <pbuf_alloced_custom>
 8016352:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d106      	bne.n	8016368 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801635a:	69b8      	ldr	r0, [r7, #24]
 801635c:	f7ff fef6 	bl	801614c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016362:	f7f6 fb8f 	bl	800ca84 <pbuf_free>
        goto memerr;
 8016366:	e074      	b.n	8016452 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	f7f6 fc31 	bl	800cbd0 <pbuf_ref>
      pcr->original = p;
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016374:	69bb      	ldr	r3, [r7, #24]
 8016376:	4a3f      	ldr	r2, [pc, #252]	; (8016474 <ip4_frag+0x288>)
 8016378:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801637a:	6979      	ldr	r1, [r7, #20]
 801637c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801637e:	f7f6 fc4f 	bl	800cc20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016382:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801638a:	1ad3      	subs	r3, r2, r3
 801638c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016394:	2b00      	cmp	r3, #0
 8016396:	d004      	beq.n	80163a2 <ip4_frag+0x1b6>
        poff = 0;
 8016398:	2300      	movs	r3, #0
 801639a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80163a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d196      	bne.n	80162d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80163aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80163ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80163b0:	4413      	add	r3, r2
 80163b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163b8:	f1a3 0213 	sub.w	r2, r3, #19
 80163bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163c0:	429a      	cmp	r2, r3
 80163c2:	bfcc      	ite	gt
 80163c4:	2301      	movgt	r3, #1
 80163c6:	2300      	movle	r3, #0
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80163cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <ip4_frag+0x1f6>
 80163dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d003      	beq.n	80163ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80163e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80163e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80163ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7f4 ff57 	bl	800b2a0 <lwip_htons>
 80163f2:	4603      	mov	r3, r0
 80163f4:	461a      	mov	r2, r3
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80163fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163fc:	3314      	adds	r3, #20
 80163fe:	b29b      	uxth	r3, r3
 8016400:	4618      	mov	r0, r3
 8016402:	f7f4 ff4d 	bl	800b2a0 <lwip_htons>
 8016406:	4603      	mov	r3, r0
 8016408:	461a      	mov	r2, r3
 801640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801640c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	2200      	movs	r2, #0
 8016412:	729a      	strb	r2, [r3, #10]
 8016414:	2200      	movs	r2, #0
 8016416:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	695b      	ldr	r3, [r3, #20]
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016420:	68b8      	ldr	r0, [r7, #8]
 8016422:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016426:	f7f6 fb2d 	bl	800ca84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801642a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801642e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016436:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801643a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801643c:	4413      	add	r3, r2
 801643e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016446:	2b00      	cmp	r3, #0
 8016448:	f47f af19 	bne.w	801627e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801644c:	2300      	movs	r3, #0
 801644e:	e002      	b.n	8016456 <ip4_frag+0x26a>
      goto memerr;
 8016450:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016456:	4618      	mov	r0, r3
 8016458:	3748      	adds	r7, #72	; 0x48
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	0801b83c 	.word	0x0801b83c
 8016464:	0801ba18 	.word	0x0801ba18
 8016468:	0801b884 	.word	0x0801b884
 801646c:	0801ba34 	.word	0x0801ba34
 8016470:	0801ba54 	.word	0x0801ba54
 8016474:	08016185 	.word	0x08016185

08016478 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016482:	230e      	movs	r3, #14
 8016484:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	895b      	ldrh	r3, [r3, #10]
 801648a:	2b0e      	cmp	r3, #14
 801648c:	d96e      	bls.n	801656c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	7bdb      	ldrb	r3, [r3, #15]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d106      	bne.n	80164a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801649c:	3301      	adds	r3, #1
 801649e:	b2da      	uxtb	r2, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	7b1a      	ldrb	r2, [r3, #12]
 80164ae:	7b5b      	ldrb	r3, [r3, #13]
 80164b0:	021b      	lsls	r3, r3, #8
 80164b2:	4313      	orrs	r3, r2
 80164b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	f003 0301 	and.w	r3, r3, #1
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d023      	beq.n	801650a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	2b01      	cmp	r3, #1
 80164c8:	d10f      	bne.n	80164ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	785b      	ldrb	r3, [r3, #1]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d11b      	bne.n	801650a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164d6:	2b5e      	cmp	r3, #94	; 0x5e
 80164d8:	d117      	bne.n	801650a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	7b5b      	ldrb	r3, [r3, #13]
 80164de:	f043 0310 	orr.w	r3, r3, #16
 80164e2:	b2da      	uxtb	r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	735a      	strb	r2, [r3, #13]
 80164e8:	e00f      	b.n	801650a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	2206      	movs	r2, #6
 80164ee:	4928      	ldr	r1, [pc, #160]	; (8016590 <ethernet_input+0x118>)
 80164f0:	4618      	mov	r0, r3
 80164f2:	f000 fc22 	bl	8016d3a <memcmp>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d106      	bne.n	801650a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	7b5b      	ldrb	r3, [r3, #13]
 8016500:	f043 0308 	orr.w	r3, r3, #8
 8016504:	b2da      	uxtb	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801650a:	89fb      	ldrh	r3, [r7, #14]
 801650c:	2b08      	cmp	r3, #8
 801650e:	d003      	beq.n	8016518 <ethernet_input+0xa0>
 8016510:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016514:	d014      	beq.n	8016540 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016516:	e032      	b.n	801657e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801651e:	f003 0308 	and.w	r3, r3, #8
 8016522:	2b00      	cmp	r3, #0
 8016524:	d024      	beq.n	8016570 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016526:	8afb      	ldrh	r3, [r7, #22]
 8016528:	4619      	mov	r1, r3
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f7f6 fa24 	bl	800c978 <pbuf_remove_header>
 8016530:	4603      	mov	r3, r0
 8016532:	2b00      	cmp	r3, #0
 8016534:	d11e      	bne.n	8016574 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016536:	6839      	ldr	r1, [r7, #0]
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7fe fdf7 	bl	801512c <ip4_input>
      break;
 801653e:	e013      	b.n	8016568 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016546:	f003 0308 	and.w	r3, r3, #8
 801654a:	2b00      	cmp	r3, #0
 801654c:	d014      	beq.n	8016578 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801654e:	8afb      	ldrh	r3, [r7, #22]
 8016550:	4619      	mov	r1, r3
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7f6 fa10 	bl	800c978 <pbuf_remove_header>
 8016558:	4603      	mov	r3, r0
 801655a:	2b00      	cmp	r3, #0
 801655c:	d10e      	bne.n	801657c <ethernet_input+0x104>
        etharp_input(p, netif);
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7fd ff97 	bl	8014494 <etharp_input>
      break;
 8016566:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016568:	2300      	movs	r3, #0
 801656a:	e00c      	b.n	8016586 <ethernet_input+0x10e>
    goto free_and_return;
 801656c:	bf00      	nop
 801656e:	e006      	b.n	801657e <ethernet_input+0x106>
        goto free_and_return;
 8016570:	bf00      	nop
 8016572:	e004      	b.n	801657e <ethernet_input+0x106>
        goto free_and_return;
 8016574:	bf00      	nop
 8016576:	e002      	b.n	801657e <ethernet_input+0x106>
        goto free_and_return;
 8016578:	bf00      	nop
 801657a:	e000      	b.n	801657e <ethernet_input+0x106>
        goto free_and_return;
 801657c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7f6 fa80 	bl	800ca84 <pbuf_free>
  return ERR_OK;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	3718      	adds	r7, #24
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	0801bc78 	.word	0x0801bc78

08016594 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016594:	b580      	push	{r7, lr}
 8016596:	b086      	sub	sp, #24
 8016598:	af00      	add	r7, sp, #0
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
 80165a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80165a2:	8c3b      	ldrh	r3, [r7, #32]
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7f4 fe7b 	bl	800b2a0 <lwip_htons>
 80165aa:	4603      	mov	r3, r0
 80165ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80165ae:	210e      	movs	r1, #14
 80165b0:	68b8      	ldr	r0, [r7, #8]
 80165b2:	f7f6 f9d1 	bl	800c958 <pbuf_add_header>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d125      	bne.n	8016608 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	8afa      	ldrh	r2, [r7, #22]
 80165c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	2206      	movs	r2, #6
 80165cc:	6839      	ldr	r1, [r7, #0]
 80165ce:	4618      	mov	r0, r3
 80165d0:	f000 fccb 	bl	8016f6a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	3306      	adds	r3, #6
 80165d8:	2206      	movs	r2, #6
 80165da:	6879      	ldr	r1, [r7, #4]
 80165dc:	4618      	mov	r0, r3
 80165de:	f000 fcc4 	bl	8016f6a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80165e8:	2b06      	cmp	r3, #6
 80165ea:	d006      	beq.n	80165fa <ethernet_output+0x66>
 80165ec:	4b0a      	ldr	r3, [pc, #40]	; (8016618 <ethernet_output+0x84>)
 80165ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 80165f2:	490a      	ldr	r1, [pc, #40]	; (801661c <ethernet_output+0x88>)
 80165f4:	480a      	ldr	r0, [pc, #40]	; (8016620 <ethernet_output+0x8c>)
 80165f6:	f000 faf7 	bl	8016be8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	699b      	ldr	r3, [r3, #24]
 80165fe:	68b9      	ldr	r1, [r7, #8]
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	4798      	blx	r3
 8016604:	4603      	mov	r3, r0
 8016606:	e002      	b.n	801660e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016608:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801660a:	f06f 0301 	mvn.w	r3, #1
}
 801660e:	4618      	mov	r0, r3
 8016610:	3718      	adds	r7, #24
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	0801ba64 	.word	0x0801ba64
 801661c:	0801ba9c 	.word	0x0801ba9c
 8016620:	0801bad0 	.word	0x0801bad0

08016624 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	60bb      	str	r3, [r7, #8]
 8016632:	2304      	movs	r3, #4
 8016634:	60fb      	str	r3, [r7, #12]
 8016636:	2300      	movs	r3, #0
 8016638:	613b      	str	r3, [r7, #16]
 801663a:	2300      	movs	r3, #0
 801663c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801663e:	f107 0308 	add.w	r3, r7, #8
 8016642:	2100      	movs	r1, #0
 8016644:	4618      	mov	r0, r3
 8016646:	f7ef fb46 	bl	8005cd6 <osMessageCreate>
 801664a:	4602      	mov	r2, r0
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d102      	bne.n	801665e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016658:	f04f 33ff 	mov.w	r3, #4294967295
 801665c:	e000      	b.n	8016660 <sys_mbox_new+0x3c>

  return ERR_OK;
 801665e:	2300      	movs	r3, #0
}
 8016660:	4618      	mov	r0, r3
 8016662:	3718      	adds	r7, #24
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4618      	mov	r0, r3
 8016676:	f7ef fc0b 	bl	8005e90 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	4618      	mov	r0, r3
 8016680:	f7ef fc1c 	bl	8005ebc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016684:	bf00      	nop
 8016686:	3708      	adds	r7, #8
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}

0801668c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	6839      	ldr	r1, [r7, #0]
 801669c:	2200      	movs	r2, #0
 801669e:	4618      	mov	r0, r3
 80166a0:	f7ef fb42 	bl	8005d28 <osMessagePut>
 80166a4:	4603      	mov	r3, r0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d102      	bne.n	80166b0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80166aa:	2300      	movs	r3, #0
 80166ac:	73fb      	strb	r3, [r7, #15]
 80166ae:	e001      	b.n	80166b4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80166b0:	23ff      	movs	r3, #255	; 0xff
 80166b2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80166b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3710      	adds	r7, #16
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b08c      	sub	sp, #48	; 0x30
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	61f8      	str	r0, [r7, #28]
 80166c8:	61b9      	str	r1, [r7, #24]
 80166ca:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80166cc:	f7ef f92e 	bl	800592c <osKernelSysTick>
 80166d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d017      	beq.n	8016708 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	6819      	ldr	r1, [r3, #0]
 80166dc:	f107 0320 	add.w	r3, r7, #32
 80166e0:	697a      	ldr	r2, [r7, #20]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7ef fb60 	bl	8005da8 <osMessageGet>

    if(event.status == osEventMessage)
 80166e8:	6a3b      	ldr	r3, [r7, #32]
 80166ea:	2b10      	cmp	r3, #16
 80166ec:	d109      	bne.n	8016702 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80166ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f0:	461a      	mov	r2, r3
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80166f6:	f7ef f919 	bl	800592c <osKernelSysTick>
 80166fa:	4602      	mov	r2, r0
 80166fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166fe:	1ad3      	subs	r3, r2, r3
 8016700:	e019      	b.n	8016736 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016702:	f04f 33ff 	mov.w	r3, #4294967295
 8016706:	e016      	b.n	8016736 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	6819      	ldr	r1, [r3, #0]
 801670c:	463b      	mov	r3, r7
 801670e:	f04f 32ff 	mov.w	r2, #4294967295
 8016712:	4618      	mov	r0, r3
 8016714:	f7ef fb48 	bl	8005da8 <osMessageGet>
 8016718:	f107 0320 	add.w	r3, r7, #32
 801671c:	463a      	mov	r2, r7
 801671e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016720:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016726:	461a      	mov	r2, r3
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801672c:	f7ef f8fe 	bl	800592c <osKernelSysTick>
 8016730:	4602      	mov	r2, r0
 8016732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016734:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016736:	4618      	mov	r0, r3
 8016738:	3730      	adds	r7, #48	; 0x30
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801673e:	b580      	push	{r7, lr}
 8016740:	b086      	sub	sp, #24
 8016742:	af00      	add	r7, sp, #0
 8016744:	6078      	str	r0, [r7, #4]
 8016746:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	6819      	ldr	r1, [r3, #0]
 801674c:	f107 030c 	add.w	r3, r7, #12
 8016750:	2200      	movs	r2, #0
 8016752:	4618      	mov	r0, r3
 8016754:	f7ef fb28 	bl	8005da8 <osMessageGet>

  if(event.status == osEventMessage)
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	2b10      	cmp	r3, #16
 801675c:	d105      	bne.n	801676a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	461a      	mov	r2, r3
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016766:	2300      	movs	r3, #0
 8016768:	e001      	b.n	801676e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801676a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801676e:	4618      	mov	r0, r3
 8016770:	3718      	adds	r7, #24
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016776:	b480      	push	{r7}
 8016778:	b083      	sub	sp, #12
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d101      	bne.n	801678a <sys_mbox_valid+0x14>
    return 0;
 8016786:	2300      	movs	r3, #0
 8016788:	e000      	b.n	801678c <sys_mbox_valid+0x16>
  else
    return 1;
 801678a:	2301      	movs	r3, #1
}
 801678c:	4618      	mov	r0, r3
 801678e:	370c      	adds	r7, #12
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr

08016798 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016798:	b480      	push	{r7}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	601a      	str	r2, [r3, #0]
}
 80167a6:	bf00      	nop
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr

080167b2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80167b2:	b580      	push	{r7, lr}
 80167b4:	b084      	sub	sp, #16
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
 80167ba:	460b      	mov	r3, r1
 80167bc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80167be:	2300      	movs	r3, #0
 80167c0:	60bb      	str	r3, [r7, #8]
 80167c2:	2300      	movs	r3, #0
 80167c4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80167c6:	f107 0308 	add.w	r3, r7, #8
 80167ca:	2101      	movs	r1, #1
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7ef f9b9 	bl	8005b44 <osSemaphoreCreate>
 80167d2:	4602      	mov	r2, r0
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d102      	bne.n	80167e6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80167e0:	f04f 33ff 	mov.w	r3, #4294967295
 80167e4:	e009      	b.n	80167fa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80167e6:	78fb      	ldrb	r3, [r7, #3]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d105      	bne.n	80167f8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2100      	movs	r1, #0
 80167f2:	4618      	mov	r0, r3
 80167f4:	f7ef f9d8 	bl	8005ba8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80167f8:	2300      	movs	r3, #0
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
 801680a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801680c:	f7ef f88e 	bl	800592c <osKernelSysTick>
 8016810:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d011      	beq.n	801683c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	6839      	ldr	r1, [r7, #0]
 801681e:	4618      	mov	r0, r3
 8016820:	f7ef f9c2 	bl	8005ba8 <osSemaphoreWait>
 8016824:	4603      	mov	r3, r0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d105      	bne.n	8016836 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801682a:	f7ef f87f 	bl	800592c <osKernelSysTick>
 801682e:	4602      	mov	r2, r0
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	e012      	b.n	801685c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016836:	f04f 33ff 	mov.w	r3, #4294967295
 801683a:	e00f      	b.n	801685c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801683c:	bf00      	nop
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	f04f 31ff 	mov.w	r1, #4294967295
 8016846:	4618      	mov	r0, r3
 8016848:	f7ef f9ae 	bl	8005ba8 <osSemaphoreWait>
 801684c:	4603      	mov	r3, r0
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1f5      	bne.n	801683e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016852:	f7ef f86b 	bl	800592c <osKernelSysTick>
 8016856:	4602      	mov	r2, r0
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801685c:	4618      	mov	r0, r3
 801685e:	3710      	adds	r7, #16
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}

08016864 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b082      	sub	sp, #8
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4618      	mov	r0, r3
 8016872:	f7ef f9e7 	bl	8005c44 <osSemaphoreRelease>
}
 8016876:	bf00      	nop
 8016878:	3708      	adds	r7, #8
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b082      	sub	sp, #8
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	4618      	mov	r0, r3
 801688c:	f7ef fa10 	bl	8005cb0 <osSemaphoreDelete>
}
 8016890:	bf00      	nop
 8016892:	3708      	adds	r7, #8
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}

08016898 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d101      	bne.n	80168ac <sys_sem_valid+0x14>
    return 0;
 80168a8:	2300      	movs	r3, #0
 80168aa:	e000      	b.n	80168ae <sys_sem_valid+0x16>
  else
    return 1;
 80168ac:	2301      	movs	r3, #1
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	370c      	adds	r7, #12
 80168b2:	46bd      	mov	sp, r7
 80168b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b8:	4770      	bx	lr

080168ba <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80168ba:	b480      	push	{r7}
 80168bc:	b083      	sub	sp, #12
 80168be:	af00      	add	r7, sp, #0
 80168c0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2200      	movs	r2, #0
 80168c6:	601a      	str	r2, [r3, #0]
}
 80168c8:	bf00      	nop
 80168ca:	370c      	adds	r7, #12
 80168cc:	46bd      	mov	sp, r7
 80168ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d2:	4770      	bx	lr

080168d4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80168d8:	4803      	ldr	r0, [pc, #12]	; (80168e8 <sys_init+0x14>)
 80168da:	f7ef f897 	bl	8005a0c <osMutexCreate>
 80168de:	4603      	mov	r3, r0
 80168e0:	4a02      	ldr	r2, [pc, #8]	; (80168ec <sys_init+0x18>)
 80168e2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80168e4:	bf00      	nop
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	0801bc88 	.word	0x0801bc88
 80168ec:	2000d268 	.word	0x2000d268

080168f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80168f8:	2300      	movs	r3, #0
 80168fa:	60bb      	str	r3, [r7, #8]
 80168fc:	2300      	movs	r3, #0
 80168fe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016900:	f107 0308 	add.w	r3, r7, #8
 8016904:	4618      	mov	r0, r3
 8016906:	f7ef f881 	bl	8005a0c <osMutexCreate>
 801690a:	4602      	mov	r2, r0
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d102      	bne.n	801691e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016918:	f04f 33ff 	mov.w	r3, #4294967295
 801691c:	e000      	b.n	8016920 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801691e:	2300      	movs	r3, #0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3710      	adds	r7, #16
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	f04f 31ff 	mov.w	r1, #4294967295
 8016938:	4618      	mov	r0, r3
 801693a:	f7ef f87f 	bl	8005a3c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b082      	sub	sp, #8
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4618      	mov	r0, r3
 8016954:	f7ef f8c0 	bl	8005ad8 <osMutexRelease>
}
 8016958:	bf00      	nop
 801695a:	3708      	adds	r7, #8
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b08c      	sub	sp, #48	; 0x30
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
 801696c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801696e:	f107 0314 	add.w	r3, r7, #20
 8016972:	2200      	movs	r2, #0
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	605a      	str	r2, [r3, #4]
 8016978:	609a      	str	r2, [r3, #8]
 801697a:	60da      	str	r2, [r3, #12]
 801697c:	611a      	str	r2, [r3, #16]
 801697e:	615a      	str	r2, [r3, #20]
 8016980:	619a      	str	r2, [r3, #24]
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	617b      	str	r3, [r7, #20]
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	61bb      	str	r3, [r7, #24]
 801698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698c:	b21b      	sxth	r3, r3
 801698e:	83bb      	strh	r3, [r7, #28]
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016994:	f107 0314 	add.w	r3, r7, #20
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	4618      	mov	r0, r3
 801699c:	f7ee ffd6 	bl	800594c <osThreadCreate>
 80169a0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3730      	adds	r7, #48	; 0x30
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
	...

080169ac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80169b0:	4b04      	ldr	r3, [pc, #16]	; (80169c4 <sys_arch_protect+0x18>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	f04f 31ff 	mov.w	r1, #4294967295
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7ef f83f 	bl	8005a3c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80169be:	2301      	movs	r3, #1
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	2000d268 	.word	0x2000d268

080169c8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80169d0:	4b04      	ldr	r3, [pc, #16]	; (80169e4 <sys_arch_unprotect+0x1c>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7ef f87f 	bl	8005ad8 <osMutexRelease>
}
 80169da:	bf00      	nop
 80169dc:	3708      	adds	r7, #8
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	2000d268 	.word	0x2000d268

080169e8 <rand>:
 80169e8:	4b16      	ldr	r3, [pc, #88]	; (8016a44 <rand+0x5c>)
 80169ea:	b510      	push	{r4, lr}
 80169ec:	681c      	ldr	r4, [r3, #0]
 80169ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80169f0:	b9b3      	cbnz	r3, 8016a20 <rand+0x38>
 80169f2:	2018      	movs	r0, #24
 80169f4:	f000 fb32 	bl	801705c <malloc>
 80169f8:	4602      	mov	r2, r0
 80169fa:	6320      	str	r0, [r4, #48]	; 0x30
 80169fc:	b920      	cbnz	r0, 8016a08 <rand+0x20>
 80169fe:	4b12      	ldr	r3, [pc, #72]	; (8016a48 <rand+0x60>)
 8016a00:	4812      	ldr	r0, [pc, #72]	; (8016a4c <rand+0x64>)
 8016a02:	2152      	movs	r1, #82	; 0x52
 8016a04:	f000 fac0 	bl	8016f88 <__assert_func>
 8016a08:	4911      	ldr	r1, [pc, #68]	; (8016a50 <rand+0x68>)
 8016a0a:	4b12      	ldr	r3, [pc, #72]	; (8016a54 <rand+0x6c>)
 8016a0c:	e9c0 1300 	strd	r1, r3, [r0]
 8016a10:	4b11      	ldr	r3, [pc, #68]	; (8016a58 <rand+0x70>)
 8016a12:	6083      	str	r3, [r0, #8]
 8016a14:	230b      	movs	r3, #11
 8016a16:	8183      	strh	r3, [r0, #12]
 8016a18:	2100      	movs	r1, #0
 8016a1a:	2001      	movs	r0, #1
 8016a1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016a20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016a22:	480e      	ldr	r0, [pc, #56]	; (8016a5c <rand+0x74>)
 8016a24:	690b      	ldr	r3, [r1, #16]
 8016a26:	694c      	ldr	r4, [r1, #20]
 8016a28:	4a0d      	ldr	r2, [pc, #52]	; (8016a60 <rand+0x78>)
 8016a2a:	4358      	muls	r0, r3
 8016a2c:	fb02 0004 	mla	r0, r2, r4, r0
 8016a30:	fba3 3202 	umull	r3, r2, r3, r2
 8016a34:	3301      	adds	r3, #1
 8016a36:	eb40 0002 	adc.w	r0, r0, r2
 8016a3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016a3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016a42:	bd10      	pop	{r4, pc}
 8016a44:	20000088 	.word	0x20000088
 8016a48:	0801bc90 	.word	0x0801bc90
 8016a4c:	0801bca7 	.word	0x0801bca7
 8016a50:	abcd330e 	.word	0xabcd330e
 8016a54:	e66d1234 	.word	0xe66d1234
 8016a58:	0005deec 	.word	0x0005deec
 8016a5c:	5851f42d 	.word	0x5851f42d
 8016a60:	4c957f2d 	.word	0x4c957f2d

08016a64 <std>:
 8016a64:	2300      	movs	r3, #0
 8016a66:	b510      	push	{r4, lr}
 8016a68:	4604      	mov	r4, r0
 8016a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a72:	6083      	str	r3, [r0, #8]
 8016a74:	8181      	strh	r1, [r0, #12]
 8016a76:	6643      	str	r3, [r0, #100]	; 0x64
 8016a78:	81c2      	strh	r2, [r0, #14]
 8016a7a:	6183      	str	r3, [r0, #24]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	2208      	movs	r2, #8
 8016a80:	305c      	adds	r0, #92	; 0x5c
 8016a82:	f000 f984 	bl	8016d8e <memset>
 8016a86:	4b0d      	ldr	r3, [pc, #52]	; (8016abc <std+0x58>)
 8016a88:	6263      	str	r3, [r4, #36]	; 0x24
 8016a8a:	4b0d      	ldr	r3, [pc, #52]	; (8016ac0 <std+0x5c>)
 8016a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a8e:	4b0d      	ldr	r3, [pc, #52]	; (8016ac4 <std+0x60>)
 8016a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a92:	4b0d      	ldr	r3, [pc, #52]	; (8016ac8 <std+0x64>)
 8016a94:	6323      	str	r3, [r4, #48]	; 0x30
 8016a96:	4b0d      	ldr	r3, [pc, #52]	; (8016acc <std+0x68>)
 8016a98:	6224      	str	r4, [r4, #32]
 8016a9a:	429c      	cmp	r4, r3
 8016a9c:	d006      	beq.n	8016aac <std+0x48>
 8016a9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016aa2:	4294      	cmp	r4, r2
 8016aa4:	d002      	beq.n	8016aac <std+0x48>
 8016aa6:	33d0      	adds	r3, #208	; 0xd0
 8016aa8:	429c      	cmp	r4, r3
 8016aaa:	d105      	bne.n	8016ab8 <std+0x54>
 8016aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ab4:	f000 ba56 	b.w	8016f64 <__retarget_lock_init_recursive>
 8016ab8:	bd10      	pop	{r4, pc}
 8016aba:	bf00      	nop
 8016abc:	08016cb5 	.word	0x08016cb5
 8016ac0:	08016cd7 	.word	0x08016cd7
 8016ac4:	08016d0f 	.word	0x08016d0f
 8016ac8:	08016d33 	.word	0x08016d33
 8016acc:	2000d26c 	.word	0x2000d26c

08016ad0 <stdio_exit_handler>:
 8016ad0:	4a02      	ldr	r2, [pc, #8]	; (8016adc <stdio_exit_handler+0xc>)
 8016ad2:	4903      	ldr	r1, [pc, #12]	; (8016ae0 <stdio_exit_handler+0x10>)
 8016ad4:	4803      	ldr	r0, [pc, #12]	; (8016ae4 <stdio_exit_handler+0x14>)
 8016ad6:	f000 b869 	b.w	8016bac <_fwalk_sglue>
 8016ada:	bf00      	nop
 8016adc:	20000030 	.word	0x20000030
 8016ae0:	08017b29 	.word	0x08017b29
 8016ae4:	2000003c 	.word	0x2000003c

08016ae8 <cleanup_stdio>:
 8016ae8:	6841      	ldr	r1, [r0, #4]
 8016aea:	4b0c      	ldr	r3, [pc, #48]	; (8016b1c <cleanup_stdio+0x34>)
 8016aec:	4299      	cmp	r1, r3
 8016aee:	b510      	push	{r4, lr}
 8016af0:	4604      	mov	r4, r0
 8016af2:	d001      	beq.n	8016af8 <cleanup_stdio+0x10>
 8016af4:	f001 f818 	bl	8017b28 <_fflush_r>
 8016af8:	68a1      	ldr	r1, [r4, #8]
 8016afa:	4b09      	ldr	r3, [pc, #36]	; (8016b20 <cleanup_stdio+0x38>)
 8016afc:	4299      	cmp	r1, r3
 8016afe:	d002      	beq.n	8016b06 <cleanup_stdio+0x1e>
 8016b00:	4620      	mov	r0, r4
 8016b02:	f001 f811 	bl	8017b28 <_fflush_r>
 8016b06:	68e1      	ldr	r1, [r4, #12]
 8016b08:	4b06      	ldr	r3, [pc, #24]	; (8016b24 <cleanup_stdio+0x3c>)
 8016b0a:	4299      	cmp	r1, r3
 8016b0c:	d004      	beq.n	8016b18 <cleanup_stdio+0x30>
 8016b0e:	4620      	mov	r0, r4
 8016b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b14:	f001 b808 	b.w	8017b28 <_fflush_r>
 8016b18:	bd10      	pop	{r4, pc}
 8016b1a:	bf00      	nop
 8016b1c:	2000d26c 	.word	0x2000d26c
 8016b20:	2000d2d4 	.word	0x2000d2d4
 8016b24:	2000d33c 	.word	0x2000d33c

08016b28 <global_stdio_init.part.0>:
 8016b28:	b510      	push	{r4, lr}
 8016b2a:	4b0b      	ldr	r3, [pc, #44]	; (8016b58 <global_stdio_init.part.0+0x30>)
 8016b2c:	4c0b      	ldr	r4, [pc, #44]	; (8016b5c <global_stdio_init.part.0+0x34>)
 8016b2e:	4a0c      	ldr	r2, [pc, #48]	; (8016b60 <global_stdio_init.part.0+0x38>)
 8016b30:	601a      	str	r2, [r3, #0]
 8016b32:	4620      	mov	r0, r4
 8016b34:	2200      	movs	r2, #0
 8016b36:	2104      	movs	r1, #4
 8016b38:	f7ff ff94 	bl	8016a64 <std>
 8016b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016b40:	2201      	movs	r2, #1
 8016b42:	2109      	movs	r1, #9
 8016b44:	f7ff ff8e 	bl	8016a64 <std>
 8016b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016b4c:	2202      	movs	r2, #2
 8016b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b52:	2112      	movs	r1, #18
 8016b54:	f7ff bf86 	b.w	8016a64 <std>
 8016b58:	2000d3a4 	.word	0x2000d3a4
 8016b5c:	2000d26c 	.word	0x2000d26c
 8016b60:	08016ad1 	.word	0x08016ad1

08016b64 <__sfp_lock_acquire>:
 8016b64:	4801      	ldr	r0, [pc, #4]	; (8016b6c <__sfp_lock_acquire+0x8>)
 8016b66:	f000 b9fe 	b.w	8016f66 <__retarget_lock_acquire_recursive>
 8016b6a:	bf00      	nop
 8016b6c:	2000d3ad 	.word	0x2000d3ad

08016b70 <__sfp_lock_release>:
 8016b70:	4801      	ldr	r0, [pc, #4]	; (8016b78 <__sfp_lock_release+0x8>)
 8016b72:	f000 b9f9 	b.w	8016f68 <__retarget_lock_release_recursive>
 8016b76:	bf00      	nop
 8016b78:	2000d3ad 	.word	0x2000d3ad

08016b7c <__sinit>:
 8016b7c:	b510      	push	{r4, lr}
 8016b7e:	4604      	mov	r4, r0
 8016b80:	f7ff fff0 	bl	8016b64 <__sfp_lock_acquire>
 8016b84:	6a23      	ldr	r3, [r4, #32]
 8016b86:	b11b      	cbz	r3, 8016b90 <__sinit+0x14>
 8016b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b8c:	f7ff bff0 	b.w	8016b70 <__sfp_lock_release>
 8016b90:	4b04      	ldr	r3, [pc, #16]	; (8016ba4 <__sinit+0x28>)
 8016b92:	6223      	str	r3, [r4, #32]
 8016b94:	4b04      	ldr	r3, [pc, #16]	; (8016ba8 <__sinit+0x2c>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1f5      	bne.n	8016b88 <__sinit+0xc>
 8016b9c:	f7ff ffc4 	bl	8016b28 <global_stdio_init.part.0>
 8016ba0:	e7f2      	b.n	8016b88 <__sinit+0xc>
 8016ba2:	bf00      	nop
 8016ba4:	08016ae9 	.word	0x08016ae9
 8016ba8:	2000d3a4 	.word	0x2000d3a4

08016bac <_fwalk_sglue>:
 8016bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bb0:	4607      	mov	r7, r0
 8016bb2:	4688      	mov	r8, r1
 8016bb4:	4614      	mov	r4, r2
 8016bb6:	2600      	movs	r6, #0
 8016bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8016bc0:	d505      	bpl.n	8016bce <_fwalk_sglue+0x22>
 8016bc2:	6824      	ldr	r4, [r4, #0]
 8016bc4:	2c00      	cmp	r4, #0
 8016bc6:	d1f7      	bne.n	8016bb8 <_fwalk_sglue+0xc>
 8016bc8:	4630      	mov	r0, r6
 8016bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bce:	89ab      	ldrh	r3, [r5, #12]
 8016bd0:	2b01      	cmp	r3, #1
 8016bd2:	d907      	bls.n	8016be4 <_fwalk_sglue+0x38>
 8016bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	d003      	beq.n	8016be4 <_fwalk_sglue+0x38>
 8016bdc:	4629      	mov	r1, r5
 8016bde:	4638      	mov	r0, r7
 8016be0:	47c0      	blx	r8
 8016be2:	4306      	orrs	r6, r0
 8016be4:	3568      	adds	r5, #104	; 0x68
 8016be6:	e7e9      	b.n	8016bbc <_fwalk_sglue+0x10>

08016be8 <iprintf>:
 8016be8:	b40f      	push	{r0, r1, r2, r3}
 8016bea:	b507      	push	{r0, r1, r2, lr}
 8016bec:	4906      	ldr	r1, [pc, #24]	; (8016c08 <iprintf+0x20>)
 8016bee:	ab04      	add	r3, sp, #16
 8016bf0:	6808      	ldr	r0, [r1, #0]
 8016bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bf6:	6881      	ldr	r1, [r0, #8]
 8016bf8:	9301      	str	r3, [sp, #4]
 8016bfa:	f000 fc65 	bl	80174c8 <_vfiprintf_r>
 8016bfe:	b003      	add	sp, #12
 8016c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c04:	b004      	add	sp, #16
 8016c06:	4770      	bx	lr
 8016c08:	20000088 	.word	0x20000088

08016c0c <sniprintf>:
 8016c0c:	b40c      	push	{r2, r3}
 8016c0e:	b530      	push	{r4, r5, lr}
 8016c10:	4b17      	ldr	r3, [pc, #92]	; (8016c70 <sniprintf+0x64>)
 8016c12:	1e0c      	subs	r4, r1, #0
 8016c14:	681d      	ldr	r5, [r3, #0]
 8016c16:	b09d      	sub	sp, #116	; 0x74
 8016c18:	da08      	bge.n	8016c2c <sniprintf+0x20>
 8016c1a:	238b      	movs	r3, #139	; 0x8b
 8016c1c:	602b      	str	r3, [r5, #0]
 8016c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c22:	b01d      	add	sp, #116	; 0x74
 8016c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c28:	b002      	add	sp, #8
 8016c2a:	4770      	bx	lr
 8016c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c34:	bf14      	ite	ne
 8016c36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c3a:	4623      	moveq	r3, r4
 8016c3c:	9304      	str	r3, [sp, #16]
 8016c3e:	9307      	str	r3, [sp, #28]
 8016c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c44:	9002      	str	r0, [sp, #8]
 8016c46:	9006      	str	r0, [sp, #24]
 8016c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c4e:	ab21      	add	r3, sp, #132	; 0x84
 8016c50:	a902      	add	r1, sp, #8
 8016c52:	4628      	mov	r0, r5
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	f000 fb0f 	bl	8017278 <_svfiprintf_r>
 8016c5a:	1c43      	adds	r3, r0, #1
 8016c5c:	bfbc      	itt	lt
 8016c5e:	238b      	movlt	r3, #139	; 0x8b
 8016c60:	602b      	strlt	r3, [r5, #0]
 8016c62:	2c00      	cmp	r4, #0
 8016c64:	d0dd      	beq.n	8016c22 <sniprintf+0x16>
 8016c66:	9b02      	ldr	r3, [sp, #8]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	701a      	strb	r2, [r3, #0]
 8016c6c:	e7d9      	b.n	8016c22 <sniprintf+0x16>
 8016c6e:	bf00      	nop
 8016c70:	20000088 	.word	0x20000088

08016c74 <siprintf>:
 8016c74:	b40e      	push	{r1, r2, r3}
 8016c76:	b500      	push	{lr}
 8016c78:	b09c      	sub	sp, #112	; 0x70
 8016c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8016c7c:	9002      	str	r0, [sp, #8]
 8016c7e:	9006      	str	r0, [sp, #24]
 8016c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c84:	4809      	ldr	r0, [pc, #36]	; (8016cac <siprintf+0x38>)
 8016c86:	9107      	str	r1, [sp, #28]
 8016c88:	9104      	str	r1, [sp, #16]
 8016c8a:	4909      	ldr	r1, [pc, #36]	; (8016cb0 <siprintf+0x3c>)
 8016c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c90:	9105      	str	r1, [sp, #20]
 8016c92:	6800      	ldr	r0, [r0, #0]
 8016c94:	9301      	str	r3, [sp, #4]
 8016c96:	a902      	add	r1, sp, #8
 8016c98:	f000 faee 	bl	8017278 <_svfiprintf_r>
 8016c9c:	9b02      	ldr	r3, [sp, #8]
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	701a      	strb	r2, [r3, #0]
 8016ca2:	b01c      	add	sp, #112	; 0x70
 8016ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ca8:	b003      	add	sp, #12
 8016caa:	4770      	bx	lr
 8016cac:	20000088 	.word	0x20000088
 8016cb0:	ffff0208 	.word	0xffff0208

08016cb4 <__sread>:
 8016cb4:	b510      	push	{r4, lr}
 8016cb6:	460c      	mov	r4, r1
 8016cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cbc:	f000 f90a 	bl	8016ed4 <_read_r>
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	bfab      	itete	ge
 8016cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8016cc8:	181b      	addge	r3, r3, r0
 8016cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016cce:	bfac      	ite	ge
 8016cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016cd2:	81a3      	strhlt	r3, [r4, #12]
 8016cd4:	bd10      	pop	{r4, pc}

08016cd6 <__swrite>:
 8016cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cda:	461f      	mov	r7, r3
 8016cdc:	898b      	ldrh	r3, [r1, #12]
 8016cde:	05db      	lsls	r3, r3, #23
 8016ce0:	4605      	mov	r5, r0
 8016ce2:	460c      	mov	r4, r1
 8016ce4:	4616      	mov	r6, r2
 8016ce6:	d505      	bpl.n	8016cf4 <__swrite+0x1e>
 8016ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cec:	2302      	movs	r3, #2
 8016cee:	2200      	movs	r2, #0
 8016cf0:	f000 f8de 	bl	8016eb0 <_lseek_r>
 8016cf4:	89a3      	ldrh	r3, [r4, #12]
 8016cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016cfe:	81a3      	strh	r3, [r4, #12]
 8016d00:	4632      	mov	r2, r6
 8016d02:	463b      	mov	r3, r7
 8016d04:	4628      	mov	r0, r5
 8016d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d0a:	f000 b8f5 	b.w	8016ef8 <_write_r>

08016d0e <__sseek>:
 8016d0e:	b510      	push	{r4, lr}
 8016d10:	460c      	mov	r4, r1
 8016d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d16:	f000 f8cb 	bl	8016eb0 <_lseek_r>
 8016d1a:	1c43      	adds	r3, r0, #1
 8016d1c:	89a3      	ldrh	r3, [r4, #12]
 8016d1e:	bf15      	itete	ne
 8016d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d2a:	81a3      	strheq	r3, [r4, #12]
 8016d2c:	bf18      	it	ne
 8016d2e:	81a3      	strhne	r3, [r4, #12]
 8016d30:	bd10      	pop	{r4, pc}

08016d32 <__sclose>:
 8016d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d36:	f000 b855 	b.w	8016de4 <_close_r>

08016d3a <memcmp>:
 8016d3a:	b510      	push	{r4, lr}
 8016d3c:	3901      	subs	r1, #1
 8016d3e:	4402      	add	r2, r0
 8016d40:	4290      	cmp	r0, r2
 8016d42:	d101      	bne.n	8016d48 <memcmp+0xe>
 8016d44:	2000      	movs	r0, #0
 8016d46:	e005      	b.n	8016d54 <memcmp+0x1a>
 8016d48:	7803      	ldrb	r3, [r0, #0]
 8016d4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016d4e:	42a3      	cmp	r3, r4
 8016d50:	d001      	beq.n	8016d56 <memcmp+0x1c>
 8016d52:	1b18      	subs	r0, r3, r4
 8016d54:	bd10      	pop	{r4, pc}
 8016d56:	3001      	adds	r0, #1
 8016d58:	e7f2      	b.n	8016d40 <memcmp+0x6>

08016d5a <memmove>:
 8016d5a:	4288      	cmp	r0, r1
 8016d5c:	b510      	push	{r4, lr}
 8016d5e:	eb01 0402 	add.w	r4, r1, r2
 8016d62:	d902      	bls.n	8016d6a <memmove+0x10>
 8016d64:	4284      	cmp	r4, r0
 8016d66:	4623      	mov	r3, r4
 8016d68:	d807      	bhi.n	8016d7a <memmove+0x20>
 8016d6a:	1e43      	subs	r3, r0, #1
 8016d6c:	42a1      	cmp	r1, r4
 8016d6e:	d008      	beq.n	8016d82 <memmove+0x28>
 8016d70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d78:	e7f8      	b.n	8016d6c <memmove+0x12>
 8016d7a:	4402      	add	r2, r0
 8016d7c:	4601      	mov	r1, r0
 8016d7e:	428a      	cmp	r2, r1
 8016d80:	d100      	bne.n	8016d84 <memmove+0x2a>
 8016d82:	bd10      	pop	{r4, pc}
 8016d84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d8c:	e7f7      	b.n	8016d7e <memmove+0x24>

08016d8e <memset>:
 8016d8e:	4402      	add	r2, r0
 8016d90:	4603      	mov	r3, r0
 8016d92:	4293      	cmp	r3, r2
 8016d94:	d100      	bne.n	8016d98 <memset+0xa>
 8016d96:	4770      	bx	lr
 8016d98:	f803 1b01 	strb.w	r1, [r3], #1
 8016d9c:	e7f9      	b.n	8016d92 <memset+0x4>

08016d9e <strcat>:
 8016d9e:	b510      	push	{r4, lr}
 8016da0:	4602      	mov	r2, r0
 8016da2:	7814      	ldrb	r4, [r2, #0]
 8016da4:	4613      	mov	r3, r2
 8016da6:	3201      	adds	r2, #1
 8016da8:	2c00      	cmp	r4, #0
 8016daa:	d1fa      	bne.n	8016da2 <strcat+0x4>
 8016dac:	3b01      	subs	r3, #1
 8016dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016db6:	2a00      	cmp	r2, #0
 8016db8:	d1f9      	bne.n	8016dae <strcat+0x10>
 8016dba:	bd10      	pop	{r4, pc}

08016dbc <strncpy>:
 8016dbc:	b510      	push	{r4, lr}
 8016dbe:	3901      	subs	r1, #1
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	b132      	cbz	r2, 8016dd2 <strncpy+0x16>
 8016dc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016dc8:	f803 4b01 	strb.w	r4, [r3], #1
 8016dcc:	3a01      	subs	r2, #1
 8016dce:	2c00      	cmp	r4, #0
 8016dd0:	d1f7      	bne.n	8016dc2 <strncpy+0x6>
 8016dd2:	441a      	add	r2, r3
 8016dd4:	2100      	movs	r1, #0
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d100      	bne.n	8016ddc <strncpy+0x20>
 8016dda:	bd10      	pop	{r4, pc}
 8016ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8016de0:	e7f9      	b.n	8016dd6 <strncpy+0x1a>
	...

08016de4 <_close_r>:
 8016de4:	b538      	push	{r3, r4, r5, lr}
 8016de6:	4d06      	ldr	r5, [pc, #24]	; (8016e00 <_close_r+0x1c>)
 8016de8:	2300      	movs	r3, #0
 8016dea:	4604      	mov	r4, r0
 8016dec:	4608      	mov	r0, r1
 8016dee:	602b      	str	r3, [r5, #0]
 8016df0:	f7ea f825 	bl	8000e3e <_close>
 8016df4:	1c43      	adds	r3, r0, #1
 8016df6:	d102      	bne.n	8016dfe <_close_r+0x1a>
 8016df8:	682b      	ldr	r3, [r5, #0]
 8016dfa:	b103      	cbz	r3, 8016dfe <_close_r+0x1a>
 8016dfc:	6023      	str	r3, [r4, #0]
 8016dfe:	bd38      	pop	{r3, r4, r5, pc}
 8016e00:	2000d3a8 	.word	0x2000d3a8

08016e04 <_reclaim_reent>:
 8016e04:	4b29      	ldr	r3, [pc, #164]	; (8016eac <_reclaim_reent+0xa8>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	4283      	cmp	r3, r0
 8016e0a:	b570      	push	{r4, r5, r6, lr}
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	d04b      	beq.n	8016ea8 <_reclaim_reent+0xa4>
 8016e10:	69c3      	ldr	r3, [r0, #28]
 8016e12:	b143      	cbz	r3, 8016e26 <_reclaim_reent+0x22>
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d144      	bne.n	8016ea4 <_reclaim_reent+0xa0>
 8016e1a:	69e3      	ldr	r3, [r4, #28]
 8016e1c:	6819      	ldr	r1, [r3, #0]
 8016e1e:	b111      	cbz	r1, 8016e26 <_reclaim_reent+0x22>
 8016e20:	4620      	mov	r0, r4
 8016e22:	f000 f8cf 	bl	8016fc4 <_free_r>
 8016e26:	6961      	ldr	r1, [r4, #20]
 8016e28:	b111      	cbz	r1, 8016e30 <_reclaim_reent+0x2c>
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f000 f8ca 	bl	8016fc4 <_free_r>
 8016e30:	69e1      	ldr	r1, [r4, #28]
 8016e32:	b111      	cbz	r1, 8016e3a <_reclaim_reent+0x36>
 8016e34:	4620      	mov	r0, r4
 8016e36:	f000 f8c5 	bl	8016fc4 <_free_r>
 8016e3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016e3c:	b111      	cbz	r1, 8016e44 <_reclaim_reent+0x40>
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f000 f8c0 	bl	8016fc4 <_free_r>
 8016e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e46:	b111      	cbz	r1, 8016e4e <_reclaim_reent+0x4a>
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f000 f8bb 	bl	8016fc4 <_free_r>
 8016e4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016e50:	b111      	cbz	r1, 8016e58 <_reclaim_reent+0x54>
 8016e52:	4620      	mov	r0, r4
 8016e54:	f000 f8b6 	bl	8016fc4 <_free_r>
 8016e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016e5a:	b111      	cbz	r1, 8016e62 <_reclaim_reent+0x5e>
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f000 f8b1 	bl	8016fc4 <_free_r>
 8016e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016e64:	b111      	cbz	r1, 8016e6c <_reclaim_reent+0x68>
 8016e66:	4620      	mov	r0, r4
 8016e68:	f000 f8ac 	bl	8016fc4 <_free_r>
 8016e6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016e6e:	b111      	cbz	r1, 8016e76 <_reclaim_reent+0x72>
 8016e70:	4620      	mov	r0, r4
 8016e72:	f000 f8a7 	bl	8016fc4 <_free_r>
 8016e76:	6a23      	ldr	r3, [r4, #32]
 8016e78:	b1b3      	cbz	r3, 8016ea8 <_reclaim_reent+0xa4>
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e80:	4718      	bx	r3
 8016e82:	5949      	ldr	r1, [r1, r5]
 8016e84:	b941      	cbnz	r1, 8016e98 <_reclaim_reent+0x94>
 8016e86:	3504      	adds	r5, #4
 8016e88:	69e3      	ldr	r3, [r4, #28]
 8016e8a:	2d80      	cmp	r5, #128	; 0x80
 8016e8c:	68d9      	ldr	r1, [r3, #12]
 8016e8e:	d1f8      	bne.n	8016e82 <_reclaim_reent+0x7e>
 8016e90:	4620      	mov	r0, r4
 8016e92:	f000 f897 	bl	8016fc4 <_free_r>
 8016e96:	e7c0      	b.n	8016e1a <_reclaim_reent+0x16>
 8016e98:	680e      	ldr	r6, [r1, #0]
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f000 f892 	bl	8016fc4 <_free_r>
 8016ea0:	4631      	mov	r1, r6
 8016ea2:	e7ef      	b.n	8016e84 <_reclaim_reent+0x80>
 8016ea4:	2500      	movs	r5, #0
 8016ea6:	e7ef      	b.n	8016e88 <_reclaim_reent+0x84>
 8016ea8:	bd70      	pop	{r4, r5, r6, pc}
 8016eaa:	bf00      	nop
 8016eac:	20000088 	.word	0x20000088

08016eb0 <_lseek_r>:
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4d07      	ldr	r5, [pc, #28]	; (8016ed0 <_lseek_r+0x20>)
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	4608      	mov	r0, r1
 8016eb8:	4611      	mov	r1, r2
 8016eba:	2200      	movs	r2, #0
 8016ebc:	602a      	str	r2, [r5, #0]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	f7e9 ffe4 	bl	8000e8c <_lseek>
 8016ec4:	1c43      	adds	r3, r0, #1
 8016ec6:	d102      	bne.n	8016ece <_lseek_r+0x1e>
 8016ec8:	682b      	ldr	r3, [r5, #0]
 8016eca:	b103      	cbz	r3, 8016ece <_lseek_r+0x1e>
 8016ecc:	6023      	str	r3, [r4, #0]
 8016ece:	bd38      	pop	{r3, r4, r5, pc}
 8016ed0:	2000d3a8 	.word	0x2000d3a8

08016ed4 <_read_r>:
 8016ed4:	b538      	push	{r3, r4, r5, lr}
 8016ed6:	4d07      	ldr	r5, [pc, #28]	; (8016ef4 <_read_r+0x20>)
 8016ed8:	4604      	mov	r4, r0
 8016eda:	4608      	mov	r0, r1
 8016edc:	4611      	mov	r1, r2
 8016ede:	2200      	movs	r2, #0
 8016ee0:	602a      	str	r2, [r5, #0]
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	f7e9 ff72 	bl	8000dcc <_read>
 8016ee8:	1c43      	adds	r3, r0, #1
 8016eea:	d102      	bne.n	8016ef2 <_read_r+0x1e>
 8016eec:	682b      	ldr	r3, [r5, #0]
 8016eee:	b103      	cbz	r3, 8016ef2 <_read_r+0x1e>
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	bd38      	pop	{r3, r4, r5, pc}
 8016ef4:	2000d3a8 	.word	0x2000d3a8

08016ef8 <_write_r>:
 8016ef8:	b538      	push	{r3, r4, r5, lr}
 8016efa:	4d07      	ldr	r5, [pc, #28]	; (8016f18 <_write_r+0x20>)
 8016efc:	4604      	mov	r4, r0
 8016efe:	4608      	mov	r0, r1
 8016f00:	4611      	mov	r1, r2
 8016f02:	2200      	movs	r2, #0
 8016f04:	602a      	str	r2, [r5, #0]
 8016f06:	461a      	mov	r2, r3
 8016f08:	f7e9 ff7d 	bl	8000e06 <_write>
 8016f0c:	1c43      	adds	r3, r0, #1
 8016f0e:	d102      	bne.n	8016f16 <_write_r+0x1e>
 8016f10:	682b      	ldr	r3, [r5, #0]
 8016f12:	b103      	cbz	r3, 8016f16 <_write_r+0x1e>
 8016f14:	6023      	str	r3, [r4, #0]
 8016f16:	bd38      	pop	{r3, r4, r5, pc}
 8016f18:	2000d3a8 	.word	0x2000d3a8

08016f1c <__libc_init_array>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	4d0d      	ldr	r5, [pc, #52]	; (8016f54 <__libc_init_array+0x38>)
 8016f20:	4c0d      	ldr	r4, [pc, #52]	; (8016f58 <__libc_init_array+0x3c>)
 8016f22:	1b64      	subs	r4, r4, r5
 8016f24:	10a4      	asrs	r4, r4, #2
 8016f26:	2600      	movs	r6, #0
 8016f28:	42a6      	cmp	r6, r4
 8016f2a:	d109      	bne.n	8016f40 <__libc_init_array+0x24>
 8016f2c:	4d0b      	ldr	r5, [pc, #44]	; (8016f5c <__libc_init_array+0x40>)
 8016f2e:	4c0c      	ldr	r4, [pc, #48]	; (8016f60 <__libc_init_array+0x44>)
 8016f30:	f000 ffe0 	bl	8017ef4 <_init>
 8016f34:	1b64      	subs	r4, r4, r5
 8016f36:	10a4      	asrs	r4, r4, #2
 8016f38:	2600      	movs	r6, #0
 8016f3a:	42a6      	cmp	r6, r4
 8016f3c:	d105      	bne.n	8016f4a <__libc_init_array+0x2e>
 8016f3e:	bd70      	pop	{r4, r5, r6, pc}
 8016f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f44:	4798      	blx	r3
 8016f46:	3601      	adds	r6, #1
 8016f48:	e7ee      	b.n	8016f28 <__libc_init_array+0xc>
 8016f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f4e:	4798      	blx	r3
 8016f50:	3601      	adds	r6, #1
 8016f52:	e7f2      	b.n	8016f3a <__libc_init_array+0x1e>
 8016f54:	0801be78 	.word	0x0801be78
 8016f58:	0801be78 	.word	0x0801be78
 8016f5c:	0801be78 	.word	0x0801be78
 8016f60:	0801be7c 	.word	0x0801be7c

08016f64 <__retarget_lock_init_recursive>:
 8016f64:	4770      	bx	lr

08016f66 <__retarget_lock_acquire_recursive>:
 8016f66:	4770      	bx	lr

08016f68 <__retarget_lock_release_recursive>:
 8016f68:	4770      	bx	lr

08016f6a <memcpy>:
 8016f6a:	440a      	add	r2, r1
 8016f6c:	4291      	cmp	r1, r2
 8016f6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f72:	d100      	bne.n	8016f76 <memcpy+0xc>
 8016f74:	4770      	bx	lr
 8016f76:	b510      	push	{r4, lr}
 8016f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f80:	4291      	cmp	r1, r2
 8016f82:	d1f9      	bne.n	8016f78 <memcpy+0xe>
 8016f84:	bd10      	pop	{r4, pc}
	...

08016f88 <__assert_func>:
 8016f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f8a:	4614      	mov	r4, r2
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	4b09      	ldr	r3, [pc, #36]	; (8016fb4 <__assert_func+0x2c>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	4605      	mov	r5, r0
 8016f94:	68d8      	ldr	r0, [r3, #12]
 8016f96:	b14c      	cbz	r4, 8016fac <__assert_func+0x24>
 8016f98:	4b07      	ldr	r3, [pc, #28]	; (8016fb8 <__assert_func+0x30>)
 8016f9a:	9100      	str	r1, [sp, #0]
 8016f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016fa0:	4906      	ldr	r1, [pc, #24]	; (8016fbc <__assert_func+0x34>)
 8016fa2:	462b      	mov	r3, r5
 8016fa4:	f000 fde8 	bl	8017b78 <fiprintf>
 8016fa8:	f000 fe9e 	bl	8017ce8 <abort>
 8016fac:	4b04      	ldr	r3, [pc, #16]	; (8016fc0 <__assert_func+0x38>)
 8016fae:	461c      	mov	r4, r3
 8016fb0:	e7f3      	b.n	8016f9a <__assert_func+0x12>
 8016fb2:	bf00      	nop
 8016fb4:	20000088 	.word	0x20000088
 8016fb8:	0801be00 	.word	0x0801be00
 8016fbc:	0801be0d 	.word	0x0801be0d
 8016fc0:	0801be3b 	.word	0x0801be3b

08016fc4 <_free_r>:
 8016fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fc6:	2900      	cmp	r1, #0
 8016fc8:	d044      	beq.n	8017054 <_free_r+0x90>
 8016fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fce:	9001      	str	r0, [sp, #4]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8016fd6:	bfb8      	it	lt
 8016fd8:	18e4      	addlt	r4, r4, r3
 8016fda:	f000 f8e7 	bl	80171ac <__malloc_lock>
 8016fde:	4a1e      	ldr	r2, [pc, #120]	; (8017058 <_free_r+0x94>)
 8016fe0:	9801      	ldr	r0, [sp, #4]
 8016fe2:	6813      	ldr	r3, [r2, #0]
 8016fe4:	b933      	cbnz	r3, 8016ff4 <_free_r+0x30>
 8016fe6:	6063      	str	r3, [r4, #4]
 8016fe8:	6014      	str	r4, [r2, #0]
 8016fea:	b003      	add	sp, #12
 8016fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ff0:	f000 b8e2 	b.w	80171b8 <__malloc_unlock>
 8016ff4:	42a3      	cmp	r3, r4
 8016ff6:	d908      	bls.n	801700a <_free_r+0x46>
 8016ff8:	6825      	ldr	r5, [r4, #0]
 8016ffa:	1961      	adds	r1, r4, r5
 8016ffc:	428b      	cmp	r3, r1
 8016ffe:	bf01      	itttt	eq
 8017000:	6819      	ldreq	r1, [r3, #0]
 8017002:	685b      	ldreq	r3, [r3, #4]
 8017004:	1949      	addeq	r1, r1, r5
 8017006:	6021      	streq	r1, [r4, #0]
 8017008:	e7ed      	b.n	8016fe6 <_free_r+0x22>
 801700a:	461a      	mov	r2, r3
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	b10b      	cbz	r3, 8017014 <_free_r+0x50>
 8017010:	42a3      	cmp	r3, r4
 8017012:	d9fa      	bls.n	801700a <_free_r+0x46>
 8017014:	6811      	ldr	r1, [r2, #0]
 8017016:	1855      	adds	r5, r2, r1
 8017018:	42a5      	cmp	r5, r4
 801701a:	d10b      	bne.n	8017034 <_free_r+0x70>
 801701c:	6824      	ldr	r4, [r4, #0]
 801701e:	4421      	add	r1, r4
 8017020:	1854      	adds	r4, r2, r1
 8017022:	42a3      	cmp	r3, r4
 8017024:	6011      	str	r1, [r2, #0]
 8017026:	d1e0      	bne.n	8016fea <_free_r+0x26>
 8017028:	681c      	ldr	r4, [r3, #0]
 801702a:	685b      	ldr	r3, [r3, #4]
 801702c:	6053      	str	r3, [r2, #4]
 801702e:	440c      	add	r4, r1
 8017030:	6014      	str	r4, [r2, #0]
 8017032:	e7da      	b.n	8016fea <_free_r+0x26>
 8017034:	d902      	bls.n	801703c <_free_r+0x78>
 8017036:	230c      	movs	r3, #12
 8017038:	6003      	str	r3, [r0, #0]
 801703a:	e7d6      	b.n	8016fea <_free_r+0x26>
 801703c:	6825      	ldr	r5, [r4, #0]
 801703e:	1961      	adds	r1, r4, r5
 8017040:	428b      	cmp	r3, r1
 8017042:	bf04      	itt	eq
 8017044:	6819      	ldreq	r1, [r3, #0]
 8017046:	685b      	ldreq	r3, [r3, #4]
 8017048:	6063      	str	r3, [r4, #4]
 801704a:	bf04      	itt	eq
 801704c:	1949      	addeq	r1, r1, r5
 801704e:	6021      	streq	r1, [r4, #0]
 8017050:	6054      	str	r4, [r2, #4]
 8017052:	e7ca      	b.n	8016fea <_free_r+0x26>
 8017054:	b003      	add	sp, #12
 8017056:	bd30      	pop	{r4, r5, pc}
 8017058:	2000d3b0 	.word	0x2000d3b0

0801705c <malloc>:
 801705c:	4b02      	ldr	r3, [pc, #8]	; (8017068 <malloc+0xc>)
 801705e:	4601      	mov	r1, r0
 8017060:	6818      	ldr	r0, [r3, #0]
 8017062:	f000 b823 	b.w	80170ac <_malloc_r>
 8017066:	bf00      	nop
 8017068:	20000088 	.word	0x20000088

0801706c <sbrk_aligned>:
 801706c:	b570      	push	{r4, r5, r6, lr}
 801706e:	4e0e      	ldr	r6, [pc, #56]	; (80170a8 <sbrk_aligned+0x3c>)
 8017070:	460c      	mov	r4, r1
 8017072:	6831      	ldr	r1, [r6, #0]
 8017074:	4605      	mov	r5, r0
 8017076:	b911      	cbnz	r1, 801707e <sbrk_aligned+0x12>
 8017078:	f000 fe26 	bl	8017cc8 <_sbrk_r>
 801707c:	6030      	str	r0, [r6, #0]
 801707e:	4621      	mov	r1, r4
 8017080:	4628      	mov	r0, r5
 8017082:	f000 fe21 	bl	8017cc8 <_sbrk_r>
 8017086:	1c43      	adds	r3, r0, #1
 8017088:	d00a      	beq.n	80170a0 <sbrk_aligned+0x34>
 801708a:	1cc4      	adds	r4, r0, #3
 801708c:	f024 0403 	bic.w	r4, r4, #3
 8017090:	42a0      	cmp	r0, r4
 8017092:	d007      	beq.n	80170a4 <sbrk_aligned+0x38>
 8017094:	1a21      	subs	r1, r4, r0
 8017096:	4628      	mov	r0, r5
 8017098:	f000 fe16 	bl	8017cc8 <_sbrk_r>
 801709c:	3001      	adds	r0, #1
 801709e:	d101      	bne.n	80170a4 <sbrk_aligned+0x38>
 80170a0:	f04f 34ff 	mov.w	r4, #4294967295
 80170a4:	4620      	mov	r0, r4
 80170a6:	bd70      	pop	{r4, r5, r6, pc}
 80170a8:	2000d3b4 	.word	0x2000d3b4

080170ac <_malloc_r>:
 80170ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170b0:	1ccd      	adds	r5, r1, #3
 80170b2:	f025 0503 	bic.w	r5, r5, #3
 80170b6:	3508      	adds	r5, #8
 80170b8:	2d0c      	cmp	r5, #12
 80170ba:	bf38      	it	cc
 80170bc:	250c      	movcc	r5, #12
 80170be:	2d00      	cmp	r5, #0
 80170c0:	4607      	mov	r7, r0
 80170c2:	db01      	blt.n	80170c8 <_malloc_r+0x1c>
 80170c4:	42a9      	cmp	r1, r5
 80170c6:	d905      	bls.n	80170d4 <_malloc_r+0x28>
 80170c8:	230c      	movs	r3, #12
 80170ca:	603b      	str	r3, [r7, #0]
 80170cc:	2600      	movs	r6, #0
 80170ce:	4630      	mov	r0, r6
 80170d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80171a8 <_malloc_r+0xfc>
 80170d8:	f000 f868 	bl	80171ac <__malloc_lock>
 80170dc:	f8d8 3000 	ldr.w	r3, [r8]
 80170e0:	461c      	mov	r4, r3
 80170e2:	bb5c      	cbnz	r4, 801713c <_malloc_r+0x90>
 80170e4:	4629      	mov	r1, r5
 80170e6:	4638      	mov	r0, r7
 80170e8:	f7ff ffc0 	bl	801706c <sbrk_aligned>
 80170ec:	1c43      	adds	r3, r0, #1
 80170ee:	4604      	mov	r4, r0
 80170f0:	d155      	bne.n	801719e <_malloc_r+0xf2>
 80170f2:	f8d8 4000 	ldr.w	r4, [r8]
 80170f6:	4626      	mov	r6, r4
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	d145      	bne.n	8017188 <_malloc_r+0xdc>
 80170fc:	2c00      	cmp	r4, #0
 80170fe:	d048      	beq.n	8017192 <_malloc_r+0xe6>
 8017100:	6823      	ldr	r3, [r4, #0]
 8017102:	4631      	mov	r1, r6
 8017104:	4638      	mov	r0, r7
 8017106:	eb04 0903 	add.w	r9, r4, r3
 801710a:	f000 fddd 	bl	8017cc8 <_sbrk_r>
 801710e:	4581      	cmp	r9, r0
 8017110:	d13f      	bne.n	8017192 <_malloc_r+0xe6>
 8017112:	6821      	ldr	r1, [r4, #0]
 8017114:	1a6d      	subs	r5, r5, r1
 8017116:	4629      	mov	r1, r5
 8017118:	4638      	mov	r0, r7
 801711a:	f7ff ffa7 	bl	801706c <sbrk_aligned>
 801711e:	3001      	adds	r0, #1
 8017120:	d037      	beq.n	8017192 <_malloc_r+0xe6>
 8017122:	6823      	ldr	r3, [r4, #0]
 8017124:	442b      	add	r3, r5
 8017126:	6023      	str	r3, [r4, #0]
 8017128:	f8d8 3000 	ldr.w	r3, [r8]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d038      	beq.n	80171a2 <_malloc_r+0xf6>
 8017130:	685a      	ldr	r2, [r3, #4]
 8017132:	42a2      	cmp	r2, r4
 8017134:	d12b      	bne.n	801718e <_malloc_r+0xe2>
 8017136:	2200      	movs	r2, #0
 8017138:	605a      	str	r2, [r3, #4]
 801713a:	e00f      	b.n	801715c <_malloc_r+0xb0>
 801713c:	6822      	ldr	r2, [r4, #0]
 801713e:	1b52      	subs	r2, r2, r5
 8017140:	d41f      	bmi.n	8017182 <_malloc_r+0xd6>
 8017142:	2a0b      	cmp	r2, #11
 8017144:	d917      	bls.n	8017176 <_malloc_r+0xca>
 8017146:	1961      	adds	r1, r4, r5
 8017148:	42a3      	cmp	r3, r4
 801714a:	6025      	str	r5, [r4, #0]
 801714c:	bf18      	it	ne
 801714e:	6059      	strne	r1, [r3, #4]
 8017150:	6863      	ldr	r3, [r4, #4]
 8017152:	bf08      	it	eq
 8017154:	f8c8 1000 	streq.w	r1, [r8]
 8017158:	5162      	str	r2, [r4, r5]
 801715a:	604b      	str	r3, [r1, #4]
 801715c:	4638      	mov	r0, r7
 801715e:	f104 060b 	add.w	r6, r4, #11
 8017162:	f000 f829 	bl	80171b8 <__malloc_unlock>
 8017166:	f026 0607 	bic.w	r6, r6, #7
 801716a:	1d23      	adds	r3, r4, #4
 801716c:	1af2      	subs	r2, r6, r3
 801716e:	d0ae      	beq.n	80170ce <_malloc_r+0x22>
 8017170:	1b9b      	subs	r3, r3, r6
 8017172:	50a3      	str	r3, [r4, r2]
 8017174:	e7ab      	b.n	80170ce <_malloc_r+0x22>
 8017176:	42a3      	cmp	r3, r4
 8017178:	6862      	ldr	r2, [r4, #4]
 801717a:	d1dd      	bne.n	8017138 <_malloc_r+0x8c>
 801717c:	f8c8 2000 	str.w	r2, [r8]
 8017180:	e7ec      	b.n	801715c <_malloc_r+0xb0>
 8017182:	4623      	mov	r3, r4
 8017184:	6864      	ldr	r4, [r4, #4]
 8017186:	e7ac      	b.n	80170e2 <_malloc_r+0x36>
 8017188:	4634      	mov	r4, r6
 801718a:	6876      	ldr	r6, [r6, #4]
 801718c:	e7b4      	b.n	80170f8 <_malloc_r+0x4c>
 801718e:	4613      	mov	r3, r2
 8017190:	e7cc      	b.n	801712c <_malloc_r+0x80>
 8017192:	230c      	movs	r3, #12
 8017194:	603b      	str	r3, [r7, #0]
 8017196:	4638      	mov	r0, r7
 8017198:	f000 f80e 	bl	80171b8 <__malloc_unlock>
 801719c:	e797      	b.n	80170ce <_malloc_r+0x22>
 801719e:	6025      	str	r5, [r4, #0]
 80171a0:	e7dc      	b.n	801715c <_malloc_r+0xb0>
 80171a2:	605b      	str	r3, [r3, #4]
 80171a4:	deff      	udf	#255	; 0xff
 80171a6:	bf00      	nop
 80171a8:	2000d3b0 	.word	0x2000d3b0

080171ac <__malloc_lock>:
 80171ac:	4801      	ldr	r0, [pc, #4]	; (80171b4 <__malloc_lock+0x8>)
 80171ae:	f7ff beda 	b.w	8016f66 <__retarget_lock_acquire_recursive>
 80171b2:	bf00      	nop
 80171b4:	2000d3ac 	.word	0x2000d3ac

080171b8 <__malloc_unlock>:
 80171b8:	4801      	ldr	r0, [pc, #4]	; (80171c0 <__malloc_unlock+0x8>)
 80171ba:	f7ff bed5 	b.w	8016f68 <__retarget_lock_release_recursive>
 80171be:	bf00      	nop
 80171c0:	2000d3ac 	.word	0x2000d3ac

080171c4 <__ssputs_r>:
 80171c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c8:	688e      	ldr	r6, [r1, #8]
 80171ca:	461f      	mov	r7, r3
 80171cc:	42be      	cmp	r6, r7
 80171ce:	680b      	ldr	r3, [r1, #0]
 80171d0:	4682      	mov	sl, r0
 80171d2:	460c      	mov	r4, r1
 80171d4:	4690      	mov	r8, r2
 80171d6:	d82c      	bhi.n	8017232 <__ssputs_r+0x6e>
 80171d8:	898a      	ldrh	r2, [r1, #12]
 80171da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80171de:	d026      	beq.n	801722e <__ssputs_r+0x6a>
 80171e0:	6965      	ldr	r5, [r4, #20]
 80171e2:	6909      	ldr	r1, [r1, #16]
 80171e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171e8:	eba3 0901 	sub.w	r9, r3, r1
 80171ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171f0:	1c7b      	adds	r3, r7, #1
 80171f2:	444b      	add	r3, r9
 80171f4:	106d      	asrs	r5, r5, #1
 80171f6:	429d      	cmp	r5, r3
 80171f8:	bf38      	it	cc
 80171fa:	461d      	movcc	r5, r3
 80171fc:	0553      	lsls	r3, r2, #21
 80171fe:	d527      	bpl.n	8017250 <__ssputs_r+0x8c>
 8017200:	4629      	mov	r1, r5
 8017202:	f7ff ff53 	bl	80170ac <_malloc_r>
 8017206:	4606      	mov	r6, r0
 8017208:	b360      	cbz	r0, 8017264 <__ssputs_r+0xa0>
 801720a:	6921      	ldr	r1, [r4, #16]
 801720c:	464a      	mov	r2, r9
 801720e:	f7ff feac 	bl	8016f6a <memcpy>
 8017212:	89a3      	ldrh	r3, [r4, #12]
 8017214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801721c:	81a3      	strh	r3, [r4, #12]
 801721e:	6126      	str	r6, [r4, #16]
 8017220:	6165      	str	r5, [r4, #20]
 8017222:	444e      	add	r6, r9
 8017224:	eba5 0509 	sub.w	r5, r5, r9
 8017228:	6026      	str	r6, [r4, #0]
 801722a:	60a5      	str	r5, [r4, #8]
 801722c:	463e      	mov	r6, r7
 801722e:	42be      	cmp	r6, r7
 8017230:	d900      	bls.n	8017234 <__ssputs_r+0x70>
 8017232:	463e      	mov	r6, r7
 8017234:	6820      	ldr	r0, [r4, #0]
 8017236:	4632      	mov	r2, r6
 8017238:	4641      	mov	r1, r8
 801723a:	f7ff fd8e 	bl	8016d5a <memmove>
 801723e:	68a3      	ldr	r3, [r4, #8]
 8017240:	1b9b      	subs	r3, r3, r6
 8017242:	60a3      	str	r3, [r4, #8]
 8017244:	6823      	ldr	r3, [r4, #0]
 8017246:	4433      	add	r3, r6
 8017248:	6023      	str	r3, [r4, #0]
 801724a:	2000      	movs	r0, #0
 801724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017250:	462a      	mov	r2, r5
 8017252:	f000 fd50 	bl	8017cf6 <_realloc_r>
 8017256:	4606      	mov	r6, r0
 8017258:	2800      	cmp	r0, #0
 801725a:	d1e0      	bne.n	801721e <__ssputs_r+0x5a>
 801725c:	6921      	ldr	r1, [r4, #16]
 801725e:	4650      	mov	r0, sl
 8017260:	f7ff feb0 	bl	8016fc4 <_free_r>
 8017264:	230c      	movs	r3, #12
 8017266:	f8ca 3000 	str.w	r3, [sl]
 801726a:	89a3      	ldrh	r3, [r4, #12]
 801726c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017270:	81a3      	strh	r3, [r4, #12]
 8017272:	f04f 30ff 	mov.w	r0, #4294967295
 8017276:	e7e9      	b.n	801724c <__ssputs_r+0x88>

08017278 <_svfiprintf_r>:
 8017278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727c:	4698      	mov	r8, r3
 801727e:	898b      	ldrh	r3, [r1, #12]
 8017280:	061b      	lsls	r3, r3, #24
 8017282:	b09d      	sub	sp, #116	; 0x74
 8017284:	4607      	mov	r7, r0
 8017286:	460d      	mov	r5, r1
 8017288:	4614      	mov	r4, r2
 801728a:	d50e      	bpl.n	80172aa <_svfiprintf_r+0x32>
 801728c:	690b      	ldr	r3, [r1, #16]
 801728e:	b963      	cbnz	r3, 80172aa <_svfiprintf_r+0x32>
 8017290:	2140      	movs	r1, #64	; 0x40
 8017292:	f7ff ff0b 	bl	80170ac <_malloc_r>
 8017296:	6028      	str	r0, [r5, #0]
 8017298:	6128      	str	r0, [r5, #16]
 801729a:	b920      	cbnz	r0, 80172a6 <_svfiprintf_r+0x2e>
 801729c:	230c      	movs	r3, #12
 801729e:	603b      	str	r3, [r7, #0]
 80172a0:	f04f 30ff 	mov.w	r0, #4294967295
 80172a4:	e0d0      	b.n	8017448 <_svfiprintf_r+0x1d0>
 80172a6:	2340      	movs	r3, #64	; 0x40
 80172a8:	616b      	str	r3, [r5, #20]
 80172aa:	2300      	movs	r3, #0
 80172ac:	9309      	str	r3, [sp, #36]	; 0x24
 80172ae:	2320      	movs	r3, #32
 80172b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80172b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80172b8:	2330      	movs	r3, #48	; 0x30
 80172ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017460 <_svfiprintf_r+0x1e8>
 80172be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172c2:	f04f 0901 	mov.w	r9, #1
 80172c6:	4623      	mov	r3, r4
 80172c8:	469a      	mov	sl, r3
 80172ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172ce:	b10a      	cbz	r2, 80172d4 <_svfiprintf_r+0x5c>
 80172d0:	2a25      	cmp	r2, #37	; 0x25
 80172d2:	d1f9      	bne.n	80172c8 <_svfiprintf_r+0x50>
 80172d4:	ebba 0b04 	subs.w	fp, sl, r4
 80172d8:	d00b      	beq.n	80172f2 <_svfiprintf_r+0x7a>
 80172da:	465b      	mov	r3, fp
 80172dc:	4622      	mov	r2, r4
 80172de:	4629      	mov	r1, r5
 80172e0:	4638      	mov	r0, r7
 80172e2:	f7ff ff6f 	bl	80171c4 <__ssputs_r>
 80172e6:	3001      	adds	r0, #1
 80172e8:	f000 80a9 	beq.w	801743e <_svfiprintf_r+0x1c6>
 80172ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172ee:	445a      	add	r2, fp
 80172f0:	9209      	str	r2, [sp, #36]	; 0x24
 80172f2:	f89a 3000 	ldrb.w	r3, [sl]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	f000 80a1 	beq.w	801743e <_svfiprintf_r+0x1c6>
 80172fc:	2300      	movs	r3, #0
 80172fe:	f04f 32ff 	mov.w	r2, #4294967295
 8017302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017306:	f10a 0a01 	add.w	sl, sl, #1
 801730a:	9304      	str	r3, [sp, #16]
 801730c:	9307      	str	r3, [sp, #28]
 801730e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017312:	931a      	str	r3, [sp, #104]	; 0x68
 8017314:	4654      	mov	r4, sl
 8017316:	2205      	movs	r2, #5
 8017318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801731c:	4850      	ldr	r0, [pc, #320]	; (8017460 <_svfiprintf_r+0x1e8>)
 801731e:	f7e8 ff5f 	bl	80001e0 <memchr>
 8017322:	9a04      	ldr	r2, [sp, #16]
 8017324:	b9d8      	cbnz	r0, 801735e <_svfiprintf_r+0xe6>
 8017326:	06d0      	lsls	r0, r2, #27
 8017328:	bf44      	itt	mi
 801732a:	2320      	movmi	r3, #32
 801732c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017330:	0711      	lsls	r1, r2, #28
 8017332:	bf44      	itt	mi
 8017334:	232b      	movmi	r3, #43	; 0x2b
 8017336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801733a:	f89a 3000 	ldrb.w	r3, [sl]
 801733e:	2b2a      	cmp	r3, #42	; 0x2a
 8017340:	d015      	beq.n	801736e <_svfiprintf_r+0xf6>
 8017342:	9a07      	ldr	r2, [sp, #28]
 8017344:	4654      	mov	r4, sl
 8017346:	2000      	movs	r0, #0
 8017348:	f04f 0c0a 	mov.w	ip, #10
 801734c:	4621      	mov	r1, r4
 801734e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017352:	3b30      	subs	r3, #48	; 0x30
 8017354:	2b09      	cmp	r3, #9
 8017356:	d94d      	bls.n	80173f4 <_svfiprintf_r+0x17c>
 8017358:	b1b0      	cbz	r0, 8017388 <_svfiprintf_r+0x110>
 801735a:	9207      	str	r2, [sp, #28]
 801735c:	e014      	b.n	8017388 <_svfiprintf_r+0x110>
 801735e:	eba0 0308 	sub.w	r3, r0, r8
 8017362:	fa09 f303 	lsl.w	r3, r9, r3
 8017366:	4313      	orrs	r3, r2
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	46a2      	mov	sl, r4
 801736c:	e7d2      	b.n	8017314 <_svfiprintf_r+0x9c>
 801736e:	9b03      	ldr	r3, [sp, #12]
 8017370:	1d19      	adds	r1, r3, #4
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	9103      	str	r1, [sp, #12]
 8017376:	2b00      	cmp	r3, #0
 8017378:	bfbb      	ittet	lt
 801737a:	425b      	neglt	r3, r3
 801737c:	f042 0202 	orrlt.w	r2, r2, #2
 8017380:	9307      	strge	r3, [sp, #28]
 8017382:	9307      	strlt	r3, [sp, #28]
 8017384:	bfb8      	it	lt
 8017386:	9204      	strlt	r2, [sp, #16]
 8017388:	7823      	ldrb	r3, [r4, #0]
 801738a:	2b2e      	cmp	r3, #46	; 0x2e
 801738c:	d10c      	bne.n	80173a8 <_svfiprintf_r+0x130>
 801738e:	7863      	ldrb	r3, [r4, #1]
 8017390:	2b2a      	cmp	r3, #42	; 0x2a
 8017392:	d134      	bne.n	80173fe <_svfiprintf_r+0x186>
 8017394:	9b03      	ldr	r3, [sp, #12]
 8017396:	1d1a      	adds	r2, r3, #4
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	9203      	str	r2, [sp, #12]
 801739c:	2b00      	cmp	r3, #0
 801739e:	bfb8      	it	lt
 80173a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80173a4:	3402      	adds	r4, #2
 80173a6:	9305      	str	r3, [sp, #20]
 80173a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017470 <_svfiprintf_r+0x1f8>
 80173ac:	7821      	ldrb	r1, [r4, #0]
 80173ae:	2203      	movs	r2, #3
 80173b0:	4650      	mov	r0, sl
 80173b2:	f7e8 ff15 	bl	80001e0 <memchr>
 80173b6:	b138      	cbz	r0, 80173c8 <_svfiprintf_r+0x150>
 80173b8:	9b04      	ldr	r3, [sp, #16]
 80173ba:	eba0 000a 	sub.w	r0, r0, sl
 80173be:	2240      	movs	r2, #64	; 0x40
 80173c0:	4082      	lsls	r2, r0
 80173c2:	4313      	orrs	r3, r2
 80173c4:	3401      	adds	r4, #1
 80173c6:	9304      	str	r3, [sp, #16]
 80173c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173cc:	4825      	ldr	r0, [pc, #148]	; (8017464 <_svfiprintf_r+0x1ec>)
 80173ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173d2:	2206      	movs	r2, #6
 80173d4:	f7e8 ff04 	bl	80001e0 <memchr>
 80173d8:	2800      	cmp	r0, #0
 80173da:	d038      	beq.n	801744e <_svfiprintf_r+0x1d6>
 80173dc:	4b22      	ldr	r3, [pc, #136]	; (8017468 <_svfiprintf_r+0x1f0>)
 80173de:	bb1b      	cbnz	r3, 8017428 <_svfiprintf_r+0x1b0>
 80173e0:	9b03      	ldr	r3, [sp, #12]
 80173e2:	3307      	adds	r3, #7
 80173e4:	f023 0307 	bic.w	r3, r3, #7
 80173e8:	3308      	adds	r3, #8
 80173ea:	9303      	str	r3, [sp, #12]
 80173ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ee:	4433      	add	r3, r6
 80173f0:	9309      	str	r3, [sp, #36]	; 0x24
 80173f2:	e768      	b.n	80172c6 <_svfiprintf_r+0x4e>
 80173f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80173f8:	460c      	mov	r4, r1
 80173fa:	2001      	movs	r0, #1
 80173fc:	e7a6      	b.n	801734c <_svfiprintf_r+0xd4>
 80173fe:	2300      	movs	r3, #0
 8017400:	3401      	adds	r4, #1
 8017402:	9305      	str	r3, [sp, #20]
 8017404:	4619      	mov	r1, r3
 8017406:	f04f 0c0a 	mov.w	ip, #10
 801740a:	4620      	mov	r0, r4
 801740c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017410:	3a30      	subs	r2, #48	; 0x30
 8017412:	2a09      	cmp	r2, #9
 8017414:	d903      	bls.n	801741e <_svfiprintf_r+0x1a6>
 8017416:	2b00      	cmp	r3, #0
 8017418:	d0c6      	beq.n	80173a8 <_svfiprintf_r+0x130>
 801741a:	9105      	str	r1, [sp, #20]
 801741c:	e7c4      	b.n	80173a8 <_svfiprintf_r+0x130>
 801741e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017422:	4604      	mov	r4, r0
 8017424:	2301      	movs	r3, #1
 8017426:	e7f0      	b.n	801740a <_svfiprintf_r+0x192>
 8017428:	ab03      	add	r3, sp, #12
 801742a:	9300      	str	r3, [sp, #0]
 801742c:	462a      	mov	r2, r5
 801742e:	4b0f      	ldr	r3, [pc, #60]	; (801746c <_svfiprintf_r+0x1f4>)
 8017430:	a904      	add	r1, sp, #16
 8017432:	4638      	mov	r0, r7
 8017434:	f3af 8000 	nop.w
 8017438:	1c42      	adds	r2, r0, #1
 801743a:	4606      	mov	r6, r0
 801743c:	d1d6      	bne.n	80173ec <_svfiprintf_r+0x174>
 801743e:	89ab      	ldrh	r3, [r5, #12]
 8017440:	065b      	lsls	r3, r3, #25
 8017442:	f53f af2d 	bmi.w	80172a0 <_svfiprintf_r+0x28>
 8017446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017448:	b01d      	add	sp, #116	; 0x74
 801744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801744e:	ab03      	add	r3, sp, #12
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	462a      	mov	r2, r5
 8017454:	4b05      	ldr	r3, [pc, #20]	; (801746c <_svfiprintf_r+0x1f4>)
 8017456:	a904      	add	r1, sp, #16
 8017458:	4638      	mov	r0, r7
 801745a:	f000 f9bd 	bl	80177d8 <_printf_i>
 801745e:	e7eb      	b.n	8017438 <_svfiprintf_r+0x1c0>
 8017460:	0801be3c 	.word	0x0801be3c
 8017464:	0801be46 	.word	0x0801be46
 8017468:	00000000 	.word	0x00000000
 801746c:	080171c5 	.word	0x080171c5
 8017470:	0801be42 	.word	0x0801be42

08017474 <__sfputc_r>:
 8017474:	6893      	ldr	r3, [r2, #8]
 8017476:	3b01      	subs	r3, #1
 8017478:	2b00      	cmp	r3, #0
 801747a:	b410      	push	{r4}
 801747c:	6093      	str	r3, [r2, #8]
 801747e:	da08      	bge.n	8017492 <__sfputc_r+0x1e>
 8017480:	6994      	ldr	r4, [r2, #24]
 8017482:	42a3      	cmp	r3, r4
 8017484:	db01      	blt.n	801748a <__sfputc_r+0x16>
 8017486:	290a      	cmp	r1, #10
 8017488:	d103      	bne.n	8017492 <__sfputc_r+0x1e>
 801748a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801748e:	f000 bb85 	b.w	8017b9c <__swbuf_r>
 8017492:	6813      	ldr	r3, [r2, #0]
 8017494:	1c58      	adds	r0, r3, #1
 8017496:	6010      	str	r0, [r2, #0]
 8017498:	7019      	strb	r1, [r3, #0]
 801749a:	4608      	mov	r0, r1
 801749c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <__sfputs_r>:
 80174a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a4:	4606      	mov	r6, r0
 80174a6:	460f      	mov	r7, r1
 80174a8:	4614      	mov	r4, r2
 80174aa:	18d5      	adds	r5, r2, r3
 80174ac:	42ac      	cmp	r4, r5
 80174ae:	d101      	bne.n	80174b4 <__sfputs_r+0x12>
 80174b0:	2000      	movs	r0, #0
 80174b2:	e007      	b.n	80174c4 <__sfputs_r+0x22>
 80174b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174b8:	463a      	mov	r2, r7
 80174ba:	4630      	mov	r0, r6
 80174bc:	f7ff ffda 	bl	8017474 <__sfputc_r>
 80174c0:	1c43      	adds	r3, r0, #1
 80174c2:	d1f3      	bne.n	80174ac <__sfputs_r+0xa>
 80174c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080174c8 <_vfiprintf_r>:
 80174c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	460d      	mov	r5, r1
 80174ce:	b09d      	sub	sp, #116	; 0x74
 80174d0:	4614      	mov	r4, r2
 80174d2:	4698      	mov	r8, r3
 80174d4:	4606      	mov	r6, r0
 80174d6:	b118      	cbz	r0, 80174e0 <_vfiprintf_r+0x18>
 80174d8:	6a03      	ldr	r3, [r0, #32]
 80174da:	b90b      	cbnz	r3, 80174e0 <_vfiprintf_r+0x18>
 80174dc:	f7ff fb4e 	bl	8016b7c <__sinit>
 80174e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174e2:	07d9      	lsls	r1, r3, #31
 80174e4:	d405      	bmi.n	80174f2 <_vfiprintf_r+0x2a>
 80174e6:	89ab      	ldrh	r3, [r5, #12]
 80174e8:	059a      	lsls	r2, r3, #22
 80174ea:	d402      	bmi.n	80174f2 <_vfiprintf_r+0x2a>
 80174ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174ee:	f7ff fd3a 	bl	8016f66 <__retarget_lock_acquire_recursive>
 80174f2:	89ab      	ldrh	r3, [r5, #12]
 80174f4:	071b      	lsls	r3, r3, #28
 80174f6:	d501      	bpl.n	80174fc <_vfiprintf_r+0x34>
 80174f8:	692b      	ldr	r3, [r5, #16]
 80174fa:	b99b      	cbnz	r3, 8017524 <_vfiprintf_r+0x5c>
 80174fc:	4629      	mov	r1, r5
 80174fe:	4630      	mov	r0, r6
 8017500:	f000 fb8a 	bl	8017c18 <__swsetup_r>
 8017504:	b170      	cbz	r0, 8017524 <_vfiprintf_r+0x5c>
 8017506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017508:	07dc      	lsls	r4, r3, #31
 801750a:	d504      	bpl.n	8017516 <_vfiprintf_r+0x4e>
 801750c:	f04f 30ff 	mov.w	r0, #4294967295
 8017510:	b01d      	add	sp, #116	; 0x74
 8017512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017516:	89ab      	ldrh	r3, [r5, #12]
 8017518:	0598      	lsls	r0, r3, #22
 801751a:	d4f7      	bmi.n	801750c <_vfiprintf_r+0x44>
 801751c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801751e:	f7ff fd23 	bl	8016f68 <__retarget_lock_release_recursive>
 8017522:	e7f3      	b.n	801750c <_vfiprintf_r+0x44>
 8017524:	2300      	movs	r3, #0
 8017526:	9309      	str	r3, [sp, #36]	; 0x24
 8017528:	2320      	movs	r3, #32
 801752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801752e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017532:	2330      	movs	r3, #48	; 0x30
 8017534:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80176e8 <_vfiprintf_r+0x220>
 8017538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801753c:	f04f 0901 	mov.w	r9, #1
 8017540:	4623      	mov	r3, r4
 8017542:	469a      	mov	sl, r3
 8017544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017548:	b10a      	cbz	r2, 801754e <_vfiprintf_r+0x86>
 801754a:	2a25      	cmp	r2, #37	; 0x25
 801754c:	d1f9      	bne.n	8017542 <_vfiprintf_r+0x7a>
 801754e:	ebba 0b04 	subs.w	fp, sl, r4
 8017552:	d00b      	beq.n	801756c <_vfiprintf_r+0xa4>
 8017554:	465b      	mov	r3, fp
 8017556:	4622      	mov	r2, r4
 8017558:	4629      	mov	r1, r5
 801755a:	4630      	mov	r0, r6
 801755c:	f7ff ffa1 	bl	80174a2 <__sfputs_r>
 8017560:	3001      	adds	r0, #1
 8017562:	f000 80a9 	beq.w	80176b8 <_vfiprintf_r+0x1f0>
 8017566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017568:	445a      	add	r2, fp
 801756a:	9209      	str	r2, [sp, #36]	; 0x24
 801756c:	f89a 3000 	ldrb.w	r3, [sl]
 8017570:	2b00      	cmp	r3, #0
 8017572:	f000 80a1 	beq.w	80176b8 <_vfiprintf_r+0x1f0>
 8017576:	2300      	movs	r3, #0
 8017578:	f04f 32ff 	mov.w	r2, #4294967295
 801757c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017580:	f10a 0a01 	add.w	sl, sl, #1
 8017584:	9304      	str	r3, [sp, #16]
 8017586:	9307      	str	r3, [sp, #28]
 8017588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801758c:	931a      	str	r3, [sp, #104]	; 0x68
 801758e:	4654      	mov	r4, sl
 8017590:	2205      	movs	r2, #5
 8017592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017596:	4854      	ldr	r0, [pc, #336]	; (80176e8 <_vfiprintf_r+0x220>)
 8017598:	f7e8 fe22 	bl	80001e0 <memchr>
 801759c:	9a04      	ldr	r2, [sp, #16]
 801759e:	b9d8      	cbnz	r0, 80175d8 <_vfiprintf_r+0x110>
 80175a0:	06d1      	lsls	r1, r2, #27
 80175a2:	bf44      	itt	mi
 80175a4:	2320      	movmi	r3, #32
 80175a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175aa:	0713      	lsls	r3, r2, #28
 80175ac:	bf44      	itt	mi
 80175ae:	232b      	movmi	r3, #43	; 0x2b
 80175b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175b4:	f89a 3000 	ldrb.w	r3, [sl]
 80175b8:	2b2a      	cmp	r3, #42	; 0x2a
 80175ba:	d015      	beq.n	80175e8 <_vfiprintf_r+0x120>
 80175bc:	9a07      	ldr	r2, [sp, #28]
 80175be:	4654      	mov	r4, sl
 80175c0:	2000      	movs	r0, #0
 80175c2:	f04f 0c0a 	mov.w	ip, #10
 80175c6:	4621      	mov	r1, r4
 80175c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175cc:	3b30      	subs	r3, #48	; 0x30
 80175ce:	2b09      	cmp	r3, #9
 80175d0:	d94d      	bls.n	801766e <_vfiprintf_r+0x1a6>
 80175d2:	b1b0      	cbz	r0, 8017602 <_vfiprintf_r+0x13a>
 80175d4:	9207      	str	r2, [sp, #28]
 80175d6:	e014      	b.n	8017602 <_vfiprintf_r+0x13a>
 80175d8:	eba0 0308 	sub.w	r3, r0, r8
 80175dc:	fa09 f303 	lsl.w	r3, r9, r3
 80175e0:	4313      	orrs	r3, r2
 80175e2:	9304      	str	r3, [sp, #16]
 80175e4:	46a2      	mov	sl, r4
 80175e6:	e7d2      	b.n	801758e <_vfiprintf_r+0xc6>
 80175e8:	9b03      	ldr	r3, [sp, #12]
 80175ea:	1d19      	adds	r1, r3, #4
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	9103      	str	r1, [sp, #12]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	bfbb      	ittet	lt
 80175f4:	425b      	neglt	r3, r3
 80175f6:	f042 0202 	orrlt.w	r2, r2, #2
 80175fa:	9307      	strge	r3, [sp, #28]
 80175fc:	9307      	strlt	r3, [sp, #28]
 80175fe:	bfb8      	it	lt
 8017600:	9204      	strlt	r2, [sp, #16]
 8017602:	7823      	ldrb	r3, [r4, #0]
 8017604:	2b2e      	cmp	r3, #46	; 0x2e
 8017606:	d10c      	bne.n	8017622 <_vfiprintf_r+0x15a>
 8017608:	7863      	ldrb	r3, [r4, #1]
 801760a:	2b2a      	cmp	r3, #42	; 0x2a
 801760c:	d134      	bne.n	8017678 <_vfiprintf_r+0x1b0>
 801760e:	9b03      	ldr	r3, [sp, #12]
 8017610:	1d1a      	adds	r2, r3, #4
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	9203      	str	r2, [sp, #12]
 8017616:	2b00      	cmp	r3, #0
 8017618:	bfb8      	it	lt
 801761a:	f04f 33ff 	movlt.w	r3, #4294967295
 801761e:	3402      	adds	r4, #2
 8017620:	9305      	str	r3, [sp, #20]
 8017622:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80176f8 <_vfiprintf_r+0x230>
 8017626:	7821      	ldrb	r1, [r4, #0]
 8017628:	2203      	movs	r2, #3
 801762a:	4650      	mov	r0, sl
 801762c:	f7e8 fdd8 	bl	80001e0 <memchr>
 8017630:	b138      	cbz	r0, 8017642 <_vfiprintf_r+0x17a>
 8017632:	9b04      	ldr	r3, [sp, #16]
 8017634:	eba0 000a 	sub.w	r0, r0, sl
 8017638:	2240      	movs	r2, #64	; 0x40
 801763a:	4082      	lsls	r2, r0
 801763c:	4313      	orrs	r3, r2
 801763e:	3401      	adds	r4, #1
 8017640:	9304      	str	r3, [sp, #16]
 8017642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017646:	4829      	ldr	r0, [pc, #164]	; (80176ec <_vfiprintf_r+0x224>)
 8017648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801764c:	2206      	movs	r2, #6
 801764e:	f7e8 fdc7 	bl	80001e0 <memchr>
 8017652:	2800      	cmp	r0, #0
 8017654:	d03f      	beq.n	80176d6 <_vfiprintf_r+0x20e>
 8017656:	4b26      	ldr	r3, [pc, #152]	; (80176f0 <_vfiprintf_r+0x228>)
 8017658:	bb1b      	cbnz	r3, 80176a2 <_vfiprintf_r+0x1da>
 801765a:	9b03      	ldr	r3, [sp, #12]
 801765c:	3307      	adds	r3, #7
 801765e:	f023 0307 	bic.w	r3, r3, #7
 8017662:	3308      	adds	r3, #8
 8017664:	9303      	str	r3, [sp, #12]
 8017666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017668:	443b      	add	r3, r7
 801766a:	9309      	str	r3, [sp, #36]	; 0x24
 801766c:	e768      	b.n	8017540 <_vfiprintf_r+0x78>
 801766e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017672:	460c      	mov	r4, r1
 8017674:	2001      	movs	r0, #1
 8017676:	e7a6      	b.n	80175c6 <_vfiprintf_r+0xfe>
 8017678:	2300      	movs	r3, #0
 801767a:	3401      	adds	r4, #1
 801767c:	9305      	str	r3, [sp, #20]
 801767e:	4619      	mov	r1, r3
 8017680:	f04f 0c0a 	mov.w	ip, #10
 8017684:	4620      	mov	r0, r4
 8017686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801768a:	3a30      	subs	r2, #48	; 0x30
 801768c:	2a09      	cmp	r2, #9
 801768e:	d903      	bls.n	8017698 <_vfiprintf_r+0x1d0>
 8017690:	2b00      	cmp	r3, #0
 8017692:	d0c6      	beq.n	8017622 <_vfiprintf_r+0x15a>
 8017694:	9105      	str	r1, [sp, #20]
 8017696:	e7c4      	b.n	8017622 <_vfiprintf_r+0x15a>
 8017698:	fb0c 2101 	mla	r1, ip, r1, r2
 801769c:	4604      	mov	r4, r0
 801769e:	2301      	movs	r3, #1
 80176a0:	e7f0      	b.n	8017684 <_vfiprintf_r+0x1bc>
 80176a2:	ab03      	add	r3, sp, #12
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	462a      	mov	r2, r5
 80176a8:	4b12      	ldr	r3, [pc, #72]	; (80176f4 <_vfiprintf_r+0x22c>)
 80176aa:	a904      	add	r1, sp, #16
 80176ac:	4630      	mov	r0, r6
 80176ae:	f3af 8000 	nop.w
 80176b2:	4607      	mov	r7, r0
 80176b4:	1c78      	adds	r0, r7, #1
 80176b6:	d1d6      	bne.n	8017666 <_vfiprintf_r+0x19e>
 80176b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176ba:	07d9      	lsls	r1, r3, #31
 80176bc:	d405      	bmi.n	80176ca <_vfiprintf_r+0x202>
 80176be:	89ab      	ldrh	r3, [r5, #12]
 80176c0:	059a      	lsls	r2, r3, #22
 80176c2:	d402      	bmi.n	80176ca <_vfiprintf_r+0x202>
 80176c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176c6:	f7ff fc4f 	bl	8016f68 <__retarget_lock_release_recursive>
 80176ca:	89ab      	ldrh	r3, [r5, #12]
 80176cc:	065b      	lsls	r3, r3, #25
 80176ce:	f53f af1d 	bmi.w	801750c <_vfiprintf_r+0x44>
 80176d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176d4:	e71c      	b.n	8017510 <_vfiprintf_r+0x48>
 80176d6:	ab03      	add	r3, sp, #12
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	462a      	mov	r2, r5
 80176dc:	4b05      	ldr	r3, [pc, #20]	; (80176f4 <_vfiprintf_r+0x22c>)
 80176de:	a904      	add	r1, sp, #16
 80176e0:	4630      	mov	r0, r6
 80176e2:	f000 f879 	bl	80177d8 <_printf_i>
 80176e6:	e7e4      	b.n	80176b2 <_vfiprintf_r+0x1ea>
 80176e8:	0801be3c 	.word	0x0801be3c
 80176ec:	0801be46 	.word	0x0801be46
 80176f0:	00000000 	.word	0x00000000
 80176f4:	080174a3 	.word	0x080174a3
 80176f8:	0801be42 	.word	0x0801be42

080176fc <_printf_common>:
 80176fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017700:	4616      	mov	r6, r2
 8017702:	4699      	mov	r9, r3
 8017704:	688a      	ldr	r2, [r1, #8]
 8017706:	690b      	ldr	r3, [r1, #16]
 8017708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801770c:	4293      	cmp	r3, r2
 801770e:	bfb8      	it	lt
 8017710:	4613      	movlt	r3, r2
 8017712:	6033      	str	r3, [r6, #0]
 8017714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017718:	4607      	mov	r7, r0
 801771a:	460c      	mov	r4, r1
 801771c:	b10a      	cbz	r2, 8017722 <_printf_common+0x26>
 801771e:	3301      	adds	r3, #1
 8017720:	6033      	str	r3, [r6, #0]
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	0699      	lsls	r1, r3, #26
 8017726:	bf42      	ittt	mi
 8017728:	6833      	ldrmi	r3, [r6, #0]
 801772a:	3302      	addmi	r3, #2
 801772c:	6033      	strmi	r3, [r6, #0]
 801772e:	6825      	ldr	r5, [r4, #0]
 8017730:	f015 0506 	ands.w	r5, r5, #6
 8017734:	d106      	bne.n	8017744 <_printf_common+0x48>
 8017736:	f104 0a19 	add.w	sl, r4, #25
 801773a:	68e3      	ldr	r3, [r4, #12]
 801773c:	6832      	ldr	r2, [r6, #0]
 801773e:	1a9b      	subs	r3, r3, r2
 8017740:	42ab      	cmp	r3, r5
 8017742:	dc26      	bgt.n	8017792 <_printf_common+0x96>
 8017744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017748:	1e13      	subs	r3, r2, #0
 801774a:	6822      	ldr	r2, [r4, #0]
 801774c:	bf18      	it	ne
 801774e:	2301      	movne	r3, #1
 8017750:	0692      	lsls	r2, r2, #26
 8017752:	d42b      	bmi.n	80177ac <_printf_common+0xb0>
 8017754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017758:	4649      	mov	r1, r9
 801775a:	4638      	mov	r0, r7
 801775c:	47c0      	blx	r8
 801775e:	3001      	adds	r0, #1
 8017760:	d01e      	beq.n	80177a0 <_printf_common+0xa4>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	6922      	ldr	r2, [r4, #16]
 8017766:	f003 0306 	and.w	r3, r3, #6
 801776a:	2b04      	cmp	r3, #4
 801776c:	bf02      	ittt	eq
 801776e:	68e5      	ldreq	r5, [r4, #12]
 8017770:	6833      	ldreq	r3, [r6, #0]
 8017772:	1aed      	subeq	r5, r5, r3
 8017774:	68a3      	ldr	r3, [r4, #8]
 8017776:	bf0c      	ite	eq
 8017778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801777c:	2500      	movne	r5, #0
 801777e:	4293      	cmp	r3, r2
 8017780:	bfc4      	itt	gt
 8017782:	1a9b      	subgt	r3, r3, r2
 8017784:	18ed      	addgt	r5, r5, r3
 8017786:	2600      	movs	r6, #0
 8017788:	341a      	adds	r4, #26
 801778a:	42b5      	cmp	r5, r6
 801778c:	d11a      	bne.n	80177c4 <_printf_common+0xc8>
 801778e:	2000      	movs	r0, #0
 8017790:	e008      	b.n	80177a4 <_printf_common+0xa8>
 8017792:	2301      	movs	r3, #1
 8017794:	4652      	mov	r2, sl
 8017796:	4649      	mov	r1, r9
 8017798:	4638      	mov	r0, r7
 801779a:	47c0      	blx	r8
 801779c:	3001      	adds	r0, #1
 801779e:	d103      	bne.n	80177a8 <_printf_common+0xac>
 80177a0:	f04f 30ff 	mov.w	r0, #4294967295
 80177a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177a8:	3501      	adds	r5, #1
 80177aa:	e7c6      	b.n	801773a <_printf_common+0x3e>
 80177ac:	18e1      	adds	r1, r4, r3
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	2030      	movs	r0, #48	; 0x30
 80177b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80177b6:	4422      	add	r2, r4
 80177b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177c0:	3302      	adds	r3, #2
 80177c2:	e7c7      	b.n	8017754 <_printf_common+0x58>
 80177c4:	2301      	movs	r3, #1
 80177c6:	4622      	mov	r2, r4
 80177c8:	4649      	mov	r1, r9
 80177ca:	4638      	mov	r0, r7
 80177cc:	47c0      	blx	r8
 80177ce:	3001      	adds	r0, #1
 80177d0:	d0e6      	beq.n	80177a0 <_printf_common+0xa4>
 80177d2:	3601      	adds	r6, #1
 80177d4:	e7d9      	b.n	801778a <_printf_common+0x8e>
	...

080177d8 <_printf_i>:
 80177d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177dc:	7e0f      	ldrb	r7, [r1, #24]
 80177de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177e0:	2f78      	cmp	r7, #120	; 0x78
 80177e2:	4691      	mov	r9, r2
 80177e4:	4680      	mov	r8, r0
 80177e6:	460c      	mov	r4, r1
 80177e8:	469a      	mov	sl, r3
 80177ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80177ee:	d807      	bhi.n	8017800 <_printf_i+0x28>
 80177f0:	2f62      	cmp	r7, #98	; 0x62
 80177f2:	d80a      	bhi.n	801780a <_printf_i+0x32>
 80177f4:	2f00      	cmp	r7, #0
 80177f6:	f000 80d4 	beq.w	80179a2 <_printf_i+0x1ca>
 80177fa:	2f58      	cmp	r7, #88	; 0x58
 80177fc:	f000 80c0 	beq.w	8017980 <_printf_i+0x1a8>
 8017800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017808:	e03a      	b.n	8017880 <_printf_i+0xa8>
 801780a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801780e:	2b15      	cmp	r3, #21
 8017810:	d8f6      	bhi.n	8017800 <_printf_i+0x28>
 8017812:	a101      	add	r1, pc, #4	; (adr r1, 8017818 <_printf_i+0x40>)
 8017814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017818:	08017871 	.word	0x08017871
 801781c:	08017885 	.word	0x08017885
 8017820:	08017801 	.word	0x08017801
 8017824:	08017801 	.word	0x08017801
 8017828:	08017801 	.word	0x08017801
 801782c:	08017801 	.word	0x08017801
 8017830:	08017885 	.word	0x08017885
 8017834:	08017801 	.word	0x08017801
 8017838:	08017801 	.word	0x08017801
 801783c:	08017801 	.word	0x08017801
 8017840:	08017801 	.word	0x08017801
 8017844:	08017989 	.word	0x08017989
 8017848:	080178b1 	.word	0x080178b1
 801784c:	08017943 	.word	0x08017943
 8017850:	08017801 	.word	0x08017801
 8017854:	08017801 	.word	0x08017801
 8017858:	080179ab 	.word	0x080179ab
 801785c:	08017801 	.word	0x08017801
 8017860:	080178b1 	.word	0x080178b1
 8017864:	08017801 	.word	0x08017801
 8017868:	08017801 	.word	0x08017801
 801786c:	0801794b 	.word	0x0801794b
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	1d1a      	adds	r2, r3, #4
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	602a      	str	r2, [r5, #0]
 8017878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801787c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017880:	2301      	movs	r3, #1
 8017882:	e09f      	b.n	80179c4 <_printf_i+0x1ec>
 8017884:	6820      	ldr	r0, [r4, #0]
 8017886:	682b      	ldr	r3, [r5, #0]
 8017888:	0607      	lsls	r7, r0, #24
 801788a:	f103 0104 	add.w	r1, r3, #4
 801788e:	6029      	str	r1, [r5, #0]
 8017890:	d501      	bpl.n	8017896 <_printf_i+0xbe>
 8017892:	681e      	ldr	r6, [r3, #0]
 8017894:	e003      	b.n	801789e <_printf_i+0xc6>
 8017896:	0646      	lsls	r6, r0, #25
 8017898:	d5fb      	bpl.n	8017892 <_printf_i+0xba>
 801789a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801789e:	2e00      	cmp	r6, #0
 80178a0:	da03      	bge.n	80178aa <_printf_i+0xd2>
 80178a2:	232d      	movs	r3, #45	; 0x2d
 80178a4:	4276      	negs	r6, r6
 80178a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178aa:	485a      	ldr	r0, [pc, #360]	; (8017a14 <_printf_i+0x23c>)
 80178ac:	230a      	movs	r3, #10
 80178ae:	e012      	b.n	80178d6 <_printf_i+0xfe>
 80178b0:	682b      	ldr	r3, [r5, #0]
 80178b2:	6820      	ldr	r0, [r4, #0]
 80178b4:	1d19      	adds	r1, r3, #4
 80178b6:	6029      	str	r1, [r5, #0]
 80178b8:	0605      	lsls	r5, r0, #24
 80178ba:	d501      	bpl.n	80178c0 <_printf_i+0xe8>
 80178bc:	681e      	ldr	r6, [r3, #0]
 80178be:	e002      	b.n	80178c6 <_printf_i+0xee>
 80178c0:	0641      	lsls	r1, r0, #25
 80178c2:	d5fb      	bpl.n	80178bc <_printf_i+0xe4>
 80178c4:	881e      	ldrh	r6, [r3, #0]
 80178c6:	4853      	ldr	r0, [pc, #332]	; (8017a14 <_printf_i+0x23c>)
 80178c8:	2f6f      	cmp	r7, #111	; 0x6f
 80178ca:	bf0c      	ite	eq
 80178cc:	2308      	moveq	r3, #8
 80178ce:	230a      	movne	r3, #10
 80178d0:	2100      	movs	r1, #0
 80178d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178d6:	6865      	ldr	r5, [r4, #4]
 80178d8:	60a5      	str	r5, [r4, #8]
 80178da:	2d00      	cmp	r5, #0
 80178dc:	bfa2      	ittt	ge
 80178de:	6821      	ldrge	r1, [r4, #0]
 80178e0:	f021 0104 	bicge.w	r1, r1, #4
 80178e4:	6021      	strge	r1, [r4, #0]
 80178e6:	b90e      	cbnz	r6, 80178ec <_printf_i+0x114>
 80178e8:	2d00      	cmp	r5, #0
 80178ea:	d04b      	beq.n	8017984 <_printf_i+0x1ac>
 80178ec:	4615      	mov	r5, r2
 80178ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80178f2:	fb03 6711 	mls	r7, r3, r1, r6
 80178f6:	5dc7      	ldrb	r7, [r0, r7]
 80178f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80178fc:	4637      	mov	r7, r6
 80178fe:	42bb      	cmp	r3, r7
 8017900:	460e      	mov	r6, r1
 8017902:	d9f4      	bls.n	80178ee <_printf_i+0x116>
 8017904:	2b08      	cmp	r3, #8
 8017906:	d10b      	bne.n	8017920 <_printf_i+0x148>
 8017908:	6823      	ldr	r3, [r4, #0]
 801790a:	07de      	lsls	r6, r3, #31
 801790c:	d508      	bpl.n	8017920 <_printf_i+0x148>
 801790e:	6923      	ldr	r3, [r4, #16]
 8017910:	6861      	ldr	r1, [r4, #4]
 8017912:	4299      	cmp	r1, r3
 8017914:	bfde      	ittt	le
 8017916:	2330      	movle	r3, #48	; 0x30
 8017918:	f805 3c01 	strble.w	r3, [r5, #-1]
 801791c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017920:	1b52      	subs	r2, r2, r5
 8017922:	6122      	str	r2, [r4, #16]
 8017924:	f8cd a000 	str.w	sl, [sp]
 8017928:	464b      	mov	r3, r9
 801792a:	aa03      	add	r2, sp, #12
 801792c:	4621      	mov	r1, r4
 801792e:	4640      	mov	r0, r8
 8017930:	f7ff fee4 	bl	80176fc <_printf_common>
 8017934:	3001      	adds	r0, #1
 8017936:	d14a      	bne.n	80179ce <_printf_i+0x1f6>
 8017938:	f04f 30ff 	mov.w	r0, #4294967295
 801793c:	b004      	add	sp, #16
 801793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017942:	6823      	ldr	r3, [r4, #0]
 8017944:	f043 0320 	orr.w	r3, r3, #32
 8017948:	6023      	str	r3, [r4, #0]
 801794a:	4833      	ldr	r0, [pc, #204]	; (8017a18 <_printf_i+0x240>)
 801794c:	2778      	movs	r7, #120	; 0x78
 801794e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	6829      	ldr	r1, [r5, #0]
 8017956:	061f      	lsls	r7, r3, #24
 8017958:	f851 6b04 	ldr.w	r6, [r1], #4
 801795c:	d402      	bmi.n	8017964 <_printf_i+0x18c>
 801795e:	065f      	lsls	r7, r3, #25
 8017960:	bf48      	it	mi
 8017962:	b2b6      	uxthmi	r6, r6
 8017964:	07df      	lsls	r7, r3, #31
 8017966:	bf48      	it	mi
 8017968:	f043 0320 	orrmi.w	r3, r3, #32
 801796c:	6029      	str	r1, [r5, #0]
 801796e:	bf48      	it	mi
 8017970:	6023      	strmi	r3, [r4, #0]
 8017972:	b91e      	cbnz	r6, 801797c <_printf_i+0x1a4>
 8017974:	6823      	ldr	r3, [r4, #0]
 8017976:	f023 0320 	bic.w	r3, r3, #32
 801797a:	6023      	str	r3, [r4, #0]
 801797c:	2310      	movs	r3, #16
 801797e:	e7a7      	b.n	80178d0 <_printf_i+0xf8>
 8017980:	4824      	ldr	r0, [pc, #144]	; (8017a14 <_printf_i+0x23c>)
 8017982:	e7e4      	b.n	801794e <_printf_i+0x176>
 8017984:	4615      	mov	r5, r2
 8017986:	e7bd      	b.n	8017904 <_printf_i+0x12c>
 8017988:	682b      	ldr	r3, [r5, #0]
 801798a:	6826      	ldr	r6, [r4, #0]
 801798c:	6961      	ldr	r1, [r4, #20]
 801798e:	1d18      	adds	r0, r3, #4
 8017990:	6028      	str	r0, [r5, #0]
 8017992:	0635      	lsls	r5, r6, #24
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	d501      	bpl.n	801799c <_printf_i+0x1c4>
 8017998:	6019      	str	r1, [r3, #0]
 801799a:	e002      	b.n	80179a2 <_printf_i+0x1ca>
 801799c:	0670      	lsls	r0, r6, #25
 801799e:	d5fb      	bpl.n	8017998 <_printf_i+0x1c0>
 80179a0:	8019      	strh	r1, [r3, #0]
 80179a2:	2300      	movs	r3, #0
 80179a4:	6123      	str	r3, [r4, #16]
 80179a6:	4615      	mov	r5, r2
 80179a8:	e7bc      	b.n	8017924 <_printf_i+0x14c>
 80179aa:	682b      	ldr	r3, [r5, #0]
 80179ac:	1d1a      	adds	r2, r3, #4
 80179ae:	602a      	str	r2, [r5, #0]
 80179b0:	681d      	ldr	r5, [r3, #0]
 80179b2:	6862      	ldr	r2, [r4, #4]
 80179b4:	2100      	movs	r1, #0
 80179b6:	4628      	mov	r0, r5
 80179b8:	f7e8 fc12 	bl	80001e0 <memchr>
 80179bc:	b108      	cbz	r0, 80179c2 <_printf_i+0x1ea>
 80179be:	1b40      	subs	r0, r0, r5
 80179c0:	6060      	str	r0, [r4, #4]
 80179c2:	6863      	ldr	r3, [r4, #4]
 80179c4:	6123      	str	r3, [r4, #16]
 80179c6:	2300      	movs	r3, #0
 80179c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179cc:	e7aa      	b.n	8017924 <_printf_i+0x14c>
 80179ce:	6923      	ldr	r3, [r4, #16]
 80179d0:	462a      	mov	r2, r5
 80179d2:	4649      	mov	r1, r9
 80179d4:	4640      	mov	r0, r8
 80179d6:	47d0      	blx	sl
 80179d8:	3001      	adds	r0, #1
 80179da:	d0ad      	beq.n	8017938 <_printf_i+0x160>
 80179dc:	6823      	ldr	r3, [r4, #0]
 80179de:	079b      	lsls	r3, r3, #30
 80179e0:	d413      	bmi.n	8017a0a <_printf_i+0x232>
 80179e2:	68e0      	ldr	r0, [r4, #12]
 80179e4:	9b03      	ldr	r3, [sp, #12]
 80179e6:	4298      	cmp	r0, r3
 80179e8:	bfb8      	it	lt
 80179ea:	4618      	movlt	r0, r3
 80179ec:	e7a6      	b.n	801793c <_printf_i+0x164>
 80179ee:	2301      	movs	r3, #1
 80179f0:	4632      	mov	r2, r6
 80179f2:	4649      	mov	r1, r9
 80179f4:	4640      	mov	r0, r8
 80179f6:	47d0      	blx	sl
 80179f8:	3001      	adds	r0, #1
 80179fa:	d09d      	beq.n	8017938 <_printf_i+0x160>
 80179fc:	3501      	adds	r5, #1
 80179fe:	68e3      	ldr	r3, [r4, #12]
 8017a00:	9903      	ldr	r1, [sp, #12]
 8017a02:	1a5b      	subs	r3, r3, r1
 8017a04:	42ab      	cmp	r3, r5
 8017a06:	dcf2      	bgt.n	80179ee <_printf_i+0x216>
 8017a08:	e7eb      	b.n	80179e2 <_printf_i+0x20a>
 8017a0a:	2500      	movs	r5, #0
 8017a0c:	f104 0619 	add.w	r6, r4, #25
 8017a10:	e7f5      	b.n	80179fe <_printf_i+0x226>
 8017a12:	bf00      	nop
 8017a14:	0801be4d 	.word	0x0801be4d
 8017a18:	0801be5e 	.word	0x0801be5e

08017a1c <__sflush_r>:
 8017a1c:	898a      	ldrh	r2, [r1, #12]
 8017a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a22:	4605      	mov	r5, r0
 8017a24:	0710      	lsls	r0, r2, #28
 8017a26:	460c      	mov	r4, r1
 8017a28:	d458      	bmi.n	8017adc <__sflush_r+0xc0>
 8017a2a:	684b      	ldr	r3, [r1, #4]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	dc05      	bgt.n	8017a3c <__sflush_r+0x20>
 8017a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	dc02      	bgt.n	8017a3c <__sflush_r+0x20>
 8017a36:	2000      	movs	r0, #0
 8017a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a3e:	2e00      	cmp	r6, #0
 8017a40:	d0f9      	beq.n	8017a36 <__sflush_r+0x1a>
 8017a42:	2300      	movs	r3, #0
 8017a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a48:	682f      	ldr	r7, [r5, #0]
 8017a4a:	6a21      	ldr	r1, [r4, #32]
 8017a4c:	602b      	str	r3, [r5, #0]
 8017a4e:	d032      	beq.n	8017ab6 <__sflush_r+0x9a>
 8017a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a52:	89a3      	ldrh	r3, [r4, #12]
 8017a54:	075a      	lsls	r2, r3, #29
 8017a56:	d505      	bpl.n	8017a64 <__sflush_r+0x48>
 8017a58:	6863      	ldr	r3, [r4, #4]
 8017a5a:	1ac0      	subs	r0, r0, r3
 8017a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a5e:	b10b      	cbz	r3, 8017a64 <__sflush_r+0x48>
 8017a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a62:	1ac0      	subs	r0, r0, r3
 8017a64:	2300      	movs	r3, #0
 8017a66:	4602      	mov	r2, r0
 8017a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a6a:	6a21      	ldr	r1, [r4, #32]
 8017a6c:	4628      	mov	r0, r5
 8017a6e:	47b0      	blx	r6
 8017a70:	1c43      	adds	r3, r0, #1
 8017a72:	89a3      	ldrh	r3, [r4, #12]
 8017a74:	d106      	bne.n	8017a84 <__sflush_r+0x68>
 8017a76:	6829      	ldr	r1, [r5, #0]
 8017a78:	291d      	cmp	r1, #29
 8017a7a:	d82b      	bhi.n	8017ad4 <__sflush_r+0xb8>
 8017a7c:	4a29      	ldr	r2, [pc, #164]	; (8017b24 <__sflush_r+0x108>)
 8017a7e:	410a      	asrs	r2, r1
 8017a80:	07d6      	lsls	r6, r2, #31
 8017a82:	d427      	bmi.n	8017ad4 <__sflush_r+0xb8>
 8017a84:	2200      	movs	r2, #0
 8017a86:	6062      	str	r2, [r4, #4]
 8017a88:	04d9      	lsls	r1, r3, #19
 8017a8a:	6922      	ldr	r2, [r4, #16]
 8017a8c:	6022      	str	r2, [r4, #0]
 8017a8e:	d504      	bpl.n	8017a9a <__sflush_r+0x7e>
 8017a90:	1c42      	adds	r2, r0, #1
 8017a92:	d101      	bne.n	8017a98 <__sflush_r+0x7c>
 8017a94:	682b      	ldr	r3, [r5, #0]
 8017a96:	b903      	cbnz	r3, 8017a9a <__sflush_r+0x7e>
 8017a98:	6560      	str	r0, [r4, #84]	; 0x54
 8017a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a9c:	602f      	str	r7, [r5, #0]
 8017a9e:	2900      	cmp	r1, #0
 8017aa0:	d0c9      	beq.n	8017a36 <__sflush_r+0x1a>
 8017aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017aa6:	4299      	cmp	r1, r3
 8017aa8:	d002      	beq.n	8017ab0 <__sflush_r+0x94>
 8017aaa:	4628      	mov	r0, r5
 8017aac:	f7ff fa8a 	bl	8016fc4 <_free_r>
 8017ab0:	2000      	movs	r0, #0
 8017ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8017ab4:	e7c0      	b.n	8017a38 <__sflush_r+0x1c>
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	4628      	mov	r0, r5
 8017aba:	47b0      	blx	r6
 8017abc:	1c41      	adds	r1, r0, #1
 8017abe:	d1c8      	bne.n	8017a52 <__sflush_r+0x36>
 8017ac0:	682b      	ldr	r3, [r5, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d0c5      	beq.n	8017a52 <__sflush_r+0x36>
 8017ac6:	2b1d      	cmp	r3, #29
 8017ac8:	d001      	beq.n	8017ace <__sflush_r+0xb2>
 8017aca:	2b16      	cmp	r3, #22
 8017acc:	d101      	bne.n	8017ad2 <__sflush_r+0xb6>
 8017ace:	602f      	str	r7, [r5, #0]
 8017ad0:	e7b1      	b.n	8017a36 <__sflush_r+0x1a>
 8017ad2:	89a3      	ldrh	r3, [r4, #12]
 8017ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad8:	81a3      	strh	r3, [r4, #12]
 8017ada:	e7ad      	b.n	8017a38 <__sflush_r+0x1c>
 8017adc:	690f      	ldr	r7, [r1, #16]
 8017ade:	2f00      	cmp	r7, #0
 8017ae0:	d0a9      	beq.n	8017a36 <__sflush_r+0x1a>
 8017ae2:	0793      	lsls	r3, r2, #30
 8017ae4:	680e      	ldr	r6, [r1, #0]
 8017ae6:	bf08      	it	eq
 8017ae8:	694b      	ldreq	r3, [r1, #20]
 8017aea:	600f      	str	r7, [r1, #0]
 8017aec:	bf18      	it	ne
 8017aee:	2300      	movne	r3, #0
 8017af0:	eba6 0807 	sub.w	r8, r6, r7
 8017af4:	608b      	str	r3, [r1, #8]
 8017af6:	f1b8 0f00 	cmp.w	r8, #0
 8017afa:	dd9c      	ble.n	8017a36 <__sflush_r+0x1a>
 8017afc:	6a21      	ldr	r1, [r4, #32]
 8017afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b00:	4643      	mov	r3, r8
 8017b02:	463a      	mov	r2, r7
 8017b04:	4628      	mov	r0, r5
 8017b06:	47b0      	blx	r6
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	dc06      	bgt.n	8017b1a <__sflush_r+0xfe>
 8017b0c:	89a3      	ldrh	r3, [r4, #12]
 8017b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b12:	81a3      	strh	r3, [r4, #12]
 8017b14:	f04f 30ff 	mov.w	r0, #4294967295
 8017b18:	e78e      	b.n	8017a38 <__sflush_r+0x1c>
 8017b1a:	4407      	add	r7, r0
 8017b1c:	eba8 0800 	sub.w	r8, r8, r0
 8017b20:	e7e9      	b.n	8017af6 <__sflush_r+0xda>
 8017b22:	bf00      	nop
 8017b24:	dfbffffe 	.word	0xdfbffffe

08017b28 <_fflush_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	690b      	ldr	r3, [r1, #16]
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	460c      	mov	r4, r1
 8017b30:	b913      	cbnz	r3, 8017b38 <_fflush_r+0x10>
 8017b32:	2500      	movs	r5, #0
 8017b34:	4628      	mov	r0, r5
 8017b36:	bd38      	pop	{r3, r4, r5, pc}
 8017b38:	b118      	cbz	r0, 8017b42 <_fflush_r+0x1a>
 8017b3a:	6a03      	ldr	r3, [r0, #32]
 8017b3c:	b90b      	cbnz	r3, 8017b42 <_fflush_r+0x1a>
 8017b3e:	f7ff f81d 	bl	8016b7c <__sinit>
 8017b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d0f3      	beq.n	8017b32 <_fflush_r+0xa>
 8017b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b4c:	07d0      	lsls	r0, r2, #31
 8017b4e:	d404      	bmi.n	8017b5a <_fflush_r+0x32>
 8017b50:	0599      	lsls	r1, r3, #22
 8017b52:	d402      	bmi.n	8017b5a <_fflush_r+0x32>
 8017b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b56:	f7ff fa06 	bl	8016f66 <__retarget_lock_acquire_recursive>
 8017b5a:	4628      	mov	r0, r5
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	f7ff ff5d 	bl	8017a1c <__sflush_r>
 8017b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b64:	07da      	lsls	r2, r3, #31
 8017b66:	4605      	mov	r5, r0
 8017b68:	d4e4      	bmi.n	8017b34 <_fflush_r+0xc>
 8017b6a:	89a3      	ldrh	r3, [r4, #12]
 8017b6c:	059b      	lsls	r3, r3, #22
 8017b6e:	d4e1      	bmi.n	8017b34 <_fflush_r+0xc>
 8017b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b72:	f7ff f9f9 	bl	8016f68 <__retarget_lock_release_recursive>
 8017b76:	e7dd      	b.n	8017b34 <_fflush_r+0xc>

08017b78 <fiprintf>:
 8017b78:	b40e      	push	{r1, r2, r3}
 8017b7a:	b503      	push	{r0, r1, lr}
 8017b7c:	4601      	mov	r1, r0
 8017b7e:	ab03      	add	r3, sp, #12
 8017b80:	4805      	ldr	r0, [pc, #20]	; (8017b98 <fiprintf+0x20>)
 8017b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b86:	6800      	ldr	r0, [r0, #0]
 8017b88:	9301      	str	r3, [sp, #4]
 8017b8a:	f7ff fc9d 	bl	80174c8 <_vfiprintf_r>
 8017b8e:	b002      	add	sp, #8
 8017b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b94:	b003      	add	sp, #12
 8017b96:	4770      	bx	lr
 8017b98:	20000088 	.word	0x20000088

08017b9c <__swbuf_r>:
 8017b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9e:	460e      	mov	r6, r1
 8017ba0:	4614      	mov	r4, r2
 8017ba2:	4605      	mov	r5, r0
 8017ba4:	b118      	cbz	r0, 8017bae <__swbuf_r+0x12>
 8017ba6:	6a03      	ldr	r3, [r0, #32]
 8017ba8:	b90b      	cbnz	r3, 8017bae <__swbuf_r+0x12>
 8017baa:	f7fe ffe7 	bl	8016b7c <__sinit>
 8017bae:	69a3      	ldr	r3, [r4, #24]
 8017bb0:	60a3      	str	r3, [r4, #8]
 8017bb2:	89a3      	ldrh	r3, [r4, #12]
 8017bb4:	071a      	lsls	r2, r3, #28
 8017bb6:	d525      	bpl.n	8017c04 <__swbuf_r+0x68>
 8017bb8:	6923      	ldr	r3, [r4, #16]
 8017bba:	b31b      	cbz	r3, 8017c04 <__swbuf_r+0x68>
 8017bbc:	6823      	ldr	r3, [r4, #0]
 8017bbe:	6922      	ldr	r2, [r4, #16]
 8017bc0:	1a98      	subs	r0, r3, r2
 8017bc2:	6963      	ldr	r3, [r4, #20]
 8017bc4:	b2f6      	uxtb	r6, r6
 8017bc6:	4283      	cmp	r3, r0
 8017bc8:	4637      	mov	r7, r6
 8017bca:	dc04      	bgt.n	8017bd6 <__swbuf_r+0x3a>
 8017bcc:	4621      	mov	r1, r4
 8017bce:	4628      	mov	r0, r5
 8017bd0:	f7ff ffaa 	bl	8017b28 <_fflush_r>
 8017bd4:	b9e0      	cbnz	r0, 8017c10 <__swbuf_r+0x74>
 8017bd6:	68a3      	ldr	r3, [r4, #8]
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	60a3      	str	r3, [r4, #8]
 8017bdc:	6823      	ldr	r3, [r4, #0]
 8017bde:	1c5a      	adds	r2, r3, #1
 8017be0:	6022      	str	r2, [r4, #0]
 8017be2:	701e      	strb	r6, [r3, #0]
 8017be4:	6962      	ldr	r2, [r4, #20]
 8017be6:	1c43      	adds	r3, r0, #1
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d004      	beq.n	8017bf6 <__swbuf_r+0x5a>
 8017bec:	89a3      	ldrh	r3, [r4, #12]
 8017bee:	07db      	lsls	r3, r3, #31
 8017bf0:	d506      	bpl.n	8017c00 <__swbuf_r+0x64>
 8017bf2:	2e0a      	cmp	r6, #10
 8017bf4:	d104      	bne.n	8017c00 <__swbuf_r+0x64>
 8017bf6:	4621      	mov	r1, r4
 8017bf8:	4628      	mov	r0, r5
 8017bfa:	f7ff ff95 	bl	8017b28 <_fflush_r>
 8017bfe:	b938      	cbnz	r0, 8017c10 <__swbuf_r+0x74>
 8017c00:	4638      	mov	r0, r7
 8017c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c04:	4621      	mov	r1, r4
 8017c06:	4628      	mov	r0, r5
 8017c08:	f000 f806 	bl	8017c18 <__swsetup_r>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d0d5      	beq.n	8017bbc <__swbuf_r+0x20>
 8017c10:	f04f 37ff 	mov.w	r7, #4294967295
 8017c14:	e7f4      	b.n	8017c00 <__swbuf_r+0x64>
	...

08017c18 <__swsetup_r>:
 8017c18:	b538      	push	{r3, r4, r5, lr}
 8017c1a:	4b2a      	ldr	r3, [pc, #168]	; (8017cc4 <__swsetup_r+0xac>)
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	6818      	ldr	r0, [r3, #0]
 8017c20:	460c      	mov	r4, r1
 8017c22:	b118      	cbz	r0, 8017c2c <__swsetup_r+0x14>
 8017c24:	6a03      	ldr	r3, [r0, #32]
 8017c26:	b90b      	cbnz	r3, 8017c2c <__swsetup_r+0x14>
 8017c28:	f7fe ffa8 	bl	8016b7c <__sinit>
 8017c2c:	89a3      	ldrh	r3, [r4, #12]
 8017c2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c32:	0718      	lsls	r0, r3, #28
 8017c34:	d422      	bmi.n	8017c7c <__swsetup_r+0x64>
 8017c36:	06d9      	lsls	r1, r3, #27
 8017c38:	d407      	bmi.n	8017c4a <__swsetup_r+0x32>
 8017c3a:	2309      	movs	r3, #9
 8017c3c:	602b      	str	r3, [r5, #0]
 8017c3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c42:	81a3      	strh	r3, [r4, #12]
 8017c44:	f04f 30ff 	mov.w	r0, #4294967295
 8017c48:	e034      	b.n	8017cb4 <__swsetup_r+0x9c>
 8017c4a:	0758      	lsls	r0, r3, #29
 8017c4c:	d512      	bpl.n	8017c74 <__swsetup_r+0x5c>
 8017c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c50:	b141      	cbz	r1, 8017c64 <__swsetup_r+0x4c>
 8017c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c56:	4299      	cmp	r1, r3
 8017c58:	d002      	beq.n	8017c60 <__swsetup_r+0x48>
 8017c5a:	4628      	mov	r0, r5
 8017c5c:	f7ff f9b2 	bl	8016fc4 <_free_r>
 8017c60:	2300      	movs	r3, #0
 8017c62:	6363      	str	r3, [r4, #52]	; 0x34
 8017c64:	89a3      	ldrh	r3, [r4, #12]
 8017c66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c6a:	81a3      	strh	r3, [r4, #12]
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	6063      	str	r3, [r4, #4]
 8017c70:	6923      	ldr	r3, [r4, #16]
 8017c72:	6023      	str	r3, [r4, #0]
 8017c74:	89a3      	ldrh	r3, [r4, #12]
 8017c76:	f043 0308 	orr.w	r3, r3, #8
 8017c7a:	81a3      	strh	r3, [r4, #12]
 8017c7c:	6923      	ldr	r3, [r4, #16]
 8017c7e:	b94b      	cbnz	r3, 8017c94 <__swsetup_r+0x7c>
 8017c80:	89a3      	ldrh	r3, [r4, #12]
 8017c82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c8a:	d003      	beq.n	8017c94 <__swsetup_r+0x7c>
 8017c8c:	4621      	mov	r1, r4
 8017c8e:	4628      	mov	r0, r5
 8017c90:	f000 f886 	bl	8017da0 <__smakebuf_r>
 8017c94:	89a0      	ldrh	r0, [r4, #12]
 8017c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c9a:	f010 0301 	ands.w	r3, r0, #1
 8017c9e:	d00a      	beq.n	8017cb6 <__swsetup_r+0x9e>
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	60a3      	str	r3, [r4, #8]
 8017ca4:	6963      	ldr	r3, [r4, #20]
 8017ca6:	425b      	negs	r3, r3
 8017ca8:	61a3      	str	r3, [r4, #24]
 8017caa:	6923      	ldr	r3, [r4, #16]
 8017cac:	b943      	cbnz	r3, 8017cc0 <__swsetup_r+0xa8>
 8017cae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017cb2:	d1c4      	bne.n	8017c3e <__swsetup_r+0x26>
 8017cb4:	bd38      	pop	{r3, r4, r5, pc}
 8017cb6:	0781      	lsls	r1, r0, #30
 8017cb8:	bf58      	it	pl
 8017cba:	6963      	ldrpl	r3, [r4, #20]
 8017cbc:	60a3      	str	r3, [r4, #8]
 8017cbe:	e7f4      	b.n	8017caa <__swsetup_r+0x92>
 8017cc0:	2000      	movs	r0, #0
 8017cc2:	e7f7      	b.n	8017cb4 <__swsetup_r+0x9c>
 8017cc4:	20000088 	.word	0x20000088

08017cc8 <_sbrk_r>:
 8017cc8:	b538      	push	{r3, r4, r5, lr}
 8017cca:	4d06      	ldr	r5, [pc, #24]	; (8017ce4 <_sbrk_r+0x1c>)
 8017ccc:	2300      	movs	r3, #0
 8017cce:	4604      	mov	r4, r0
 8017cd0:	4608      	mov	r0, r1
 8017cd2:	602b      	str	r3, [r5, #0]
 8017cd4:	f7e9 f8e8 	bl	8000ea8 <_sbrk>
 8017cd8:	1c43      	adds	r3, r0, #1
 8017cda:	d102      	bne.n	8017ce2 <_sbrk_r+0x1a>
 8017cdc:	682b      	ldr	r3, [r5, #0]
 8017cde:	b103      	cbz	r3, 8017ce2 <_sbrk_r+0x1a>
 8017ce0:	6023      	str	r3, [r4, #0]
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	2000d3a8 	.word	0x2000d3a8

08017ce8 <abort>:
 8017ce8:	b508      	push	{r3, lr}
 8017cea:	2006      	movs	r0, #6
 8017cec:	f000 f8bc 	bl	8017e68 <raise>
 8017cf0:	2001      	movs	r0, #1
 8017cf2:	f7e9 f861 	bl	8000db8 <_exit>

08017cf6 <_realloc_r>:
 8017cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cfa:	4680      	mov	r8, r0
 8017cfc:	4614      	mov	r4, r2
 8017cfe:	460e      	mov	r6, r1
 8017d00:	b921      	cbnz	r1, 8017d0c <_realloc_r+0x16>
 8017d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d06:	4611      	mov	r1, r2
 8017d08:	f7ff b9d0 	b.w	80170ac <_malloc_r>
 8017d0c:	b92a      	cbnz	r2, 8017d1a <_realloc_r+0x24>
 8017d0e:	f7ff f959 	bl	8016fc4 <_free_r>
 8017d12:	4625      	mov	r5, r4
 8017d14:	4628      	mov	r0, r5
 8017d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d1a:	f000 f8e3 	bl	8017ee4 <_malloc_usable_size_r>
 8017d1e:	4284      	cmp	r4, r0
 8017d20:	4607      	mov	r7, r0
 8017d22:	d802      	bhi.n	8017d2a <_realloc_r+0x34>
 8017d24:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d28:	d812      	bhi.n	8017d50 <_realloc_r+0x5a>
 8017d2a:	4621      	mov	r1, r4
 8017d2c:	4640      	mov	r0, r8
 8017d2e:	f7ff f9bd 	bl	80170ac <_malloc_r>
 8017d32:	4605      	mov	r5, r0
 8017d34:	2800      	cmp	r0, #0
 8017d36:	d0ed      	beq.n	8017d14 <_realloc_r+0x1e>
 8017d38:	42bc      	cmp	r4, r7
 8017d3a:	4622      	mov	r2, r4
 8017d3c:	4631      	mov	r1, r6
 8017d3e:	bf28      	it	cs
 8017d40:	463a      	movcs	r2, r7
 8017d42:	f7ff f912 	bl	8016f6a <memcpy>
 8017d46:	4631      	mov	r1, r6
 8017d48:	4640      	mov	r0, r8
 8017d4a:	f7ff f93b 	bl	8016fc4 <_free_r>
 8017d4e:	e7e1      	b.n	8017d14 <_realloc_r+0x1e>
 8017d50:	4635      	mov	r5, r6
 8017d52:	e7df      	b.n	8017d14 <_realloc_r+0x1e>

08017d54 <__swhatbuf_r>:
 8017d54:	b570      	push	{r4, r5, r6, lr}
 8017d56:	460c      	mov	r4, r1
 8017d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d5c:	2900      	cmp	r1, #0
 8017d5e:	b096      	sub	sp, #88	; 0x58
 8017d60:	4615      	mov	r5, r2
 8017d62:	461e      	mov	r6, r3
 8017d64:	da0d      	bge.n	8017d82 <__swhatbuf_r+0x2e>
 8017d66:	89a3      	ldrh	r3, [r4, #12]
 8017d68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017d6c:	f04f 0100 	mov.w	r1, #0
 8017d70:	bf0c      	ite	eq
 8017d72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017d76:	2340      	movne	r3, #64	; 0x40
 8017d78:	2000      	movs	r0, #0
 8017d7a:	6031      	str	r1, [r6, #0]
 8017d7c:	602b      	str	r3, [r5, #0]
 8017d7e:	b016      	add	sp, #88	; 0x58
 8017d80:	bd70      	pop	{r4, r5, r6, pc}
 8017d82:	466a      	mov	r2, sp
 8017d84:	f000 f878 	bl	8017e78 <_fstat_r>
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	dbec      	blt.n	8017d66 <__swhatbuf_r+0x12>
 8017d8c:	9901      	ldr	r1, [sp, #4]
 8017d8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017d92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017d96:	4259      	negs	r1, r3
 8017d98:	4159      	adcs	r1, r3
 8017d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d9e:	e7eb      	b.n	8017d78 <__swhatbuf_r+0x24>

08017da0 <__smakebuf_r>:
 8017da0:	898b      	ldrh	r3, [r1, #12]
 8017da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017da4:	079d      	lsls	r5, r3, #30
 8017da6:	4606      	mov	r6, r0
 8017da8:	460c      	mov	r4, r1
 8017daa:	d507      	bpl.n	8017dbc <__smakebuf_r+0x1c>
 8017dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	6123      	str	r3, [r4, #16]
 8017db4:	2301      	movs	r3, #1
 8017db6:	6163      	str	r3, [r4, #20]
 8017db8:	b002      	add	sp, #8
 8017dba:	bd70      	pop	{r4, r5, r6, pc}
 8017dbc:	ab01      	add	r3, sp, #4
 8017dbe:	466a      	mov	r2, sp
 8017dc0:	f7ff ffc8 	bl	8017d54 <__swhatbuf_r>
 8017dc4:	9900      	ldr	r1, [sp, #0]
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	4630      	mov	r0, r6
 8017dca:	f7ff f96f 	bl	80170ac <_malloc_r>
 8017dce:	b948      	cbnz	r0, 8017de4 <__smakebuf_r+0x44>
 8017dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dd4:	059a      	lsls	r2, r3, #22
 8017dd6:	d4ef      	bmi.n	8017db8 <__smakebuf_r+0x18>
 8017dd8:	f023 0303 	bic.w	r3, r3, #3
 8017ddc:	f043 0302 	orr.w	r3, r3, #2
 8017de0:	81a3      	strh	r3, [r4, #12]
 8017de2:	e7e3      	b.n	8017dac <__smakebuf_r+0xc>
 8017de4:	89a3      	ldrh	r3, [r4, #12]
 8017de6:	6020      	str	r0, [r4, #0]
 8017de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017dec:	81a3      	strh	r3, [r4, #12]
 8017dee:	9b00      	ldr	r3, [sp, #0]
 8017df0:	6163      	str	r3, [r4, #20]
 8017df2:	9b01      	ldr	r3, [sp, #4]
 8017df4:	6120      	str	r0, [r4, #16]
 8017df6:	b15b      	cbz	r3, 8017e10 <__smakebuf_r+0x70>
 8017df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	f000 f84d 	bl	8017e9c <_isatty_r>
 8017e02:	b128      	cbz	r0, 8017e10 <__smakebuf_r+0x70>
 8017e04:	89a3      	ldrh	r3, [r4, #12]
 8017e06:	f023 0303 	bic.w	r3, r3, #3
 8017e0a:	f043 0301 	orr.w	r3, r3, #1
 8017e0e:	81a3      	strh	r3, [r4, #12]
 8017e10:	89a3      	ldrh	r3, [r4, #12]
 8017e12:	431d      	orrs	r5, r3
 8017e14:	81a5      	strh	r5, [r4, #12]
 8017e16:	e7cf      	b.n	8017db8 <__smakebuf_r+0x18>

08017e18 <_raise_r>:
 8017e18:	291f      	cmp	r1, #31
 8017e1a:	b538      	push	{r3, r4, r5, lr}
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	460d      	mov	r5, r1
 8017e20:	d904      	bls.n	8017e2c <_raise_r+0x14>
 8017e22:	2316      	movs	r3, #22
 8017e24:	6003      	str	r3, [r0, #0]
 8017e26:	f04f 30ff 	mov.w	r0, #4294967295
 8017e2a:	bd38      	pop	{r3, r4, r5, pc}
 8017e2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017e2e:	b112      	cbz	r2, 8017e36 <_raise_r+0x1e>
 8017e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e34:	b94b      	cbnz	r3, 8017e4a <_raise_r+0x32>
 8017e36:	4620      	mov	r0, r4
 8017e38:	f000 f852 	bl	8017ee0 <_getpid_r>
 8017e3c:	462a      	mov	r2, r5
 8017e3e:	4601      	mov	r1, r0
 8017e40:	4620      	mov	r0, r4
 8017e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e46:	f000 b839 	b.w	8017ebc <_kill_r>
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d00a      	beq.n	8017e64 <_raise_r+0x4c>
 8017e4e:	1c59      	adds	r1, r3, #1
 8017e50:	d103      	bne.n	8017e5a <_raise_r+0x42>
 8017e52:	2316      	movs	r3, #22
 8017e54:	6003      	str	r3, [r0, #0]
 8017e56:	2001      	movs	r0, #1
 8017e58:	e7e7      	b.n	8017e2a <_raise_r+0x12>
 8017e5a:	2400      	movs	r4, #0
 8017e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e60:	4628      	mov	r0, r5
 8017e62:	4798      	blx	r3
 8017e64:	2000      	movs	r0, #0
 8017e66:	e7e0      	b.n	8017e2a <_raise_r+0x12>

08017e68 <raise>:
 8017e68:	4b02      	ldr	r3, [pc, #8]	; (8017e74 <raise+0xc>)
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	6818      	ldr	r0, [r3, #0]
 8017e6e:	f7ff bfd3 	b.w	8017e18 <_raise_r>
 8017e72:	bf00      	nop
 8017e74:	20000088 	.word	0x20000088

08017e78 <_fstat_r>:
 8017e78:	b538      	push	{r3, r4, r5, lr}
 8017e7a:	4d07      	ldr	r5, [pc, #28]	; (8017e98 <_fstat_r+0x20>)
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	4604      	mov	r4, r0
 8017e80:	4608      	mov	r0, r1
 8017e82:	4611      	mov	r1, r2
 8017e84:	602b      	str	r3, [r5, #0]
 8017e86:	f7e8 ffe6 	bl	8000e56 <_fstat>
 8017e8a:	1c43      	adds	r3, r0, #1
 8017e8c:	d102      	bne.n	8017e94 <_fstat_r+0x1c>
 8017e8e:	682b      	ldr	r3, [r5, #0]
 8017e90:	b103      	cbz	r3, 8017e94 <_fstat_r+0x1c>
 8017e92:	6023      	str	r3, [r4, #0]
 8017e94:	bd38      	pop	{r3, r4, r5, pc}
 8017e96:	bf00      	nop
 8017e98:	2000d3a8 	.word	0x2000d3a8

08017e9c <_isatty_r>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4d06      	ldr	r5, [pc, #24]	; (8017eb8 <_isatty_r+0x1c>)
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	4608      	mov	r0, r1
 8017ea6:	602b      	str	r3, [r5, #0]
 8017ea8:	f7e8 ffe5 	bl	8000e76 <_isatty>
 8017eac:	1c43      	adds	r3, r0, #1
 8017eae:	d102      	bne.n	8017eb6 <_isatty_r+0x1a>
 8017eb0:	682b      	ldr	r3, [r5, #0]
 8017eb2:	b103      	cbz	r3, 8017eb6 <_isatty_r+0x1a>
 8017eb4:	6023      	str	r3, [r4, #0]
 8017eb6:	bd38      	pop	{r3, r4, r5, pc}
 8017eb8:	2000d3a8 	.word	0x2000d3a8

08017ebc <_kill_r>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	4d07      	ldr	r5, [pc, #28]	; (8017edc <_kill_r+0x20>)
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	4608      	mov	r0, r1
 8017ec6:	4611      	mov	r1, r2
 8017ec8:	602b      	str	r3, [r5, #0]
 8017eca:	f7e8 ff63 	bl	8000d94 <_kill>
 8017ece:	1c43      	adds	r3, r0, #1
 8017ed0:	d102      	bne.n	8017ed8 <_kill_r+0x1c>
 8017ed2:	682b      	ldr	r3, [r5, #0]
 8017ed4:	b103      	cbz	r3, 8017ed8 <_kill_r+0x1c>
 8017ed6:	6023      	str	r3, [r4, #0]
 8017ed8:	bd38      	pop	{r3, r4, r5, pc}
 8017eda:	bf00      	nop
 8017edc:	2000d3a8 	.word	0x2000d3a8

08017ee0 <_getpid_r>:
 8017ee0:	f7e8 bf50 	b.w	8000d84 <_getpid>

08017ee4 <_malloc_usable_size_r>:
 8017ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ee8:	1f18      	subs	r0, r3, #4
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	bfbc      	itt	lt
 8017eee:	580b      	ldrlt	r3, [r1, r0]
 8017ef0:	18c0      	addlt	r0, r0, r3
 8017ef2:	4770      	bx	lr

08017ef4 <_init>:
 8017ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ef6:	bf00      	nop
 8017ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017efa:	bc08      	pop	{r3}
 8017efc:	469e      	mov	lr, r3
 8017efe:	4770      	bx	lr

08017f00 <_fini>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	bf00      	nop
 8017f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f06:	bc08      	pop	{r3}
 8017f08:	469e      	mov	lr, r3
 8017f0a:	4770      	bx	lr
